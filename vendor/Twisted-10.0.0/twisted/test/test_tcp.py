begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorTCP}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'socket'
op|','
name|'random'
op|','
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'msg'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'reactor'
op|','
name|'defer'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'IHalfCloseableProtocol'
op|','
name|'IPullProducer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'policies'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'AccumulatingProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loopUntil
name|'def'
name|'loopUntil'
op|'('
name|'predicate'
op|','
name|'interval'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Poor excuse for an event notification helper.  This polls a condition and\n    calls back a Deferred when it is seen to be true.\n\n    Do not use this function.\n    """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'task'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'res'
op|'='
name|'predicate'
op|'('
op|')'
newline|'\n'
name|'if'
name|'res'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'res'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'call'
op|'='
name|'task'
op|'.'
name|'LoopingCall'
op|'('
name|'check'
op|')'
newline|'\n'
DECL|function|stop
name|'def'
name|'stop'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'call'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'stop'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'call'
op|'.'
name|'start'
op|'('
name|'interval'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addErrback'
op|'('
name|'d'
op|'.'
name|'errback'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClosingProtocol
dedent|''
name|'class'
name|'ClosingProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ClosingFactory
dedent|''
dedent|''
name|'class'
name|'ClosingFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory that closes port immediatley."""'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'conn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'return'
name|'ClosingProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyProtocolFactoryMixin
dedent|''
dedent|''
name|'class'
name|'MyProtocolFactoryMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Mixin for factories which create L{AccumulatingProtocol} instances.\n\n    @type protocolFactory: no-argument callable\n    @ivar protocolFactory: Factory for protocols - takes the place of the\n        typical C{protocol} attribute of factories (but that name is used by\n        this class for something else).\n\n    @type protocolConnectionMade: L{NoneType} or L{defer.Deferred}\n    @ivar protocolConnectionMade: When an instance of L{AccumulatingProtocol}\n        is connected, if this is not C{None}, the L{Deferred} will be called\n        back with the protocol instance and the attribute set to C{None}.\n\n    @type protocolConnectionLost: L{NoneType} or L{defer.Deferred}\n    @ivar protocolConnectionLost: When an instance of L{AccumulatingProtocol}\n        is created, this will be set as its C{closedDeferred} attribute and\n        then this attribute will be set to C{None} so the L{defer.Deferred} is\n        not used by more than one protocol.\n\n    @ivar protocol: The most recently created L{AccumulatingProtocol} instance\n        which was returned from C{buildProtocol}.\n\n    @type called: C{int}\n    @ivar called: A counter which is incremented each time C{buildProtocol}\n        is called.\n\n    @ivar peerAddresses: A C{list} of the addresses passed to C{buildProtocol}.\n    """'
newline|'\n'
DECL|variable|protocolFactory
name|'protocolFactory'
op|'='
name|'AccumulatingProtocol'
newline|'\n'
nl|'\n'
DECL|variable|protocolConnectionMade
name|'protocolConnectionMade'
op|'='
name|'None'
newline|'\n'
DECL|variable|protocolConnectionLost
name|'protocolConnectionLost'
op|'='
name|'None'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'None'
newline|'\n'
DECL|variable|called
name|'called'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'peerAddresses'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a L{AccumulatingProtocol} and set it up to be able to perform\n        callbacks.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'peerAddresses'
op|'.'
name|'append'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'called'
op|'+='
number|'1'
newline|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'protocolFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'closedDeferred'
op|'='
name|'self'
op|'.'
name|'protocolConnectionLost'
newline|'\n'
name|'self'
op|'.'
name|'protocolConnectionLost'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyServerFactory
dedent|''
dedent|''
name|'class'
name|'MyServerFactory'
op|'('
name|'MyProtocolFactoryMixin'
op|','
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Server factory which creates L{AccumulatingProtocol} instances.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyClientFactory
dedent|''
name|'class'
name|'MyClientFactory'
op|'('
name|'MyProtocolFactoryMixin'
op|','
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Client factory which creates L{AccumulatingProtocol} instances.\n    """'
newline|'\n'
DECL|variable|failed
name|'failed'
op|'='
number|'0'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyProtocolFactoryMixin'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failed'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'failDeferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lostReason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopped'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListeningTestCase
dedent|''
dedent|''
name|'class'
name|'ListeningTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_listen
indent|'    '
name|'def'
name|'test_listen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorTCP.listenTCP} returns an object which provides\n        L{IListeningPort}.\n        """'
newline|'\n'
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'p1'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p1'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'interfaces'
op|'.'
name|'IListeningPort'
op|'.'
name|'providedBy'
op|'('
name|'p1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testStopListening
dedent|''
name|'def'
name|'testStopListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{IListeningPort} returned by L{IReactorTCP.listenTCP} can be\n        stopped with its C{stopListening} method.  After the L{Deferred} it\n        (optionally) returns has been called back, the port number can be bound\n        to a new server.\n        """'
newline|'\n'
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'n'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|function|cbStopListening
name|'def'
name|'cbStopListening'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can rebind the port right away'
nl|'\n'
indent|'            '
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
name|'n'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'return'
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStopListening'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testNumberedInterface
dedent|''
name|'def'
name|'testNumberedInterface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
comment|'# listen only on the loopback interface'
nl|'\n'
name|'p1'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'return'
name|'p1'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPortRepr
dedent|''
name|'def'
name|'testPortRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|')'
newline|'\n'
name|'portNo'
op|'='
name|'str'
op|'('
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'repr'
op|'('
name|'p'
op|')'
op|'.'
name|'find'
op|'('
name|'portNo'
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
DECL|function|stoppedListening
name|'def'
name|'stoppedListening'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'repr'
op|'('
name|'p'
op|')'
op|'.'
name|'find'
op|'('
name|'portNo'
op|')'
op|'!='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'stoppedListening'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_serverRepr
dedent|''
name|'def'
name|'test_serverRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the repr string of the server transport get the good port\n        number if the server listens on 0.\n        """'
newline|'\n'
name|'server'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverConnMade'
op|'='
name|'server'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientConnMade'
op|'='
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
op|'('
name|'serverProto'
op|','
name|'clientProto'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'portNumber'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'serverProto'
op|'.'
name|'transport'
op|')'
op|','
nl|'\n'
string|'"<AccumulatingProtocol #0 on %s>"'
op|'%'
op|'('
name|'portNumber'
op|','
op|')'
op|')'
newline|'\n'
name|'serverProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'clientProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverConnMade'
op|','
name|'clientConnMade'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_restartListening
dedent|''
name|'def'
name|'test_restartListening'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop and then try to restart a L{tcp.Port}: after a restart, the\n        server should be able to handle client connections.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStopListening
name|'def'
name|'cbStopListening'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|','
nl|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'close'
op|')'
newline|'\n'
nl|'\n'
DECL|function|close
dedent|''
name|'def'
name|'close'
op|'('
op|'('
name|'serverProto'
op|','
name|'clientProto'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'clientProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'serverProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'cbStopListening'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exceptInStop
dedent|''
name|'def'
name|'test_exceptInStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the server factory raises an exception in C{stopFactory}, the\n        deferred returned by L{tcp.Port.stopListening} should fail with the\n        corresponding error.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
DECL|function|raiseException
name|'def'
name|'raiseException'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"An error"'
op|')'
newline|'\n'
dedent|''
name|'serverFactory'
op|'.'
name|'stopFactory'
op|'='
name|'raiseException'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
op|','
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_restartAfterExcept
dedent|''
name|'def'
name|'test_restartAfterExcept'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Even if the server factory raise an exception in C{stopFactory}, the\n        corresponding C{tcp.Port} instance should be in a sane state and can\n        be restarted.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
DECL|function|raiseException
name|'def'
name|'raiseException'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"An error"'
op|')'
newline|'\n'
dedent|''
name|'serverFactory'
op|'.'
name|'stopFactory'
op|'='
name|'raiseException'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbStopListening
name|'def'
name|'cbStopListening'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'serverFactory'
op|'.'
name|'stopFactory'
newline|'\n'
name|'port'
op|'.'
name|'startListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|','
nl|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'close'
op|')'
newline|'\n'
nl|'\n'
DECL|function|close
dedent|''
name|'def'
name|'close'
op|'('
op|'('
name|'serverProto'
op|','
name|'clientProto'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'clientProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'serverProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|'('
op|')'
op|','
name|'RuntimeError'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbStopListening'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_directConnectionLostCall
dedent|''
name|'def'
name|'test_directConnectionLostCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{connectionLost} is called directly on a port object, it succeeds\n        (and doesn\'t expect the presence of a C{deferred} attribute).\n\n        C{connectionLost} is called by L{reactor.disconnectAll} at shutdown.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'port'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'client'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'client'
op|'.'
name|'failDeferred'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_exceptInConnectionLostCall
dedent|''
name|'def'
name|'test_exceptInConnectionLostCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{connectionLost} is called directory on a port object and that the\n        server factory raises an exception in C{stopFactory}, the exception is\n        passed through to the caller.\n\n        C{connectionLost} is called by L{reactor.disconnectAll} at shutdown.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
DECL|function|raiseException
name|'def'
name|'raiseException'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"An error"'
op|')'
newline|'\n'
dedent|''
name|'serverFactory'
op|'.'
name|'stopFactory'
op|'='
name|'raiseException'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'port'
op|'.'
name|'connectionLost'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|callWithSpew
dedent|''
dedent|''
name|'def'
name|'callWithSpew'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'spewerWithLinenums'
name|'as'
name|'spewer'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'sys'
op|'.'
name|'settrace'
op|'('
name|'spewer'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'sys'
op|'.'
name|'settrace'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|class|LoopbackTestCase
dedent|''
dedent|''
name|'class'
name|'LoopbackTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test loopback connections.\n    """'
newline|'\n'
DECL|member|test_closePortInProtocolFactory
name|'def'
name|'test_closePortInProtocolFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A port created with L{IReactorTCP.listenTCP} can be connected to with\n        L{IReactorTCP.connectTCP}.\n        """'
newline|'\n'
name|'f'
op|'='
name|'ClosingFactory'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'f'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'clientF'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'clientF'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'clientF'
op|'.'
name|'protocol'
op|'.'
name|'made'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'port'
op|'.'
name|'disconnected'
op|')'
newline|'\n'
name|'clientF'
op|'.'
name|'lostReason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'clientF'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_trapCnxDone
dedent|''
name|'def'
name|'_trapCnxDone'
op|'('
name|'self'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'getattr'
op|'('
name|'obj'
op|','
string|"'trap'"
op|','
name|'lambda'
name|'x'
op|':'
name|'None'
op|')'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connectedClientAndServerTest
dedent|''
name|'def'
name|'_connectedClientAndServerTest'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Invoke the given callback with a client protocol and a server protocol\n        which have been connected to each other.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'serverConnMade'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'portNumber'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'clientF'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientF'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'clientConnMade'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'clientF'
op|')'
newline|'\n'
nl|'\n'
name|'connsMade'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverConnMade'
op|','
name|'clientConnMade'
op|']'
op|')'
newline|'\n'
DECL|function|connected
name|'def'
name|'connected'
op|'('
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
newline|'\n'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'clientProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'connsMade'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'return'
name|'connsMade'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tcpNoDelay
dedent|''
name|'def'
name|'test_tcpNoDelay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The transport of a protocol connected with L{IReactorTCP.connectTCP} or\n        L{IReactor.TCP.listenTCP} can have its I{TCP_NODELAY} state inspected\n        and manipulated with L{ITCPTransport.getTcpNoDelay} and\n        L{ITCPTransport.setTcpNoDelay}.\n        """'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
op|'['
name|'serverProtocol'
op|','
name|'clientProtocol'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'transport'
op|'='
name|'p'
op|'.'
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpNoDelay'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'setTcpNoDelay'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpNoDelay'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'setTcpNoDelay'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpNoDelay'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_connectedClientAndServerTest'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_tcpKeepAlive
dedent|''
name|'def'
name|'test_tcpKeepAlive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The transport of a protocol connected with L{IReactorTCP.connectTCP} or\n        L{IReactor.TCP.listenTCP} can have its I{SO_KEEPALIVE} state inspected\n        and manipulated with L{ITCPTransport.getTcpKeepAlive} and\n        L{ITCPTransport.setTcpKeepAlive}.\n        """'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
op|'['
name|'serverProtocol'
op|','
name|'clientProtocol'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'transport'
op|'='
name|'p'
op|'.'
name|'transport'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpKeepAlive'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'setTcpKeepAlive'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpKeepAlive'
op|'('
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'setTcpKeepAlive'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'transport'
op|'.'
name|'getTcpKeepAlive'
op|'('
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_connectedClientAndServerTest'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|testFailing
dedent|''
name|'def'
name|'testFailing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'clientF'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
comment|'# XXX we assume no one is listening on TCP port 69'
nl|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
number|'69'
op|','
name|'clientF'
op|','
name|'timeout'
op|'='
number|'5'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'clientF'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'clientF'
op|'.'
name|'failDeferred'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionRefusedErrorNumber
dedent|''
name|'def'
name|'test_connectionRefusedErrorNumber'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that the error number of the ConnectionRefusedError is\n        ECONNREFUSED, and not some other socket related error.\n        """'
newline|'\n'
nl|'\n'
comment|'# Bind a number of ports in the operating system.  We will attempt'
nl|'\n'
comment|'# to connect to these in turn immediately after closing them, in the'
nl|'\n'
comment|'# hopes that no one else has bound them in the mean time.  Any'
nl|'\n'
comment|'# connection which succeeds is ignored and causes us to move on to'
nl|'\n'
comment|'# the next port.  As soon as a connection attempt fails, we move on'
nl|'\n'
comment|'# to making an assertion about how it failed.  If they all succeed,'
nl|'\n'
comment|'# the test will fail.'
nl|'\n'
nl|'\n'
comment|'# It would be nice to have a simpler, reliable way to cause a'
nl|'\n'
comment|'# connection failure from the platform.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# On Linux (2.6.15), connecting to port 0 always fails.  FreeBSD'
nl|'\n'
comment|'# (5.4) rejects the connection attempt with EADDRNOTAVAIL.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# On FreeBSD (5.4), listening on a port and then repeatedly'
nl|'\n'
comment|'# connecting to it without ever accepting any connections eventually'
nl|'\n'
comment|'# leads to an ECONNREFUSED.  On Linux (2.6.15), a seemingly'
nl|'\n'
comment|'# unbounded number of connections succeed.'
nl|'\n'
nl|'\n'
name|'serverSockets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'serverSocket'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
op|')'
newline|'\n'
name|'serverSocket'
op|'.'
name|'bind'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'serverSocket'
op|'.'
name|'listen'
op|'('
number|'1'
op|')'
newline|'\n'
name|'serverSockets'
op|'.'
name|'append'
op|'('
name|'serverSocket'
op|')'
newline|'\n'
dedent|''
name|'random'
op|'.'
name|'shuffle'
op|'('
name|'serverSockets'
op|')'
newline|'\n'
nl|'\n'
name|'clientCreator'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'protocol'
op|'.'
name|'Protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|function|tryConnectFailure
name|'def'
name|'tryConnectFailure'
op|'('
op|')'
op|':'
newline|'\n'
DECL|function|connected
indent|'            '
name|'def'
name|'connected'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Darn.  Kill it and try again, if there are any tries left.\n                """'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'if'
name|'serverSockets'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'tryConnectFailure'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Could not fail to connect - could not test errno for that case."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'serverSocket'
op|'='
name|'serverSockets'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'serverHost'
op|','
name|'serverPort'
op|'='
name|'serverSocket'
op|'.'
name|'getsockname'
op|'('
op|')'
newline|'\n'
name|'serverSocket'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'connectDeferred'
op|'='
name|'clientCreator'
op|'.'
name|'connectTCP'
op|'('
name|'serverHost'
op|','
name|'serverPort'
op|')'
newline|'\n'
name|'connectDeferred'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'return'
name|'connectDeferred'
newline|'\n'
nl|'\n'
dedent|''
name|'refusedDeferred'
op|'='
name|'tryConnectFailure'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'refusedDeferred'
op|','
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|')'
newline|'\n'
DECL|function|connRefused
name|'def'
name|'connRefused'
op|'('
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc'
op|'.'
name|'osError'
op|','
name|'errno'
op|'.'
name|'ECONNREFUSED'
op|')'
newline|'\n'
dedent|''
name|'refusedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'connRefused'
op|')'
newline|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'passthrough'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'serverSockets'
op|':'
newline|'\n'
indent|'                '
name|'serverSockets'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'passthrough'
newline|'\n'
dedent|''
name|'refusedDeferred'
op|'.'
name|'addBoth'
op|'('
name|'cleanup'
op|')'
newline|'\n'
name|'return'
name|'refusedDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectByServiceFail
dedent|''
name|'def'
name|'test_connectByServiceFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Connecting to a named service which does not exist raises\n        L{error.ServiceNameUnknownError}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'ServiceNameUnknownError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|','
string|'"thisbetternotexist"'
op|','
name|'MyClientFactory'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectByService
dedent|''
name|'def'
name|'test_connectByService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorTCP.connectTCP} accepts the name of a service instead of a\n        port number and connects to the port number associated with that\n        service, as defined by L{socket.getservbyname}.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'serverConnMade'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'clientFactory'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'clientConnMade'
newline|'\n'
nl|'\n'
DECL|function|fakeGetServicePortByName
name|'def'
name|'fakeGetServicePortByName'
op|'('
name|'serviceName'
op|','
name|'protocolName'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'serviceName'
op|'=='
string|"'http'"
name|'and'
name|'protocolName'
op|'=='
string|"'tcp'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'portNumber'
newline|'\n'
dedent|''
name|'return'
number|'10'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'socket'
op|','
string|"'getservbyname'"
op|','
name|'fakeGetServicePortByName'
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
string|"'http'"
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
name|'connMade'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverConnMade'
op|','
name|'clientConnMade'
op|']'
op|')'
newline|'\n'
DECL|function|connected
name|'def'
name|'connected'
op|'('
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'serverFactory'
op|'.'
name|'called'
op|','
nl|'\n'
string|'"Server factory was not called upon to build a protocol."'
op|')'
newline|'\n'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'clientProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'connMade'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'return'
name|'connMade'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StartStopFactory
dedent|''
dedent|''
name|'class'
name|'StartStopFactory'
op|'('
name|'protocol'
op|'.'
name|'Factory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|started
indent|'    '
name|'started'
op|'='
number|'0'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|startFactory
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'started'
name|'or'
name|'self'
op|'.'
name|'stopped'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'started'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'started'
name|'or'
name|'self'
op|'.'
name|'stopped'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stopped'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientStartStopFactory
dedent|''
dedent|''
name|'class'
name|'ClientStartStopFactory'
op|'('
name|'MyClientFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|started
indent|'    '
name|'started'
op|'='
number|'0'
newline|'\n'
DECL|variable|stopped
name|'stopped'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|startFactory
name|'def'
name|'startFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'started'
name|'or'
name|'self'
op|'.'
name|'stopped'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'started'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|stopFactory
dedent|''
name|'def'
name|'stopFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'started'
name|'or'
name|'self'
op|'.'
name|'stopped'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stopped'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FactoryTestCase
dedent|''
dedent|''
name|'class'
name|'FactoryTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for factories."""'
newline|'\n'
nl|'\n'
DECL|member|test_serverStartStop
name|'def'
name|'test_serverStartStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The factory passed to L{IReactorTCP.listenTCP} should be started only\n        when it transitions from being used on no ports to being used on one\n        port and should be stopped only when it transitions from being used on\n        one port to being used on no ports.\n        """'
newline|'\n'
comment|"# Note - this test doesn't need to use listenTCP.  It is exercising"
nl|'\n'
comment|'# logic implemented in Factory.doStart and Factory.doStop, so it could'
nl|'\n'
comment|'# just call that directly.  Some other test can make sure that'
nl|'\n'
comment|'# listenTCP and stopListening correctly call doStart and'
nl|'\n'
comment|'# doStop. -exarkun'
nl|'\n'
nl|'\n'
name|'f'
op|'='
name|'StartStopFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# listen on port'
nl|'\n'
name|'p1'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p1'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'f'
op|'.'
name|'started'
op|','
name|'f'
op|'.'
name|'stopped'
op|')'
op|','
op|'('
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# listen on two more ports'
nl|'\n'
name|'p2'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'p3'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'f'
op|'.'
name|'started'
op|','
name|'f'
op|'.'
name|'stopped'
op|')'
op|','
op|'('
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# close two ports'
nl|'\n'
name|'d1'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'p1'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'p2'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'closedDeferred'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
DECL|function|cbClosed
name|'def'
name|'cbClosed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'f'
op|'.'
name|'started'
op|','
name|'f'
op|'.'
name|'stopped'
op|')'
op|','
op|'('
number|'1'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
comment|'# Close the last port'
nl|'\n'
name|'return'
name|'p3'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'closedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbClosed'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbClosedAll
name|'def'
name|'cbClosedAll'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'('
name|'f'
op|'.'
name|'started'
op|','
name|'f'
op|'.'
name|'stopped'
op|')'
op|','
op|'('
number|'1'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'closedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbClosedAll'
op|')'
newline|'\n'
name|'return'
name|'closedDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clientStartStop
dedent|''
name|'def'
name|'test_clientStartStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The factory passed to L{IReactorTCP.connectTCP} should be started when\n        the connection attempt starts and stopped when it is over.\n        """'
newline|'\n'
name|'f'
op|'='
name|'ClosingFactory'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'f'
op|'.'
name|'port'
op|'='
name|'p'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'ClientStartStopFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'factory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'factory'
op|'.'
name|'started'
op|')'
newline|'\n'
name|'return'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'factory'
op|'.'
name|'stopped'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectorTestCase
dedent|''
dedent|''
name|'class'
name|'ConnectorTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_connectorIdentity
indent|'    '
name|'def'
name|'test_connectorIdentity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorTCP.connectTCP} returns an object which provides\n        L{IConnector}.  The destination of the connector is the address which\n        was passed to C{connectTCP}.  The same connector object is passed to\n        the factory\'s C{startedConnecting} method as to the factory\'s\n        C{clientConnectionLost} method.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'ClosingFactory'
op|'('
op|')'
newline|'\n'
name|'tcpPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tcpPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'tcpPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'serverFactory'
op|'.'
name|'port'
op|'='
name|'tcpPort'
newline|'\n'
nl|'\n'
name|'seenConnectors'
op|'='
op|'['
op|']'
newline|'\n'
name|'seenFailures'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'clientFactory'
op|'='
name|'ClientStartStopFactory'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'clientConnectionLost'
op|'='
op|'('
nl|'\n'
name|'lambda'
name|'connector'
op|','
name|'reason'
op|':'
op|'('
name|'seenConnectors'
op|'.'
name|'append'
op|'('
name|'connector'
op|')'
op|','
nl|'\n'
name|'seenFailures'
op|'.'
name|'append'
op|'('
name|'reason'
op|')'
op|')'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'startedConnecting'
op|'='
name|'seenConnectors'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'clientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'interfaces'
op|'.'
name|'IConnector'
op|'.'
name|'providedBy'
op|'('
name|'connector'
op|')'
op|')'
newline|'\n'
name|'dest'
op|'='
name|'connector'
op|'.'
name|'getDestination'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'type'
op|','
string|'"TCP"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'host'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'port'
op|','
name|'portNumber'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'clientFactory'
op|'.'
name|'stopped'
op|')'
newline|'\n'
DECL|function|clientFactoryStopped
name|'def'
name|'clientFactoryStopped'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'seenFailures'
op|'['
number|'0'
op|']'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'seenConnectors'
op|','
op|'['
name|'connector'
op|','
name|'connector'
op|']'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'clientFactoryStopped'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_userFail
dedent|''
name|'def'
name|'test_userFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{IConnector.stopConnecting} in C{Factory.startedConnecting}\n        results in C{Factory.clientConnectionFailed} being called with\n        L{error.UserError} as the reason.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'tcpPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tcpPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'tcpPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
DECL|function|startedConnecting
name|'def'
name|'startedConnecting'
op|'('
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connector'
op|'.'
name|'stopConnecting'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'clientFactory'
op|'='
name|'ClientStartStopFactory'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'startedConnecting'
op|'='
name|'startedConnecting'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'clientFactory'
op|'.'
name|'stopped'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'clientFactory'
op|'.'
name|'failed'
op|','
number|'1'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'UserError'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reconnect
dedent|''
name|'def'
name|'test_reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{IConnector.connect} in C{Factory.clientConnectionLost} causes\n        a new connection attempt to be made.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'ClosingFactory'
op|'('
op|')'
newline|'\n'
name|'tcpPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'tcpPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'portNumber'
op|'='
name|'tcpPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'serverFactory'
op|'.'
name|'port'
op|'='
name|'tcpPort'
newline|'\n'
nl|'\n'
name|'clientFactory'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|clientConnectionLost
name|'def'
name|'clientConnectionLost'
op|'('
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connector'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'clientFactory'
op|'.'
name|'clientConnectionLost'
op|'='
name|'clientConnectionLost'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNumber'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'clientFactory'
op|'.'
name|'failed'
op|')'
newline|'\n'
DECL|function|reconnectFailed
name|'def'
name|'reconnectFailed'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p'
op|'='
name|'clientFactory'
op|'.'
name|'protocol'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'p'
op|'.'
name|'made'
op|','
name|'p'
op|'.'
name|'closed'
op|')'
op|','
op|'('
number|'1'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionRefusedError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'clientFactory'
op|'.'
name|'stopped'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'reconnectFailed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CannotBindTestCase
dedent|''
dedent|''
name|'class'
name|'CannotBindTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for correct behavior when a reactor cannot bind to the required TCP\n    port.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_cannotBind
name|'def'
name|'test_cannotBind'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorTCP.listenTCP} raises L{error.CannotListenError} if the\n        address to listen on is already in use.\n        """'
newline|'\n'
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'p1'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p1'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'n'
op|'='
name|'p1'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'dest'
op|'='
name|'p1'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'type'
op|','
string|'"TCP"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'host'
op|','
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'dest'
op|'.'
name|'port'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure new listen raises error'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'error'
op|'.'
name|'CannotListenError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|','
name|'n'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|_fireWhenDoneFunc
dedent|''
name|'def'
name|'_fireWhenDoneFunc'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns closure that when called calls f and then callbacks d.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
name|'as'
name|'tputil'
newline|'\n'
DECL|function|newf
name|'def'
name|'newf'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'rtn'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
string|"''"
op|')'
newline|'\n'
name|'return'
name|'rtn'
newline|'\n'
dedent|''
name|'return'
name|'tputil'
op|'.'
name|'mergeFunctionMetadata'
op|'('
name|'f'
op|','
name|'newf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_clientBind
dedent|''
name|'def'
name|'test_clientBind'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorTCP.connectTCP} calls C{Factory.clientConnectionFailed} with\n        L{error.ConnectBindError} if the bind address specified is already in\n        use.\n        """'
newline|'\n'
name|'theDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'sf'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'sf'
op|'.'
name|'startFactory'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
name|'theDeferred'
op|','
name|'sf'
op|'.'
name|'startFactory'
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'sf'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_connect1
name|'def'
name|'_connect1'
op|'('
name|'results'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'cf1'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'cf1'
op|'.'
name|'buildProtocol'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
name|'d'
op|','
name|'cf1'
op|'.'
name|'buildProtocol'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'cf1'
op|','
nl|'\n'
name|'bindAddress'
op|'='
op|'('
string|'"127.0.0.1"'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_conmade'
op|','
name|'cf1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|_conmade
dedent|''
name|'def'
name|'_conmade'
op|'('
name|'results'
op|','
name|'cf1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'cf1'
op|'.'
name|'protocol'
op|'.'
name|'connectionMade'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
nl|'\n'
name|'d'
op|','
name|'cf1'
op|'.'
name|'protocol'
op|'.'
name|'connectionMade'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check1connect2'
op|','
name|'cf1'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|_check1connect2
dedent|''
name|'def'
name|'_check1connect2'
op|'('
name|'results'
op|','
name|'cf1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cf1'
op|'.'
name|'protocol'
op|'.'
name|'made'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'d1'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'cf1'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'cf2'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'cf2'
op|'.'
name|'clientConnectionFailed'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
nl|'\n'
name|'d1'
op|','
name|'cf2'
op|'.'
name|'clientConnectionFailed'
op|')'
newline|'\n'
name|'cf2'
op|'.'
name|'stopFactory'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
name|'d2'
op|','
name|'cf2'
op|'.'
name|'stopFactory'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'cf2'
op|','
nl|'\n'
name|'bindAddress'
op|'='
op|'('
string|'"127.0.0.1"'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'d1'
op|'.'
name|'addCallback'
op|'('
name|'_check2failed'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
newline|'\n'
name|'d2'
op|'.'
name|'addCallback'
op|'('
name|'_check2stopped'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
newline|'\n'
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'d1'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'_stop'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
newline|'\n'
name|'return'
name|'dl'
newline|'\n'
nl|'\n'
DECL|function|_check2failed
dedent|''
name|'def'
name|'_check2failed'
op|'('
name|'results'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cf2'
op|'.'
name|'failed'
op|','
number|'1'
op|')'
newline|'\n'
name|'cf2'
op|'.'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectBindError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'cf2'
op|'.'
name|'reason'
op|'.'
name|'check'
op|'('
name|'error'
op|'.'
name|'ConnectBindError'
op|')'
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|function|_check2stopped
dedent|''
name|'def'
name|'_check2stopped'
op|'('
name|'results'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cf2'
op|'.'
name|'stopped'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'results'
newline|'\n'
nl|'\n'
DECL|function|_stop
dedent|''
name|'def'
name|'_stop'
op|'('
name|'results'
op|','
name|'cf1'
op|','
name|'cf2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check1cleanup'
op|','
name|'cf1'
op|')'
newline|'\n'
name|'cf1'
op|'.'
name|'stopFactory'
op|'='
name|'self'
op|'.'
name|'_fireWhenDoneFunc'
op|'('
name|'d'
op|','
name|'cf1'
op|'.'
name|'stopFactory'
op|')'
newline|'\n'
name|'cf1'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|function|_check1cleanup
dedent|''
name|'def'
name|'_check1cleanup'
op|'('
name|'results'
op|','
name|'cf1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cf1'
op|'.'
name|'stopped'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'theDeferred'
op|'.'
name|'addCallback'
op|'('
name|'_connect1'
op|')'
newline|'\n'
name|'return'
name|'theDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyOtherClientFactory
dedent|''
dedent|''
name|'class'
name|'MyOtherClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|buildProtocol
indent|'    '
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'address'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'AccumulatingProtocol'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protocol'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalRemoteAddressTestCase
dedent|''
dedent|''
name|'class'
name|'LocalRemoteAddressTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for correct getHost/getPeer values and that the correct address is\n    passed to buildProtocol.\n    """'
newline|'\n'
DECL|member|test_hostAddress
name|'def'
name|'test_hostAddress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IListeningPort.getHost} returns the same address as a client\n        connection\'s L{ITCPTransport.getPeer}.\n        """'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverConnectionLost'
op|'='
name|'serverFactory'
op|'.'
name|'protocolConnectionLost'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'serverFactory'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'n'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
name|'clientFactory'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'onConnection'
op|'='
name|'clientFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'n'
op|','
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|']'
op|','
name|'clientFactory'
op|'.'
name|'peerAddresses'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|','
name|'clientFactory'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'onConnection'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
comment|'# Clean up the client explicitly here so that tear down of'
nl|'\n'
comment|'# the server side of the connection begins, then wait for'
nl|'\n'
comment|'# the server side to actually disconnect.'
nl|'\n'
indent|'            '
name|'connector'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'serverConnectionLost'
newline|'\n'
dedent|''
name|'onConnection'
op|'.'
name|'addCallback'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'onConnection'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WriterProtocol
dedent|''
dedent|''
name|'class'
name|'WriterProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# use everything ITransport claims to provide. If something here'
nl|'\n'
comment|'# fails, the exception will be written to the log, but it will not'
nl|'\n'
comment|'# directly flunk the test. The test will fail when maximum number of'
nl|'\n'
comment|"# iterations have passed and the writer's factory.done has not yet"
nl|'\n'
comment|'# been set.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"Hello Cleveland!\\n"'
op|')'
newline|'\n'
name|'seq'
op|'='
op|'['
string|'"Goodbye"'
op|','
string|'" cruel"'
op|','
string|'" world"'
op|','
string|'"\\n"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'writeSequence'
op|'('
name|'seq'
op|')'
newline|'\n'
name|'peer'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'peer'
op|'.'
name|'type'
op|'!='
string|'"TCP"'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"getPeer returned non-TCP socket:"'
op|','
name|'peer'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'problem'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'us'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'if'
name|'us'
op|'.'
name|'type'
op|'!='
string|'"TCP"'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"getHost returned non-TCP socket:"'
op|','
name|'us'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'problem'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'factory'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|ReaderProtocol
dedent|''
dedent|''
name|'class'
name|'ReaderProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|dataReceived
indent|'    '
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'data'
op|'+='
name|'data'
newline|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|class|WriterClientFactory
dedent|''
dedent|''
name|'class'
name|'WriterClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
string|'""'
newline|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'ReaderProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|class|WriteDataTestCase
dedent|''
dedent|''
name|'class'
name|'WriteDataTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that connected TCP sockets can actually write data. Try to exercise\n    the entire ITransport interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_writer
name|'def'
name|'test_writer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ITCPTransport.write} and L{ITCPTransport.writeSequence} send bytes to\n        the other end of the connection.\n        """'
newline|'\n'
name|'f'
op|'='
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'WriterProtocol'
newline|'\n'
name|'f'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
name|'f'
op|'.'
name|'problem'
op|'='
number|'0'
newline|'\n'
name|'wrappedF'
op|'='
name|'WiredFactory'
op|'('
name|'f'
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'wrappedF'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'n'
op|'='
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'clientF'
op|'='
name|'WriterClientFactory'
op|'('
op|')'
newline|'\n'
name|'wrappedClientF'
op|'='
name|'WiredFactory'
op|'('
name|'clientF'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'wrappedClientF'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'done'
op|','
string|'"writer didn\'t finish, it probably died"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'problem'
op|'=='
number|'0'
op|','
string|'"writer indicated an error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'clientF'
op|'.'
name|'done'
op|','
nl|'\n'
string|'"client didn\'t see connection dropped"'
op|')'
newline|'\n'
name|'expected'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
op|'['
string|'"Hello Cleveland!\\n"'
op|','
nl|'\n'
string|'"Goodbye"'
op|','
string|'" cruel"'
op|','
string|'" world"'
op|','
string|'"\\n"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'clientF'
op|'.'
name|'data'
op|'=='
name|'expected'
op|','
nl|'\n'
string|'"client didn\'t receive all the data it expected"'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'wrappedF'
op|'.'
name|'onDisconnect'
op|','
nl|'\n'
name|'wrappedClientF'
op|'.'
name|'onDisconnect'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeAfterShutdownWithoutReading
dedent|''
name|'def'
name|'test_writeAfterShutdownWithoutReading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A TCP transport which is written to after the connection has been shut\n        down should notify its protocol that the connection has been lost, even\n        if the TCP transport is not actively being monitored for read events\n        (ie, pauseProducing was called on it).\n        """'
newline|'\n'
comment|"# This is an unpleasant thing.  Generally tests shouldn't skip or"
nl|'\n'
comment|'# run based on the name of the reactor being used (most tests'
nl|'\n'
comment|"# shouldn't care _at all_ what reactor is being used, in fact).  The"
nl|'\n'
comment|'# Gtk reactor cannot pass this test, though, because it fails to'
nl|'\n'
comment|'# implement IReactorTCP entirely correctly.  Gtk is quite old at'
nl|'\n'
comment|"# this point, so it's more likely that gtkreactor will be deprecated"
nl|'\n'
comment|'# and removed rather than fixed to handle this case correctly.'
nl|'\n'
comment|'# Since this is a pre-existing (and very long-standing) issue with'
nl|'\n'
comment|"# the Gtk reactor, there's no reason for it to prevent this test"
nl|'\n'
comment|'# being added to exercise the other reactors, for which the behavior'
nl|'\n'
comment|'# was also untested but at least works correctly (now).  See #2833'
nl|'\n'
comment|'# for information on the status of gtkreactor.'
nl|'\n'
name|'if'
name|'reactor'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|"'IOCPReactor'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
nl|'\n'
string|'"iocpreactor does not, in fact, stop reading immediately after "'
nl|'\n'
string|'"pauseProducing is called. This results in a bonus disconnection "'
nl|'\n'
string|'"notification. Under some circumstances, it might be possible to "'
nl|'\n'
string|'"not receive this notifications (specifically, pauseProducing, "'
nl|'\n'
string|'"deliver some data, proceed with this test)."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'reactor'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|"'GtkReactor'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
nl|'\n'
string|'"gtkreactor does not implement unclean disconnection "'
nl|'\n'
string|'"notification correctly.  This might more properly be "'
nl|'\n'
string|'"a todo, but due to technical limitations it cannot be."'
op|')'
newline|'\n'
nl|'\n'
comment|'# Called back after the protocol for the client side of the connection'
nl|'\n'
comment|'# has paused its transport, preventing it from reading, therefore'
nl|'\n'
comment|'# preventing it from noticing the disconnection before the rest of the'
nl|'\n'
comment|'# actions which are necessary to trigger the case this test is for have'
nl|'\n'
comment|'# been taken.'
nl|'\n'
dedent|''
name|'clientPaused'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Called back when the protocol for the server side of the connection'
nl|'\n'
comment|'# has received connection lost notification.'
nl|'\n'
name|'serverLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Disconnecter
name|'class'
name|'Disconnecter'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Protocol for the server side of the connection which disconnects\n            itself in a callback on clientPaused and publishes notification\n            when its connection is actually lost.\n            """'
newline|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Set up a callback on clientPaused to lose the connection.\n                """'
newline|'\n'
name|'msg'
op|'('
string|"'Disconnector.connectionMade'"
op|')'
newline|'\n'
DECL|function|disconnect
name|'def'
name|'disconnect'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'('
string|"'Disconnector.connectionMade disconnect'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'loseConnection called'"
op|')'
newline|'\n'
dedent|''
name|'clientPaused'
op|'.'
name|'addCallback'
op|'('
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Notify observers that the server side of the connection has\n                ended.\n                """'
newline|'\n'
name|'msg'
op|'('
string|"'Disconnecter.connectionLost'"
op|')'
newline|'\n'
name|'serverLost'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'serverLost called back'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Create the server port to which a connection will be made.'
nl|'\n'
dedent|''
dedent|''
name|'server'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'protocol'
op|'='
name|'Disconnecter'
newline|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'addr'
op|'='
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Infinite
name|'class'
name|'Infinite'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            A producer which will write to its consumer as long as\n            resumeProducing is called.\n\n            @ivar consumer: The L{IConsumer} which will be written to.\n            """'
newline|'\n'
name|'implements'
op|'('
name|'IPullProducer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'consumer'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consumer'
op|'='
name|'consumer'
newline|'\n'
nl|'\n'
DECL|member|resumeProducing
dedent|''
name|'def'
name|'resumeProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'('
string|"'Infinite.resumeProducing'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'write'
op|'('
string|"'x'"
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'Infinite.resumeProducing wrote to consumer'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProducing
dedent|''
name|'def'
name|'stopProducing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'('
string|"'Infinite.stopProducing'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnreadingWriter
dedent|''
dedent|''
name|'class'
name|'UnreadingWriter'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Trivial protocol which pauses its transport immediately and then\n            writes some bytes to it.\n            """'
newline|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'('
string|"'UnreadingWriter.connectionMade'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'clientPaused'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'clientPaused called back'"
op|')'
newline|'\n'
DECL|function|write
name|'def'
name|'write'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'('
string|"'UnreadingWriter.connectionMade write'"
op|')'
newline|'\n'
comment|'# This needs to be enough bytes to spill over into the'
nl|'\n'
comment|'# userspace Twisted send buffer - if it all fits into'
nl|'\n'
comment|"# the kernel, Twisted won't even poll for OUT events,"
nl|'\n'
comment|"# which means it won't poll for any events at all, so"
nl|'\n'
comment|'# the disconnection is never noticed.  This is due to'
nl|'\n'
comment|'# #1662.  When #1662 is fixed, this test will likely'
nl|'\n'
comment|'# need to be adjusted, otherwise connection lost'
nl|'\n'
comment|'# notification will happen too soon and the test will'
nl|'\n'
comment|'# probably begin to fail with ConnectionDone instead of'
nl|'\n'
comment|'# ConnectionLost (in any case, it will no longer be'
nl|'\n'
comment|'# entirely correct).'
nl|'\n'
name|'producer'
op|'='
name|'Infinite'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'UnreadingWriter.connectionMade write created producer'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'registerProducer'
op|'('
name|'producer'
op|','
name|'False'
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'UnreadingWriter.connectionMade write registered producer'"
op|')'
newline|'\n'
dedent|''
name|'serverLost'
op|'.'
name|'addCallback'
op|'('
name|'write'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create the client and initiate the connection'
nl|'\n'
dedent|''
dedent|''
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolFactory'
op|'='
name|'UnreadingWriter'
newline|'\n'
name|'clientConnectionLost'
op|'='
name|'client'
op|'.'
name|'deferred'
newline|'\n'
DECL|function|cbClientLost
name|'def'
name|'cbClientLost'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'('
string|"'cbClientLost'"
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'lostReason'
newline|'\n'
dedent|''
name|'clientConnectionLost'
op|'.'
name|'addCallback'
op|'('
name|'cbClientLost'
op|')'
newline|'\n'
name|'msg'
op|'('
string|"'Connecting to %s:%s'"
op|'%'
op|'('
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
nl|'\n'
comment|'# By the end of the test, the client should have received notification'
nl|'\n'
comment|'# of unclean disconnection.'
nl|'\n'
name|'msg'
op|'('
string|"'Returning Deferred'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'clientConnectionLost'
op|','
name|'error'
op|'.'
name|'ConnectionLost'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionLosingProtocol
dedent|''
dedent|''
name|'class'
name|'ConnectionLosingProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'master'
op|'.'
name|'_connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'master'
op|'.'
name|'ports'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoopProtocol
dedent|''
dedent|''
name|'class'
name|'NoopProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'master'
op|'.'
name|'serverConns'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'d'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d'
op|'.'
name|'callback'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionLostNotifyingProtocol
dedent|''
dedent|''
name|'class'
name|'ConnectionLostNotifyingProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol which fires a Deferred which was previously passed to\n    its initializer when the connection is lost.\n\n    @ivar onConnectionLost: The L{Deferred} which will be fired in\n        C{connectionLost}.\n\n    @ivar lostConnectionReason: C{None} until the connection is lost, then a\n        reference to the reason passed to C{connectionLost}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onConnectionLost'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lostConnectionReason'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'onConnectionLost'
op|'='
name|'onConnectionLost'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lostConnectionReason'
op|'='
name|'reason'
newline|'\n'
name|'self'
op|'.'
name|'onConnectionLost'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|HandleSavingProtocol
dedent|''
dedent|''
name|'class'
name|'HandleSavingProtocol'
op|'('
name|'ConnectionLostNotifyingProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Protocol which grabs the platform-specific socket handle and\n    saves it as an attribute on itself when the connection is\n    established.\n    """'
newline|'\n'
DECL|member|makeConnection
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the platform-specific socket handle for future\n        introspection.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'handle'
op|'='
name|'transport'
op|'.'
name|'getHandle'
op|'('
op|')'
newline|'\n'
name|'return'
name|'protocol'
op|'.'
name|'Protocol'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProperlyCloseFilesMixin
dedent|''
dedent|''
name|'class'
name|'ProperlyCloseFilesMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for platform resources properly being cleaned up.\n    """'
newline|'\n'
DECL|member|createServer
name|'def'
name|'createServer'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'portNumber'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Bind a server port to which connections will be made.  The server\n        should use the given protocol factory.\n\n        @return: The L{IListeningPort} for the server created.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectClient
dedent|''
name|'def'
name|'connectClient'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'portNumber'
op|','
name|'clientCreator'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Establish a connection to the given address using the given\n        L{ClientCreator} instance.\n\n        @return: A Deferred which will fire with the connected protocol instance.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHandleExceptionType
dedent|''
name|'def'
name|'getHandleExceptionType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the exception class which will be raised when an operation is\n        attempted on a closed platform handle.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHandleErrorCode
dedent|''
name|'def'
name|'getHandleErrorCode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the errno expected to result from writing to a closed\n        platform socket handle.\n        """'
newline|'\n'
comment|'# These platforms have been seen to give EBADF:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  Linux 2.4.26, Linux 2.6.15, OS X 10.4, FreeBSD 5.4'
nl|'\n'
comment|'#  Windows 2000 SP 4, Windows XP SP 2'
nl|'\n'
name|'return'
name|'errno'
op|'.'
name|'EBADF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_properlyCloseFiles
dedent|''
name|'def'
name|'test_properlyCloseFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that lost connections properly have their underlying socket\n        resources cleaned up.\n        """'
newline|'\n'
name|'onServerConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'ConnectionLostNotifyingProtocol'
op|'('
nl|'\n'
name|'onServerConnectionLost'
op|')'
newline|'\n'
name|'serverPort'
op|'='
name|'self'
op|'.'
name|'createServer'
op|'('
string|"'127.0.0.1'"
op|','
number|'0'
op|','
name|'serverFactory'
op|')'
newline|'\n'
nl|'\n'
name|'onClientConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverAddr'
op|'='
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'clientCreator'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
nl|'\n'
name|'reactor'
op|','
name|'lambda'
op|':'
name|'HandleSavingProtocol'
op|'('
name|'onClientConnectionLost'
op|')'
op|')'
newline|'\n'
name|'clientDeferred'
op|'='
name|'self'
op|'.'
name|'connectClient'
op|'('
nl|'\n'
name|'serverAddr'
op|'.'
name|'host'
op|','
name|'serverAddr'
op|'.'
name|'port'
op|','
name|'clientCreator'
op|')'
newline|'\n'
nl|'\n'
DECL|function|clientConnected
name|'def'
name|'clientConnected'
op|'('
name|'client'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Disconnect the client.  Return a Deferred which fires when both\n            the client and the server have received disconnect notification.\n            """'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'some bytes to make sure the connection is set up'"
op|')'
newline|'\n'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'onClientConnectionLost'
op|','
name|'onServerConnectionLost'
op|']'
op|')'
newline|'\n'
dedent|''
name|'clientDeferred'
op|'.'
name|'addCallback'
op|'('
name|'clientConnected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|clientDisconnected
name|'def'
name|'clientDisconnected'
op|'('
op|'('
name|'client'
op|','
name|'server'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Verify that the underlying platform socket handle has been\n            cleaned up.\n            """'
newline|'\n'
name|'client'
op|'.'
name|'lostConnectionReason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionClosed'
op|')'
newline|'\n'
name|'server'
op|'.'
name|'lostConnectionReason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionClosed'
op|')'
newline|'\n'
name|'expectedErrorCode'
op|'='
name|'self'
op|'.'
name|'getHandleErrorCode'
op|'('
op|')'
newline|'\n'
name|'err'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'getHandleExceptionType'
op|'('
op|')'
op|','
name|'client'
op|'.'
name|'handle'
op|'.'
name|'send'
op|','
string|"'bytes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'err'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'expectedErrorCode'
op|')'
newline|'\n'
dedent|''
name|'clientDeferred'
op|'.'
name|'addCallback'
op|'('
name|'clientDisconnected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cleanup
name|'def'
name|'cleanup'
op|'('
name|'passthrough'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Shut down the server port.  Return a Deferred which fires when\n            this has completed.\n            """'
newline|'\n'
name|'result'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'serverPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'passthrough'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'clientDeferred'
op|'.'
name|'addBoth'
op|'('
name|'cleanup'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'clientDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProperlyCloseFilesTestCase
dedent|''
dedent|''
name|'class'
name|'ProperlyCloseFilesTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ProperlyCloseFilesMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that the sockets created by L{IReactorTCP.connectTCP} are cleaned up\n    when the connection they are associated with is closed.\n    """'
newline|'\n'
DECL|member|createServer
name|'def'
name|'createServer'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'portNumber'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a TCP server using L{IReactorTCP.listenTCP}.\n        """'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
name|'portNumber'
op|','
name|'factory'
op|','
name|'interface'
op|'='
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectClient
dedent|''
name|'def'
name|'connectClient'
op|'('
name|'self'
op|','
name|'address'
op|','
name|'portNumber'
op|','
name|'clientCreator'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a TCP client using L{IReactorTCP.connectTCP}.\n        """'
newline|'\n'
name|'return'
name|'clientCreator'
op|'.'
name|'connectTCP'
op|'('
name|'address'
op|','
name|'portNumber'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHandleExceptionType
dedent|''
name|'def'
name|'getHandleExceptionType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return L{socket.error} as the expected error type which will be\n        raised by a write to the low-level socket object after it has been\n        closed.\n        """'
newline|'\n'
name|'return'
name|'socket'
op|'.'
name|'error'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WiredForDeferreds
dedent|''
dedent|''
name|'class'
name|'WiredForDeferreds'
op|'('
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|','
name|'wrappedProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'onConnect'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'onDisconnect'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WiredFactory
dedent|''
dedent|''
name|'class'
name|'WiredFactory'
op|'('
name|'policies'
op|'.'
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'WiredForDeferreds'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'WrappingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onConnect'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onDisconnect'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddressTestCase
dedent|''
dedent|''
name|'class'
name|'AddressTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for address-related interactions with client and server protocols.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a port and connected client/server pair which can be used\n        to test factory behavior related to addresses.\n\n        @return: A L{defer.Deferred} which will be called back when both the\n            client and server protocols have received their connection made\n            callback.\n        """'
newline|'\n'
DECL|class|RememberingWrapper
name|'class'
name|'RememberingWrapper'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Simple wrapper factory which records the addresses which are\n            passed to its L{buildProtocol} method and delegates actual\n            protocol creation to another factory.\n\n            @ivar addresses: A list of the objects passed to buildProtocol.\n            @ivar factory: The wrapped factory to which protocol creation is\n                delegated.\n            """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'factory'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'addresses'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
nl|'\n'
comment|'# Only bother to pass on buildProtocol calls to the wrapped'
nl|'\n'
comment|"# factory - doStart, doStop, etc aren't necessary for this test"
nl|'\n'
comment|'# to pass.'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Append the given address to C{self.addresses} and forward\n                the call to C{self.factory}.\n                """'
newline|'\n'
name|'self'
op|'.'
name|'addresses'
op|'.'
name|'append'
op|'('
name|'addr'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'buildProtocol'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make a server which we can receive connection and disconnection'
nl|'\n'
comment|'# notification for, and which will record the address passed to its'
nl|'\n'
comment|'# buildProtocol.'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'server'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverConnMade'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverConnLost'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'protocolConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
comment|'# RememberingWrapper is a ClientFactory, but ClientFactory is-a'
nl|'\n'
comment|'# ServerFactory, so this is okay.'
nl|'\n'
name|'self'
op|'.'
name|'serverWrapper'
op|'='
name|'RememberingWrapper'
op|'('
name|'self'
op|'.'
name|'server'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do something similar for a client.'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientConnMade'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientConnLost'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'protocolConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientWrapper'
op|'='
name|'RememberingWrapper'
op|'('
name|'self'
op|'.'
name|'client'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'serverWrapper'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'self'
op|'.'
name|'clientWrapper'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'self'
op|'.'
name|'serverConnMade'
op|','
name|'self'
op|'.'
name|'clientConnMade'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disconnect the client/server pair and shutdown the port created in\n        L{setUp}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'connector'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'serverConnLost'
op|','
name|'self'
op|'.'
name|'clientConnLost'
op|','
nl|'\n'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolClient
dedent|''
name|'def'
name|'test_buildProtocolClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ClientFactory.buildProtocol} should be invoked with the address of\n        the server to which a connection has been established, which should\n        be the same as the address reported by the C{getHost} method of the\n        transport of the server protocol and as the C{getPeer} method of the\n        transport of the client protocol.\n        """'
newline|'\n'
name|'serverHost'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'clientPeer'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'clientWrapper'
op|'.'
name|'addresses'
op|','
nl|'\n'
op|'['
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'serverHost'
op|'.'
name|'host'
op|','
name|'serverHost'
op|'.'
name|'port'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'clientWrapper'
op|'.'
name|'addresses'
op|','
nl|'\n'
op|'['
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'clientPeer'
op|'.'
name|'host'
op|','
name|'clientPeer'
op|'.'
name|'port'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_buildProtocolServer
dedent|''
name|'def'
name|'test_buildProtocolServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ServerFactory.buildProtocol} should be invoked with the address of\n        the client which has connected to the port the factory is listening on,\n        which should be the same as the address reported by the C{getPeer}\n        method of the transport of the server protocol and as the C{getHost}\n        method of the transport of the client protocol.\n        """'
newline|'\n'
name|'clientHost'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'serverPeer'
op|'='
name|'self'
op|'.'
name|'server'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'serverWrapper'
op|'.'
name|'addresses'
op|','
nl|'\n'
op|'['
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'serverPeer'
op|'.'
name|'host'
op|','
name|'serverPeer'
op|'.'
name|'port'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'serverWrapper'
op|'.'
name|'addresses'
op|','
nl|'\n'
op|'['
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'clientHost'
op|'.'
name|'host'
op|','
name|'clientHost'
op|'.'
name|'port'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LargeBufferWriterProtocol
dedent|''
dedent|''
name|'class'
name|'LargeBufferWriterProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Win32 sockets cannot handle single huge chunks of bytes.  Write one'
nl|'\n'
comment|'# massive string to make sure Twisted deals with this fact.'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
indent|'    '
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# write 60MB'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|"'X'"
op|'*'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'len'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|LargeBufferReaderProtocol
dedent|''
dedent|''
name|'class'
name|'LargeBufferReaderProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|member|dataReceived
indent|'    '
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'len'
op|'+='
name|'len'
op|'('
name|'data'
op|')'
newline|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'done'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|class|LargeBufferReaderClientFactory
dedent|''
dedent|''
name|'class'
name|'LargeBufferReaderClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'len'
op|'='
number|'0'
newline|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|'='
name|'LargeBufferReaderProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FireOnClose
dedent|''
dedent|''
name|'class'
name|'FireOnClose'
op|'('
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A wrapper around a protocol that makes it fire a deferred when\n    connectionLost is called.\n    """'
newline|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'ProtocolWrapper'
op|'.'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'.'
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FireOnCloseFactory
dedent|''
dedent|''
name|'class'
name|'FireOnCloseFactory'
op|'('
name|'policies'
op|'.'
name|'WrappingFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'FireOnClose'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policies'
op|'.'
name|'WrappingFactory'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'wrappedFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LargeBufferTestCase
dedent|''
dedent|''
name|'class'
name|'LargeBufferTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that buffering large amounts of data works.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|datalen
name|'datalen'
op|'='
number|'60'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
DECL|member|testWriter
name|'def'
name|'testWriter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'protocol'
op|'.'
name|'Factory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'LargeBufferWriterProtocol'
newline|'\n'
name|'f'
op|'.'
name|'done'
op|'='
number|'0'
newline|'\n'
name|'f'
op|'.'
name|'problem'
op|'='
number|'0'
newline|'\n'
name|'f'
op|'.'
name|'len'
op|'='
name|'self'
op|'.'
name|'datalen'
newline|'\n'
name|'wrappedF'
op|'='
name|'FireOnCloseFactory'
op|'('
name|'f'
op|')'
newline|'\n'
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'wrappedF'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'n'
op|'='
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'clientF'
op|'='
name|'LargeBufferReaderClientFactory'
op|'('
op|')'
newline|'\n'
name|'wrappedClientF'
op|'='
name|'FireOnCloseFactory'
op|'('
name|'clientF'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'n'
op|','
name|'wrappedClientF'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'wrappedF'
op|'.'
name|'deferred'
op|','
name|'wrappedClientF'
op|'.'
name|'deferred'
op|']'
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'f'
op|'.'
name|'done'
op|','
string|'"writer didn\'t finish, it probably died"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'clientF'
op|'.'
name|'len'
op|'=='
name|'self'
op|'.'
name|'datalen'
op|','
nl|'\n'
string|'"client didn\'t receive all the data it expected "'
nl|'\n'
string|'"(%d != %d)"'
op|'%'
op|'('
name|'clientF'
op|'.'
name|'len'
op|','
name|'self'
op|'.'
name|'datalen'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'clientF'
op|'.'
name|'done'
op|','
nl|'\n'
string|'"client didn\'t see connection dropped"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyHCProtocol
dedent|''
dedent|''
name|'class'
name|'MyHCProtocol'
op|'('
name|'AccumulatingProtocol'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'implements'
op|'('
name|'IHalfCloseableProtocol'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|readHalfClosed
name|'readHalfClosed'
op|'='
name|'False'
newline|'\n'
DECL|variable|writeHalfClosed
name|'writeHalfClosed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|readConnectionLost
name|'def'
name|'readConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'readHalfClosed'
op|'='
name|'True'
newline|'\n'
comment|'# Invoke notification logic from the base class to simplify testing.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'writeHalfClosed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeConnectionLost
dedent|''
dedent|''
name|'def'
name|'writeConnectionLost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'writeHalfClosed'
op|'='
name|'True'
newline|'\n'
comment|'# Invoke notification logic from the base class to simplify testing.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'readHalfClosed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connectionLost'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyHCFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'MyHCFactory'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|called
indent|'    '
name|'called'
op|'='
number|'0'
newline|'\n'
DECL|variable|protocolConnectionMade
name|'protocolConnectionMade'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'called'
op|'+='
number|'1'
newline|'\n'
name|'p'
op|'='
name|'MyHCProtocol'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'p'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HalfCloseTestCase
dedent|''
dedent|''
name|'class'
name|'HalfCloseTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test half-closing connections."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
op|'='
name|'MyHCFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'p'
op|'.'
name|'connected'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'cf'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'MyHCProtocol'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'cf'
op|'.'
name|'connectTCP'
op|'('
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
nl|'\n'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_setUp'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_setUp
dedent|''
name|'def'
name|'_setUp'
op|'('
name|'self'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
name|'self'
op|'.'
name|'clientProtoConnectionLost'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'closedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'connected'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Wait for the server to notice there is a connection, too.'
nl|'\n'
name|'return'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'f'
op|','
string|"'protocol'"
op|','
name|'None'
op|')'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'closed'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'p'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'clientProtoConnectionLost'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_tearDown'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_tearDown
dedent|''
name|'def'
name|'_tearDown'
op|'('
name|'self'
op|','
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'closed'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# because we did half-close, the server also needs to'
nl|'\n'
comment|'# closed explicitly.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|','
number|'0'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|_connectionLost
name|'def'
name|'_connectionLost'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|'='
number|'1'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'connectionLost'
op|'='
name|'_connectionLost'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|testCloseWriteCloser
dedent|''
name|'def'
name|'testCloseWriteCloser'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'client'
op|'='
name|'self'
op|'.'
name|'client'
newline|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'f'
newline|'\n'
name|'t'
op|'='
name|'client'
op|'.'
name|'transport'
newline|'\n'
nl|'\n'
name|'t'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'d'
op|'='
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'len'
op|'('
name|'t'
op|'.'
name|'_tempDataBuffer'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
DECL|function|loseWrite
name|'def'
name|'loseWrite'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'loseWriteConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'t'
op|'.'
name|'_writeDisconnected'
op|')'
newline|'\n'
DECL|function|check
dedent|''
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'closed'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'writeHalfClosed'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'readHalfClosed'
op|','
name|'False'
op|')'
newline|'\n'
name|'return'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'readHalfClosed'
op|')'
newline|'\n'
DECL|function|write
dedent|''
name|'def'
name|'write'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'w'
op|'='
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
name|'w'
op|'('
string|'" world"'
op|')'
newline|'\n'
name|'w'
op|'('
string|'"lalala fooled you"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'client'
op|'.'
name|'transport'
op|'.'
name|'_tempDataBuffer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'data'
op|','
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'readHalfClosed'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'loseWrite'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'write'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWriteCloseNotification
dedent|''
name|'def'
name|'testWriteCloseNotification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'self'
op|'.'
name|'f'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseWriteConnection'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'writeHalfClosed'
op|')'
op|','
nl|'\n'
name|'loopUntil'
op|'('
name|'lambda'
op|':'
name|'self'
op|'.'
name|'client'
op|'.'
name|'readHalfClosed'
op|')'
op|']'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'_'
op|':'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'readHalfClosed'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HalfClose2TestCase
dedent|''
dedent|''
name|'class'
name|'HalfClose2TestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'p'
op|'='
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
comment|"# XXX we don't test server side yet since we don't do it yet"
nl|'\n'
name|'d'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'AccumulatingProtocol'
op|')'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'p'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'_gotClient'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|_gotClient
dedent|''
name|'def'
name|'_gotClient'
op|'('
name|'self'
op|','
name|'client'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'client'
newline|'\n'
comment|"# Now wait for the server to catch up - it doesn't matter if this"
nl|'\n'
comment|"# Deferred has already fired and gone away, in that case we'll"
nl|'\n'
comment|'# return None and not wait at all, which is precisely correct.'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocolConnectionMade'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNoNotification
dedent|''
name|'def'
name|'testNoNotification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        TCP protocols support half-close connections, but not all of them\n        support being notified of write closes.  In this case, test that\n        half-closing the connection causes the peer\'s connection to be\n        closed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseWriteConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closedDeferred'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'closedDeferred'
op|'='
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'data'
op|','
string|"'hello'"
op|')'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|','
name|'True'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testShutdownException
dedent|''
name|'def'
name|'testShutdownException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the other side has already closed its connection,\n        loseWriteConnection should pass silently.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"X"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'transport'
op|'.'
name|'loseWriteConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closedDeferred'
op|'='
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'closedDeferred'
op|'='
name|'d2'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'x'
op|':'
nl|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'self'
op|'.'
name|'f'
op|'.'
name|'protocol'
op|'.'
name|'closed'
op|','
name|'True'
op|')'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'d'
op|','
name|'d2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HalfCloseBuggyApplicationTests
dedent|''
dedent|''
name|'class'
name|'HalfCloseBuggyApplicationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test half-closing connections where notification code has bugs.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set up a server and connect a client to it.  Return a Deferred which\n        only fires once this is done.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'='
name|'MyHCFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
nl|'\n'
number|'0'
op|','
name|'self'
op|'.'
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'addr'
op|'='
name|'self'
op|'.'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
newline|'\n'
name|'creator'
op|'='
name|'protocol'
op|'.'
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'MyHCProtocol'
op|')'
newline|'\n'
name|'clientDeferred'
op|'='
name|'creator'
op|'.'
name|'connectTCP'
op|'('
name|'addr'
op|'.'
name|'host'
op|','
name|'addr'
op|'.'
name|'port'
op|')'
newline|'\n'
DECL|function|setClient
name|'def'
name|'setClient'
op|'('
name|'clientProtocol'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'clientProtocol'
op|'='
name|'clientProtocol'
newline|'\n'
dedent|''
name|'clientDeferred'
op|'.'
name|'addCallback'
op|'('
name|'setClient'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|','
nl|'\n'
name|'clientDeferred'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|aBug
dedent|''
name|'def'
name|'aBug'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake implementation of a callback which illegally raises an\n        exception.\n        """'
newline|'\n'
name|'raise'
name|'RuntimeError'
op|'('
string|'"ONO I AM BUGGY CODE"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_notificationRaisesTest
dedent|''
name|'def'
name|'_notificationRaisesTest'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper for testing that an exception is logged by the time the\n        client protocol loses its connection.\n        """'
newline|'\n'
name|'closed'
op|'='
name|'self'
op|'.'
name|'clientProtocol'
op|'.'
name|'closedDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseWriteConnection'
op|'('
op|')'
newline|'\n'
DECL|function|check
name|'def'
name|'check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'RuntimeError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'closed'
op|'.'
name|'addCallback'
op|'('
name|'check'
op|')'
newline|'\n'
name|'return'
name|'closed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_readNotificationRaises
dedent|''
name|'def'
name|'test_readNotificationRaises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{readConnectionLost} raises an exception when the transport\n        calls it to notify the protocol of that event, the exception should\n        be logged and the protocol should be disconnected completely.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocol'
op|'.'
name|'readConnectionLost'
op|'='
name|'self'
op|'.'
name|'aBug'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_notificationRaisesTest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeNotificationRaises
dedent|''
name|'def'
name|'test_writeNotificationRaises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{writeConnectionLost} raises an exception when the transport\n        calls it to notify the protocol of that event, the exception should\n        be logged and the protocol should be disconnected completely.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'clientProtocol'
op|'.'
name|'writeConnectionLost'
op|'='
name|'self'
op|'.'
name|'aBug'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_notificationRaisesTest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|LogTestCase
dedent|''
dedent|''
name|'class'
name|'LogTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test logging facility of TCP base classes.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_logstrClientSetup
name|'def'
name|'test_logstrClientSetup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the log customization of the client transport happens\n        once the client is connected.\n        """'
newline|'\n'
name|'server'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
comment|'# It should still have the default value'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'connector'
op|'.'
name|'transport'
op|'.'
name|'logstr'
op|','
nl|'\n'
string|'"Uninitialized"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'connector'
op|'.'
name|'transport'
op|'.'
name|'logstr'
op|','
nl|'\n'
string|'"AccumulatingProtocol,client"'
op|')'
newline|'\n'
dedent|''
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'protocolConnectionMade'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PauseProducingTestCase
dedent|''
dedent|''
name|'class'
name|'PauseProducingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test some behaviors of pausing the production of a transport.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_pauseProducingInConnectionMade
name|'def'
name|'test_pauseProducingInConnectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In C{connectionMade} of a client protocol, C{pauseProducing} used to be\n        ignored: this test is here to ensure it\'s not ignored.\n        """'
newline|'\n'
name|'server'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
DECL|function|checkInConnectionMade
name|'def'
name|'checkInConnectionMade'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tr'
op|'='
name|'proto'
op|'.'
name|'transport'
newline|'\n'
comment|'# The transport should already be monitored'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'tr'
op|','
name|'reactor'
op|'.'
name|'getReaders'
op|'('
op|')'
op|'+'
nl|'\n'
name|'reactor'
op|'.'
name|'getWriters'
op|'('
op|')'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'pauseProducing'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'tr'
op|','
name|'reactor'
op|'.'
name|'getReaders'
op|'('
op|')'
op|'+'
nl|'\n'
name|'reactor'
op|'.'
name|'getWriters'
op|'('
op|')'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'checkAfterConnectionMade'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'d'
op|'.'
name|'callback'
op|','
name|'proto'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
DECL|function|checkAfterConnectionMade
dedent|''
name|'def'
name|'checkAfterConnectionMade'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'tr'
op|'='
name|'proto'
op|'.'
name|'transport'
newline|'\n'
comment|'# The transport should still not be monitored'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'tr'
op|','
name|'reactor'
op|'.'
name|'getReaders'
op|'('
op|')'
op|'+'
nl|'\n'
name|'reactor'
op|'.'
name|'getWriters'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'.'
name|'addCallback'
op|'('
name|'checkInConnectionMade'
op|')'
newline|'\n'
name|'return'
name|'client'
op|'.'
name|'protocolConnectionMade'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorFDSet'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'test_pauseProducingInConnectionMade'
op|'.'
name|'skip'
op|'='
string|'"Reactor not providing IReactorFDSet"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CallBackOrderTestCase
dedent|''
dedent|''
name|'class'
name|'CallBackOrderTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test the order of reactor callbacks\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_loseOrder
name|'def'
name|'test_loseOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that Protocol.connectionLost is called before factory\'s\n        clientConnectionLost\n        """'
newline|'\n'
name|'server'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'server'
op|'.'
name|'protocolConnectionMade'
op|'='
op|'('
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
nl|'\n'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'proto'
op|':'
name|'self'
op|'.'
name|'addCleanup'
op|'('
nl|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'client'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionLost'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbCM
name|'def'
name|'_cbCM'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            protocol.connectionMade callback\n            """'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'client'
op|'.'
name|'protocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'client'
op|'.'
name|'protocolConnectionMade'
op|'.'
name|'addCallback'
op|'('
name|'_cbCM'
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'server'
op|','
name|'interface'
op|'='
string|"'127.0.0.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'port'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'connector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'host'
op|','
name|'port'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
name|'client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'connector'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbCCL
name|'def'
name|'_cbCCL'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            factory.clientConnectionLost callback\n            """'
newline|'\n'
name|'return'
string|"'CCL'"
newline|'\n'
nl|'\n'
DECL|function|_cbCL
dedent|''
name|'def'
name|'_cbCL'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            protocol.connectionLost callback\n            """'
newline|'\n'
name|'return'
string|"'CL'"
newline|'\n'
nl|'\n'
DECL|function|_cbGather
dedent|''
name|'def'
name|'_cbGather'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'res'
op|','
op|'['
string|"'CL'"
op|','
string|"'CCL'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'client'
op|'.'
name|'protocolConnectionLost'
op|'.'
name|'addCallback'
op|'('
name|'_cbCL'
op|')'
op|','
nl|'\n'
name|'client'
op|'.'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'_cbCCL'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbGather'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'resource'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|numRounds
indent|'    '
name|'numRounds'
op|'='
name|'resource'
op|'.'
name|'getrlimit'
op|'('
name|'resource'
op|'.'
name|'RLIMIT_NOFILE'
op|')'
op|'['
number|'0'
op|']'
op|'+'
number|'10'
newline|'\n'
name|'ProperlyCloseFilesTestCase'
op|'.'
name|'numberRounds'
op|'='
name|'numRounds'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2008-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.cred._digest} and the associated bits in\nL{twisted.cred.credentials}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
op|'.'
name|'unittest'
name|'import'
name|'TestCase'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'hashlib'
name|'import'
name|'md5'
op|','
name|'sha1'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'address'
name|'import'
name|'IPv4Address'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'error'
name|'import'
name|'LoginFailed'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'calcHA1'
op|','
name|'calcHA2'
op|','
name|'IUsernameDigestHash'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'calcResponse'
op|','
name|'DigestCredentialFactory'
newline|'\n'
nl|'\n'
DECL|function|b64encode
name|'def'
name|'b64encode'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'s'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeDigestCredentialFactory
dedent|''
name|'class'
name|'FakeDigestCredentialFactory'
op|'('
name|'DigestCredentialFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Fake Digest Credential Factory that generates a predictable\n    nonce and opaque\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeDigestCredentialFactory'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'privateKey'
op|'='
string|'"0"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_generateNonce
dedent|''
name|'def'
name|'_generateNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate a static nonce\n        """'
newline|'\n'
name|'return'
string|"'178288758716122392881254770685'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_getTime
dedent|''
name|'def'
name|'_getTime'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a stable time\n        """'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DigestAuthTests
dedent|''
dedent|''
name|'class'
name|'DigestAuthTests'
op|'('
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    L{TestCase} mixin class which defines a number of tests for\n    L{DigestCredentialFactory}.  Because this mixin defines C{setUp}, it\n    must be inherited before L{TestCase}.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a DigestCredentialFactory for testing\n        """'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
string|'"foobar"'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
string|'"bazquux"'
newline|'\n'
name|'self'
op|'.'
name|'realm'
op|'='
string|'"test realm"'
newline|'\n'
name|'self'
op|'.'
name|'algorithm'
op|'='
string|'"md5"'
newline|'\n'
name|'self'
op|'.'
name|'cnonce'
op|'='
string|'"29fc54aa1641c6fa0e151419361c8f23"'
newline|'\n'
name|'self'
op|'.'
name|'qop'
op|'='
string|'"auth"'
newline|'\n'
name|'self'
op|'.'
name|'uri'
op|'='
string|'"/write/"'
newline|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'='
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'10.2.3.4'"
op|','
number|'43125'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'method'
op|'='
string|"'GET'"
newline|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'='
name|'DigestCredentialFactory'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'algorithm'
op|','
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5HashA1
dedent|''
name|'def'
name|'test_MD5HashA1'
op|'('
name|'self'
op|','
name|'_algorithm'
op|'='
string|"'md5'"
op|','
name|'_hash'
op|'='
name|'md5'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA1} accepts the C{\'md5\'} algorithm and returns an MD5 hash of\n        its parameters, excluding the nonce and cnonce.\n        """'
newline|'\n'
name|'nonce'
op|'='
string|"'abc123xyz'"
newline|'\n'
name|'hashA1'
op|'='
name|'calcHA1'
op|'('
name|'_algorithm'
op|','
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|','
nl|'\n'
name|'nonce'
op|','
name|'self'
op|'.'
name|'cnonce'
op|')'
newline|'\n'
name|'a1'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'_hash'
op|'('
name|'a1'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashA1'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5SessionHashA1
dedent|''
name|'def'
name|'test_MD5SessionHashA1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA1} accepts the C{\'md5-sess\'} algorithm and returns an MD5 hash\n        of its parameters, including the nonce and cnonce.\n        """'
newline|'\n'
name|'nonce'
op|'='
string|"'xyz321abc'"
newline|'\n'
name|'hashA1'
op|'='
name|'calcHA1'
op|'('
string|"'md5-sess'"
op|','
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|','
nl|'\n'
name|'nonce'
op|','
name|'self'
op|'.'
name|'cnonce'
op|')'
newline|'\n'
name|'a1'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'ha1'
op|'='
name|'md5'
op|'('
name|'a1'
op|')'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
name|'a1'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'ha1'
op|','
name|'nonce'
op|','
name|'self'
op|'.'
name|'cnonce'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'md5'
op|'('
name|'a1'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashA1'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SHAHashA1
dedent|''
name|'def'
name|'test_SHAHashA1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA1} accepts the C{\'sha\'} algorithm and returns a SHA hash of its\n        parameters, excluding the nonce and cnonce.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashA1'
op|'('
string|"'sha'"
op|','
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5HashA2Auth
dedent|''
name|'def'
name|'test_MD5HashA2Auth'
op|'('
name|'self'
op|','
name|'_algorithm'
op|'='
string|"'md5'"
op|','
name|'_hash'
op|'='
name|'md5'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'md5\'} algorithm and returns an MD5 hash of\n        its arguments, excluding the entity hash for QOP other than\n        C{\'auth-int\'}.\n        """'
newline|'\n'
name|'method'
op|'='
string|"'GET'"
newline|'\n'
name|'hashA2'
op|'='
name|'calcHA2'
op|'('
name|'_algorithm'
op|','
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|','
string|"'auth'"
op|','
name|'None'
op|')'
newline|'\n'
name|'a2'
op|'='
string|"'%s:%s'"
op|'%'
op|'('
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'_hash'
op|'('
name|'a2'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashA2'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5HashA2AuthInt
dedent|''
name|'def'
name|'test_MD5HashA2AuthInt'
op|'('
name|'self'
op|','
name|'_algorithm'
op|'='
string|"'md5'"
op|','
name|'_hash'
op|'='
name|'md5'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'md5\'} algorithm and returns an MD5 hash of\n        its arguments, including the entity hash for QOP of C{\'auth-int\'}.\n        """'
newline|'\n'
name|'method'
op|'='
string|"'GET'"
newline|'\n'
name|'hentity'
op|'='
string|"'foobarbaz'"
newline|'\n'
name|'hashA2'
op|'='
name|'calcHA2'
op|'('
name|'_algorithm'
op|','
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|','
string|"'auth-int'"
op|','
name|'hentity'
op|')'
newline|'\n'
name|'a2'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'method'
op|','
name|'self'
op|'.'
name|'uri'
op|','
name|'hentity'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'_hash'
op|'('
name|'a2'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hashA2'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5SessHashA2Auth
dedent|''
name|'def'
name|'test_MD5SessHashA2Auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'md5-sess\'} algorithm and QOP of C{\'auth\'} and\n        returns the same value as it does for the C{\'md5\'} algorithm.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashA2Auth'
op|'('
string|"'md5-sess'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5SessHashA2AuthInt
dedent|''
name|'def'
name|'test_MD5SessHashA2AuthInt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'md5-sess\'} algorithm and QOP of C{\'auth-int\'}\n        and returns the same value as it does for the C{\'md5\'} algorithm.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashA2AuthInt'
op|'('
string|"'md5-sess'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SHAHashA2Auth
dedent|''
name|'def'
name|'test_SHAHashA2Auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'sha\'} algorithm and returns a SHA hash of\n        its arguments, excluding the entity hash for QOP other than\n        C{\'auth-int\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashA2Auth'
op|'('
string|"'sha'"
op|','
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SHAHashA2AuthInt
dedent|''
name|'def'
name|'test_SHAHashA2AuthInt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA2} accepts the C{\'sha\'} algorithm and returns a SHA hash of\n        its arguments, including the entity hash for QOP of C{\'auth-int\'}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashA2AuthInt'
op|'('
string|"'sha'"
op|','
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5HashResponse
dedent|''
name|'def'
name|'test_MD5HashResponse'
op|'('
name|'self'
op|','
name|'_algorithm'
op|'='
string|"'md5'"
op|','
name|'_hash'
op|'='
name|'md5'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'md5\'} algorithm and returns an MD5 hash\n        of its parameters, excluding the nonce count, client nonce, and QoP\n        value if the nonce count and client nonce are C{None}\n        """'
newline|'\n'
name|'hashA1'
op|'='
string|"'abc123'"
newline|'\n'
name|'hashA2'
op|'='
string|"'789xyz'"
newline|'\n'
name|'nonce'
op|'='
string|"'lmnopq'"
newline|'\n'
nl|'\n'
name|'response'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'hashA1'
op|','
name|'nonce'
op|','
name|'hashA2'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'_hash'
op|'('
name|'response'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'digest'
op|'='
name|'calcResponse'
op|'('
name|'hashA1'
op|','
name|'hashA2'
op|','
name|'_algorithm'
op|','
name|'nonce'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'digest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5SessionHashResponse
dedent|''
name|'def'
name|'test_MD5SessionHashResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'md5-sess\'} algorithm and returns an MD5\n        hash of its parameters, excluding the nonce count, client nonce, and\n        QoP value if the nonce count and client nonce are C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashResponse'
op|'('
string|"'md5-sess'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SHAHashResponse
dedent|''
name|'def'
name|'test_SHAHashResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'sha\'} algorithm and returns a SHA hash\n        of its parameters, excluding the nonce count, client nonce, and QoP\n        value if the nonce count and client nonce are C{None}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashResponse'
op|'('
string|"'sha'"
op|','
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5HashResponseExtra
dedent|''
name|'def'
name|'test_MD5HashResponseExtra'
op|'('
name|'self'
op|','
name|'_algorithm'
op|'='
string|"'md5'"
op|','
name|'_hash'
op|'='
name|'md5'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'md5\'} algorithm and returns an MD5 hash\n        of its parameters, including the nonce count, client nonce, and QoP\n        value if they are specified.\n        """'
newline|'\n'
name|'hashA1'
op|'='
string|"'abc123'"
newline|'\n'
name|'hashA2'
op|'='
string|"'789xyz'"
newline|'\n'
name|'nonce'
op|'='
string|"'lmnopq'"
newline|'\n'
name|'nonceCount'
op|'='
string|"'00000004'"
newline|'\n'
name|'clientNonce'
op|'='
string|"'abcxyz123'"
newline|'\n'
name|'qop'
op|'='
string|"'auth'"
newline|'\n'
nl|'\n'
name|'response'
op|'='
string|"'%s:%s:%s:%s:%s:%s'"
op|'%'
op|'('
nl|'\n'
name|'hashA1'
op|','
name|'nonce'
op|','
name|'nonceCount'
op|','
name|'clientNonce'
op|','
name|'qop'
op|','
name|'hashA2'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'_hash'
op|'('
name|'response'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'digest'
op|'='
name|'calcResponse'
op|'('
nl|'\n'
name|'hashA1'
op|','
name|'hashA2'
op|','
name|'_algorithm'
op|','
name|'nonce'
op|','
name|'nonceCount'
op|','
name|'clientNonce'
op|','
name|'qop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'digest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_MD5SessionHashResponseExtra
dedent|''
name|'def'
name|'test_MD5SessionHashResponseExtra'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'md5-sess\'} algorithm and returns an MD5\n        hash of its parameters, including the nonce count, client nonce, and\n        QoP value if they are specified.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashResponseExtra'
op|'('
string|"'md5-sess'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_SHAHashResponseExtra
dedent|''
name|'def'
name|'test_SHAHashResponseExtra'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcResponse} accepts the C{\'sha\'} algorithm and returns a SHA hash\n        of its parameters, including the nonce count, client nonce, and QoP\n        value if they are specified.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_MD5HashResponseExtra'
op|'('
string|"'sha'"
op|','
name|'sha1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|formatResponse
dedent|''
name|'def'
name|'formatResponse'
op|'('
name|'self'
op|','
name|'quotes'
op|'='
name|'True'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Format all given keyword arguments and their values suitably for use as\n        the value of an HTTP header.\n\n        @types quotes: C{bool}\n        @param quotes: A flag indicating whether to quote the values of each\n            field in the response.\n\n        @param **kw: Keywords and C{str} values which will be treated as field\n            name/value pairs to include in the result.\n\n        @rtype: C{str}\n        @return: The given fields formatted for use as an HTTP header value.\n        """'
newline|'\n'
name|'if'
string|"'username'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'username'"
op|']'
op|'='
name|'self'
op|'.'
name|'username'
newline|'\n'
dedent|''
name|'if'
string|"'realm'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'realm'"
op|']'
op|'='
name|'self'
op|'.'
name|'realm'
newline|'\n'
dedent|''
name|'if'
string|"'algorithm'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'algorithm'"
op|']'
op|'='
name|'self'
op|'.'
name|'algorithm'
newline|'\n'
dedent|''
name|'if'
string|"'qop'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'qop'"
op|']'
op|'='
name|'self'
op|'.'
name|'qop'
newline|'\n'
dedent|''
name|'if'
string|"'cnonce'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'cnonce'"
op|']'
op|'='
name|'self'
op|'.'
name|'cnonce'
newline|'\n'
dedent|''
name|'if'
string|"'uri'"
name|'not'
name|'in'
name|'kw'
op|':'
newline|'\n'
indent|'            '
name|'kw'
op|'['
string|"'uri'"
op|']'
op|'='
name|'self'
op|'.'
name|'uri'
newline|'\n'
dedent|''
name|'if'
name|'quotes'
op|':'
newline|'\n'
indent|'            '
name|'quote'
op|'='
string|'\'"\''
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'quote'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
string|"', '"
op|'.'
name|'join'
op|'('
op|'['
nl|'\n'
string|"'%s=%s%s%s'"
op|'%'
op|'('
name|'k'
op|','
name|'quote'
op|','
name|'v'
op|','
name|'quote'
op|')'
nl|'\n'
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
nl|'\n'
name|'in'
name|'kw'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'v'
name|'is'
name|'not'
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getDigestResponse
dedent|''
name|'def'
name|'getDigestResponse'
op|'('
name|'self'
op|','
name|'challenge'
op|','
name|'ncount'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calculate the response for the given challenge\n        """'
newline|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'.'
name|'get'
op|'('
string|"'nonce'"
op|')'
newline|'\n'
name|'algo'
op|'='
name|'challenge'
op|'.'
name|'get'
op|'('
string|"'algorithm'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'qop'
op|'='
name|'challenge'
op|'.'
name|'get'
op|'('
string|"'qop'"
op|')'
newline|'\n'
nl|'\n'
name|'ha1'
op|'='
name|'calcHA1'
op|'('
nl|'\n'
name|'algo'
op|','
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|','
name|'nonce'
op|','
name|'self'
op|'.'
name|'cnonce'
op|')'
newline|'\n'
name|'ha2'
op|'='
name|'calcHA2'
op|'('
name|'algo'
op|','
string|'"GET"'
op|','
name|'self'
op|'.'
name|'uri'
op|','
name|'qop'
op|','
name|'None'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'calcResponse'
op|'('
name|'ha1'
op|','
name|'ha2'
op|','
name|'algo'
op|','
name|'nonce'
op|','
name|'ncount'
op|','
name|'self'
op|'.'
name|'cnonce'
op|','
name|'qop'
op|')'
newline|'\n'
name|'return'
name|'expected'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_response
dedent|''
name|'def'
name|'test_response'
op|'('
name|'self'
op|','
name|'quotes'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} accepts a digest challenge response\n        and parses it into an L{IUsernameHashedPassword} provider.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000001"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'quotes'
op|'='
name|'quotes'
op|','
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
nl|'\n'
name|'clientResponse'
op|','
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_responseWithoutQuotes
dedent|''
name|'def'
name|'test_responseWithoutQuotes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} accepts a digest challenge response\n        which does not quote the values of its fields and parses it into an\n        L{IUsernameHashedPassword} provider in the same way it would a\n        response which included quoted field values.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'test_response'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_caseInsensitiveAlgorithm
dedent|''
name|'def'
name|'test_caseInsensitiveAlgorithm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The case of the algorithm value in the response is ignored when\n        checking the credentials.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'algorithm'
op|'='
string|"'MD5'"
newline|'\n'
name|'self'
op|'.'
name|'test_response'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_md5DefaultAlgorithm
dedent|''
name|'def'
name|'test_md5DefaultAlgorithm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The algorithm defaults to MD5 if it is not supplied in the response.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'algorithm'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'test_response'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_responseWithoutClientIP
dedent|''
name|'def'
name|'test_responseWithoutClientIP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} accepts a digest challenge response\n        even if the client address it is passed is C{None}.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000001"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'clientResponse'
op|','
name|'self'
op|'.'
name|'method'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_multiResponse
dedent|''
name|'def'
name|'test_multiResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} handles multiple responses to a\n        single challenge.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000001"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'clientResponse'
op|','
name|'self'
op|'.'
name|'method'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000002"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'clientResponse'
op|','
name|'self'
op|'.'
name|'method'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failsWithDifferentMethod
dedent|''
name|'def'
name|'test_failsWithDifferentMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} returns an L{IUsernameHashedPassword}\n        provider which rejects a correct password for the given user if the\n        challenge response request is made using a different HTTP method than\n        was used to request the initial challenge.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000001"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'clientResponse'
op|','
string|"'POST'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkPassword'
op|'('
name|'self'
op|'.'
name|'password'
op|'+'
string|"'wrong'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noUsername
dedent|''
name|'def'
name|'test_noUsername'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} if the response\n        has no username field or if the username field is empty.\n        """'
newline|'\n'
comment|'# Check for no username'
nl|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
nl|'\n'
name|'self'
op|'.'
name|'formatResponse'
op|'('
name|'username'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Invalid response, no username given."'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check for an empty username'
nl|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
nl|'\n'
name|'self'
op|'.'
name|'formatResponse'
op|'('
name|'username'
op|'='
string|'""'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Invalid response, no username given."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noNonce
dedent|''
name|'def'
name|'test_noNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} if the response\n        has no nonce.\n        """'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
nl|'\n'
name|'self'
op|'.'
name|'formatResponse'
op|'('
name|'opaque'
op|'='
string|'"abc123"'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Invalid response, no nonce given."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noOpaque
dedent|''
name|'def'
name|'test_noOpaque'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} if the response\n        has no opaque.\n        """'
newline|'\n'
name|'e'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|','
nl|'\n'
name|'self'
op|'.'
name|'formatResponse'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|','
string|'"Invalid response, no opaque given."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_checkHash
dedent|''
name|'def'
name|'test_checkHash'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} returns an L{IUsernameDigestHash}\n        provider which can verify a hash of the form \'username:realm:password\'.\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'nc'
op|'='
string|'"00000001"'
newline|'\n'
name|'clientResponse'
op|'='
name|'self'
op|'.'
name|'formatResponse'
op|'('
nl|'\n'
name|'nonce'
op|'='
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'getDigestResponse'
op|'('
name|'challenge'
op|','
name|'nc'
op|')'
op|','
nl|'\n'
name|'nc'
op|'='
name|'nc'
op|','
nl|'\n'
name|'opaque'
op|'='
name|'challenge'
op|'['
string|"'opaque'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'creds'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'decode'
op|'('
name|'clientResponse'
op|','
name|'self'
op|'.'
name|'method'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'IUsernameDigestHash'
op|','
name|'creds'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'cleartext'
op|'='
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'username'
op|','
name|'self'
op|'.'
name|'realm'
op|','
name|'self'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'hash'
op|'='
name|'md5'
op|'('
name|'cleartext'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'creds'
op|'.'
name|'checkHash'
op|'('
name|'hash'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'hash'
op|'.'
name|'update'
op|'('
string|"'wrong'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'creds'
op|'.'
name|'checkHash'
op|'('
name|'hash'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidOpaque
dedent|''
name|'def'
name|'test_invalidOpaque'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} when the opaque\n        value does not contain all the required parts.\n        """'
newline|'\n'
name|'credentialFactory'
op|'='
name|'FakeDigestCredentialFactory'
op|'('
name|'self'
op|'.'
name|'algorithm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
string|"'badOpaque'"
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
name|'badOpaque'
op|'='
string|"'foo-'"
op|'+'
name|'b64encode'
op|'('
string|"'nonce,clientip'"
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badOpaque'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Invalid response, invalid opaque value'"
op|')'
newline|'\n'
nl|'\n'
name|'badOpaque'
op|'='
op|'('
nl|'\n'
string|"'foo-'"
op|'+'
name|'b64encode'
op|'('
string|"'%s,%s,foobar'"
op|'%'
op|'('
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
op|')'
op|')'
newline|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badOpaque'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'exc'
op|')'
op|','
string|"'Invalid response, invalid opaque/time values'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompatibleNonce
dedent|''
name|'def'
name|'test_incompatibleNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} when the given\n        nonce from the response does not match the nonce encoded in the opaque.\n        """'
newline|'\n'
name|'credentialFactory'
op|'='
name|'FakeDigestCredentialFactory'
op|'('
name|'self'
op|'.'
name|'algorithm'
op|','
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'badNonceOpaque'
op|'='
name|'credentialFactory'
op|'.'
name|'_generateOpaque'
op|'('
nl|'\n'
string|"'1234567890'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badNonceOpaque'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'exc'
op|')'
op|','
nl|'\n'
string|"'Invalid response, incompatible opaque/nonce values'"
op|')'
newline|'\n'
nl|'\n'
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badNonceOpaque'
op|','
nl|'\n'
string|"''"
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'str'
op|'('
name|'exc'
op|')'
op|','
nl|'\n'
string|"'Invalid response, incompatible opaque/nonce values'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompatibleClientIP
dedent|''
name|'def'
name|'test_incompatibleClientIP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} when the\n        request comes from a client IP other than what is encoded in the\n        opaque.\n        """'
newline|'\n'
name|'credentialFactory'
op|'='
name|'FakeDigestCredentialFactory'
op|'('
name|'self'
op|'.'
name|'algorithm'
op|','
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'badAddress'
op|'='
string|"'10.0.0.1'"
newline|'\n'
comment|'# Sanity check'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|','
name|'badAddress'
op|')'
newline|'\n'
nl|'\n'
name|'badNonceOpaque'
op|'='
name|'credentialFactory'
op|'.'
name|'_generateOpaque'
op|'('
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
name|'badAddress'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badNonceOpaque'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oldNonce
dedent|''
name|'def'
name|'test_oldNonce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} when the given\n        opaque is older than C{DigestCredentialFactory.CHALLENGE_LIFETIME_SECS}\n        """'
newline|'\n'
name|'credentialFactory'
op|'='
name|'FakeDigestCredentialFactory'
op|'('
name|'self'
op|'.'
name|'algorithm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'key'
op|'='
string|"'%s,%s,%s'"
op|'%'
op|'('
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'-137876876'"
op|')'
newline|'\n'
name|'digest'
op|'='
name|'md5'
op|'('
name|'key'
op|'+'
name|'credentialFactory'
op|'.'
name|'privateKey'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'ekey'
op|'='
name|'b64encode'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
name|'oldNonceOpaque'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'digest'
op|','
name|'ekey'
op|'.'
name|'strip'
op|'('
string|"'\\n'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'oldNonceOpaque'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_mismatchedOpaqueChecksum
dedent|''
name|'def'
name|'test_mismatchedOpaqueChecksum'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory.decode} raises L{LoginFailed} when the opaque\n        checksum fails verification.\n        """'
newline|'\n'
name|'credentialFactory'
op|'='
name|'FakeDigestCredentialFactory'
op|'('
name|'self'
op|'.'
name|'algorithm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'realm'
op|')'
newline|'\n'
name|'challenge'
op|'='
name|'credentialFactory'
op|'.'
name|'getChallenge'
op|'('
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'key'
op|'='
string|"'%s,%s,%s'"
op|'%'
op|'('
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'0'"
op|')'
newline|'\n'
nl|'\n'
name|'digest'
op|'='
name|'md5'
op|'('
name|'key'
op|'+'
string|"'this is not the right pkey'"
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'badChecksum'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'digest'
op|','
name|'b64encode'
op|'('
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'LoginFailed'
op|','
nl|'\n'
name|'credentialFactory'
op|'.'
name|'_verifyOpaque'
op|','
nl|'\n'
name|'badChecksum'
op|','
nl|'\n'
name|'challenge'
op|'['
string|"'nonce'"
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientAddress'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_incompatibleCalcHA1Options
dedent|''
name|'def'
name|'test_incompatibleCalcHA1Options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{calcHA1} raises L{TypeError} when any of the pszUsername, pszRealm,\n        or pszPassword arguments are specified with the preHA1 keyword\n        argument.\n        """'
newline|'\n'
name|'arguments'
op|'='
op|'('
nl|'\n'
op|'('
string|'"user"'
op|','
string|'"realm"'
op|','
string|'"password"'
op|','
string|'"preHA1"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
string|'"realm"'
op|','
name|'None'
op|','
string|'"preHA1"'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
string|'"password"'
op|','
string|'"preHA1"'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'pszUsername'
op|','
name|'pszRealm'
op|','
name|'pszPassword'
op|','
name|'preHA1'
name|'in'
name|'arguments'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'TypeError'
op|','
nl|'\n'
name|'calcHA1'
op|','
nl|'\n'
string|'"md5"'
op|','
nl|'\n'
name|'pszUsername'
op|','
nl|'\n'
name|'pszRealm'
op|','
nl|'\n'
name|'pszPassword'
op|','
nl|'\n'
string|'"nonce"'
op|','
nl|'\n'
string|'"cnonce"'
op|','
nl|'\n'
name|'preHA1'
op|'='
name|'preHA1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noNewlineOpaque
dedent|''
dedent|''
name|'def'
name|'test_noNewlineOpaque'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{DigestCredentialFactory._generateOpaque} returns a value without\n        newlines, regardless of the length of the nonce.\n        """'
newline|'\n'
name|'opaque'
op|'='
name|'self'
op|'.'
name|'credentialFactory'
op|'.'
name|'_generateOpaque'
op|'('
nl|'\n'
string|'"long nonce "'
op|'*'
number|'10'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'\\n'"
op|','
name|'opaque'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

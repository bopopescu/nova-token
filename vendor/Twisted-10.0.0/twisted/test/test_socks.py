begin_unit
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.protocol.socks}, an implementation of the SOCKSv4 and\nSOCKSv4a protocols.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'struct'
op|','
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'proto_helpers'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'address'
op|','
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'error'
name|'import'
name|'DNSLookupError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'socks'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringTCPTransport
name|'class'
name|'StringTCPTransport'
op|'('
name|'proto_helpers'
op|'.'
name|'StringTransport'
op|')'
op|':'
newline|'\n'
DECL|variable|stringTCPTransport_closing
indent|'    '
name|'stringTCPTransport_closing'
op|'='
name|'False'
newline|'\n'
DECL|variable|peer
name|'peer'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|getPeer
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'peer'
newline|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
string|"'2.3.4.5'"
op|','
number|'42'
op|')'
newline|'\n'
nl|'\n'
DECL|member|loseConnection
dedent|''
name|'def'
name|'loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stringTCPTransport_closing'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResolverReactor
dedent|''
dedent|''
name|'class'
name|'FakeResolverReactor'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Bare-bones reactor with deterministic behavior for the resolve method.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @type names: C{dict} containing C{str} keys and C{str} values.\n        @param names: A hostname to IP address mapping. The IP addresses are\n            stringified dotted quads.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'names'
op|'='
name|'names'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|resolve
dedent|''
name|'def'
name|'resolve'
op|'('
name|'self'
op|','
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resolve a hostname by looking it up in the C{names} dictionary.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'self'
op|'.'
name|'names'
op|'['
name|'hostname'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
nl|'\n'
name|'DNSLookupError'
op|'('
string|'"FakeResolverReactor couldn\'t find "'
op|'+'
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SOCKSv4Driver
dedent|''
dedent|''
dedent|''
name|'class'
name|'SOCKSv4Driver'
op|'('
name|'socks'
op|'.'
name|'SOCKSv4'
op|')'
op|':'
newline|'\n'
comment|'# last SOCKSv4Outgoing instantiated'
nl|'\n'
DECL|variable|driver_outgoing
indent|'    '
name|'driver_outgoing'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# last SOCKSv4IncomingFactory instantiated'
nl|'\n'
DECL|variable|driver_listen
name|'driver_listen'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connectClass
name|'def'
name|'connectClass'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'klass'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# fake it'
nl|'\n'
indent|'        '
name|'proto'
op|'='
name|'klass'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'peer'
op|'='
name|'address'
op|'.'
name|'IPv4Address'
op|'('
string|"'TCP'"
op|','
name|'host'
op|','
name|'port'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver_outgoing'
op|'='
name|'proto'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'proto'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listenClass
dedent|''
name|'def'
name|'listenClass'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'klass'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# fake it'
nl|'\n'
indent|'        '
name|'factory'
op|'='
name|'klass'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver_listen'
op|'='
name|'factory'
newline|'\n'
name|'if'
name|'port'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'='
number|'1234'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
op|'('
string|"'6.7.8.9'"
op|','
name|'port'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connect
dedent|''
dedent|''
name|'class'
name|'Connect'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SOCKS and SOCKSv4a connect requests using the L{SOCKSv4} protocol.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'='
name|'SOCKSv4Driver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'reactor'
op|'='
name|'FakeResolverReactor'
op|'('
op|'{'
string|'"localhost"'
op|':'
string|'"127.0.0.1"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'outgoing'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
newline|'\n'
name|'if'
name|'outgoing'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'outgoing'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|','
nl|'\n'
string|'"Outgoing SOCKS connections need to be closed."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simple
dedent|''
dedent|''
name|'def'
name|'test_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# the other way around'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'dataReceived'
op|'('
string|"'hi there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hi there'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_socks4aSuccessfulResolution
dedent|''
name|'def'
name|'test_socks4aSuccessfulResolution'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the destination IP address has zeros for the first three octets and\n        non-zero for the fourth octet, the client is attempting a v4a\n        connection.  A hostname is specified after the user ID string and the\n        server connects to the address that hostname resolves to.\n\n        @see: U{http://en.wikipedia.org/wiki/SOCKS#SOCKS_4a_protocol}\n        """'
newline|'\n'
comment|'# send the domain name "localhost" to be resolved'
nl|'\n'
name|'clientRequest'
op|'='
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.1'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAZ\\0'"
nl|'\n'
op|'+'
string|"'localhost\\0'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Deliver the bytes one by one to exercise the protocol's buffering"
nl|'\n'
comment|'# logic. FakeResolverReactor\'s resolve method is invoked to "resolve"'
nl|'\n'
comment|'# the hostname.'
nl|'\n'
name|'for'
name|'byte'
name|'in'
name|'clientRequest'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the server responded with the address which will be'
nl|'\n'
comment|'# connected to.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'34'
op|')'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'127.0.0.1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pass some data through and verify it is forwarded to the outgoing'
nl|'\n'
comment|'# connection.'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Deliver some data from the output connection and verify it is'
nl|'\n'
comment|'# passed along to the incoming side.'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'dataReceived'
op|'('
string|"'hi there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hi there'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_socks4aFailedResolution
dedent|''
name|'def'
name|'test_socks4aFailedResolution'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Failed hostname resolution on a SOCKSv4a packet results in a 91 error\n        response and the connection getting closed.\n        """'
newline|'\n'
comment|'# send the domain name "failinghost" to be resolved'
nl|'\n'
name|'clientRequest'
op|'='
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.1'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAZ\\0'"
nl|'\n'
op|'+'
string|"'failinghost\\0'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Deliver the bytes one by one to exercise the protocol's buffering"
nl|'\n'
comment|'# logic. FakeResolverReactor\'s resolve method is invoked to "resolve"'
nl|'\n'
comment|'# the hostname.'
nl|'\n'
name|'for'
name|'byte'
name|'in'
name|'clientRequest'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the server responds with a 91 error.'
nl|'\n'
dedent|''
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'91'
op|','
number|'0'
op|')'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# A failed resolution causes the transport to drop the connection.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_accessDenied
dedent|''
name|'def'
name|'test_accessDenied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'authorize'
op|'='
name|'lambda'
name|'code'
op|','
name|'server'
op|','
name|'port'
op|','
name|'user'
op|':'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'4242'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'10.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'91'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_eofRemote
dedent|''
name|'def'
name|'test_eofRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# now close it from the server side'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_eofLocal
dedent|''
name|'def'
name|'test_eofLocal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'1'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# now close it from the client side'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Bind
dedent|''
dedent|''
name|'class'
name|'Bind'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for SOCKS and SOCKSv4a bind requests using the L{SOCKSv4} protocol.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'='
name|'SOCKSv4Driver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'reactor'
op|'='
name|'FakeResolverReactor'
op|'('
op|'{'
string|'"localhost"'
op|':'
string|'"127.0.0.1"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'##     def tearDown(self):'
nl|'\n'
comment|'##         # TODO ensure the listen port is closed'
nl|'\n'
comment|'##         listen = self.sock.driver_listen'
nl|'\n'
comment|'##         if listen is not None:'
nl|'\n'
comment|'##             self.assert_(incoming.transport.stringTCPTransport_closing,'
nl|'\n'
comment|'##                     "Incoming SOCKS connections need to be closed.")'
nl|'\n'
nl|'\n'
DECL|member|test_simple
dedent|''
name|'def'
name|'test_simple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'1234'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'6.7.8.9'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# connect'
nl|'\n'
name|'incoming'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'incoming'
op|','
name|'None'
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# now we should have the second reply packet'
nl|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'incoming'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# the other way around'
nl|'\n'
name|'incoming'
op|'.'
name|'dataReceived'
op|'('
string|"'hi there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hi there'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_socks4a
dedent|''
name|'def'
name|'test_socks4a'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If the destination IP address has zeros for the first three octets and\n        non-zero for the fourth octet, the client is attempting a v4a\n        connection.  A hostname is specified after the user ID string and the\n        server connects to the address that hostname resolves to.\n\n        @see: U{http://en.wikipedia.org/wiki/SOCKS#SOCKS_4a_protocol}\n        """'
newline|'\n'
comment|'# send the domain name "localhost" to be resolved'
nl|'\n'
name|'clientRequest'
op|'='
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.1'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAZ\\0'"
nl|'\n'
op|'+'
string|"'localhost\\0'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Deliver the bytes one by one to exercise the protocol's buffering"
nl|'\n'
comment|'# logic. FakeResolverReactor\'s resolve method is invoked to "resolve"'
nl|'\n'
comment|'# the hostname.'
nl|'\n'
name|'for'
name|'byte'
name|'in'
name|'clientRequest'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the server responded with the address which will be'
nl|'\n'
comment|'# connected to.'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'1234'
op|')'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'6.7.8.9'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# connect'
nl|'\n'
name|'incoming'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'127.0.0.1'"
op|','
number|'5345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'incoming'
op|','
name|'None'
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# now we should have the second reply packet'
nl|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deliver some data from the output connection and verify it is'
nl|'\n'
comment|'# passed along to the incoming side.'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hi there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'incoming'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hi there'"
op|')'
newline|'\n'
nl|'\n'
comment|'# the other way around'
nl|'\n'
name|'incoming'
op|'.'
name|'dataReceived'
op|'('
string|"'hi there'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
string|"'hi there'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_socks4aFailedResolution
dedent|''
name|'def'
name|'test_socks4aFailedResolution'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Failed hostname resolution on a SOCKSv4a packet results in a 91 error\n        response and the connection getting closed.\n        """'
newline|'\n'
comment|'# send the domain name "failinghost" to be resolved'
nl|'\n'
name|'clientRequest'
op|'='
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.1'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAZ\\0'"
nl|'\n'
op|'+'
string|"'failinghost\\0'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Deliver the bytes one by one to exercise the protocol's buffering"
nl|'\n'
comment|'# logic. FakeResolverReactor\'s resolve method is invoked to "resolve"'
nl|'\n'
comment|'# the hostname.'
nl|'\n'
name|'for'
name|'byte'
name|'in'
name|'clientRequest'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
name|'byte'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the server responds with a 91 error.'
nl|'\n'
dedent|''
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'91'
op|','
number|'0'
op|')'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# A failed resolution causes the transport to drop the connection.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_outgoing'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_accessDenied
dedent|''
name|'def'
name|'test_accessDenied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'authorize'
op|'='
name|'lambda'
name|'code'
op|','
name|'server'
op|','
name|'port'
op|','
name|'user'
op|':'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'4242'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'10.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'91'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_eofRemote
dedent|''
name|'def'
name|'test_eofRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# connect'
nl|'\n'
name|'incoming'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'incoming'
op|','
name|'None'
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# now we should have the second reply packet'
nl|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'incoming'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# now close it from the server side'
nl|'\n'
name|'incoming'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_eofLocal
dedent|''
name|'def'
name|'test_eofLocal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# connect'
nl|'\n'
name|'incoming'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.2.3.4'"
op|','
number|'5345'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'incoming'
op|','
name|'None'
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'transport'
op|'='
name|'StringTCPTransport'
op|'('
op|')'
newline|'\n'
name|'incoming'
op|'.'
name|'connectionMade'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# now we should have the second reply packet'
nl|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'90'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
nl|'\n'
comment|'# pass some data through'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
string|"'hello, world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'incoming'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'hello, world'"
op|')'
newline|'\n'
nl|'\n'
comment|'# now close it from the client side'
nl|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connectionLost'
op|'('
string|"'fake reason'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_badSource
dedent|''
name|'def'
name|'test_badSource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'dataReceived'
op|'('
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'4'
op|','
number|'2'
op|','
number|'34'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'1.2.3.4'"
op|')'
nl|'\n'
op|'+'
string|"'fooBAR'"
nl|'\n'
op|'+'
string|"'\\0'"
op|')'
newline|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# connect from WRONG address'
nl|'\n'
name|'incoming'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'driver_listen'
op|'.'
name|'buildProtocol'
op|'('
op|'('
string|"'1.6.6.6'"
op|','
number|'666'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'incoming'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now we should have the second reply packet and it should'
nl|'\n'
comment|'# be a failure. The connection should be closing.'
nl|'\n'
name|'sent'
op|'='
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sent'
op|','
nl|'\n'
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BBH'"
op|','
number|'0'
op|','
number|'91'
op|','
number|'0'
op|')'
nl|'\n'
op|'+'
name|'socket'
op|'.'
name|'inet_aton'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'sock'
op|'.'
name|'transport'
op|'.'
name|'stringTCPTransport_closing'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

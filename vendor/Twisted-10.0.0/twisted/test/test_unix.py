begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for implementations of L{IReactorUNIX} and L{IReactorUNIXDatagram}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'stat'
op|','
name|'os'
op|','
name|'sys'
op|','
name|'types'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'interfaces'
op|','
name|'reactor'
op|','
name|'protocol'
op|','
name|'error'
op|','
name|'address'
op|','
name|'defer'
op|','
name|'utils'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'lockfile'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'test_tcp'
name|'import'
name|'MyServerFactory'
op|','
name|'MyClientFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FailedConnectionClientFactory
name|'class'
name|'FailedConnectionClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onFail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onFail'
op|'='
name|'onFail'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onFail'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnixSocketTestCase
dedent|''
dedent|''
name|'class'
name|'UnixSocketTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test unix sockets.\n    """'
newline|'\n'
DECL|member|test_peerBind
name|'def'
name|'test_peerBind'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The address passed to the server factory\'s C{buildProtocol} method and\n        the address returned by the connected protocol\'s transport\'s C{getPeer}\n        method match the address the client socket is bound to.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'peername'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'connMade'
op|'='
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'unixPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'unixSocket'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_UNIX'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'unixSocket'
op|'.'
name|'close'
op|')'
newline|'\n'
name|'unixSocket'
op|'.'
name|'bind'
op|'('
name|'peername'
op|')'
newline|'\n'
name|'unixSocket'
op|'.'
name|'connect'
op|'('
name|'filename'
op|')'
newline|'\n'
DECL|function|cbConnMade
name|'def'
name|'cbConnMade'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'address'
op|'.'
name|'UNIXAddress'
op|'('
name|'peername'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'serverFactory'
op|'.'
name|'peerAddresses'
op|','
op|'['
name|'expected'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
dedent|''
name|'connMade'
op|'.'
name|'addCallback'
op|'('
name|'cbConnMade'
op|')'
newline|'\n'
name|'return'
name|'connMade'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_dumber
dedent|''
name|'def'
name|'test_dumber'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorUNIX.connectUNIX} can be used to connect a client to a server\n        started with L{IReactorUNIX.listenUNIX}.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'serverConnMade'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'unixPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'clientFactory'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'clientConnMade'
newline|'\n'
name|'c'
op|'='
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
name|'filename'
op|','
name|'clientFactory'
op|')'
newline|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverConnMade'
op|','
name|'clientConnMade'
op|']'
op|')'
newline|'\n'
DECL|function|allConnected
name|'def'
name|'allConnected'
op|'('
op|'('
name|'serverProtocol'
op|','
name|'clientProtocol'
op|')'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Incidental assertion which may or may not be redundant with some'
nl|'\n'
comment|'# other test.  This probably deserves its own test method.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'clientFactory'
op|'.'
name|'peerAddresses'
op|','
nl|'\n'
op|'['
name|'address'
op|'.'
name|'UNIXAddress'
op|'('
name|'filename'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'clientProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'allConnected'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_pidFile
dedent|''
name|'def'
name|'test_pidFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A lockfile is created and locked when L{IReactorUNIX.listenUNIX} is\n        called and released when the Deferred returned by the L{IListeningPort}\n        provider\'s C{stopListening} method is called back.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'serverConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'serverConnMade'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|','
name|'wantPID'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'lockfile'
op|'.'
name|'isLocked'
op|'('
name|'filename'
op|'+'
string|'".lock"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# XXX This part would test something about the checkPID parameter, but'
nl|'\n'
comment|"# it doesn't actually.  It should be rewritten to test the several"
nl|'\n'
comment|'# different possible behaviors.  -exarkun'
nl|'\n'
name|'clientFactory'
op|'='
name|'MyClientFactory'
op|'('
op|')'
newline|'\n'
name|'clientConnMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientFactory'
op|'.'
name|'protocolConnectionMade'
op|'='
name|'clientConnMade'
newline|'\n'
name|'c'
op|'='
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
name|'filename'
op|','
name|'clientFactory'
op|','
name|'checkPID'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'serverConnMade'
op|','
name|'clientConnMade'
op|']'
op|')'
newline|'\n'
DECL|function|_portStuff
name|'def'
name|'_portStuff'
op|'('
op|'('
name|'serverProtocol'
op|','
name|'clientProto'
op|')'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Incidental assertion which may or may not be redundant with some'
nl|'\n'
comment|'# other test.  This probably deserves its own test method.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'clientFactory'
op|'.'
name|'peerAddresses'
op|','
nl|'\n'
op|'['
name|'address'
op|'.'
name|'UNIXAddress'
op|'('
name|'filename'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'clientProto'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'serverProtocol'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'unixPort'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_portStuff'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_check
name|'def'
name|'_check'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failIf'
op|'('
name|'lockfile'
op|'.'
name|'isLocked'
op|'('
name|'filename'
op|'+'
string|'".lock"'
op|')'
op|','
string|"'locked'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_check'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_socketLocking
dedent|''
name|'def'
name|'test_socketLocking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorUNIX.listenUNIX} raises L{error.CannotListenError} if passed\n        the name of a file on which a server is already listening.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'serverFactory'
op|'='
name|'MyServerFactory'
op|'('
op|')'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|','
name|'wantPID'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'CannotListenError'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'listenUNIX'
op|','
name|'filename'
op|','
name|'serverFactory'
op|','
name|'wantPID'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|stoppedListening
name|'def'
name|'stoppedListening'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|','
name|'wantPID'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'unixPort'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'unixPort'
op|'.'
name|'stopListening'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'stoppedListening'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_uncleanSocketTest
dedent|''
name|'def'
name|'_uncleanSocketTest'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'source'
op|'='
op|'('
string|'"from twisted.internet import protocol, reactor\\n"'
nl|'\n'
string|'"reactor.listenUNIX(%r, protocol.ServerFactory(), wantPID=True)\\n"'
op|')'
op|'%'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
op|')'
newline|'\n'
name|'env'
op|'='
op|'{'
string|"'PYTHONPATH'"
op|':'
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
name|'sys'
op|'.'
name|'path'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'utils'
op|'.'
name|'getProcessValue'
op|'('
name|'sys'
op|'.'
name|'executable'
op|','
op|'('
string|'"-u"'
op|','
string|'"-c"'
op|','
name|'source'
op|')'
op|','
name|'env'
op|'='
name|'env'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_uncleanServerSocketLocking
dedent|''
name|'def'
name|'test_uncleanServerSocketLocking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed C{True} for the C{wantPID} parameter, a server can be started\n        listening with L{IReactorUNIX.listenUNIX} when passed the name of a\n        file on which a previous server which has not exited cleanly has been\n        listening using the C{wantPID} option.\n        """'
newline|'\n'
DECL|function|ranStupidChild
name|'def'
name|'ranStupidChild'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
comment|'# If this next call succeeds, our lock handling is correct.'
nl|'\n'
indent|'            '
name|'p'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'MyServerFactory'
op|'('
op|')'
op|','
name|'wantPID'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'p'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_uncleanSocketTest'
op|'('
name|'ranStupidChild'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectToUncleanServer
dedent|''
name|'def'
name|'test_connectToUncleanServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If passed C{True} for the C{checkPID} parameter, a client connection\n        attempt made with L{IReactorUNIX.connectUNIX} fails with\n        L{error.BadFileError}.\n        """'
newline|'\n'
DECL|function|ranStupidChild
name|'def'
name|'ranStupidChild'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'FailedConnectionClientFactory'
op|'('
name|'d'
op|')'
newline|'\n'
name|'c'
op|'='
name|'reactor'
op|'.'
name|'connectUNIX'
op|'('
name|'self'
op|'.'
name|'filename'
op|','
name|'f'
op|','
name|'checkPID'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'error'
op|'.'
name|'BadFileError'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_uncleanSocketTest'
op|'('
name|'ranStupidChild'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_reprTest
dedent|''
name|'def'
name|'_reprTest'
op|'('
name|'self'
op|','
name|'serverFactory'
op|','
name|'factoryName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the C{__str__} and C{__repr__} implementations of a UNIX port when\n        used with the given factory.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIX'
op|'('
name|'filename'
op|','
name|'serverFactory'
op|')'
newline|'\n'
nl|'\n'
name|'connectedString'
op|'='
string|'"<%s on %r>"'
op|'%'
op|'('
name|'factoryName'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'unixPort'
op|')'
op|','
name|'connectedString'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'unixPort'
op|')'
op|','
name|'connectedString'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'unixPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
DECL|function|stoppedListening
name|'def'
name|'stoppedListening'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unconnectedString'
op|'='
string|'"<%s (not listening)>"'
op|'%'
op|'('
name|'factoryName'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'unixPort'
op|')'
op|','
name|'unconnectedString'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'unixPort'
op|')'
op|','
name|'unconnectedString'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'stoppedListening'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reprWithClassicFactory
dedent|''
name|'def'
name|'test_reprWithClassicFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The two string representations of the L{IListeningPort} returned by\n        L{IReactorUNIX.listenUNIX} contains the name of the classic factory\n        class being used and the filename on which the port is listening or\n        indicates that the port is not listening.\n        """'
newline|'\n'
DECL|class|ClassicFactory
name|'class'
name|'ClassicFactory'
op|':'
newline|'\n'
DECL|member|doStart
indent|'            '
name|'def'
name|'doStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'ClassicFactory'
op|','
name|'types'
op|'.'
name|'ClassType'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_reprTest'
op|'('
nl|'\n'
name|'ClassicFactory'
op|'('
op|')'
op|','
string|'"twisted.test.test_unix.ClassicFactory"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reprWithNewStyleFactory
dedent|''
name|'def'
name|'test_reprWithNewStyleFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The two string representations of the L{IListeningPort} returned by\n        L{IReactorUNIX.listenUNIX} contains the name of the new-style factory\n        class being used and the filename on which the port is listening or\n        indicates that the port is not listening.\n        """'
newline|'\n'
DECL|class|NewStyleFactory
name|'class'
name|'NewStyleFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|doStart
indent|'            '
name|'def'
name|'doStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'NewStyleFactory'
op|','
name|'type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_reprTest'
op|'('
nl|'\n'
name|'NewStyleFactory'
op|'('
op|')'
op|','
string|'"twisted.test.test_unix.NewStyleFactory"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ClientProto
dedent|''
dedent|''
name|'class'
name|'ClientProto'
op|'('
name|'protocol'
op|'.'
name|'ConnectedDatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'started'
op|'='
name|'stopped'
op|'='
name|'False'
newline|'\n'
DECL|variable|gotback
name|'gotback'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferredStarted'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferredGotBack'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProtocol
dedent|''
name|'def'
name|'stopProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopped'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|startProtocol
dedent|''
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'deferredStarted'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotback'
op|'='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'deferredGotBack'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ServerProto
dedent|''
dedent|''
name|'class'
name|'ServerProto'
op|'('
name|'protocol'
op|'.'
name|'DatagramProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'started'
op|'='
name|'stopped'
op|'='
name|'False'
newline|'\n'
name|'gotwhat'
op|'='
name|'gotfrom'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deferredStarted'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'deferredGotWhat'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopProtocol
dedent|''
name|'def'
name|'stopProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopped'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|startProtocol
dedent|''
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'started'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'deferredStarted'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'gotfrom'
op|'='
name|'addr'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hi back"'
op|','
name|'addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'gotwhat'
op|'='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'deferredGotWhat'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DatagramUnixSocketTestCase
dedent|''
dedent|''
name|'class'
name|'DatagramUnixSocketTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test datagram UNIX sockets.\n    """'
newline|'\n'
DECL|member|test_exchange
name|'def'
name|'test_exchange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a datagram can be sent to and received by a server and vice\n        versa.\n        """'
newline|'\n'
name|'clientaddr'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'serveraddr'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'sp'
op|'='
name|'ServerProto'
op|'('
op|')'
newline|'\n'
name|'cp'
op|'='
name|'ClientProto'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'reactor'
op|'.'
name|'listenUNIXDatagram'
op|'('
name|'serveraddr'
op|','
name|'sp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'s'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'c'
op|'='
name|'reactor'
op|'.'
name|'connectUNIXDatagram'
op|'('
name|'serveraddr'
op|','
name|'cp'
op|','
name|'bindAddress'
op|'='
name|'clientaddr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'c'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'sp'
op|'.'
name|'deferredStarted'
op|','
name|'cp'
op|'.'
name|'deferredStarted'
op|']'
op|')'
newline|'\n'
DECL|function|write
name|'def'
name|'write'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cp'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"hi"'
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
name|'sp'
op|'.'
name|'deferredGotWhat'
op|','
nl|'\n'
name|'cp'
op|'.'
name|'deferredGotBack'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_cbTestExchange
dedent|''
name|'def'
name|'_cbTestExchange'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|'"hi"'
op|','
name|'sp'
op|'.'
name|'gotwhat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'clientaddr'
op|','
name|'sp'
op|'.'
name|'gotfrom'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
string|'"hi back"'
op|','
name|'cp'
op|'.'
name|'gotback'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'write'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'_cbTestExchange'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cannotListen
dedent|''
name|'def'
name|'test_cannotListen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{IReactorUNIXDatagram.listenUNIXDatagram} raises\n        L{error.CannotListenError} if the unix socket specified is already in\n        use.\n        """'
newline|'\n'
name|'addr'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'p'
op|'='
name|'ServerProto'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'reactor'
op|'.'
name|'listenUNIXDatagram'
op|'('
name|'addr'
op|','
name|'p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'error'
op|'.'
name|'CannotListenError'
op|','
name|'reactor'
op|'.'
name|'listenUNIXDatagram'
op|','
name|'addr'
op|','
name|'p'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'stopListening'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# test connecting to bound and connected (somewhere else) address'
nl|'\n'
nl|'\n'
DECL|member|_reprTest
dedent|''
name|'def'
name|'_reprTest'
op|'('
name|'self'
op|','
name|'serverProto'
op|','
name|'protocolName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test the C{__str__} and C{__repr__} implementations of a UNIX datagram\n        port when used with the given protocol.\n        """'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'unixPort'
op|'='
name|'reactor'
op|'.'
name|'listenUNIXDatagram'
op|'('
name|'filename'
op|','
name|'serverProto'
op|')'
newline|'\n'
nl|'\n'
name|'connectedString'
op|'='
string|'"<%s on %r>"'
op|'%'
op|'('
name|'protocolName'
op|','
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'unixPort'
op|')'
op|','
name|'connectedString'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'unixPort'
op|')'
op|','
name|'connectedString'
op|')'
newline|'\n'
nl|'\n'
name|'stopDeferred'
op|'='
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'unixPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
DECL|function|stoppedListening
name|'def'
name|'stoppedListening'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unconnectedString'
op|'='
string|'"<%s (not listening)>"'
op|'%'
op|'('
name|'protocolName'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'unixPort'
op|')'
op|','
name|'unconnectedString'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'unixPort'
op|')'
op|','
name|'unconnectedString'
op|')'
newline|'\n'
dedent|''
name|'stopDeferred'
op|'.'
name|'addCallback'
op|'('
name|'stoppedListening'
op|')'
newline|'\n'
name|'return'
name|'stopDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reprWithClassicProtocol
dedent|''
name|'def'
name|'test_reprWithClassicProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The two string representations of the L{IListeningPort} returned by\n        L{IReactorUNIXDatagram.listenUNIXDatagram} contains the name of the\n        classic protocol class being used and the filename on which the port is\n        listening or indicates that the port is not listening.\n        """'
newline|'\n'
DECL|class|ClassicProtocol
name|'class'
name|'ClassicProtocol'
op|':'
newline|'\n'
DECL|member|makeConnection
indent|'            '
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'ClassicProtocol'
op|','
name|'types'
op|'.'
name|'ClassType'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_reprTest'
op|'('
nl|'\n'
name|'ClassicProtocol'
op|'('
op|')'
op|','
string|'"twisted.test.test_unix.ClassicProtocol"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reprWithNewStyleProtocol
dedent|''
name|'def'
name|'test_reprWithNewStyleProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The two string representations of the L{IListeningPort} returned by\n        L{IReactorUNIXDatagram.listenUNIXDatagram} contains the name of the\n        new-style protocol class being used and the filename on which the port\n        is listening or indicates that the port is not listening.\n        """'
newline|'\n'
DECL|class|NewStyleProtocol
name|'class'
name|'NewStyleProtocol'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|makeConnection
indent|'            '
name|'def'
name|'makeConnection'
op|'('
name|'self'
op|','
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|doStop
dedent|''
name|'def'
name|'doStop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'NewStyleProtocol'
op|','
name|'type'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_reprTest'
op|'('
nl|'\n'
name|'NewStyleProtocol'
op|'('
op|')'
op|','
string|'"twisted.test.test_unix.NewStyleProtocol"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUNIX'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'UnixSocketTestCase'
op|'.'
name|'skip'
op|'='
string|'"This reactor does not support UNIX domain sockets"'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorUNIXDatagram'
op|'('
name|'reactor'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'DatagramUnixSocketTestCase'
op|'.'
name|'skip'
op|'='
string|'"This reactor does not support UNIX datagram sockets"'
newline|'\n'
dedent|''
endmarker|''
end_unit

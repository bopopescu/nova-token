begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.python.compat}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'types'
op|','
name|'socket'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'set'
op|','
name|'frozenset'
op|','
name|'reduce'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IterableCounter
name|'class'
name|'IterableCounter'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'lim'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lim'
op|'='
name|'lim'
newline|'\n'
name|'self'
op|'.'
name|'i'
op|'='
op|'-'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'i'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'i'
op|'>='
name|'self'
op|'.'
name|'lim'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'i'
newline|'\n'
nl|'\n'
DECL|class|CompatTestCase
dedent|''
dedent|''
name|'class'
name|'CompatTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|testDict
indent|'    '
name|'def'
name|'testDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d1'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'b'"
op|'}'
newline|'\n'
name|'d2'
op|'='
name|'dict'
op|'('
name|'d1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d1'
op|','
name|'d2'
op|')'
newline|'\n'
name|'d1'
op|'['
string|"'a'"
op|']'
op|'='
string|"'c'"
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'d1'
op|','
name|'d2'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'dict'
op|'('
name|'d1'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'d1'
op|','
name|'d2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testBool
dedent|''
name|'def'
name|'testBool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bool'
op|'('
string|"'hi'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bool'
op|'('
name|'True'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bool'
op|'('
string|"''"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bool'
op|'('
name|'False'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIteration
dedent|''
name|'def'
name|'testIteration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst1'
op|','
name|'lst2'
op|'='
name|'range'
op|'('
number|'10'
op|')'
op|','
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'iter'
op|'('
name|'lst1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lst2'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lst1'
op|','
name|'lst2'
op|')'
newline|'\n'
name|'del'
name|'lst2'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'iterable'
op|'='
name|'iter'
op|'('
name|'lst1'
op|')'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'lst2'
op|'.'
name|'append'
op|'('
name|'iterable'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lst1'
op|','
name|'lst2'
op|')'
newline|'\n'
name|'del'
name|'lst2'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'iter'
op|'('
name|'IterableCounter'
op|'('
number|'10'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lst2'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lst1'
op|','
name|'lst2'
op|')'
newline|'\n'
name|'del'
name|'lst2'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'iterable'
op|'='
name|'iter'
op|'('
name|'IterableCounter'
op|'('
number|'10'
op|')'
op|')'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'lst2'
op|'.'
name|'append'
op|'('
name|'iterable'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lst1'
op|','
name|'lst2'
op|')'
newline|'\n'
name|'del'
name|'lst2'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'iter'
op|'('
name|'IterableCounter'
op|'('
number|'20'
op|')'
op|'.'
name|'next'
op|','
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lst2'
op|'.'
name|'append'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'lst1'
op|','
name|'lst2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIsinstance
dedent|''
name|'def'
name|'testIsinstance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
string|"u'hi'"
op|','
name|'types'
op|'.'
name|'StringTypes'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|')'
newline|'\n'
comment|"# I'm pretty sure it's impossible to implement this"
nl|'\n'
comment|'# without replacing isinstance on 2.2 as well :('
nl|'\n'
comment|'# self.assert_(isinstance({}, dict))'
nl|'\n'
nl|'\n'
DECL|member|testStrip
dedent|''
name|'def'
name|'testStrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' x '"
op|'.'
name|'lstrip'
op|'('
string|"' '"
op|')'
op|','
string|"'x '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' x x'"
op|'.'
name|'lstrip'
op|'('
string|"' '"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' x '"
op|'.'
name|'rstrip'
op|'('
string|"' '"
op|')'
op|','
string|"' x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'x x '"
op|'.'
name|'rstrip'
op|'('
string|"' '"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\t x '"
op|'.'
name|'lstrip'
op|'('
string|"'\\t '"
op|')'
op|','
string|"'x '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' \\tx x'"
op|'.'
name|'lstrip'
op|'('
string|"'\\t '"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' x\\t '"
op|'.'
name|'rstrip'
op|'('
string|"' \\t'"
op|')'
op|','
string|"' x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'x x \\t'"
op|'.'
name|'rstrip'
op|'('
string|"' \\t'"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\t x '"
op|'.'
name|'strip'
op|'('
string|"'\\t '"
op|')'
op|','
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' \\tx x'"
op|'.'
name|'strip'
op|'('
string|"'\\t '"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"' x\\t '"
op|'.'
name|'strip'
op|'('
string|"' \\t'"
op|')'
op|','
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'x x \\t'"
op|'.'
name|'strip'
op|'('
string|"' \\t'"
op|')'
op|','
string|"'x x'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNToP
dedent|''
name|'def'
name|'testNToP'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'inet_ntop'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'lambda'
name|'a'
op|':'
name|'inet_ntop'
op|'('
name|'socket'
op|'.'
name|'AF_INET6'
op|','
name|'a'
op|')'
newline|'\n'
name|'g'
op|'='
name|'lambda'
name|'a'
op|':'
name|'inet_ntop'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'a'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'::'"
op|','
name|'f'
op|'('
string|"'\\x00'"
op|'*'
number|'16'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'::1'"
op|','
name|'f'
op|'('
string|"'\\x00'"
op|'*'
number|'15'
op|'+'
string|"'\\x01'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"'aef:b01:506:1001:ffff:9997:55:170'"
op|','
nl|'\n'
name|'f'
op|'('
string|"'\\x0a\\xef\\x0b\\x01\\x05\\x06\\x10\\x01\\xff\\xff\\x99\\x97\\x00\\x55\\x01\\x70'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'1.0.1.0'"
op|','
name|'g'
op|'('
string|"'\\x01\\x00\\x01\\x00'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'170.85.170.85'"
op|','
name|'g'
op|'('
string|"'\\xaa\\x55\\xaa\\x55'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'255.255.255.255'"
op|','
name|'g'
op|'('
string|"'\\xff\\xff\\xff\\xff'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'100::'"
op|','
name|'f'
op|'('
string|"'\\x01'"
op|'+'
string|"'\\x00'"
op|'*'
number|'15'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'100::1'"
op|','
name|'f'
op|'('
string|"'\\x01'"
op|'+'
string|"'\\x00'"
op|'*'
number|'14'
op|'+'
string|"'\\x01'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPToN
dedent|''
name|'def'
name|'testPToN'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'compat'
name|'import'
name|'inet_pton'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'lambda'
name|'a'
op|':'
name|'inet_pton'
op|'('
name|'socket'
op|'.'
name|'AF_INET6'
op|','
name|'a'
op|')'
newline|'\n'
name|'g'
op|'='
name|'lambda'
name|'a'
op|':'
name|'inet_pton'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'a'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00\\x00\\x00\\x00'"
op|','
name|'g'
op|'('
string|"'0.0.0.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\xff\\x00\\xff\\x00'"
op|','
name|'g'
op|'('
string|"'255.0.255.0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\xaa\\xaa\\xaa\\xaa'"
op|','
name|'g'
op|'('
string|"'170.170.170.170'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00'"
op|'*'
number|'16'
op|','
name|'f'
op|'('
string|"'::'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00'"
op|'*'
number|'16'
op|','
name|'f'
op|'('
string|"'0::0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00\\x01'"
op|'+'
string|"'\\x00'"
op|'*'
number|'14'
op|','
name|'f'
op|'('
string|"'1::'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"'\\x45\\xef\\x76\\xcb\\x00\\x1a\\x56\\xef\\xaf\\xeb\\x0b\\xac\\x19\\x24\\xae\\xae'"
op|','
nl|'\n'
name|'f'
op|'('
string|"'45ef:76cb:1a:56ef:afeb:bac:1924:aeae'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00'"
op|'*'
number|'14'
op|'+'
string|"'\\x00\\x01'"
op|','
name|'f'
op|'('
string|"'::1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'\\x00'"
op|'*'
number|'12'
op|'+'
string|"'\\x01\\x02\\x03\\x04'"
op|','
name|'f'
op|'('
string|"'::1.2.3.4'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
string|"'\\x00\\x01\\x00\\x02\\x00\\x03\\x00\\x04\\x00\\x05\\x00\\x06\\x01\\x02\\x03\\xff'"
op|','
nl|'\n'
name|'f'
op|'('
string|"'1:2:3:4:5:6:1.2.3.255'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'badaddr'
name|'in'
op|'['
string|"'1:2:3:4:5:6:7:8:'"
op|','
string|"':1:2:3:4:5:6:7:8'"
op|','
string|"'1::2::3'"
op|','
nl|'\n'
string|"'1:::3'"
op|','
string|"':::'"
op|','
string|"'1:2'"
op|','
string|"'::1.2'"
op|','
string|"'1.2.3.4::'"
op|','
nl|'\n'
string|"'abcd:1.2.3.4:abcd:abcd:abcd:abcd:abcd'"
op|','
nl|'\n'
string|"'1234:1.2.3.4:1234:1234:1234:1234:1234:1234'"
op|','
nl|'\n'
string|"'1.2.3.4'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'f'
op|','
name|'badaddr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set
dedent|''
dedent|''
name|'def'
name|'test_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{set} should behave like the expected set interface.\n        """'
newline|'\n'
name|'a'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'add'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'a'
op|'.'
name|'add'
op|'('
string|"'c'"
op|')'
newline|'\n'
name|'a'
op|'.'
name|'add'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'b'
op|'='
name|'list'
op|'('
name|'a'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'remove'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'b'
op|'='
name|'list'
op|'('
name|'a'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'a'
op|'.'
name|'discard'
op|'('
string|"'d'"
op|')'
newline|'\n'
nl|'\n'
name|'b'
op|'='
name|'set'
op|'('
op|'['
string|"'r'"
op|','
string|"'s'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'a'
op|'.'
name|'union'
op|'('
name|'b'
op|')'
newline|'\n'
name|'b'
op|'='
name|'list'
op|'('
name|'d'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|','
string|"'r'"
op|','
string|"'s'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_frozenset
dedent|''
name|'def'
name|'test_frozenset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{frozenset} should behave like the expected frozenset interface.\n        """'
newline|'\n'
name|'a'
op|'='
name|'frozenset'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'getattr'
op|','
name|'a'
op|','
string|'"add"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'list'
op|'('
name|'a'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'b'
op|'='
name|'frozenset'
op|'('
op|'['
string|"'r'"
op|','
string|"'s'"
op|']'
op|')'
newline|'\n'
name|'d'
op|'='
name|'a'
op|'.'
name|'union'
op|'('
name|'b'
op|')'
newline|'\n'
name|'b'
op|'='
name|'list'
op|'('
name|'d'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'r'"
op|','
string|"'s'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reduce
dedent|''
name|'def'
name|'test_reduce'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{reduce} should behave like the builtin reduce.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'15'
op|','
name|'reduce'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'x'
op|'+'
name|'y'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'16'
op|','
name|'reduce'
op|'('
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
name|'x'
op|'+'
name|'y'
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|']'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

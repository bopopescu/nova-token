begin_unit
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.application.app} and L{twisted.scripts.twistd}.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'signal'
op|','
name|'inspect'
op|','
name|'errno'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
op|','
name|'cPickle'
op|','
name|'StringIO'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pwd'
op|','
name|'grp'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pwd'
op|'='
name|'grp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
name|'import'
name|'service'
op|','
name|'app'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'scripts'
name|'import'
name|'twistd'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'usage'
name|'import'
name|'UsageError'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'ILogObserver'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'versions'
name|'import'
name|'Version'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'components'
name|'import'
name|'Componentized'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'fakepwd'
name|'import'
name|'UserDatabase'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'syslog'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|syslog
indent|'    '
name|'syslog'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'scripts'
name|'import'
name|'_twistd_unix'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|_twistd_unix
indent|'    '
name|'_twistd_unix'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'scripts'
op|'.'
name|'_twistd_unix'
name|'import'
name|'UnixApplicationRunner'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'scripts'
op|'.'
name|'_twistd_unix'
name|'import'
name|'UnixAppLogger'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'profile'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|profile
indent|'    '
name|'profile'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'hotshot'
newline|'\n'
name|'import'
name|'hotshot'
op|'.'
name|'stats'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ImportError'
op|','
name|'SystemExit'
op|')'
op|':'
newline|'\n'
comment|'# For some reasons, hotshot.stats seems to raise SystemExit on some'
nl|'\n'
comment|'# distributions, probably when considered non-free.  See the import of'
nl|'\n'
comment|'# this module in twisted.application.app for more details.'
nl|'\n'
DECL|variable|hotshot
indent|'    '
name|'hotshot'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'pstats'
newline|'\n'
name|'import'
name|'cProfile'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|cProfile
indent|'    '
name|'cProfile'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|patchUserDatabase
dedent|''
name|'def'
name|'patchUserDatabase'
op|'('
name|'patch'
op|','
name|'user'
op|','
name|'uid'
op|','
name|'group'
op|','
name|'gid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Patch L{pwd.getpwnam} so that it behaves as though only one user exists\n    and patch L{grp.getgrnam} so that it behaves as though only one group\n    exists.\n\n    @param patch: A function like L{TestCase.patch} which will be used to\n        install the fake implementations.\n\n    @type user: C{str}\n    @param user: The name of the single user which will exist.\n\n    @type uid: C{int}\n    @param uid: The UID of the single user which will exist.\n\n    @type group: C{str}\n    @param group: The name of the single user which will exist.\n\n    @type gid: C{int}\n    @param gid: The GID of the single group which will exist.\n    """'
newline|'\n'
comment|'# Try not to be an unverified fake, but try not to depend on quirks of'
nl|'\n'
comment|'# the system either (eg, run as a process with a uid and gid which'
nl|'\n'
comment|"# equal each other, and so doesn't reliably test that uid is used where"
nl|'\n'
comment|'# uid should be used and gid is used where gid should be used). -exarkun'
nl|'\n'
name|'pwent'
op|'='
name|'pwd'
op|'.'
name|'getpwuid'
op|'('
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'grent'
op|'='
name|'grp'
op|'.'
name|'getgrgid'
op|'('
name|'os'
op|'.'
name|'getgid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'database'
op|'='
name|'UserDatabase'
op|'('
op|')'
newline|'\n'
name|'database'
op|'.'
name|'addUser'
op|'('
nl|'\n'
name|'user'
op|','
name|'pwent'
op|'.'
name|'pw_passwd'
op|','
name|'uid'
op|','
name|'pwent'
op|'.'
name|'pw_gid'
op|','
nl|'\n'
name|'pwent'
op|'.'
name|'pw_gecos'
op|','
name|'pwent'
op|'.'
name|'pw_dir'
op|','
name|'pwent'
op|'.'
name|'pw_shell'
op|')'
newline|'\n'
nl|'\n'
DECL|function|getgrnam
name|'def'
name|'getgrnam'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'list'
op|'('
name|'grent'
op|')'
newline|'\n'
name|'result'
op|'['
name|'result'
op|'.'
name|'index'
op|'('
name|'grent'
op|'.'
name|'gr_name'
op|')'
op|']'
op|'='
name|'group'
newline|'\n'
name|'result'
op|'['
name|'result'
op|'.'
name|'index'
op|'('
name|'grent'
op|'.'
name|'gr_gid'
op|')'
op|']'
op|'='
name|'gid'
newline|'\n'
name|'result'
op|'='
name|'tuple'
op|'('
name|'result'
op|')'
newline|'\n'
name|'return'
op|'{'
name|'group'
op|':'
name|'result'
op|'}'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'patch'
op|'('
name|'pwd'
op|','
string|'"getpwnam"'
op|','
name|'database'
op|'.'
name|'getpwnam'
op|')'
newline|'\n'
name|'patch'
op|'('
name|'grp'
op|','
string|'"getgrnam"'
op|','
name|'getgrnam'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockServiceMaker
dedent|''
name|'class'
name|'MockServiceMaker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A non-implementation of L{twisted.application.service.IServiceMaker}.\n    """'
newline|'\n'
DECL|variable|tapname
name|'tapname'
op|'='
string|"'ueoa'"
newline|'\n'
nl|'\n'
DECL|member|makeService
name|'def'
name|'makeService'
op|'('
name|'self'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Take a L{usage.Options} instance and return a\n        L{service.IService} provider.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'options'
op|'='
name|'options'
newline|'\n'
name|'self'
op|'.'
name|'service'
op|'='
name|'service'
op|'.'
name|'Service'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'service'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CrippledAppLogger
dedent|''
dedent|''
name|'class'
name|'CrippledAppLogger'
op|'('
name|'app'
op|'.'
name|'AppLogger'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    @see: CrippledApplicationRunner.\n    """'
newline|'\n'
nl|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CrippledApplicationRunner
dedent|''
dedent|''
name|'class'
name|'CrippledApplicationRunner'
op|'('
name|'twistd'
op|'.'
name|'_SomeApplicationRunner'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An application runner that cripples the platform-specific runner and\n    nasty side-effect-having code so that we can use it without actually\n    running any environment-affecting code.\n    """'
newline|'\n'
DECL|variable|loggerFactory
name|'loggerFactory'
op|'='
name|'CrippledAppLogger'
newline|'\n'
nl|'\n'
DECL|member|preApplication
name|'def'
name|'preApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|postApplication
dedent|''
name|'def'
name|'postApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerOptionsTest
dedent|''
dedent|''
name|'class'
name|'ServerOptionsTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Non-platform-specific tests for the pltaform-specific ServerOptions class.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_postOptionsSubCommandCausesNoSave
name|'def'
name|'test_postOptionsSubCommandCausesNoSave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        postOptions should set no_save to True when a subcommand is used.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'.'
name|'subCommand'
op|'='
string|"'ueoa'"
newline|'\n'
name|'config'
op|'.'
name|'postOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'config'
op|'['
string|"'no_save'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_postOptionsNoSubCommandSavesAsUsual
dedent|''
name|'def'
name|'test_postOptionsNoSubCommandSavesAsUsual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If no sub command is used, postOptions should not touch no_save.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'.'
name|'postOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'config'
op|'['
string|"'no_save'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_reportProfileDeprecation
dedent|''
name|'def'
name|'test_reportProfileDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the --report-profile option prints a C{DeprecationWarning}.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'DeprecationWarning'
op|','
string|'"--report-profile option is deprecated and "'
nl|'\n'
string|'"a no-op since Twisted 8.0."'
op|','
name|'app'
op|'.'
name|'__file__'
op|','
nl|'\n'
name|'config'
op|'.'
name|'parseOptions'
op|','
op|'['
string|'"--report-profile"'
op|','
string|'"foo"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_listAllProfilers
dedent|''
name|'def'
name|'test_listAllProfilers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        All the profilers that can be used in L{app.AppProfiler} are listed in\n        the help output.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'helpOutput'
op|'='
name|'str'
op|'('
name|'config'
op|')'
newline|'\n'
name|'for'
name|'profiler'
name|'in'
name|'app'
op|'.'
name|'AppProfiler'
op|'.'
name|'profilers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'profiler'
op|','
name|'helpOutput'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultUmask
dedent|''
dedent|''
name|'def'
name|'test_defaultUmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The default value for the C{umask} option is C{None}.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'config'
op|'['
string|"'umask'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_umask
dedent|''
name|'def'
name|'test_umask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The value given for the C{umask} option is parsed as an octal integer\n        literal.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--umask'"
op|','
string|"'123'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'config'
op|'['
string|"'umask'"
op|']'
op|','
number|'83'
op|')'
newline|'\n'
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'--umask'"
op|','
string|"'0123'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'config'
op|'['
string|"'umask'"
op|']'
op|','
number|'83'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_invalidUmask
dedent|''
name|'def'
name|'test_invalidUmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a value is given for the C{umask} option which cannot be parsed as\n        an integer, L{UsageError} is raised by L{ServerOptions.parseOptions}.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'UsageError'
op|','
name|'config'
op|'.'
name|'parseOptions'
op|','
op|'['
string|"'--umask'"
op|','
string|"'abcdef'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'_twistd_unix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"twistd unix not available"'
newline|'\n'
name|'test_defaultUmask'
op|'.'
name|'skip'
op|'='
name|'test_umask'
op|'.'
name|'skip'
op|'='
name|'test_invalidUmask'
op|'.'
name|'skip'
op|'='
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TapFileTest
dedent|''
dedent|''
name|'class'
name|'TapFileTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test twistd-related functionality that requires a tap file on disk.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a trivial Application and put it in a tap file on disk.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'tapfile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'f'
op|'='
name|'file'
op|'('
name|'self'
op|'.'
name|'tapfile'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'cPickle'
op|'.'
name|'dump'
op|'('
name|'service'
op|'.'
name|'Application'
op|'('
string|'"Hi!"'
op|')'
op|','
name|'f'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_createOrGetApplicationWithTapFile
dedent|''
name|'def'
name|'test_createOrGetApplicationWithTapFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure that the createOrGetApplication call that \'twistd -f foo.tap\'\n        makes will load the Application out of foo.tap.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'.'
name|'parseOptions'
op|'('
op|'['
string|"'-f'"
op|','
name|'self'
op|'.'
name|'tapfile'
op|']'
op|')'
newline|'\n'
name|'application'
op|'='
name|'CrippledApplicationRunner'
op|'('
name|'config'
op|')'
op|'.'
name|'createOrGetApplication'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'service'
op|'.'
name|'IService'
op|'('
name|'application'
op|')'
op|'.'
name|'name'
op|','
string|"'Hi!'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLoggerFactory
dedent|''
dedent|''
name|'class'
name|'TestLoggerFactory'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A logger factory for L{TestApplicationRunner}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'runner'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'runner'
op|'='
name|'runner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'application'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the logging start on the C{runner} instance.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'order'
op|'.'
name|'append'
op|'('
string|'"log"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'hadApplicationLogObserver'
op|'='
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'runner'
op|','
nl|'\n'
string|"'application'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t log anything.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestApplicationRunner
dedent|''
dedent|''
name|'class'
name|'TestApplicationRunner'
op|'('
name|'app'
op|'.'
name|'ApplicationRunner'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An ApplicationRunner which tracks the environment in which its methods are\n    called.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'app'
op|'.'
name|'ApplicationRunner'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'options'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'order'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'='
name|'TestLoggerFactory'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|preApplication
dedent|''
name|'def'
name|'preApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'order'
op|'.'
name|'append'
op|'('
string|'"pre"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hadApplicationPreApplication'
op|'='
name|'hasattr'
op|'('
name|'self'
op|','
string|"'application'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|postApplication
dedent|''
name|'def'
name|'postApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'order'
op|'.'
name|'append'
op|'('
string|'"post"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hadApplicationPostApplication'
op|'='
name|'hasattr'
op|'('
name|'self'
op|','
string|"'application'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ApplicationRunnerTest
dedent|''
dedent|''
name|'class'
name|'ApplicationRunnerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Non-platform-specific tests for the platform-specific ApplicationRunner.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serviceMaker'
op|'='
name|'MockServiceMaker'
op|'('
op|')'
newline|'\n'
comment|"# Set up a config object like it's been parsed with a subcommand"
nl|'\n'
name|'config'
op|'.'
name|'loadedPlugins'
op|'='
op|'{'
string|"'test_command'"
op|':'
name|'self'
op|'.'
name|'serviceMaker'
op|'}'
newline|'\n'
name|'config'
op|'.'
name|'subOptions'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'config'
op|'.'
name|'subCommand'
op|'='
string|"'test_command'"
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'='
name|'config'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationRunnerGetsCorrectApplication
dedent|''
name|'def'
name|'test_applicationRunnerGetsCorrectApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure that a twistd plugin gets used in appropriate ways: it\n        is passed its Options instance, and the service it returns is\n        added to the application.\n        """'
newline|'\n'
name|'arunner'
op|'='
name|'CrippledApplicationRunner'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'arunner'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'serviceMaker'
op|'.'
name|'options'
op|','
name|'self'
op|'.'
name|'config'
op|'.'
name|'subOptions'
op|','
nl|'\n'
string|'"ServiceMaker.makeService needs to be passed the correct "'
nl|'\n'
string|'"sub Command object."'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'serviceMaker'
op|'.'
name|'service'
op|','
nl|'\n'
name|'service'
op|'.'
name|'IService'
op|'('
name|'arunner'
op|'.'
name|'application'
op|')'
op|'.'
name|'services'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|'"ServiceMaker.makeService\'s result needs to be set as a child "'
nl|'\n'
string|'"of the Application."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_preAndPostApplication
dedent|''
name|'def'
name|'test_preAndPostApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test thet preApplication and postApplication methods are\n        called by ApplicationRunner.run() when appropriate.\n        """'
newline|'\n'
name|'s'
op|'='
name|'TestApplicationRunner'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'s'
op|'.'
name|'hadApplicationPreApplication'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'s'
op|'.'
name|'hadApplicationPostApplication'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'s'
op|'.'
name|'hadApplicationLogObserver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'order'
op|','
op|'['
string|'"pre"'
op|','
string|'"log"'
op|','
string|'"post"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_applicationStartsWithConfiguredID
dedent|''
name|'def'
name|'_applicationStartsWithConfiguredID'
op|'('
name|'self'
op|','
name|'argv'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Assert that given a particular command line, an application is started\n        as a particular UID/GID.\n\n        @param argv: A list of strings giving the options to parse.\n        @param uid: An integer giving the expected UID.\n        @param gid: An integer giving the expected GID.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'parseOptions'
op|'('
name|'argv'
op|')'
newline|'\n'
nl|'\n'
name|'events'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|FakeUnixApplicationRunner
name|'class'
name|'FakeUnixApplicationRunner'
op|'('
name|'twistd'
op|'.'
name|'_SomeApplicationRunner'
op|')'
op|':'
newline|'\n'
DECL|member|setupEnvironment
indent|'            '
name|'def'
name|'setupEnvironment'
op|'('
name|'self'
op|','
name|'chroot'
op|','
name|'rundir'
op|','
name|'nodaemon'
op|','
name|'umask'
op|','
nl|'\n'
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'.'
name|'append'
op|'('
string|"'environment'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|shedPrivileges
dedent|''
name|'def'
name|'shedPrivileges'
op|'('
name|'self'
op|','
name|'euid'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'.'
name|'append'
op|'('
op|'('
string|"'privileges'"
op|','
name|'euid'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startReactor
dedent|''
name|'def'
name|'startReactor'
op|'('
name|'self'
op|','
name|'reactor'
op|','
name|'oldstdout'
op|','
name|'oldstderr'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'.'
name|'append'
op|'('
string|"'reactor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|removePID
dedent|''
name|'def'
name|'removePID'
op|'('
name|'self'
op|','
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeService
dedent|''
dedent|''
name|'class'
name|'FakeService'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'implements'
op|'('
name|'service'
op|'.'
name|'IService'
op|','
name|'service'
op|'.'
name|'IProcess'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|processName
name|'processName'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|privilegedStartService
name|'def'
name|'privilegedStartService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'.'
name|'append'
op|'('
string|"'privilegedStartService'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|startService
dedent|''
name|'def'
name|'startService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'.'
name|'append'
op|'('
string|"'startService'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopService
dedent|''
name|'def'
name|'stopService'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'runner'
op|'='
name|'FakeUnixApplicationRunner'
op|'('
name|'self'
op|'.'
name|'config'
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'preApplication'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'application'
op|'='
name|'FakeService'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'postApplication'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'events'
op|','
nl|'\n'
op|'['
string|"'environment'"
op|','
string|"'privilegedStartService'"
op|','
nl|'\n'
op|'('
string|"'privileges'"
op|','
name|'False'
op|','
name|'uid'
op|','
name|'gid'
op|')'
op|','
string|"'startService'"
op|','
string|"'reactor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationStartsWithConfiguredNumericIDs
dedent|''
name|'def'
name|'test_applicationStartsWithConfiguredNumericIDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{postApplication} should change the UID and GID to the values\n        specified as numeric strings by the configuration after running\n        L{service.IService.privilegedStartService} and before running\n        L{service.IService.startService}.\n        """'
newline|'\n'
name|'uid'
op|'='
number|'1234'
newline|'\n'
name|'gid'
op|'='
number|'4321'
newline|'\n'
name|'self'
op|'.'
name|'_applicationStartsWithConfiguredID'
op|'('
nl|'\n'
op|'['
string|'"--uid"'
op|','
name|'str'
op|'('
name|'uid'
op|')'
op|','
string|'"--gid"'
op|','
name|'str'
op|'('
name|'gid'
op|')'
op|']'
op|','
name|'uid'
op|','
name|'gid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_applicationStartsWithConfiguredNameIDs
dedent|''
name|'def'
name|'test_applicationStartsWithConfiguredNameIDs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{postApplication} should change the UID and GID to the values\n        specified as user and group names by the configuration after running\n        L{service.IService.privilegedStartService} and before running\n        L{service.IService.startService}.\n        """'
newline|'\n'
name|'user'
op|'='
string|'"foo"'
newline|'\n'
name|'uid'
op|'='
number|'1234'
newline|'\n'
name|'group'
op|'='
string|'"bar"'
newline|'\n'
name|'gid'
op|'='
number|'4321'
newline|'\n'
name|'patchUserDatabase'
op|'('
name|'self'
op|'.'
name|'patch'
op|','
name|'user'
op|','
name|'uid'
op|','
name|'group'
op|','
name|'gid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_applicationStartsWithConfiguredID'
op|'('
nl|'\n'
op|'['
string|'"--uid"'
op|','
name|'user'
op|','
string|'"--gid"'
op|','
name|'group'
op|']'
op|','
name|'uid'
op|','
name|'gid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'getattr'
op|'('
name|'os'
op|','
string|"'setuid'"
op|','
name|'None'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
string|'"Platform does not support --uid/--gid twistd options."'
newline|'\n'
name|'test_applicationStartsWithConfiguredNameIDs'
op|'.'
name|'skip'
op|'='
name|'msg'
newline|'\n'
name|'test_applicationStartsWithConfiguredNumericIDs'
op|'.'
name|'skip'
op|'='
name|'msg'
newline|'\n'
name|'del'
name|'msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startReactorRunsTheReactor
dedent|''
name|'def'
name|'test_startReactorRunsTheReactor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{startReactor} calls L{reactor.run}.\n        """'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'='
name|'app'
op|'.'
name|'ApplicationRunner'
op|'('
op|'{'
nl|'\n'
string|'"profile"'
op|':'
name|'False'
op|','
nl|'\n'
string|'"profiler"'
op|':'
string|'"profile"'
op|','
nl|'\n'
string|'"debug"'
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'startReactor'
op|'('
name|'reactor'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'reactor'
op|'.'
name|'called'
op|','
string|'"startReactor did not call reactor.run()"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_legacyApplicationRunnerGetLogObserver
dedent|''
name|'def'
name|'test_legacyApplicationRunnerGetLogObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.ApplicationRunner} subclasses can have a getLogObserver that used\n        to return a log observer. This test is there to ensure that it\'s\n        supported but it raises a warning when used.\n        """'
newline|'\n'
name|'observer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'log'
op|'.'
name|'removeObserver'
op|','
name|'observer'
op|'.'
name|'append'
op|')'
newline|'\n'
DECL|class|GetLogObserverRunner
name|'class'
name|'GetLogObserverRunner'
op|'('
name|'app'
op|'.'
name|'ApplicationRunner'
op|')'
op|':'
newline|'\n'
DECL|member|getLogObserver
indent|'            '
name|'def'
name|'getLogObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'observer'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
DECL|member|startLogging
dedent|''
name|'def'
name|'startLogging'
op|'('
name|'self'
op|','
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""\n                Override C{startLogging} to call L{log.addObserver} instead of\n                L{log.startLoggingWithObserver}.\n                """'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logger'
op|'.'
name|'_initialLog'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|preApplication
dedent|''
name|'def'
name|'preApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|postApplication
dedent|''
name|'def'
name|'postApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|createOrGetApplication
dedent|''
name|'def'
name|'createOrGetApplication'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'conf'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'='
name|'GetLogObserverRunner'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"Specifying a log observer with getLogObserver is "'
nl|'\n'
string|'"deprecated. Please use a loggerFactory instead."'
op|','
nl|'\n'
name|'app'
op|'.'
name|'__file__'
op|','
name|'runner'
op|'.'
name|'run'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'observer'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnixApplicationRunnerSetupEnvironmentTests
dedent|''
dedent|''
name|'class'
name|'UnixApplicationRunnerSetupEnvironmentTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UnixApplicationRunner.setupEnvironment}.\n\n    @ivar root: The root of the filesystem, or C{unset} if none has been\n        specified with a call to L{os.chroot} (patched for this TestCase with\n        L{UnixApplicationRunnerSetupEnvironmentTests.chroot ).\n\n    @ivar cwd: The current working directory of the process, or C{unset} if\n        none has been specified with a call to L{os.chdir} (patched for this\n        TestCase with L{UnixApplicationRunnerSetupEnvironmentTests.chdir).\n\n    @ivar mask: The current file creation mask of the process, or C{unset} if\n        none has been specified with a call to L{os.umask} (patched for this\n        TestCase with L{UnixApplicationRunnerSetupEnvironmentTests.umask).\n\n    @ivar daemon: A boolean indicating whether daemonization has been performed\n        by a call to L{_twistd_unix.daemonize} (patched for this TestCase with\n        L{UnixApplicationRunnerSetupEnvironmentTests.\n    """'
newline|'\n'
name|'if'
name|'_twistd_unix'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twistd unix not available"'
newline|'\n'
nl|'\n'
DECL|variable|unset
dedent|''
name|'unset'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'root'
op|'='
name|'self'
op|'.'
name|'unset'
newline|'\n'
name|'self'
op|'.'
name|'cwd'
op|'='
name|'self'
op|'.'
name|'unset'
newline|'\n'
name|'self'
op|'.'
name|'mask'
op|'='
name|'self'
op|'.'
name|'unset'
newline|'\n'
name|'self'
op|'.'
name|'daemon'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|"'chroot'"
op|','
name|'lambda'
name|'path'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'root'"
op|','
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|"'chdir'"
op|','
name|'lambda'
name|'path'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'cwd'"
op|','
name|'path'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|"'umask'"
op|','
name|'lambda'
name|'mask'
op|':'
name|'setattr'
op|'('
name|'self'
op|','
string|"'mask'"
op|','
name|'mask'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'_twistd_unix'
op|','
string|'"daemonize"'
op|','
name|'self'
op|'.'
name|'daemonize'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'='
name|'UnixApplicationRunner'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|daemonize
dedent|''
name|'def'
name|'daemonize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Indicate that daemonization has happened and change the PID so that the\n        value written to the pidfile can be tested in the daemonization case.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'daemon'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'os'
op|','
string|"'getpid'"
op|','
name|'lambda'
op|':'
name|'self'
op|'.'
name|'pid'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_chroot
dedent|''
name|'def'
name|'test_chroot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} changes the root of the\n        filesystem if passed a non-C{None} value for the C{chroot} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
string|'"/foo/bar"'
op|','
string|'"."'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'root'
op|','
string|'"/foo/bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noChroot
dedent|''
name|'def'
name|'test_noChroot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} does not change the root of\n        the filesystem if passed C{None} for the C{chroot} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'root'
op|','
name|'self'
op|'.'
name|'unset'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_changeWorkingDirectory
dedent|''
name|'def'
name|'test_changeWorkingDirectory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} changes the working directory\n        of the process to the path given for the C{rundir} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"/foo/bar"'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'cwd'
op|','
string|'"/foo/bar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_daemonize
dedent|''
name|'def'
name|'test_daemonize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} daemonizes the process if\n        C{False} is passed for the C{nodaemon} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'False'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'daemon'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noDaemonize
dedent|''
name|'def'
name|'test_noDaemonize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} does not daemonize the\n        process if C{True} is passed for the C{nodaemon} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'daemon'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nonDaemonPIDFile
dedent|''
name|'def'
name|'test_nonDaemonPIDFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} writes the process\'s PID to\n        the file specified by the C{pidfile} parameter.\n        """'
newline|'\n'
name|'pidfile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'True'
op|','
name|'None'
op|','
name|'pidfile'
op|')'
newline|'\n'
name|'fObj'
op|'='
name|'file'
op|'('
name|'pidfile'
op|')'
newline|'\n'
name|'pid'
op|'='
name|'int'
op|'('
name|'fObj'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pid'
op|','
name|'self'
op|'.'
name|'pid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_daemonPIDFile
dedent|''
name|'def'
name|'test_daemonPIDFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} writes the daemonized\n        process\'s PID to the file specified by the C{pidfile} parameter if\n        C{nodaemon} is C{False}.\n        """'
newline|'\n'
name|'pidfile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'False'
op|','
name|'None'
op|','
name|'pidfile'
op|')'
newline|'\n'
name|'fObj'
op|'='
name|'file'
op|'('
name|'pidfile'
op|')'
newline|'\n'
name|'pid'
op|'='
name|'int'
op|'('
name|'fObj'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'fObj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pid'
op|','
name|'self'
op|'.'
name|'pid'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_umask
dedent|''
name|'def'
name|'test_umask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} changes the process umask to\n        the value specified by the C{umask} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'False'
op|','
number|'123'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mask'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noDaemonizeNoUmask
dedent|''
name|'def'
name|'test_noDaemonizeNoUmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} doesn\'t change the process\n        umask if C{None} is passed for the C{umask} parameter and C{True} is\n        passed for the C{nodaemon} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'mask'
op|','
name|'self'
op|'.'
name|'unset'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_daemonizedNoUmask
dedent|''
name|'def'
name|'test_daemonizedNoUmask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.setupEnvironment} changes the process umask to\n        C{0077} if C{None} is passed for the C{umask} parameter and C{False} is\n        passed for the C{nodaemon} parameter.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|'('
name|'None'
op|','
string|'"."'
op|','
name|'False'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mask'
op|','
number|'0077'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnixApplicationRunnerStartApplicationTests
dedent|''
dedent|''
name|'class'
name|'UnixApplicationRunnerStartApplicationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UnixApplicationRunner.startApplication}.\n    """'
newline|'\n'
name|'if'
name|'_twistd_unix'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twistd unix not available"'
newline|'\n'
nl|'\n'
DECL|member|test_setupEnvironment
dedent|''
name|'def'
name|'test_setupEnvironment'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.startApplication} calls\n        L{UnixApplicationRunner.setupEnvironment} with the chroot, rundir,\n        nodaemon, umask, and pidfile parameters from the configuration it is\n        constructed with.\n        """'
newline|'\n'
name|'options'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
op|'['
nl|'\n'
string|"'--nodaemon'"
op|','
nl|'\n'
string|"'--umask'"
op|','
string|"'0070'"
op|','
nl|'\n'
string|"'--chroot'"
op|','
string|"'/foo/chroot'"
op|','
nl|'\n'
string|"'--rundir'"
op|','
string|"'/foo/rundir'"
op|','
nl|'\n'
string|"'--pidfile'"
op|','
string|"'/foo/pidfile'"
op|']'
op|')'
newline|'\n'
name|'application'
op|'='
name|'service'
op|'.'
name|'Application'
op|'('
string|'"test_setupEnvironment"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'='
name|'UnixApplicationRunner'
op|'('
name|'options'
op|')'
newline|'\n'
nl|'\n'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|fakeSetupEnvironment
name|'def'
name|'fakeSetupEnvironment'
op|'('
name|'self'
op|','
name|'chroot'
op|','
name|'rundir'
op|','
name|'nodaemon'
op|','
name|'umask'
op|','
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'extend'
op|'('
op|'('
name|'chroot'
op|','
name|'rundir'
op|','
name|'nodaemon'
op|','
name|'umask'
op|','
name|'pidfile'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sanity check'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'self'
op|'.'
name|'runner'
op|'.'
name|'setupEnvironment'
op|')'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'fakeSetupEnvironment'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'UnixApplicationRunner'
op|','
string|"'setupEnvironment'"
op|','
name|'fakeSetupEnvironment'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'UnixApplicationRunner'
op|','
string|"'shedPrivileges'"
op|','
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'app'
op|','
string|"'startApplication'"
op|','
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'runner'
op|'.'
name|'startApplication'
op|'('
name|'application'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'args'
op|','
nl|'\n'
op|'['
string|"'/foo/chroot'"
op|','
string|"'/foo/rundir'"
op|','
name|'True'
op|','
number|'56'
op|','
string|"'/foo/pidfile'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnixApplicationRunnerRemovePID
dedent|''
dedent|''
name|'class'
name|'UnixApplicationRunnerRemovePID'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UnixApplicationRunner.removePID}.\n    """'
newline|'\n'
name|'if'
name|'_twistd_unix'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twistd unix not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removePID
dedent|''
name|'def'
name|'test_removePID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{UnixApplicationRunner.removePID} deletes the file the name of\n        which is passed to it.\n        """'
newline|'\n'
name|'runner'
op|'='
name|'UnixApplicationRunner'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'path'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'path'
op|')'
newline|'\n'
name|'pidfile'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|'"foo.pid"'
op|')'
newline|'\n'
name|'file'
op|'('
name|'pidfile'
op|','
string|'"w"'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'removePID'
op|'('
name|'pidfile'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'pidfile'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_removePIDErrors
dedent|''
name|'def'
name|'test_removePIDErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calling L{UnixApplicationRunner.removePID} with a non-existent filename logs\n        an OSError.\n        """'
newline|'\n'
name|'runner'
op|'='
name|'UnixApplicationRunner'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'runner'
op|'.'
name|'removePID'
op|'('
string|'"fakepid"'
op|')'
newline|'\n'
name|'errors'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'OSError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'errors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|'.'
name|'errno'
op|','
name|'errno'
op|'.'
name|'ENOENT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyReactor
dedent|''
dedent|''
name|'class'
name|'DummyReactor'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A dummy reactor, only providing a C{run} method and checking that it\n    has been called.\n\n    @ivar called: if C{run} has been called or not.\n    @type called: C{bool}\n    """'
newline|'\n'
DECL|variable|called
name|'called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A fake run method, checking that it\'s been called one and only time.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'called'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Already called"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AppProfilingTestCase
dedent|''
dedent|''
name|'class'
name|'AppProfilingTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{app.AppProfiler}.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_profile
name|'def'
name|'test_profile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.ProfileRunner.run} should call the C{run} method of the reactor\n        and save profile data in the specified file.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"profile"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'data'
op|'='
name|'file'
op|'('
name|'config'
op|'['
string|'"profile"'
op|']'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"DummyReactor.run"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"function calls"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'profile'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_profile'
op|'.'
name|'skip'
op|'='
string|'"profile module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testStats
dedent|''
name|'def'
name|'_testStats'
op|'('
name|'self'
op|','
name|'statsClass'
op|','
name|'profile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Patch before creating the pstats, because pstats binds self.stream to'
nl|'\n'
comment|'# sys.stdout early in 2.5 and newer.'
nl|'\n'
name|'stdout'
op|'='
name|'self'
op|'.'
name|'patch'
op|'('
name|'sys'
op|','
string|"'stdout'"
op|','
name|'out'
op|')'
newline|'\n'
nl|'\n'
comment|'# If pstats.Stats can load the data and then reformat it, then the'
nl|'\n'
comment|'# right thing probably happened.'
nl|'\n'
name|'stats'
op|'='
name|'statsClass'
op|'('
name|'profile'
op|')'
newline|'\n'
name|'stats'
op|'.'
name|'print_stats'
op|'('
op|')'
newline|'\n'
name|'stdout'
op|'.'
name|'restore'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"function calls"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"(run)"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_profileSaveStats
dedent|''
name|'def'
name|'test_profileSaveStats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        With the C{savestats} option specified, L{app.ProfileRunner.run}\n        should save the raw stats object instead of a summary output.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"profile"'
newline|'\n'
name|'config'
op|'['
string|'"savestats"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testStats'
op|'('
name|'pstats'
op|'.'
name|'Stats'
op|','
name|'config'
op|'['
string|"'profile'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'profile'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_profileSaveStats'
op|'.'
name|'skip'
op|'='
string|'"profile module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutProfile
dedent|''
name|'def'
name|'test_withoutProfile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the C{profile} module is not present, L{app.ProfilerRunner.run}\n        should raise a C{SystemExit} exception.\n        """'
newline|'\n'
name|'savedModules'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"profile"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
nl|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"profile"'
op|']'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'profiler'
op|'.'
name|'run'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'update'
op|'('
name|'savedModules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_profilePrintStatsError
dedent|''
dedent|''
name|'def'
name|'test_profilePrintStatsError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When an error happens during the print of the stats, C{sys.stdout}\n        should be restored to its initial value.\n        """'
newline|'\n'
DECL|class|ErroneousProfile
name|'class'
name|'ErroneousProfile'
op|'('
name|'profile'
op|'.'
name|'Profile'
op|')'
op|':'
newline|'\n'
DECL|member|print_stats
indent|'            '
name|'def'
name|'print_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Boom"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'profile'
op|','
string|'"Profile"'
op|','
name|'ErroneousProfile'
op|')'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"profile"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'oldStdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'profiler'
op|'.'
name|'run'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|','
name|'oldStdout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'profile'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_profilePrintStatsError'
op|'.'
name|'skip'
op|'='
string|'"profile module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hotshot
dedent|''
name|'def'
name|'test_hotshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.HotshotRunner.run} should call the C{run} method of the reactor\n        and save profile data in the specified file.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"hotshot"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'data'
op|'='
name|'file'
op|'('
name|'config'
op|'['
string|'"profile"'
op|']'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"run"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"function calls"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hotshot'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_hotshot'
op|'.'
name|'skip'
op|'='
string|'"hotshot module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hotshotSaveStats
dedent|''
name|'def'
name|'test_hotshotSaveStats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        With the C{savestats} option specified, L{app.HotshotRunner.run} should\n        save the raw stats object instead of a summary output.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"hotshot"'
newline|'\n'
name|'config'
op|'['
string|'"savestats"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testStats'
op|'('
name|'hotshot'
op|'.'
name|'stats'
op|'.'
name|'load'
op|','
name|'config'
op|'['
string|"'profile'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hotshot'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_hotshotSaveStats'
op|'.'
name|'skip'
op|'='
string|'"hotshot module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutHotshot
dedent|''
name|'def'
name|'test_withoutHotshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the C{hotshot} module is not present, L{app.HotshotRunner.run}\n        should raise a C{SystemExit} exception and log the C{ImportError}.\n        """'
newline|'\n'
name|'savedModules'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"hotshot"'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"hotshot"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'profiler'
op|'.'
name|'run'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'update'
op|'('
name|'savedModules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_nothotshotDeprecation
dedent|''
dedent|''
name|'def'
name|'test_nothotshotDeprecation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that switching on the C{nothotshot} option produces a warning and\n        sets the profiler to B{profile}.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|"'nothotshot'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'profiler'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"The --nothotshot option is deprecated. Please specify the "'
nl|'\n'
string|'"profiler name using the --profiler option"'
op|','
nl|'\n'
name|'app'
op|'.'
name|'__file__'
op|','
name|'app'
op|'.'
name|'AppProfiler'
op|','
name|'config'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'profiler'
op|'.'
name|'profiler'
op|','
string|'"profile"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hotshotPrintStatsError
dedent|''
name|'def'
name|'test_hotshotPrintStatsError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When an error happens while printing the stats, C{sys.stdout}\n        should be restored to its initial value.\n        """'
newline|'\n'
DECL|class|ErroneousStats
name|'class'
name|'ErroneousStats'
op|'('
name|'pstats'
op|'.'
name|'Stats'
op|')'
op|':'
newline|'\n'
DECL|member|print_stats
indent|'            '
name|'def'
name|'print_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Boom"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'pstats'
op|','
string|'"Stats"'
op|','
name|'ErroneousStats'
op|')'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"hotshot"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'oldStdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'RuntimeError'
op|','
name|'profiler'
op|'.'
name|'run'
op|','
name|'reactor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|','
name|'oldStdout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hotshot'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_hotshotPrintStatsError'
op|'.'
name|'skip'
op|'='
string|'"hotshot module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cProfile
dedent|''
name|'def'
name|'test_cProfile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.CProfileRunner.run} should call the C{run} method of the\n        reactor and save profile data in the specified file.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"cProfile"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'data'
op|'='
name|'file'
op|'('
name|'config'
op|'['
string|'"profile"'
op|']'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"run"'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"function calls"'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cProfile'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_cProfile'
op|'.'
name|'skip'
op|'='
string|'"cProfile module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_cProfileSaveStats
dedent|''
name|'def'
name|'test_cProfileSaveStats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        With the C{savestats} option specified,\n        L{app.CProfileRunner.run} should save the raw stats object\n        instead of a summary output.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"cProfile"'
newline|'\n'
name|'config'
op|'['
string|'"savestats"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'reactor'
op|'='
name|'DummyReactor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'profiler'
op|'.'
name|'run'
op|'('
name|'reactor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'reactor'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testStats'
op|'('
name|'pstats'
op|'.'
name|'Stats'
op|','
name|'config'
op|'['
string|"'profile'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'cProfile'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_cProfileSaveStats'
op|'.'
name|'skip'
op|'='
string|'"cProfile module not available"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_withoutCProfile
dedent|''
name|'def'
name|'test_withoutCProfile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the C{cProfile} module is not present,\n        L{app.CProfileRunner.run} should raise a C{SystemExit}\n        exception and log the C{ImportError}.\n        """'
newline|'\n'
name|'savedModules'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"cProfile"'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"cProfile"'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
name|'config'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'profiler'
op|'.'
name|'run'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'update'
op|'('
name|'savedModules'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unknownProfiler
dedent|''
dedent|''
name|'def'
name|'test_unknownProfiler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that L{app.AppProfiler} raises L{SystemExit} when given an\n        unknown profiler name.\n        """'
newline|'\n'
name|'config'
op|'='
name|'twistd'
op|'.'
name|'ServerOptions'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profile"'
op|']'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'config'
op|'['
string|'"profiler"'
op|']'
op|'='
string|'"foobar"'
newline|'\n'
nl|'\n'
name|'error'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'app'
op|'.'
name|'AppProfiler'
op|','
name|'config'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'error'
op|')'
op|','
string|'"Unsupported profiler name: foobar"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_defaultProfiler
dedent|''
name|'def'
name|'test_defaultProfiler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.Profiler} defaults to the hotshot profiler if not specified.\n        """'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'profiler'
op|'.'
name|'profiler'
op|','
string|'"hotshot"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_profilerNameCaseInsentive
dedent|''
name|'def'
name|'test_profilerNameCaseInsentive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The case of the profiler name passed to L{app.AppProfiler} is not\n        relevant.\n        """'
newline|'\n'
name|'profiler'
op|'='
name|'app'
op|'.'
name|'AppProfiler'
op|'('
op|'{'
string|'"profiler"'
op|':'
string|'"HotShot"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'profiler'
op|'.'
name|'profiler'
op|','
string|'"hotshot"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oldRunWithProfiler
dedent|''
name|'def'
name|'test_oldRunWithProfiler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.runWithProfiler} should print a C{DeprecationWarning} pointing\n        at L{AppProfiler}.\n        """'
newline|'\n'
DECL|class|DummyProfiler
name|'class'
name|'DummyProfiler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|called
indent|'            '
name|'called'
op|'='
name|'False'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'profiler'
op|'='
name|'DummyProfiler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'app'
op|','
string|'"AppProfiler"'
op|','
name|'lambda'
name|'conf'
op|':'
name|'profiler'
op|')'
newline|'\n'
nl|'\n'
DECL|function|runWithProfiler
name|'def'
name|'runWithProfiler'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'app'
op|'.'
name|'runWithProfiler'
op|'('
name|'DummyReactor'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"runWithProfiler is deprecated since Twisted 8.0. "'
nl|'\n'
string|'"Use ProfileRunner instead."'
op|','
name|'__file__'
op|','
nl|'\n'
name|'runWithProfiler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'profiler'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_oldRunWithHotshot
dedent|''
name|'def'
name|'test_oldRunWithHotshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.runWithHotshot} should print a C{DeprecationWarning} pointing\n        at L{AppProfiler}.\n        """'
newline|'\n'
DECL|class|DummyProfiler
name|'class'
name|'DummyProfiler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|called
indent|'            '
name|'called'
op|'='
name|'False'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'reactor'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'profiler'
op|'='
name|'DummyProfiler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patch'
op|'('
name|'app'
op|','
string|'"AppProfiler"'
op|','
name|'lambda'
name|'conf'
op|':'
name|'profiler'
op|')'
newline|'\n'
nl|'\n'
DECL|function|runWithHotshot
name|'def'
name|'runWithHotshot'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'app'
op|'.'
name|'runWithHotshot'
op|'('
name|'DummyReactor'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertWarns'
op|'('
name|'DeprecationWarning'
op|','
nl|'\n'
string|'"runWithHotshot is deprecated since Twisted 8.0. "'
nl|'\n'
string|'"Use HotshotRunner instead."'
op|','
name|'__file__'
op|','
nl|'\n'
name|'runWithHotshot'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'profiler'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_patchFileLogObserver
dedent|''
dedent|''
name|'def'
name|'_patchFileLogObserver'
op|'('
name|'patch'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Patch L{log.FileLogObserver} to record every call and keep a reference to\n    the passed log file for tests.\n\n    @param patch: a callback for patching (usually L{unittest.TestCase.patch}).\n\n    @return: the list that keeps track of the log files.\n    @rtype: C{list}\n    """'
newline|'\n'
name|'logFiles'
op|'='
op|'['
op|']'
newline|'\n'
name|'oldFileLobObserver'
op|'='
name|'log'
op|'.'
name|'FileLogObserver'
newline|'\n'
DECL|function|FileLogObserver
name|'def'
name|'FileLogObserver'
op|'('
name|'logFile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logFiles'
op|'.'
name|'append'
op|'('
name|'logFile'
op|')'
newline|'\n'
name|'return'
name|'oldFileLobObserver'
op|'('
name|'logFile'
op|')'
newline|'\n'
dedent|''
name|'patch'
op|'('
name|'log'
op|','
string|"'FileLogObserver'"
op|','
name|'FileLogObserver'
op|')'
newline|'\n'
name|'return'
name|'logFiles'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AppLoggerTestCase
dedent|''
name|'class'
name|'AppLoggerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{app.AppLogger}.\n\n    @ivar observers: list of observers installed during the tests.\n    @type observers: C{list}\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override L{log.addObserver} so that we can trace the observers\n        installed in C{self.observers}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'observers'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|startLoggingWithObserver
name|'def'
name|'startLoggingWithObserver'
op|'('
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'observers'
op|'.'
name|'append'
op|'('
name|'observer'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'log'
op|','
string|"'startLoggingWithObserver'"
op|','
name|'startLoggingWithObserver'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all installed observers.\n        """'
newline|'\n'
name|'for'
name|'observer'
name|'in'
name|'self'
op|'.'
name|'observers'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'removeObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_checkObserver
dedent|''
dedent|''
name|'def'
name|'_checkObserver'
op|'('
name|'self'
op|','
name|'logs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure that initial C{twistd} logs are written to the given list.\n\n        @type logs: C{list}\n        @param logs: The list whose C{append} method was specified as the\n            initial log observer.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'observers'
op|','
op|'['
name|'logs'
op|'.'
name|'append'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"starting up"'
op|','
name|'logs'
op|'['
number|'0'
op|']'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"reactor class"'
op|','
name|'logs'
op|'['
number|'1'
op|']'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.AppLogger.start} calls L{log.addObserver}, and then writes some\n        messages about twistd and the reactor.\n        """'
newline|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
op|'['
op|']'
newline|'\n'
name|'logger'
op|'.'
name|'_getLogObserver'
op|'='
name|'lambda'
op|':'
name|'observer'
op|'.'
name|'append'
newline|'\n'
name|'logger'
op|'.'
name|'start'
op|'('
name|'Componentized'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkObserver'
op|'('
name|'observer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startUsesApplicationLogObserver
dedent|''
name|'def'
name|'test_startUsesApplicationLogObserver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the L{ILogObserver} component is available on the application,\n        that object will be used as the log observer instead of constructing a\n        new one.\n        """'
newline|'\n'
name|'application'
op|'='
name|'Componentized'
op|'('
op|')'
newline|'\n'
name|'logs'
op|'='
op|'['
op|']'
newline|'\n'
name|'application'
op|'.'
name|'setComponent'
op|'('
name|'ILogObserver'
op|','
name|'logs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'start'
op|'('
name|'application'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_checkObserver'
op|'('
name|'logs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverStdout
dedent|''
name|'def'
name|'test_getLogObserverStdout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When logfile is empty or set to C{-}, L{app.AppLogger._getLogObserver}\n        returns a log observer pointing at C{sys.stdout}.\n        """'
newline|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'"-"'
op|'}'
op|')'
newline|'\n'
name|'logFiles'
op|'='
name|'_patchFileLogObserver'
op|'('
name|'self'
op|'.'
name|'patch'
op|')'
newline|'\n'
nl|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'logFiles'
op|'['
number|'0'
op|']'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'""'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'logFiles'
op|'['
number|'1'
op|']'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverFile
dedent|''
name|'def'
name|'test_getLogObserverFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When passing the C{logfile} option, L{app.AppLogger._getLogObserver}\n        returns a log observer pointing at the specified path.\n        """'
newline|'\n'
name|'logFiles'
op|'='
name|'_patchFileLogObserver'
op|'('
name|'self'
op|'.'
name|'patch'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
name|'filename'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logFiles'
op|'['
number|'0'
op|']'
op|'.'
name|'path'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.AppLogger.stop} removes the observer created in C{start}, and\n        reinitialize its C{_observer} so that if C{stop} is called several\n        times it doesn\'t break.\n        """'
newline|'\n'
name|'removed'
op|'='
op|'['
op|']'
newline|'\n'
name|'observer'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
DECL|function|remove
name|'def'
name|'remove'
op|'('
name|'observer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'removed'
op|'.'
name|'append'
op|'('
name|'observer'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'log'
op|','
string|"'removeObserver'"
op|','
name|'remove'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'app'
op|'.'
name|'AppLogger'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'_observer'
op|'='
name|'observer'
newline|'\n'
name|'logger'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
name|'observer'
op|']'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'removed'
op|','
op|'['
name|'observer'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'logger'
op|'.'
name|'_observer'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnixAppLoggerTestCase
dedent|''
dedent|''
name|'class'
name|'UnixAppLoggerTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{UnixAppLogger}.\n\n    @ivar signals: list of signal handlers installed.\n    @type signals: C{list}\n    """'
newline|'\n'
name|'if'
name|'_twistd_unix'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skip
indent|'        '
name|'skip'
op|'='
string|'"twistd unix not available"'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fake C{signal.signal} for not installing the handlers but saving them\n        in C{self.signals}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'signals'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|fakeSignal
name|'def'
name|'fakeSignal'
op|'('
name|'sig'
op|','
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'signals'
op|'.'
name|'append'
op|'('
op|'('
name|'sig'
op|','
name|'f'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'signal'
op|','
string|'"signal"'
op|','
name|'fakeSignal'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverStdout
dedent|''
name|'def'
name|'test_getLogObserverStdout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When non-daemonized and C{logfile} is empty or set to C{-},\n        L{UnixAppLogger._getLogObserver} returns a log observer pointing at\n        C{sys.stdout}.\n        """'
newline|'\n'
name|'logFiles'
op|'='
name|'_patchFileLogObserver'
op|'('
name|'self'
op|'.'
name|'patch'
op|')'
newline|'\n'
nl|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'"-"'
op|','
string|'"nodaemon"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'logFiles'
op|'['
number|'0'
op|']'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'""'
op|','
string|'"nodaemon"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'logFiles'
op|'['
number|'1'
op|']'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverStdoutDaemon
dedent|''
name|'def'
name|'test_getLogObserverStdoutDaemon'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When daemonized and C{logfile} is set to C{-},\n        L{UnixAppLogger._getLogObserver} raises C{SystemExit}.\n        """'
newline|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'"-"'
op|','
string|'"nodaemon"'
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'error'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'SystemExit'
op|','
name|'logger'
op|'.'
name|'_getLogObserver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'error'
op|')'
op|','
string|'"Daemons cannot log to stdout, exiting!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverFile
dedent|''
name|'def'
name|'test_getLogObserverFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When C{logfile} contains a file name, L{app.AppLogger._getLogObserver}\n        returns a log observer pointing at the specified path, and a signal\n        handler rotating the log is installed.\n        """'
newline|'\n'
name|'logFiles'
op|'='
name|'_patchFileLogObserver'
op|'('
name|'self'
op|'.'
name|'patch'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
name|'filename'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logFiles'
op|'['
number|'0'
op|']'
op|'.'
name|'path'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'signals'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'signals'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'signal'
op|'.'
name|'SIGUSR1'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|rotate
name|'def'
name|'rotate'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'logFiles'
op|'['
number|'0'
op|']'
op|'.'
name|'rotate'
op|'='
name|'rotate'
newline|'\n'
nl|'\n'
name|'rotateLog'
op|'='
name|'self'
op|'.'
name|'signals'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'rotateLog'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverDontOverrideSignalHandler
dedent|''
name|'def'
name|'test_getLogObserverDontOverrideSignalHandler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a signal handler is already installed,\n        L{UnixAppLogger._getLogObserver} doesn\'t override it.\n        """'
newline|'\n'
DECL|function|fakeGetSignal
name|'def'
name|'fakeGetSignal'
op|'('
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sig'
op|','
name|'signal'
op|'.'
name|'SIGUSR1'
op|')'
newline|'\n'
name|'return'
name|'object'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'signal'
op|','
string|'"getsignal"'
op|','
name|'fakeGetSignal'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
name|'filename'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'signals'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverDefaultFile
dedent|''
name|'def'
name|'test_getLogObserverDefaultFile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When daemonized and C{logfile} is empty, the observer returned by\n        L{UnixAppLogger._getLogObserver} points at C{twistd.log} in the current\n        directory.\n        """'
newline|'\n'
name|'logFiles'
op|'='
name|'_patchFileLogObserver'
op|'('
name|'self'
op|'.'
name|'patch'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"logfile"'
op|':'
string|'""'
op|','
string|'"nodaemon"'
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logFiles'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'logFiles'
op|'['
number|'0'
op|']'
op|'.'
name|'path'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
string|'"twistd.log"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_getLogObserverSyslog
dedent|''
name|'def'
name|'test_getLogObserverSyslog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If C{syslog} is set to C{True}, L{UnixAppLogger._getLogObserver} starts\n        a L{syslog.SyslogObserver} with given C{prefix}.\n        """'
newline|'\n'
DECL|class|fakesyslogobserver
name|'class'
name|'fakesyslogobserver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fakesyslogobserver'
op|'.'
name|'prefix'
op|'='
name|'prefix'
newline|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'eventDict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'patch'
op|'('
name|'syslog'
op|','
string|'"SyslogObserver"'
op|','
name|'fakesyslogobserver'
op|')'
newline|'\n'
name|'logger'
op|'='
name|'UnixAppLogger'
op|'('
op|'{'
string|'"syslog"'
op|':'
name|'True'
op|','
string|'"prefix"'
op|':'
string|'"test-prefix"'
op|'}'
op|')'
newline|'\n'
name|'observer'
op|'='
name|'logger'
op|'.'
name|'_getLogObserver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fakesyslogobserver'
op|'.'
name|'prefix'
op|','
string|'"test-prefix"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'syslog'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'test_getLogObserverSyslog'
op|'.'
name|'skip'
op|'='
string|'"Syslog not available"'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTests
dedent|''
dedent|''
name|'class'
name|'DeprecationTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for deprecated features.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_initialLog
name|'def'
name|'test_initialLog'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{app.initialLog} is deprecated.\n        """'
newline|'\n'
name|'logs'
op|'='
op|'['
op|']'
newline|'\n'
name|'log'
op|'.'
name|'addObserver'
op|'('
name|'logs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'log'
op|'.'
name|'removeObserver'
op|','
name|'logs'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'callDeprecated'
op|'('
name|'Version'
op|'('
string|'"Twisted"'
op|','
number|'8'
op|','
number|'2'
op|','
number|'0'
op|')'
op|','
name|'app'
op|'.'
name|'initialLog'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'logs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"starting up"'
op|','
name|'logs'
op|'['
number|'0'
op|']'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"reactor class"'
op|','
name|'logs'
op|'['
number|'1'
op|']'
op|'['
string|'"message"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

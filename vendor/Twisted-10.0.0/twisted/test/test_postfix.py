begin_unit
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTest cases for twisted.protocols.postfix module.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'postfix'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PostfixTCPMapQuoteTestCase
name|'class'
name|'PostfixTCPMapQuoteTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|data
indent|'    '
name|'data'
op|'='
op|'['
nl|'\n'
comment|'# (raw, quoted, [aliasQuotedForms]),'
nl|'\n'
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo bar'"
op|','
string|"'foo%20bar'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo\\tbar'"
op|','
string|"'foo%09bar'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo\\nbar'"
op|','
string|"'foo%0Abar'"
op|','
string|"'foo%0abar'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo\\r\\nbar'"
op|','
string|"'foo%0D%0Abar'"
op|','
string|"'foo%0D%0abar'"
op|','
string|"'foo%0d%0Abar'"
op|','
string|"'foo%0d%0abar'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo '"
op|','
string|"'foo%20'"
op|')'
op|','
nl|'\n'
op|'('
string|"' foo'"
op|','
string|"'%20foo'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|testData
name|'def'
name|'testData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'entry'
name|'in'
name|'self'
op|'.'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'raw'
op|'='
name|'entry'
op|'['
number|'0'
op|']'
newline|'\n'
name|'quoted'
op|'='
name|'entry'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'postfix'
op|'.'
name|'quote'
op|'('
name|'raw'
op|')'
op|','
name|'quoted'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'for'
name|'q'
name|'in'
name|'quoted'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'postfix'
op|'.'
name|'unquote'
op|'('
name|'q'
op|')'
op|','
name|'raw'
op|')'
newline|'\n'
nl|'\n'
DECL|class|PostfixTCPMapServerTestCase
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'PostfixTCPMapServerTestCase'
op|':'
newline|'\n'
DECL|variable|data
indent|'    '
name|'data'
op|'='
op|'{'
nl|'\n'
comment|"# 'key': 'value',"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|chat
name|'chat'
op|'='
op|'['
nl|'\n'
comment|'# (input, expected_output),'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_chat
name|'def'
name|'test_chat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that I{get} and I{put} commands are responded to correctly by\n        L{postfix.PostfixTCPMapServer} when its factory is an instance of\n        L{postifx.PostfixTCPMapDictServerFactory}.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'postfix'
op|'.'
name|'PostfixTCPMapDictServerFactory'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'postfix'
op|'.'
name|'PostfixTCPMapServer'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'service'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'input'
op|','
name|'expected_output'
name|'in'
name|'self'
op|'.'
name|'chat'
op|':'
newline|'\n'
indent|'            '
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'expected_output'
op|','
nl|'\n'
string|"'For %r, expected %r but got %r'"
op|'%'
op|'('
nl|'\n'
name|'input'
op|','
name|'expected_output'
op|','
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
dedent|''
name|'protocol'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deferredChat
dedent|''
name|'def'
name|'test_deferredChat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that I{get} and I{put} commands are responded to correctly by\n        L{postfix.PostfixTCPMapServer} when its factory is an instance of\n        L{postifx.PostfixTCPMapDeferringDictServerFactory}.\n        """'
newline|'\n'
name|'factory'
op|'='
name|'postfix'
op|'.'
name|'PostfixTCPMapDeferringDictServerFactory'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'protocol'
op|'='
name|'postfix'
op|'.'
name|'PostfixTCPMapServer'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'service'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'factory'
op|'='
name|'factory'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'input'
op|','
name|'expected_output'
name|'in'
name|'self'
op|'.'
name|'chat'
op|':'
newline|'\n'
indent|'            '
name|'protocol'
op|'.'
name|'lineReceived'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
name|'expected_output'
op|','
nl|'\n'
string|"'For %r, expected %r but got %r'"
op|'%'
op|'('
nl|'\n'
name|'input'
op|','
name|'expected_output'
op|','
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'transport'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
dedent|''
name|'protocol'
op|'.'
name|'setTimeout'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Valid
dedent|''
dedent|''
name|'class'
name|'Valid'
op|'('
name|'PostfixTCPMapServerTestCase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|data
indent|'    '
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'foo'"
op|':'
string|"'ThisIs Foo'"
op|','
nl|'\n'
string|"'bar'"
op|':'
string|"' bar really is found\\r\\n'"
op|','
nl|'\n'
op|'}'
newline|'\n'
DECL|variable|chat
name|'chat'
op|'='
op|'['
nl|'\n'
op|'('
string|"'get'"
op|','
string|'"400 Command \'get\' takes 1 parameters.\\n"'
op|')'
op|','
nl|'\n'
op|'('
string|"'get foo bar'"
op|','
string|'"500 \\n"'
op|')'
op|','
nl|'\n'
op|'('
string|"'put'"
op|','
string|'"400 Command \'put\' takes 2 parameters.\\n"'
op|')'
op|','
nl|'\n'
op|'('
string|"'put foo'"
op|','
string|'"400 Command \'put\' takes 2 parameters.\\n"'
op|')'
op|','
nl|'\n'
op|'('
string|"'put foo bar baz'"
op|','
string|'"500 put is not implemented yet.\\n"'
op|')'
op|','
nl|'\n'
op|'('
string|"'put foo bar'"
op|','
string|"'500 put is not implemented yet.\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'get foo'"
op|','
string|"'200 ThisIs%20Foo\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'get bar'"
op|','
string|"'200 %20bar%20really%20is%20found%0D%0A\\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'get baz'"
op|','
string|"'500 \\n'"
op|')'
op|','
nl|'\n'
op|'('
string|"'foo'"
op|','
string|"'400 unknown command\\n'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
dedent|''
endmarker|''
end_unit

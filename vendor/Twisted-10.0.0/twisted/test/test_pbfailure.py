begin_unit
comment|'# Copyright (c) 2001-2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for error handling in PB.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
op|','
name|'flavors'
op|','
name|'jelly'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
op|','
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
comment|'##'
nl|'\n'
comment|'# test exceptions'
nl|'\n'
comment|'##'
nl|'\n'
DECL|class|AsynchronousException
name|'class'
name|'AsynchronousException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper used to test remote methods which return Deferreds which fail with\n    exceptions which are not L{pb.Error} subclasses.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SynchronousException
dedent|''
name|'class'
name|'SynchronousException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper used to test remote methods which raise exceptions which are not\n    L{pb.Error} subclasses.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AsynchronousError
dedent|''
name|'class'
name|'AsynchronousError'
op|'('
name|'pb'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper used to test remote methods which return Deferreds which fail with\n    exceptions which are L{pb.Error} subclasses.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SynchronousError
dedent|''
name|'class'
name|'SynchronousError'
op|'('
name|'pb'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper used to test remote methods which raise exceptions which are\n    L{pb.Error} subclasses.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#class JellyError(flavors.Jellyable, pb.Error): pass'
nl|'\n'
DECL|class|JellyError
dedent|''
name|'class'
name|'JellyError'
op|'('
name|'flavors'
op|'.'
name|'Jellyable'
op|','
name|'pb'
op|'.'
name|'Error'
op|','
name|'pb'
op|'.'
name|'RemoteCopy'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SecurityError
dedent|''
name|'class'
name|'SecurityError'
op|'('
name|'pb'
op|'.'
name|'Error'
op|','
name|'pb'
op|'.'
name|'RemoteCopy'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'JellyError'
op|','
name|'JellyError'
op|')'
newline|'\n'
name|'pb'
op|'.'
name|'setUnjellyableForClass'
op|'('
name|'SecurityError'
op|','
name|'SecurityError'
op|')'
newline|'\n'
name|'pb'
op|'.'
name|'globalSecurity'
op|'.'
name|'allowInstancesOf'
op|'('
name|'SecurityError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'####'
nl|'\n'
comment|'# server-side'
nl|'\n'
comment|'####'
nl|'\n'
DECL|class|SimpleRoot
name|'class'
name|'SimpleRoot'
op|'('
name|'pb'
op|'.'
name|'Root'
op|')'
op|':'
newline|'\n'
DECL|member|remote_asynchronousException
indent|'    '
name|'def'
name|'remote_asynchronousException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail asynchronously with a non-pb.Error exception.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AsynchronousException'
op|'('
string|'"remote asynchronous exception"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_synchronousException
dedent|''
name|'def'
name|'remote_synchronousException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail synchronously with a non-pb.Error exception.\n        """'
newline|'\n'
name|'raise'
name|'SynchronousException'
op|'('
string|'"remote synchronous exception"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_asynchronousError
dedent|''
name|'def'
name|'remote_asynchronousError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail asynchronously with a pb.Error exception.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'AsynchronousError'
op|'('
string|'"remote asynchronous error"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_synchronousError
dedent|''
name|'def'
name|'remote_synchronousError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail synchronously with a pb.Error exception.\n        """'
newline|'\n'
name|'raise'
name|'SynchronousError'
op|'('
string|'"remote synchronous error"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_unknownError
dedent|''
name|'def'
name|'remote_unknownError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fail with error that is not known to client.\n        """'
newline|'\n'
DECL|class|UnknownError
name|'class'
name|'UnknownError'
op|'('
name|'pb'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'raise'
name|'UnknownError'
op|'('
string|'"I\'m not known to client!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_jelly
dedent|''
name|'def'
name|'remote_jelly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'raiseJelly'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_security
dedent|''
name|'def'
name|'remote_security'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'raiseSecurity'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remote_deferredJelly
dedent|''
name|'def'
name|'remote_deferredJelly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'raiseJelly'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|remote_deferredSecurity
dedent|''
name|'def'
name|'remote_deferredSecurity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'raiseSecurity'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|raiseJelly
dedent|''
name|'def'
name|'raiseJelly'
op|'('
name|'self'
op|','
name|'results'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'JellyError'
op|'('
string|'"I\'m jellyable!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|raiseSecurity
dedent|''
name|'def'
name|'raiseSecurity'
op|'('
name|'self'
op|','
name|'results'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'SecurityError'
op|'('
string|'"I\'m secure!"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SaveProtocolServerFactory
dedent|''
dedent|''
name|'class'
name|'SaveProtocolServerFactory'
op|'('
name|'pb'
op|'.'
name|'PBServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{pb.PBServerFactory} that saves the latest connected client in\n    C{protocolInstance}.\n    """'
newline|'\n'
DECL|variable|protocolInstance
name|'protocolInstance'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionMade
name|'def'
name|'clientConnectionMade'
op|'('
name|'self'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Keep track of the given protocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'protocolInstance'
op|'='
name|'protocol'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBConnTestCase
dedent|''
dedent|''
name|'class'
name|'PBConnTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|unsafeTracebacks
indent|'    '
name|'unsafeTracebacks'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_setUpServer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setUpClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setUpServer
dedent|''
name|'def'
name|'_setUpServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'serverFactory'
op|'='
name|'SaveProtocolServerFactory'
op|'('
name|'SimpleRoot'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'unsafeTracebacks'
op|'='
name|'self'
op|'.'
name|'unsafeTracebacks'
newline|'\n'
name|'self'
op|'.'
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'serverFactory'
op|','
name|'interface'
op|'='
string|'"127.0.0.1"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setUpClient
dedent|''
name|'def'
name|'_setUpClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'portNo'
op|'='
name|'self'
op|'.'
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'clientFactory'
op|'='
name|'pb'
op|'.'
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientConnector'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"127.0.0.1"'
op|','
name|'portNo'
op|','
name|'self'
op|'.'
name|'clientFactory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocolInstance'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocolInstance'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
op|'['
nl|'\n'
name|'self'
op|'.'
name|'_tearDownServer'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_tearDownClient'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tearDownServer
dedent|''
name|'def'
name|'_tearDownServer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'maybeDeferred'
op|'('
name|'self'
op|'.'
name|'serverPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_tearDownClient
dedent|''
name|'def'
name|'_tearDownClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'clientConnector'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBFailureTest
dedent|''
dedent|''
name|'class'
name|'PBFailureTest'
op|'('
name|'PBConnTestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|compare
indent|'    '
name|'compare'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'.'
name|'assertEquals'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_exceptionTest
name|'def'
name|'_exceptionTest'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'exceptionType'
op|','
name|'flush'
op|')'
op|':'
newline|'\n'
DECL|function|eb
indent|'        '
name|'def'
name|'eb'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'err'
op|'.'
name|'trap'
op|'('
name|'exceptionType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compare'
op|'('
name|'err'
op|'.'
name|'traceback'
op|','
string|'"Traceback unavailable\\n"'
op|')'
newline|'\n'
name|'if'
name|'flush'
op|':'
newline|'\n'
indent|'                '
name|'errs'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'exceptionType'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'errs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'err'
op|'.'
name|'type'
op|','
name|'err'
op|'.'
name|'value'
op|','
name|'err'
op|'.'
name|'traceback'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'='
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
DECL|function|gotRootObject
name|'def'
name|'gotRootObject'
op|'('
name|'root'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'root'
op|'.'
name|'callRemote'
op|'('
name|'method'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'eb'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'gotRootObject'
op|')'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_asynchronousException
dedent|''
name|'def'
name|'test_asynchronousException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a Deferred returned by a remote method which already has a\n        Failure correctly has that error passed back to the calling side.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exceptionTest'
op|'('
nl|'\n'
string|"'asynchronousException'"
op|','
name|'AsynchronousException'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_synchronousException
dedent|''
name|'def'
name|'test_synchronousException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_asynchronousException}, but for a method which raises an\n        exception synchronously.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exceptionTest'
op|'('
nl|'\n'
string|"'synchronousException'"
op|','
name|'SynchronousException'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_asynchronousError
dedent|''
name|'def'
name|'test_asynchronousError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_asynchronousException}, but for a method which returns a\n        Deferred failing with an L{pb.Error} subclass.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exceptionTest'
op|'('
nl|'\n'
string|"'asynchronousError'"
op|','
name|'AsynchronousError'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_synchronousError
dedent|''
name|'def'
name|'test_synchronousError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Like L{test_asynchronousError}, but for a method which synchronously\n        raises a L{pb.Error} subclass.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_exceptionTest'
op|'('
nl|'\n'
string|"'synchronousError'"
op|','
name|'SynchronousError'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_success
dedent|''
name|'def'
name|'_success'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'expectedResult'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'result'
op|','
name|'expectedResult'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_addFailingCallbacks
dedent|''
name|'def'
name|'_addFailingCallbacks'
op|'('
name|'self'
op|','
name|'remoteCall'
op|','
name|'expectedResult'
op|','
name|'eb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'remoteCall'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_success'
op|','
name|'eb'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'expectedResult'
op|','
op|')'
op|')'
newline|'\n'
name|'return'
name|'remoteCall'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_testImpl
dedent|''
name|'def'
name|'_testImpl'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'expected'
op|','
name|'eb'
op|','
name|'exc'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Call the given remote method and attach the given errback to the\n        resulting Deferred.  If C{exc} is not None, also assert that one\n        exception of that type was logged.\n        """'
newline|'\n'
name|'rootDeferred'
op|'='
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
DECL|function|gotRootObj
name|'def'
name|'gotRootObj'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'failureDeferred'
op|'='
name|'self'
op|'.'
name|'_addFailingCallbacks'
op|'('
name|'obj'
op|'.'
name|'callRemote'
op|'('
name|'method'
op|')'
op|','
name|'expected'
op|','
name|'eb'
op|')'
newline|'\n'
name|'if'
name|'exc'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
DECL|function|gotFailure
indent|'                '
name|'def'
name|'gotFailure'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'exc'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'err'
newline|'\n'
dedent|''
name|'failureDeferred'
op|'.'
name|'addBoth'
op|'('
name|'gotFailure'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'failureDeferred'
newline|'\n'
dedent|''
name|'rootDeferred'
op|'.'
name|'addCallback'
op|'('
name|'gotRootObj'
op|')'
newline|'\n'
name|'return'
name|'rootDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_jellyFailure
dedent|''
name|'def'
name|'test_jellyFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an exception which is a subclass of L{pb.Error} has more\n        information passed across the network to the calling side.\n        """'
newline|'\n'
DECL|function|failureJelly
name|'def'
name|'failureJelly'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'trap'
op|'('
name|'JellyError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'type'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'value'
op|','
name|'fail'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'return'
number|'43'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'jelly'"
op|','
number|'43'
op|','
name|'failureJelly'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deferredJellyFailure
dedent|''
name|'def'
name|'test_deferredJellyFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a Deferred which fails with a L{pb.Error} is treated in\n        the same way as a synchronously raised L{pb.Error}.\n        """'
newline|'\n'
DECL|function|failureDeferredJelly
name|'def'
name|'failureDeferredJelly'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'trap'
op|'('
name|'JellyError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'type'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'value'
op|','
name|'fail'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'return'
number|'430'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'deferredJelly'"
op|','
number|'430'
op|','
name|'failureDeferredJelly'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unjellyableFailure
dedent|''
name|'def'
name|'test_unjellyableFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An non-jellyable L{pb.Error} subclass raised by a remote method is\n        turned into a Failure with a type set to the FQPN of the exception\n        type.\n        """'
newline|'\n'
DECL|function|failureUnjellyable
name|'def'
name|'failureUnjellyable'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'fail'
op|'.'
name|'type'
op|','
string|"'twisted.test.test_pbfailure.SynchronousError'"
op|')'
newline|'\n'
name|'return'
number|'431'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'synchronousError'"
op|','
number|'431'
op|','
name|'failureUnjellyable'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unknownFailure
dedent|''
name|'def'
name|'test_unknownFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that an exception which is a subclass of L{pb.Error} but not\n        known on the client side has its type set properly.\n        """'
newline|'\n'
DECL|function|failureUnknown
name|'def'
name|'failureUnknown'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'fail'
op|'.'
name|'type'
op|','
string|"'twisted.test.test_pbfailure.UnknownError'"
op|')'
newline|'\n'
name|'return'
number|'4310'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'unknownError'"
op|','
number|'4310'
op|','
name|'failureUnknown'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_securityFailure
dedent|''
name|'def'
name|'test_securityFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that even if an exception is not explicitly jellyable (by being\n        a L{pb.Jellyable} subclass), as long as it is an L{pb.Error}\n        subclass it receives the same special treatment.\n        """'
newline|'\n'
DECL|function|failureSecurity
name|'def'
name|'failureSecurity'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'trap'
op|'('
name|'SecurityError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'type'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'value'
op|','
name|'fail'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'return'
number|'4300'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'security'"
op|','
number|'4300'
op|','
name|'failureSecurity'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_deferredSecurity
dedent|''
name|'def'
name|'test_deferredSecurity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a Deferred which fails with a L{pb.Error} which is not\n        also a L{pb.Jellyable} is treated in the same way as a synchronously\n        raised exception of the same type.\n        """'
newline|'\n'
DECL|function|failureDeferredSecurity
name|'def'
name|'failureDeferredSecurity'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'trap'
op|'('
name|'SecurityError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'type'
op|','
name|'str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'isinstance'
op|'('
name|'fail'
op|'.'
name|'value'
op|','
name|'fail'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
name|'return'
number|'43000'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'deferredSecurity'"
op|','
number|'43000'
op|','
name|'failureDeferredSecurity'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noSuchMethodFailure
dedent|''
name|'def'
name|'test_noSuchMethodFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that attempting to call a method which is not defined correctly\n        results in an AttributeError on the calling side.\n        """'
newline|'\n'
DECL|function|failureNoSuch
name|'def'
name|'failureNoSuch'
op|'('
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fail'
op|'.'
name|'trap'
op|'('
name|'pb'
op|'.'
name|'NoSuchMethod'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compare'
op|'('
name|'fail'
op|'.'
name|'traceback'
op|','
string|'"Traceback unavailable\\n"'
op|')'
newline|'\n'
name|'return'
number|'42000'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_testImpl'
op|'('
string|"'nosuch'"
op|','
number|'42000'
op|','
name|'failureNoSuch'
op|','
name|'AttributeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_copiedFailureLogging
dedent|''
name|'def'
name|'test_copiedFailureLogging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that a copied failure received from a PB call can be logged\n        locally.\n\n        Note: this test needs some serious help: all it really tests is that\n        log.err(copiedFailure) doesn\'t raise an exception.\n        """'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'getRootObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|connected
name|'def'
name|'connected'
op|'('
name|'rootObj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rootObj'
op|'.'
name|'callRemote'
op|'('
string|"'synchronousException'"
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
nl|'\n'
DECL|function|exception
name|'def'
name|'exception'
op|'('
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log'
op|'.'
name|'err'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'errs'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'SynchronousException'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'errs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addErrback'
op|'('
name|'exception'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|PBFailureTestUnsafe
dedent|''
dedent|''
name|'class'
name|'PBFailureTestUnsafe'
op|'('
name|'PBFailureTest'
op|')'
op|':'
newline|'\n'
DECL|variable|compare
indent|'    '
name|'compare'
op|'='
name|'unittest'
op|'.'
name|'TestCase'
op|'.'
name|'failIfEquals'
newline|'\n'
DECL|variable|unsafeTracebacks
name|'unsafeTracebacks'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|DummyInvoker
dedent|''
name|'class'
name|'DummyInvoker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A behaviorless object to be used as the invoker parameter to\n    L{jelly.jelly}.\n    """'
newline|'\n'
DECL|variable|serializingPerspective
name|'serializingPerspective'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FailureJellyingTests
dedent|''
name|'class'
name|'FailureJellyingTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for the interaction of jelly and failures.\n    """'
newline|'\n'
DECL|member|test_unjelliedFailureCheck
name|'def'
name|'test_unjelliedFailureCheck'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An unjellied L{CopyableFailure} has a check method which behaves the\n        same way as the original L{CopyableFailure}\'s check method.\n        """'
newline|'\n'
name|'original'
op|'='
name|'pb'
op|'.'
name|'CopyableFailure'
op|'('
name|'ZeroDivisionError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'original'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'original'
op|'.'
name|'check'
op|'('
name|'ArithmeticError'
op|')'
op|','
name|'ArithmeticError'
op|')'
newline|'\n'
name|'copied'
op|'='
name|'jelly'
op|'.'
name|'unjelly'
op|'('
name|'jelly'
op|'.'
name|'jelly'
op|'('
name|'original'
op|','
name|'invoker'
op|'='
name|'DummyInvoker'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'copied'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'copied'
op|'.'
name|'check'
op|'('
name|'ArithmeticError'
op|')'
op|','
name|'ArithmeticError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_twiceUnjelliedFailureCheck
dedent|''
name|'def'
name|'test_twiceUnjelliedFailureCheck'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The object which results from jellying a L{CopyableFailure}, unjellying\n        the result, creating a new L{CopyableFailure} from the result of that,\n        jellying it, and finally unjellying the result of that has a check\n        method which behaves the same way as the original L{CopyableFailure}\'s\n        check method.\n        """'
newline|'\n'
name|'original'
op|'='
name|'pb'
op|'.'
name|'CopyableFailure'
op|'('
name|'ZeroDivisionError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'original'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'original'
op|'.'
name|'check'
op|'('
name|'ArithmeticError'
op|')'
op|','
name|'ArithmeticError'
op|')'
newline|'\n'
name|'copiedOnce'
op|'='
name|'jelly'
op|'.'
name|'unjelly'
op|'('
nl|'\n'
name|'jelly'
op|'.'
name|'jelly'
op|'('
name|'original'
op|','
name|'invoker'
op|'='
name|'DummyInvoker'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'derivative'
op|'='
name|'pb'
op|'.'
name|'CopyableFailure'
op|'('
name|'copiedOnce'
op|')'
newline|'\n'
name|'copiedTwice'
op|'='
name|'jelly'
op|'.'
name|'unjelly'
op|'('
nl|'\n'
name|'jelly'
op|'.'
name|'jelly'
op|'('
name|'derivative'
op|','
name|'invoker'
op|'='
name|'DummyInvoker'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'copiedTwice'
op|'.'
name|'check'
op|'('
name|'ZeroDivisionError'
op|')'
op|','
name|'ZeroDivisionError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
nl|'\n'
name|'copiedTwice'
op|'.'
name|'check'
op|'('
name|'ArithmeticError'
op|')'
op|','
name|'ArithmeticError'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

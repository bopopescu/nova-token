begin_unit
comment|'# Copyright (c) 2005 Divmod, Inc.'
nl|'\n'
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nTests for L{twisted.protocols.amp}.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
op|'.'
name|'verify'
name|'import'
name|'verifyObject'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'util'
name|'import'
name|'setIDFunction'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'filepath'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'failure'
name|'import'
name|'Failure'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'amp'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
op|','
name|'defer'
op|','
name|'error'
op|','
name|'reactor'
op|','
name|'interfaces'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
name|'import'
name|'iosim'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'test'
op|'.'
name|'proto_helpers'
name|'import'
name|'StringTransport'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'ssl'
name|'and'
name|'not'
name|'ssl'
op|'.'
name|'supported'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ssl'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|skipSSL
indent|'    '
name|'skipSSL'
op|'='
string|'"SSL not available"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|skipSSL
indent|'    '
name|'skipSSL'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestProto
dedent|''
name|'class'
name|'TestProto'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A trivial protocol for use in testing where a L{Protocol} is expected.\n\n    @ivar instanceId: the id of this instance\n    @ivar onConnLost: deferred that will fired when the connection is lost\n    @ivar dataToSend: data to send on the protocol\n    """'
newline|'\n'
nl|'\n'
DECL|variable|instanceCount
name|'instanceCount'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onConnLost'
op|','
name|'dataToSend'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onConnLost'
op|'='
name|'onConnLost'
newline|'\n'
name|'self'
op|'.'
name|'dataToSend'
op|'='
name|'dataToSend'
newline|'\n'
name|'self'
op|'.'
name|'instanceId'
op|'='
name|'TestProto'
op|'.'
name|'instanceCount'
newline|'\n'
name|'TestProto'
op|'.'
name|'instanceCount'
op|'='
name|'TestProto'
op|'.'
name|'instanceCount'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'dataToSend'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'bytes'
op|')'
newline|'\n'
comment|'# self.transport.loseConnection()'
nl|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onConnLost'
op|'.'
name|'callback'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Custom repr for testing to avoid coupling amp tests with repr from\n        L{Protocol}\n\n        Returns a string which contains a unique identifier that can be looked\n        up using the instanceId property::\n\n            <TestProto #3>\n        """'
newline|'\n'
name|'return'
string|'"<TestProto #%d>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'instanceId'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleSymmetricProtocol
dedent|''
dedent|''
name|'class'
name|'SimpleSymmetricProtocol'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|sendHello
indent|'    '
name|'def'
name|'sendHello'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'callRemoteString'
op|'('
nl|'\n'
string|'"hello"'
op|','
nl|'\n'
name|'hello'
op|'='
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|amp_HELLO
dedent|''
name|'def'
name|'amp_HELLO'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'amp'
op|'.'
name|'Box'
op|'('
name|'hello'
op|'='
name|'box'
op|'['
string|"'hello'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|amp_HOWDOYOUDO
dedent|''
name|'def'
name|'amp_HOWDOYOUDO'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'amp'
op|'.'
name|'QuitBox'
op|'('
name|'howdoyoudo'
op|'='
string|"'world'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnfriendlyGreeting
dedent|''
dedent|''
name|'class'
name|'UnfriendlyGreeting'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Greeting was insufficiently kind.\n    """'
newline|'\n'
nl|'\n'
DECL|class|DeathThreat
dedent|''
name|'class'
name|'DeathThreat'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Greeting was insufficiently kind.\n    """'
newline|'\n'
nl|'\n'
DECL|class|UnknownProtocol
dedent|''
name|'class'
name|'UnknownProtocol'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Asked to switch to the wrong protocol.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TransportPeer
dedent|''
name|'class'
name|'TransportPeer'
op|'('
name|'amp'
op|'.'
name|'Argument'
op|')'
op|':'
newline|'\n'
comment|'# this serves as some informal documentation for how to get variables from'
nl|'\n'
comment|'# the protocol or your environment and pass them to methods as arguments.'
nl|'\n'
DECL|member|retrieve
indent|'    '
name|'def'
name|'retrieve'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'name'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|member|fromStringProto
dedent|''
name|'def'
name|'fromStringProto'
op|'('
name|'self'
op|','
name|'notAString'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'proto'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|toBox
dedent|''
name|'def'
name|'toBox'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'strings'
op|','
name|'objects'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Hello
dedent|''
dedent|''
name|'class'
name|'Hello'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'hello'"
newline|'\n'
nl|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'hello'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'optional'"
op|','
name|'amp'
op|'.'
name|'Boolean'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'print'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'from'"
op|','
name|'TransportPeer'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'mixedCase'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'dash-arg'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'underscore_arg'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'hello'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'print'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
name|'UnfriendlyGreeting'
op|':'
string|"'UNFRIENDLY'"
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|fatalErrors
name|'fatalErrors'
op|'='
op|'{'
name|'DeathThreat'
op|':'
string|"'DEAD'"
op|'}'
newline|'\n'
nl|'\n'
DECL|class|NoAnswerHello
dedent|''
name|'class'
name|'NoAnswerHello'
op|'('
name|'Hello'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
name|'Hello'
op|'.'
name|'commandName'
newline|'\n'
DECL|variable|requiresAnswer
name|'requiresAnswer'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|class|FutureHello
dedent|''
name|'class'
name|'FutureHello'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'hello'"
newline|'\n'
nl|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'hello'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'optional'"
op|','
name|'amp'
op|'.'
name|'Boolean'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'print'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'from'"
op|','
name|'TransportPeer'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'bonus'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
comment|"# addt'l arguments"
nl|'\n'
comment|'# should generally be'
nl|'\n'
comment|'# added at the end, and'
nl|'\n'
comment|'# be optional...'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'hello'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'print'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
name|'UnfriendlyGreeting'
op|':'
string|"'UNFRIENDLY'"
op|'}'
newline|'\n'
nl|'\n'
DECL|class|WTF
dedent|''
name|'class'
name|'WTF'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An example of an invalid command.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BrokenReturn
dedent|''
name|'class'
name|'BrokenReturn'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" An example of a perfectly good command, but the handler is going to return\n    None...\n    """'
newline|'\n'
nl|'\n'
DECL|variable|commandName
name|'commandName'
op|'='
string|"'broken_return'"
newline|'\n'
nl|'\n'
DECL|class|Goodbye
dedent|''
name|'class'
name|'Goodbye'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
comment|'# commandName left blank on purpose: this tests implicit command names.'
nl|'\n'
DECL|variable|response
indent|'    '
name|'response'
op|'='
op|'['
op|'('
string|"'goodbye'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
DECL|variable|responseType
name|'responseType'
op|'='
name|'amp'
op|'.'
name|'QuitBox'
newline|'\n'
nl|'\n'
DECL|class|Howdoyoudo
dedent|''
name|'class'
name|'Howdoyoudo'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'howdoyoudo'"
newline|'\n'
comment|'# responseType = amp.QuitBox'
nl|'\n'
nl|'\n'
DECL|class|WaitForever
dedent|''
name|'class'
name|'WaitForever'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'wait_forever'"
newline|'\n'
nl|'\n'
DECL|class|GetList
dedent|''
name|'class'
name|'GetList'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'getlist'"
newline|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'length'"
op|','
name|'amp'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'body'"
op|','
name|'amp'
op|'.'
name|'AmpList'
op|'('
op|'['
op|'('
string|"'x'"
op|','
name|'amp'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|class|DontRejectMe
dedent|''
name|'class'
name|'DontRejectMe'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'dontrejectme'"
newline|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
nl|'\n'
op|'('
string|"'magicWord'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'list'"
op|','
name|'amp'
op|'.'
name|'AmpList'
op|'('
op|'['
op|'('
string|"'name'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
op|')'
op|')'
op|']'
op|','
name|'optional'
op|'='
name|'True'
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'response'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|class|SecuredPing
dedent|''
name|'class'
name|'SecuredPing'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
comment|'# XXX TODO: actually make this refuse to send over an insecure connection'
nl|'\n'
DECL|variable|response
indent|'    '
name|'response'
op|'='
op|'['
op|'('
string|"'pinged'"
op|','
name|'amp'
op|'.'
name|'Boolean'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|class|TestSwitchProto
dedent|''
name|'class'
name|'TestSwitchProto'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitchCommand'
op|')'
op|':'
newline|'\n'
DECL|variable|commandName
indent|'    '
name|'commandName'
op|'='
string|"'Switch-Proto'"
newline|'\n'
nl|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
nl|'\n'
op|'('
string|"'name'"
op|','
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
name|'UnknownProtocol'
op|':'
string|"'UNKNOWN'"
op|'}'
newline|'\n'
nl|'\n'
DECL|class|SingleUseFactory
dedent|''
name|'class'
name|'SingleUseFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proto'
op|'='
name|'proto'
newline|'\n'
name|'self'
op|'.'
name|'proto'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'p'
op|','
name|'self'
op|'.'
name|'proto'
op|'='
name|'self'
op|'.'
name|'proto'
op|','
name|'None'
newline|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|variable|reasonFailed
dedent|''
name|'reasonFailed'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reasonFailed'
op|'='
name|'reason'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|variable|THING_I_DONT_UNDERSTAND
dedent|''
dedent|''
name|'THING_I_DONT_UNDERSTAND'
op|'='
string|"'gwebol nargo'"
newline|'\n'
DECL|class|ThingIDontUnderstandError
name|'class'
name|'ThingIDontUnderstandError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|FactoryNotifier
dedent|''
name|'class'
name|'FactoryNotifier'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
DECL|variable|factory
indent|'    '
name|'factory'
op|'='
name|'None'
newline|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'factory'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'theProto'
op|'='
name|'self'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'factory'
op|','
string|"'onMade'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'factory'
op|'.'
name|'onMade'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|emitpong
dedent|''
dedent|''
dedent|''
name|'def'
name|'emitpong'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'interfaces'
name|'import'
name|'ISSLTransport'
newline|'\n'
name|'if'
name|'not'
name|'ISSLTransport'
op|'.'
name|'providedBy'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DeathThreat'
op|'('
string|'"only send secure pings over secure channels"'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'{'
string|"'pinged'"
op|':'
name|'True'
op|'}'
newline|'\n'
dedent|''
name|'SecuredPing'
op|'.'
name|'responder'
op|'('
name|'emitpong'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleSymmetricCommandProtocol
dedent|''
name|'class'
name|'SimpleSymmetricCommandProtocol'
op|'('
name|'FactoryNotifier'
op|')'
op|':'
newline|'\n'
DECL|variable|maybeLater
indent|'    '
name|'maybeLater'
op|'='
name|'None'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'onConnLost'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'amp'
op|'.'
name|'AMP'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onConnLost'
op|'='
name|'onConnLost'
newline|'\n'
nl|'\n'
DECL|member|sendHello
dedent|''
name|'def'
name|'sendHello'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sendUnicodeHello
dedent|''
name|'def'
name|'sendUnicodeHello'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'translation'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
name|'text'
op|','
name|'Print'
op|'='
name|'translation'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|greeted
dedent|''
name|'greeted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|cmdHello
name|'def'
name|'cmdHello'
op|'('
name|'self'
op|','
name|'hello'
op|','
name|'From'
op|','
name|'optional'
op|'='
name|'None'
op|','
name|'Print'
op|'='
name|'None'
op|','
nl|'\n'
name|'mixedCase'
op|'='
name|'None'
op|','
name|'dash_arg'
op|'='
name|'None'
op|','
name|'underscore_arg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'From'
op|'=='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'getPeer'
op|'('
op|')'
newline|'\n'
name|'if'
name|'hello'
op|'=='
name|'THING_I_DONT_UNDERSTAND'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ThingIDontUnderstandError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hello'
op|'.'
name|'startswith'
op|'('
string|"'fuck'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'UnfriendlyGreeting'
op|'('
string|'"Don\'t be a dick."'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'hello'
op|'=='
string|"'die'"
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DeathThreat'
op|'('
string|'"aieeeeeeeee"'
op|')'
newline|'\n'
dedent|''
name|'result'
op|'='
name|'dict'
op|'('
name|'hello'
op|'='
name|'hello'
op|')'
newline|'\n'
name|'if'
name|'Print'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'Print'
op|'='
name|'Print'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'greeted'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'Hello'
op|'.'
name|'responder'
op|'('
name|'cmdHello'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cmdGetlist
name|'def'
name|'cmdGetlist'
op|'('
name|'self'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'body'"
op|':'
op|'['
name|'dict'
op|'('
name|'x'
op|'='
number|'1'
op|')'
op|']'
op|'*'
name|'length'
op|'}'
newline|'\n'
dedent|''
name|'GetList'
op|'.'
name|'responder'
op|'('
name|'cmdGetlist'
op|')'
newline|'\n'
nl|'\n'
DECL|member|okiwont
name|'def'
name|'okiwont'
op|'('
name|'self'
op|','
name|'magicWord'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'response'
op|'='
string|"u'%s accepted'"
op|'%'
op|'('
name|'list'
op|'['
number|'0'
op|']'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'DontRejectMe'
op|'.'
name|'responder'
op|'('
name|'okiwont'
op|')'
newline|'\n'
nl|'\n'
DECL|member|waitforit
name|'def'
name|'waitforit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'waiting'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'waiting'
newline|'\n'
dedent|''
name|'WaitForever'
op|'.'
name|'responder'
op|'('
name|'waitforit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|howdo
name|'def'
name|'howdo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'howdoyoudo'
op|'='
string|"'world'"
op|')'
newline|'\n'
dedent|''
name|'Howdoyoudo'
op|'.'
name|'responder'
op|'('
name|'howdo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|saybye
name|'def'
name|'saybye'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'goodbye'
op|'='
string|'"everyone"'
op|')'
newline|'\n'
dedent|''
name|'Goodbye'
op|'.'
name|'responder'
op|'('
name|'saybye'
op|')'
newline|'\n'
nl|'\n'
DECL|member|switchToTestProtocol
name|'def'
name|'switchToTestProtocol'
op|'('
name|'self'
op|','
name|'fail'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fail'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'no-proto'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'test-proto'"
newline|'\n'
dedent|''
name|'p'
op|'='
name|'TestProto'
op|'('
name|'self'
op|'.'
name|'onConnLost'
op|','
name|'SWITCH_CLIENT_DATA'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'callRemote'
op|'('
nl|'\n'
name|'TestSwitchProto'
op|','
nl|'\n'
name|'SingleUseFactory'
op|'('
name|'p'
op|')'
op|','
name|'name'
op|'='
name|'name'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'lambda'
name|'ign'
op|':'
name|'p'
op|')'
newline|'\n'
nl|'\n'
DECL|member|switchit
dedent|''
name|'def'
name|'switchit'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'test-proto'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'TestProto'
op|'('
name|'self'
op|'.'
name|'onConnLost'
op|','
name|'SWITCH_SERVER_DATA'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'UnknownProtocol'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'TestSwitchProto'
op|'.'
name|'responder'
op|'('
name|'switchit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|donothing
name|'def'
name|'donothing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'BrokenReturn'
op|'.'
name|'responder'
op|'('
name|'donothing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeferredSymmetricCommandProtocol
dedent|''
name|'class'
name|'DeferredSymmetricCommandProtocol'
op|'('
name|'SimpleSymmetricCommandProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|switchit
indent|'    '
name|'def'
name|'switchit'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'test-proto'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maybeLaterProto'
op|'='
name|'TestProto'
op|'('
name|'self'
op|'.'
name|'onConnLost'
op|','
name|'SWITCH_SERVER_DATA'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'maybeLater'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'maybeLater'
newline|'\n'
dedent|''
name|'raise'
name|'UnknownProtocol'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'TestSwitchProto'
op|'.'
name|'responder'
op|'('
name|'switchit'
op|')'
newline|'\n'
nl|'\n'
DECL|class|BadNoAnswerCommandProtocol
dedent|''
name|'class'
name|'BadNoAnswerCommandProtocol'
op|'('
name|'SimpleSymmetricCommandProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|badResponder
indent|'    '
name|'def'
name|'badResponder'
op|'('
name|'self'
op|','
name|'hello'
op|','
name|'From'
op|','
name|'optional'
op|'='
name|'None'
op|','
name|'Print'
op|'='
name|'None'
op|','
nl|'\n'
name|'mixedCase'
op|'='
name|'None'
op|','
name|'dash_arg'
op|'='
name|'None'
op|','
name|'underscore_arg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This responder does nothing and forgets to return a dictionary.\n        """'
newline|'\n'
dedent|''
name|'NoAnswerHello'
op|'.'
name|'responder'
op|'('
name|'badResponder'
op|')'
newline|'\n'
nl|'\n'
DECL|class|NoAnswerCommandProtocol
dedent|''
name|'class'
name|'NoAnswerCommandProtocol'
op|'('
name|'SimpleSymmetricCommandProtocol'
op|')'
op|':'
newline|'\n'
DECL|member|goodNoAnswerResponder
indent|'    '
name|'def'
name|'goodNoAnswerResponder'
op|'('
name|'self'
op|','
name|'hello'
op|','
name|'From'
op|','
name|'optional'
op|'='
name|'None'
op|','
name|'Print'
op|'='
name|'None'
op|','
nl|'\n'
name|'mixedCase'
op|'='
name|'None'
op|','
name|'dash_arg'
op|'='
name|'None'
op|','
name|'underscore_arg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'('
name|'hello'
op|'='
name|'hello'
op|'+'
string|'"-noanswer"'
op|')'
newline|'\n'
dedent|''
name|'NoAnswerHello'
op|'.'
name|'responder'
op|'('
name|'goodNoAnswerResponder'
op|')'
newline|'\n'
nl|'\n'
DECL|function|connectedServerAndClient
dedent|''
name|'def'
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'SimpleSymmetricProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricProtocol'
op|','
nl|'\n'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a 3-tuple: (client, server, pump)\n    """'
newline|'\n'
name|'return'
name|'iosim'
op|'.'
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|','
name|'ClientClass'
op|','
nl|'\n'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TotallyDumbProtocol
dedent|''
name|'class'
name|'TotallyDumbProtocol'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|variable|buf
indent|'    '
name|'buf'
op|'='
string|"''"
newline|'\n'
DECL|member|dataReceived
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buf'
op|'+='
name|'data'
newline|'\n'
nl|'\n'
DECL|class|LiteralAmp
dedent|''
dedent|''
name|'class'
name|'LiteralAmp'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'boxes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'boxes'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
DECL|class|ParsingTest
dedent|''
dedent|''
name|'class'
name|'ParsingTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_booleanValues
indent|'    '
name|'def'
name|'test_booleanValues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the Boolean parser parses \'True\' and \'False\', but nothing\n        else.\n        """'
newline|'\n'
name|'b'
op|'='
name|'amp'
op|'.'
name|'Boolean'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'fromString'
op|'('
string|'"True"'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'fromString'
op|'('
string|'"False"'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'b'
op|'.'
name|'fromString'
op|','
string|'"ninja"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'b'
op|'.'
name|'fromString'
op|','
string|'"true"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'b'
op|'.'
name|'fromString'
op|','
string|'"TRUE"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'toString'
op|'('
name|'True'
op|')'
op|','
string|"'True'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'b'
op|'.'
name|'toString'
op|'('
name|'False'
op|')'
op|','
string|"'False'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pathValueRoundTrip
dedent|''
name|'def'
name|'test_pathValueRoundTrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify the \'Path\' argument can parse and emit a file path.\n        """'
newline|'\n'
name|'fp'
op|'='
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
op|')'
newline|'\n'
name|'p'
op|'='
name|'amp'
op|'.'
name|'Path'
op|'('
op|')'
newline|'\n'
name|'s'
op|'='
name|'p'
op|'.'
name|'toString'
op|'('
name|'fp'
op|')'
newline|'\n'
name|'v'
op|'='
name|'p'
op|'.'
name|'fromString'
op|'('
name|'s'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIdentical'
op|'('
name|'fp'
op|','
name|'v'
op|')'
comment|'# sanity check'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sillyEmptyThing
dedent|''
name|'def'
name|'test_sillyEmptyThing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that empty boxes raise an error; they aren\'t supposed to be sent\n        on purpose.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'AMP'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'NoEmptyBoxes'
op|','
name|'a'
op|'.'
name|'ampBoxReceived'
op|','
name|'amp'
op|'.'
name|'Box'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ParsingRoundTrip
dedent|''
name|'def'
name|'test_ParsingRoundTrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that various kinds of data make it through the encode/parse\n        round-trip unharmed.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ClientClass'
op|'='
name|'LiteralAmp'
op|','
nl|'\n'
name|'ServerClass'
op|'='
name|'LiteralAmp'
op|')'
newline|'\n'
nl|'\n'
name|'SIMPLE'
op|'='
op|'('
string|"'simple'"
op|','
string|"'test'"
op|')'
newline|'\n'
name|'CE'
op|'='
op|'('
string|"'ceq'"
op|','
string|"': '"
op|')'
newline|'\n'
name|'CR'
op|'='
op|'('
string|"'crtest'"
op|','
string|"'test\\r'"
op|')'
newline|'\n'
name|'LF'
op|'='
op|'('
string|"'lftest'"
op|','
string|"'hello\\n'"
op|')'
newline|'\n'
name|'NEWLINE'
op|'='
op|'('
string|"'newline'"
op|','
string|"'test\\r\\none\\r\\ntwo'"
op|')'
newline|'\n'
name|'NEWLINE2'
op|'='
op|'('
string|"'newline2'"
op|','
string|"'test\\r\\none\\r\\n two'"
op|')'
newline|'\n'
name|'BLANKLINE'
op|'='
op|'('
string|"'newline3'"
op|','
string|"'test\\r\\n\\r\\nblank\\r\\n\\r\\nline'"
op|')'
newline|'\n'
name|'BODYTEST'
op|'='
op|'('
string|"'body'"
op|','
string|"'blah\\r\\n\\r\\ntesttest'"
op|')'
newline|'\n'
nl|'\n'
name|'testData'
op|'='
op|'['
nl|'\n'
op|'['
name|'SIMPLE'
op|']'
op|','
nl|'\n'
op|'['
name|'SIMPLE'
op|','
name|'BODYTEST'
op|']'
op|','
nl|'\n'
op|'['
name|'SIMPLE'
op|','
name|'CE'
op|']'
op|','
nl|'\n'
op|'['
name|'SIMPLE'
op|','
name|'CR'
op|']'
op|','
nl|'\n'
op|'['
name|'SIMPLE'
op|','
name|'CE'
op|','
name|'CR'
op|','
name|'LF'
op|']'
op|','
nl|'\n'
op|'['
name|'CE'
op|','
name|'CR'
op|','
name|'LF'
op|']'
op|','
nl|'\n'
op|'['
name|'SIMPLE'
op|','
name|'NEWLINE'
op|','
name|'CE'
op|','
name|'NEWLINE2'
op|']'
op|','
nl|'\n'
op|'['
name|'BODYTEST'
op|','
name|'SIMPLE'
op|','
name|'NEWLINE'
op|']'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'test'
name|'in'
name|'testData'
op|':'
newline|'\n'
indent|'            '
name|'jb'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|')'
newline|'\n'
name|'jb'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'test'
op|')'
op|')'
newline|'\n'
name|'jb'
op|'.'
name|'_sendTo'
op|'('
name|'c'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'s'
op|'.'
name|'boxes'
op|'['
op|'-'
number|'1'
op|']'
op|','
name|'jb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeLocator
dedent|''
dedent|''
dedent|''
name|'class'
name|'FakeLocator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a fake implementation of the interface implied by\n    L{CommandLocator}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remember the given keyword arguments as a set of responders.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'commands'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|locateResponder
dedent|''
name|'def'
name|'locateResponder'
op|'('
name|'self'
op|','
name|'commandName'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Look up and return a function passed as a keyword argument of the given\n        name to the constructor.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'commands'
op|'['
name|'commandName'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeSender
dedent|''
dedent|''
name|'class'
name|'FakeSender'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a fake implementation of the \'box sender\' interface implied by\n    L{AMP}.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a fake sender and initialize the list of received boxes and\n        unhandled errors.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sentBoxes'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'unhandledErrors'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expectedErrors'
op|'='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|expectError
dedent|''
name|'def'
name|'expectError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Expect one error, so that the test doesn\'t fail.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expectedErrors'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|sendBox
dedent|''
name|'def'
name|'sendBox'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Accept a box, but don\'t do anything.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sentBoxes'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|unhandledError
dedent|''
name|'def'
name|'unhandledError'
op|'('
name|'self'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deal with failures by instantly re-raising them for easier debugging.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expectedErrors'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'expectedErrors'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'failure'
op|'.'
name|'raiseException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unhandledErrors'
op|'.'
name|'append'
op|'('
name|'failure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandDispatchTests
dedent|''
dedent|''
dedent|''
name|'class'
name|'CommandDispatchTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The AMP CommandDispatcher class dispatches converts AMP boxes into commands\n    and responses using Command.responder decorator.\n\n    Note: Originally, AMP\'s factoring was such that many tests for this\n    functionality are now implemented as full round-trip tests in L{AMPTest}.\n    Future tests should be written at this level instead, to ensure API\n    compatibility and to provide more granular, readable units of test\n    coverage.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a dispatcher to use.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'locator'
op|'='
name|'FakeLocator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'='
name|'FakeSender'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'='
name|'amp'
op|'.'
name|'BoxDispatcher'
op|'('
name|'self'
op|'.'
name|'locator'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'startReceivingBoxes'
op|'('
name|'self'
op|'.'
name|'sender'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receivedAsk
dedent|''
name|'def'
name|'test_receivedAsk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{CommandDispatcher.ampBoxReceived} should locate the appropriate\n        command in its responder lookup, based on the \'_ask\' key.\n        """'
newline|'\n'
name|'received'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|thunk
name|'def'
name|'thunk'
op|'('
name|'box'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'received'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
name|'return'
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"hello"'
op|':'
string|'"goodbye"'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'input'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
name|'_command'
op|'='
string|'"hello"'
op|','
nl|'\n'
name|'_ask'
op|'='
string|'"test-command-id"'
op|','
nl|'\n'
name|'hello'
op|'='
string|'"world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'locator'
op|'.'
name|'commands'
op|'['
string|"'hello'"
op|']'
op|'='
name|'thunk'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'ampBoxReceived'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'received'
op|','
op|'['
name|'input'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendUnhandledError
dedent|''
name|'def'
name|'test_sendUnhandledError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{CommandDispatcher} should relay its unhandled errors in responding to\n        boxes to its boxSender.\n        """'
newline|'\n'
name|'err'
op|'='
name|'RuntimeError'
op|'('
string|'"something went wrong, oh no"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'expectError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'unhandledError'
op|'('
name|'Failure'
op|'('
name|'err'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'unhandledErrors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'unhandledErrors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unhandledSerializationError
dedent|''
name|'def'
name|'test_unhandledSerializationError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Errors during serialization ought to be relayed to the sender\'s\n        unhandledError method.\n        """'
newline|'\n'
name|'err'
op|'='
name|'RuntimeError'
op|'('
string|'"something undefined went wrong"'
op|')'
newline|'\n'
DECL|function|thunk
name|'def'
name|'thunk'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
DECL|class|BrokenBox
indent|'            '
name|'class'
name|'BrokenBox'
op|'('
name|'amp'
op|'.'
name|'Box'
op|')'
op|':'
newline|'\n'
DECL|member|_sendTo
indent|'                '
name|'def'
name|'_sendTo'
op|'('
name|'self'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'err'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'BrokenBox'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'locator'
op|'.'
name|'commands'
op|'['
string|"'hello'"
op|']'
op|'='
name|'thunk'
newline|'\n'
name|'input'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
name|'_command'
op|'='
string|'"hello"'
op|','
nl|'\n'
name|'_ask'
op|'='
string|'"test-command-id"'
op|','
nl|'\n'
name|'hello'
op|'='
string|'"world"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sender'
op|'.'
name|'expectError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'ampBoxReceived'
op|'('
name|'input'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'unhandledErrors'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'unhandledErrors'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callRemote
dedent|''
name|'def'
name|'test_callRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{CommandDispatcher.callRemote} should emit a properly formatted \'_ask\'\n        box to its boxSender and record an outstanding L{Deferred}.  When a\n        corresponding \'_answer\' packet is received, the L{Deferred} should be\n        fired, and the results translated via the given L{Command}\'s response\n        de-serialization.\n        """'
newline|'\n'
name|'D'
op|'='
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
string|"'world'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'sender'
op|'.'
name|'sentBoxes'
op|','
nl|'\n'
op|'['
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'_command'
op|'='
string|'"hello"'
op|','
nl|'\n'
name|'_ask'
op|'='
string|'"1"'
op|','
nl|'\n'
name|'hello'
op|'='
string|'"world"'
op|')'
op|']'
op|')'
newline|'\n'
name|'answers'
op|'='
op|'['
op|']'
newline|'\n'
name|'D'
op|'.'
name|'addCallback'
op|'('
name|'answers'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'answers'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dispatcher'
op|'.'
name|'ampBoxReceived'
op|'('
name|'amp'
op|'.'
name|'AmpBox'
op|'('
op|'{'
string|"'hello'"
op|':'
string|'"yay"'
op|','
nl|'\n'
string|"'print'"
op|':'
string|'"ignored"'
op|','
nl|'\n'
string|"'_answer'"
op|':'
string|'"1"'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'answers'
op|','
op|'['
name|'dict'
op|'('
name|'hello'
op|'='
string|'"yay"'
op|','
nl|'\n'
name|'Print'
op|'='
string|'u"ignored"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SimpleGreeting
dedent|''
dedent|''
name|'class'
name|'SimpleGreeting'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A very simple greeting command that uses a few basic argument types.\n    """'
newline|'\n'
DECL|variable|commandName
name|'commandName'
op|'='
string|"'simple'"
newline|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'greeting'"
op|','
name|'amp'
op|'.'
name|'Unicode'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'cookie'"
op|','
name|'amp'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'cookieplus'"
op|','
name|'amp'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLocator
dedent|''
name|'class'
name|'TestLocator'
op|'('
name|'amp'
op|'.'
name|'CommandLocator'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A locator which implements a responder to a \'hello\' command.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'greetings'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|greetingResponder
dedent|''
name|'def'
name|'greetingResponder'
op|'('
name|'self'
op|','
name|'greeting'
op|','
name|'cookie'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'greetings'
op|'.'
name|'append'
op|'('
op|'('
name|'greeting'
op|','
name|'cookie'
op|')'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'cookieplus'
op|'='
name|'cookie'
op|'+'
number|'3'
op|')'
newline|'\n'
DECL|variable|greetingResponder
dedent|''
name|'greetingResponder'
op|'='
name|'SimpleGreeting'
op|'.'
name|'responder'
op|'('
name|'greetingResponder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OverrideLocatorAMP
dedent|''
name|'class'
name|'OverrideLocatorAMP'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'amp'
op|'.'
name|'AMP'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'customResponder'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expectations'
op|'='
op|'{'
string|'"custom"'
op|':'
name|'self'
op|'.'
name|'customResponder'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'greetings'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|lookupFunction
dedent|''
name|'def'
name|'lookupFunction'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Override the deprecated lookupFunction function.\n        """'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'expectations'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'expectations'
op|'['
name|'name'
op|']'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'OverrideLocatorAMP'
op|','
name|'self'
op|')'
op|'.'
name|'lookupFunction'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|greetingResponder
dedent|''
dedent|''
name|'def'
name|'greetingResponder'
op|'('
name|'self'
op|','
name|'greeting'
op|','
name|'cookie'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'greetings'
op|'.'
name|'append'
op|'('
op|'('
name|'greeting'
op|','
name|'cookie'
op|')'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'cookieplus'
op|'='
name|'cookie'
op|'+'
number|'3'
op|')'
newline|'\n'
DECL|variable|greetingResponder
dedent|''
name|'greetingResponder'
op|'='
name|'SimpleGreeting'
op|'.'
name|'responder'
op|'('
name|'greetingResponder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandLocatorTests
dedent|''
name|'class'
name|'CommandLocatorTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The CommandLocator should enable users to specify responders to commands as\n    functions that take structured objects, annotated with metadata.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_responderDecorator
name|'def'
name|'test_responderDecorator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A method on a L{CommandLocator} subclass decorated with a L{Command}\n        subclass\'s L{responder} decorator should be returned from\n        locateResponder, wrapped in logic to serialize and deserialize its\n        arguments.\n        """'
newline|'\n'
name|'locator'
op|'='
name|'TestLocator'
op|'('
op|')'
newline|'\n'
name|'responderCallable'
op|'='
name|'locator'
op|'.'
name|'locateResponder'
op|'('
string|'"simple"'
op|')'
newline|'\n'
name|'result'
op|'='
name|'responderCallable'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
name|'greeting'
op|'='
string|'"ni hao"'
op|','
name|'cookie'
op|'='
string|'"5"'
op|')'
op|')'
newline|'\n'
DECL|function|done
name|'def'
name|'done'
op|'('
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'cookieplus'
op|'='
string|"'8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'done'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupFunctionDeprecatedOverride
dedent|''
name|'def'
name|'test_lookupFunctionDeprecatedOverride'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Subclasses which override locateResponder under its old name,\n        lookupFunction, should have the override invoked instead.  (This tests\n        an AMP subclass, because in the version of the code that could invoke\n        this deprecated code path, there was no L{CommandLocator}.)\n        """'
newline|'\n'
name|'locator'
op|'='
name|'OverrideLocatorAMP'
op|'('
op|')'
newline|'\n'
name|'customResponderObject'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'PendingDeprecationWarning'
op|','
nl|'\n'
string|'"Override locateResponder, not lookupFunction."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'lambda'
op|':'
name|'locator'
op|'.'
name|'locateResponder'
op|'('
string|'"custom"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'locator'
op|'.'
name|'customResponder'
op|','
name|'customResponderObject'
op|')'
newline|'\n'
comment|'# Make sure upcalling works too'
nl|'\n'
name|'normalResponderObject'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'PendingDeprecationWarning'
op|','
nl|'\n'
string|'"Override locateResponder, not lookupFunction."'
op|','
nl|'\n'
name|'__file__'
op|','
name|'lambda'
op|':'
name|'locator'
op|'.'
name|'locateResponder'
op|'('
string|'"simple"'
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'normalResponderObject'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
name|'greeting'
op|'='
string|'"ni hao"'
op|','
name|'cookie'
op|'='
string|'"5"'
op|')'
op|')'
newline|'\n'
DECL|function|done
name|'def'
name|'done'
op|'('
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'cookieplus'
op|'='
string|"'8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'done'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lookupFunctionDeprecatedInvoke
dedent|''
name|'def'
name|'test_lookupFunctionDeprecatedInvoke'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Invoking locateResponder under its old name, lookupFunction, should\n        emit a deprecation warning, but do the same thing.\n        """'
newline|'\n'
name|'locator'
op|'='
name|'TestLocator'
op|'('
op|')'
newline|'\n'
name|'responderCallable'
op|'='
name|'self'
op|'.'
name|'assertWarns'
op|'('
nl|'\n'
name|'PendingDeprecationWarning'
op|','
nl|'\n'
string|'"Call locateResponder, not lookupFunction."'
op|','
name|'__file__'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'locator'
op|'.'
name|'lookupFunction'
op|'('
string|'"simple"'
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'responderCallable'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
name|'greeting'
op|'='
string|'"ni hao"'
op|','
name|'cookie'
op|'='
string|'"5"'
op|')'
op|')'
newline|'\n'
DECL|function|done
name|'def'
name|'done'
op|'('
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'cookieplus'
op|'='
string|"'8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'.'
name|'addCallback'
op|'('
name|'done'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|SWITCH_CLIENT_DATA
dedent|''
dedent|''
name|'SWITCH_CLIENT_DATA'
op|'='
string|"'Success!'"
newline|'\n'
DECL|variable|SWITCH_SERVER_DATA
name|'SWITCH_SERVER_DATA'
op|'='
string|"'No, really.  Success.'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BinaryProtocolTests
name|'class'
name|'BinaryProtocolTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{amp.BinaryBoxProtocol}.\n\n    @ivar _boxSender: After C{startReceivingBoxes} is called, the L{IBoxSender}\n        which was passed to it.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Keep track of all boxes received by this test in its capacity as an\n        L{IBoxReceiver} implementor.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'boxes'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|startReceivingBoxes
dedent|''
name|'def'
name|'startReceivingBoxes'
op|'('
name|'self'
op|','
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Implement L{IBoxReceiver.startReceivingBoxes} to just remember the\n        value passed in.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_boxSender'
op|'='
name|'sender'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A box was received by the protocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'boxes'
op|'.'
name|'append'
op|'('
name|'box'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|stopReason
dedent|''
name|'stopReason'
op|'='
name|'None'
newline|'\n'
DECL|member|stopReceivingBoxes
name|'def'
name|'stopReceivingBoxes'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record the reason that we stopped receiving boxes.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'stopReason'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# fake ITransport'
nl|'\n'
DECL|member|getPeer
dedent|''
name|'def'
name|'getPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'no peer'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|getHost
dedent|''
name|'def'
name|'getHost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'no host'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startReceivingBoxes
dedent|''
name|'def'
name|'test_startReceivingBoxes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When L{amp.BinaryBoxProtocol} is connected to a transport, it calls\n        C{startReceivingBoxes} on its L{IBoxReceiver} with itself as the\n        L{IBoxSender} parameter.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'_boxSender'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendBoxInStartReceivingBoxes
dedent|''
name|'def'
name|'test_sendBoxInStartReceivingBoxes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The L{IBoxReceiver} which is started when L{amp.BinaryBoxProtocol} is\n        connected to a transport can call C{sendBox} on the L{IBoxSender}\n        passed to it before C{startReceivingBoxes} returns and have that box\n        sent.\n        """'
newline|'\n'
DECL|class|SynchronouslySendingReceiver
name|'class'
name|'SynchronouslySendingReceiver'
op|':'
newline|'\n'
DECL|member|startReceivingBoxes
indent|'            '
name|'def'
name|'startReceivingBoxes'
op|'('
name|'self'
op|','
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sender'
op|'.'
name|'sendBox'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'SynchronouslySendingReceiver'
op|'('
op|')'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'transport'
op|'.'
name|'value'
op|'('
op|')'
op|','
nl|'\n'
string|"'\\x00\\x03foo\\x00\\x03bar\\x00\\x00'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveBoxStateMachine
dedent|''
name|'def'
name|'test_receiveBoxStateMachine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a binary box protocol receives:\n            * a key\n            * a value\n            * an empty string\n        it should emit a box and send it to its boxReceiver.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'stringReceived'
op|'('
string|'"hello"'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'stringReceived'
op|'('
string|'"world"'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'stringReceived'
op|'('
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'boxes'
op|','
op|'['
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'hello'
op|'='
string|'"world"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_firstBoxFirstKeyExcessiveLength
dedent|''
name|'def'
name|'test_firstBoxFirstKeyExcessiveLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{amp.BinaryBoxProtocol} drops its connection if the length prefix for\n        the first a key it receives is larger than 255.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x01\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_firstBoxSubsequentKeyExcessiveLength
dedent|''
name|'def'
name|'test_firstBoxSubsequentKeyExcessiveLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{amp.BinaryBoxProtocol} drops its connection if the length prefix for\n        a subsequent key in the first box it receives is larger than 255.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x00\\x01k\\x00\\x01v'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x01\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_subsequentBoxFirstKeyExcessiveLength
dedent|''
name|'def'
name|'test_subsequentBoxFirstKeyExcessiveLength'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{amp.BinaryBoxProtocol} drops its connection if the length prefix for\n        the first key in a subsequent box it receives is larger than 255.\n        """'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x00\\x01k\\x00\\x01v\\x00\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x01\\x00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_excessiveKeyFailure
dedent|''
name|'def'
name|'test_excessiveKeyFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If L{amp.BinaryBoxProtocol} disconnects because it received a key\n        length prefix which was too large, the L{IBoxReceiver}\'s\n        C{stopReceivingBoxes} method is called with a L{TooLong} failure.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
string|"'\\x01\\x00'"
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'connectionLost'
op|'('
nl|'\n'
name|'Failure'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|'('
string|'"simulated connection done"'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stopReason'
op|'.'
name|'trap'
op|'('
name|'amp'
op|'.'
name|'TooLong'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'stopReason'
op|'.'
name|'value'
op|'.'
name|'isKey'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'stopReason'
op|'.'
name|'value'
op|'.'
name|'isLocal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'stopReason'
op|'.'
name|'value'
op|'.'
name|'value'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'stopReason'
op|'.'
name|'value'
op|'.'
name|'keyName'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveBoxData
dedent|''
name|'def'
name|'test_receiveBoxData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a binary box protocol receives the serialized form of an AMP box,\n        it should emit a similar box to its boxReceiver.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'dataReceived'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"testKey"'
op|':'
string|'"valueTest"'
op|','
nl|'\n'
string|'"anotherKey"'
op|':'
string|'"anotherValue"'
op|'}'
op|')'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'boxes'
op|','
nl|'\n'
op|'['
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"testKey"'
op|':'
string|'"valueTest"'
op|','
nl|'\n'
string|'"anotherKey"'
op|':'
string|'"anotherValue"'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_receiveLongerBoxData
dedent|''
name|'def'
name|'test_receiveLongerBoxData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        An L{amp.BinaryBoxProtocol} can receive serialized AMP boxes with\n        values of up to (2 ** 16 - 1) bytes.\n        """'
newline|'\n'
name|'length'
op|'='
op|'('
number|'2'
op|'**'
number|'16'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'value'
op|'='
string|"'x'"
op|'*'
name|'length'
newline|'\n'
name|'transport'
op|'='
name|'StringTransport'
op|'('
op|')'
newline|'\n'
name|'protocol'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'makeConnection'
op|'('
name|'transport'
op|')'
newline|'\n'
name|'protocol'
op|'.'
name|'dataReceived'
op|'('
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|"'k'"
op|':'
name|'value'
op|'}'
op|')'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'boxes'
op|','
op|'['
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|"'k'"
op|':'
name|'value'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'transport'
op|'.'
name|'disconnecting'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_sendBox
dedent|''
name|'def'
name|'test_sendBox'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a binary box protocol sends a box, it should emit the serialized\n        bytes of that box to its transport.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'aBox'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"testKey"'
op|':'
string|'"valueTest"'
op|','
nl|'\n'
string|'"someData"'
op|':'
string|'"hello"'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'sendBox'
op|'('
name|'aBox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|','
name|'aBox'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_connectionLostStopSendingBoxes
dedent|''
name|'def'
name|'test_connectionLostStopSendingBoxes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a binary box protocol loses its connection, it should notify its\n        box receiver that it has stopped receiving boxes.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'aBox'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"sample"'
op|':'
string|'"data"'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'connectionFailure'
op|'='
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'connectionLost'
op|'('
name|'connectionFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'self'
op|'.'
name|'stopReason'
op|','
name|'connectionFailure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitch
dedent|''
name|'def'
name|'test_protocolSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BinaryBoxProtocol} has the capacity to switch to a different protocol\n        on a box boundary.  When a protocol is in the process of switching, it\n        cannot receive traffic.\n        """'
newline|'\n'
name|'otherProto'
op|'='
name|'TestProto'
op|'('
name|'None'
op|','
string|'"outgoing data"'
op|')'
newline|'\n'
name|'test'
op|'='
name|'self'
newline|'\n'
DECL|class|SwitchyReceiver
name|'class'
name|'SwitchyReceiver'
op|':'
newline|'\n'
DECL|variable|switched
indent|'            '
name|'switched'
op|'='
name|'False'
newline|'\n'
DECL|member|startReceivingBoxes
name|'def'
name|'startReceivingBoxes'
op|'('
name|'self'
op|','
name|'sender'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
DECL|member|ampBoxReceived
dedent|''
name|'def'
name|'ampBoxReceived'
op|'('
name|'self'
op|','
name|'box'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'test'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'switched'
op|','
nl|'\n'
string|'"Should only receive one box!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'switched'
op|'='
name|'True'
newline|'\n'
name|'a'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_switchTo'
op|'('
name|'otherProto'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'SwitchyReceiver'
op|'('
op|')'
op|')'
newline|'\n'
name|'anyOldBox'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"include"'
op|':'
string|'"lots"'
op|','
nl|'\n'
string|'"of"'
op|':'
string|'"data"'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
comment|"# Include a 0-length box at the beginning of the next protocol's data,"
nl|'\n'
comment|"# to make sure that AMP doesn't eat the data or try to deliver extra"
nl|'\n'
comment|'# boxes either...'
nl|'\n'
name|'moreThanOneBox'
op|'='
name|'anyOldBox'
op|'.'
name|'serialize'
op|'('
op|')'
op|'+'
string|'"\\x00\\x00Hello, world!"'
newline|'\n'
name|'a'
op|'.'
name|'dataReceived'
op|'('
name|'moreThanOneBox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'otherProto'
op|'.'
name|'transport'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'otherProto'
op|'.'
name|'data'
op|')'
op|','
string|'"\\x00\\x00Hello, world!"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'data'
op|','
op|'['
string|'"outgoing data"'
op|']'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'dataReceived'
op|'('
string|'"more data"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'""'
op|'.'
name|'join'
op|'('
name|'otherProto'
op|'.'
name|'data'
op|')'
op|','
nl|'\n'
string|'"\\x00\\x00Hello, world!more data"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitched'
op|','
name|'a'
op|'.'
name|'sendBox'
op|','
name|'anyOldBox'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitchInvalidStates
dedent|''
name|'def'
name|'test_protocolSwitchInvalidStates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        In order to make sure the protocol never gets any invalid data sent\n        into the middle of a box, it must be locked for switching before it is\n        switched.  It can only be unlocked if the switch failed, and attempting\n        to send a box while it is locked should raise an exception.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'sampleBox'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|'{'
string|'"some"'
op|':'
string|'"data"'
op|'}'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitched'
op|','
name|'a'
op|'.'
name|'sendBox'
op|','
name|'sampleBox'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_unlockFromSwitch'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'sendBox'
op|'('
name|'sampleBox'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'data'
op|')'
op|','
name|'sampleBox'
op|'.'
name|'serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'otherProto'
op|'='
name|'TestProto'
op|'('
name|'None'
op|','
string|'"outgoing data"'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_switchTo'
op|'('
name|'otherProto'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitched'
op|','
name|'a'
op|'.'
name|'_unlockFromSwitch'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitchLoseConnection
dedent|''
name|'def'
name|'test_protocolSwitchLoseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the protocol is switched, it should notify its nested protocol of\n        disconnection.\n        """'
newline|'\n'
DECL|class|Loser
name|'class'
name|'Loser'
op|'('
name|'protocol'
op|'.'
name|'Protocol'
op|')'
op|':'
newline|'\n'
DECL|variable|reason
indent|'            '
name|'reason'
op|'='
name|'None'
newline|'\n'
DECL|member|connectionLost
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
dedent|''
dedent|''
name|'connectionLoser'
op|'='
name|'Loser'
op|'('
op|')'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_switchTo'
op|'('
name|'connectionLoser'
op|')'
newline|'\n'
name|'connectionFailure'
op|'='
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'connectionLost'
op|'('
name|'connectionFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'connectionLoser'
op|'.'
name|'reason'
op|','
name|'connectionFailure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitchLoseClientConnection
dedent|''
name|'def'
name|'test_protocolSwitchLoseClientConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When the protocol is switched, it should notify its nested client\n        protocol factory of disconnection.\n        """'
newline|'\n'
DECL|class|ClientLoser
name|'class'
name|'ClientLoser'
op|':'
newline|'\n'
DECL|variable|reason
indent|'            '
name|'reason'
op|'='
name|'None'
newline|'\n'
DECL|member|clientConnectionLost
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'reason'
op|'='
name|'reason'
newline|'\n'
dedent|''
dedent|''
name|'a'
op|'='
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|'('
name|'self'
op|')'
newline|'\n'
name|'connectionLoser'
op|'='
name|'protocol'
op|'.'
name|'Protocol'
op|'('
op|')'
newline|'\n'
name|'clientLoser'
op|'='
name|'ClientLoser'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'makeConnection'
op|'('
name|'self'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_lockForSwitch'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'_switchTo'
op|'('
name|'connectionLoser'
op|','
name|'clientLoser'
op|')'
newline|'\n'
name|'connectionFailure'
op|'='
name|'Failure'
op|'('
name|'RuntimeError'
op|'('
op|')'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'connectionLost'
op|'('
name|'connectionFailure'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'clientLoser'
op|'.'
name|'reason'
op|','
name|'connectionFailure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AMPTest
dedent|''
dedent|''
name|'class'
name|'AMPTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_interfaceDeclarations
indent|'    '
name|'def'
name|'test_interfaceDeclarations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The classes in the amp module ought to implement the interfaces that\n        are declared for their benefit.\n        """'
newline|'\n'
name|'for'
name|'interface'
op|','
name|'implementation'
name|'in'
op|'['
op|'('
name|'amp'
op|'.'
name|'IBoxSender'
op|','
name|'amp'
op|'.'
name|'BinaryBoxProtocol'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IBoxReceiver'
op|','
name|'amp'
op|'.'
name|'BoxDispatcher'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IResponderLocator'
op|','
name|'amp'
op|'.'
name|'CommandLocator'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IResponderLocator'
op|','
name|'amp'
op|'.'
name|'SimpleStringLocator'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IBoxSender'
op|','
name|'amp'
op|'.'
name|'AMP'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IBoxReceiver'
op|','
name|'amp'
op|'.'
name|'AMP'
op|')'
op|','
nl|'\n'
op|'('
name|'amp'
op|'.'
name|'IResponderLocator'
op|','
name|'amp'
op|'.'
name|'AMP'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'interface'
op|'.'
name|'implementedBy'
op|'('
name|'implementation'
op|')'
op|','
nl|'\n'
string|'"%s does not implements(%s)"'
op|'%'
op|'('
name|'implementation'
op|','
name|'interface'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloWorld
dedent|''
dedent|''
name|'def'
name|'test_helloWorld'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a simple command can be sent and its response received with\n        the simple low-level string-based API.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wireFormatRoundTrip
dedent|''
name|'def'
name|'test_wireFormatRoundTrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that mixed-case, underscored and dashed arguments are mapped to\n        their python names properly.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloWorldUnicode
dedent|''
name|'def'
name|'test_helloWorldUnicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that unicode arguments can be encoded and decoded.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'HELLO_UNICODE'
op|'='
string|"'wor\\u1234ld'"
newline|'\n'
name|'c'
op|'.'
name|'sendUnicodeHello'
op|'('
name|'HELLO'
op|','
name|'HELLO_UNICODE'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'Print'"
op|']'
op|','
name|'HELLO_UNICODE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callRemoteStringRequiresAnswerFalse
dedent|''
name|'def'
name|'test_callRemoteStringRequiresAnswerFalse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{BoxDispatcher.callRemoteString} returns C{None} if C{requiresAnswer}\n        is C{False}.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'c'
op|'.'
name|'callRemoteString'
op|'('
string|'"WTF"'
op|','
name|'requiresAnswer'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'ret'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unknownCommandLow
dedent|''
name|'def'
name|'test_unknownCommandLow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that unknown commands using low-level APIs will be rejected with an\n        error, but will NOT terminate the connection.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|clearAndAdd
name|'def'
name|'clearAndAdd'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            You can\'t propagate the error...\n            """'
newline|'\n'
name|'e'
op|'.'
name|'trap'
op|'('
name|'amp'
op|'.'
name|'UnhandledCommand'
op|')'
newline|'\n'
name|'return'
string|'"OK"'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'callRemoteString'
op|'('
string|'"WTF"'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'clearAndAdd'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|','
string|'"OK"'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unknownCommandHigh
dedent|''
name|'def'
name|'test_unknownCommandHigh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that unknown commands using high-level APIs will be rejected with an\n        error, but will NOT terminate the connection.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
DECL|function|clearAndAdd
name|'def'
name|'clearAndAdd'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            You can\'t propagate the error...\n            """'
newline|'\n'
name|'e'
op|'.'
name|'trap'
op|'('
name|'amp'
op|'.'
name|'UnhandledCommand'
op|')'
newline|'\n'
name|'return'
string|'"OK"'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'WTF'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'clearAndAdd'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|','
string|'"OK"'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_brokenReturnValue
dedent|''
name|'def'
name|'test_brokenReturnValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        It can be very confusing if you write some code which responds to a\n        command, but gets the return value wrong.  Most commonly you end up\n        returning None instead of a dictionary.\n\n        Verify that if that happens, the framework logs a useful error.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'SimpleSymmetricCommandProtocol'
op|'('
op|')'
op|'.'
name|'dispatchCommand'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'AmpBox'
op|'('
name|'_command'
op|'='
name|'BrokenReturn'
op|'.'
name|'commandName'
op|')'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'blr'
op|'='
name|'L'
op|'['
number|'0'
op|']'
op|'.'
name|'trap'
op|'('
name|'amp'
op|'.'
name|'BadLocalReturn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIn'
op|'('
string|"'None'"
op|','
name|'repr'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_unknownArgument
dedent|''
name|'def'
name|'test_unknownArgument'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that unknown arguments are ignored, and not passed to a Python\n        function which can\'t accept them.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
comment|'# c.sendHello(HELLO).addCallback(L.append)'
nl|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'FutureHello'
op|','
nl|'\n'
name|'hello'
op|'='
name|'HELLO'
op|','
nl|'\n'
name|'bonus'
op|'='
string|'"I\'m not in the book!"'
op|')'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleReprs
dedent|''
name|'def'
name|'test_simpleReprs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the various Box objects repr properly, for debugging.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'repr'
op|'('
name|'amp'
op|'.'
name|'_SwitchBox'
op|'('
string|"'a'"
op|')'
op|')'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'repr'
op|'('
name|'amp'
op|'.'
name|'QuitBox'
op|'('
op|')'
op|')'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'repr'
op|'('
name|'amp'
op|'.'
name|'AmpBox'
op|'('
op|')'
op|')'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|'"AmpBox"'
name|'in'
name|'repr'
op|'('
name|'amp'
op|'.'
name|'AmpBox'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_innerProtocolInRepr
dedent|''
name|'def'
name|'test_innerProtocolInRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that L{AMP} objects output their innerProtocol when set.\n        """'
newline|'\n'
name|'otherProto'
op|'='
name|'TestProto'
op|'('
name|'None'
op|','
string|'"outgoing data"'
op|')'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'AMP'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'innerProtocol'
op|'='
name|'otherProto'
newline|'\n'
DECL|function|fakeID
name|'def'
name|'fakeID'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
name|'a'
op|':'
number|'0x1234'
op|'}'
op|'.'
name|'get'
op|'('
name|'obj'
op|','
name|'id'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'setIDFunction'
op|','
name|'setIDFunction'
op|'('
name|'fakeID'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'a'
op|')'
op|','
string|'"<AMP inner <TestProto #%d> at 0x1234>"'
op|'%'
op|'('
nl|'\n'
name|'otherProto'
op|'.'
name|'instanceId'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_innerProtocolNotInRepr
dedent|''
name|'def'
name|'test_innerProtocolNotInRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that L{AMP} objects do not output \'inner\' when no innerProtocol\n        is set.\n        """'
newline|'\n'
name|'a'
op|'='
name|'amp'
op|'.'
name|'AMP'
op|'('
op|')'
newline|'\n'
DECL|function|fakeID
name|'def'
name|'fakeID'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
name|'a'
op|':'
number|'0x4321'
op|'}'
op|'.'
name|'get'
op|'('
name|'obj'
op|','
name|'id'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'setIDFunction'
op|','
name|'setIDFunction'
op|'('
name|'fakeID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'repr'
op|'('
name|'a'
op|')'
op|','
string|'"<AMP at 0x4321>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_simpleSSLRepr
dedent|''
name|'def'
name|'test_simpleSSLRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{amp._TLSBox.__repr__} returns a string.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'repr'
op|'('
name|'amp'
op|'.'
name|'_TLSBox'
op|'('
op|')'
op|')'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_simpleSSLRepr'
op|'.'
name|'skip'
op|'='
name|'skipSSL'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_keyTooLong
name|'def'
name|'test_keyTooLong'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a key that is too long will immediately raise a synchronous\n        exception.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'x'
op|'='
string|'"H"'
op|'*'
op|'('
number|'0xff'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'tl'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'TooLong'
op|','
nl|'\n'
name|'c'
op|'.'
name|'callRemoteString'
op|','
string|'"Hello"'
op|','
nl|'\n'
op|'**'
op|'{'
name|'x'
op|':'
string|'"hi"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'tl'
op|'.'
name|'isKey'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'tl'
op|'.'
name|'isLocal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'tl'
op|'.'
name|'keyName'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'tl'
op|'.'
name|'value'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'str'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|')'
name|'in'
name|'repr'
op|'('
name|'tl'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|'"key"'
name|'in'
name|'repr'
op|'('
name|'tl'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_valueTooLong
dedent|''
name|'def'
name|'test_valueTooLong'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that attempting to send value longer than 64k will immediately\n        raise an exception.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'x'
op|'='
string|'"H"'
op|'*'
op|'('
number|'0xffff'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'tl'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'TooLong'
op|','
name|'c'
op|'.'
name|'sendHello'
op|','
name|'x'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'tl'
op|'.'
name|'isKey'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'tl'
op|'.'
name|'isLocal'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'tl'
op|'.'
name|'keyName'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessIdentical'
op|'('
name|'tl'
op|'.'
name|'value'
op|','
name|'x'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'str'
op|'('
name|'len'
op|'('
name|'x'
op|')'
op|')'
name|'in'
name|'repr'
op|'('
name|'tl'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|'"value"'
name|'in'
name|'repr'
op|'('
name|'tl'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'hello'"
name|'in'
name|'repr'
op|'('
name|'tl'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloWorldCommand
dedent|''
name|'def'
name|'test_helloWorldCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a simple command can be sent and its response received with\n        the high-level value parsing API.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloErrorHandling
dedent|''
name|'def'
name|'test_helloErrorHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if a known error type is raised and handled, it will be\n        properly relayed to the other end of the connection and translated into\n        an exception, and no error will be logged.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'fuck you'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'['
number|'0'
op|']'
op|'.'
name|'trap'
op|'('
name|'UnfriendlyGreeting'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|'.'
name|'value'
op|')'
op|','
string|'"Don\'t be a dick."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloFatalErrorHandling
dedent|''
name|'def'
name|'test_helloFatalErrorHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if a known, fatal error type is raised and handled, it will\n        be properly relayed to the other end of the connection and translated\n        into an exception, no error will be logged, and the connection will be\n        terminated.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'die'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'DeathThreat'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_helloNoErrorHandling
dedent|''
name|'def'
name|'test_helloNoErrorHandling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if an unknown error type is raised, it will be relayed to\n        the other end of the connection and translated into an exception, it\n        will be logged, and then the connection will be dropped.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'HELLO'
op|'='
name|'THING_I_DONT_UNDERSTAND'
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'ure'
op|'='
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'ure'
op|'.'
name|'trap'
op|'('
name|'amp'
op|'.'
name|'UnknownRemoteError'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'cl'
op|'='
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'cl'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
comment|'# The exception should have been logged.'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'ThingIDontUnderstandError'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lateAnswer
dedent|''
name|'def'
name|'test_lateAnswer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a command that does not get answered until after the\n        connection terminates will not cause any errors.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'WaitForever'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'s'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
comment|"# Just make sure that it doesn't error..."
nl|'\n'
name|'s'
op|'.'
name|'waiting'
op|'.'
name|'callback'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'s'
op|'.'
name|'waiting'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requiresNoAnswer
dedent|''
name|'def'
name|'test_requiresNoAnswer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a command that requires no answer is run.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'NoAnswerHello'
op|','
name|'hello'
op|'='
name|'HELLO'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'s'
op|'.'
name|'greeted'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_requiresNoAnswerFail
dedent|''
name|'def'
name|'test_requiresNoAnswerFail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that commands sent after a failed no-answer request do not complete.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'fuck you'"
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'NoAnswerHello'
op|','
name|'hello'
op|'='
name|'HELLO'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# This should be logged locally.'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'amp'
op|'.'
name|'RemoteAmpError'
op|')'
op|')'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'s'
op|'.'
name|'greeted'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noAnswerResponderBadAnswer
dedent|''
name|'def'
name|'test_noAnswerResponderBadAnswer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that responders of requiresAnswer=False commands have to return\n        a dictionary anyway.\n\n        (requiresAnswer is a hint from the _client_ - the server may be called\n        upon to answer commands in any case, if the client wants to know when\n        they complete.)\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'BadNoAnswerCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'NoAnswerHello'
op|','
name|'hello'
op|'='
string|'"hello"'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'le'
op|'='
name|'self'
op|'.'
name|'flushLoggedErrors'
op|'('
name|'amp'
op|'.'
name|'BadLocalReturn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'le'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_noAnswerResponderAskedForAnswer
dedent|''
name|'def'
name|'test_noAnswerResponderAskedForAnswer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that responders with requiresAnswer=False will actually respond\n        if the client sets requiresAnswer=True.  In other words, verify that\n        requiresAnswer is a hint honored only by the client.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'NoAnswerCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
string|'"Hello!"'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'L'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|','
op|'['
name|'dict'
op|'('
name|'hello'
op|'='
string|'"Hello!-noanswer"'
op|','
nl|'\n'
name|'Print'
op|'='
name|'None'
op|')'
op|']'
op|')'
comment|'# Optional response argument'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_ampListCommand
dedent|''
name|'def'
name|'test_ampListCommand'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test encoding of an argument that uses the AmpList encoding.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'GetList'
op|','
name|'length'
op|'='
number|'10'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'body'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
op|'['
op|'{'
string|"'x'"
op|':'
number|'1'
op|'}'
op|']'
op|'*'
number|'10'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_optionalAmpListOmitted
dedent|''
name|'def'
name|'test_optionalAmpListOmitted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that sending a command with an omitted AmpList argument that is\n        designated as optional does not raise an InvalidSignature error.\n        """'
newline|'\n'
name|'dontRejectMeCommand'
op|'='
name|'DontRejectMe'
op|'('
name|'magicWord'
op|'='
string|"u'please'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_optionalAmpListPresent
dedent|''
name|'def'
name|'test_optionalAmpListPresent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sanity check that optional AmpList arguments are processed normally.\n        """'
newline|'\n'
name|'dontRejectMeCommand'
op|'='
name|'DontRejectMe'
op|'('
name|'magicWord'
op|'='
string|"u'please'"
op|','
nl|'\n'
name|'list'
op|'='
op|'['
op|'{'
string|"'name'"
op|':'
string|"'foo'"
op|'}'
op|']'
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'DontRejectMe'
op|','
name|'magicWord'
op|'='
string|"u'please'"
op|','
nl|'\n'
name|'list'
op|'='
op|'['
op|'{'
string|"'name'"
op|':'
string|"'foo'"
op|'}'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'response'
op|'='
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'response'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'response'
op|','
string|"'foo accepted'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_failEarlyOnArgSending
dedent|''
name|'def'
name|'test_failEarlyOnArgSending'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if we pass an invalid argument list (omitting an argument), an\n        exception will be raised.\n        """'
newline|'\n'
name|'okayCommand'
op|'='
name|'Hello'
op|'('
name|'hello'
op|'='
string|'"What?"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'InvalidSignature'
op|','
name|'Hello'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_doubleProtocolSwitch
dedent|''
name|'def'
name|'test_doubleProtocolSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        As a debugging aid, a protocol system should raise a\n        L{ProtocolSwitched} exception when asked to switch a protocol that is\n        already switched.\n        """'
newline|'\n'
name|'serverDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverProto'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|'('
name|'serverDeferred'
op|')'
newline|'\n'
name|'clientDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientProto'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|'('
name|'clientDeferred'
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'lambda'
op|':'
name|'serverProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'lambda'
op|':'
name|'clientProto'
op|')'
newline|'\n'
DECL|function|switched
name|'def'
name|'switched'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitched'
op|','
name|'c'
op|'.'
name|'switchToTestProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testSucceeded'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'switchToTestProtocol'
op|'('
op|')'
op|'.'
name|'addCallback'
op|'('
name|'switched'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'testSucceeded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitch
dedent|''
name|'def'
name|'test_protocolSwitch'
op|'('
name|'self'
op|','
name|'switcher'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'spuriousTraffic'
op|'='
name|'False'
op|','
nl|'\n'
name|'spuriousError'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that it is possible to switch to another protocol mid-connection and\n        send data to it successfully.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'testSucceeded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'serverDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverProto'
op|'='
name|'switcher'
op|'('
name|'serverDeferred'
op|')'
newline|'\n'
name|'clientDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientProto'
op|'='
name|'switcher'
op|'('
name|'clientDeferred'
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'lambda'
op|':'
name|'serverProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'lambda'
op|':'
name|'clientProto'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'spuriousTraffic'
op|':'
newline|'\n'
indent|'            '
name|'wfdr'
op|'='
op|'['
op|']'
comment|'# remote'
newline|'\n'
name|'wfd'
op|'='
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'WaitForever'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'wfdr'
op|'.'
name|'append'
op|')'
newline|'\n'
dedent|''
name|'switchDeferred'
op|'='
name|'c'
op|'.'
name|'switchToTestProtocol'
op|'('
op|')'
newline|'\n'
name|'if'
name|'spuriousTraffic'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'amp'
op|'.'
name|'ProtocolSwitched'
op|','
name|'c'
op|'.'
name|'sendHello'
op|','
string|"'world'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|cbConnsLost
dedent|''
name|'def'
name|'cbConnsLost'
op|'('
op|'('
op|'('
name|'serverSuccess'
op|','
name|'serverData'
op|')'
op|','
nl|'\n'
op|'('
name|'clientSuccess'
op|','
name|'clientData'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'serverSuccess'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'clientSuccess'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'serverData'
op|')'
op|','
name|'SWITCH_CLIENT_DATA'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'clientData'
op|')'
op|','
name|'SWITCH_SERVER_DATA'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'testSucceeded'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|cbSwitch
dedent|''
name|'def'
name|'cbSwitch'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'defer'
op|'.'
name|'DeferredList'
op|'('
nl|'\n'
op|'['
name|'serverDeferred'
op|','
name|'clientDeferred'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbConnsLost'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'switchDeferred'
op|'.'
name|'addCallback'
op|'('
name|'cbSwitch'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'if'
name|'serverProto'
op|'.'
name|'maybeLater'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'serverProto'
op|'.'
name|'maybeLater'
op|'.'
name|'callback'
op|'('
name|'serverProto'
op|'.'
name|'maybeLaterProto'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'spuriousTraffic'
op|':'
newline|'\n'
comment|"# switch is done here; do this here to make sure that if we're"
nl|'\n'
comment|"# going to corrupt the connection, we do it before it's closed."
nl|'\n'
indent|'            '
name|'if'
name|'spuriousError'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'.'
name|'waiting'
op|'.'
name|'errback'
op|'('
name|'amp'
op|'.'
name|'RemoteAmpError'
op|'('
nl|'\n'
string|'"SPURIOUS"'
op|','
nl|'\n'
string|'"Here\'s some traffic in the form of an error."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'.'
name|'waiting'
op|'.'
name|'callback'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'c'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
comment|'# close it'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'self'
op|'.'
name|'testSucceeded'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitchDeferred
dedent|''
name|'def'
name|'test_protocolSwitchDeferred'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that protocol-switching even works if the value returned from\n        the command that does the switch is deferred.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'test_protocolSwitch'
op|'('
name|'switcher'
op|'='
name|'DeferredSymmetricCommandProtocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_protocolSwitchFail
dedent|''
name|'def'
name|'test_protocolSwitchFail'
op|'('
name|'self'
op|','
name|'switcher'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that if we try to switch protocols and it fails, the connection\n        stays up and we can go back to speaking AMP.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'testSucceeded'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'serverDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'serverProto'
op|'='
name|'switcher'
op|'('
name|'serverDeferred'
op|')'
newline|'\n'
name|'clientDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'clientProto'
op|'='
name|'switcher'
op|'('
name|'clientDeferred'
op|')'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'lambda'
op|':'
name|'serverProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'lambda'
op|':'
name|'clientProto'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'switchDeferred'
op|'='
name|'c'
op|'.'
name|'switchToTestProtocol'
op|'('
name|'fail'
op|'='
name|'True'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'UnknownProtocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'testSucceeded'
op|')'
newline|'\n'
comment|'# It\'s a known error, so let\'s send a "hello" on the same connection;'
nl|'\n'
comment|'# it should work.'
nl|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
string|"'world'"
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
string|"'hello'"
op|']'
op|','
string|"'world'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_trafficAfterSwitch
dedent|''
name|'def'
name|'test_trafficAfterSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that attempts to send traffic after a switch will not corrupt\n        the nested protocol.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'test_protocolSwitch'
op|'('
name|'spuriousTraffic'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_errorAfterSwitch
dedent|''
name|'def'
name|'test_errorAfterSwitch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returning an error after a protocol switch should record the underlying\n        error.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'test_protocolSwitch'
op|'('
name|'spuriousTraffic'
op|'='
name|'True'
op|','
nl|'\n'
name|'spuriousError'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_quitBoxQuits
dedent|''
name|'def'
name|'test_quitBoxQuits'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that commands with a responseType of QuitBox will in fact\n        terminate the connection.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SimpleSymmetricCommandProtocol'
op|')'
newline|'\n'
nl|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'HELLO'
op|'='
string|"'world'"
newline|'\n'
name|'GOODBYE'
op|'='
string|"'everyone'"
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
string|"'hello'"
op|']'
op|','
name|'HELLO'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'Goodbye'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'['
string|"'goodbye'"
op|']'
op|','
name|'GOODBYE'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'sendHello'
op|'('
name|'HELLO'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'L'
op|'.'
name|'pop'
op|'('
op|')'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basicLiteralEmit
dedent|''
name|'def'
name|'test_basicLiteralEmit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the command dictionaries for a callRemoteN look correct\n        after being serialized and parsed.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'s'
op|'.'
name|'ampBoxReceived'
op|'='
name|'L'
op|'.'
name|'append'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
string|"'hello test'"
op|','
name|'mixedCase'
op|'='
string|"'mixed case arg test'"
op|','
nl|'\n'
name|'dash_arg'
op|'='
string|"'x'"
op|','
name|'underscore_arg'
op|'='
string|"'y'"
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'L'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
op|'['
op|'('
string|"'_command'"
op|','
name|'Hello'
op|'.'
name|'commandName'
op|')'
op|','
nl|'\n'
op|'('
string|"'hello'"
op|','
string|"'hello test'"
op|')'
op|','
nl|'\n'
op|'('
string|"'mixedCase'"
op|','
string|"'mixed case arg test'"
op|')'
op|','
nl|'\n'
op|'('
string|"'dash-arg'"
op|','
string|"'x'"
op|')'
op|','
nl|'\n'
op|'('
string|"'underscore_arg'"
op|','
string|"'y'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'pop'
op|'('
name|'k'
op|')'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'L'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'pop'
op|'('
string|"'_ask'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
op|'-'
number|'1'
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basicStructuredEmit
dedent|''
name|'def'
name|'test_basicStructuredEmit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a call similar to basicLiteralEmit\'s is handled properly with\n        high-level quoting and passing to Python methods, and that argument\n        names are correctly handled.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
DECL|class|StructuredHello
name|'class'
name|'StructuredHello'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
DECL|member|h
indent|'            '
name|'def'
name|'h'
op|'('
name|'self'
op|','
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'L'
op|'.'
name|'append'
op|'('
op|'('
name|'a'
op|','
name|'k'
op|')'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'hello'
op|'='
string|"'aaa'"
op|')'
newline|'\n'
dedent|''
name|'Hello'
op|'.'
name|'responder'
op|'('
name|'h'
op|')'
newline|'\n'
dedent|''
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'StructuredHello'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'Hello'
op|','
name|'hello'
op|'='
string|"'hello test'"
op|','
name|'mixedCase'
op|'='
string|"'mixed case arg test'"
op|','
nl|'\n'
name|'dash_arg'
op|'='
string|"'x'"
op|','
name|'underscore_arg'
op|'='
string|"'y'"
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'L'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
op|'('
op|'('
op|')'
op|','
name|'dict'
op|'('
nl|'\n'
name|'hello'
op|'='
string|"'hello test'"
op|','
nl|'\n'
name|'mixedCase'
op|'='
string|"'mixed case arg test'"
op|','
nl|'\n'
name|'dash_arg'
op|'='
string|"'x'"
op|','
nl|'\n'
name|'underscore_arg'
op|'='
string|"'y'"
op|','
nl|'\n'
nl|'\n'
comment|'# XXX - should optional arguments just not be passed?'
nl|'\n'
comment|'# passing None seems a little odd, looking at the way it'
nl|'\n'
comment|'# turns out here... -glyph'
nl|'\n'
name|'From'
op|'='
op|'('
string|"'file'"
op|','
string|"'file'"
op|')'
op|','
nl|'\n'
name|'Print'
op|'='
name|'None'
op|','
nl|'\n'
name|'optional'
op|'='
name|'None'
op|','
nl|'\n'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'L'
op|'['
number|'1'
op|']'
op|','
name|'dict'
op|'('
name|'Print'
op|'='
name|'None'
op|','
name|'hello'
op|'='
string|"'aaa'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|PretendRemoteCertificateAuthority
dedent|''
dedent|''
name|'class'
name|'PretendRemoteCertificateAuthority'
op|':'
newline|'\n'
DECL|member|checkIsPretendRemote
indent|'    '
name|'def'
name|'checkIsPretendRemote'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|class|IOSimCert
dedent|''
dedent|''
name|'class'
name|'IOSimCert'
op|':'
newline|'\n'
DECL|variable|verifyCount
indent|'    '
name|'verifyCount'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|options
name|'def'
name|'options'
op|'('
name|'self'
op|','
op|'*'
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|iosimVerify
dedent|''
name|'def'
name|'iosimVerify'
op|'('
name|'self'
op|','
name|'otherCert'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This isn\'t a real certificate, and wouldn\'t work on a real socket, but\n        iosim specifies a different API so that we don\'t have to do any crypto\n        math to demonstrate that the right functions get called in the right\n        places.\n        """'
newline|'\n'
name|'assert'
name|'otherCert'
name|'is'
name|'self'
newline|'\n'
name|'self'
op|'.'
name|'verifyCount'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|class|OKCert
dedent|''
dedent|''
name|'class'
name|'OKCert'
op|'('
name|'IOSimCert'
op|')'
op|':'
newline|'\n'
DECL|member|options
indent|'    '
name|'def'
name|'options'
op|'('
name|'self'
op|','
name|'x'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'x'
op|'.'
name|'checkIsPretendRemote'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|class|GrumpyCert
dedent|''
dedent|''
name|'class'
name|'GrumpyCert'
op|'('
name|'IOSimCert'
op|')'
op|':'
newline|'\n'
DECL|member|iosimVerify
indent|'    '
name|'def'
name|'iosimVerify'
op|'('
name|'self'
op|','
name|'otherCert'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'verifyCount'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|class|DroppyCert
dedent|''
dedent|''
name|'class'
name|'DroppyCert'
op|'('
name|'IOSimCert'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'toDrop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'toDrop'
op|'='
name|'toDrop'
newline|'\n'
nl|'\n'
DECL|member|iosimVerify
dedent|''
name|'def'
name|'iosimVerify'
op|'('
name|'self'
op|','
name|'otherCert'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'verifyCount'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'toDrop'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|class|SecurableProto
dedent|''
dedent|''
name|'class'
name|'SecurableProto'
op|'('
name|'FactoryNotifier'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|factory
indent|'    '
name|'factory'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|verifyFactory
name|'def'
name|'verifyFactory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'PretendRemoteCertificateAuthority'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|getTLSVars
dedent|''
name|'def'
name|'getTLSVars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cert'
op|'='
name|'self'
op|'.'
name|'certFactory'
op|'('
op|')'
newline|'\n'
name|'verify'
op|'='
name|'self'
op|'.'
name|'verifyFactory'
op|'('
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'cert'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
name|'verify'
op|')'
newline|'\n'
dedent|''
name|'amp'
op|'.'
name|'StartTLS'
op|'.'
name|'responder'
op|'('
name|'getTLSVars'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TLSTest
dedent|''
name|'class'
name|'TLSTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_startingTLS
indent|'    '
name|'def'
name|'test_startingTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that starting TLS and succeeding at handshaking sends all the\n        notifications to all the right places.\n        """'
newline|'\n'
name|'cli'
op|','
name|'svr'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SecurableProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SecurableProto'
op|')'
newline|'\n'
nl|'\n'
name|'okc'
op|'='
name|'OKCert'
op|'('
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'okc'
newline|'\n'
nl|'\n'
name|'cli'
op|'.'
name|'callRemote'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'StartTLS'
op|','
name|'tls_localCertificate'
op|'='
name|'okc'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'PretendRemoteCertificateAuthority'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# let's buffer something to be delivered securely"
nl|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# once for client once for server'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'okc'
op|'.'
name|'verifyCount'
op|','
number|'2'
op|')'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'d'
op|'='
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'L'
op|'.'
name|'append'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'L'
op|'['
number|'0'
op|']'
op|','
op|'{'
string|"'pinged'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_startTooManyTimes
dedent|''
name|'def'
name|'test_startTooManyTimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the protocol will complain if we attempt to renegotiate TLS,\n        which we don\'t support.\n        """'
newline|'\n'
name|'cli'
op|','
name|'svr'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SecurableProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SecurableProto'
op|')'
newline|'\n'
nl|'\n'
name|'okc'
op|'='
name|'OKCert'
op|'('
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'okc'
newline|'\n'
nl|'\n'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'okc'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'PretendRemoteCertificateAuthority'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'cli'
op|'.'
name|'noPeerCertificate'
op|'='
name|'True'
comment|'# this is totally fake'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'OnlyOneTLS'
op|','
nl|'\n'
name|'cli'
op|'.'
name|'callRemote'
op|','
nl|'\n'
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'okc'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'PretendRemoteCertificateAuthority'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_negotiationFailed
dedent|''
name|'def'
name|'test_negotiationFailed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that starting TLS and failing on both sides at handshaking sends\n        notifications to all the right places and terminates the connection.\n        """'
newline|'\n'
nl|'\n'
name|'badCert'
op|'='
name|'GrumpyCert'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cli'
op|','
name|'svr'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SecurableProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SecurableProto'
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'badCert'
newline|'\n'
nl|'\n'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'badCert'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# once for client once for server - but both fail'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'badCert'
op|'.'
name|'verifyCount'
op|','
number|'2'
op|')'
newline|'\n'
name|'d'
op|'='
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'iosim'
op|'.'
name|'NativeOpenSSLError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_negotiationFailedByClosing
dedent|''
name|'def'
name|'test_negotiationFailedByClosing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that starting TLS and failing by way of a lost connection\n        notices that it is probably an SSL problem.\n        """'
newline|'\n'
nl|'\n'
name|'cli'
op|','
name|'svr'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SecurableProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SecurableProto'
op|')'
newline|'\n'
name|'droppyCert'
op|'='
name|'DroppyCert'
op|'('
name|'svr'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'droppyCert'
newline|'\n'
nl|'\n'
name|'secure'
op|'='
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'droppyCert'
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'droppyCert'
op|'.'
name|'verifyCount'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# it might be a good idea to move this exception somewhere more'
nl|'\n'
comment|'# reasonable.'
nl|'\n'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'d'
op|','
name|'error'
op|'.'
name|'PeerVerifyError'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|skip
dedent|''
name|'skip'
op|'='
name|'skipSSL'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|TLSNotAvailableTest
dedent|''
name|'class'
name|'TLSNotAvailableTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests what happened when ssl is not available in current installation.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disable ssl in amp.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'ssl'
op|'='
name|'amp'
op|'.'
name|'ssl'
newline|'\n'
name|'amp'
op|'.'
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Restore ssl module.\n        """'
newline|'\n'
name|'amp'
op|'.'
name|'ssl'
op|'='
name|'self'
op|'.'
name|'ssl'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callRemoteError
dedent|''
name|'def'
name|'test_callRemoteError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that callRemote raises an exception when called with a\n        L{amp.StartTLS}.\n        """'
newline|'\n'
name|'cli'
op|','
name|'svr'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
nl|'\n'
name|'ServerClass'
op|'='
name|'SecurableProto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'SecurableProto'
op|')'
newline|'\n'
nl|'\n'
name|'okc'
op|'='
name|'OKCert'
op|'('
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'okc'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'assertFailure'
op|'('
name|'cli'
op|'.'
name|'callRemote'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'StartTLS'
op|','
name|'tls_localCertificate'
op|'='
name|'okc'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'PretendRemoteCertificateAuthority'
op|'('
op|')'
op|']'
op|')'
op|','
nl|'\n'
name|'RuntimeError'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_messageReceivedError
dedent|''
name|'def'
name|'test_messageReceivedError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        When a client with SSL enabled talks to a server without SSL, it\n        should return a meaningful error.\n        """'
newline|'\n'
name|'svr'
op|'='
name|'SecurableProto'
op|'('
op|')'
newline|'\n'
name|'okc'
op|'='
name|'OKCert'
op|'('
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'okc'
newline|'\n'
name|'box'
op|'='
name|'amp'
op|'.'
name|'Box'
op|'('
op|')'
newline|'\n'
name|'box'
op|'['
string|"'_command'"
op|']'
op|'='
string|"'StartTLS'"
newline|'\n'
name|'box'
op|'['
string|"'_ask'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'boxes'
op|'='
op|'['
op|']'
newline|'\n'
name|'svr'
op|'.'
name|'sendBox'
op|'='
name|'boxes'
op|'.'
name|'append'
newline|'\n'
name|'svr'
op|'.'
name|'makeConnection'
op|'('
name|'StringTransport'
op|'('
op|')'
op|')'
newline|'\n'
name|'svr'
op|'.'
name|'ampBoxReceived'
op|'('
name|'box'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'boxes'
op|','
nl|'\n'
op|'['
op|'{'
string|"'_error_code'"
op|':'
string|"'TLS_ERROR'"
op|','
nl|'\n'
string|"'_error'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'_error_description'"
op|':'
string|"'TLS not available'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InheritedError
dedent|''
dedent|''
name|'class'
name|'InheritedError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This error is used to check inheritance.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|OtherInheritedError
dedent|''
name|'class'
name|'OtherInheritedError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a distinct error for checking inheritance.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseCommand
dedent|''
name|'class'
name|'BaseCommand'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This provides a command that will be subclassed.\n    """'
newline|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
name|'InheritedError'
op|':'
string|"'INHERITED_ERROR'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InheritedCommand
dedent|''
name|'class'
name|'InheritedCommand'
op|'('
name|'BaseCommand'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a command which subclasses another command but does not override\n    anything.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddErrorsCommand
dedent|''
name|'class'
name|'AddErrorsCommand'
op|'('
name|'BaseCommand'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a command which subclasses another command but adds errors to the\n    list.\n    """'
newline|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'other'"
op|','
name|'amp'
op|'.'
name|'Boolean'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
DECL|variable|errors
name|'errors'
op|'='
op|'{'
name|'OtherInheritedError'
op|':'
string|"'OTHER_INHERITED_ERROR'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NormalCommandProtocol
dedent|''
name|'class'
name|'NormalCommandProtocol'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a protocol which responds to L{BaseCommand}, and is used to test\n    that inheritance does not interfere with the normal handling of errors.\n    """'
newline|'\n'
DECL|member|resp
name|'def'
name|'resp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'InheritedError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'BaseCommand'
op|'.'
name|'responder'
op|'('
name|'resp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|InheritedCommandProtocol
dedent|''
name|'class'
name|'InheritedCommandProtocol'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a protocol which responds to L{InheritedCommand}, and is used to\n    test that inherited commands inherit their bases\' errors if they do not\n    respond to any of their own.\n    """'
newline|'\n'
DECL|member|resp
name|'def'
name|'resp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'InheritedError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'InheritedCommand'
op|'.'
name|'responder'
op|'('
name|'resp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddedCommandProtocol
dedent|''
name|'class'
name|'AddedCommandProtocol'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This is a protocol which responds to L{AddErrorsCommand}, and is used to\n    test that inherited commands can add their own new types of errors, but\n    still respond in the same way to their parents types of errors.\n    """'
newline|'\n'
DECL|member|resp
name|'def'
name|'resp'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'other'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'OtherInheritedError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'InheritedError'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'AddErrorsCommand'
op|'.'
name|'responder'
op|'('
name|'resp'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandInheritanceTests
dedent|''
name|'class'
name|'CommandInheritanceTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    These tests verify that commands inherit error conditions properly.\n    """'
newline|'\n'
nl|'\n'
DECL|member|errorCheck
name|'def'
name|'errorCheck'
op|'('
name|'self'
op|','
name|'err'
op|','
name|'proto'
op|','
name|'cmd'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check that the appropriate kind of error is raised when a given command\n        is sent to a given protocol.\n        """'
newline|'\n'
name|'c'
op|','
name|'s'
op|','
name|'p'
op|'='
name|'connectedServerAndClient'
op|'('
name|'ServerClass'
op|'='
name|'proto'
op|','
nl|'\n'
name|'ClientClass'
op|'='
name|'proto'
op|')'
newline|'\n'
name|'d'
op|'='
name|'c'
op|'.'
name|'callRemote'
op|'('
name|'cmd'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
name|'d2'
op|'='
name|'self'
op|'.'
name|'failUnlessFailure'
op|'('
name|'d'
op|','
name|'err'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'return'
name|'d2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_basicErrorPropagation
dedent|''
name|'def'
name|'test_basicErrorPropagation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that errors specified in a superclass are respected normally\n        even if it has subclasses.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'errorCheck'
op|'('
nl|'\n'
name|'InheritedError'
op|','
name|'NormalCommandProtocol'
op|','
name|'BaseCommand'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_inheritedErrorPropagation
dedent|''
name|'def'
name|'test_inheritedErrorPropagation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that errors specified in a superclass command are propagated to\n        its subclasses.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'errorCheck'
op|'('
nl|'\n'
name|'InheritedError'
op|','
name|'InheritedCommandProtocol'
op|','
name|'InheritedCommand'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_inheritedErrorAddition
dedent|''
name|'def'
name|'test_inheritedErrorAddition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that new errors specified in a subclass of an existing command\n        are honored even if the superclass defines some errors.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'errorCheck'
op|'('
nl|'\n'
name|'OtherInheritedError'
op|','
name|'AddedCommandProtocol'
op|','
name|'AddErrorsCommand'
op|','
name|'other'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_additionWithOriginalError
dedent|''
name|'def'
name|'test_additionWithOriginalError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that errors specified in a command\'s superclass are respected\n        even if that command defines new errors itself.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'errorCheck'
op|'('
nl|'\n'
name|'InheritedError'
op|','
name|'AddedCommandProtocol'
op|','
name|'AddErrorsCommand'
op|','
name|'other'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_loseAndPass
dedent|''
dedent|''
name|'def'
name|'_loseAndPass'
op|'('
name|'err'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
comment|'# be specific, pass on the error to the client.'
nl|'\n'
indent|'    '
name|'err'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ConnectionLost'
op|','
name|'error'
op|'.'
name|'ConnectionDone'
op|')'
newline|'\n'
name|'del'
name|'proto'
op|'.'
name|'connectionLost'
newline|'\n'
name|'proto'
op|'.'
name|'connectionLost'
op|'('
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LiveFireBase
dedent|''
name|'class'
name|'LiveFireBase'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Utility for connected reactor-using tests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an amp server and connect a client to it.\n        """'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'='
name|'protocol'
op|'.'
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'serverProto'
newline|'\n'
name|'self'
op|'.'
name|'clientFactory'
op|'='
name|'protocol'
op|'.'
name|'ClientFactory'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'clientProto'
newline|'\n'
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'onMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'onMade'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'serverPort'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'serverFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'serverPort'
op|'.'
name|'stopListening'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clientConn'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
nl|'\n'
string|"'127.0.0.1'"
op|','
name|'self'
op|'.'
name|'serverPort'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|','
nl|'\n'
name|'self'
op|'.'
name|'clientFactory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'clientConn'
op|'.'
name|'disconnect'
op|')'
newline|'\n'
DECL|function|getProtos
name|'def'
name|'getProtos'
op|'('
name|'rlst'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cli'
op|'='
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'theProto'
newline|'\n'
name|'self'
op|'.'
name|'svr'
op|'='
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'theProto'
newline|'\n'
dedent|''
name|'dl'
op|'='
name|'defer'
op|'.'
name|'DeferredList'
op|'('
op|'['
name|'self'
op|'.'
name|'clientFactory'
op|'.'
name|'onMade'
op|','
nl|'\n'
name|'self'
op|'.'
name|'serverFactory'
op|'.'
name|'onMade'
op|']'
op|')'
newline|'\n'
name|'return'
name|'dl'
op|'.'
name|'addCallback'
op|'('
name|'getProtos'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cleanup client and server connections, and check the error got at\n        C{connectionLost}.\n        """'
newline|'\n'
name|'L'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'conn'
name|'in'
name|'self'
op|'.'
name|'cli'
op|','
name|'self'
op|'.'
name|'svr'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'conn'
op|'.'
name|'transport'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|"# depend on amp's function connection-dropping behavior"
nl|'\n'
indent|'                '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
op|'.'
name|'addErrback'
op|'('
name|'_loseAndPass'
op|','
name|'conn'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'connectionLost'
op|'='
name|'d'
op|'.'
name|'errback'
newline|'\n'
name|'conn'
op|'.'
name|'transport'
op|'.'
name|'loseConnection'
op|'('
op|')'
newline|'\n'
name|'L'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defer'
op|'.'
name|'gatherResults'
op|'('
name|'L'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'lambda'
name|'first'
op|':'
name|'first'
op|'.'
name|'value'
op|'.'
name|'subFailure'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|show
dedent|''
dedent|''
name|'def'
name|'show'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'sys'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
name|'x'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|tempSelfSigned
dedent|''
name|'def'
name|'tempSelfSigned'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
nl|'\n'
name|'sharedDN'
op|'='
name|'ssl'
op|'.'
name|'DN'
op|'('
name|'CN'
op|'='
string|"'shared'"
op|')'
newline|'\n'
name|'key'
op|'='
name|'ssl'
op|'.'
name|'KeyPair'
op|'.'
name|'generate'
op|'('
op|')'
newline|'\n'
name|'cr'
op|'='
name|'key'
op|'.'
name|'certificateRequest'
op|'('
name|'sharedDN'
op|')'
newline|'\n'
name|'sscrd'
op|'='
name|'key'
op|'.'
name|'signCertificateRequest'
op|'('
nl|'\n'
name|'sharedDN'
op|','
name|'cr'
op|','
name|'lambda'
name|'dn'
op|':'
name|'True'
op|','
number|'1234567'
op|')'
newline|'\n'
name|'cert'
op|'='
name|'key'
op|'.'
name|'newCertificate'
op|'('
name|'sscrd'
op|')'
newline|'\n'
name|'return'
name|'cert'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'ssl'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
DECL|variable|tempcert
indent|'    '
name|'tempcert'
op|'='
name|'tempSelfSigned'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LiveFireTLSTestCase
dedent|''
name|'class'
name|'LiveFireTLSTestCase'
op|'('
name|'LiveFireBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|clientProto
indent|'    '
name|'clientProto'
op|'='
name|'SecurableProto'
newline|'\n'
DECL|variable|serverProto
name|'serverProto'
op|'='
name|'SecurableProto'
newline|'\n'
DECL|member|test_liveFireCustomTLS
name|'def'
name|'test_liveFireCustomTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Using real, live TLS, actually negotiate a connection.\n\n        This also looks at the \'peerCertificate\' attribute\'s correctness, since\n        that\'s actually loaded using OpenSSL calls, but the main purpose is to\n        make sure that we didn\'t miss anything obvious in iosim about TLS\n        negotiations.\n        """'
newline|'\n'
nl|'\n'
name|'cert'
op|'='
name|'tempcert'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'svr'
op|'.'
name|'verifyFactory'
op|'='
name|'lambda'
op|':'
op|'['
name|'cert'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'svr'
op|'.'
name|'certFactory'
op|'='
name|'lambda'
op|':'
name|'cert'
newline|'\n'
comment|'# only needed on the server, we specify the client below.'
nl|'\n'
nl|'\n'
DECL|function|secured
name|'def'
name|'secured'
op|'('
name|'rslt'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'x'
op|'='
name|'cert'
op|'.'
name|'digest'
op|'('
op|')'
newline|'\n'
DECL|function|pinged
name|'def'
name|'pinged'
op|'('
name|'rslt2'
op|')'
op|':'
newline|'\n'
comment|"# Interesting.  OpenSSL won't even _tell_ us about the peer"
nl|'\n'
comment|'# cert until we negotiate.  we should be able to do this in'
nl|'\n'
comment|"# 'secured' instead, but it looks like we can't.  I think this"
nl|'\n'
comment|'# is a bug somewhere far deeper than here.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'x'
op|','
name|'self'
op|'.'
name|'cli'
op|'.'
name|'hostCertificate'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'x'
op|','
name|'self'
op|'.'
name|'cli'
op|'.'
name|'peerCertificate'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'x'
op|','
name|'self'
op|'.'
name|'svr'
op|'.'
name|'hostCertificate'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessEqual'
op|'('
name|'x'
op|','
name|'self'
op|'.'
name|'svr'
op|'.'
name|'peerCertificate'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'pinged'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_localCertificate'
op|'='
name|'cert'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'cert'
op|']'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'secured'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|skip
dedent|''
name|'skip'
op|'='
name|'skipSSL'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|SlightlySmartTLS
dedent|''
name|'class'
name|'SlightlySmartTLS'
op|'('
name|'SimpleSymmetricCommandProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Specific implementation of server side protocol with different\n    management of TLS.\n    """'
newline|'\n'
DECL|member|getTLSVars
name|'def'
name|'getTLSVars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @return: the global C{tempcert} certificate as local certificate.\n        """'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'tls_localCertificate'
op|'='
name|'tempcert'
op|')'
newline|'\n'
dedent|''
name|'amp'
op|'.'
name|'StartTLS'
op|'.'
name|'responder'
op|'('
name|'getTLSVars'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PlainVanillaLiveFire
dedent|''
name|'class'
name|'PlainVanillaLiveFire'
op|'('
name|'LiveFireBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|clientProto
indent|'    '
name|'clientProto'
op|'='
name|'SimpleSymmetricCommandProtocol'
newline|'\n'
DECL|variable|serverProto
name|'serverProto'
op|'='
name|'SimpleSymmetricCommandProtocol'
newline|'\n'
nl|'\n'
DECL|member|test_liveFireDefaultTLS
name|'def'
name|'test_liveFireDefaultTLS'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that out of the box, we can start TLS to at least encrypt the\n        connection, even if we don\'t have any certificates to use.\n        """'
newline|'\n'
DECL|function|secured
name|'def'
name|'secured'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'secured'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|skip
dedent|''
name|'skip'
op|'='
name|'skipSSL'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WithServerTLSVerification
dedent|''
name|'class'
name|'WithServerTLSVerification'
op|'('
name|'LiveFireBase'
op|','
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|clientProto
indent|'    '
name|'clientProto'
op|'='
name|'SimpleSymmetricCommandProtocol'
newline|'\n'
DECL|variable|serverProto
name|'serverProto'
op|'='
name|'SlightlySmartTLS'
newline|'\n'
nl|'\n'
DECL|member|test_anonymousVerifyingClient
name|'def'
name|'test_anonymousVerifyingClient'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that anonymous clients can verify server certificates.\n        """'
newline|'\n'
DECL|function|secured
name|'def'
name|'secured'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'SecuredPing'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'cli'
op|'.'
name|'callRemote'
op|'('
name|'amp'
op|'.'
name|'StartTLS'
op|','
nl|'\n'
name|'tls_verifyAuthorities'
op|'='
op|'['
name|'tempcert'
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'secured'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|skip
dedent|''
name|'skip'
op|'='
name|'skipSSL'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolIncludingArgument
dedent|''
name|'class'
name|'ProtocolIncludingArgument'
op|'('
name|'amp'
op|'.'
name|'Argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{amp.Argument} which encodes its parser and serializer\n    arguments *including the protocol* into its parsed and serialized\n    forms.\n    """'
newline|'\n'
nl|'\n'
DECL|member|fromStringProto
name|'def'
name|'fromStringProto'
op|'('
name|'self'
op|','
name|'string'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t decode anything; just return all possible information.\n\n        @return: A two-tuple of the input string and the protocol.\n        """'
newline|'\n'
name|'return'
op|'('
name|'string'
op|','
name|'protocol'
op|')'
newline|'\n'
nl|'\n'
DECL|member|toStringProto
dedent|''
name|'def'
name|'toStringProto'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Encode identifying information about L{object} and protocol\n        into a string for later verification.\n\n        @type obj: L{object}\n        @type protocol: L{amp.AMP}\n        """'
newline|'\n'
name|'return'
string|'"%s:%s"'
op|'%'
op|'('
name|'id'
op|'('
name|'obj'
op|')'
op|','
name|'id'
op|'('
name|'protocol'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProtocolIncludingCommand
dedent|''
dedent|''
name|'class'
name|'ProtocolIncludingCommand'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A command that has argument and response schemas which use\n    L{ProtocolIncludingArgument}.\n    """'
newline|'\n'
DECL|variable|arguments
name|'arguments'
op|'='
op|'['
op|'('
string|"'weird'"
op|','
name|'ProtocolIncludingArgument'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
DECL|variable|response
name|'response'
op|'='
op|'['
op|'('
string|"'weird'"
op|','
name|'ProtocolIncludingArgument'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MagicSchemaCommand
dedent|''
name|'class'
name|'MagicSchemaCommand'
op|'('
name|'amp'
op|'.'
name|'Command'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A command which overrides L{parseResponse}, L{parseArguments}, and\n    L{makeResponse}.\n    """'
newline|'\n'
DECL|member|parseResponse
name|'def'
name|'parseResponse'
op|'('
name|'self'
op|','
name|'strings'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t do any parsing, just jam the input strings and protocol\n        onto the C{protocol.parseResponseArguments} attribute as a\n        two-tuple. Return the original strings.\n        """'
newline|'\n'
name|'protocol'
op|'.'
name|'parseResponseArguments'
op|'='
op|'('
name|'strings'
op|','
name|'protocol'
op|')'
newline|'\n'
name|'return'
name|'strings'
newline|'\n'
DECL|variable|parseResponse
dedent|''
name|'parseResponse'
op|'='
name|'classmethod'
op|'('
name|'parseResponse'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|parseArguments
name|'def'
name|'parseArguments'
op|'('
name|'cls'
op|','
name|'strings'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t do any parsing, just jam the input strings and protocol\n        onto the C{protocol.parseArgumentsArguments} attribute as a\n        two-tuple. Return the original strings.\n        """'
newline|'\n'
name|'protocol'
op|'.'
name|'parseArgumentsArguments'
op|'='
op|'('
name|'strings'
op|','
name|'protocol'
op|')'
newline|'\n'
name|'return'
name|'strings'
newline|'\n'
DECL|variable|parseArguments
dedent|''
name|'parseArguments'
op|'='
name|'classmethod'
op|'('
name|'parseArguments'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|makeArguments
name|'def'
name|'makeArguments'
op|'('
name|'cls'
op|','
name|'objects'
op|','
name|'protocol'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Don\'t do any serializing, just jam the input strings and protocol\n        onto the C{protocol.makeArgumentsArguments} attribute as a\n        two-tuple. Return the original strings.\n        """'
newline|'\n'
name|'protocol'
op|'.'
name|'makeArgumentsArguments'
op|'='
op|'('
name|'objects'
op|','
name|'protocol'
op|')'
newline|'\n'
name|'return'
name|'objects'
newline|'\n'
DECL|variable|makeArguments
dedent|''
name|'makeArguments'
op|'='
name|'classmethod'
op|'('
name|'makeArguments'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoNetworkProtocol
dedent|''
name|'class'
name|'NoNetworkProtocol'
op|'('
name|'amp'
op|'.'
name|'AMP'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    An L{amp.AMP} subclass which overrides private methods to avoid\n    testing the network. It also provides a responder for\n    L{MagicSchemaCommand} that does nothing, so that tests can test\n    aspects of the interaction of L{amp.Command}s and L{amp.AMP}.\n\n    @ivar parseArgumentsArguments: Arguments that have been passed to any\n    L{MagicSchemaCommand}, if L{MagicSchemaCommand} has been handled by\n    this protocol.\n\n    @ivar parseResponseArguments: Responses that have been returned from a\n    L{MagicSchemaCommand}, if L{MagicSchemaCommand} has been handled by\n    this protocol.\n\n    @ivar makeArgumentsArguments: Arguments that have been serialized by any\n    L{MagicSchemaCommand}, if L{MagicSchemaCommand} has been handled by\n    this protocol.\n    """'
newline|'\n'
DECL|member|_sendBoxCommand
name|'def'
name|'_sendBoxCommand'
op|'('
name|'self'
op|','
name|'commandName'
op|','
name|'strings'
op|','
name|'requiresAnswer'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a Deferred which fires with the original strings.\n        """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
name|'strings'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'MagicSchemaCommand'
op|'.'
name|'responder'
op|'('
name|'lambda'
name|'s'
op|','
name|'weird'
op|':'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyBox
dedent|''
name|'class'
name|'MyBox'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A unique dict subclass.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'ProtocolIncludingCommandWithDifferentCommandType'
op|'('
nl|'\n'
DECL|class|ProtocolIncludingCommandWithDifferentCommandType
name|'ProtocolIncludingCommand'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A L{ProtocolIncludingCommand} subclass whose commandType is L{MyBox}\n    """'
newline|'\n'
DECL|variable|commandType
name|'commandType'
op|'='
name|'MyBox'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandTestCase
dedent|''
name|'class'
name|'CommandTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{amp.Argument} and L{amp.Command}.\n    """'
newline|'\n'
DECL|member|test_argumentInterface
name|'def'
name|'test_argumentInterface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Argument} instances provide L{amp.IArgumentType}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'verifyObject'
op|'('
name|'amp'
op|'.'
name|'IArgumentType'
op|','
name|'amp'
op|'.'
name|'Argument'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseResponse
dedent|''
name|'def'
name|'test_parseResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There should be a class method of Command which accepts a\n        mapping of argument names to serialized forms and returns a\n        similar mapping whose values have been parsed via the\n        Command\'s response schema.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
string|"'whatever'"
newline|'\n'
name|'strings'
op|'='
op|'{'
string|"'weird'"
op|':'
name|'result'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'ProtocolIncludingCommand'
op|'.'
name|'parseResponse'
op|'('
name|'strings'
op|','
name|'protocol'
op|')'
op|','
nl|'\n'
op|'{'
string|"'weird'"
op|':'
op|'('
name|'result'
op|','
name|'protocol'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callRemoteCallsParseResponse
dedent|''
name|'def'
name|'test_callRemoteCallsParseResponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Making a remote call on a L{amp.Command} subclass which\n        overrides the C{parseResponse} method should call that\n        C{parseResponse} method to get the response.\n        """'
newline|'\n'
name|'client'
op|'='
name|'NoNetworkProtocol'
op|'('
op|')'
newline|'\n'
name|'thingy'
op|'='
string|'"weeoo"'
newline|'\n'
name|'response'
op|'='
name|'client'
op|'.'
name|'callRemote'
op|'('
name|'MagicSchemaCommand'
op|','
name|'weird'
op|'='
name|'thingy'
op|')'
newline|'\n'
DECL|function|gotResponse
name|'def'
name|'gotResponse'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'client'
op|'.'
name|'parseResponseArguments'
op|','
nl|'\n'
op|'('
op|'{'
string|'"weird"'
op|':'
name|'thingy'
op|'}'
op|','
name|'client'
op|')'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'addCallback'
op|'('
name|'gotResponse'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_parseArguments
dedent|''
name|'def'
name|'test_parseArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There should be a class method of L{amp.Command} which accepts\n        a mapping of argument names to serialized forms and returns a\n        similar mapping whose values have been parsed via the\n        command\'s argument schema.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
string|"'whatever'"
newline|'\n'
name|'strings'
op|'='
op|'{'
string|"'weird'"
op|':'
name|'result'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'ProtocolIncludingCommand'
op|'.'
name|'parseArguments'
op|'('
name|'strings'
op|','
name|'protocol'
op|')'
op|','
nl|'\n'
op|'{'
string|"'weird'"
op|':'
op|'('
name|'result'
op|','
name|'protocol'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_responderCallsParseArguments
dedent|''
name|'def'
name|'test_responderCallsParseArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Making a remote call on a L{amp.Command} subclass which\n        overrides the C{parseArguments} method should call that\n        C{parseArguments} method to get the arguments.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'NoNetworkProtocol'
op|'('
op|')'
newline|'\n'
name|'responder'
op|'='
name|'protocol'
op|'.'
name|'locateResponder'
op|'('
name|'MagicSchemaCommand'
op|'.'
name|'commandName'
op|')'
newline|'\n'
name|'argument'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'response'
op|'='
name|'responder'
op|'('
name|'dict'
op|'('
name|'weird'
op|'='
name|'argument'
op|')'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'addCallback'
op|'('
nl|'\n'
name|'lambda'
name|'ign'
op|':'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'protocol'
op|'.'
name|'parseArgumentsArguments'
op|','
nl|'\n'
op|'('
op|'{'
string|'"weird"'
op|':'
name|'argument'
op|'}'
op|','
name|'protocol'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeArguments
dedent|''
name|'def'
name|'test_makeArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        There should be a class method of L{amp.Command} which accepts\n        a mapping of argument names to objects and returns a similar\n        mapping whose values have been serialized via the command\'s\n        argument schema.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'argument'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'objects'
op|'='
op|'{'
string|"'weird'"
op|':'
name|'argument'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'ProtocolIncludingCommand'
op|'.'
name|'makeArguments'
op|'('
name|'objects'
op|','
name|'protocol'
op|')'
op|','
nl|'\n'
op|'{'
string|"'weird'"
op|':'
string|'"%d:%d"'
op|'%'
op|'('
name|'id'
op|'('
name|'argument'
op|')'
op|','
name|'id'
op|'('
name|'protocol'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_makeArgumentsUsesCommandType
dedent|''
name|'def'
name|'test_makeArgumentsUsesCommandType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{amp.Command.makeArguments}\'s return type should be the type\n        of the result of L{amp.Command.commandType}.\n        """'
newline|'\n'
name|'protocol'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'objects'
op|'='
op|'{'
string|'"weird"'
op|':'
string|'"whatever"'
op|'}'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'ProtocolIncludingCommandWithDifferentCommandType'
op|'.'
name|'makeArguments'
op|'('
nl|'\n'
name|'objects'
op|','
name|'protocol'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIdentical'
op|'('
name|'type'
op|'('
name|'result'
op|')'
op|','
name|'MyBox'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_callRemoteCallsMakeArguments
dedent|''
name|'def'
name|'test_callRemoteCallsMakeArguments'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Making a remote call on a L{amp.Command} subclass which\n        overrides the C{makeArguments} method should call that\n        C{makeArguments} method to get the response.\n        """'
newline|'\n'
name|'client'
op|'='
name|'NoNetworkProtocol'
op|'('
op|')'
newline|'\n'
name|'argument'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
name|'response'
op|'='
name|'client'
op|'.'
name|'callRemote'
op|'('
name|'MagicSchemaCommand'
op|','
name|'weird'
op|'='
name|'argument'
op|')'
newline|'\n'
DECL|function|gotResponse
name|'def'
name|'gotResponse'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'client'
op|'.'
name|'makeArgumentsArguments'
op|','
nl|'\n'
op|'('
op|'{'
string|'"weird"'
op|':'
name|'argument'
op|'}'
op|','
name|'client'
op|')'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'.'
name|'addCallback'
op|'('
name|'gotResponse'
op|')'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_extraArgumentsDisallowed
dedent|''
name|'def'
name|'test_extraArgumentsDisallowed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{Command.makeArguments} raises L{amp.InvalidSignature} if the objects\n        dictionary passed to it includes a key which does not correspond to the\n        Python identifier for a defined argument.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'InvalidSignature'
op|','
nl|'\n'
name|'Hello'
op|'.'
name|'makeArguments'
op|','
nl|'\n'
name|'dict'
op|'('
name|'hello'
op|'='
string|'"hello"'
op|','
name|'bogusArgument'
op|'='
name|'object'
op|'('
op|')'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_wireSpellingDisallowed
dedent|''
name|'def'
name|'test_wireSpellingDisallowed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        If a command argument conflicts with a Python keyword, the\n        untransformed argument name is not allowed as a key in the dictionary\n        passed to L{Command.makeArguments}.  If it is supplied,\n        L{amp.InvalidSignature} is raised.\n\n        This may be a pointless implementation restriction which may be lifted.\n        The current behavior is tested to verify that such arguments are not\n        silently dropped on the floor (the previous behavior).\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'amp'
op|'.'
name|'InvalidSignature'
op|','
nl|'\n'
name|'Hello'
op|'.'
name|'makeArguments'
op|','
nl|'\n'
name|'dict'
op|'('
name|'hello'
op|'='
string|'"required"'
op|','
op|'**'
op|'{'
string|'"print"'
op|':'
string|'"print value"'
op|'}'
op|')'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfTestsMixin
dedent|''
dedent|''
name|'class'
name|'ListOfTestsMixin'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for testing L{ListOf}, a parameterized zero-or-more argument\n    type.\n\n    @ivar elementType: Subclasses should set this to an L{Argument}\n        instance.  The tests will make a L{ListOf} using this.\n\n    @ivar strings: Subclasses should set this to a dictionary mapping some\n        number of keys to the correct serialized form for some example\n        values.  These should agree with what L{elementType}\n        produces/accepts.\n\n    @ivar objects: Subclasses should set this to a dictionary with the same\n        keys as C{strings} and with values which are the lists which should\n        serialize to the values in the C{strings} dictionary.\n    """'
newline|'\n'
DECL|member|test_toBox
name|'def'
name|'test_toBox'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ListOf.toBox} extracts the list of objects from the C{objects}\n        dictionary passed to it, using the C{name} key also passed to it,\n        serializes each of the elements in that list using the L{Argument}\n        instance previously passed to its initializer, combines the serialized\n        results, and inserts the result into the C{strings} dictionary using\n        the same C{name} key.\n        """'
newline|'\n'
name|'stringList'
op|'='
name|'amp'
op|'.'
name|'ListOf'
op|'('
name|'self'
op|'.'
name|'elementType'
op|')'
newline|'\n'
name|'strings'
op|'='
name|'amp'
op|'.'
name|'AmpBox'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'stringList'
op|'.'
name|'toBox'
op|'('
name|'key'
op|','
name|'strings'
op|','
name|'self'
op|'.'
name|'objects'
op|'.'
name|'copy'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'strings'
op|','
name|'self'
op|'.'
name|'strings'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_fromBox
dedent|''
name|'def'
name|'test_fromBox'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        L{ListOf.fromBox} reverses the operation performed by L{ListOf.toBox}.\n        """'
newline|'\n'
name|'stringList'
op|'='
name|'amp'
op|'.'
name|'ListOf'
op|'('
name|'self'
op|'.'
name|'elementType'
op|')'
newline|'\n'
name|'objects'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'strings'
op|':'
newline|'\n'
indent|'            '
name|'stringList'
op|'.'
name|'fromBox'
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'strings'
op|'.'
name|'copy'
op|'('
op|')'
op|','
name|'objects'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'objects'
op|','
name|'self'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfStringsTests
dedent|''
dedent|''
name|'class'
name|'ListOfStringsTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ListOfTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ListOf} combined with L{String}.\n    """'
newline|'\n'
DECL|variable|elementType
name|'elementType'
op|'='
name|'amp'
op|'.'
name|'String'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|strings
name|'strings'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
string|'""'
op|','
nl|'\n'
string|'"single"'
op|':'
string|'"\\x00\\x03foo"'
op|','
nl|'\n'
string|'"multiple"'
op|':'
string|'"\\x00\\x03bar\\x00\\x03baz\\x00\\x04quux"'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|objects
name|'objects'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"single"'
op|':'
op|'['
string|'"foo"'
op|']'
op|','
nl|'\n'
string|'"multiple"'
op|':'
op|'['
string|'"bar"'
op|','
string|'"baz"'
op|','
string|'"quux"'
op|']'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfIntegersTests
dedent|''
name|'class'
name|'ListOfIntegersTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ListOfTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ListOf} combined with L{Integer}.\n    """'
newline|'\n'
DECL|variable|elementType
name|'elementType'
op|'='
name|'amp'
op|'.'
name|'Integer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|strings
name|'strings'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
string|'""'
op|','
nl|'\n'
string|'"single"'
op|':'
string|'"\\x00\\x0210"'
op|','
nl|'\n'
string|'"multiple"'
op|':'
string|'"\\x00\\x011\\x00\\x0220\\x00\\x03500"'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|objects
name|'objects'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"single"'
op|':'
op|'['
number|'10'
op|']'
op|','
nl|'\n'
string|'"multiple"'
op|':'
op|'['
number|'1'
op|','
number|'20'
op|','
number|'500'
op|']'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListOfUnicodeTests
dedent|''
name|'class'
name|'ListOfUnicodeTests'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|','
name|'ListOfTestsMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Tests for L{ListOf} combined with L{Unicode}.\n    """'
newline|'\n'
DECL|variable|elementType
name|'elementType'
op|'='
name|'amp'
op|'.'
name|'Unicode'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|strings
name|'strings'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
string|'""'
op|','
nl|'\n'
string|'"single"'
op|':'
string|'"\\x00\\x03foo"'
op|','
nl|'\n'
string|'"multiple"'
op|':'
string|'"\\x00\\x03\\xe2\\x98\\x83\\x00\\x05Hello\\x00\\x05world"'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|objects
name|'objects'
op|'='
op|'{'
nl|'\n'
string|'"empty"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"single"'
op|':'
op|'['
string|'u"foo"'
op|']'
op|','
nl|'\n'
string|'"multiple"'
op|':'
op|'['
string|'u"\\N{SNOWMAN}"'
op|','
string|'u"Hello"'
op|','
string|'u"world"'
op|']'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'interfaces'
op|'.'
name|'IReactorSSL'
op|'.'
name|'providedBy'
op|'('
name|'reactor'
op|')'
op|':'
newline|'\n'
DECL|variable|skipMsg
indent|'    '
name|'skipMsg'
op|'='
string|"'This test case requires SSL support in the reactor'"
newline|'\n'
name|'TLSTest'
op|'.'
name|'skip'
op|'='
name|'skipMsg'
newline|'\n'
name|'LiveFireTLSTestCase'
op|'.'
name|'skip'
op|'='
name|'skipMsg'
newline|'\n'
name|'PlainVanillaLiveFire'
op|'.'
name|'skip'
op|'='
name|'skipMsg'
newline|'\n'
name|'WithServerTLSVerification'
op|'.'
name|'skip'
op|'='
name|'skipMsg'
newline|'\n'
dedent|''
endmarker|''
end_unit

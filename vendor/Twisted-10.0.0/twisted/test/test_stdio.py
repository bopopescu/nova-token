begin_unit
comment|'# Copyright (c) 2006-2007 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
op|','
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'filepath'
op|','
name|'log'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'runtime'
name|'import'
name|'platform'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'error'
op|','
name|'defer'
op|','
name|'protocol'
op|','
name|'reactor'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# A short string which is intended to appear here and nowhere else,'
nl|'\n'
comment|'# particularly not in any random garbage output CPython unavoidable'
nl|'\n'
comment|'# generates (such as in warning text and so forth).  This is searched'
nl|'\n'
comment|'# for in the output from stdio_test_lastwrite.py and if it is found at'
nl|'\n'
comment|'# the end, the functionality works.'
nl|'\n'
DECL|variable|UNIQUE_LAST_WRITE_STRING
name|'UNIQUE_LAST_WRITE_STRING'
op|'='
string|"'xyz123abc Twisted is great!'"
newline|'\n'
nl|'\n'
DECL|variable|skipWindowsNopywin32
name|'skipWindowsNopywin32'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'platform'
op|'.'
name|'isWindows'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32process'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|skipWindowsNopywin32
indent|'        '
name|'skipWindowsNopywin32'
op|'='
op|'('
string|'"On windows, spawnProcess is not available "'
nl|'\n'
string|'"in the absence of win32process."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StandardIOTestProcessProtocol
dedent|''
dedent|''
name|'class'
name|'StandardIOTestProcessProtocol'
op|'('
name|'protocol'
op|'.'
name|'ProcessProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test helper for collecting output from a child process and notifying\n    something when it exits.\n\n    @ivar onConnection: A L{defer.Deferred} which will be called back with\n    C{None} when the connection to the child process is established.\n\n    @ivar onCompletion: A L{defer.Deferred} which will be errbacked with the\n    failure associated with the child process exiting when it exits.\n\n    @ivar onDataReceived: A L{defer.Deferred} which will be called back with\n    this instance whenever C{childDataReceived} is called, or C{None} to\n    suppress these callbacks.\n\n    @ivar data: A C{dict} mapping file descriptors to strings containing all\n    bytes received from the child process on each file descriptor.\n    """'
newline|'\n'
DECL|variable|onDataReceived
name|'onDataReceived'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onConnection'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'onCompletion'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onConnection'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|childDataReceived
dedent|''
name|'def'
name|'childDataReceived'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Record all bytes received from the child process in the C{data}\n        dictionary.  Fire C{onDataReceived} if it is not C{None}.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'['
name|'name'
op|']'
op|'='
name|'self'
op|'.'
name|'data'
op|'.'
name|'get'
op|'('
name|'name'
op|','
string|"''"
op|')'
op|'+'
name|'bytes'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'onDataReceived'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'onDataReceived'
op|'='
name|'self'
op|'.'
name|'onDataReceived'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|processEnded
dedent|''
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'onCompletion'
op|'.'
name|'callback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|StandardInputOutputTestCase
dedent|''
dedent|''
name|'class'
name|'StandardInputOutputTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_spawnProcess
indent|'    '
name|'def'
name|'_spawnProcess'
op|'('
name|'self'
op|','
name|'proto'
op|','
name|'sibling'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Launch a child Python process and communicate with it using the\n        given ProcessProtocol.\n\n        @param proto: A L{ProcessProtocol} instance which will be connected\n        to the child process.\n\n        @param sibling: The basename of a file containing the Python program\n        to run in the child process.\n\n        @param *args: strings which will be passed to the child process on\n        the command line as C{argv[2:]}.\n\n        @param **kw: additional arguments to pass to L{reactor.spawnProcess}.\n\n        @return: The L{IProcessTransport} provider for the spawned process.\n        """'
newline|'\n'
name|'import'
name|'twisted'
newline|'\n'
name|'subenv'
op|'='
name|'dict'
op|'('
name|'os'
op|'.'
name|'environ'
op|')'
newline|'\n'
name|'subenv'
op|'['
string|"'PYTHONPATH'"
op|']'
op|'='
name|'os'
op|'.'
name|'pathsep'
op|'.'
name|'join'
op|'('
nl|'\n'
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'twisted'
op|'.'
name|'__file__'
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'subenv'
op|'.'
name|'get'
op|'('
string|"'PYTHONPATH'"
op|','
string|"''"
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'args'
op|'='
op|'['
name|'sys'
op|'.'
name|'executable'
op|','
nl|'\n'
name|'filepath'
op|'.'
name|'FilePath'
op|'('
name|'__file__'
op|')'
op|'.'
name|'sibling'
op|'('
name|'sibling'
op|')'
op|'.'
name|'path'
op|','
nl|'\n'
name|'reactor'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|']'
op|'+'
name|'list'
op|'('
name|'args'
op|')'
newline|'\n'
name|'return'
name|'reactor'
op|'.'
name|'spawnProcess'
op|'('
nl|'\n'
name|'proto'
op|','
nl|'\n'
name|'sys'
op|'.'
name|'executable'
op|','
nl|'\n'
name|'args'
op|','
nl|'\n'
name|'env'
op|'='
name|'subenv'
op|','
nl|'\n'
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_requireFailure
dedent|''
name|'def'
name|'_requireFailure'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
DECL|function|cb
indent|'        '
name|'def'
name|'cb'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Process terminated with non-Failure: %r"'
op|'%'
op|'('
name|'result'
op|','
op|')'
op|')'
newline|'\n'
DECL|function|eb
dedent|''
name|'def'
name|'eb'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'callback'
op|'('
name|'err'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cb'
op|','
name|'eb'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_loseConnection
dedent|''
name|'def'
name|'test_loseConnection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a protocol connected to L{StandardIO} can disconnect\n        itself using C{transport.loseConnection}.\n        """'
newline|'\n'
name|'errorLogFile'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Child process logging to "'
op|'+'
name|'errorLogFile'
op|')'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_loseconn.py'"
op|','
name|'errorLogFile'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
comment|"# Copy the child's log to ours so it's more visible."
nl|'\n'
indent|'            '
name|'for'
name|'line'
name|'in'
name|'file'
op|'('
name|'errorLogFile'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'log'
op|'.'
name|'msg'
op|'('
string|'"Child logged: "'
op|'+'
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'failIfIn'
op|'('
number|'1'
op|','
name|'p'
op|'.'
name|'data'
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_loseConnection'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_lastWriteReceived
name|'def'
name|'test_lastWriteReceived'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that a write made directly to stdout using L{os.write}\n        after StandardIO has finished is reliably received by the\n        process reading that stdout.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Note: the OS X bug which prompted the addition of this test'
nl|'\n'
comment|'# is an apparent race condition involving non-blocking PTYs.'
nl|'\n'
comment|'# Delaying the parent process significantly increases the'
nl|'\n'
comment|'# likelihood of the race going the wrong way.  If you need to'
nl|'\n'
comment|'# fiddle with this code at all, uncommenting the next line'
nl|'\n'
comment|'# will likely make your life much easier.  It is commented out'
nl|'\n'
comment|'# because it makes the test quite slow.'
nl|'\n'
nl|'\n'
comment|"# p.onConnection.addCallback(lambda ign: __import__('time').sleep(5))"
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
nl|'\n'
name|'p'
op|','
string|"'stdio_test_lastwrite.py'"
op|','
name|'UNIQUE_LAST_WRITE_STRING'
op|','
nl|'\n'
name|'usePTY'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'e'
op|':'
newline|'\n'
comment|"# Some platforms don't work with usePTY=True"
nl|'\n'
indent|'            '
name|'raise'
name|'unittest'
op|'.'
name|'SkipTest'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
dedent|''
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""\n            Asserts that the parent received the bytes written by the child\n            immediately after the child starts.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|'.'
name|'endswith'
op|'('
name|'UNIQUE_LAST_WRITE_STRING'
op|')'
op|','
nl|'\n'
string|'"Received %r from child, did not find expected bytes."'
op|'%'
op|'('
nl|'\n'
name|'p'
op|'.'
name|'data'
op|','
op|')'
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'p'
op|'.'
name|'onCompletion'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_lastWriteReceived'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hostAndPeer
name|'def'
name|'test_hostAndPeer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the transport of a protocol connected to L{StandardIO}\n        has C{getHost} and C{getPeer} methods.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_hostpeer.py'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'peer'
op|'='
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
name|'peer'
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_hostAndPeer'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_write
name|'def'
name|'test_write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the C{write} method of the transport of a protocol\n        connected to L{StandardIO} sends bytes to standard out.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_write.py'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|','
string|"'ok!'"
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_write'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_writeSequence
name|'def'
name|'test_writeSequence'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the C{writeSequence} method of the transport of a\n        protocol connected to L{StandardIO} sends bytes to standard out.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_writeseq.py'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|','
string|"'ok!'"
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_writeSequence'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_junkPath
name|'def'
name|'_junkPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'junkPath'
op|'='
name|'self'
op|'.'
name|'mktemp'
op|'('
op|')'
newline|'\n'
name|'junkFile'
op|'='
name|'file'
op|'('
name|'junkPath'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1024'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'junkFile'
op|'.'
name|'write'
op|'('
name|'str'
op|'('
name|'i'
op|')'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'junkFile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'junkPath'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_producer
dedent|''
name|'def'
name|'test_producer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the transport of a protocol connected to L{StandardIO}\n        is a working L{IProducer} provider.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
nl|'\n'
name|'written'
op|'='
op|'['
op|']'
newline|'\n'
name|'toWrite'
op|'='
name|'range'
op|'('
number|'100'
op|')'
newline|'\n'
nl|'\n'
DECL|function|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'toWrite'
op|':'
newline|'\n'
indent|'                '
name|'written'
op|'.'
name|'append'
op|'('
name|'str'
op|'('
name|'toWrite'
op|'.'
name|'pop'
op|'('
op|')'
op|')'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
name|'proc'
op|'.'
name|'write'
op|'('
name|'written'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0.01'
op|','
name|'connectionMade'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'proc'
op|'='
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_producer.py'"
op|')'
newline|'\n'
nl|'\n'
name|'p'
op|'.'
name|'onConnection'
op|'.'
name|'addCallback'
op|'('
name|'connectionMade'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'written'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'toWrite'
op|','
string|'"Connection lost with %d writes left to go."'
op|'%'
op|'('
name|'len'
op|'('
name|'toWrite'
op|')'
op|','
op|')'
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_producer'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_consumer
name|'def'
name|'test_consumer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Verify that the transport of a protocol connected to L{StandardIO}\n        is a working L{IConsumer} provider.\n        """'
newline|'\n'
name|'p'
op|'='
name|'StandardIOTestProcessProtocol'
op|'('
op|')'
newline|'\n'
name|'d'
op|'='
name|'p'
op|'.'
name|'onCompletion'
newline|'\n'
nl|'\n'
name|'junkPath'
op|'='
name|'self'
op|'.'
name|'_junkPath'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_spawnProcess'
op|'('
name|'p'
op|','
string|"'stdio_test_consumer.py'"
op|','
name|'junkPath'
op|')'
newline|'\n'
nl|'\n'
DECL|function|processEnded
name|'def'
name|'processEnded'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'p'
op|'.'
name|'data'
op|'['
number|'1'
op|']'
op|','
name|'file'
op|'('
name|'junkPath'
op|')'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'reason'
op|'.'
name|'trap'
op|'('
name|'error'
op|'.'
name|'ProcessDone'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_requireFailure'
op|'('
name|'d'
op|','
name|'processEnded'
op|')'
newline|'\n'
dedent|''
name|'test_consumer'
op|'.'
name|'skip'
op|'='
name|'skipWindowsNopywin32'
newline|'\n'
dedent|''
endmarker|''
end_unit

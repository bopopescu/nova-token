begin_unit
name|'from'
name|'twisted'
op|'.'
name|'trial'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'inspect'
op|','
name|'glob'
op|','
name|'os'
newline|'\n'
name|'from'
name|'os'
name|'import'
name|'path'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'reflect'
newline|'\n'
nl|'\n'
name|'import'
name|'twisted'
newline|'\n'
nl|'\n'
DECL|function|errorInFile
name|'def'
name|'errorInFile'
op|'('
name|'f'
op|','
name|'line'
op|'='
number|'17'
op|','
name|'name'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a filename formatted so emacs will recognize it as an error point\n\n    @param line: Line number in file.  Defaults to 17 because that\'s about how\n        long the copyright headers are.\n    """'
newline|'\n'
name|'return'
string|"'%s:%d:%s'"
op|'%'
op|'('
name|'f'
op|','
name|'line'
op|','
name|'name'
op|')'
newline|'\n'
comment|'# return \'File "%s", line %d, in %s\' % (f, line, name)'
nl|'\n'
nl|'\n'
DECL|class|DocCoverage
dedent|''
name|'class'
name|'DocCoverage'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'remove'
op|'='
name|'len'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'twisted'
op|'.'
name|'__file__'
op|')'
op|')'
op|')'
op|'+'
number|'1'
newline|'\n'
DECL|function|visit
name|'def'
name|'visit'
op|'('
name|'dirlist'
op|','
name|'directory'
op|','
name|'files'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'__init__.py'"
name|'in'
name|'files'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'directory'
op|'['
name|'remove'
op|':'
op|']'
op|'.'
name|'replace'
op|'('
string|"'/'"
op|','
string|"'.'"
op|')'
newline|'\n'
name|'dirlist'
op|'.'
name|'append'
op|'('
name|'d'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'packageNames'
op|'='
op|'['
op|']'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'walk'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'twisted'
op|'.'
name|'__file__'
op|')'
op|','
nl|'\n'
name|'visit'
op|','
name|'self'
op|'.'
name|'packageNames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testModules
dedent|''
name|'def'
name|'testModules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Looking for docstrings in all modules."""'
newline|'\n'
name|'docless'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'packageName'
name|'in'
name|'self'
op|'.'
name|'packageNames'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'packageName'
name|'in'
op|'('
string|"'twisted.test'"
op|','
op|')'
op|':'
newline|'\n'
comment|'# because some stuff in here behaves oddly when imported'
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'package'
op|'='
name|'reflect'
op|'.'
name|'namedModule'
op|'('
name|'packageName'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# This is testing doc coverage, not importability.'
nl|'\n'
comment|"# (Really, I don't want to deal with the fact that I don't"
nl|'\n'
comment|'#  have pyserial installed.)'
nl|'\n'
comment|'# print e'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'docless'
op|'.'
name|'extend'
op|'('
name|'self'
op|'.'
name|'modulesInPackage'
op|'('
name|'packageName'
op|','
name|'package'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'docless'
op|','
string|'"No docstrings in module files:\\n"'
nl|'\n'
string|'"%s"'
op|'%'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'errorInFile'
op|','
name|'docless'
op|')'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modulesInPackage
dedent|''
name|'def'
name|'modulesInPackage'
op|'('
name|'self'
op|','
name|'packageName'
op|','
name|'package'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'docless'
op|'='
op|'['
op|']'
newline|'\n'
name|'directory'
op|'='
name|'path'
op|'.'
name|'dirname'
op|'('
name|'package'
op|'.'
name|'__file__'
op|')'
newline|'\n'
name|'for'
name|'modfile'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
string|"'*.py'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'moduleName'
op|'='
name|'inspect'
op|'.'
name|'getmodulename'
op|'('
name|'modfile'
op|')'
newline|'\n'
name|'if'
name|'moduleName'
op|'=='
string|"'__init__'"
op|':'
newline|'\n'
comment|'# These are tested by test_packages.'
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'moduleName'
name|'in'
op|'('
string|"'spelunk_gnome'"
op|','
string|"'gtkmanhole'"
op|')'
op|':'
newline|'\n'
comment|'# argh special case pygtk evil argh.  How does epydoc deal'
nl|'\n'
comment|'# with this?'
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'module'
op|'='
name|'reflect'
op|'.'
name|'namedModule'
op|'('
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'packageName'
op|','
nl|'\n'
name|'moduleName'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# print moduleName, "misbehaved:", e'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'inspect'
op|'.'
name|'getdoc'
op|'('
name|'module'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'docless'
op|'.'
name|'append'
op|'('
name|'modfile'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'docless'
newline|'\n'
nl|'\n'
DECL|member|testPackages
dedent|''
name|'def'
name|'testPackages'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Looking for docstrings in all packages."""'
newline|'\n'
name|'docless'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'packageName'
name|'in'
name|'self'
op|'.'
name|'packageNames'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'package'
op|'='
name|'reflect'
op|'.'
name|'namedModule'
op|'('
name|'packageName'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# This is testing doc coverage, not importability.'
nl|'\n'
comment|"# (Really, I don't want to deal with the fact that I don't"
nl|'\n'
comment|'#  have pyserial installed.)'
nl|'\n'
comment|'# print e'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'inspect'
op|'.'
name|'getdoc'
op|'('
name|'package'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'docless'
op|'.'
name|'append'
op|'('
name|'package'
op|'.'
name|'__file__'
op|'.'
name|'replace'
op|'('
string|"'.pyc'"
op|','
string|"'.py'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'failIf'
op|'('
name|'docless'
op|','
string|'"No docstrings for package files\\n"'
nl|'\n'
string|'"%s"'
op|'%'
op|'('
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'errorInFile'
op|','
name|'docless'
op|')'
op|','
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|"# This test takes a while and doesn't come close to passing.  :("
nl|'\n'
dedent|''
name|'testModules'
op|'.'
name|'skip'
op|'='
string|'"Activate me when you feel like writing docstrings, and fixing GTK crashing bugs."'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nThis is an example of integrating curses with the twisted underlying    \nselect loop. Most of what is in this is insignificant -- the main piece \nof interest is the \'CursesStdIO\' class.                                 \n\nThis class acts as file-descriptor 0, and is scheduled with the twisted\nselect loop via reactor.addReader (once the curses class extends it\nof course). When there is input waiting doRead is called, and any\ninput-oriented curses calls (ie. getch()) should be executed within this\nblock.\n\nRemember to call nodelay(1) in curses, to make getch() non-blocking.\n"""'
newline|'\n'
nl|'\n'
comment|'# System Imports'
nl|'\n'
name|'import'
name|'curses'
op|','
name|'time'
op|','
name|'traceback'
op|','
name|'sys'
newline|'\n'
name|'import'
name|'curses'
op|'.'
name|'wrapper'
newline|'\n'
nl|'\n'
comment|'# Twisted imports'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ClientFactory'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'words'
op|'.'
name|'protocols'
op|'.'
name|'irc'
name|'import'
name|'IRCClient'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|class|TextTooLongError
name|'class'
name|'TextTooLongError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|CursesStdIO
dedent|''
name|'class'
name|'CursesStdIO'
op|':'
newline|'\n'
indent|'    '
string|'"""fake fd to be registered as a reader with the twisted reactor.\n       Curses classes needing input should extend this"""'
newline|'\n'
nl|'\n'
DECL|member|fileno
name|'def'
name|'fileno'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" We want to select on FD 0 """'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""called when input is ready"""'
newline|'\n'
nl|'\n'
DECL|member|logPrefix
dedent|''
name|'def'
name|'logPrefix'
op|'('
name|'self'
op|')'
op|':'
name|'return'
string|"'CursesClient'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRC
dedent|''
name|'class'
name|'IRC'
op|'('
name|'IRCClient'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'""" A protocol object for IRC """'
newline|'\n'
nl|'\n'
DECL|variable|nickname
name|'nickname'
op|'='
string|'"testcurses"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'screenObj'
op|')'
op|':'
newline|'\n'
comment|"# screenObj should be 'stdscr' or a curses window/pad object"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'screenObj'
op|'='
name|'screenObj'
newline|'\n'
comment|'# for testing (hacky way around initial bad design for this example) :)'
nl|'\n'
name|'self'
op|'.'
name|'screenObj'
op|'.'
name|'irc'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" When receiving a line, add it to the output buffer """'
newline|'\n'
name|'self'
op|'.'
name|'screenObj'
op|'.'
name|'addLine'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
dedent|''
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'IRCClient'
op|'.'
name|'connectionMade'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'screenObj'
op|'.'
name|'addLine'
op|'('
string|'"* CONNECTED"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'connection'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IRCFactory
dedent|''
dedent|''
name|'class'
name|'IRCFactory'
op|'('
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Factory used for creating IRC protocol objects \n    """'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'IRC'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'screenObj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'irc'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'screenObj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'irc'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionLost
dedent|''
name|'def'
name|'clientConnectionLost'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Screen
dedent|''
dedent|''
name|'class'
name|'Screen'
op|'('
name|'CursesStdIO'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stdscr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'timer'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'statusText'
op|'='
string|'"TEST CURSES APP -"'
newline|'\n'
name|'self'
op|'.'
name|'searchText'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'='
name|'stdscr'
newline|'\n'
nl|'\n'
comment|'# set screen attributes'
nl|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'nodelay'
op|'('
number|'1'
op|')'
comment|'# this is used to make input calls non-blocking'
newline|'\n'
name|'curses'
op|'.'
name|'cbreak'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'keypad'
op|'('
number|'1'
op|')'
newline|'\n'
name|'curses'
op|'.'
name|'curs_set'
op|'('
number|'0'
op|')'
comment|'# no annoying mouse cursor'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'rows'
op|','
name|'self'
op|'.'
name|'cols'
op|'='
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'getmaxyx'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'curses'
op|'.'
name|'start_color'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# create color pair's 1 and 2"
nl|'\n'
name|'curses'
op|'.'
name|'init_pair'
op|'('
number|'1'
op|','
name|'curses'
op|'.'
name|'COLOR_BLACK'
op|','
name|'curses'
op|'.'
name|'COLOR_WHITE'
op|')'
newline|'\n'
name|'curses'
op|'.'
name|'init_pair'
op|'('
number|'2'
op|','
name|'curses'
op|'.'
name|'COLOR_CYAN'
op|','
name|'curses'
op|'.'
name|'COLOR_BLACK'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'paintStatus'
op|'('
name|'self'
op|'.'
name|'statusText'
op|')'
newline|'\n'
nl|'\n'
DECL|member|connectionLost
dedent|''
name|'def'
name|'connectionLost'
op|'('
name|'self'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|addLine
dedent|''
name|'def'
name|'addLine'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" add a line to the internal list of lines"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
op|'('
name|'text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'redisplayLines'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|redisplayLines
dedent|''
name|'def'
name|'redisplayLines'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" method for redisplaying lines \n            based on internal list of lines """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'paintStatus'
op|'('
name|'self'
op|'.'
name|'statusText'
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'index'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'lines'
op|')'
op|'-'
number|'1'
newline|'\n'
name|'while'
name|'i'
op|'<'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'3'
op|')'
name|'and'
name|'index'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'addstr'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'3'
op|'-'
name|'i'
op|','
number|'0'
op|','
name|'self'
op|'.'
name|'lines'
op|'['
name|'index'
op|']'
op|','
nl|'\n'
name|'curses'
op|'.'
name|'color_pair'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'i'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
name|'index'
op|'='
name|'index'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|paintStatus
dedent|''
name|'def'
name|'paintStatus'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'text'
op|')'
op|'>'
name|'self'
op|'.'
name|'cols'
op|':'
name|'raise'
name|'TextTooLongError'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'addstr'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'2'
op|','
number|'0'
op|','
name|'text'
op|'+'
string|"' '"
op|'*'
op|'('
name|'self'
op|'.'
name|'cols'
op|'-'
name|'len'
op|'('
name|'text'
op|')'
op|')'
op|','
nl|'\n'
name|'curses'
op|'.'
name|'color_pair'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
comment|'# move cursor to input line'
nl|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'move'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'1'
op|','
name|'self'
op|'.'
name|'cols'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|doRead
dedent|''
name|'def'
name|'doRead'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Input is ready! """'
newline|'\n'
name|'curses'
op|'.'
name|'noecho'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timer'
op|'='
name|'self'
op|'.'
name|'timer'
op|'+'
number|'1'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'getch'
op|'('
op|')'
comment|'# read a character'
newline|'\n'
nl|'\n'
name|'if'
name|'c'
op|'=='
name|'curses'
op|'.'
name|'KEY_BACKSPACE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'searchText'
op|'='
name|'self'
op|'.'
name|'searchText'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'c'
op|'=='
name|'curses'
op|'.'
name|'KEY_ENTER'
name|'or'
name|'c'
op|'=='
number|'10'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'addLine'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
newline|'\n'
comment|'# for testing too'
nl|'\n'
name|'try'
op|':'
name|'self'
op|'.'
name|'irc'
op|'.'
name|'sendLine'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
newline|'\n'
name|'except'
op|':'
name|'pass'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'searchText'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
op|'=='
name|'self'
op|'.'
name|'cols'
op|'-'
number|'2'
op|':'
name|'return'
newline|'\n'
name|'self'
op|'.'
name|'searchText'
op|'='
name|'self'
op|'.'
name|'searchText'
op|'+'
name|'chr'
op|'('
name|'c'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'addstr'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'1'
op|','
number|'0'
op|','
nl|'\n'
name|'self'
op|'.'
name|'searchText'
op|'+'
op|'('
string|"' '"
op|'*'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'cols'
op|'-'
name|'len'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
op|'-'
number|'2'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'move'
op|'('
name|'self'
op|'.'
name|'rows'
op|'-'
number|'1'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'paintStatus'
op|'('
name|'self'
op|'.'
name|'statusText'
op|'+'
string|"' %d'"
op|'%'
name|'len'
op|'('
name|'self'
op|'.'
name|'searchText'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" clean up """'
newline|'\n'
nl|'\n'
name|'curses'
op|'.'
name|'nocbreak'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stdscr'
op|'.'
name|'keypad'
op|'('
number|'0'
op|')'
newline|'\n'
name|'curses'
op|'.'
name|'echo'
op|'('
op|')'
newline|'\n'
name|'curses'
op|'.'
name|'endwin'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
DECL|variable|stdscr
indent|'    '
name|'stdscr'
op|'='
name|'curses'
op|'.'
name|'initscr'
op|'('
op|')'
comment|'# initialize curses'
newline|'\n'
DECL|variable|screen
name|'screen'
op|'='
name|'Screen'
op|'('
name|'stdscr'
op|')'
comment|'# create Screen object'
newline|'\n'
name|'stdscr'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
DECL|variable|ircFactory
name|'ircFactory'
op|'='
name|'IRCFactory'
op|'('
name|'screen'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'addReader'
op|'('
name|'screen'
op|')'
comment|'# add screen object as a reader to the reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"irc.freenode.net"'
op|','
number|'6667'
op|','
name|'ircFactory'
op|')'
comment|'# connect to IRC'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
comment|'# have fun!'
newline|'\n'
name|'screen'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

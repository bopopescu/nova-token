begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""\nSimple IMAP4 client which displays the subjects of all messages in a \nparticular mailbox.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'protocol'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'ssl'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'stdio'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'mail'
name|'import'
name|'imap4'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'util'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
nl|'\n'
DECL|class|TrivialPrompter
name|'class'
name|'TrivialPrompter'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'os'
name|'import'
name|'linesep'
name|'as'
name|'delimiter'
newline|'\n'
nl|'\n'
DECL|variable|promptDeferred
name|'promptDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|prompt
name|'def'
name|'prompt'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'promptDeferred'
name|'is'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'display'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'promptDeferred'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'promptDeferred'
newline|'\n'
nl|'\n'
DECL|member|display
dedent|''
name|'def'
name|'display'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'promptDeferred'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'d'
op|','
name|'self'
op|'.'
name|'promptDeferred'
op|'='
name|'self'
op|'.'
name|'promptDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SimpleIMAP4Client
dedent|''
dedent|''
name|'class'
name|'SimpleIMAP4Client'
op|'('
name|'imap4'
op|'.'
name|'IMAP4Client'
op|')'
op|':'
newline|'\n'
DECL|variable|greetDeferred
indent|'    '
name|'greetDeferred'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|serverGreeting
name|'def'
name|'serverGreeting'
op|'('
name|'self'
op|','
name|'caps'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'serverCapabilities'
op|'='
name|'caps'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'greetDeferred'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|','
name|'self'
op|'.'
name|'greetDeferred'
op|'='
name|'self'
op|'.'
name|'greetDeferred'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'callback'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|class|SimpleIMAP4ClientFactory
dedent|''
dedent|''
dedent|''
name|'class'
name|'SimpleIMAP4ClientFactory'
op|'('
name|'protocol'
op|'.'
name|'ClientFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|usedUp
indent|'    '
name|'usedUp'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'SimpleIMAP4Client'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'username'
op|','
name|'onConn'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ctx'
op|'='
name|'ssl'
op|'.'
name|'ClientContextFactory'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'onConn'
op|'='
name|'onConn'
newline|'\n'
nl|'\n'
DECL|member|buildProtocol
dedent|''
name|'def'
name|'buildProtocol'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'usedUp'
newline|'\n'
name|'self'
op|'.'
name|'usedUp'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'p'
op|'='
name|'self'
op|'.'
name|'protocol'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'factory'
op|'='
name|'self'
newline|'\n'
name|'p'
op|'.'
name|'greetDeferred'
op|'='
name|'self'
op|'.'
name|'onConn'
newline|'\n'
nl|'\n'
name|'auth'
op|'='
name|'imap4'
op|'.'
name|'CramMD5ClientAuthenticator'
op|'('
name|'self'
op|'.'
name|'username'
op|')'
newline|'\n'
name|'p'
op|'.'
name|'registerAuthenticator'
op|'('
name|'auth'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'p'
newline|'\n'
nl|'\n'
DECL|member|clientConnectionFailed
dedent|''
name|'def'
name|'clientConnectionFailed'
op|'('
name|'self'
op|','
name|'connector'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|','
name|'self'
op|'.'
name|'onConn'
op|'='
name|'self'
op|'.'
name|'onConn'
op|','
name|'None'
newline|'\n'
name|'d'
op|'.'
name|'errback'
op|'('
name|'reason'
op|')'
newline|'\n'
nl|'\n'
comment|'# Initial callback - invoked after the server sends us its greet message'
nl|'\n'
DECL|function|cbServerGreeting
dedent|''
dedent|''
name|'def'
name|'cbServerGreeting'
op|'('
name|'proto'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
comment|'# Hook up stdio'
nl|'\n'
indent|'    '
name|'tp'
op|'='
name|'TrivialPrompter'
op|'('
op|')'
newline|'\n'
name|'stdio'
op|'.'
name|'StandardIO'
op|'('
name|'tp'
op|')'
newline|'\n'
nl|'\n'
comment|'# And make it easily accessible'
nl|'\n'
name|'proto'
op|'.'
name|'prompt'
op|'='
name|'tp'
op|'.'
name|'prompt'
newline|'\n'
name|'proto'
op|'.'
name|'display'
op|'='
name|'tp'
op|'.'
name|'display'
newline|'\n'
nl|'\n'
comment|'# Try to authenticate securely'
nl|'\n'
name|'return'
name|'proto'
op|'.'
name|'authenticate'
op|'('
name|'password'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbAuthentication'
op|','
name|'proto'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'ebAuthentication'
op|','
name|'proto'
op|','
name|'username'
op|','
name|'password'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fallback error-handler.  If anything goes wrong, log it and quit.'
nl|'\n'
DECL|function|ebConnection
dedent|''
name|'def'
name|'ebConnection'
op|'('
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'log'
op|'.'
name|'err'
op|'('
name|'reason'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Callback after authentication has succeeded'
nl|'\n'
DECL|function|cbAuthentication
dedent|''
name|'def'
name|'cbAuthentication'
op|'('
name|'result'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
comment|'# List a bunch of mailboxes'
nl|'\n'
indent|'    '
name|'return'
name|'proto'
op|'.'
name|'list'
op|'('
string|'""'
op|','
string|'"*"'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbMailboxList'
op|','
name|'proto'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Errback invoked when authentication fails'
nl|'\n'
DECL|function|ebAuthentication
dedent|''
name|'def'
name|'ebAuthentication'
op|'('
name|'failure'
op|','
name|'proto'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
comment|'# If it failed because no SASL mechanisms match, offer the user the choice'
nl|'\n'
comment|'# of logging in insecurely.'
nl|'\n'
indent|'    '
name|'failure'
op|'.'
name|'trap'
op|'('
name|'imap4'
op|'.'
name|'NoSupportedAuthentication'
op|')'
newline|'\n'
name|'return'
name|'proto'
op|'.'
name|'prompt'
op|'('
string|'"No secure authentication available.  Login insecurely? (y/N) "'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbInsecureLogin'
op|','
name|'proto'
op|','
name|'username'
op|','
name|'password'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Callback for "insecure-login" prompt'
nl|'\n'
DECL|function|cbInsecureLogin
dedent|''
name|'def'
name|'cbInsecureLogin'
op|'('
name|'result'
op|','
name|'proto'
op|','
name|'username'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'result'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|'"y"'
op|':'
newline|'\n'
comment|'# If they said yes, do it.'
nl|'\n'
indent|'        '
name|'return'
name|'proto'
op|'.'
name|'login'
op|'('
name|'username'
op|','
name|'password'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbAuthentication'
op|','
name|'proto'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'Exception'
op|'('
string|'"Login failed for security reasons."'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Callback invoked when a list of mailboxes has been retrieved'
nl|'\n'
DECL|function|cbMailboxList
dedent|''
name|'def'
name|'cbMailboxList'
op|'('
name|'result'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'['
name|'e'
op|'['
number|'2'
op|']'
name|'for'
name|'e'
name|'in'
name|'result'
op|']'
newline|'\n'
name|'s'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
op|'['
string|"'%d. %s'"
op|'%'
op|'('
name|'n'
op|'+'
number|'1'
op|','
name|'m'
op|')'
name|'for'
op|'('
name|'n'
op|','
name|'m'
op|')'
name|'in'
name|'zip'
op|'('
name|'range'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|')'
op|','
name|'result'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'s'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'defer'
op|'.'
name|'fail'
op|'('
name|'Exception'
op|'('
string|'"No mailboxes exist on server!"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'proto'
op|'.'
name|'prompt'
op|'('
name|'s'
op|'+'
string|'"\\nWhich mailbox? [1] "'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbPickMailbox'
op|','
name|'proto'
op|','
name|'result'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# When the user selects a mailbox, "examine" it.'
nl|'\n'
DECL|function|cbPickMailbox
dedent|''
name|'def'
name|'cbPickMailbox'
op|'('
name|'result'
op|','
name|'proto'
op|','
name|'mboxes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mbox'
op|'='
name|'mboxes'
op|'['
name|'int'
op|'('
name|'result'
name|'or'
string|"'1'"
op|')'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'return'
name|'proto'
op|'.'
name|'examine'
op|'('
name|'mbox'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbExamineMbox'
op|','
name|'proto'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Callback invoked when examine command completes.'
nl|'\n'
DECL|function|cbExamineMbox
dedent|''
name|'def'
name|'cbExamineMbox'
op|'('
name|'result'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
comment|'# Retrieve the subject header of every message on the mailbox.'
nl|'\n'
indent|'    '
name|'return'
name|'proto'
op|'.'
name|'fetchSpecific'
op|'('
string|"'1:*'"
op|','
nl|'\n'
name|'headerType'
op|'='
string|"'HEADER.FIELDS'"
op|','
nl|'\n'
name|'headerArgs'
op|'='
op|'['
string|"'SUBJECT'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbFetch'
op|','
name|'proto'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# Finally, display headers.'
nl|'\n'
DECL|function|cbFetch
dedent|''
name|'def'
name|'cbFetch'
op|'('
name|'result'
op|','
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'keys'
op|'='
name|'result'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'        '
name|'proto'
op|'.'
name|'display'
op|'('
string|"'%s %s'"
op|'%'
op|'('
name|'k'
op|','
name|'result'
op|'['
name|'k'
op|']'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'proto'
op|'.'
name|'logout'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|PORT
dedent|''
name|'PORT'
op|'='
number|'143'
newline|'\n'
nl|'\n'
DECL|function|main
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'hostname'
op|'='
name|'raw_input'
op|'('
string|"'IMAP4 Server Hostname: '"
op|')'
newline|'\n'
name|'username'
op|'='
name|'raw_input'
op|'('
string|"'IMAP4 Username: '"
op|')'
newline|'\n'
name|'password'
op|'='
name|'util'
op|'.'
name|'getPassword'
op|'('
string|"'IMAP4 Password: '"
op|')'
newline|'\n'
nl|'\n'
name|'onConn'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
nl|'\n'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cbServerGreeting'
op|','
name|'username'
op|','
name|'password'
nl|'\n'
op|')'
op|'.'
name|'addErrback'
op|'('
name|'ebConnection'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'factory'
op|'='
name|'SimpleIMAP4ClientFactory'
op|'('
name|'username'
op|','
name|'onConn'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'conn'
op|'='
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
name|'hostname'
op|','
name|'PORT'
op|','
name|'factory'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

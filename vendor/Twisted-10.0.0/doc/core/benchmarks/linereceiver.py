begin_unit
name|'import'
name|'math'
op|','
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
nl|'\n'
DECL|class|CollectingLineReceiver
name|'class'
name|'CollectingLineReceiver'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'lineReceived'
op|'='
name|'self'
op|'.'
name|'lines'
op|'.'
name|'append'
newline|'\n'
nl|'\n'
DECL|function|deliver
dedent|''
dedent|''
name|'def'
name|'deliver'
op|'('
name|'proto'
op|','
name|'chunks'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'map'
op|'('
name|'proto'
op|'.'
name|'dataReceived'
op|','
name|'chunks'
op|')'
newline|'\n'
nl|'\n'
DECL|function|benchmark
dedent|''
name|'def'
name|'benchmark'
op|'('
name|'chunkSize'
op|','
name|'lineLength'
op|','
name|'numLines'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'bytes'
op|'='
op|'('
string|"'x'"
op|'*'
name|'lineLength'
op|'+'
string|"'\\r\\n'"
op|')'
op|'*'
name|'numLines'
newline|'\n'
name|'chunkCount'
op|'='
name|'len'
op|'('
name|'bytes'
op|')'
op|'/'
name|'chunkSize'
op|'+'
number|'1'
newline|'\n'
name|'chunks'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'xrange'
op|'('
name|'chunkCount'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'chunks'
op|'.'
name|'append'
op|'('
name|'bytes'
op|'['
name|'n'
op|'*'
name|'chunkSize'
op|':'
op|'('
name|'n'
op|'+'
number|'1'
op|')'
op|'*'
name|'chunkSize'
op|']'
op|')'
newline|'\n'
dedent|''
name|'assert'
string|"''"
op|'.'
name|'join'
op|'('
name|'chunks'
op|')'
op|'=='
name|'bytes'
op|','
op|'('
name|'chunks'
op|','
name|'bytes'
op|')'
newline|'\n'
name|'p'
op|'='
name|'CollectingLineReceiver'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'before'
op|'='
name|'time'
op|'.'
name|'clock'
op|'('
op|')'
newline|'\n'
name|'deliver'
op|'('
name|'p'
op|','
name|'chunks'
op|')'
newline|'\n'
name|'after'
op|'='
name|'time'
op|'.'
name|'clock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'assert'
name|'bytes'
op|'.'
name|'splitlines'
op|'('
op|')'
op|'=='
name|'p'
op|'.'
name|'lines'
op|','
op|'('
name|'bytes'
op|'.'
name|'splitlines'
op|'('
op|')'
op|','
name|'p'
op|'.'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
name|'print'
string|"'chunkSize:'"
op|','
name|'chunkSize'
op|','
newline|'\n'
name|'print'
string|"'lineLength:'"
op|','
name|'lineLength'
op|','
newline|'\n'
name|'print'
string|"'numLines:'"
op|','
name|'numLines'
op|','
newline|'\n'
name|'print'
string|"'CPU Time: '"
op|','
name|'after'
op|'-'
name|'before'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'numLines'
name|'in'
number|'100'
op|','
number|'1000'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'lineLength'
name|'in'
op|'('
number|'10'
op|','
number|'100'
op|','
number|'1000'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'chunkSize'
name|'in'
op|'('
number|'1'
op|','
number|'500'
op|','
number|'5000'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'benchmark'
op|'('
name|'chunkSize'
op|','
name|'lineLength'
op|','
name|'numLines'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'numLines'
name|'in'
number|'10000'
op|','
number|'50000'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'lineLength'
name|'in'
op|'('
number|'1000'
op|','
number|'2000'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'chunkSize'
name|'in'
op|'('
number|'51'
op|','
number|'500'
op|','
number|'5000'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'benchmark'
op|'('
name|'chunkSize'
op|','
name|'lineLength'
op|','
name|'numLines'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

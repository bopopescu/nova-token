begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nGPSTest is a simple example using the SerialPort transport and the NMEA 0183\nand Rockwell Zodiac GPS protocols to display fix data as it is received from\nthe device.\n"""'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
op|','
name|'usage'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'=='
string|"'win32'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'win32eventreactor'
newline|'\n'
name|'win32eventreactor'
op|'.'
name|'install'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GPSFixLogger
dedent|''
name|'class'
name|'GPSFixLogger'
op|':'
newline|'\n'
DECL|member|handle_fix
indent|'    '
name|'def'
name|'handle_fix'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'      '
string|'"""\n      handle_fix gets called whenever either rockwell.Zodiac or nmea.NMEAReceiver\n      receives and decodes fix data.  Generally, GPS receivers will report a\n      fix at 1hz. Implementing only this method is sufficient for most purposes\n      unless tracking of ground speed, course, utc date, or detailed satellite\n      information is necessary.\n\n      For example, plotting a map from MapQuest or a similar service only\n      requires longitude and latitude.\n      """'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'fix:\\n'"
op|'+'
nl|'\n'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'n'
op|':'
string|"'  %s = %s'"
op|'%'
name|'tuple'
op|'('
name|'n'
op|')'
op|','
name|'zip'
op|'('
op|'('
string|"'utc'"
op|','
string|"'lon'"
op|','
string|"'lat'"
op|','
string|"'fix'"
op|','
string|"'sat'"
op|','
string|"'hdp'"
op|','
string|"'alt'"
op|','
string|"'geo'"
op|','
string|"'dgp'"
op|')'
op|','
name|'map'
op|'('
name|'repr'
op|','
name|'args'
op|')'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|GPSOptions
dedent|''
dedent|''
name|'class'
name|'GPSOptions'
op|'('
name|'usage'
op|'.'
name|'Options'
op|')'
op|':'
newline|'\n'
DECL|variable|optFlags
indent|'    '
name|'optFlags'
op|'='
op|'['
nl|'\n'
op|'['
string|"'zodiac'"
op|','
string|"'z'"
op|','
string|"'Use Rockwell Zodiac (DeLorme Earthmate) [default: NMEA 0183]'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'['
string|"'outfile'"
op|','
string|"'o'"
op|','
name|'None'
op|','
string|"'Logfile [default: sys.stdout]'"
op|']'
op|','
nl|'\n'
op|'['
string|"'baudrate'"
op|','
string|"'b'"
op|','
name|'None'
op|','
string|"'Serial baudrate [default: 4800 for NMEA, 9600 for Zodiac]'"
op|']'
op|','
nl|'\n'
op|'['
string|"'port'"
op|','
string|"'p'"
op|','
string|"'/dev/ttyS0'"
op|','
string|"'Serial Port device'"
op|']'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'serialport'
name|'import'
name|'SerialPort'
newline|'\n'
nl|'\n'
DECL|variable|o
name|'o'
op|'='
name|'GPSOptions'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'o'
op|'.'
name|'parseOptions'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'usage'
op|'.'
name|'UsageError'
op|','
name|'errortext'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'%s: %s'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
name|'errortext'
op|')'
newline|'\n'
name|'print'
string|"'%s: Try --help for usage details.'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'raise'
name|'SystemExit'
op|','
number|'1'
newline|'\n'
nl|'\n'
DECL|variable|logFile
dedent|''
name|'logFile'
op|'='
name|'o'
op|'.'
name|'opts'
op|'['
string|"'outfile'"
op|']'
newline|'\n'
name|'if'
name|'logFile'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|logFile
indent|'        '
name|'logFile'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
dedent|''
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'logFile'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'o'
op|'.'
name|'opts'
op|'['
string|"'zodiac'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'gps'
op|'.'
name|'rockwell'
name|'import'
name|'Zodiac'
name|'as'
name|'GPSProtocolBase'
newline|'\n'
DECL|variable|baudrate
name|'baudrate'
op|'='
number|'9600'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'gps'
op|'.'
name|'nmea'
name|'import'
name|'NMEAReceiver'
name|'as'
name|'GPSProtocolBase'
newline|'\n'
DECL|variable|baudrate
name|'baudrate'
op|'='
number|'4800'
newline|'\n'
DECL|class|GPSTest
dedent|''
name|'class'
name|'GPSTest'
op|'('
name|'GPSProtocolBase'
op|','
name|'GPSFixLogger'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'o'
op|'.'
name|'opts'
op|'['
string|"'baudrate'"
op|']'
op|':'
newline|'\n'
DECL|variable|baudrate
indent|'        '
name|'baudrate'
op|'='
name|'int'
op|'('
name|'o'
op|'.'
name|'opts'
op|'['
string|"'baudrate'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|port
dedent|''
name|'port'
op|'='
name|'o'
op|'.'
name|'opts'
op|'['
string|"'port'"
op|']'
newline|'\n'
name|'log'
op|'.'
name|'msg'
op|'('
string|"'Attempting to open %s at %dbps as a %s device'"
op|'%'
op|'('
name|'port'
op|','
name|'baudrate'
op|','
name|'GPSProtocolBase'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
DECL|variable|s
name|'s'
op|'='
name|'SerialPort'
op|'('
name|'GPSTest'
op|'('
op|')'
op|','
name|'o'
op|'.'
name|'opts'
op|'['
string|"'port'"
op|']'
op|','
name|'reactor'
op|','
name|'baudrate'
op|'='
name|'baudrate'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

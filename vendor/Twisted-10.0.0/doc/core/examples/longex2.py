begin_unit
string|'"""Example of doing arbitarily long calculations nicely in Twisted.\n\nThis is also a simple demonstration of twisted.protocols.basic.LineReceiver.\nThis example uses generators to do the calculation. It also tries to be\na good example in division of responsibilities:\n- The protocol handles the wire layer, reading in lists of numbers\n  and writing out the result.\n- The factory decides on policy, and has relatively little knowledge\n  of the details of the protocol. Other protocols can use the same\n  factory class by intantiating and setting .protocol\n- The factory does little job itself: it is mostly a policy maker.\n  The \'smarts\' are in free-standing functions which are written\n  for flexibility.\n\nThe goal is for minimal dependencies:\n- You can use runIterator to run any iterator inside the Twisted\n  main loop.\n- You can use multiply whenever you need some way of multiplying\n  numbers such that the multiplications will happen asynchronously,\n  but it is your responsibility to schedule the multiplications.\n- You can use the protocol with other factories to implement other\n  functions that apply to arbitrary lists of longs.\n- You can use the factory with other protocols for support of legacy\n  protocols. In fact, the factory does not even have to be used as\n  a protocol factory. Here are easy ways to support the operation\n  over XML-RPC and PB.\n\nclass Multiply(xmlrpc.XMLRPC):\n    def __init__(self): self.factory = Multiplication()\n    def xmlrpc_multiply(self, *numbers):\n        return self.factory.calc(map(long, numbers))\n\nclass Multiply(pb.Referencable):\n    def __init__(self): self.factory = Multiplication()\n    def remote_multiply(self, *numbers):\n        return self.factory.calc(map(long, numbers))\n\nNote:\nMultiplying zero numbers is a perfectly sensible operation, and the\nresult is 1. In that, this example departs from doc/examples/longex.py,\nwhich errors out when trying to do this.\n"""'
newline|'\n'
name|'from'
name|'__future__'
name|'import'
name|'generators'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
op|','
name|'protocol'
newline|'\n'
nl|'\n'
DECL|function|runIterator
name|'def'
name|'runIterator'
op|'('
name|'reactor'
op|','
name|'iterator'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'runIterator'
op|','
name|'reactor'
op|','
name|'iterator'
op|')'
newline|'\n'
nl|'\n'
DECL|function|multiply
dedent|''
dedent|''
name|'def'
name|'multiply'
op|'('
name|'numbers'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'d'
op|'='
name|'defer'
op|'.'
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|_
name|'def'
name|'_'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'acc'
op|'='
number|'1'
newline|'\n'
name|'while'
name|'numbers'
op|':'
newline|'\n'
indent|'            '
name|'acc'
op|'*='
name|'numbers'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'None'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'callback'
op|'('
name|'acc'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'d'
op|','
name|'_'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Numbers
dedent|''
name|'class'
name|'Numbers'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Protocol for reading lists of numbers and manipulating them.\n\n    It receives a list of numbers (seperated by whitespace) on a line, and\n    writes back the answer.  The exact algorithm to use depends on the\n    factory. It should return an str-able Deferred.\n    """'
newline|'\n'
DECL|member|lineReceived
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'numbers'
op|'='
name|'map'
op|'('
name|'long'
op|','
name|'line'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'Error.'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'deferred'
op|'='
name|'self'
op|'.'
name|'factory'
op|'.'
name|'calc'
op|'('
name|'numbers'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'str'
op|')'
newline|'\n'
name|'deferred'
op|'.'
name|'addCallback'
op|'('
name|'self'
op|'.'
name|'sendLine'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Multiplication
dedent|''
dedent|''
name|'class'
name|'Multiplication'
op|'('
name|'protocol'
op|'.'
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Factory for multiplying numbers.\n\n    It provides a function which calculates the multiplication\n    of a list of numbers. The function destroys its input.\n    Note that instances of this factory can use other formats\n    for transmitting the number lists, as long as they set\n    correct protoocl values.\n    """'
newline|'\n'
DECL|variable|protocol
name|'protocol'
op|'='
name|'Numbers'
newline|'\n'
DECL|member|calc
name|'def'
name|'calc'
op|'('
name|'self'
op|','
name|'numbers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deferred'
op|','
name|'iterator'
op|'='
name|'multiply'
op|'('
name|'numbers'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'runIterator'
op|'('
name|'reactor'
op|','
name|'iterator'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'1234'
op|','
name|'Multiplication'
op|'('
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

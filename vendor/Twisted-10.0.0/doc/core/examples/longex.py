begin_unit
string|'"""Simple example of doing arbitarily long calculations nicely in Twisted.\n\nThis is also a simple demonstration of twisted.protocols.basic.LineReceiver.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
name|'import'
name|'basic'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
newline|'\n'
nl|'\n'
DECL|class|LongMultiplicationProtocol
name|'class'
name|'LongMultiplicationProtocol'
op|'('
name|'basic'
op|'.'
name|'LineReceiver'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A protocol for doing long multiplications.\n\n    It receives a list of numbers (seperated by whitespace) on a line, and\n    writes back the answer.  The answer is calculated in chunks, so no one\n    calculation should block for long enough to matter.\n    """'
newline|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'workQueue'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|lineReceived
dedent|''
name|'def'
name|'lineReceived'
op|'('
name|'self'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'numbers'
op|'='
name|'map'
op|'('
name|'long'
op|','
name|'line'
op|'.'
name|'split'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'Error.'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'numbers'
op|')'
op|'<='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sendLine'
op|'('
string|"'Error.'"
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'workQueue'
op|'.'
name|'append'
op|'('
name|'numbers'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'calcChunk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|calcChunk
dedent|''
name|'def'
name|'calcChunk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure there's some work left; when multiple lines are received"
nl|'\n'
comment|'# while processing is going on, multiple calls to reactor.callLater()'
nl|'\n'
comment|'# can happen between calls to calcChunk().'
nl|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'workQueue'
op|':'
newline|'\n'
comment|'# Get the first bit of work off the queue'
nl|'\n'
indent|'            '
name|'work'
op|'='
name|'self'
op|'.'
name|'workQueue'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|'# Do a chunk of work: [a, b, c, ...] -> [a*b, c, ...]'
nl|'\n'
name|'work'
op|'['
op|':'
number|'2'
op|']'
op|'='
op|'['
name|'work'
op|'['
number|'0'
op|']'
op|'*'
name|'work'
op|'['
number|'1'
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# If this piece of work now has only one element, send it.'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'work'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sendLine'
op|'('
name|'str'
op|'('
name|'work'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'workQueue'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|"# Schedule this function to do more work, if there's still work"
nl|'\n'
comment|'# to be done.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'workQueue'
op|':'
newline|'\n'
indent|'                '
name|'reactor'
op|'.'
name|'callLater'
op|'('
number|'0'
op|','
name|'self'
op|'.'
name|'calcChunk'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LongMultiplicationFactory
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'LongMultiplicationFactory'
op|'('
name|'ServerFactory'
op|')'
op|':'
newline|'\n'
DECL|variable|protocol
indent|'    '
name|'protocol'
op|'='
name|'LongMultiplicationProtocol'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'1234'
op|','
name|'LongMultiplicationFactory'
op|'('
op|')'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2001-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nSimple example of a db checker: define a L{ICredentialsChecker} implementation\nthat deals with a database backend to authenticate a user.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
name|'import'
name|'error'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'IUsernameHashedPassword'
op|','
name|'IUsernamePassword'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'ICredentialsChecker'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
nl|'\n'
name|'from'
name|'zope'
op|'.'
name|'interface'
name|'import'
name|'implements'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DBCredentialsChecker
name|'class'
name|'DBCredentialsChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class checks the credentials of incoming connections\n    against a user table in a database.\n    """'
newline|'\n'
name|'implements'
op|'('
name|'ICredentialsChecker'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'runQuery'
op|','
nl|'\n'
name|'query'
op|'='
string|'"SELECT username, password FROM user WHERE username = %s"'
op|','
nl|'\n'
name|'customCheckFunc'
op|'='
name|'None'
op|','
name|'caseSensitivePasswords'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        @param runQuery: This will be called to get the info from the db.\n            Generally you\'d want to create a\n            L{twisted.enterprice.adbapi.ConnectionPool} and pass it\'s runQuery\n            method here. Otherwise pass a function with the same prototype.\n        @type runQuery: C{callable}\n\n        @type query: query used to authenticate user.\n        @param query: C{str}\n\n        @param customCheckFunc: Use this if the passwords in the db are stored\n            as hashes. We\'ll just call this, so you can do the checking\n            yourself. It takes the following params:\n            (username, suppliedPass, dbPass) and must return a boolean.\n        @type customCheckFunc: C{callable}\n\n        @param caseSensitivePasswords: If true requires that every letter in\n            C{credentials.password} is exactly the same case as the it\'s\n            counterpart letter in the database.\n            This is only relevant if C{customCheckFunc} is not used.\n        @type caseSensitivePasswords: C{bool}\n        """'
newline|'\n'
name|'self'
op|'.'
name|'runQuery'
op|'='
name|'runQuery'
newline|'\n'
name|'self'
op|'.'
name|'caseSensitivePasswords'
op|'='
name|'caseSensitivePasswords'
newline|'\n'
name|'self'
op|'.'
name|'customCheckFunc'
op|'='
name|'customCheckFunc'
newline|'\n'
comment|"# We can't support hashed password credentials if we only have a hash"
nl|'\n'
comment|'# in the DB'
nl|'\n'
name|'if'
name|'customCheckFunc'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'credentialInterfaces'
op|'='
op|'('
name|'IUsernamePassword'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'credentialInterfaces'
op|'='
op|'('
nl|'\n'
name|'IUsernamePassword'
op|','
name|'IUsernameHashedPassword'
op|','
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'sql'
op|'='
name|'query'
newline|'\n'
nl|'\n'
DECL|member|requestAvatarId
dedent|''
name|'def'
name|'requestAvatarId'
op|'('
name|'self'
op|','
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Authenticates the kiosk against the database.\n        """'
newline|'\n'
comment|'# Check that the credentials instance implements at least one of our'
nl|'\n'
comment|'# interfaces'
nl|'\n'
name|'for'
name|'interface'
name|'in'
name|'self'
op|'.'
name|'credentialInterfaces'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'interface'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'error'
op|'.'
name|'UnhandledCredentials'
op|'('
op|')'
newline|'\n'
comment|'# Ask the database for the username and password'
nl|'\n'
dedent|''
name|'dbDeferred'
op|'='
name|'self'
op|'.'
name|'runQuery'
op|'('
name|'self'
op|'.'
name|'sql'
op|','
op|'('
name|'credentials'
op|'.'
name|'username'
op|','
op|')'
op|')'
newline|'\n'
comment|'# Setup our deferred result'
nl|'\n'
name|'deferred'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
name|'dbDeferred'
op|'.'
name|'addCallbacks'
op|'('
name|'self'
op|'.'
name|'_cbAuthenticate'
op|','
name|'self'
op|'.'
name|'_ebAuthenticate'
op|','
nl|'\n'
name|'callbackArgs'
op|'='
op|'('
name|'credentials'
op|','
name|'deferred'
op|')'
op|','
nl|'\n'
name|'errbackArgs'
op|'='
op|'('
name|'credentials'
op|','
name|'deferred'
op|')'
op|')'
newline|'\n'
name|'return'
name|'deferred'
newline|'\n'
nl|'\n'
DECL|member|_cbAuthenticate
dedent|''
name|'def'
name|'_cbAuthenticate'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'credentials'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checks to see if authentication was good. Called once the info has\n        been retrieved from the DB.\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'result'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|'# Username not found in db'
nl|'\n'
indent|'            '
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
string|"'Username unknown'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'username'
op|','
name|'password'
op|'='
name|'result'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'customCheckFunc'
op|':'
newline|'\n'
comment|'# Let the owner do the checking'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'customCheckFunc'
op|'('
nl|'\n'
name|'username'
op|','
name|'credentials'
op|'.'
name|'password'
op|','
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
string|"'Password mismatch'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# It's up to us or the credentials object to do the checking"
nl|'\n'
comment|'# now'
nl|'\n'
indent|'                '
name|'if'
name|'IUsernameHashedPassword'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
comment|'# Let the hashed password checker do the checking'
nl|'\n'
indent|'                    '
name|'if'
name|'credentials'
op|'.'
name|'checkPassword'
op|'('
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
string|"'Password mismatch'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'IUsernamePassword'
op|'.'
name|'providedBy'
op|'('
name|'credentials'
op|')'
op|':'
newline|'\n'
comment|'# Compare the passwords, deciging whether or not to use'
nl|'\n'
comment|'# case sensitivity'
nl|'\n'
indent|'                    '
name|'if'
name|'self'
op|'.'
name|'caseSensitivePasswords'
op|':'
newline|'\n'
indent|'                        '
name|'passOk'
op|'='
op|'('
nl|'\n'
name|'password'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'credentials'
op|'.'
name|'password'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'passOk'
op|'='
name|'password'
op|'=='
name|'credentials'
op|'.'
name|'password'
newline|'\n'
comment|'# See if they match'
nl|'\n'
dedent|''
name|'if'
name|'passOk'
op|':'
newline|'\n'
indent|'                        '
name|'deferred'
op|'.'
name|'callback'
op|'('
name|'credentials'
op|'.'
name|'username'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'deferred'
op|'.'
name|'errback'
op|'('
nl|'\n'
name|'error'
op|'.'
name|'UnauthorizedLogin'
op|'('
string|"'Password mismatch'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# OK, we don't know how to check this"
nl|'\n'
indent|'                    '
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'UnhandledCredentials'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ebAuthenticate
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_ebAuthenticate'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'credentials'
op|','
name|'deferred'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        The database lookup failed for some reason.\n        """'
newline|'\n'
name|'deferred'
op|'.'
name|'errback'
op|'('
name|'error'
op|'.'
name|'LoginFailed'
op|'('
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Run a simple echo pb server to test the checker. It defines a custom query\n    for dealing with sqlite special quoting, but otherwise it\'s a\n    straightforward use of the object.\n\n    You can test it running C{pbechoclient.py}.\n    """'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
name|'import'
name|'log'
newline|'\n'
name|'log'
op|'.'
name|'startLogging'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
string|"'testcred'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'remove'
op|'('
string|"'testcred'"
op|')'
newline|'\n'
dedent|''
name|'from'
name|'twisted'
op|'.'
name|'enterprise'
name|'import'
name|'adbapi'
newline|'\n'
name|'pool'
op|'='
name|'adbapi'
op|'.'
name|'ConnectionPool'
op|'('
string|"'pysqlite2.dbapi2'"
op|','
string|"'testcred'"
op|')'
newline|'\n'
comment|'# Create the table that will be used'
nl|'\n'
name|'query1'
op|'='
string|'"""CREATE TABLE user (\n            username string,\n            password string\n        )"""'
newline|'\n'
comment|'# Insert a test user'
nl|'\n'
name|'query2'
op|'='
string|'"""INSERT INTO user VALUES (\'guest\', \'guest\')"""'
newline|'\n'
DECL|function|cb
name|'def'
name|'cb'
op|'('
name|'res'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pool'
op|'.'
name|'runQuery'
op|'('
name|'query2'
op|')'
newline|'\n'
dedent|''
name|'pool'
op|'.'
name|'runQuery'
op|'('
name|'query1'
op|')'
op|'.'
name|'addCallback'
op|'('
name|'cb'
op|')'
newline|'\n'
nl|'\n'
name|'checker'
op|'='
name|'DBCredentialsChecker'
op|'('
name|'pool'
op|'.'
name|'runQuery'
op|','
nl|'\n'
name|'query'
op|'='
string|'"SELECT username, password FROM user WHERE username = ?"'
op|')'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
name|'import'
name|'Portal'
newline|'\n'
nl|'\n'
name|'import'
name|'pbecho'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
name|'import'
name|'pb'
newline|'\n'
name|'portal'
op|'='
name|'Portal'
op|'('
name|'pbecho'
op|'.'
name|'SimpleRealm'
op|'('
op|')'
op|')'
newline|'\n'
name|'portal'
op|'.'
name|'registerChecker'
op|'('
name|'checker'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
name|'pb'
op|'.'
name|'portno'
op|','
name|'pb'
op|'.'
name|'PBServerFactory'
op|'('
name|'portal'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'reactor'
op|'.'
name|'callWhenRunning'
op|'('
name|'main'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

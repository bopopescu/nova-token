begin_unit
comment|'# Copyright (c) 2008 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nAn example FTP server with minimal user authentication.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'protocols'
op|'.'
name|'ftp'
name|'import'
name|'FTPFactory'
op|','
name|'FTPRealm'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'portal'
name|'import'
name|'Portal'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'checkers'
name|'import'
name|'AllowAnonymousAccess'
op|','
name|'FilePasswordDB'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# First, set up a portal (twisted.cred.portal.Portal). This will be used'
nl|'\n'
comment|'# to authenticate user logins, including anonymous logins.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Part of this will be to establish the "realm" of the server - the most'
nl|'\n'
comment|'# important task in this case is to establish where anonymous users will'
nl|'\n'
comment|'# have default access to. In a real world scenario this would typically'
nl|'\n'
comment|"# point to something like '/pub' but for this example it is pointed at the"
nl|'\n'
comment|'# current working directory.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The other important part of the portal setup is to point it to a list of'
nl|'\n'
comment|'# credential checkers. In this case, the first of these is used to grant'
nl|'\n'
comment|'# access to anonymous users and is relatively simple; the second is a very'
nl|'\n'
comment|'# primitive password checker.  This example uses a plain text password file'
nl|'\n'
comment|'# that has one username:password pair per line. This checker *does* provide'
nl|'\n'
comment|'# a hashing interface, and one would normally want to use it instead of'
nl|'\n'
comment|"# plain text storage for anything remotely resembling a 'live' network. In"
nl|'\n'
comment|'# this case, the file "pass.dat" is used, and stored in the same directory'
nl|'\n'
comment|'# as the server. BAD.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Create a pass.dat file which looks like this:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ====================='
nl|'\n'
comment|'#   jeff:bozo'
nl|'\n'
comment|'#   grimmtooth:bozo2'
nl|'\n'
comment|'# ====================='
nl|'\n'
comment|'#'
nl|'\n'
DECL|variable|p
name|'p'
op|'='
name|'Portal'
op|'('
name|'FTPRealm'
op|'('
string|"'./'"
op|')'
op|','
nl|'\n'
op|'['
name|'AllowAnonymousAccess'
op|'('
op|')'
op|','
name|'FilePasswordDB'
op|'('
string|'"pass.dat"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Once the portal is set up, start up the FTPFactory and pass the portal to'
nl|'\n'
comment|'# it on startup. FTPFactory will start up a twisted.protocols.ftp.FTP()'
nl|'\n'
comment|'# handler for each incoming OPEN request. Business as usual in Twisted land.'
nl|'\n'
comment|'#'
nl|'\n'
DECL|variable|f
name|'f'
op|'='
name|'FTPFactory'
op|'('
name|'p'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# You know this part. Point the reactor to port 21 coupled with the above factory,'
nl|'\n'
comment|'# and start the event loop.'
nl|'\n'
comment|'#'
nl|'\n'
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'21'
op|','
name|'f'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

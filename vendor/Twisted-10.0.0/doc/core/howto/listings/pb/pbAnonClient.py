begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2007-2009 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nClient which will talk to the server run by pbAnonServer.py, logging in\neither anonymously or with username/password credentials.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'sys'
name|'import'
name|'stdout'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'err'
op|','
name|'startLogging'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'cred'
op|'.'
name|'credentials'
name|'import'
name|'Anonymous'
op|','
name|'UsernamePassword'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'gatherResults'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'spread'
op|'.'
name|'pb'
name|'import'
name|'PBClientFactory'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|error
name|'def'
name|'error'
op|'('
name|'why'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Catch-all errback which simply logs the failure.  This isn\'t expected to\n    be invoked in the normal case for this example.\n    """'
newline|'\n'
name|'err'
op|'('
name|'why'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|connected
dedent|''
name|'def'
name|'connected'
op|'('
name|'perspective'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Login callback which invokes the remote "foo" method on the perspective\n    which the server returned.\n    """'
newline|'\n'
name|'print'
string|'"got perspective1 ref:"'
op|','
name|'perspective'
newline|'\n'
name|'print'
string|'"asking it to foo(13)"'
newline|'\n'
name|'return'
name|'perspective'
op|'.'
name|'callRemote'
op|'('
string|'"foo"'
op|','
number|'13'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|finished
dedent|''
name|'def'
name|'finished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Callback invoked when both logins and method calls have finished to shut\n    down the reactor so the example exits.\n    """'
newline|'\n'
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Connect to a PB server running on port 8800 on localhost and log in to\n    it, both anonymously and using a username/password it will recognize.\n    """'
newline|'\n'
name|'startLogging'
op|'('
name|'stdout'
op|')'
newline|'\n'
name|'factory'
op|'='
name|'PBClientFactory'
op|'('
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'connectTCP'
op|'('
string|'"localhost"'
op|','
number|'8800'
op|','
name|'factory'
op|')'
newline|'\n'
nl|'\n'
name|'anonymousLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'Anonymous'
op|'('
op|')'
op|')'
newline|'\n'
name|'anonymousLogin'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'anonymousLogin'
op|'.'
name|'addErrback'
op|'('
name|'error'
op|','
string|'"Anonymous login failed"'
op|')'
newline|'\n'
nl|'\n'
name|'usernameLogin'
op|'='
name|'factory'
op|'.'
name|'login'
op|'('
name|'UsernamePassword'
op|'('
string|'"user1"'
op|','
string|'"pass1"'
op|')'
op|')'
newline|'\n'
name|'usernameLogin'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'usernameLogin'
op|'.'
name|'addErrback'
op|'('
name|'error'
op|','
string|'"Username/password login failed"'
op|')'
newline|'\n'
nl|'\n'
name|'bothDeferreds'
op|'='
name|'gatherResults'
op|'('
op|'['
name|'anonymousLogin'
op|','
name|'usernameLogin'
op|']'
op|')'
newline|'\n'
name|'bothDeferreds'
op|'.'
name|'addCallback'
op|'('
name|'finished'
op|')'
newline|'\n'
nl|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'DatagramProtocol'
newline|'\r\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\r\n'
name|'from'
name|'twisted'
op|'.'
name|'application'
op|'.'
name|'internet'
name|'import'
name|'MulticastServer'
newline|'\r\n'
nl|'\r\n'
DECL|class|MulticastServerUDP
name|'class'
name|'MulticastServerUDP'
op|'('
name|'DatagramProtocol'
op|')'
op|':'
newline|'\r\n'
DECL|member|startProtocol
indent|'    '
name|'def'
name|'startProtocol'
op|'('
name|'self'
op|')'
op|':'
newline|'\r\n'
indent|'        '
name|'print'
string|"'Started Listening'"
newline|'\r\n'
comment|'# Join a specific multicast group, which is the IP we will respond to'
nl|'\r\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'joinGroup'
op|'('
string|"'224.0.0.1'"
op|')'
newline|'\r\n'
nl|'\r\n'
DECL|member|datagramReceived
dedent|''
name|'def'
name|'datagramReceived'
op|'('
name|'self'
op|','
name|'datagram'
op|','
name|'address'
op|')'
op|':'
newline|'\r\n'
comment|'# The uniqueID check is to ensure we only service requests from'
nl|'\r\n'
comment|'# ourselves'
nl|'\r\n'
indent|'        '
name|'if'
name|'datagram'
op|'=='
string|"'UniqueID'"
op|':'
newline|'\r\n'
indent|'            '
name|'print'
string|'"Server Received:"'
op|'+'
name|'repr'
op|'('
name|'datagram'
op|')'
newline|'\r\n'
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
op|'('
string|'"data"'
op|','
name|'address'
op|')'
newline|'\r\n'
nl|'\r\n'
comment|'# Note that the join function is picky about having a unique object'
nl|'\r\n'
comment|'# on which to call join.  To avoid using startProtocol, the following is'
nl|'\r\n'
comment|'# sufficient:'
nl|'\r\n'
comment|"#reactor.listenMulticast(8005, MulticastServerUDP()).join('224.0.0.1')"
nl|'\r\n'
nl|'\r\n'
comment|'# Listen for multicast on 224.0.0.1:8005'
nl|'\r\n'
dedent|''
dedent|''
dedent|''
name|'reactor'
op|'.'
name|'listenMulticast'
op|'('
number|'8005'
op|','
name|'MulticastServerUDP'
op|'('
op|')'
op|')'
newline|'\r\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\r\n'
endmarker|''
end_unit

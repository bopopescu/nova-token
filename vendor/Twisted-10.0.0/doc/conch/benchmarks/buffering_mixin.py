begin_unit
comment|'# Copyright (c) 2006 Twisted Matrix Laboratories.'
nl|'\n'
comment|'# See LICENSE for details.'
nl|'\n'
nl|'\n'
string|'"""\nBenchmarks comparing the write performance of a "normal" Protocol instance\nand an instance of a Protocol class which has had L{twisted.conch.mixin}\'s\nL{BufferingMixin<twisted.conch.mixin.BufferingMixin>} mixed in to perform\nNagle-like write coalescing.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'sys'
name|'import'
name|'stdout'
newline|'\n'
name|'from'
name|'pprint'
name|'import'
name|'pprint'
newline|'\n'
name|'from'
name|'time'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'usage'
name|'import'
name|'Options'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'python'
op|'.'
name|'log'
name|'import'
name|'startLogging'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'protocol'
name|'import'
name|'ServerFactory'
op|','
name|'Protocol'
op|','
name|'ClientCreator'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
op|'.'
name|'defer'
name|'import'
name|'Deferred'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'reactor'
newline|'\n'
nl|'\n'
name|'from'
name|'twisted'
op|'.'
name|'conch'
op|'.'
name|'mixin'
name|'import'
name|'BufferingMixin'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BufferingBenchmark
name|'class'
name|'BufferingBenchmark'
op|'('
name|'Options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Options for configuring the execution parameters of a benchmark run.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|optParameters
name|'optParameters'
op|'='
op|'['
nl|'\n'
op|'('
string|"'scale'"
op|','
string|"'s'"
op|','
string|"'1'"
op|','
nl|'\n'
string|"'Work multiplier (bigger takes longer, might resist noise better)'"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|postOptions
name|'def'
name|'postOptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
string|"'scale'"
op|']'
op|'='
name|'int'
op|'('
name|'self'
op|'['
string|"'scale'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServerProtocol
dedent|''
dedent|''
name|'class'
name|'ServerProtocol'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A silent protocol which only waits for a particular amount of input and\n    then fires a Deferred.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'finished'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expected'
op|'='
name|'expected'
newline|'\n'
name|'self'
op|'.'
name|'finished'
op|'='
name|'finished'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|dataReceived
dedent|''
name|'def'
name|'dataReceived'
op|'('
name|'self'
op|','
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expected'
op|'-='
name|'len'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'expected'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'finished'
op|','
name|'self'
op|'.'
name|'finished'
op|'='
name|'self'
op|'.'
name|'finished'
op|','
name|'None'
newline|'\n'
name|'finished'
op|'.'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BufferingProtocol
dedent|''
dedent|''
dedent|''
name|'class'
name|'BufferingProtocol'
op|'('
name|'Protocol'
op|','
name|'BufferingMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A protocol which uses the buffering mixin to provide a write method.\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnbufferingProtocol
dedent|''
name|'class'
name|'UnbufferingProtocol'
op|'('
name|'Protocol'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A protocol which provides a naive write method which simply passes through\n    to the transport.\n    """'
newline|'\n'
nl|'\n'
DECL|member|connectionMade
name|'def'
name|'connectionMade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Bind write to the transport\'s write method and flush to a no-op\n        function in order to provide the same API as is provided by\n        BufferingProtocol.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'write'
op|'='
name|'self'
op|'.'
name|'transport'
op|'.'
name|'write'
newline|'\n'
name|'self'
op|'.'
name|'flush'
op|'='
name|'lambda'
op|':'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_write
dedent|''
dedent|''
name|'def'
name|'_write'
op|'('
name|'proto'
op|','
name|'byteCount'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'write'
op|'='
name|'proto'
op|'.'
name|'write'
newline|'\n'
name|'flush'
op|'='
name|'proto'
op|'.'
name|'flush'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'byteCount'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'write'
op|'('
string|"'x'"
op|')'
newline|'\n'
dedent|''
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_benchmark
dedent|''
name|'def'
name|'_benchmark'
op|'('
name|'byteCount'
op|','
name|'clientProtocol'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'finished'
op|'='
name|'Deferred'
op|'('
op|')'
newline|'\n'
DECL|function|cbFinished
name|'def'
name|'cbFinished'
op|'('
name|'ignored'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
string|"u'disconnected'"
op|']'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'result'
op|'['
string|"u'duration'"
op|']'
op|'='
name|'result'
op|'['
string|"u'disconnected'"
op|']'
op|'-'
name|'result'
op|'['
string|"u'connected'"
op|']'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'finished'
op|'.'
name|'addCallback'
op|'('
name|'cbFinished'
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'ServerFactory'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'protocol'
op|'='
name|'lambda'
op|':'
name|'ServerProtocol'
op|'('
name|'byteCount'
op|','
name|'finished'
op|')'
newline|'\n'
name|'server'
op|'='
name|'reactor'
op|'.'
name|'listenTCP'
op|'('
number|'0'
op|','
name|'f'
op|')'
newline|'\n'
nl|'\n'
name|'f2'
op|'='
name|'ClientCreator'
op|'('
name|'reactor'
op|','
name|'clientProtocol'
op|')'
newline|'\n'
name|'proto'
op|'='
name|'f2'
op|'.'
name|'connectTCP'
op|'('
string|"'127.0.0.1'"
op|','
name|'server'
op|'.'
name|'getHost'
op|'('
op|')'
op|'.'
name|'port'
op|')'
newline|'\n'
DECL|function|connected
name|'def'
name|'connected'
op|'('
name|'proto'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'['
string|"u'connected'"
op|']'
op|'='
name|'time'
op|'('
op|')'
newline|'\n'
name|'return'
name|'proto'
newline|'\n'
dedent|''
name|'proto'
op|'.'
name|'addCallback'
op|'('
name|'connected'
op|')'
newline|'\n'
name|'proto'
op|'.'
name|'addCallback'
op|'('
name|'_write'
op|','
name|'byteCount'
op|')'
newline|'\n'
name|'return'
name|'finished'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_benchmarkBuffered
dedent|''
name|'def'
name|'_benchmarkBuffered'
op|'('
name|'byteCount'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_benchmark'
op|'('
name|'byteCount'
op|','
name|'BufferingProtocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_benchmarkUnbuffered
dedent|''
name|'def'
name|'_benchmarkUnbuffered'
op|'('
name|'byteCount'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_benchmark'
op|'('
name|'byteCount'
op|','
name|'UnbufferingProtocol'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|benchmark
dedent|''
name|'def'
name|'benchmark'
op|'('
name|'scale'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Benchmark and return information regarding the relative performance of a\n    protocol which does not use the buffering mixin and a protocol which\n    does.\n\n    @type scale: C{int}\n    @param scale: A multipler to the amount of work to perform\n\n    @return: A Deferred which will fire with a dictionary mapping each of\n    the two unicode strings C{u\'buffered\'} and C{u\'unbuffered\'} to\n    dictionaries describing the performance of a protocol of each type. \n    These value dictionaries will map the unicode strings C{u\'connected\'}\n    and C{u\'disconnected\'} to the times at which each of those events\n    occurred and C{u\'duration\'} two the difference between these two values.\n    """'
newline|'\n'
name|'overallResult'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'byteCount'
op|'='
number|'1024'
newline|'\n'
nl|'\n'
name|'bufferedDeferred'
op|'='
name|'_benchmarkBuffered'
op|'('
name|'byteCount'
op|'*'
name|'scale'
op|')'
newline|'\n'
DECL|function|didBuffered
name|'def'
name|'didBuffered'
op|'('
name|'bufferedResult'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'overallResult'
op|'['
string|"u'buffered'"
op|']'
op|'='
name|'bufferedResult'
newline|'\n'
name|'unbufferedDeferred'
op|'='
name|'_benchmarkUnbuffered'
op|'('
name|'byteCount'
op|'*'
name|'scale'
op|')'
newline|'\n'
DECL|function|didUnbuffered
name|'def'
name|'didUnbuffered'
op|'('
name|'unbufferedResult'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'overallResult'
op|'['
string|"u'unbuffered'"
op|']'
op|'='
name|'unbufferedResult'
newline|'\n'
name|'return'
name|'overallResult'
newline|'\n'
dedent|''
name|'unbufferedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'didUnbuffered'
op|')'
newline|'\n'
name|'return'
name|'unbufferedDeferred'
newline|'\n'
dedent|''
name|'bufferedDeferred'
op|'.'
name|'addCallback'
op|'('
name|'didBuffered'
op|')'
newline|'\n'
name|'return'
name|'bufferedDeferred'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
name|'args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Perform a single benchmark run, starting and stopping the reactor and\n    logging system as necessary.\n    """'
newline|'\n'
name|'startLogging'
op|'('
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
name|'options'
op|'='
name|'BufferingBenchmark'
op|'('
op|')'
newline|'\n'
name|'options'
op|'.'
name|'parseOptions'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'benchmark'
op|'('
name|'options'
op|'['
string|"'scale'"
op|']'
op|')'
newline|'\n'
DECL|function|cbBenchmark
name|'def'
name|'cbBenchmark'
op|'('
name|'result'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pprint'
op|'('
name|'result'
op|')'
newline|'\n'
DECL|function|ebBenchmark
dedent|''
name|'def'
name|'ebBenchmark'
op|'('
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'err'
op|'.'
name|'getTraceback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addCallbacks'
op|'('
name|'cbBenchmark'
op|','
name|'ebBenchmark'
op|')'
newline|'\n'
DECL|function|stopReactor
name|'def'
name|'stopReactor'
op|'('
name|'ign'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reactor'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'d'
op|'.'
name|'addBoth'
op|'('
name|'stopReactor'
op|')'
newline|'\n'
name|'reactor'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/python'
nl|'\n'
nl|'\n'
name|'from'
name|'slides'
name|'import'
name|'Lecture'
op|','
name|'Slide'
op|','
name|'Image'
op|','
name|'Bullet'
op|','
name|'PRE'
op|','
name|'URL'
op|','
name|'SubBullet'
op|','
name|'NumSlide'
op|','
name|'toHTML'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
DECL|class|Bad
name|'class'
name|'Bad'
op|':'
newline|'\n'
indent|'    '
string|'"""Marks the text in red."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'text'
op|'='
name|'text'
newline|'\n'
nl|'\n'
DECL|member|toHTML
dedent|''
name|'def'
name|'toHTML'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'\'<font color="red">%s</font>\''
op|'%'
name|'toHTML'
op|'('
name|'self'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Lecture
dedent|''
dedent|''
name|'class'
name|'Lecture'
op|'('
name|'Lecture'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|getFooter
indent|'    '
name|'def'
name|'getFooter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'\'<div class="footer"><hr noshade />Presented by <b>ZOTECA&nbsp;</b></div>\''
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'EVENT_LOOP_CODE'
op|'='
string|'"""\\\n# pseudo-code reactor\nclass Reactor:\n    def run(self):\n        while 1:\n            e = self.getNextEvent()\n            e.run()\n"""'
newline|'\n'
nl|'\n'
name|'PROTOCOL_CODE'
op|'='
string|'"""\\\nfrom twisted.internet.protocol import Protocol\n\nclass Echo(Protocol):\n    def connectionMade(self):\n        print \'connection made with\', self.transport.getPeer()\n    def dataReceived(self, data):\n        self.transport.write(data)\n    def connectionLost(self, reason):\n        print \'connection was lost, alas\'\n"""'
newline|'\n'
nl|'\n'
name|'SERVER_CODE'
op|'='
string|'"""\\\nfrom twisted.internet.protocol import ServerFactory\n\nclass EchoFactory(ServerFactory):\n\n    def buildProtocol(self, addr):\n        p = Echo()\n        p.factory = self\n        return p\n"""'
newline|'\n'
nl|'\n'
name|'RUNNING_SERVER_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import reactor\n\nf = EchoFactory()\nreactor.listenTCP(7771, f)\nreactor.run()\n"""'
newline|'\n'
nl|'\n'
name|'CLIENT_PROTOCOL_CODE'
op|'='
string|'"""\\\nfrom twisted.internet.protocol import Protocol\n\nclass MyClientProtocol(Protocol):\n    buffer = \'\'\n    def connectionMade(self):\n        self.transport.write(\'hello world\')\n    def dataReceived(self, data):\n        self.buffer += data\n        if self.buffer == \'hello world\':\n            self.transport.loseConnection()\n"""'
newline|'\n'
nl|'\n'
name|'CLIENT_FACTORY_CODE'
op|'='
string|'"""\\\nfrom twisted.internet.protocol import ClientFactory\n\nclass MyFactory(ClientFactory):\n\n    protocol = MyClientProtocol\n\n    def startedConnecting(self, connector):\n        pass # we could connector.stopConnecting()\n    def clientConnectionMade(self, connector):\n        pass # we could connector.stopConnecting()\n    def clientConnectionLost(self, connector, reason):\n        connector.connect() # reconnect\n    def clientConnectionFailed(self, connector, reason):\n        print "connection failed"\n        reactor.stop()\n"""'
newline|'\n'
nl|'\n'
name|'CLIENT_CONNECT_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import reactor\n\nreactor.connectTCP(\'localhost\', 7771, MyFactory(), timeout=30)\nreactor.run()\n"""'
newline|'\n'
nl|'\n'
name|'PULL_PRODUCER_CODE'
op|'='
string|'"""\\\nclass FileProducer:\n\n    def __init__(self, file, size, transport):\n        self.file = file; self.size = size\n        self.transport = transport # the consumer\n        transport.registerProducer(self, 0)\n    \n    def resumeProducing(self):\n        if not self.transport: return\n        self.transport.write(self.file.read(16384))\n        if self.file.tell() == self.size:\n            self.transport.unregisterProducer()\n            self.transport = None\n\n    def pauseProducing(self): pass\n    \n    def stopProducing(self):\n        self.file.close()\n        self.request = None\n"""'
newline|'\n'
nl|'\n'
name|'PUSH_PRODUCER_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import reactor\n\nclass GarbageProducer:\n\n    def __init__(self, transport):\n        self.paused = 0; self.stopped = 0\n        self.transport = transport\n        transport.registerProducer(self, 1)\n        self.produce()\n\n    def produce(self):\n        if not self.paused:\n            self.transport.write(\'blabla\')\n        if not self.stopped:\n            reactor.callLater(0.1, self.produce)\n\n    def stopProducing(self):\n        self.stopped = 1\n\n    def pauseProducing(self):\n        self.paused = 1\n\n    def resumeProducing(self):\n        self.paused = 0\n"""'
newline|'\n'
nl|'\n'
name|'SCHEDULING_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import reactor\n\ndef f(x, y=1):\n    print x, y\n\ni = reactor.callLater(0.1, f, 2, y=4)\ni.delay(2)\ni.reset(1)\ni.cancel()\n"""'
newline|'\n'
nl|'\n'
name|'FACTORY_START_CODE'
op|'='
string|'"""\\\nfrom twisted.internet.protocol import ServerFactory\n\nclass LogFactory(ServerFactory):\n\n    def startFactory(self):\n        self.log = open(\'log.txt\', \'w\')\n\n    def stopFactory(self):\n        self.log.close()\n"""'
newline|'\n'
nl|'\n'
name|'LOGGING_CODE'
op|'='
string|'"""\\\nfrom twisted.python import log\n\n# by default only errors are logged, to stderr\nlogFile = open(\'log.txt\', \'a\')\nlog.startLogging(logFile)\n\nlog.msg(\'Something has occurred\')\n"""'
newline|'\n'
nl|'\n'
name|'LOGGING_ERRORS_CODE'
op|'='
string|'"""\nfrom twisted.python import log, failure\n\ne = ValueError(\'ONO\')\nlog.err(failure.Failure(e))\n\ntry:\n    doSomethingElse()\nexcept:\n    log.deferr()\n"""'
newline|'\n'
nl|'\n'
name|'SERVICE_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import app\n\nclass FooService(app.ApplicationService):\n    def startService(self):\n        # do startup stuff\n    def stopService(self):\n        # do shutdown stuff\n    def foobrizate(self):\n        # business logic!\n\napplication = app.Application(\'foobnator\')\nsvc = FooService(\'foo\', application)\napplication.getServiceNamed(\'foo\') is svc # True\n"""'
newline|'\n'
nl|'\n'
name|'RUNNABLE_APP_CODE'
op|'='
string|'"""\\\n# this is web.py\nfrom twisted.internet import app\nfrom twisted.web import static, server\n\napplication = app.Application(\'web\')\napplication.listenTCP(8080, server.Site(static.File(\'/var/www\')))\n\nif __name__ == \'__main__\':\n    application.run(save=0)\n"""'
newline|'\n'
nl|'\n'
name|'TWISTD_CODE'
op|'='
string|'"""\\\n$ twistd -y web.py\n$ lynx http://localhost:8080\n$ kill `cat twistd.pid`\n"""'
newline|'\n'
nl|'\n'
name|'GUI_CODE'
op|'='
string|'"""\\\nfrom twisted.internet import gtkreactor\ngtkreactor.install()\nimport gtk\nw = gtk.GtkWindow(gtk.WINDOW_TOPLEVEL)\nw.show_all()\nfrom twisted.internet import reactor\nreactor.run()\n"""'
newline|'\n'
nl|'\n'
DECL|variable|lecture
name|'lecture'
op|'='
name|'Lecture'
op|'('
nl|'\n'
string|'"The twisted.internet Tutorial of Doom"'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Part 1 - Introduction"'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# there are different ways to do networking'
nl|'\n'
comment|'# mention processes are not cross-platform'
nl|'\n'
name|'Slide'
op|'('
string|'"Choosing a networking paradigm for the enterprise"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Event driven"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
name|'Bad'
op|'('
string|'"Threads"'
op|')'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Others which we will ignore (processes, SEDA, ...)"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|"# it's a metaphor!"
nl|'\n'
name|'Slide'
op|'('
string|'"Applied Bistromathics 101"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Consider a restaurant as a network application"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Clients come in, make requests to the waiters"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Waiters act on clients\' choices"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|"# an event loop is efficient, doesn't waste time"
nl|'\n'
comment|'# event loop is also used for GUIs'
nl|'\n'
name|'Slide'
op|'('
string|'"The event driven waiter"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"One waiter, serving all tables"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Waiter takes orders from tables to kitchen"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Waiter takes food from kitchen to tables"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# not accurate, but the problems are real. avoid threads if you can'
nl|'\n'
name|'Slide'
op|'('
string|'"Threads (a caricature)"'
op|','
nl|'\n'
name|'Bullet'
op|'('
name|'Bad'
op|'('
string|'"One waiter per table"'
op|')'
op|')'
op|','
nl|'\n'
name|'SubBullet'
op|'('
string|'"Problems:"'
op|','
nl|'\n'
name|'Bullet'
op|'('
name|'Bad'
op|'('
string|'"Expensive"'
op|')'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
name|'Bad'
op|'('
string|'"Waiters need to be careful not bump into each other"'
op|')'
op|')'
op|','
nl|'\n'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# why threads are sometimes necessary'
nl|'\n'
name|'Slide'
op|'('
string|'"When do we want threads?"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Long running, blocking operations"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Classic example: database access"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# today we will discuss only (parts of) twisted.internet'
nl|'\n'
name|'Slide'
op|'('
string|'"Twisted: The Framework of Your Internet"'
op|','
nl|'\n'
name|'Image'
op|'('
string|'"twisted-overview.png"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Project Stats"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"URL: "'
op|','
name|'URL'
op|'('
string|'"http://www.twistedmatrix.com"'
op|')'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"License: LGPL"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Number of developers: approximately 20"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Version: 1.0.3"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Platforms: Unix, Win32"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Started in January 2000 by Glyph Lefkowitz"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Part 2 - Basic Networking With Twisted"'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# quick review of how the internet works'
nl|'\n'
name|'Slide'
op|'('
string|'"Internet!"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Network of interconnected machines"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Each machine has one (or more) IP addresses"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"DNS maps names (\'www.yahoo.com\') to IPs (216.109.125.69)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"TCP runs on top of IP, servers listen on of of 65536 ports,"'
nl|'\n'
string|'" e.g. HTTP on port 80"'
op|')'
op|','
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# we need to understand certain basic terms before we continue.'
nl|'\n'
comment|'# the event loop is the last thing we run - it waits until'
nl|'\n'
comment|'# an event occurs, then calls the appropriate handler.'
nl|'\n'
name|'Slide'
op|'('
string|'"Basic Definitions - Reactor"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"An object implementing the event loop"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'EVENT_LOOP_CODE'
op|')'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Basic Definitions - Transport"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Moves data from one location to another"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Main focus of talk are ordered, reliable byte stream transports"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Examples: TCP, SSL, Unix sockets"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"UDP is a different kind of transport"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# the client is the side which initiated the connection'
nl|'\n'
comment|'# HTTP and SSH run on TCP-like transports, DNS runs on UDP or TCP'
nl|'\n'
name|'Slide'
op|'('
string|'"Basic Definitions - Protocol"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Defines the rules for communication between two hosts"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Protocols communicate using a transport"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Typically there is a client, and server"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Examples: HTTP, SSH, DNS"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"All Together Now"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"The reactor gets events from the transports (read from network, write to network)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"The reactor passes events to protocol (connection lost, data received)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"The protocol tells the transport to do stuff (write data, lose connection)"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# designing a new protocol is usually a bad idea, there are lots of'
nl|'\n'
comment|'# things you can get wrong, both in design and in implementation'
nl|'\n'
name|'Slide'
op|'('
string|'"How To Implement A Protocol"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Hopefully, you don\'t."'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# XXX split into three expanded slides?'
nl|'\n'
name|'NumSlide'
op|'('
string|'"How To Not Implement A Protocol"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Use an existing Twisted implementation of the protocol"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Use XML-RPC"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Use Perspective Broker, a remote object protocol"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# connectionMade is called when connection is made'
nl|'\n'
comment|'# dataReceived is called every time we receive data from the network'
nl|'\n'
comment|'# connectionLost is called when the connection is lost'
nl|'\n'
name|'Slide'
op|'('
string|'"How To Really Implement A Protocol"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'PROTOCOL_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# factories - why?'
nl|'\n'
name|'Slide'
op|'('
string|'"Factories"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"A protocol instance only exists as long as the connection is there"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Protocols want to share state"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Solution: a factory object that creates protocol instances"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# factory code - notice how protocol instances have access to the factory'
nl|'\n'
comment|"# instance, for shared state. buildProtocol can return None if we don't"
nl|'\n'
comment|'# want to accept connections from that address.'
nl|'\n'
name|'Slide'
op|'('
string|'"A Server Factory"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'SERVER_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# running the server we just wrote'
nl|'\n'
name|'Slide'
op|'('
string|'"Connecting A Factory To A TCP Port"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'RUNNING_SERVER_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# transport independence - using listenUNIX as example'
nl|'\n'
name|'Slide'
op|'('
string|'"Transport Independence"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Notice how none of the protocol code was TCP specific"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"We can reuse same protocol with different transports"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"We could use listenUNIX for unix sockets with same code"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Likewise listenSSL for SSL or TLS"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Client Side Protocol"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'CLIENT_PROTOCOL_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# client connections are different'
nl|'\n'
name|'Slide'
op|'('
string|'"Client Side Factories"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Different requirements than server"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Failure to connect"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Automatic reconnecting"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Cancelling and timing out connections"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# example client factory - explain use of default buildProtocol'
nl|'\n'
name|'Slide'
op|'('
string|'"Client Side Factories 2"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'CLIENT_FACTORY_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# connectTCP'
nl|'\n'
name|'Slide'
op|'('
string|'"Connection API"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'CLIENT_CONNECT_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# explain how transports buffer the output'
nl|'\n'
name|'Slide'
op|'('
string|'"Buffering"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"When we write to transport, data is buffered"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"loseConnection will wait until all buffered data is sent, and producer (if any) is finished"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# start/stopFactory'
nl|'\n'
name|'Slide'
op|'('
string|'"Factory Resources"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Factories may want to create/clean up resources"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"startFactory() - called on start of listening/connect"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"stopFactory() - called on end of listening/connect"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Called once even if factory listening/connecting multiple ports"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# example of restartable factory'
nl|'\n'
name|'Slide'
op|'('
string|'"Factory Resources 2"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'FACTORY_START_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Producers and Consumers"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"What if we want to send out lots of data?"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Can\'t write it out all at once"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"We don\'t want to write too fast"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Producers"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Produce data for a consumer, in this case by calling transport\'s write()"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Pausable (should implement pauseProducing and resumeProducing methods)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Push - keeps producing unless told to pause"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Pull - produces only when consumer tells it to"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Consumers"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"registerProducer(producer, streaming)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Will notify producer to pause if buffers are full"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Sample Pull Producer"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'PULL_PRODUCER_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Sample Push Producer"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'PUSH_PRODUCER_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# scheduling events'
nl|'\n'
name|'Slide'
op|'('
string|'"Scheduling"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'SCHEDULING_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# pluggable reactors - why?'
nl|'\n'
name|'Slide'
op|'('
string|'"Choosing a Reactor - Why?"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"GUI toolkits have their own event loop"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Platform specific event loops"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Choosing a Reactor"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Twisted supports multiple reactors"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Default, gtk, gtk2, qt, win32 and others"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Tk and wxPython as non-reactors"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Reactor installation should be first thing code does"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# example GUI client'
nl|'\n'
name|'Slide'
op|'('
string|'"Example GTK Program"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'GUI_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# you can learn more about'
nl|'\n'
name|'Slide'
op|'('
string|'"Learning more about networking and scheduling"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"twisted.internet.interfaces"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"http://twistedmatrix.com/document/howtos/"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Part 3 - Building Applications With Twisted"'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# the concept of the application'
nl|'\n'
name|'Slide'
op|'('
string|'"Applications"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Reactor is a concept of event loop"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Application is higher-level"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Configuration, services, persistence"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Like reactor, you can listenTCP, connectTCP, etc."'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# services concept'
nl|'\n'
name|'Slide'
op|'('
string|'"Services"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Services can be registered with Application"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"A service encapsulates \'business logic\'"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Infrastructure outside the scope of protocols"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Examples: authentication, mail storage"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# service example code'
nl|'\n'
name|'Slide'
op|'('
string|'"Services 2"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'SERVICE_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# logging'
nl|'\n'
name|'Slide'
op|'('
string|'"Logging"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'LOGGING_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# logging errors'
nl|'\n'
comment|'# explain why this is good idea (twistd -b)'
nl|'\n'
name|'Slide'
op|'('
string|'"Logging Errors"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'LOGGING_ERRORS_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# twistd idea'
nl|'\n'
name|'Slide'
op|'('
string|'"twistd - Application Runner"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Single access point for running applications"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Separate configuration from deployment"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# twistd features'
nl|'\n'
name|'Slide'
op|'('
string|'"twistd Features"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Daemonization"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Log file selection (including to syslog)"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Choosing reactor"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Running under debugger"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Profiling"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"uid, gid"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Future: WinNT Services"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# making modules for twistd -y'
nl|'\n'
name|'Slide'
op|'('
string|'"Making a runnable application"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'RUNNABLE_APP_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# running the server'
nl|'\n'
name|'Slide'
op|'('
string|'"Running twistd"'
op|','
nl|'\n'
name|'PRE'
op|'('
name|'TWISTD_CODE'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Part 4: Further Bits and Pieces"'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Other twisted.internet Features"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"UDP, Multicast, Unix sockets, Serial"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Thread integration"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Deferreds"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Deferred - a promise of a result"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Supports callback chains for results and exceptions"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Used across the whole framework"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Make event-driven programming much easier"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Can work with asyncore too, not just Twisted"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Protocol implementations"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Low-level implementations, without policies"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"SSH, HTTP, SMTP, IRC, POP3, telnet, FTP, TOC, OSCAR, SOCKSv4, finger, DNS, NNTP, IMAP, LDAP"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Common GPS modem protocols"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Frameworks"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"twisted.web - Web server framework"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"twisted.news - NNTP server framework"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"twisted.words - messaging framework"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"twisted.names - DNS server"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Perspective Broker"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Object publishing protocol"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Fast, efficient and extendable"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Two-way, asynchronous"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Secure and encourages secure model"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Implemented in Python for Twisted, and Java"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Lore"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Simple documentation system"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Simple subset of XHTML"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Generates LaTeX, XHTML"'
op|')'
op|')'
op|','
nl|'\n'
nl|'\n'
name|'Slide'
op|'('
string|'"Reality"'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Multiplayer text simulation framework"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Original source of Twisted project"'
op|')'
op|','
nl|'\n'
name|'Bullet'
op|'('
string|'"Now a totally different project"'
op|')'
op|')'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'lecture'
op|'.'
name|'renderHTML'
op|'('
string|'"."'
op|','
string|'"twisted_internet-%02d.html"'
op|','
name|'css'
op|'='
string|'"main.css"'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

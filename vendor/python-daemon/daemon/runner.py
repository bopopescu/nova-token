begin_unit
comment|'# -*- coding: utf-8 -*-'
nl|'\n'
nl|'\n'
comment|'# daemon/runner.py'
nl|'\n'
comment|'# Part of python-daemon, an implementation of PEP 3143.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright \xc2\xa9 2009\xe2\x80\x932010 Ben Finney <ben+python@benfinney.id.au>'
nl|'\n'
comment|'# Copyright \xc2\xa9 2007\xe2\x80\x932008 Robert Niederreiter, Jens Klein'
nl|'\n'
comment|'# Copyright \xc2\xa9 2003 Clark Evans'
nl|'\n'
comment|'# Copyright \xc2\xa9 2002 Noah Spurrier'
nl|'\n'
comment|'# Copyright \xc2\xa9 2001 J\xc3\xbcrgen Hermann'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This is free software: you may copy, modify, and/or distribute this work'
nl|'\n'
comment|'# under the terms of the Python Software Foundation License, version 2 or'
nl|'\n'
comment|'# later as published by the Python Software Foundation.'
nl|'\n'
comment|'# No warranty expressed or implied. See the file LICENSE.PSF-2 for details.'
nl|'\n'
nl|'\n'
string|'""" Daemon runner library.\n    """'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
nl|'\n'
name|'import'
name|'pidlockfile'
newline|'\n'
nl|'\n'
name|'from'
name|'daemon'
name|'import'
name|'DaemonContext'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DaemonRunnerError
name|'class'
name|'DaemonRunnerError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Abstract base class for errors from DaemonRunner. """'
newline|'\n'
nl|'\n'
DECL|class|DaemonRunnerInvalidActionError
dedent|''
name|'class'
name|'DaemonRunnerInvalidActionError'
op|'('
name|'ValueError'
op|','
name|'DaemonRunnerError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Raised when specified action for DaemonRunner is invalid. """'
newline|'\n'
nl|'\n'
DECL|class|DaemonRunnerStartFailureError
dedent|''
name|'class'
name|'DaemonRunnerStartFailureError'
op|'('
name|'RuntimeError'
op|','
name|'DaemonRunnerError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Raised when failure starting DaemonRunner. """'
newline|'\n'
nl|'\n'
DECL|class|DaemonRunnerStopFailureError
dedent|''
name|'class'
name|'DaemonRunnerStopFailureError'
op|'('
name|'RuntimeError'
op|','
name|'DaemonRunnerError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Raised when failure stopping DaemonRunner. """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DaemonRunner
dedent|''
name|'class'
name|'DaemonRunner'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Controller for a callable running in a separate background process.\n\n        The first command-line argument is the action to take:\n\n        * \'start\': Become a daemon and call `app.run()`.\n        * \'stop\': Exit the daemon process specified in the PID file.\n        * \'restart\': Stop, then start.\n\n        """'
newline|'\n'
nl|'\n'
DECL|variable|start_message
name|'start_message'
op|'='
string|'"started with pid %(pid)d"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set up the parameters of a new runner.\n\n            The `app` argument must have the following attributes:\n\n            * `stdin_path`, `stdout_path`, `stderr_path`: Filesystem\n              paths to open and replace the existing `sys.stdin`,\n              `sys.stdout`, `sys.stderr`.\n\n            * `pidfile_path`: Absolute filesystem path to a file that\n              will be used as the PID file for the daemon. If\n              ``None``, no PID file will be used.\n\n            * `pidfile_timeout`: Used as the default acquisition\n              timeout value supplied to the runner\'s PID lock file.\n\n            * `run`: Callable that will be invoked when the daemon is\n              started.\n            \n            """'
newline|'\n'
name|'self'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'daemon_context'
op|'='
name|'DaemonContext'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'daemon_context'
op|'.'
name|'stdin'
op|'='
name|'open'
op|'('
name|'app'
op|'.'
name|'stdin_path'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'daemon_context'
op|'.'
name|'stdout'
op|'='
name|'open'
op|'('
name|'app'
op|'.'
name|'stdout_path'
op|','
string|"'w+'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'daemon_context'
op|'.'
name|'stderr'
op|'='
name|'open'
op|'('
nl|'\n'
name|'app'
op|'.'
name|'stderr_path'
op|','
string|"'w+'"
op|','
name|'buffering'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'pidfile'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'app'
op|'.'
name|'pidfile_path'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pidfile'
op|'='
name|'make_pidlockfile'
op|'('
nl|'\n'
name|'app'
op|'.'
name|'pidfile_path'
op|','
name|'app'
op|'.'
name|'pidfile_timeout'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'daemon_context'
op|'.'
name|'pidfile'
op|'='
name|'self'
op|'.'
name|'pidfile'
newline|'\n'
nl|'\n'
DECL|member|_usage_exit
dedent|''
name|'def'
name|'_usage_exit'
op|'('
name|'self'
op|','
name|'argv'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Emit a usage message, then exit.\n            """'
newline|'\n'
name|'progname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'usage_exit_code'
op|'='
number|'2'
newline|'\n'
name|'action_usage'
op|'='
string|'"|"'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'action_funcs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'message'
op|'='
string|'"usage: %(progname)s %(action_usage)s"'
op|'%'
name|'vars'
op|'('
op|')'
newline|'\n'
name|'emit_message'
op|'('
name|'message'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
name|'usage_exit_code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_args
dedent|''
name|'def'
name|'parse_args'
op|'('
name|'self'
op|','
name|'argv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Parse command-line arguments.\n            """'
newline|'\n'
name|'if'
name|'argv'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'argv'
op|'='
name|'sys'
op|'.'
name|'argv'
newline|'\n'
nl|'\n'
dedent|''
name|'min_args'
op|'='
number|'2'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'argv'
op|')'
op|'<'
name|'min_args'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_usage_exit'
op|'('
name|'argv'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'action'
op|'='
name|'argv'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'action'
name|'not'
name|'in'
name|'self'
op|'.'
name|'action_funcs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_usage_exit'
op|'('
name|'argv'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start
dedent|''
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Open the daemon context and run the application.\n            """'
newline|'\n'
name|'if'
name|'is_pidfile_stale'
op|'('
name|'self'
op|'.'
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'break_lock'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'daemon_context'
op|'.'
name|'open'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pidlockfile'
op|'.'
name|'AlreadyLocked'
op|':'
newline|'\n'
indent|'            '
name|'pidfile_path'
op|'='
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'path'
newline|'\n'
name|'raise'
name|'DaemonRunnerStartFailureError'
op|'('
nl|'\n'
string|'"PID file %(pidfile_path)r already locked"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
name|'self'
op|'.'
name|'start_message'
op|'%'
name|'vars'
op|'('
op|')'
newline|'\n'
name|'emit_message'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'app'
op|'.'
name|'run'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_terminate_daemon_process
dedent|''
name|'def'
name|'_terminate_daemon_process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Terminate the daemon process specified in the current PID file.\n            """'
newline|'\n'
name|'pid'
op|'='
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'read_pid'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'kill'
op|'('
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DaemonRunnerStopFailureError'
op|'('
nl|'\n'
string|'"Failed to terminate %(pid)d: %(exc)s"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stop
dedent|''
dedent|''
name|'def'
name|'_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Exit the daemon process specified in the current PID file.\n            """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'is_locked'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pidfile_path'
op|'='
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'path'
newline|'\n'
name|'raise'
name|'DaemonRunnerStopFailureError'
op|'('
nl|'\n'
string|'"PID file %(pidfile_path)r not locked"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'is_pidfile_stale'
op|'('
name|'self'
op|'.'
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'pidfile'
op|'.'
name|'break_lock'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_terminate_daemon_process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_restart
dedent|''
dedent|''
name|'def'
name|'_restart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Stop, then start.\n            """'
newline|'\n'
name|'self'
op|'.'
name|'_stop'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|action_funcs
dedent|''
name|'action_funcs'
op|'='
op|'{'
nl|'\n'
string|"'start'"
op|':'
name|'_start'
op|','
nl|'\n'
string|"'stop'"
op|':'
name|'_stop'
op|','
nl|'\n'
string|"'restart'"
op|':'
name|'_restart'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_action_func
name|'def'
name|'_get_action_func'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return the function for the specified action.\n\n            Raises ``DaemonRunnerInvalidActionError`` if the action is\n            unknown.\n\n            """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'='
name|'self'
op|'.'
name|'action_funcs'
op|'['
name|'self'
op|'.'
name|'action'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'DaemonRunnerInvalidActionError'
op|'('
nl|'\n'
string|'"Unknown action: %(action)r"'
op|'%'
name|'vars'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'func'
newline|'\n'
nl|'\n'
DECL|member|do_action
dedent|''
name|'def'
name|'do_action'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Perform the requested action.\n            """'
newline|'\n'
name|'func'
op|'='
name|'self'
op|'.'
name|'_get_action_func'
op|'('
op|')'
newline|'\n'
name|'func'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|emit_message
dedent|''
dedent|''
name|'def'
name|'emit_message'
op|'('
name|'message'
op|','
name|'stream'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Emit a message to the specified stream (default `sys.stderr`). """'
newline|'\n'
name|'if'
name|'stream'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
dedent|''
name|'stream'
op|'.'
name|'write'
op|'('
string|'"%(message)s\\n"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_pidlockfile
dedent|''
name|'def'
name|'make_pidlockfile'
op|'('
name|'path'
op|','
name|'acquire_timeout'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Make a PIDLockFile instance with the given filesystem path. """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'path'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'='
name|'ValueError'
op|'('
string|'"Not a filesystem path: %(path)r"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'error'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'='
name|'ValueError'
op|'('
string|'"Not an absolute path: %(path)r"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'error'
newline|'\n'
dedent|''
name|'lockfile'
op|'='
name|'pidlockfile'
op|'.'
name|'TimeoutPIDLockFile'
op|'('
name|'path'
op|','
name|'acquire_timeout'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'lockfile'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_pidfile_stale
dedent|''
name|'def'
name|'is_pidfile_stale'
op|'('
name|'pidfile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Determine whether a PID file is stale.\n\n        Return ``True`` (\xe2\x80\x9cstale\xe2\x80\x9d) if the contents of the PID file are\n        valid but do not match the PID of a currently-running process;\n        otherwise return ``False``.\n\n        """'
newline|'\n'
name|'result'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'pidfile_pid'
op|'='
name|'pidfile'
op|'.'
name|'read_pid'
op|'('
op|')'
newline|'\n'
name|'if'
name|'pidfile_pid'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'kill'
op|'('
name|'pidfile_pid'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ESRCH'
op|':'
newline|'\n'
comment|'# The specified PID does not exist'
nl|'\n'
indent|'                '
name|'result'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
endmarker|''
end_unit

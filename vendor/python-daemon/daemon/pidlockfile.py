begin_unit
comment|'# -*- coding: utf-8 -*-'
nl|'\n'
nl|'\n'
comment|'# daemon/pidlockfile.py'
nl|'\n'
comment|'# Part of python-daemon, an implementation of PEP 3143.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright \xc2\xa9 2008\xe2\x80\x932010 Ben Finney <ben+python@benfinney.id.au>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This is free software: you may copy, modify, and/or distribute this work'
nl|'\n'
comment|'# under the terms of the Python Software Foundation License, version 2 or'
nl|'\n'
comment|'# later as published by the Python Software Foundation.'
nl|'\n'
comment|'# No warranty expressed or implied. See the file LICENSE.PSF-2 for details.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'""" Lockfile behaviour implemented via Unix PID files.\n    """'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
nl|'\n'
name|'from'
name|'lockfile'
name|'import'
op|'('
nl|'\n'
name|'FileLock'
op|','
nl|'\n'
name|'AlreadyLocked'
op|','
name|'LockFailed'
op|','
nl|'\n'
name|'NotLocked'
op|','
name|'NotMyLock'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PIDFileError
name|'class'
name|'PIDFileError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Abstract base class for errors specific to PID files. """'
newline|'\n'
nl|'\n'
DECL|class|PIDFileParseError
dedent|''
name|'class'
name|'PIDFileParseError'
op|'('
name|'ValueError'
op|','
name|'PIDFileError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Raised when parsing contents of PID file fails. """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PIDLockFile
dedent|''
name|'class'
name|'PIDLockFile'
op|'('
name|'FileLock'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Lockfile implemented as a Unix PID file.\n\n        The PID file is named by the attribute `path`. When locked,\n        the file will be created with a single line of text,\n        containing the process ID (PID) of the process that acquired\n        the lock.\n\n        The lock is acquired and maintained as per `LinkFileLock`.\n\n        """'
newline|'\n'
nl|'\n'
DECL|member|read_pid
name|'def'
name|'read_pid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Get the PID from the lock file.\n            """'
newline|'\n'
name|'result'
op|'='
name|'read_pid_from_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|acquire
dedent|''
name|'def'
name|'acquire'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Acquire the lock.\n\n            Locks the PID file then creates the PID file for this\n            lock. The `timeout` parameter is used as for the\n            `LinkFileLock` class.\n\n            """'
newline|'\n'
name|'super'
op|'('
name|'PIDLockFile'
op|','
name|'self'
op|')'
op|'.'
name|'acquire'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'write_pid_to_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'LockFailed'
op|'('
string|'"%(exc)s"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
name|'raise'
name|'error'
newline|'\n'
nl|'\n'
DECL|member|release
dedent|''
dedent|''
name|'def'
name|'release'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Release the lock.\n\n            Removes the PID file then releases the lock, or raises an\n            error if the current process does not hold the lock.\n\n            """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'i_am_locking'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'remove_existing_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'PIDLockFile'
op|','
name|'self'
op|')'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|break_lock
dedent|''
name|'def'
name|'break_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Break an existing lock.\n\n            If the lock is held, breaks the lock and removes the PID\n            file.\n\n            """'
newline|'\n'
name|'super'
op|'('
name|'PIDLockFile'
op|','
name|'self'
op|')'
op|'.'
name|'break_lock'
op|'('
op|')'
newline|'\n'
name|'remove_existing_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TimeoutPIDLockFile
dedent|''
dedent|''
name|'class'
name|'TimeoutPIDLockFile'
op|'('
name|'PIDLockFile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Lockfile with default timeout, implemented as a Unix PID file.\n\n        This uses the ``PIDLockFile`` implementation, with the\n        following changes:\n\n        * The `acquire_timeout` parameter to the initialiser will be\n          used as the default `timeout` parameter for the `acquire`\n          method.\n\n        """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'acquire_timeout'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set up the parameters of a DaemonRunnerLock. """'
newline|'\n'
name|'self'
op|'.'
name|'acquire_timeout'
op|'='
name|'acquire_timeout'
newline|'\n'
name|'super'
op|'('
name|'TimeoutPIDLockFile'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'path'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|acquire
dedent|''
name|'def'
name|'acquire'
op|'('
name|'self'
op|','
name|'timeout'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Acquire the lock. """'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'timeout'
op|'='
name|'self'
op|'.'
name|'acquire_timeout'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'TimeoutPIDLockFile'
op|','
name|'self'
op|')'
op|'.'
name|'acquire'
op|'('
name|'timeout'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_pid_from_pidfile
dedent|''
dedent|''
name|'def'
name|'read_pid_from_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Read the PID recorded in the named PID file.\n\n        Read and return the numeric PID recorded as text in the named\n        PID file. If the PID file does not exist, return ``None``. If\n        the content is not a valid PID, raise ``PIDFileParseError``.\n\n        """'
newline|'\n'
name|'pid'
op|'='
name|'None'
newline|'\n'
name|'pidfile'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'pidfile'
op|'='
name|'open'
op|'('
name|'pidfile_path'
op|','
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'pidfile'
op|':'
newline|'\n'
comment|'# According to the FHS 2.3 section on PID files in \xe2\x80\x98/var/run\xe2\x80\x99:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   The file must consist of the process identifier in'
nl|'\n'
comment|'#   ASCII-encoded decimal, followed by a newline character. \xe2\x80\xa6'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   Programs that read PID files should be somewhat flexible'
nl|'\n'
comment|'#   in what they accept; i.e., they should ignore extra'
nl|'\n'
comment|'#   whitespace, leading zeroes, absence of the trailing'
nl|'\n'
comment|'#   newline, or additional lines in the PID file.'
nl|'\n'
nl|'\n'
indent|'        '
name|'line'
op|'='
name|'pidfile'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'int'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'PIDFileParseError'
op|'('
nl|'\n'
string|'"PID file %(pidfile_path)r contents invalid"'
op|'%'
name|'vars'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'pidfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'pid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_pid_to_pidfile
dedent|''
name|'def'
name|'write_pid_to_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Write the PID in the named PID file.\n\n        Get the numeric process ID (\xe2\x80\x9cPID\xe2\x80\x9d) of the current process\n        and write it to the named file as a line of text.\n\n        """'
newline|'\n'
name|'open_flags'
op|'='
op|'('
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_EXCL'
op|'|'
name|'os'
op|'.'
name|'O_WRONLY'
op|')'
newline|'\n'
name|'open_mode'
op|'='
op|'('
nl|'\n'
op|'('
op|'('
name|'os'
op|'.'
name|'R_OK'
op|'|'
name|'os'
op|'.'
name|'W_OK'
op|')'
op|'<<'
number|'6'
op|')'
op|'|'
nl|'\n'
op|'('
op|'('
name|'os'
op|'.'
name|'R_OK'
op|')'
op|'<<'
number|'3'
op|')'
op|'|'
nl|'\n'
op|'('
op|'('
name|'os'
op|'.'
name|'R_OK'
op|')'
op|')'
op|')'
newline|'\n'
name|'pidfile_fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'pidfile_path'
op|','
name|'open_flags'
op|','
name|'open_mode'
op|')'
newline|'\n'
name|'pidfile'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'pidfile_fd'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
comment|'# According to the FHS 2.3 section on PID files in \xe2\x80\x98/var/run\xe2\x80\x99:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   The file must consist of the process identifier in'
nl|'\n'
comment|'#   ASCII-encoded decimal, followed by a newline character. For'
nl|'\n'
comment|'#   example, if crond was process number 25, /var/run/crond.pid'
nl|'\n'
comment|'#   would contain three characters: two, five, and newline.'
nl|'\n'
nl|'\n'
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'line'
op|'='
string|'"%(pid)d\\n"'
op|'%'
name|'vars'
op|'('
op|')'
newline|'\n'
name|'pidfile'
op|'.'
name|'write'
op|'('
name|'line'
op|')'
newline|'\n'
name|'pidfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_existing_pidfile
dedent|''
name|'def'
name|'remove_existing_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Remove the named PID file if it exists.\n\n        Remove the named PID file. Ignore the condition if the file\n        does not exist, since that only means we are already in the\n        desired state.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'remove'
op|'('
name|'pidfile_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

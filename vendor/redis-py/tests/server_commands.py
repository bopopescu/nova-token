begin_unit
name|'import'
name|'redis'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'distutils'
op|'.'
name|'version'
name|'import'
name|'StrictVersion'
newline|'\n'
nl|'\n'
DECL|class|ServerCommandsTestCase
name|'class'
name|'ServerCommandsTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|get_client
indent|'    '
name|'def'
name|'get_client'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'redis'
op|'.'
name|'Redis'
op|'('
name|'host'
op|'='
string|"'localhost'"
op|','
name|'port'
op|'='
number|'6379'
op|','
name|'db'
op|'='
number|'9'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'self'
op|'.'
name|'get_client'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'flushdb'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'flushdb'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# GENERAL SERVER COMMANDS'
nl|'\n'
DECL|member|test_dbsize
dedent|''
name|'def'
name|'test_dbsize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'bar'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'dbsize'
op|'('
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_and_set
dedent|''
name|'def'
name|'test_get_and_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# get and set can't be tested independently of each other"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'byte_string'
op|'='
string|"'value'"
newline|'\n'
name|'integer'
op|'='
number|'5'
newline|'\n'
name|'unicode_string'
op|'='
name|'unichr'
op|'('
number|'3456'
op|')'
op|'+'
string|"u'abcd'"
op|'+'
name|'unichr'
op|'('
number|'3421'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"'byte_string'"
op|','
name|'byte_string'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"'integer'"
op|','
number|'5'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"'unicode_string'"
op|','
name|'unicode_string'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"'byte_string'"
op|')'
op|','
name|'byte_string'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"'integer'"
op|')'
op|','
name|'str'
op|'('
name|'integer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"'unicode_string'"
op|')'
op|'.'
name|'decode'
op|'('
string|"'utf-8'"
op|')'
op|','
name|'unicode_string'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getitem_and_setitem
dedent|''
name|'def'
name|'test_getitem_and_setitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'bar'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete
dedent|''
name|'def'
name|'test_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'a'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"'a'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delitem
dedent|''
name|'def'
name|'test_delitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_info
dedent|''
name|'def'
name|'test_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'bar'"
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'info'
op|','
name|'dict'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'db9'"
op|']'
op|'['
string|"'keys'"
op|']'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lastsave
dedent|''
name|'def'
name|'test_lastsave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lastsave'
op|'('
op|')'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ping
dedent|''
name|'def'
name|'test_ping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ping'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# KEYS'
nl|'\n'
DECL|member|test_append
dedent|''
name|'def'
name|'test_append'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# invalid key type'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'append'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'append'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'append'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'a1a2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_decr
dedent|''
name|'def'
name|'test_decr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'decr'
op|'('
string|"'a'"
op|')'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'-1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'decr'
op|'('
string|"'a'"
op|')'
op|','
op|'-'
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'-2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'decr'
op|'('
string|"'a'"
op|','
name|'amount'
op|'='
number|'5'
op|')'
op|','
op|'-'
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'-7'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_exists
dedent|''
name|'def'
name|'test_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'exists'
op|'('
string|"'a'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'exists'
op|'('
string|"'a'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_expire_and_ttl
dedent|''
name|'def'
name|'test_expire_and_ttl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'expire'
op|'('
string|"'a'"
op|','
number|'10'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'expire'
op|'('
string|"'a'"
op|','
number|'10'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ttl'
op|'('
string|"'a'"
op|')'
op|','
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_expireat
dedent|''
name|'def'
name|'test_expireat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expire_at'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'minutes'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'expireat'
op|'('
string|"'a'"
op|','
name|'expire_at'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'foo'"
newline|'\n'
comment|'# expire at in unix time'
nl|'\n'
name|'expire_at_seconds'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'mktime'
op|'('
name|'expire_at'
op|'.'
name|'timetuple'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'expireat'
op|'('
string|"'a'"
op|','
name|'expire_at_seconds'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ttl'
op|'('
string|"'a'"
op|')'
op|','
number|'60'
op|')'
newline|'\n'
comment|'# expire at given a datetime object'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'bar'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'expireat'
op|'('
string|"'b'"
op|','
name|'expire_at'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ttl'
op|'('
string|"'b'"
op|')'
op|','
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getset
dedent|''
name|'def'
name|'test_getset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'getset'
op|'('
string|"'a'"
op|','
string|"'foo'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'getset'
op|'('
string|"'a'"
op|','
string|"'bar'"
op|')'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_incr
dedent|''
name|'def'
name|'test_incr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'incr'
op|'('
string|"'a'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'incr'
op|'('
string|"'a'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'incr'
op|'('
string|"'a'"
op|','
name|'amount'
op|'='
number|'5'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'7'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_keys
dedent|''
name|'def'
name|'test_keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'keys'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'keys'
op|'='
name|'set'
op|'('
op|'['
string|"'test_a'"
op|','
string|"'test_b'"
op|','
string|"'testc'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'['
name|'key'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'keys'
op|'('
name|'pattern'
op|'='
string|"'test_*'"
op|')'
op|')'
op|','
nl|'\n'
name|'keys'
op|'-'
name|'set'
op|'('
op|'['
string|"'testc'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'keys'
op|'('
name|'pattern'
op|'='
string|"'test*'"
op|')'
op|')'
op|','
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mget
dedent|''
name|'def'
name|'test_mget'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'mget'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
op|'['
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'2'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'c'"
op|']'
op|'='
string|"'3'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'mget'
op|'('
op|'['
string|"'a'"
op|','
string|"'other'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
nl|'\n'
op|'['
string|"'1'"
op|','
name|'None'
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mset
dedent|''
name|'def'
name|'test_mset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'1'"
op|','
string|"'b'"
op|':'
string|"'2'"
op|','
string|"'c'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'mset'
op|'('
name|'d'
op|')'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_msetnx
dedent|''
dedent|''
name|'def'
name|'test_msetnx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'1'"
op|','
string|"'b'"
op|':'
string|"'2'"
op|','
string|"'c'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'msetnx'
op|'('
name|'d'
op|')'
op|')'
newline|'\n'
name|'d2'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'x'"
op|','
string|"'d'"
op|':'
string|"'4'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'client'
op|'.'
name|'msetnx'
op|'('
name|'d2'
op|')'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'d'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_randomkey
dedent|''
name|'def'
name|'test_randomkey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'randomkey'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'2'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'c'"
op|']'
op|'='
string|"'3'"
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'randomkey'
op|'('
op|')'
name|'in'
op|'('
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rename
dedent|''
name|'def'
name|'test_rename'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rename'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_renamenx
dedent|''
name|'def'
name|'test_renamenx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'2'"
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'client'
op|'.'
name|'renamenx'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|','
string|"'2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_setex
dedent|''
name|'def'
name|'test_setex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'setex'
op|'('
string|"'a'"
op|','
string|"'1'"
op|','
number|'60'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ttl'
op|'('
string|"'a'"
op|')'
op|','
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_setnx
dedent|''
name|'def'
name|'test_setnx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'setnx'
op|'('
string|"'a'"
op|','
string|"'1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'not'
name|'self'
op|'.'
name|'client'
op|'.'
name|'setnx'
op|'('
string|"'a'"
op|','
string|"'2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_substr
dedent|''
name|'def'
name|'test_substr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# invalid key type'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|','
string|"'a'"
op|','
number|'0'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'abcdefghi'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|'('
string|"'a'"
op|','
number|'0'
op|')'
op|','
string|"'abcdefghi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|'('
string|"'a'"
op|','
number|'2'
op|')'
op|','
string|"'cdefghi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|'('
string|"'a'"
op|','
number|'3'
op|','
number|'5'
op|')'
op|','
string|"'def'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|'('
string|"'a'"
op|','
number|'3'
op|','
op|'-'
number|'2'
op|')'
op|','
string|"'defgh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
number|'123456'
comment|'# does substr work with ints?'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'substr'
op|'('
string|"'a'"
op|','
number|'2'
op|','
op|'-'
number|'2'
op|')'
op|','
string|"'345'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_type
dedent|''
name|'def'
name|'test_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'('
string|"'a'"
op|')'
op|','
string|"'none'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'('
string|"'a'"
op|')'
op|','
string|"'string'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|'('
string|"'a'"
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'('
string|"'a'"
op|')'
op|','
string|"'list'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'sadd'
op|'('
string|"'a'"
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'('
string|"'a'"
op|')'
op|','
string|"'set'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zadd'
op|'('
string|"'a'"
op|','
string|"'1'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'type'
op|'('
string|"'a'"
op|')'
op|','
string|"'zset'"
op|')'
newline|'\n'
nl|'\n'
comment|'# LISTS'
nl|'\n'
DECL|member|make_list
dedent|''
name|'def'
name|'make_list'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'l'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
name|'name'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_blpop
dedent|''
dedent|''
name|'def'
name|'test_blpop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'ab'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'b'"
op|','
string|"'cd'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'blpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'blpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'b'"
op|','
string|"'d'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'blpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'blpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'blpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_brpop
dedent|''
name|'def'
name|'test_brpop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'ab'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'b'"
op|','
string|"'cd'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'brpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'b'"
op|','
string|"'d'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'brpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'brpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'brpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'brpop'
op|'('
op|'['
string|"'b'"
op|','
string|"'a'"
op|']'
op|','
name|'timeout'
op|'='
number|'1'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lindex
dedent|''
name|'def'
name|'test_lindex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
string|"'0'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|','
string|"'a'"
op|','
string|"'0'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
string|"'0'"
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
string|"'1'"
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
string|"'2'"
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_llen
dedent|''
name|'def'
name|'test_llen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'llen'
op|'('
string|"'a'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'llen'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'llen'
op|'('
string|"'a'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lpop
dedent|''
name|'def'
name|'test_lpop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lpush
dedent|''
name|'def'
name|'test_lpush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|','
string|"'a'"
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'info'
op|'('
op|')'
op|'['
string|"'redis_version'"
op|']'
newline|'\n'
name|'if'
name|'StrictVersion'
op|'('
name|'version'
op|')'
op|'>='
name|'StrictVersion'
op|'('
string|"'1.3.4'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpush'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
number|'0'
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
number|'1'
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lrange
dedent|''
name|'def'
name|'test_lrange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|','
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abcde'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'10'
op|')'
op|','
op|'['
string|"'c'"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lrem
dedent|''
name|'def'
name|'test_lrem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrem'
op|'('
string|"'a'"
op|','
string|"'foo'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrem'
op|','
string|"'a'"
op|','
string|"'b'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'aaaa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrem'
op|'('
string|"'a'"
op|','
string|"'a'"
op|','
number|'1'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'a'"
op|','
string|"'a'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrem'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
comment|'# remove all the elements in the list means the key is deleted'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lset
dedent|''
name|'def'
name|'test_lset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lset'
op|','
string|"'a'"
op|','
number|'1'
op|','
string|"'b'"
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lset'
op|','
string|"'a'"
op|','
number|'1'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lset'
op|'('
string|"'a'"
op|','
number|'1'
op|','
string|"'d'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'d'"
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ltrim
dedent|''
name|'def'
name|'test_ltrim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key -- TODO: Not sure why this is actually true.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ltrim'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'ltrim'
op|','
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'ltrim'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lpop
dedent|''
name|'def'
name|'test_lpop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rpop
dedent|''
name|'def'
name|'test_rpop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|'('
string|"'a'"
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rpoplpush
dedent|''
name|'def'
name|'test_rpoplpush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no src key'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpoplpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# no dest key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpoplpush'
op|'('
string|"'b'"
op|','
string|"'a'"
op|')'
op|','
string|"'b1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
number|'0'
op|')'
op|','
string|"'b1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
comment|'# src key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a1'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpoplpush'
op|','
string|"'a'"
op|','
string|"'b'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# dest key is not a list'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpoplpush'
op|','
string|"'a'"
op|','
string|"'b'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|','
string|"'b2'"
op|','
string|"'b3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpoplpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
string|"'a3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'b'"
op|','
number|'0'
op|','
number|'4'
op|')'
op|','
nl|'\n'
op|'['
string|"'a3'"
op|','
string|"'b1'"
op|','
string|"'b2'"
op|','
string|"'b3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rpush
dedent|''
name|'def'
name|'test_rpush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a list'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|','
string|"'a'"
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'version'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'info'
op|'('
op|')'
op|'['
string|"'redis_version'"
op|']'
newline|'\n'
name|'if'
name|'StrictVersion'
op|'('
name|'version'
op|')'
op|'>='
name|'StrictVersion'
op|'('
string|"'1.3.4'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
number|'0'
op|')'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lindex'
op|'('
string|"'a'"
op|','
number|'1'
op|')'
op|','
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set commands'
nl|'\n'
DECL|member|make_set
dedent|''
name|'def'
name|'make_set'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'l'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'sadd'
op|'('
name|'name'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sadd
dedent|''
dedent|''
name|'def'
name|'test_sadd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sadd'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'members'
op|'='
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
name|'members'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'members'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_scard
dedent|''
name|'def'
name|'test_scard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'scard'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'scard'
op|'('
string|"'a'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sdiff
dedent|''
name|'def'
name|'test_sdiff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sdiff'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|','
string|"'a2'"
op|','
string|"'b3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sdiff'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sdiffstore
dedent|''
name|'def'
name|'test_sdiffstore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sdiffstore'
op|','
nl|'\n'
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|','
string|"'a2'"
op|','
string|"'b3'"
op|']'
op|')'
newline|'\n'
comment|"# dest key always gets overwritten, even if it's not a set, so don't"
nl|'\n'
comment|'# test for that'
nl|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sdiffstore'
op|'('
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'c'"
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sinter
dedent|''
name|'def'
name|'test_sinter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sinter'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'a1'"
op|','
string|"'b2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sinter'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sinterstore
dedent|''
name|'def'
name|'test_sinterstore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sinterstore'
op|','
nl|'\n'
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'a1'"
op|','
string|"'b2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
comment|"# dest key always gets overwritten, even if it's not a set, so don't"
nl|'\n'
comment|'# test for that'
nl|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sinterstore'
op|'('
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'c'"
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sismember
dedent|''
name|'def'
name|'test_sismember'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sismember'
op|','
string|"'a'"
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sismember'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sismember'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sismember'
op|'('
string|"'a'"
op|','
string|"'c'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sismember'
op|'('
string|"'a'"
op|','
string|"'d'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_smembers
dedent|''
name|'def'
name|'test_smembers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|"# set doesn't exist"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'set'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_smove
dedent|''
name|'def'
name|'test_smove'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# src key is not set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|','
string|"'b2'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smove'
op|'('
string|"'a'"
op|','
string|"'b'"
op|','
string|"'a1'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# src key is not a set'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'smove'
op|','
nl|'\n'
string|"'a'"
op|','
string|"'b'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|']'
op|')'
newline|'\n'
comment|'# dest key is not a set'
nl|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'smove'
op|','
nl|'\n'
string|"'a'"
op|','
string|"'b'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'b1'"
op|','
string|"'b2'"
op|']'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smove'
op|'('
string|"'a'"
op|','
string|"'b'"
op|','
string|"'a1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'a2'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'b'"
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'b1'"
op|','
string|"'b2'"
op|','
string|"'a1'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spop
dedent|''
name|'def'
name|'test_spop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'spop'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'spop'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'spop'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'value'
name|'in'
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'set'
op|'('
string|"'abc'"
op|')'
op|'-'
name|'set'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_srandmember
dedent|''
name|'def'
name|'test_srandmember'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'srandmember'
op|'('
string|"'a'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'srandmember'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'srandmember'
op|'('
string|"'a'"
op|')'
name|'in'
string|"'abc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_srem
dedent|''
name|'def'
name|'test_srem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'srem'
op|'('
string|"'a'"
op|','
string|"'a'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
comment|'# key is not a set'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'srem'
op|','
string|"'a'"
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'srem'
op|'('
string|"'a'"
op|','
string|"'d'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'srem'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'a'"
op|')'
op|','
name|'set'
op|'('
string|"'ac'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sunion
dedent|''
name|'def'
name|'test_sunion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sunion'
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'a1'"
op|','
string|"'b2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sunion'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|','
string|"'b2'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sunionstore
dedent|''
name|'def'
name|'test_sunionstore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# some key is not a set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'a'"
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
op|'='
string|"'b'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sunionstore'
op|','
nl|'\n'
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'b'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'make_set'
op|'('
string|"'b'"
op|','
op|'['
string|"'a1'"
op|','
string|"'b2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
comment|"# dest key always gets overwritten, even if it's not a set, so don't"
nl|'\n'
comment|'# test for that'
nl|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sunionstore'
op|'('
string|"'c'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'smembers'
op|'('
string|"'c'"
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|','
string|"'b2'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# SORTED SETS'
nl|'\n'
DECL|member|make_zset
dedent|''
name|'def'
name|'make_zset'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'zadd'
op|'('
name|'name'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zadd
dedent|''
dedent|''
name|'def'
name|'test_zadd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'3'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zcard
dedent|''
name|'def'
name|'test_zcard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zcard'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zcard'
op|'('
string|"'a'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zincrby
dedent|''
name|'def'
name|'test_zincrby'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zincrby'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zincrby'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'3.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zincrby'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|','
name|'amount'
op|'='
number|'5'
op|')'
op|','
number|'8.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'3.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|')'
op|','
number|'8.0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zinter
dedent|''
name|'def'
name|'test_zinter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'1'
op|','
string|"'a3'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'b'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'2'
op|','
string|"'a4'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'c'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'6'
op|','
string|"'a3'"
op|':'
number|'5'
op|','
string|"'a4'"
op|':'
number|'4'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# sum, no weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zinter'
op|'('
string|"'z'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a3'"
op|','
number|'8'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'9'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# max, no weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zinter'
op|'('
string|"'z'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|','
name|'aggregate'
op|'='
string|"'MAX'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a3'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'6'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# with weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zinter'
op|'('
string|"'z'"
op|','
op|'{'
string|"'a'"
op|':'
number|'1'
op|','
string|"'b'"
op|':'
number|'2'
op|','
string|"'c'"
op|':'
number|'3'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a3'"
op|','
number|'20'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'23'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_zrange
dedent|''
name|'def'
name|'test_zrange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|','
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a2'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'1'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a2'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a1'"
op|','
number|'1.0'
op|')'
op|','
op|'('
string|"'a2'"
op|','
number|'2.0'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'1'
op|','
number|'2'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'2.0'
op|')'
op|','
op|'('
string|"'a3'"
op|','
number|'3.0'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# a non existant key should return empty list'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'b'"
op|','
number|'0'
op|','
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_zrangebyscore
dedent|''
name|'def'
name|'test_zrangebyscore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrangebyscore'
op|','
nl|'\n'
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|','
string|"'a4'"
op|':'
number|'4'
op|','
string|"'a5'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrangebyscore'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'4'
op|')'
op|','
nl|'\n'
op|'['
string|"'a2'"
op|','
string|"'a3'"
op|','
string|"'a4'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrangebyscore'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'4'
op|','
name|'start'
op|'='
number|'1'
op|','
name|'num'
op|'='
number|'2'
op|')'
op|','
nl|'\n'
op|'['
string|"'a3'"
op|','
string|"'a4'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrangebyscore'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'4'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'2.0'
op|')'
op|','
op|'('
string|"'a3'"
op|','
number|'3.0'
op|')'
op|','
op|'('
string|"'a4'"
op|','
number|'4.0'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# a non existant key should return empty list'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrangebyscore'
op|'('
string|"'b'"
op|','
number|'0'
op|','
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zrank
dedent|''
name|'def'
name|'test_zrank'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|','
string|"'a'"
op|','
string|"'a4'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|','
string|"'a4'"
op|':'
number|'4'
op|','
string|"'a5'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a5'"
op|')'
op|','
number|'4'
op|')'
newline|'\n'
comment|'# non-existent value in zset'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrank'
op|'('
string|"'a'"
op|','
string|"'a6'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zrem
dedent|''
name|'def'
name|'test_zrem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrem'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrem'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrem'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zremrangebyscore
dedent|''
name|'def'
name|'test_zremrangebyscore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zremrangebyscore'
op|','
nl|'\n'
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|','
string|"'a4'"
op|':'
number|'4'
op|','
string|"'a5'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zremrangebyscore'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'4'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a5'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zremrangebyscore'
op|'('
string|"'a'"
op|','
number|'2'
op|','
number|'4'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
op|'['
string|"'a1'"
op|','
string|"'a5'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zrevrange
dedent|''
name|'def'
name|'test_zrevrange'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrange'
op|','
nl|'\n'
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|')'
op|','
op|'['
string|"'a3'"
op|','
string|"'a2'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrange'
op|'('
string|"'a'"
op|','
number|'1'
op|','
number|'2'
op|')'
op|','
op|'['
string|"'a2'"
op|','
string|"'a1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrange'
op|'('
string|"'a'"
op|','
number|'0'
op|','
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a3'"
op|','
number|'3.0'
op|')'
op|','
op|'('
string|"'a2'"
op|','
number|'2.0'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrange'
op|'('
string|"'a'"
op|','
number|'1'
op|','
number|'2'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'2.0'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'1.0'
op|')'
op|']'
op|')'
newline|'\n'
comment|'# a non existant key should return empty list'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'b'"
op|','
number|'0'
op|','
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zrevrank
dedent|''
name|'def'
name|'test_zrevrank'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|','
string|"'a'"
op|','
string|"'a4'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'5'
op|','
string|"'a2'"
op|':'
number|'4'
op|','
string|"'a3'"
op|':'
number|'3'
op|','
string|"'a4'"
op|':'
number|'2'
op|','
string|"'a5'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrevrank'
op|'('
string|"'a'"
op|','
string|"'a5'"
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zscore
dedent|''
name|'def'
name|'test_zscore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a zset'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'0'
op|','
string|"'a2'"
op|':'
number|'1'
op|','
string|"'a3'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'0.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
number|'1.0'
op|')'
newline|'\n'
comment|'# test a non-existant member'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zscore'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zunion
dedent|''
name|'def'
name|'test_zunion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'1'
op|','
string|"'a3'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'b'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'2'
op|','
string|"'a4'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'make_zset'
op|'('
string|"'c'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'6'
op|','
string|"'a4'"
op|':'
number|'5'
op|','
string|"'a5'"
op|':'
number|'4'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# sum, no weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zunion'
op|'('
string|"'z'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'a3'"
op|','
number|'3'
op|')'
op|','
op|'('
string|"'a5'"
op|','
number|'4'
op|')'
op|','
op|'('
string|"'a4'"
op|','
number|'7'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'9'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# max, no weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zunion'
op|'('
string|"'z'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|','
name|'aggregate'
op|'='
string|"'MAX'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'a3'"
op|','
number|'2'
op|')'
op|','
op|'('
string|"'a5'"
op|','
number|'4'
op|')'
op|','
op|'('
string|"'a4'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'6'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# with weight'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'zunion'
op|'('
string|"'z'"
op|','
op|'{'
string|"'a'"
op|':'
number|'1'
op|','
string|"'b'"
op|':'
number|'2'
op|','
string|"'c'"
op|':'
number|'3'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'zrange'
op|'('
string|"'z'"
op|','
number|'0'
op|','
op|'-'
number|'1'
op|','
name|'withscores'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'a2'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'a3'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'a5'"
op|','
number|'12'
op|')'
op|','
op|'('
string|"'a4'"
op|','
number|'19'
op|')'
op|','
op|'('
string|"'a1'"
op|','
number|'23'
op|')'
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# HASHES'
nl|'\n'
DECL|member|make_hash
dedent|''
name|'def'
name|'make_hash'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'d'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'client'
op|'.'
name|'hset'
op|'('
name|'key'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hget_and_hset
dedent|''
dedent|''
name|'def'
name|'test_hget_and_hset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
string|"'2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|')'
op|','
string|"'3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hset'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|','
number|'5'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
string|"'5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hset'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|','
number|'4'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|')'
op|','
string|"'4'"
op|')'
newline|'\n'
comment|"# key inside of hash that doesn't exist returns null value"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hmset
dedent|''
name|'def'
name|'test_hmset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'1'"
op|','
string|"'b'"
op|':'
string|"'2'"
op|','
string|"'c'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmset'
op|'('
string|"'foo'"
op|','
name|'d'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hgetall'
op|'('
string|"'foo'"
op|')'
op|','
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmset'
op|','
string|"'foo'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hmget
dedent|''
name|'def'
name|'test_hmget'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
op|'{'
string|"'a'"
op|':'
number|'1'
op|','
string|"'b'"
op|':'
number|'2'
op|','
string|"'c'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmset'
op|'('
string|"'foo'"
op|','
name|'d'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmget'
op|'('
string|"'foo'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|')'
op|','
op|'['
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmget'
op|'('
string|"'foo'"
op|','
op|'['
string|"'a'"
op|','
string|"'c'"
op|']'
op|')'
op|','
op|'['
string|"'1'"
op|','
string|"'3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hmget_empty
dedent|''
name|'def'
name|'test_hmget_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmget'
op|'('
string|"'foo'"
op|','
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|','
op|'['
name|'None'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hmget_no_keys
dedent|''
name|'def'
name|'test_hmget_no_keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hmget'
op|','
string|"'foo'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hdel
dedent|''
name|'def'
name|'test_hdel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hdel'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hdel'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
string|"'2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hdel'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hget'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hexists
dedent|''
name|'def'
name|'test_hexists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hexists'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hexists'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hexists'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hexists'
op|'('
string|"'a'"
op|','
string|"'a4'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'hdel'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hexists'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hgetall
dedent|''
name|'def'
name|'test_hgetall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hgetall'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hgetall'
op|'('
string|"'a'"
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'h'
op|'='
op|'{'
string|"'a1'"
op|':'
string|"'1'"
op|','
string|"'a2'"
op|':'
string|"'2'"
op|','
string|"'a3'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
name|'h'
op|')'
newline|'\n'
name|'remote_hash'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'hgetall'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h'
op|','
name|'remote_hash'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hincrby
dedent|''
name|'def'
name|'test_hincrby'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|','
string|"'a'"
op|','
string|"'a1'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|"# no key should create the hash and incr the key's value to 1"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|','
name|'amount'
op|'='
number|'2'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
comment|'# negative values decrement'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|'('
string|"'a'"
op|','
string|"'a1'"
op|','
name|'amount'
op|'='
op|'-'
number|'3'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|"# hash that exists, but key that doesn't"
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|'('
string|"'a'"
op|','
string|"'a2'"
op|','
name|'amount'
op|'='
number|'3'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
comment|"# finally a key that's not an int"
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'hset'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hincrby'
op|','
string|"'a'"
op|','
string|"'a3'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_hkeys
dedent|''
name|'def'
name|'test_hkeys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hkeys'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hkeys'
op|'('
string|"'a'"
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'h'
op|'='
op|'{'
string|"'a1'"
op|':'
string|"'1'"
op|','
string|"'a2'"
op|':'
string|"'2'"
op|','
string|"'a3'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
name|'h'
op|')'
newline|'\n'
name|'keys'
op|'='
name|'h'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'remote_keys'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'hkeys'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'remote_keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'keys'
op|','
name|'remote_keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hlen
dedent|''
name|'def'
name|'test_hlen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hlen'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hlen'
op|'('
string|"'a'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
op|'{'
string|"'a1'"
op|':'
number|'1'
op|','
string|"'a2'"
op|':'
number|'2'
op|','
string|"'a3'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hlen'
op|'('
string|"'a'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'.'
name|'hdel'
op|'('
string|"'a'"
op|','
string|"'a3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hlen'
op|'('
string|"'a'"
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hvals
dedent|''
name|'def'
name|'test_hvals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not a hash'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'hvals'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
comment|'# no key'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'hvals'
op|'('
string|"'a'"
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|'# real logic'
nl|'\n'
name|'h'
op|'='
op|'{'
string|"'a1'"
op|':'
string|"'1'"
op|','
string|"'a2'"
op|':'
string|"'2'"
op|','
string|"'a3'"
op|':'
string|"'3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'make_hash'
op|'('
string|"'a'"
op|','
name|'h'
op|')'
newline|'\n'
name|'vals'
op|'='
name|'h'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
name|'vals'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'remote_vals'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'hvals'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'remote_vals'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'vals'
op|','
name|'remote_vals'
op|')'
newline|'\n'
nl|'\n'
comment|'# SORT'
nl|'\n'
DECL|member|test_sort_bad_key
dedent|''
name|'def'
name|'test_sort_bad_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# key is not set'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|'# key is a string value'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'redis'
op|'.'
name|'ResponseError'
op|','
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'client'
op|'['
string|"'a'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_sort_basic
dedent|''
name|'def'
name|'test_sort_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'3214'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|')'
op|','
op|'['
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|','
string|"'4'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_limited
dedent|''
name|'def'
name|'test_sort_limited'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'3214'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|','
name|'start'
op|'='
number|'1'
op|','
name|'num'
op|'='
number|'2'
op|')'
op|','
op|'['
string|"'2'"
op|','
string|"'3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_by
dedent|''
name|'def'
name|'test_sort_by'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'score:1'"
op|']'
op|'='
number|'8'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'score:2'"
op|']'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'score:3'"
op|']'
op|'='
number|'5'
newline|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a_values'"
op|','
string|"'123'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a_values'"
op|','
name|'by'
op|'='
string|"'score:*'"
op|')'
op|','
nl|'\n'
op|'['
string|"'2'"
op|','
string|"'3'"
op|','
string|"'1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_get
dedent|''
name|'def'
name|'test_sort_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:1'"
op|']'
op|'='
string|"'u1'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:2'"
op|']'
op|'='
string|"'u2'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:3'"
op|']'
op|'='
string|"'u3'"
newline|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'231'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|','
name|'get'
op|'='
string|"'user:*'"
op|')'
op|','
nl|'\n'
op|'['
string|"'u1'"
op|','
string|"'u2'"
op|','
string|"'u3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_desc
dedent|''
name|'def'
name|'test_sort_desc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'231'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|','
name|'desc'
op|'='
name|'True'
op|')'
op|','
op|'['
string|"'3'"
op|','
string|"'2'"
op|','
string|"'1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_alpha
dedent|''
name|'def'
name|'test_sort_alpha'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'ecbda'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|','
name|'alpha'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|','
string|"'d'"
op|','
string|"'e'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_store
dedent|''
name|'def'
name|'test_sort_store'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'a'"
op|','
string|"'231'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'a'"
op|','
name|'store'
op|'='
string|"'sorted_values'"
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'sorted_values'"
op|','
number|'0'
op|','
number|'5'
op|')'
op|','
nl|'\n'
op|'['
string|"'1'"
op|','
string|"'2'"
op|','
string|"'3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sort_all_options
dedent|''
name|'def'
name|'test_sort_all_options'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:1:username'"
op|']'
op|'='
string|"'zeus'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:2:username'"
op|']'
op|'='
string|"'titan'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:3:username'"
op|']'
op|'='
string|"'hermes'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:4:username'"
op|']'
op|'='
string|"'hercules'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:5:username'"
op|']'
op|'='
string|"'apollo'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:6:username'"
op|']'
op|'='
string|"'athena'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:7:username'"
op|']'
op|'='
string|"'hades'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:8:username'"
op|']'
op|'='
string|"'dionysus'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:1:favorite_drink'"
op|']'
op|'='
string|"'yuengling'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:2:favorite_drink'"
op|']'
op|'='
string|"'rum'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:3:favorite_drink'"
op|']'
op|'='
string|"'vodka'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:4:favorite_drink'"
op|']'
op|'='
string|"'milk'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:5:favorite_drink'"
op|']'
op|'='
string|"'pinot noir'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:6:favorite_drink'"
op|']'
op|'='
string|"'water'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:7:favorite_drink'"
op|']'
op|'='
string|"'gin'"
newline|'\n'
name|'self'
op|'.'
name|'client'
op|'['
string|"'user:8:favorite_drink'"
op|']'
op|'='
string|"'apple juice'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'make_list'
op|'('
string|"'gods'"
op|','
string|"'12345678'"
op|')'
newline|'\n'
name|'num'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'sort'
op|'('
string|"'gods'"
op|','
name|'start'
op|'='
number|'2'
op|','
name|'num'
op|'='
number|'4'
op|','
name|'by'
op|'='
string|"'user:*:username'"
op|','
nl|'\n'
name|'get'
op|'='
string|"'user:*:favorite_drink'"
op|','
name|'desc'
op|'='
name|'True'
op|','
name|'alpha'
op|'='
name|'True'
op|','
name|'store'
op|'='
string|"'sorted'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'num'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
string|"'sorted'"
op|','
number|'0'
op|','
number|'10'
op|')'
op|','
nl|'\n'
op|'['
string|"'vodka'"
op|','
string|"'milk'"
op|','
string|"'gin'"
op|','
string|"'apple juice'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# PUBSUB'
nl|'\n'
DECL|member|test_pubsub
dedent|''
name|'def'
name|'test_pubsub'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# create a new client to not polute the existing one'
nl|'\n'
indent|'        '
name|'r'
op|'='
name|'self'
op|'.'
name|'get_client'
op|'('
op|')'
newline|'\n'
name|'channels'
op|'='
op|'('
string|"'a1'"
op|','
string|"'a2'"
op|','
string|"'a3'"
op|')'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'channels'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'.'
name|'subscribe'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'channels_to_publish_to'
op|'='
name|'channels'
op|'+'
op|'('
string|"'a4'"
op|','
op|')'
newline|'\n'
name|'messages_per_channel'
op|'='
number|'4'
newline|'\n'
DECL|function|publish
name|'def'
name|'publish'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'messages_per_channel'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'c'
name|'in'
name|'channels_to_publish_to'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'client'
op|'.'
name|'publish'
op|'('
name|'c'
op|','
string|"'a message'"
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.01'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'t'
op|'='
name|'threading'
op|'.'
name|'Thread'
op|'('
name|'target'
op|'='
name|'publish'
op|')'
newline|'\n'
name|'messages'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# should receive a message for each subscribe command'
nl|'\n'
comment|'# plus a message for each iteration of the loop * num channels'
nl|'\n'
name|'num_messages_to_expect'
op|'='
name|'len'
op|'('
name|'channels'
op|')'
op|'+'
op|'('
name|'messages_per_channel'
op|'*'
name|'len'
op|'('
name|'channels'
op|')'
op|')'
newline|'\n'
name|'thread_started'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'msg'
name|'in'
name|'r'
op|'.'
name|'listen'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'thread_started'
op|':'
newline|'\n'
comment|'# start the thread delayed so that we are intermingling'
nl|'\n'
comment|'# publish commands with pulling messsages off the socket'
nl|'\n'
comment|'# with subscribe'
nl|'\n'
indent|'                '
name|'thread_started'
op|'='
name|'True'
newline|'\n'
name|'t'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
dedent|''
name|'messages'
op|'.'
name|'append'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'messages'
op|')'
op|'=='
name|'num_messages_to_expect'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'sent_types'
op|','
name|'sent_channels'
op|'='
op|'{'
op|'}'
op|','
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'msg_type'
op|','
name|'channel'
op|','
name|'_'
name|'in'
name|'messages'
op|':'
newline|'\n'
indent|'            '
name|'sent_types'
op|'.'
name|'setdefault'
op|'('
name|'msg_type'
op|','
number|'0'
op|')'
newline|'\n'
name|'sent_types'
op|'['
name|'msg_type'
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'msg_type'
op|'=='
string|"'message'"
op|':'
newline|'\n'
indent|'                '
name|'sent_channels'
op|'.'
name|'setdefault'
op|'('
name|'channel'
op|','
number|'0'
op|')'
newline|'\n'
name|'sent_channels'
op|'['
name|'channel'
op|']'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'channel'
name|'in'
name|'channels'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sent_channels'
op|'['
name|'channel'
op|']'
op|','
name|'messages_per_channel'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'channel'
name|'in'
name|'channels'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sent_types'
op|'['
string|"'subscribe'"
op|']'
op|','
name|'len'
op|'('
name|'channels'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'sent_types'
op|'['
string|"'message'"
op|']'
op|','
nl|'\n'
name|'len'
op|'('
name|'channels'
op|')'
op|'*'
name|'messages_per_channel'
op|')'
newline|'\n'
nl|'\n'
comment|'## BINARY SAFE'
nl|'\n'
comment|'# TODO add more tests'
nl|'\n'
DECL|member|test_binary_get_set
dedent|''
name|'def'
name|'test_binary_get_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"' foo bar '"
op|','
string|"'123'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"' foo bar '"
op|')'
op|','
string|"'123'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"' foo\\r\\nbar\\r\\n '"
op|','
string|"'456'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"' foo\\r\\nbar\\r\\n '"
op|')'
op|','
string|"'456'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'set'
op|'('
string|"' \\r\\n\\t\\x07\\x13 '"
op|','
string|"'789'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'get'
op|'('
string|"' \\r\\n\\t\\x07\\x13 '"
op|')'
op|','
string|"'789'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'keys'
op|'('
string|"'*'"
op|')'
op|')'
op|','
op|'['
string|"' \\r\\n\\t\\x07\\x13 '"
op|','
string|"' foo\\r\\nbar\\r\\n '"
op|','
string|"' foo bar '"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"' foo bar '"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"' foo\\r\\nbar\\r\\n '"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'delete'
op|'('
string|"' \\r\\n\\t\\x07\\x13 '"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_binary_lists
dedent|''
name|'def'
name|'test_binary_lists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapping'
op|'='
op|'{'
string|"'foo bar'"
op|':'
string|"'123'"
op|','
nl|'\n'
string|"'foo\\r\\nbar\\r\\n'"
op|':'
string|"'456'"
op|','
nl|'\n'
string|"'foo\\tbar\\x07'"
op|':'
string|"'789'"
op|','
nl|'\n'
op|'}'
newline|'\n'
comment|'# fill in lists'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'c'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'rpush'
op|'('
name|'key'
op|','
name|'c'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that KEYS returns all the keys as they are'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'keys'
op|'('
string|"'*'"
op|')'
op|')'
op|','
name|'sorted'
op|'('
name|'mapping'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that it is possible to get list content by key name'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'mapping'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'client'
op|'.'
name|'lrange'
op|'('
name|'key'
op|','
number|'0'
op|','
op|'-'
number|'1'
op|')'
op|','
name|'list'
op|'('
name|'mapping'
op|'['
name|'key'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

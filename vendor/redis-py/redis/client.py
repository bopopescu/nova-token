begin_unit
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'from'
name|'itertools'
name|'import'
name|'chain'
newline|'\n'
name|'from'
name|'redis'
op|'.'
name|'exceptions'
name|'import'
name|'ConnectionError'
op|','
name|'ResponseError'
op|','
name|'InvalidResponse'
newline|'\n'
name|'from'
name|'redis'
op|'.'
name|'exceptions'
name|'import'
name|'RedisError'
op|','
name|'AuthenticationError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionPool
name|'class'
name|'ConnectionPool'
op|'('
name|'threading'
op|'.'
name|'local'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Manages a list of connections on the local thread"'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connections'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|make_connection_key
dedent|''
name|'def'
name|'make_connection_key'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'db'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Create a unique key for the specified host, port and db"'
newline|'\n'
name|'return'
string|"'%s:%s:%s'"
op|'%'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'db'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_connection
dedent|''
name|'def'
name|'get_connection'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'db'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return a specific connection for the specified host, port and db"'
newline|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'make_connection_key'
op|'('
name|'host'
op|','
name|'port'
op|','
name|'db'
op|')'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'self'
op|'.'
name|'connections'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connections'
op|'['
name|'key'
op|']'
op|'='
name|'Connection'
op|'('
nl|'\n'
name|'host'
op|','
name|'port'
op|','
name|'db'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'connections'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_all_connections
dedent|''
name|'def'
name|'get_all_connections'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return a list of all connection objects the manager knows about"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connections'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Manages TCP communication to and from a Redis server"'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
string|"'localhost'"
op|','
name|'port'
op|'='
number|'6379'
op|','
name|'db'
op|'='
number|'0'
op|','
name|'password'
op|'='
name|'None'
op|','
nl|'\n'
name|'socket_timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'port'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'self'
op|'.'
name|'socket_timeout'
op|'='
name|'socket_timeout'
newline|'\n'
name|'self'
op|'.'
name|'_sock'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|connect
dedent|''
name|'def'
name|'connect'
op|'('
name|'self'
op|','
name|'redis_instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Connects to the Redis server if not already connected"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_sock'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'connect'
op|'('
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# args for socket.error can either be (errno, "message")'
nl|'\n'
comment|'# or just "message"'
nl|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'e'
op|'.'
name|'args'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'error_message'
op|'='
string|'"Error connecting to %s:%s. %s."'
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'error_message'
op|'='
string|'"Error %s connecting %s:%s. %s."'
op|'%'
op|'('
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'port'
op|','
name|'e'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'ConnectionError'
op|'('
name|'error_message'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_TCP'
op|','
name|'socket'
op|'.'
name|'TCP_NODELAY'
op|','
number|'1'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'settimeout'
op|'('
name|'self'
op|'.'
name|'socket_timeout'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_sock'
op|'='
name|'sock'
newline|'\n'
name|'self'
op|'.'
name|'_fp'
op|'='
name|'sock'
op|'.'
name|'makefile'
op|'('
string|"'r'"
op|')'
newline|'\n'
name|'redis_instance'
op|'.'
name|'_setup_connection'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|disconnect
dedent|''
name|'def'
name|'disconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Disconnects from the Redis server"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_sock'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_sock'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'redis_instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Send ``command`` to the Redis server. Return the result."'
newline|'\n'
name|'self'
op|'.'
name|'connect'
op|'('
name|'redis_instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sock'
op|'.'
name|'sendall'
op|'('
name|'command'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'errno'
op|'.'
name|'EPIPE'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'ConnectionError'
op|'('
string|'"Error %s while writing to socket. %s."'
op|'%'
name|'e'
op|'.'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read a line from the socket is length is None,\n        otherwise read ``length`` bytes\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'length'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'_fp'
op|'.'
name|'read'
op|'('
name|'length'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'if'
name|'e'
op|'.'
name|'args'
name|'and'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
name|'errno'
op|'.'
name|'EAGAIN'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ConnectionError'
op|'('
string|'"Error while reading from socket: %s"'
op|'%'
name|'e'
op|'.'
name|'args'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"''"
newline|'\n'
nl|'\n'
DECL|function|list_or_args
dedent|''
dedent|''
name|'def'
name|'list_or_args'
op|'('
name|'command'
op|','
name|'keys'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
comment|'# returns a single list combining keys and args'
nl|'\n'
comment|'# if keys is not a list or args has items, issue a'
nl|'\n'
comment|'# deprecation warning'
nl|'\n'
indent|'    '
name|'oldapi'
op|'='
name|'bool'
op|'('
name|'args'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
name|'iter'
op|'('
name|'keys'
op|')'
newline|'\n'
comment|'# a string can be iterated, but indicates'
nl|'\n'
comment|"# keys wasn't passed as a list"
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'keys'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'oldapi'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'oldapi'
op|'='
name|'True'
newline|'\n'
name|'keys'
op|'='
op|'['
name|'keys'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'oldapi'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"Passing *args to Redis.%s has been deprecated. "'
nl|'\n'
string|'"Pass an iterable to ``keys`` instead"'
op|'%'
name|'command'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'extend'
op|'('
name|'args'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'keys'
newline|'\n'
nl|'\n'
DECL|function|timestamp_to_datetime
dedent|''
name|'def'
name|'timestamp_to_datetime'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Converts a unix timestamp to a Python datetime object"'
newline|'\n'
name|'if'
name|'not'
name|'response'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'int'
op|'('
name|'response'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'fromtimestamp'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|function|string_keys_to_dict
dedent|''
name|'def'
name|'string_keys_to_dict'
op|'('
name|'key_string'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'dict'
op|'('
op|'['
op|'('
name|'key'
op|','
name|'callback'
op|')'
name|'for'
name|'key'
name|'in'
name|'key_string'
op|'.'
name|'split'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|dict_merge
dedent|''
name|'def'
name|'dict_merge'
op|'('
op|'*'
name|'dicts'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'merged'
op|'='
op|'{'
op|'}'
newline|'\n'
op|'['
name|'merged'
op|'.'
name|'update'
op|'('
name|'d'
op|')'
name|'for'
name|'d'
name|'in'
name|'dicts'
op|']'
newline|'\n'
name|'return'
name|'merged'
newline|'\n'
nl|'\n'
DECL|function|parse_info
dedent|''
name|'def'
name|'parse_info'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Parse the result of Redis\'s INFO command into a Python dict"'
newline|'\n'
name|'info'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|function|get_value
name|'def'
name|'get_value'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"','"
name|'not'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'sub_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'value'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'k'
op|','
name|'v'
op|'='
name|'item'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'sub_dict'
op|'['
name|'k'
op|']'
op|'='
name|'int'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'sub_dict'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'sub_dict'
newline|'\n'
dedent|''
name|'for'
name|'line'
name|'in'
name|'response'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key'
op|','
name|'value'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
name|'key'
op|']'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
name|'key'
op|']'
op|'='
name|'get_value'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'info'
newline|'\n'
nl|'\n'
DECL|function|pairs_to_dict
dedent|''
name|'def'
name|'pairs_to_dict'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"Create a dict given a list of key/value pairs"'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'zip'
op|'('
name|'response'
op|'['
op|':'
op|':'
number|'2'
op|']'
op|','
name|'response'
op|'['
number|'1'
op|':'
op|':'
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|zset_score_pairs
dedent|''
name|'def'
name|'zset_score_pairs'
op|'('
name|'response'
op|','
op|'**'
name|'options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    If ``withscores`` is specified in the options, return the response as\n    a list of (value, score) pairs\n    """'
newline|'\n'
name|'if'
name|'not'
name|'response'
name|'or'
name|'not'
name|'options'
op|'['
string|"'withscores'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'return'
name|'zip'
op|'('
name|'response'
op|'['
op|':'
op|':'
number|'2'
op|']'
op|','
name|'map'
op|'('
name|'float'
op|','
name|'response'
op|'['
number|'1'
op|':'
op|':'
number|'2'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|int_or_none
dedent|''
name|'def'
name|'int_or_none'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'response'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'int'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|function|float_or_none
dedent|''
name|'def'
name|'float_or_none'
op|'('
name|'response'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'response'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'float'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Redis
dedent|''
name|'class'
name|'Redis'
op|'('
name|'threading'
op|'.'
name|'local'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implementation of the Redis protocol.\n\n    This abstract class provides a Python interface to all Redis commands\n    and an implementation of the Redis protocol.\n\n    Connection and Pipeline derive from this, implementing how\n    the commands are sent and received to the Redis server\n    """'
newline|'\n'
DECL|variable|RESPONSE_CALLBACKS
name|'RESPONSE_CALLBACKS'
op|'='
name|'dict_merge'
op|'('
nl|'\n'
name|'string_keys_to_dict'
op|'('
nl|'\n'
string|"'AUTH DEL EXISTS EXPIRE EXPIREAT HDEL HEXISTS HMSET MOVE MSETNX '"
nl|'\n'
string|"'RENAMENX SADD SISMEMBER SMOVE SETEX SETNX SREM ZADD ZREM'"
op|','
nl|'\n'
name|'bool'
nl|'\n'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
nl|'\n'
string|"'DECRBY HLEN INCRBY LLEN SCARD SDIFFSTORE SINTERSTORE '"
nl|'\n'
string|"'SUNIONSTORE ZCARD ZREMRANGEBYSCORE ZREVRANK'"
op|','
nl|'\n'
name|'int'
nl|'\n'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
nl|'\n'
comment|'# these return OK, or int if redis-server is >=1.3.4'
nl|'\n'
string|"'LPUSH RPUSH'"
op|','
nl|'\n'
name|'lambda'
name|'r'
op|':'
name|'isinstance'
op|'('
name|'r'
op|','
name|'int'
op|')'
name|'and'
name|'r'
name|'or'
name|'r'
op|'=='
string|"'OK'"
nl|'\n'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
string|"'ZSCORE ZINCRBY'"
op|','
name|'float_or_none'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
nl|'\n'
string|"'FLUSHALL FLUSHDB LSET LTRIM MSET RENAME '"
nl|'\n'
string|"'SAVE SELECT SET SHUTDOWN'"
op|','
nl|'\n'
name|'lambda'
name|'r'
op|':'
name|'r'
op|'=='
string|"'OK'"
nl|'\n'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
string|"'SDIFF SINTER SMEMBERS SUNION'"
op|','
nl|'\n'
name|'lambda'
name|'r'
op|':'
name|'set'
op|'('
name|'r'
op|')'
nl|'\n'
op|')'
op|','
nl|'\n'
name|'string_keys_to_dict'
op|'('
string|"'ZRANGE ZRANGEBYSCORE ZREVRANGE'"
op|','
name|'zset_score_pairs'
op|')'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"'BGREWRITEAOF'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
op|'=='
string|"'Background rewriting of AOF file started'"
op|','
nl|'\n'
string|"'BGSAVE'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
op|'=='
string|"'Background saving started'"
op|','
nl|'\n'
string|"'HGETALL'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
name|'and'
name|'pairs_to_dict'
op|'('
name|'r'
op|')'
name|'or'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'INFO'"
op|':'
name|'parse_info'
op|','
nl|'\n'
string|"'LASTSAVE'"
op|':'
name|'timestamp_to_datetime'
op|','
nl|'\n'
string|"'PING'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
op|'=='
string|"'PONG'"
op|','
nl|'\n'
string|"'RANDOMKEY'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
name|'and'
name|'r'
name|'or'
name|'None'
op|','
nl|'\n'
string|"'TTL'"
op|':'
name|'lambda'
name|'r'
op|':'
name|'r'
op|'!='
op|'-'
number|'1'
name|'and'
name|'r'
name|'or'
name|'None'
op|','
nl|'\n'
string|"'ZRANK'"
op|':'
name|'int_or_none'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
comment|'# commands that should NOT pull data off the network buffer when executed'
nl|'\n'
DECL|variable|SUBSCRIPTION_COMMANDS
name|'SUBSCRIPTION_COMMANDS'
op|'='
name|'set'
op|'('
op|'['
string|"'SUBSCRIBE'"
op|','
string|"'UNSUBSCRIBE'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|'='
string|"'localhost'"
op|','
name|'port'
op|'='
number|'6379'
op|','
nl|'\n'
name|'db'
op|'='
number|'0'
op|','
name|'password'
op|'='
name|'None'
op|','
name|'socket_timeout'
op|'='
name|'None'
op|','
nl|'\n'
name|'connection_pool'
op|'='
name|'None'
op|','
nl|'\n'
name|'charset'
op|'='
string|"'utf-8'"
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'encoding'
op|'='
name|'charset'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'='
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'subscribed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'connection_pool'
op|'='
name|'connection_pool'
name|'and'
name|'connection_pool'
name|'or'
name|'ConnectionPool'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'select'
op|'('
name|'db'
op|','
name|'host'
op|','
name|'port'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
newline|'\n'
nl|'\n'
comment|'#### Legacty accessors of connection information ####'
nl|'\n'
DECL|member|_get_host
dedent|''
name|'def'
name|'_get_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'host'
newline|'\n'
DECL|variable|host
dedent|''
name|'host'
op|'='
name|'property'
op|'('
name|'_get_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_port
name|'def'
name|'_get_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'port'
newline|'\n'
DECL|variable|port
dedent|''
name|'port'
op|'='
name|'property'
op|'('
name|'_get_port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_db
name|'def'
name|'_get_db'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'db'
newline|'\n'
DECL|variable|db
dedent|''
name|'db'
op|'='
name|'property'
op|'('
name|'_get_db'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pipeline
name|'def'
name|'pipeline'
op|'('
name|'self'
op|','
name|'transaction'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a new pipeline object that can queue multiple commands for\n        later execution. ``transaction`` indicates whether all commands\n        should be executed atomically. Apart from multiple atomic operations,\n        pipelines are useful for batch loading of data as they reduce the\n        number of back and forth network operations between client and server.\n        """'
newline|'\n'
name|'return'
name|'Pipeline'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'connection'
op|','
nl|'\n'
name|'transaction'
op|','
nl|'\n'
name|'self'
op|'.'
name|'encoding'
op|','
nl|'\n'
name|'self'
op|'.'
name|'errors'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#### COMMAND EXECUTION AND PROTOCOL PARSING ####'
nl|'\n'
DECL|member|_execute_command
dedent|''
name|'def'
name|'_execute_command'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'command'
op|','
op|'**'
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subscription_command'
op|'='
name|'command_name'
name|'in'
name|'self'
op|'.'
name|'SUBSCRIPTION_COMMANDS'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'subscribed'
name|'and'
name|'not'
name|'subscription_command'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RedisError'
op|'('
string|'"Cannot issue commands other than SUBSCRIBE and "'
nl|'\n'
string|'"UNSUBSCRIBE while channels are open"'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'('
name|'command'
op|','
name|'self'
op|')'
newline|'\n'
name|'if'
name|'subscription_command'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'parse_response'
op|'('
name|'command_name'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConnectionError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'('
name|'command'
op|','
name|'self'
op|')'
newline|'\n'
name|'if'
name|'subscription_command'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'parse_response'
op|'('
name|'command_name'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute_command
dedent|''
dedent|''
name|'def'
name|'execute_command'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Sends the command to the redis server and returns it\'s response"'
newline|'\n'
name|'cmd_count'
op|'='
name|'len'
op|'('
name|'args'
op|')'
newline|'\n'
name|'cmds'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'enc_value'
op|'='
name|'self'
op|'.'
name|'encode'
op|'('
name|'i'
op|')'
newline|'\n'
name|'cmds'
op|'.'
name|'append'
op|'('
string|"'$%s\\r\\n%s\\r\\n'"
op|'%'
op|'('
name|'len'
op|'('
name|'enc_value'
op|')'
op|','
name|'enc_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_execute_command'
op|'('
nl|'\n'
name|'args'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'*%s\\r\\n%s'"
op|'%'
op|'('
name|'cmd_count'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'cmds'
op|')'
op|')'
op|','
nl|'\n'
op|'**'
name|'options'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_response
dedent|''
name|'def'
name|'_parse_response'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'catch_errors'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection'
newline|'\n'
name|'response'
op|'='
name|'conn'
op|'.'
name|'read'
op|'('
op|')'
op|'['
op|':'
op|'-'
number|'2'
op|']'
comment|'# strip last two characters (\\r\\n)'
newline|'\n'
name|'if'
name|'not'
name|'response'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'ConnectionError'
op|'('
string|'"Socket closed on remote end"'
op|')'
newline|'\n'
nl|'\n'
comment|'# server returned a null value'
nl|'\n'
dedent|''
name|'if'
name|'response'
name|'in'
op|'('
string|"'$-1'"
op|','
string|"'*-1'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'byte'
op|','
name|'response'
op|'='
name|'response'
op|'['
number|'0'
op|']'
op|','
name|'response'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'# server returned an error'
nl|'\n'
name|'if'
name|'byte'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'response'
op|'.'
name|'startswith'
op|'('
string|"'ERR '"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'response'
op|'='
name|'response'
op|'['
number|'4'
op|':'
op|']'
newline|'\n'
dedent|''
name|'raise'
name|'ResponseError'
op|'('
name|'response'
op|')'
newline|'\n'
comment|'# single value'
nl|'\n'
dedent|''
name|'elif'
name|'byte'
op|'=='
string|"'+'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'response'
newline|'\n'
comment|'# int value'
nl|'\n'
dedent|''
name|'elif'
name|'byte'
op|'=='
string|"':'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'response'
op|')'
newline|'\n'
comment|'# bulk response'
nl|'\n'
dedent|''
name|'elif'
name|'byte'
op|'=='
string|"'$'"
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'response'
op|')'
newline|'\n'
name|'if'
name|'length'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'length'
name|'and'
name|'conn'
op|'.'
name|'read'
op|'('
name|'length'
op|')'
name|'or'
string|"''"
newline|'\n'
name|'conn'
op|'.'
name|'read'
op|'('
number|'2'
op|')'
comment|'# read the \\r\\n delimiter'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
comment|'# multi-bulk response'
nl|'\n'
dedent|''
name|'elif'
name|'byte'
op|'=='
string|"'*'"
op|':'
newline|'\n'
indent|'            '
name|'length'
op|'='
name|'int'
op|'('
name|'response'
op|')'
newline|'\n'
name|'if'
name|'length'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'catch_errors'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
name|'self'
op|'.'
name|'_parse_response'
op|'('
name|'command_name'
op|','
name|'catch_errors'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'length'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# for pipelines, we need to read everything,'
nl|'\n'
comment|"# including response errors. otherwise we'd"
nl|'\n'
comment|'# completely mess up the receive buffer'
nl|'\n'
indent|'                '
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'length'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'data'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parse_response'
op|'('
name|'command_name'
op|','
name|'catch_errors'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'data'
op|'.'
name|'append'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'InvalidResponse'
op|'('
string|'"Unknown response type for: %s"'
op|'%'
name|'command_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|parse_response
dedent|''
name|'def'
name|'parse_response'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'catch_errors'
op|'='
name|'False'
op|','
op|'**'
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Parses a response from the Redis server"'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_parse_response'
op|'('
name|'command_name'
op|','
name|'catch_errors'
op|')'
newline|'\n'
name|'if'
name|'command_name'
name|'in'
name|'self'
op|'.'
name|'RESPONSE_CALLBACKS'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'RESPONSE_CALLBACKS'
op|'['
name|'command_name'
op|']'
op|'('
name|'response'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Encode ``value`` using the instance\'s charset"'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
name|'self'
op|'.'
name|'encoding'
op|','
name|'self'
op|'.'
name|'errors'
op|')'
newline|'\n'
comment|'# not a string or unicode, attempt to convert to a string'
nl|'\n'
dedent|''
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|'#### CONNECTION HANDLING ####'
nl|'\n'
DECL|member|get_connection
dedent|''
name|'def'
name|'get_connection'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'port'
op|','
name|'db'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a connection object"'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'connection_pool'
op|'.'
name|'get_connection'
op|'('
nl|'\n'
name|'host'
op|','
name|'port'
op|','
name|'db'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
newline|'\n'
comment|'# if for whatever reason the connection gets a bad password, make'
nl|'\n'
comment|'# sure a subsequent attempt with the right password makes its way'
nl|'\n'
comment|'# to the connection'
nl|'\n'
name|'conn'
op|'.'
name|'password'
op|'='
name|'password'
newline|'\n'
name|'return'
name|'conn'
newline|'\n'
nl|'\n'
DECL|member|_setup_connection
dedent|''
name|'def'
name|'_setup_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        After successfully opening a socket to the Redis server, the\n        connection object calls this method to authenticate and select\n        the appropriate database.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'password'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'AUTH'"
op|','
name|'self'
op|'.'
name|'connection'
op|'.'
name|'password'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'AuthenticationError'
op|'('
string|'"Invalid Password"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SELECT'"
op|','
name|'self'
op|'.'
name|'connection'
op|'.'
name|'db'
op|')'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'db'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'password'
op|'='
name|'None'
op|','
nl|'\n'
name|'socket_timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Switch to a different Redis connection.\n\n        If the host and port aren\'t provided and there\'s an existing\n        connection, use the existing connection\'s host and port instead.\n\n        Note this method actually replaces the underlying connection object\n        prior to issuing the SELECT command.  This makes sure we protect\n        the thread-safe connections\n        """'
newline|'\n'
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'connection'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RedisError'
op|'('
string|'"A valid hostname or IP address "'
nl|'\n'
string|'"must be specified"'
op|')'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'if'
name|'port'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'connection'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'RedisError'
op|'('
string|'"A valid port must be specified"'
op|')'
newline|'\n'
dedent|''
name|'port'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'port'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'get_connection'
op|'('
nl|'\n'
name|'host'
op|','
name|'port'
op|','
name|'db'
op|','
name|'password'
op|','
name|'socket_timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#### SERVER INFORMATION ####'
nl|'\n'
DECL|member|bgrewriteaof
dedent|''
name|'def'
name|'bgrewriteaof'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Tell the Redis server to rewrite the AOF file from data in memory."'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'BGREWRITEAOF'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|bgsave
dedent|''
name|'def'
name|'bgsave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tell the Redis server to save its data to disk.  Unlike save(),\n        this method is asynchronous and returns immediately.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'BGSAVE'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|dbsize
dedent|''
name|'def'
name|'dbsize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns the number of keys in the current database"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'DBSIZE'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
op|'*'
name|'names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Delete one or more keys specified by ``names``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'DEL'"
op|','
op|'*'
name|'names'
op|')'
newline|'\n'
DECL|variable|__delitem__
dedent|''
name|'__delitem__'
op|'='
name|'delete'
newline|'\n'
nl|'\n'
DECL|member|flush
name|'def'
name|'flush'
op|'('
name|'self'
op|','
name|'all_dbs'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"\'flush\' has been deprecated. "'
nl|'\n'
string|'"Use Redis.flushdb() or Redis.flushall() instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'all_dbs'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'flushall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'flushdb'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|flushall
dedent|''
name|'def'
name|'flushall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Delete all keys in all databases on the current host"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'FLUSHALL'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|flushdb
dedent|''
name|'def'
name|'flushdb'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Delete all keys in the current database"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'FLUSHDB'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|info
dedent|''
name|'def'
name|'info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a dictionary containing information about the Redis server"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'INFO'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|lastsave
dedent|''
name|'def'
name|'lastsave'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a Python datetime object representing the last time the\n        Redis database was saved to disk\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LASTSAVE'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|ping
dedent|''
name|'def'
name|'ping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Ping the Redis server"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'PING'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tell the Redis server to save its data to disk,\n        blocking until the save is complete\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SAVE'"
op|')'
newline|'\n'
nl|'\n'
comment|'#### BASIC KEY COMMANDS ####'
nl|'\n'
DECL|member|append
dedent|''
name|'def'
name|'append'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Appends the string ``value`` to the value at ``key``. If ``key``\n        doesn\'t already exist, create it with a value of ``value``.\n        Returns the new length of the value at ``key``.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'APPEND'"
op|','
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decr
dedent|''
name|'def'
name|'decr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'amount'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Decrements the value of ``key`` by ``amount``.  If no key exists,\n        the value will be initialized as 0 - ``amount``\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'DECRBY'"
op|','
name|'name'
op|','
name|'amount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exists
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a boolean indicating whether key ``name`` exists"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'EXISTS'"
op|','
name|'name'
op|')'
newline|'\n'
DECL|variable|__contains__
dedent|''
name|'__contains__'
op|'='
name|'exists'
newline|'\n'
nl|'\n'
DECL|member|expire
name|'def'
name|'expire'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'time'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Set an expire flag on key ``name`` for ``time`` seconds"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'EXPIRE'"
op|','
name|'name'
op|','
name|'time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expireat
dedent|''
name|'def'
name|'expireat'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'when'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set an expire flag on key ``name``. ``when`` can be represented\n        as an integer indicating unix time or a Python datetime object.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'when'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'when'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'mktime'
op|'('
name|'when'
op|'.'
name|'timetuple'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'EXPIREAT'"
op|','
name|'name'
op|','
name|'when'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the value at key ``name``, or None of the key doesn\'t exist\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'GET'"
op|','
name|'name'
op|')'
newline|'\n'
DECL|variable|__getitem__
dedent|''
name|'__getitem__'
op|'='
name|'get'
newline|'\n'
nl|'\n'
DECL|member|getset
name|'def'
name|'getset'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the value at key ``name`` to ``value`` if key doesn\'t exist\n        Return the value at key ``name`` atomically\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'GETSET'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|incr
dedent|''
name|'def'
name|'incr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'amount'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Increments the value of ``key`` by ``amount``.  If no key exists,\n        the value will be initialized as ``amount``\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'INCRBY'"
op|','
name|'name'
op|','
name|'amount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|','
name|'pattern'
op|'='
string|"'*'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a list of keys matching ``pattern``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'KEYS'"
op|','
name|'pattern'
op|')'
newline|'\n'
nl|'\n'
DECL|member|mget
dedent|''
name|'def'
name|'mget'
op|'('
name|'self'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of values ordered identically to ``keys``\n\n        * Passing *args to this method has been deprecated *\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'mget'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'MGET'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|mset
dedent|''
name|'def'
name|'mset'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Sets each key in the ``mapping`` dict to its corresponding value"'
newline|'\n'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
op|'['
name|'items'
op|'.'
name|'extend'
op|'('
name|'pair'
op|')'
name|'for'
name|'pair'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'MSET'"
op|','
op|'*'
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|msetnx
dedent|''
name|'def'
name|'msetnx'
op|'('
name|'self'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sets each key in the ``mapping`` dict to its corresponding value if\n        none of the keys are already set\n        """'
newline|'\n'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
op|'['
name|'items'
op|'.'
name|'extend'
op|'('
name|'pair'
op|')'
name|'for'
name|'pair'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'MSETNX'"
op|','
op|'*'
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|move
dedent|''
name|'def'
name|'move'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'db'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Moves the key ``name`` to a different Redis database ``db``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'MOVE'"
op|','
name|'name'
op|','
name|'db'
op|')'
newline|'\n'
nl|'\n'
DECL|member|randomkey
dedent|''
name|'def'
name|'randomkey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns the name of a random key"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RANDOMKEY'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|rename
dedent|''
name|'def'
name|'rename'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Rename key ``src`` to ``dst``\n\n        * The following flags have been deprecated *\n        If ``preserve`` is True, rename the key only if the destination name\n            doesn\'t already exist\n        """'
newline|'\n'
name|'if'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'preserve'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"preserve option to \'rename\' is deprecated, "'
nl|'\n'
string|'"use Redis.renamenx instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'['
string|"'preserve'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'renamenx'
op|'('
name|'src'
op|','
name|'dst'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RENAME'"
op|','
name|'src'
op|','
name|'dst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|renamenx
dedent|''
name|'def'
name|'renamenx'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Rename key ``src`` to ``dst`` if ``dst`` doesn\'t already exist"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RENAMENX'"
op|','
name|'src'
op|','
name|'dst'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the value at key ``name`` to ``value``\n\n        * The following flags have been deprecated *\n        If ``preserve`` is True, set the value only if key doesn\'t already\n        exist\n        If ``getset`` is True, set the value only if key doesn\'t already exist\n        and return the resulting value of key\n        """'
newline|'\n'
name|'if'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'getset'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"getset option to \'set\' is deprecated, "'
nl|'\n'
string|'"use Redis.getset() instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'['
string|"'getset'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'getset'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|"'preserve'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"preserve option to \'set\' is deprecated, "'
nl|'\n'
string|'"use Redis.setnx() instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|'['
string|"'preserve'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'self'
op|'.'
name|'setnx'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SET'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
DECL|variable|__setitem__
dedent|''
name|'__setitem__'
op|'='
name|'set'
newline|'\n'
nl|'\n'
DECL|member|setex
name|'def'
name|'setex'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'time'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the value of key ``name`` to ``value``\n        that expires in ``time`` seconds\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SETEX'"
op|','
name|'name'
op|','
name|'time'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setnx
dedent|''
name|'def'
name|'setnx'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Set the value of key ``name`` to ``value`` if key doesn\'t exist"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SETNX'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|substr
dedent|''
name|'def'
name|'substr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|'='
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a substring of the string at key ``name``. ``start`` and ``end``\n        are 0-based integers specifying the portion of the string to return.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SUBSTR'"
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ttl
dedent|''
name|'def'
name|'ttl'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns the number of seconds until the key ``name`` will expire"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'TTL'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|type
dedent|''
name|'def'
name|'type'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns the type of key ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'TYPE'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#### LIST COMMANDS ####'
nl|'\n'
DECL|member|blpop
dedent|''
name|'def'
name|'blpop'
op|'('
name|'self'
op|','
name|'keys'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        LPOP a value off of the first non-empty list\n        named in the ``keys`` list.\n\n        If none of the lists in ``keys`` has a value to LPOP, then block\n        for ``timeout`` seconds, or until a value gets pushed on to one\n        of the lists.\n\n        If timeout is 0, then block indefinitely.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'append'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'BLPOP'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|brpop
dedent|''
name|'def'
name|'brpop'
op|'('
name|'self'
op|','
name|'keys'
op|','
name|'timeout'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        RPOP a value off of the first non-empty list\n        named in the ``keys`` list.\n\n        If none of the lists in ``keys`` has a value to LPOP, then block\n        for ``timeout`` seconds, or until a value gets pushed on to one\n        of the lists.\n\n        If timeout is 0, then block indefinitely.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'append'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'BRPOP'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lindex
dedent|''
name|'def'
name|'lindex'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the item from list ``name`` at position ``index``\n\n        Negative indexes are supported and will return an item at the\n        end of the list\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LINDEX'"
op|','
name|'name'
op|','
name|'index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|llen
dedent|''
name|'def'
name|'llen'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the length of the list ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LLEN'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lpop
dedent|''
name|'def'
name|'lpop'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Remove and return the first item of the list ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LPOP'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lpush
dedent|''
name|'def'
name|'lpush'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Push ``value`` onto the head of the list ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LPUSH'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lrange
dedent|''
name|'def'
name|'lrange'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a slice of the list ``name`` between\n        position ``start`` and ``end``\n\n        ``start`` and ``end`` can be negative numbers just like\n        Python slicing notation\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LRANGE'"
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lrem
dedent|''
name|'def'
name|'lrem'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'num'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove the first ``num`` occurrences of ``value`` from list ``name``\n\n        If ``num`` is 0, then all occurrences will be removed\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LREM'"
op|','
name|'name'
op|','
name|'num'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|lset
dedent|''
name|'def'
name|'lset'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'index'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Set ``position`` of list ``name`` to ``value``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LSET'"
op|','
name|'name'
op|','
name|'index'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ltrim
dedent|''
name|'def'
name|'ltrim'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Trim the list ``name``, removing all values not within the slice\n        between ``start`` and ``end``\n\n        ``start`` and ``end`` can be negative numbers just like\n        Python slicing notation\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'LTRIM'"
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
DECL|member|pop
dedent|''
name|'def'
name|'pop'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'tail'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Pop and return the first or last element of list ``name``\n\n        * This method has been deprecated,\n          use Redis.lpop or Redis.rpop instead *\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"Redis.pop has been deprecated, "'
nl|'\n'
string|'"use Redis.lpop or Redis.rpop instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'tail'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'rpop'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'lpop'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|push
dedent|''
name|'def'
name|'push'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'head'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Push ``value`` onto list ``name``.\n\n        * This method has been deprecated,\n          use Redis.lpush or Redis.rpush instead *\n        """'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"Redis.push has been deprecated, "'
nl|'\n'
string|'"use Redis.lpush or Redis.rpush instead"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'head'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'lpush'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'rpush'
op|'('
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rpop
dedent|''
name|'def'
name|'rpop'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Remove and return the last item of the list ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RPOP'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rpoplpush
dedent|''
name|'def'
name|'rpoplpush'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        RPOP a value off of the ``src`` list and atomically LPUSH it\n        on to the ``dst`` list.  Returns the value.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RPOPLPUSH'"
op|','
name|'src'
op|','
name|'dst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|rpush
dedent|''
name|'def'
name|'rpush'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Push ``value`` onto the tail of the list ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'RPUSH'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sort
dedent|''
name|'def'
name|'sort'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|'='
name|'None'
op|','
name|'num'
op|'='
name|'None'
op|','
name|'by'
op|'='
name|'None'
op|','
name|'get'
op|'='
name|'None'
op|','
nl|'\n'
name|'desc'
op|'='
name|'False'
op|','
name|'alpha'
op|'='
name|'False'
op|','
name|'store'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sort and return the list, set or sorted set at ``name``.\n\n        ``start`` and ``num`` allow for paging through the sorted data\n\n        ``by`` allows using an external key to weight and sort the items.\n            Use an "*" to indicate where in the key the item value is located\n\n        ``get`` allows for returning items from external keys rather than the\n            sorted data itself.  Use an "*" to indicate where int he key\n            the item value is located\n\n        ``desc`` allows for reversing the sort\n\n        ``alpha`` allows for sorting lexicographically rather than numerically\n\n        ``store`` allows for storing the result of the sort into\n            the key ``store``\n        """'
newline|'\n'
name|'if'
op|'('
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'num'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'num'
name|'is'
name|'not'
name|'None'
name|'and'
name|'start'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RedisError'
op|'('
string|'"``start`` and ``num`` must both be specified"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pieces'
op|'='
op|'['
name|'name'
op|']'
newline|'\n'
name|'if'
name|'by'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'BY'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'by'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'num'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'LIMIT'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'start'
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'num'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'get'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'GET'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'get'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'desc'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'DESC'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'alpha'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'ALPHA'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'store'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'STORE'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'store'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SORT'"
op|','
op|'*'
name|'pieces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#### SET COMMANDS ####'
nl|'\n'
DECL|member|sadd
dedent|''
name|'def'
name|'sadd'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Add ``value`` to set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SADD'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|scard
dedent|''
name|'def'
name|'scard'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the number of elements in set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SCARD'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sdiff
dedent|''
name|'def'
name|'sdiff'
op|'('
name|'self'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the difference of sets specified by ``keys``"'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sdiff'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SDIFF'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sdiffstore
dedent|''
name|'def'
name|'sdiffstore'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the difference of sets specified by ``keys`` into a new\n        set named ``dest``.  Returns the number of keys in the new set.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sdiffstore'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SDIFFSTORE'"
op|','
name|'dest'
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sinter
dedent|''
name|'def'
name|'sinter'
op|'('
name|'self'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the intersection of sets specified by ``keys``"'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sinter'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SINTER'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sinterstore
dedent|''
name|'def'
name|'sinterstore'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the intersection of sets specified by ``keys`` into a new\n        set named ``dest``.  Returns the number of keys in the new set.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sinterstore'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SINTERSTORE'"
op|','
name|'dest'
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sismember
dedent|''
name|'def'
name|'sismember'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return a boolean indicating if ``value`` is a member of set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SISMEMBER'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|smembers
dedent|''
name|'def'
name|'smembers'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return all members of the set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SMEMBERS'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|smove
dedent|''
name|'def'
name|'smove'
op|'('
name|'self'
op|','
name|'src'
op|','
name|'dst'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Move ``value`` from set ``src`` to set ``dst`` atomically"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SMOVE'"
op|','
name|'src'
op|','
name|'dst'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|spop
dedent|''
name|'def'
name|'spop'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Remove and return a random member of set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SPOP'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|srandmember
dedent|''
name|'def'
name|'srandmember'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return a random member of set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SRANDMEMBER'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|srem
dedent|''
name|'def'
name|'srem'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Remove ``value`` from set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SREM'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sunion
dedent|''
name|'def'
name|'sunion'
op|'('
name|'self'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the union of sets specifiued by ``keys``"'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sunion'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SUNION'"
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sunionstore
dedent|''
name|'def'
name|'sunionstore'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'keys'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the union of sets specified by ``keys`` into a new\n        set named ``dest``.  Returns the number of keys in the new set.\n        """'
newline|'\n'
name|'keys'
op|'='
name|'list_or_args'
op|'('
string|"'sunionstore'"
op|','
name|'keys'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SUNIONSTORE'"
op|','
name|'dest'
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#### SORTED SET COMMANDS ####'
nl|'\n'
DECL|member|zadd
dedent|''
name|'def'
name|'zadd'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'score'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Add member ``value`` with score ``score`` to sorted set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZADD'"
op|','
name|'name'
op|','
name|'score'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zcard
dedent|''
name|'def'
name|'zcard'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the number of elements in the sorted set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZCARD'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zincr
dedent|''
name|'def'
name|'zincr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'member'
op|','
name|'value'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"This has been deprecated, use zincrby instead"'
newline|'\n'
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'DeprecationWarning'
op|'('
nl|'\n'
string|'"Redis.zincr has been deprecated, use Redis.zincrby instead"'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'zincrby'
op|'('
name|'key'
op|','
name|'member'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zincrby
dedent|''
name|'def'
name|'zincrby'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'amount'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Increment the score of ``value`` in sorted set ``name`` by ``amount``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZINCRBY'"
op|','
name|'name'
op|','
name|'amount'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zinter
dedent|''
name|'def'
name|'zinter'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'keys'
op|','
name|'aggregate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Intersect multiple sorted sets specified by ``keys`` into\n        a new sorted set, ``dest``. Scores in the destination will be\n        aggregated based on the ``aggregate``, or SUM if none is provided.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_zaggregate'
op|'('
string|"'ZINTER'"
op|','
name|'dest'
op|','
name|'keys'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrange
dedent|''
name|'def'
name|'zrange'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|','
name|'desc'
op|'='
name|'False'
op|','
name|'withscores'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a range of values from sorted set ``name`` between\n        ``start`` and ``end`` sorted in ascending order.\n\n        ``start`` and ``end`` can be negative, indicating the end of the range.\n\n        ``desc`` indicates to sort in descending order.\n\n        ``withscores`` indicates to return the scores along with the values.\n            The return type is a list of (value, score) pairs\n        """'
newline|'\n'
name|'if'
name|'desc'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'zrevrange'
op|'('
name|'name'
op|','
name|'start'
op|','
name|'end'
op|','
name|'withscores'
op|')'
newline|'\n'
dedent|''
name|'pieces'
op|'='
op|'['
string|"'ZRANGE'"
op|','
name|'name'
op|','
name|'start'
op|','
name|'end'
op|']'
newline|'\n'
name|'if'
name|'withscores'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'withscores'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
op|'*'
name|'pieces'
op|','
op|'**'
op|'{'
string|"'withscores'"
op|':'
name|'withscores'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrangebyscore
dedent|''
name|'def'
name|'zrangebyscore'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'min'
op|','
name|'max'
op|','
nl|'\n'
name|'start'
op|'='
name|'None'
op|','
name|'num'
op|'='
name|'None'
op|','
name|'withscores'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a range of values from the sorted set ``name`` with scores\n        between ``min`` and ``max``.\n\n        If ``start`` and ``num`` are specified, then return a slice of the range.\n\n        ``withscores`` indicates to return the scores along with the values.\n            The return type is a list of (value, score) pairs\n        """'
newline|'\n'
name|'if'
op|'('
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'num'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'num'
name|'is'
name|'not'
name|'None'
name|'and'
name|'start'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RedisError'
op|'('
string|'"``start`` and ``num`` must both be specified"'
op|')'
newline|'\n'
dedent|''
name|'pieces'
op|'='
op|'['
string|"'ZRANGEBYSCORE'"
op|','
name|'name'
op|','
name|'min'
op|','
name|'max'
op|']'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'num'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'extend'
op|'('
op|'['
string|"'LIMIT'"
op|','
name|'start'
op|','
name|'num'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'withscores'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'withscores'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
op|'*'
name|'pieces'
op|','
op|'**'
op|'{'
string|"'withscores'"
op|':'
name|'withscores'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrank
dedent|''
name|'def'
name|'zrank'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a 0-based value indicating the rank of ``value`` in sorted set\n        ``name``\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZRANK'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrem
dedent|''
name|'def'
name|'zrem'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Remove member ``value`` from sorted set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZREM'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zremrangebyscore
dedent|''
name|'def'
name|'zremrangebyscore'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'min'
op|','
name|'max'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove all elements in the sorted set ``name`` with scores\n        between ``min`` and ``max``\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZREMRANGEBYSCORE'"
op|','
name|'name'
op|','
name|'min'
op|','
name|'max'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrevrange
dedent|''
name|'def'
name|'zrevrange'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'start'
op|','
name|'num'
op|','
name|'withscores'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a range of values from sorted set ``name`` between\n        ``start`` and ``num`` sorted in descending order.\n\n        ``start`` and ``num`` can be negative, indicating the end of the range.\n\n        ``withscores`` indicates to return the scores along with the values\n            as a dictionary of value => score\n        """'
newline|'\n'
name|'pieces'
op|'='
op|'['
string|"'ZREVRANGE'"
op|','
name|'name'
op|','
name|'start'
op|','
name|'num'
op|']'
newline|'\n'
name|'if'
name|'withscores'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'withscores'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
op|'*'
name|'pieces'
op|','
op|'**'
op|'{'
string|"'withscores'"
op|':'
name|'withscores'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zrevrank
dedent|''
name|'def'
name|'zrevrank'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a 0-based value indicating the descending rank of\n        ``value`` in sorted set ``name``\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZREVRANK'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zscore
dedent|''
name|'def'
name|'zscore'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the score of element ``value`` in sorted set ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'ZSCORE'"
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|zunion
dedent|''
name|'def'
name|'zunion'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'keys'
op|','
name|'aggregate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Union multiple sorted sets specified by ``keys`` into\n        a new sorted set, ``dest``. Scores in the destination will be\n        aggregated based on the ``aggregate``, or SUM if none is provided.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_zaggregate'
op|'('
string|"'ZUNION'"
op|','
name|'dest'
op|','
name|'keys'
op|','
name|'aggregate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_zaggregate
dedent|''
name|'def'
name|'_zaggregate'
op|'('
name|'self'
op|','
name|'command'
op|','
name|'dest'
op|','
name|'keys'
op|','
name|'aggregate'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pieces'
op|'='
op|'['
name|'command'
op|','
name|'dest'
op|','
name|'len'
op|'('
name|'keys'
op|')'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'keys'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
name|'keys'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'keys'
op|'='
op|'['
name|'i'
op|'['
number|'0'
op|']'
name|'for'
name|'i'
name|'in'
name|'items'
op|']'
newline|'\n'
name|'weights'
op|'='
op|'['
name|'i'
op|'['
number|'1'
op|']'
name|'for'
name|'i'
name|'in'
name|'items'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'weights'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'pieces'
op|'.'
name|'extend'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'if'
name|'weights'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'WEIGHTS'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'extend'
op|'('
name|'weights'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'aggregate'
op|':'
newline|'\n'
indent|'            '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'AGGREGATE'"
op|')'
newline|'\n'
name|'pieces'
op|'.'
name|'append'
op|'('
name|'aggregate'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
op|'*'
name|'pieces'
op|')'
newline|'\n'
nl|'\n'
comment|'#### HASH COMMANDS ####'
nl|'\n'
DECL|member|hdel
dedent|''
name|'def'
name|'hdel'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Delete ``key`` from hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HDEL'"
op|','
name|'name'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hexists
dedent|''
name|'def'
name|'hexists'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a boolean indicating if ``key`` exists within hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HEXISTS'"
op|','
name|'name'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hget
dedent|''
name|'def'
name|'hget'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the value of ``key`` within the hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HGET'"
op|','
name|'name'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hgetall
dedent|''
name|'def'
name|'hgetall'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return a Python dict of the hash\'s name/value pairs"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HGETALL'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hincrby
dedent|''
name|'def'
name|'hincrby'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'key'
op|','
name|'amount'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Increment the value of ``key`` in hash ``name`` by ``amount``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HINCRBY'"
op|','
name|'name'
op|','
name|'key'
op|','
name|'amount'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hkeys
dedent|''
name|'def'
name|'hkeys'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the list of keys within hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HKEYS'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hlen
dedent|''
name|'def'
name|'hlen'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the number of elements in hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HLEN'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hset
dedent|''
name|'def'
name|'hset'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set ``key`` to ``value`` within hash ``name``\n        Returns 1 if HSET created a new field, otherwise 0\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HSET'"
op|','
name|'name'
op|','
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hmset
dedent|''
name|'def'
name|'hmset'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sets each key in the ``mapping`` dict to its corresponding value\n        in the hash ``name``\n        """'
newline|'\n'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
op|'['
name|'items'
op|'.'
name|'extend'
op|'('
name|'pair'
op|')'
name|'for'
name|'pair'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HMSET'"
op|','
name|'name'
op|','
op|'*'
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hmget
dedent|''
name|'def'
name|'hmget'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Returns a list of values ordered identically to ``keys``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HMGET'"
op|','
name|'name'
op|','
op|'*'
name|'keys'
op|')'
newline|'\n'
nl|'\n'
DECL|member|hvals
dedent|''
name|'def'
name|'hvals'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Return the list of values within hash ``name``"'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'HVALS'"
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# channels'
nl|'\n'
DECL|member|psubscribe
dedent|''
name|'def'
name|'psubscribe'
op|'('
name|'self'
op|','
name|'patterns'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Subscribe to all channels matching any pattern in ``patterns``"'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'patterns'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'patterns'
op|'='
op|'['
name|'patterns'
op|']'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'PSUBSCRIBE'"
op|','
op|'*'
name|'patterns'
op|')'
newline|'\n'
comment|'# this is *after* the SUBSCRIBE in order to allow for lazy and broken'
nl|'\n'
comment|'# connections that need to issue AUTH and SELECT commands'
nl|'\n'
name|'self'
op|'.'
name|'subscribed'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|punsubscribe
dedent|''
name|'def'
name|'punsubscribe'
op|'('
name|'self'
op|','
name|'patterns'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unsubscribe from any channel matching any pattern in ``patterns``.\n        If empty, unsubscribe from all channels.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'patterns'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'patterns'
op|'='
op|'['
name|'patterns'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'PUNSUBSCRIBE'"
op|','
op|'*'
name|'patterns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
name|'self'
op|','
name|'channels'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Subscribe to ``channels``, waiting for messages to be published"'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'channels'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'channels'
op|'='
op|'['
name|'channels'
op|']'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'SUBSCRIBE'"
op|','
op|'*'
name|'channels'
op|')'
newline|'\n'
comment|'# this is *after* the SUBSCRIBE in order to allow for lazy and broken'
nl|'\n'
comment|'# connections that need to issue AUTH and SELECT commands'
nl|'\n'
name|'self'
op|'.'
name|'subscribed'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'response'
newline|'\n'
nl|'\n'
DECL|member|unsubscribe
dedent|''
name|'def'
name|'unsubscribe'
op|'('
name|'self'
op|','
name|'channels'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unsubscribe from ``channels``. If empty, unsubscribe\n        from all channels\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'channels'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'channels'
op|'='
op|'['
name|'channels'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'UNSUBSCRIBE'"
op|','
op|'*'
name|'channels'
op|')'
newline|'\n'
nl|'\n'
DECL|member|publish
dedent|''
name|'def'
name|'publish'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Publish ``message`` on ``channel``.\n        Returns the number of subscribers the message was delivered to.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'execute_command'
op|'('
string|"'PUBLISH'"
op|','
name|'channel'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|listen
dedent|''
name|'def'
name|'listen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Listen for messages on channels this client has been subscribed to"'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'subscribed'
op|':'
newline|'\n'
indent|'            '
name|'r'
op|'='
name|'self'
op|'.'
name|'parse_response'
op|'('
string|"'LISTEN'"
op|')'
newline|'\n'
name|'message_type'
op|','
name|'channel'
op|','
name|'message'
op|'='
name|'r'
op|'['
number|'0'
op|']'
op|','
name|'r'
op|'['
number|'1'
op|']'
op|','
name|'r'
op|'['
number|'2'
op|']'
newline|'\n'
name|'yield'
op|'('
name|'message_type'
op|','
name|'channel'
op|','
name|'message'
op|')'
newline|'\n'
name|'if'
name|'message_type'
op|'=='
string|"'unsubscribe'"
name|'and'
name|'message'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'subscribed'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pipeline
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'Pipeline'
op|'('
name|'Redis'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Pipelines provide a way to transmit multiple commands to the Redis server\n    in one transmission.  This is convenient for batch processing, such as\n    saving all the values in a list to Redis.\n\n    All commands executed within a pipeline are wrapped with MULTI and EXEC\n    calls. This guarantees all commands executed in the pipeline will be\n    executed atomically.\n\n    Any command raising an exception does *not* halt the execution of\n    subsequent commands in the pipeline. Instead, the exception is caught\n    and its instance is placed into the response list returned by execute().\n    Code iterating over the response list should be able to deal with an\n    instance of an exception as a potential value. In general, these will be\n    ResponseError exceptions, such as those raised when issuing a command\n    on a key of a different datatype.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
name|'transaction'
op|','
name|'charset'
op|','
name|'errors'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'transaction'
op|'='
name|'transaction'
newline|'\n'
name|'self'
op|'.'
name|'encoding'
op|'='
name|'charset'
newline|'\n'
name|'self'
op|'.'
name|'errors'
op|'='
name|'errors'
newline|'\n'
name|'self'
op|'.'
name|'subscribed'
op|'='
name|'False'
comment|'# NOTE not in use, but necessary'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'command_stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|_execute_command
dedent|''
name|'def'
name|'_execute_command'
op|'('
name|'self'
op|','
name|'command_name'
op|','
name|'command'
op|','
op|'**'
name|'options'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stage a command to be executed when execute() is next called\n\n        Returns the current Pipeline object back so commands can be\n        chained together, such as:\n\n        pipe = pipe.set(\'foo\', \'bar\').incr(\'baz\').decr(\'bang\')\n\n        At some other point, you can then run: pipe.execute(),\n        which will execute all commands queued in the pipe.\n        """'
newline|'\n'
comment|"# if the command_name is 'AUTH' or 'SELECT', then this command"
nl|'\n'
comment|'# must have originated after a socket connection and a call to'
nl|'\n'
comment|'# _setup_connection(). run these commands immediately without'
nl|'\n'
comment|'# buffering them.'
nl|'\n'
name|'if'
name|'command_name'
name|'in'
op|'('
string|"'AUTH'"
op|','
string|"'SELECT'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'super'
op|'('
name|'Pipeline'
op|','
name|'self'
op|')'
op|'.'
name|'_execute_command'
op|'('
nl|'\n'
name|'command_name'
op|','
name|'command'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'command_stack'
op|'.'
name|'append'
op|'('
op|'('
name|'command_name'
op|','
name|'command'
op|','
name|'options'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|_execute_transaction
dedent|''
name|'def'
name|'_execute_transaction'
op|'('
name|'self'
op|','
name|'commands'
op|')'
op|':'
newline|'\n'
comment|'# wrap the commands in MULTI ... EXEC statements to indicate an'
nl|'\n'
comment|'# atomic operation'
nl|'\n'
indent|'        '
name|'all_cmds'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'c'
name|'for'
name|'_1'
op|','
name|'c'
op|','
name|'_2'
name|'in'
name|'chain'
op|'('
nl|'\n'
op|'('
op|'('
string|"''"
op|','
string|"'MULTI\\r\\n'"
op|','
string|"''"
op|')'
op|','
op|')'
op|','
nl|'\n'
name|'commands'
op|','
nl|'\n'
op|'('
op|'('
string|"''"
op|','
string|"'EXEC\\r\\n'"
op|','
string|"''"
op|')'
op|','
op|')'
nl|'\n'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'('
name|'all_cmds'
op|','
name|'self'
op|')'
newline|'\n'
comment|'# parse off the response for MULTI and all commands prior to EXEC'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'commands'
op|')'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_'
op|'='
name|'self'
op|'.'
name|'parse_response'
op|'('
string|"'_'"
op|')'
newline|'\n'
comment|'# parse the EXEC. we want errors returned as items in the response'
nl|'\n'
dedent|''
name|'response'
op|'='
name|'self'
op|'.'
name|'parse_response'
op|'('
string|"'_'"
op|','
name|'catch_errors'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'response'
op|')'
op|'!='
name|'len'
op|'('
name|'commands'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ResponseError'
op|'('
string|'"Wrong number of response items from "'
nl|'\n'
string|'"pipeline execution"'
op|')'
newline|'\n'
comment|'# Run any callbacks for the commands run in the pipeline'
nl|'\n'
dedent|''
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'r'
op|','
name|'cmd'
name|'in'
name|'zip'
op|'('
name|'response'
op|','
name|'commands'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'r'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cmd'
op|'['
number|'0'
op|']'
name|'in'
name|'self'
op|'.'
name|'RESPONSE_CALLBACKS'
op|':'
newline|'\n'
indent|'                    '
name|'r'
op|'='
name|'self'
op|'.'
name|'RESPONSE_CALLBACKS'
op|'['
name|'cmd'
op|'['
number|'0'
op|']'
op|']'
op|'('
name|'r'
op|','
op|'**'
name|'cmd'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'data'
op|'.'
name|'append'
op|'('
name|'r'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_execute_pipeline
dedent|''
name|'def'
name|'_execute_pipeline'
op|'('
name|'self'
op|','
name|'commands'
op|')'
op|':'
newline|'\n'
comment|'# build up all commands into a single request to increase network perf'
nl|'\n'
indent|'        '
name|'all_cmds'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'c'
name|'for'
name|'_1'
op|','
name|'c'
op|','
name|'_2'
name|'in'
name|'commands'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'send'
op|'('
name|'all_cmds'
op|','
name|'self'
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'command_name'
op|','
name|'_'
op|','
name|'options'
name|'in'
name|'commands'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'parse_response'
op|'('
name|'command_name'
op|','
name|'catch_errors'
op|'='
name|'True'
op|','
op|'**'
name|'options'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"Execute all the commands in the current pipeline"'
newline|'\n'
name|'stack'
op|'='
name|'self'
op|'.'
name|'command_stack'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'transaction'
op|':'
newline|'\n'
indent|'            '
name|'execute'
op|'='
name|'self'
op|'.'
name|'_execute_transaction'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'execute'
op|'='
name|'self'
op|'.'
name|'_execute_pipeline'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'execute'
op|'('
name|'stack'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConnectionError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'disconnect'
op|'('
op|')'
newline|'\n'
name|'return'
name|'execute'
op|'('
name|'stack'
op|')'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RedisError'
op|'('
string|'"Cannot select a different database from a pipeline"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

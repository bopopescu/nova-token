begin_unit
comment|'#!/usr/bin/python2.4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unit tests for Mox.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2008 Google Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'cStringIO'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'import'
name|'mox_test_helper'
newline|'\n'
nl|'\n'
DECL|variable|OS_LISTDIR
name|'OS_LISTDIR'
op|'='
name|'mox_test_helper'
op|'.'
name|'os'
op|'.'
name|'listdir'
newline|'\n'
nl|'\n'
DECL|class|ExpectedMethodCallsErrorTest
name|'class'
name|'ExpectedMethodCallsErrorTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test creation and string conversion of ExpectedMethodCallsError."""'
newline|'\n'
nl|'\n'
DECL|member|testAtLeastOneMethod
name|'def'
name|'testAtLeastOneMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOneError
dedent|''
name|'def'
name|'testOneError'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'output'"
op|')'
newline|'\n'
name|'e'
op|'='
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|'('
op|'['
name|'method'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|'"Verify: Expected methods never called:\\n"'
nl|'\n'
string|'"  0.  testMethod(1, 2) -> \'output\'"'
op|','
nl|'\n'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testManyErrors
dedent|''
name|'def'
name|'testManyErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method1'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method1'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'output'"
op|')'
newline|'\n'
name|'method2'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method2'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
string|'"only named"'
op|')'
newline|'\n'
name|'method3'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod2"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method3'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'44'
op|')'
newline|'\n'
name|'method4'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method4'
op|'('
number|'1'
op|','
number|'2'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'output'"
op|')'
newline|'\n'
name|'e'
op|'='
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|'('
op|'['
name|'method1'
op|','
name|'method2'
op|','
name|'method3'
op|','
name|'method4'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|'"Verify: Expected methods never called:\\n"'
nl|'\n'
string|'"  0.  testMethod(1, 2) -> \'output\'\\n"'
nl|'\n'
string|'"  1.  testMethod(a=1, b=2, c=\'only named\') -> None\\n"'
nl|'\n'
string|'"  2.  testMethod2() -> 44\\n"'
nl|'\n'
string|'"  3.  testMethod(1, 2) -> \'output\'"'
op|','
nl|'\n'
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OrTest
dedent|''
dedent|''
name|'class'
name|'OrTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test Or correctly chains Comparators."""'
newline|'\n'
nl|'\n'
DECL|member|testValidOr
name|'def'
name|'testValidOr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Or should be True if either Comparator returns True."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Or'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'dict'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Or'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'dict'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Or'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidOr
dedent|''
name|'def'
name|'testInvalidOr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Or should be False if both Comparators return False."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'Or'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'dict'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AndTest
dedent|''
dedent|''
name|'class'
name|'AndTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test And correctly chains Comparators."""'
newline|'\n'
nl|'\n'
DECL|member|testValidAnd
name|'def'
name|'testValidAnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""And should be True if both Comparators return True."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'And'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testClauseOneFails
dedent|''
name|'def'
name|'testClauseOneFails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""And should be False if the first Comparator returns False."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'And'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'dict'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'=='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAdvancedUsage
dedent|''
name|'def'
name|'testAdvancedUsage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""And should work with other Comparators.\n\n    Note: this test is reliant on In and ContainsKeyValue.\n    """'
newline|'\n'
name|'test_dict'
op|'='
op|'{'
string|'"mock"'
op|':'
string|'"obj"'
op|','
string|'"testing"'
op|':'
string|'"isCOOL"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'And'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
string|'"testing"'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"mock"'
op|','
string|'"obj"'
op|')'
op|')'
op|'=='
name|'test_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAdvancedUsageFails
dedent|''
name|'def'
name|'testAdvancedUsageFails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Note: this test is reliant on In and ContainsKeyValue."""'
newline|'\n'
name|'test_dict'
op|'='
op|'{'
string|'"mock"'
op|':'
string|'"obj"'
op|','
string|'"testing"'
op|':'
string|'"isCOOL"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'And'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
string|'"NOTFOUND"'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"mock"'
op|','
string|'"obj"'
op|')'
op|')'
op|'=='
name|'test_dict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SameElementsAsTest
dedent|''
dedent|''
name|'class'
name|'SameElementsAsTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test SameElementsAs correctly identifies sequences with same elements."""'
newline|'\n'
nl|'\n'
DECL|member|testSortedLists
name|'def'
name|'testSortedLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if two lists are exactly equal."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
number|'1'
op|','
number|'2.0'
op|','
string|"'c'"
op|']'
op|')'
op|'=='
op|'['
number|'1'
op|','
number|'2.0'
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnsortedLists
dedent|''
name|'def'
name|'testUnsortedLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if two lists are unequal but have same elements."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
number|'1'
op|','
number|'2.0'
op|','
string|"'c'"
op|']'
op|')'
op|'=='
op|'['
number|'2.0'
op|','
string|"'c'"
op|','
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnhashableLists
dedent|''
name|'def'
name|'testUnhashableLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if two lists have the same unhashable elements."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
op|'{'
string|"'a'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
number|'2'
op|':'
string|"'b'"
op|'}'
op|']'
op|')'
op|'=='
nl|'\n'
op|'['
op|'{'
number|'2'
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
number|'1'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEmptyLists
dedent|''
name|'def'
name|'testEmptyLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True for two empty lists."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
op|']'
op|')'
op|'=='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnequalLists
dedent|''
name|'def'
name|'testUnequalLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if the lists are not equal."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
number|'1'
op|','
number|'2.0'
op|','
string|"'c'"
op|']'
op|')'
op|'=='
op|'['
number|'2.0'
op|','
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnequalUnhashableLists
dedent|''
name|'def'
name|'testUnequalUnhashableLists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if two lists with unhashable elements are unequal."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
op|'{'
string|"'a'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
number|'2'
op|':'
string|"'b'"
op|'}'
op|']'
op|')'
op|'=='
op|'['
op|'{'
number|'2'
op|':'
string|"'b'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainsKeyValueTest
dedent|''
dedent|''
name|'class'
name|'ContainsKeyValueTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test ContainsKeyValue correctly identifies key/value pairs in a dict.\n  """'
newline|'\n'
nl|'\n'
DECL|member|testValidPair
name|'def'
name|'testValidPair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the key value is in the dict."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"key"'
op|','
number|'1'
op|')'
op|'=='
op|'{'
string|'"key"'
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidValue
dedent|''
name|'def'
name|'testInvalidValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if the value is not correct."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"key"'
op|','
number|'1'
op|')'
op|'=='
op|'{'
string|'"key"'
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidKey
dedent|''
name|'def'
name|'testInvalidKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if they key is not in the dict."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"qux"'
op|','
number|'1'
op|')'
op|'=='
op|'{'
string|'"key"'
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainsAttributeValueTest
dedent|''
dedent|''
name|'class'
name|'ContainsAttributeValueTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test ContainsAttributeValue correctly identifies properties in an object.\n  """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create an object to test with."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObject
name|'class'
name|'TestObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|key
indent|'      '
name|'key'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'test_object'
op|'='
name|'TestObject'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidPair
dedent|''
name|'def'
name|'testValidPair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the object has the key attribute and it matches."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'ContainsAttributeValue'
op|'('
string|'"key"'
op|','
number|'1'
op|')'
op|'=='
name|'self'
op|'.'
name|'test_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidValue
dedent|''
name|'def'
name|'testInvalidValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if the value is not correct."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"key"'
op|','
number|'2'
op|')'
op|'=='
name|'self'
op|'.'
name|'test_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidKey
dedent|''
name|'def'
name|'testInvalidKey'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if they the object doesn\'t have the property."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"qux"'
op|','
number|'1'
op|')'
op|'=='
name|'self'
op|'.'
name|'test_object'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InTest
dedent|''
dedent|''
name|'class'
name|'InTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test In correctly identifies a key in a list/dict"""'
newline|'\n'
nl|'\n'
DECL|member|testItemInList
name|'def'
name|'testItemInList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the item is in the list."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
number|'1'
op|')'
op|'=='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKeyInDict
dedent|''
name|'def'
name|'testKeyInDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the item is a key in a dict."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
string|'"test"'
op|')'
op|'=='
op|'{'
string|'"test"'
op|':'
string|'"module"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotTest
dedent|''
dedent|''
name|'class'
name|'NotTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test Not correctly identifies False predicates."""'
newline|'\n'
nl|'\n'
DECL|member|testItemInList
name|'def'
name|'testItemInList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the item is NOT in the list."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Not'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
number|'42'
op|')'
op|')'
op|'=='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKeyInDict
dedent|''
name|'def'
name|'testKeyInDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the item is NOT a key in a dict."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Not'
op|'('
name|'mox'
op|'.'
name|'In'
op|'('
string|'"foo"'
op|')'
op|')'
op|'=='
op|'{'
string|'"key"'
op|':'
number|'42'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvalidKeyWithNot
dedent|''
name|'def'
name|'testInvalidKeyWithNot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if they key is NOT in the dict."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Not'
op|'('
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|'"qux"'
op|','
number|'1'
op|')'
op|')'
op|'=='
op|'{'
string|'"key"'
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StrContainsTest
dedent|''
dedent|''
name|'class'
name|'StrContainsTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test StrContains correctly checks for substring occurrence of a parameter.\n  """'
newline|'\n'
nl|'\n'
DECL|member|testValidSubstringAtStart
name|'def'
name|'testValidSubstringAtStart'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the substring is at the start of the string."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'StrContains'
op|'('
string|'"hello"'
op|')'
op|'=='
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidSubstringInMiddle
dedent|''
name|'def'
name|'testValidSubstringInMiddle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the substring is in the middle of the string."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'StrContains'
op|'('
string|'"lo wo"'
op|')'
op|'=='
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testValidSubstringAtEnd
dedent|''
name|'def'
name|'testValidSubstringAtEnd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the substring is at the end of the string."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'StrContains'
op|'('
string|'"ld"'
op|')'
op|'=='
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInvaildSubstring
dedent|''
name|'def'
name|'testInvaildSubstring'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if the substring is not in the string."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'StrContains'
op|'('
string|'"AAA"'
op|')'
op|'=='
string|'"hello world"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleMatches
dedent|''
name|'def'
name|'testMultipleMatches'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if there are multiple occurances of substring."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'StrContains'
op|'('
string|'"abc"'
op|')'
op|'=='
string|'"ababcabcabcababc"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RegexTest
dedent|''
dedent|''
name|'class'
name|'RegexTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test Regex correctly matches regular expressions."""'
newline|'\n'
nl|'\n'
DECL|member|testIdentifyBadSyntaxDuringInit
name|'def'
name|'testIdentifyBadSyntaxDuringInit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The user should know immediately if a regex has bad syntax."""'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'re'
op|'.'
name|'error'
op|','
name|'mox'
op|'.'
name|'Regex'
op|','
string|"'(a|b'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testPatternInMiddle
dedent|''
name|'def'
name|'testPatternInMiddle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True if the pattern matches at the middle of the string.\n\n    This ensures that re.search is used (instead of re.find).\n    """'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|'r"a\\s+b"'
op|')'
op|'=='
string|'"x y z a b c"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNonMatchPattern
dedent|''
name|'def'
name|'testNonMatchPattern'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return False if the pattern does not match the string."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|'r"a\\s+b"'
op|')'
op|'=='
string|'"x y z"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagsPassedCorrectly
dedent|''
name|'def'
name|'testFlagsPassedCorrectly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return True as we pass IGNORECASE flag."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|'r"A"'
op|','
name|'re'
op|'.'
name|'IGNORECASE'
op|')'
op|'=='
string|'"a"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReprWithoutFlags
dedent|''
name|'def'
name|'testReprWithoutFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""repr should return the regular expression pattern."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'repr'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|'r"a\\s+b"'
op|')'
op|')'
op|'=='
string|'"<regular expression \'a\\s+b\'>"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReprWithFlags
dedent|''
name|'def'
name|'testReprWithFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""repr should return the regular expression pattern and flags."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'repr'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|'r"a\\s+b"'
op|','
name|'flags'
op|'='
number|'4'
op|')'
op|')'
op|'=='
nl|'\n'
string|'"<regular expression \'a\\s+b\', flags=4>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsATest
dedent|''
dedent|''
name|'class'
name|'IsATest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify IsA correctly checks equality based upon class type, not value."""'
newline|'\n'
nl|'\n'
DECL|member|testEqualityValid
name|'def'
name|'testEqualityValid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that == correctly identifies objects of the same type."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|'=='
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityInvalid
dedent|''
name|'def'
name|'testEqualityInvalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that == correctly identifies objects of different types."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|'=='
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInequalityValid
dedent|''
name|'def'
name|'testInequalityValid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that != identifies objects of different type."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|'!='
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInequalityInvalid
dedent|''
name|'def'
name|'testInequalityInvalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that != correctly identifies objects of the same type."""'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|'!='
string|'"test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityInListValid
dedent|''
name|'def'
name|'testEqualityInListValid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify list contents are properly compared."""'
newline|'\n'
name|'isa_list'
op|'='
op|'['
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|']'
newline|'\n'
name|'str_list'
op|'='
op|'['
string|'"abc"'
op|','
string|'"def"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isa_list'
op|'=='
name|'str_list'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEquailtyInListInvalid
dedent|''
name|'def'
name|'testEquailtyInListInvalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify list contents are properly compared."""'
newline|'\n'
name|'isa_list'
op|'='
op|'['
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|']'
newline|'\n'
name|'mixed_list'
op|'='
op|'['
string|'"abc"'
op|','
number|'123'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isa_list'
op|'=='
name|'mixed_list'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSpecialTypes
dedent|''
name|'def'
name|'testSpecialTypes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that IsA can handle objects like cStringIO.StringIO."""'
newline|'\n'
name|'isA'
op|'='
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
op|')'
newline|'\n'
name|'stringIO'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isA'
op|'=='
name|'stringIO'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsAlmostTest
dedent|''
dedent|''
name|'class'
name|'IsAlmostTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify IsAlmost correctly checks equality of floating point numbers."""'
newline|'\n'
nl|'\n'
DECL|member|testEqualityValid
name|'def'
name|'testEqualityValid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that == correctly identifies nearly equivalent floats."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
number|'1.8999999999'
op|')'
op|','
number|'1.9'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityInvalid
dedent|''
name|'def'
name|'testEqualityInvalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that == correctly identifies non-equivalent floats."""'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
number|'1.899'
op|')'
op|','
number|'1.9'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityWithPlaces
dedent|''
name|'def'
name|'testEqualityWithPlaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that specifying places has the desired effect."""'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
number|'1.899'
op|')'
op|','
number|'1.9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
number|'1.899'
op|','
name|'places'
op|'='
number|'2'
op|')'
op|','
number|'1.9'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNonNumericTypes
dedent|''
name|'def'
name|'testNonNumericTypes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that IsAlmost handles non-numeric types properly."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
number|'1.8999999999'
op|')'
op|','
string|"'1.9'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
string|"'1.8999999999'"
op|')'
op|','
number|'1.9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'mox'
op|'.'
name|'IsAlmost'
op|'('
string|"'1.8999999999'"
op|')'
op|','
string|"'1.9'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockMethodTest
dedent|''
dedent|''
name|'class'
name|'MockMethodTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test class to verify that the MockMethod class is working correctly."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
op|'('
op|'['
string|"'original'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
name|'self'
op|'.'
name|'expected_method'
op|']'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNameAttribute
dedent|''
name|'def'
name|'testNameAttribute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should provide a __name__ attribute."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'testMethod'"
op|','
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAndReturnNoneByDefault
dedent|''
name|'def'
name|'testAndReturnNoneByDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return None by default."""'
newline|'\n'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'mock_method'
op|'('
op|'['
string|"'original'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'return_value'
op|'=='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAndReturnValue
dedent|''
name|'def'
name|'testAndReturnValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should return a specificed return value."""'
newline|'\n'
name|'expected_return_value'
op|'='
string|'"test"'
newline|'\n'
name|'self'
op|'.'
name|'expected_method'
op|'.'
name|'AndReturn'
op|'('
name|'expected_return_value'
op|')'
newline|'\n'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'mock_method'
op|'('
op|'['
string|"'original'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'return_value'
op|'=='
name|'expected_return_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAndRaiseException
dedent|''
name|'def'
name|'testAndRaiseException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should raise a specified exception."""'
newline|'\n'
name|'expected_exception'
op|'='
name|'Exception'
op|'('
string|"'test exception'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expected_method'
op|'.'
name|'AndRaise'
op|'('
name|'expected_exception'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'mock_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWithSideEffects
dedent|''
name|'def'
name|'testWithSideEffects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should call state modifier."""'
newline|'\n'
name|'local_list'
op|'='
op|'['
string|"'original'"
op|']'
newline|'\n'
DECL|function|modifier
name|'def'
name|'modifier'
op|'('
name|'mutable_list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'local_list'
name|'is'
name|'mutable_list'
op|')'
newline|'\n'
name|'mutable_list'
op|'['
number|'0'
op|']'
op|'='
string|"'mutation'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'expected_method'
op|'.'
name|'WithSideEffects'
op|'('
name|'modifier'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'('
name|'local_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'mutation'"
op|','
name|'local_list'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWithReturningSideEffects
dedent|''
name|'def'
name|'testWithReturningSideEffects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should call state modifier and propagate its return value."""'
newline|'\n'
name|'local_list'
op|'='
op|'['
string|"'original'"
op|']'
newline|'\n'
name|'expected_return'
op|'='
string|"'expected_return'"
newline|'\n'
DECL|function|modifier_with_return
name|'def'
name|'modifier_with_return'
op|'('
name|'mutable_list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'local_list'
name|'is'
name|'mutable_list'
op|')'
newline|'\n'
name|'mutable_list'
op|'['
number|'0'
op|']'
op|'='
string|"'mutation'"
newline|'\n'
name|'return'
name|'expected_return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'expected_method'
op|'.'
name|'WithSideEffects'
op|'('
name|'modifier_with_return'
op|')'
newline|'\n'
name|'actual_return'
op|'='
name|'self'
op|'.'
name|'mock_method'
op|'('
name|'local_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'mutation'"
op|','
name|'local_list'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected_return'
op|','
name|'actual_return'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWithReturningSideEffectsWithAndReturn
dedent|''
name|'def'
name|'testWithReturningSideEffectsWithAndReturn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should call state modifier and ignore its return value."""'
newline|'\n'
name|'local_list'
op|'='
op|'['
string|"'original'"
op|']'
newline|'\n'
name|'expected_return'
op|'='
string|"'expected_return'"
newline|'\n'
name|'unexpected_return'
op|'='
string|"'unexpected_return'"
newline|'\n'
DECL|function|modifier_with_return
name|'def'
name|'modifier_with_return'
op|'('
name|'mutable_list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'local_list'
name|'is'
name|'mutable_list'
op|')'
newline|'\n'
name|'mutable_list'
op|'['
number|'0'
op|']'
op|'='
string|"'mutation'"
newline|'\n'
name|'return'
name|'unexpected_return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'expected_method'
op|'.'
name|'WithSideEffects'
op|'('
name|'modifier_with_return'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'expected_return'
op|')'
newline|'\n'
name|'actual_return'
op|'='
name|'self'
op|'.'
name|'mock_method'
op|'('
name|'local_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'mutation'"
op|','
name|'local_list'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected_return'
op|','
name|'actual_return'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityNoParamsEqual
dedent|''
name|'def'
name|'testEqualityNoParamsEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with the same name and without params should be equal."""'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityNoParamsNotEqual
dedent|''
name|'def'
name|'testEqualityNoParamsNotEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with different names and without params should not be equal."""'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"otherMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityParamsEqual
dedent|''
name|'def'
name|'testEqualityParamsEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with the same name and parameters should be equal."""'
newline|'\n'
name|'params'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'expected_method'
op|'.'
name|'_params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'_params'
op|'='
name|'params'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityParamsNotEqual
dedent|''
name|'def'
name|'testEqualityParamsNotEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with the same name and different params should not be equal."""'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'expected_method'
op|'.'
name|'_params'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'_params'
op|'='
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityNamedParamsEqual
dedent|''
name|'def'
name|'testEqualityNamedParamsEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with the same name and same named params should be equal."""'
newline|'\n'
name|'named_params'
op|'='
op|'{'
string|'"input1"'
op|':'
string|'"test"'
op|','
string|'"input2"'
op|':'
string|'"params"'
op|'}'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'expected_method'
op|'.'
name|'_named_params'
op|'='
name|'named_params'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'_named_params'
op|'='
name|'named_params'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityNamedParamsNotEqual
dedent|''
name|'def'
name|'testEqualityNamedParamsNotEqual'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods with the same name and diffnamed params should not be equal."""'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'expected_method'
op|'.'
name|'_named_params'
op|'='
op|'{'
string|'"input1"'
op|':'
string|'"test"'
op|','
string|'"input2"'
op|':'
string|'"params"'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'_named_params'
op|'='
op|'{'
string|'"input1"'
op|':'
string|'"test2"'
op|','
string|'"input2"'
op|':'
string|'"params2"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualityWrongType
dedent|''
name|'def'
name|'testEqualityWrongType'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Method should not be equal to an object of a different type."""'
newline|'\n'
name|'self'
op|'.'
name|'failIfEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
string|'"string?"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testObjectEquality
dedent|''
name|'def'
name|'testObjectEquality'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Equality of objects should work without a Comparator"""'
newline|'\n'
name|'instA'
op|'='
name|'TestClass'
op|'('
op|')'
op|';'
newline|'\n'
name|'instB'
op|'='
name|'TestClass'
op|'('
op|')'
op|';'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'['
name|'instA'
op|','
op|']'
newline|'\n'
name|'expected_method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'expected_method'
op|'.'
name|'_params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_method'
op|'.'
name|'_params'
op|'='
op|'['
name|'instB'
op|','
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'mock_method'
op|','
name|'expected_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStrConversion
dedent|''
name|'def'
name|'testStrConversion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"f"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"st"'
op|','
name|'n1'
op|'='
number|'8'
op|','
name|'n2'
op|'='
string|'"st2"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
op|'('
string|'"f(1, 2, \'st\', n1=8, n2=\'st2\') -> None"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
string|'"only positional"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
string|'"testMethod(1, 2, \'only positional\') -> None"'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
string|'"only named"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
nl|'\n'
string|'"testMethod(a=1, b=2, c=\'only named\') -> None"'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
string|'"testMethod() -> None"'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
name|'x'
op|'='
string|'"only 1 parameter"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
string|'"testMethod(x=\'only 1 parameter\') -> None"'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'return_value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
string|'"testMethod() -> \'return_value\'"'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|'"testMethod"'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'method'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
string|"'a'"
op|','
op|'{'
number|'1'
op|':'
number|'2'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'method'
op|')'
op|','
string|'"testMethod() -> (\'a\', {1: 2})"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockAnythingTest
dedent|''
dedent|''
name|'class'
name|'MockAnythingTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify that the MockAnything class works as expected."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'mock_object'
op|'='
name|'mox'
op|'.'
name|'MockAnything'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testRepr
dedent|''
name|'def'
name|'testRepr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Calling repr on a MockAnything instance must work."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'<MockAnything instance>'"
op|','
name|'repr'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSetupMode
dedent|''
name|'def'
name|'testSetupMode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify the mock will accept any call."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'NonsenseCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_expected_calls_queue'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReplayWithExpectedCall
dedent|''
name|'def'
name|'testReplayWithExpectedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify the mock replays method calls as expected."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# setup method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
comment|'# start replay mode'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# make method call'
newline|'\n'
nl|'\n'
DECL|member|testReplayWithUnexpectedCall
dedent|''
name|'def'
name|'testReplayWithUnexpectedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unexpected method calls should raise UnexpectedMethodCallError."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# setup method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
comment|'# start replay mode'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'OtherValidCall'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVerifyWithCompleteReplay
dedent|''
name|'def'
name|'testVerifyWithCompleteReplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify should not raise an exception for a valid replay."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# setup method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
comment|'# start replay mode'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# make method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVerifyWithIncompleteReplay
dedent|''
name|'def'
name|'testVerifyWithIncompleteReplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify should raise an exception if the replay was not complete."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# setup method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
comment|'# start replay mode'
newline|'\n'
comment|'# ValidCall() is never made'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSpecialClassMethod
dedent|''
name|'def'
name|'testSpecialClassMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify should not raise an exception when special methods are used."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'['
number|'1'
op|']'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'returned_val'
op|'='
name|'self'
op|'.'
name|'mock_object'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'returned_val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNonzero
dedent|''
name|'def'
name|'testNonzero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""You should be able to use the mock object in an if."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mock_object'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|testNotNone
dedent|''
dedent|''
name|'def'
name|'testNotNone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mock should be comparable to None."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'mock_object'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'mock_object'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|testEquals
dedent|''
dedent|''
name|'def'
name|'testEquals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A mock should be able to compare itself to another object."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'self'
op|'.'
name|'mock_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualsMockFailure
dedent|''
name|'def'
name|'testEqualsMockFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify equals identifies unequal objects."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'SillyCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'mox'
op|'.'
name|'MockAnything'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualsInstanceFailure
dedent|''
name|'def'
name|'testEqualsInstanceFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify equals identifies that objects are different instances."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'TestClass'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNotEquals
dedent|''
name|'def'
name|'testNotEquals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify not equals works."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'!='
name|'self'
op|'.'
name|'mock_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNestedMockCallsRecordedSerially
dedent|''
name|'def'
name|'testNestedMockCallsRecordedSerially'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that nested calls work when recorded serially."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallInner'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallOuter'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallOuter'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallInner'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNestedMockCallsRecordedNested
dedent|''
name|'def'
name|'testNestedMockCallsRecordedNested'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that nested cals work when recorded in a nested fashion."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallOuter'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallInner'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallOuter'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'CallInner'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIsCallable
dedent|''
name|'def'
name|'testIsCallable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that MockAnything can even mock a simple callable.\n\n    This is handy for "stubbing out" a method in a module with a mock, and\n    verifying that it was called.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'mox0rd'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'mox0rd'"
op|','
name|'self'
op|'.'
name|'mock_object'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIsReprable
dedent|''
name|'def'
name|'testIsReprable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that MockAnythings can be repr\'d without causing a failure."""'
newline|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'MockAnything'"
name|'in'
name|'repr'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodCheckerTest
dedent|''
dedent|''
name|'class'
name|'MethodCheckerTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Tests MockMethod\'s use of MethodChecker method."""'
newline|'\n'
nl|'\n'
DECL|member|testNoParameters
name|'def'
name|'testNoParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'NoParameters'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'NoParameters'
op|')'
newline|'\n'
name|'method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOneParameter
dedent|''
name|'def'
name|'testOneParameter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'OneParameter'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'OneParameter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'b'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'a'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTwoParameters
dedent|''
name|'def'
name|'testTwoParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'TwoParameters'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'TwoParameters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'b'
op|'='
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'b'
op|'='
number|'2'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'3'
op|','
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testOneDefaultValue
dedent|''
name|'def'
name|'testOneDefaultValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'OneDefaultValue'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'OneDefaultValue'
op|')'
newline|'\n'
name|'method'
op|'('
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'b'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'a'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testTwoDefaultValues
dedent|''
name|'def'
name|'testTwoDefaultValues'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'TwoDefaultValues'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'TwoDefaultValues'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'d'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'d'
op|'='
number|'4'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|','
name|'d'
op|'='
number|'4'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'d'
op|'='
number|'4'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
name|'d'
op|'='
number|'4'
op|','
name|'c'
op|'='
number|'3'
op|','
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
name|'e'
op|'='
number|'9'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'e'
op|'='
number|'9'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testArgs
dedent|''
name|'def'
name|'testArgs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'Args'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
name|'CheckCallTestClass'
op|'.'
name|'Args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
name|'a'
op|'='
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKwargs
dedent|''
name|'def'
name|'testKwargs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'Kwargs'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
name|'CheckCallTestClass'
op|'.'
name|'Kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'b'
op|'='
number|'2'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
name|'a'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
name|'c'
op|'='
number|'3'
op|','
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|','
name|'d'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testArgsAndKwargs
dedent|''
name|'def'
name|'testArgsAndKwargs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'method'
op|'='
name|'mox'
op|'.'
name|'MockMethod'
op|'('
string|"'ArgsAndKwargs'"
op|','
op|'['
op|']'
op|','
name|'False'
op|','
nl|'\n'
name|'CheckCallTestClass'
op|'.'
name|'ArgsAndKwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'method'
op|'('
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'method'
op|','
number|'1'
op|','
name|'a'
op|'='
number|'2'
op|')'
newline|'\n'
name|'method'
op|'('
name|'b'
op|'='
number|'2'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
name|'c'
op|'='
number|'3'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'a'
op|'='
number|'1'
op|')'
newline|'\n'
name|'method'
op|'('
number|'1'
op|','
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CheckCallTestClass
dedent|''
dedent|''
name|'class'
name|'CheckCallTestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|NoParameters
indent|'  '
name|'def'
name|'NoParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|OneParameter
dedent|''
name|'def'
name|'OneParameter'
op|'('
name|'self'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|TwoParameters
dedent|''
name|'def'
name|'TwoParameters'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|OneDefaultValue
dedent|''
name|'def'
name|'OneDefaultValue'
op|'('
name|'self'
op|','
name|'a'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|TwoDefaultValues
dedent|''
name|'def'
name|'TwoDefaultValues'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|','
name|'c'
op|'='
number|'1'
op|','
name|'d'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|Args
dedent|''
name|'def'
name|'Args'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|Kwargs
dedent|''
name|'def'
name|'Kwargs'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|'='
number|'2'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ArgsAndKwargs
dedent|''
name|'def'
name|'ArgsAndKwargs'
op|'('
name|'self'
op|','
name|'a'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockObjectTest
dedent|''
dedent|''
name|'class'
name|'MockObjectTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify that the MockObject class works as exepcted."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'mock_object'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSetupModeWithValidCall
dedent|''
name|'def'
name|'testSetupModeWithValidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify the mock object properly mocks a basic method call."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_expected_calls_queue'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSetupModeWithInvalidCall
dedent|''
name|'def'
name|'testSetupModeWithInvalidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""UnknownMethodCallError should be raised if a non-member method is called.\n    """'
newline|'\n'
comment|"# Note: assertRaises does not catch exceptions thrown by MockObject's"
nl|'\n'
comment|'# __getattr__'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'InvalidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"No exception thrown, expected UnknownMethodCallError"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'mox'
op|'.'
name|'UnknownMethodCallError'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Wrong exception type thrown, expected UnknownMethodCallError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testReplayWithInvalidCall
dedent|''
dedent|''
name|'def'
name|'testReplayWithInvalidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""UnknownMethodCallError should be raised if a non-member method is called.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
comment|'# setup method call'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
comment|'# start replay mode'
newline|'\n'
comment|"# Note: assertRaises does not catch exceptions thrown by MockObject's"
nl|'\n'
comment|'# __getattr__'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'InvalidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fail'
op|'('
string|'"No exception thrown, expected UnknownMethodCallError"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'mox'
op|'.'
name|'UnknownMethodCallError'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Wrong exception type thrown, expected UnknownMethodCallError"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testIsInstance
dedent|''
dedent|''
name|'def'
name|'testIsInstance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mock should be able to pass as an instance of the mocked class."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'TestClass'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFindValidMethods
dedent|''
name|'def'
name|'testFindValidMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mock should be able to mock all public methods."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'ValidCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'OtherValidCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'MyClassMethod'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'MyStaticMethod'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'_ProtectedCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'__PrivateCall'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'_TestClass__PrivateCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFindsSuperclassMethods
dedent|''
name|'def'
name|'testFindsSuperclassMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mock should be able to mock superclasses methods."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'ChildClass'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'ValidCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'OtherValidCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'MyClassMethod'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'ChildValidCall'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_methods'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testAccessClassVariables
dedent|''
name|'def'
name|'testAccessClassVariables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class variables should be accessible through the mock."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'SOME_CLASS_VAR'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_vars'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'_PROTECTED_CLASS_VAR'"
name|'in'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_known_vars'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'test_value'"
op|','
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'SOME_CLASS_VAR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEquals
dedent|''
name|'def'
name|'testEquals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A mock should be able to compare itself to another object."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'self'
op|'.'
name|'mock_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualsMockFailure
dedent|''
name|'def'
name|'testEqualsMockFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify equals identifies unequal objects."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEqualsInstanceFailure
dedent|''
name|'def'
name|'testEqualsInstanceFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify equals identifies that objects are different instances."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|','
name|'TestClass'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testNotEquals
dedent|''
name|'def'
name|'testNotEquals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify not equals works."""'
newline|'\n'
name|'self'
op|'.'
name|'mock_object'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'mock_object'
op|'!='
name|'self'
op|'.'
name|'mock_object'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_ExpectedSetItem_Success
dedent|''
name|'def'
name|'testMockSetItem_ExpectedSetItem_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __setitem__() gets mocked in Dummy.\n\n    In this test, _Verify() succeeds.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_ExpectedSetItem_NoSuccess
dedent|''
name|'def'
name|'testMockSetItem_ExpectedSetItem_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __setitem__() gets mocked in Dummy.\n\n    In this test, _Verify() fails.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# NOT doing dummy['X'] = 'Y'"
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'dummy'
op|'.'
name|'_Verify'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_ExpectedNoSetItem_Success
dedent|''
name|'def'
name|'testMockSetItem_ExpectedNoSetItem_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __setitem__() gets mocked in Dummy."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
comment|"# NOT doing dummy['X'] = 'Y'"
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_ExpectedNoSetItem_NoSuccess
dedent|''
name|'def'
name|'testMockSetItem_ExpectedNoSetItem_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __setitem__() gets mocked in Dummy.\n\n    In this test, _Verify() fails.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
comment|"# NOT doing dummy['X'] = 'Y'"
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# NOT doing dummy['X'] = 'Y'"
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_ExpectedSetItem_NonmatchingParameters
dedent|''
name|'def'
name|'testMockSetItem_ExpectedSetItem_NonmatchingParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __setitem__() fails if other parameters are expected."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'dummy'
op|'['
string|"'wrong'"
op|']'
op|'='
string|"'Y'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockSetItem_WithSubClassOfNewStyleClass
dedent|''
name|'def'
name|'testMockSetItem_WithSubClassOfNewStyleClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|NewStyleTestClass
indent|'    '
name|'class'
name|'NewStyleTestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'      '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'my_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'my_dict'
op|'['
name|'key'
op|']'
op|','
name|'value'
newline|'\n'
nl|'\n'
DECL|class|TestSubClass
dedent|''
dedent|''
name|'class'
name|'TestSubClass'
op|'('
name|'NewStyleTestClass'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestSubClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'1'
op|']'
op|'='
number|'2'
newline|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'1'
op|']'
op|'='
number|'2'
newline|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetItem_ExpectedGetItem_Success
dedent|''
name|'def'
name|'testMockGetItem_ExpectedGetItem_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __getitem__() gets mocked in Dummy.\n\n    In this test, _Verify() succeeds.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'value'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dummy'
op|'['
string|"'X'"
op|']'
op|','
string|"'value'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetItem_ExpectedGetItem_NoSuccess
dedent|''
name|'def'
name|'testMockGetItem_ExpectedGetItem_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __getitem__() gets mocked in Dummy.\n\n    In this test, _Verify() fails.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'value'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# NOT doing dummy['X']"
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'dummy'
op|'.'
name|'_Verify'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetItem_ExpectedNoGetItem_NoSuccess
dedent|''
name|'def'
name|'testMockGetItem_ExpectedNoGetItem_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __getitem__() gets mocked in Dummy."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
comment|"# NOT doing dummy['X']"
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'return'
name|'dummy'
op|'['
string|"'X'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetItem_ExpectedGetItem_NonmatchingParameters
dedent|''
name|'def'
name|'testMockGetItem_ExpectedGetItem_NonmatchingParameters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __getitem__() fails if other parameters are expected."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
string|"'X'"
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'value'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'return'
name|'dummy'
op|'['
string|"'wrong'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetItem_WithSubClassOfNewStyleClass
dedent|''
name|'def'
name|'testMockGetItem_WithSubClassOfNewStyleClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|NewStyleTestClass
indent|'    '
name|'class'
name|'NewStyleTestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__getitem__
indent|'      '
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
number|'1'
op|':'
string|"'1'"
op|','
number|'2'
op|':'
string|"'2'"
op|'}'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|class|TestSubClass
dedent|''
dedent|''
name|'class'
name|'TestSubClass'
op|'('
name|'NewStyleTestClass'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestSubClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'1'
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'3'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'3'"
op|','
name|'dummy'
op|'.'
name|'__getitem__'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockIter_ExpectedIter_Success
dedent|''
name|'def'
name|'testMockIter_ExpectedIter_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __iter__() gets mocked in Dummy.\n\n    In this test, _Verify() succeeds.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'iter'
op|'('
name|'dummy'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'iter'
op|'('
op|'['
string|"'X'"
op|','
string|"'Y'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'dummy'
op|']'
op|','
op|'['
string|"'X'"
op|','
string|"'Y'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockContains_ExpectedContains_Success
dedent|''
name|'def'
name|'testMockContains_ExpectedContains_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __contains__ gets mocked in Dummy.\n\n    In this test, _Verify() succeeds.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'__contains__'
op|'('
string|"'X'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'failUnless'
op|'('
string|"'X'"
name|'in'
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockContains_ExpectedContains_NoSuccess
dedent|''
name|'def'
name|'testMockContains_ExpectedContains_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __contains__() gets mocked in Dummy.\n\n    In this test, _Verify() fails.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'__contains__'
op|'('
string|"'X'"
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'True'"
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# NOT doing 'X' in dummy"
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'dummy'
op|'.'
name|'_Verify'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockContains_ExpectedContains_NonmatchingParameter
dedent|''
name|'def'
name|'testMockContains_ExpectedContains_NonmatchingParameter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __contains__ fails if other parameters are expected."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'__contains__'
op|'('
string|"'X'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'return'
string|"'Y'"
name|'in'
name|'dummy'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockIter_ExpectedIter_NoSuccess
dedent|''
name|'def'
name|'testMockIter_ExpectedIter_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __iter__() gets mocked in Dummy.\n\n    In this test, _Verify() fails.\n    """'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'iter'
op|'('
name|'dummy'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'iter'
op|'('
op|'['
string|"'X'"
op|','
string|"'Y'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# NOT doing self.assertEqual([x for x in dummy], ['X', 'Y'])"
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'dummy'
op|'.'
name|'_Verify'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockIter_ExpectedNoIter_NoSuccess
dedent|''
name|'def'
name|'testMockIter_ExpectedNoIter_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __iter__() gets mocked in Dummy."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
comment|'# NOT doing iter(dummy)'
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|call
name|'def'
name|'call'
op|'('
op|')'
op|':'
name|'return'
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'dummy'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'call'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockIter_ExpectedGetItem_Success
dedent|''
name|'def'
name|'testMockIter_ExpectedGetItem_Success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __iter__() gets mocked in Dummy using getitem."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'SubscribtableNonIterableClass'
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'0'
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'1'
op|']'
op|'.'
name|'AndReturn'
op|'('
string|"'b'"
op|')'
newline|'\n'
name|'dummy'
op|'['
number|'2'
op|']'
op|'.'
name|'AndRaise'
op|'('
name|'IndexError'
op|')'
newline|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|','
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'dummy'
op|']'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockIter_ExpectedNoGetItem_NoSuccess
dedent|''
name|'def'
name|'testMockIter_ExpectedNoGetItem_NoSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that __iter__() gets mocked in Dummy using getitem."""'
newline|'\n'
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'SubscribtableNonIterableClass'
op|')'
newline|'\n'
comment|'# NOT doing dummy[index]'
nl|'\n'
nl|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'function'
op|'='
name|'lambda'
op|':'
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'dummy'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'function'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMockGetIter_WithSubClassOfNewStyleClass
dedent|''
name|'def'
name|'testMockGetIter_WithSubClassOfNewStyleClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|NewStyleTestClass
indent|'    '
name|'class'
name|'NewStyleTestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__iter__
indent|'      '
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestSubClass
dedent|''
dedent|''
name|'class'
name|'TestSubClass'
op|'('
name|'NewStyleTestClass'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'dummy'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestSubClass'
op|')'
newline|'\n'
name|'iter'
op|'('
name|'dummy'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'iter'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|')'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'a'"
op|','
string|"'b'"
op|']'
op|','
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'dummy'
op|']'
op|')'
newline|'\n'
name|'dummy'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInstantiationWithAdditionalAttributes
dedent|''
name|'def'
name|'testInstantiationWithAdditionalAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mock_object'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|','
name|'attrs'
op|'='
op|'{'
string|'"attr1"'
op|':'
string|'"value"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mock_object'
op|'.'
name|'attr1'
op|','
string|'"value"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCantOverrideMethodsWithAttributes
dedent|''
name|'def'
name|'testCantOverrideMethodsWithAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|','
name|'TestClass'
op|','
nl|'\n'
name|'attrs'
op|'='
op|'{'
string|'"ValidCall"'
op|':'
string|'"value"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCantMockNonPublicAttributes
dedent|''
name|'def'
name|'testCantMockNonPublicAttributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'PrivateAttributeError'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|','
name|'TestClass'
op|','
nl|'\n'
name|'attrs'
op|'='
op|'{'
string|'"_protected"'
op|':'
string|'"value"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'PrivateAttributeError'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|','
name|'TestClass'
op|','
nl|'\n'
name|'attrs'
op|'='
op|'{'
string|'"__private"'
op|':'
string|'"value"'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MoxTest
dedent|''
dedent|''
name|'class'
name|'MoxTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify Mox works correctly."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'mox'
op|'='
name|'mox'
op|'.'
name|'Mox'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCreateObject
dedent|''
name|'def'
name|'testCreateObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mox should create a mock object."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'TestClass'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVerifyObjectWithCompleteReplay
dedent|''
name|'def'
name|'testVerifyObjectWithCompleteReplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mox should replay and verify all objects it created."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCallWithArgs'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'TestClass'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCallWithArgs'
op|'('
name|'TestClass'
op|'('
string|'"some_value"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testVerifyObjectWithIncompleteReplay
dedent|''
name|'def'
name|'testVerifyObjectWithIncompleteReplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mox should raise an exception if a mock didn\'t replay completely."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
comment|'# ValidCall() is never made'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testEntireWorkflow
dedent|''
name|'def'
name|'testEntireWorkflow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the whole work flow."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|'"yes"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ret_val'
op|'='
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"yes"'
op|','
name|'ret_val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallableObject
dedent|''
name|'def'
name|'testCallableObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test recording calls to a callable object works."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'CallableClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'('
string|'"foo"'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|'"qux"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ret_val'
op|'='
name|'mock_obj'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"qux"'
op|','
name|'ret_val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testInheritedCallableObject
dedent|''
name|'def'
name|'testInheritedCallableObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test recording calls to an object inheriting from a callable object."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'InheritsFromCallable'
op|')'
newline|'\n'
name|'mock_obj'
op|'('
string|'"foo"'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|'"qux"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ret_val'
op|'='
name|'mock_obj'
op|'('
string|'"foo"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"qux"'
op|','
name|'ret_val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallOnNonCallableObject
dedent|''
name|'def'
name|'testCallOnNonCallableObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that you cannot call a non-callable object."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'mock_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testCallableObjectWithBadCall
dedent|''
name|'def'
name|'testCallableObjectWithBadCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test verifying calls to a callable object works."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'CallableClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'('
string|'"foo"'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|'"qux"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'mock_obj'
op|','
string|'"ZOOBAZ"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnorderedGroup
dedent|''
name|'def'
name|'testUnorderedGroup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that using one unordered group works."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnorderedGroupsInline
dedent|''
name|'def'
name|'testUnorderedGroupsInline'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unordered groups should work in the context of ordered calls."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleUnorderdGroups
dedent|''
name|'def'
name|'testMultipleUnorderdGroups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Multiple unoreded groups should work."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|')'
op|'.'
name|'InAnyOrder'
op|'('
string|"'group2'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Bar'
op|'('
op|')'
op|'.'
name|'InAnyOrder'
op|'('
string|"'group2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Bar'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleUnorderdGroupsOutOfOrder
dedent|''
name|'def'
name|'testMultipleUnorderdGroupsOutOfOrder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Multiple unordered groups should maintain external order"""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|')'
op|'.'
name|'InAnyOrder'
op|'('
string|"'group2'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Bar'
op|'('
op|')'
op|'.'
name|'InAnyOrder'
op|'('
string|"'group2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'mock_obj'
op|'.'
name|'Bar'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnorderedGroupWithReturnValue
dedent|''
name|'def'
name|'testUnorderedGroupWithReturnValue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unordered groups should work with return values."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'actual_two'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'actual_one'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'10'
op|','
name|'actual_two'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnorderedGroupWithComparator
dedent|''
name|'def'
name|'testUnorderedGroupWithComparator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unordered groups should work with comparators"""'
newline|'\n'
nl|'\n'
DECL|function|VerifyOne
name|'def'
name|'VerifyOne'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'cmd'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unexpected type passed to comparator: '"
op|'+'
name|'str'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cmd'
op|'=='
string|"'test'"
newline|'\n'
nl|'\n'
DECL|function|VerifyTwo
dedent|''
name|'def'
name|'VerifyTwo'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|'['
string|"'test'"
op|']'
op|','
name|'mox'
op|'.'
name|'Func'
op|'('
name|'VerifyOne'
op|')'
op|','
name|'bar'
op|'='
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'yes test'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|'['
string|"'test'"
op|']'
op|','
name|'mox'
op|'.'
name|'Func'
op|'('
name|'VerifyTwo'
op|')'
op|','
name|'bar'
op|'='
number|'1'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'anything'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|'['
string|"'test'"
op|']'
op|','
string|"'anything'"
op|','
name|'bar'
op|'='
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Foo'
op|'('
op|'['
string|"'test'"
op|']'
op|','
string|"'test'"
op|','
name|'bar'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimes
dedent|''
name|'def'
name|'testMultipleTimes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup works."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'second_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
comment|'# This tests MultipleTimes.'
newline|'\n'
name|'actual_two'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'actual_three'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'actual_one'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'second_one'
op|')'
comment|'# Repeated calls should return same number.'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'10'
op|','
name|'actual_two'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'42'
op|','
name|'actual_three'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimesUsingIsAParameter
dedent|''
name|'def'
name|'testMultipleTimesUsingIsAParameter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup works with a IsA parameter."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'str'
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
string|'"IsA"'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
string|'"1"'
op|')'
newline|'\n'
name|'second_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
string|'"2"'
op|')'
comment|'# This tests MultipleTimes.'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'actual_one'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'second_one'
op|')'
comment|'# Repeated calls should return same number.'
newline|'\n'
nl|'\n'
DECL|member|testMutlipleTimesUsingFunc
dedent|''
name|'def'
name|'testMutlipleTimesUsingFunc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that the Func is not evaluated more times than necessary.\n\n    If a Func() has side effects, it can cause a passing test to fail.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
DECL|function|MyFunc
name|'def'
name|'MyFunc'
op|'('
name|'actual_str'
op|')'
op|':'
newline|'\n'
indent|'      '
string|'"""Increment the counter if actual_str == \'foo\'."""'
newline|'\n'
name|'if'
name|'actual_str'
op|'=='
string|"'foo'"
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'counter'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
name|'mox'
op|'.'
name|'Func'
op|'('
name|'MyFunc'
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
string|"'not-foo'"
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'counter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimesThreeMethods
dedent|''
name|'def'
name|'testMultipleTimesThreeMethods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup works with three or more methods."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'8'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'7'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'4'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'actual_three'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'actual_two'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'actual_four'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'4'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'actual_one'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'8'
op|','
name|'actual_two'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'7'
op|','
name|'actual_three'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'10'
op|','
name|'actual_four'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimesMissingOne
dedent|''
name|'def'
name|'testMultipleTimesMissingOne'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup fails if one method is missing."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'8'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'7'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'4'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'mock_obj'
op|'.'
name|'Method'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimesTwoGroups
dedent|''
name|'def'
name|'testMultipleTimesTwoGroups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup works with a group after a\n    MultipleTimesGroup.\n    """'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
string|'"nr2"'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'42'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'actual_three'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'9'
op|','
name|'actual_one'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'42'
op|','
name|'actual_three'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMultipleTimesTwoGroupsFailure
dedent|''
name|'def'
name|'testMultipleTimesTwoGroupsFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test if MultipleTimesGroup fails with a group after a\n    MultipleTimesGroup.\n    """'
newline|'\n'
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'9'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
string|'"nr2"'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'42'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_obj'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'actual_one'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'1'
op|')'
newline|'\n'
name|'actual_three'
op|'='
name|'mock_obj'
op|'.'
name|'Method'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'UnexpectedMethodCallError'
op|','
name|'mock_obj'
op|'.'
name|'Method'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWithSideEffects
dedent|''
name|'def'
name|'testWithSideEffects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test side effect operations actually modify their target objects."""'
newline|'\n'
DECL|function|modifier
name|'def'
name|'modifier'
op|'('
name|'mutable_list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'mutable_list'
op|'['
number|'0'
op|']'
op|'='
string|"'mutated'"
newline|'\n'
dedent|''
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ConfigureInOutParameter'
op|'('
op|'['
string|"'original'"
op|']'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
name|'modifier'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'WorkWithParameter'
op|'('
op|'['
string|"'mutated'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'local_list'
op|'='
op|'['
string|"'original'"
op|']'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ConfigureInOutParameter'
op|'('
name|'local_list'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'WorkWithParameter'
op|'('
name|'local_list'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWithSideEffectsException
dedent|''
name|'def'
name|'testWithSideEffectsException'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test side effect operations actually modify their target objects."""'
newline|'\n'
DECL|function|modifier
name|'def'
name|'modifier'
op|'('
name|'mutable_list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'mutable_list'
op|'['
number|'0'
op|']'
op|'='
string|"'mutated'"
newline|'\n'
dedent|''
name|'mock_obj'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'method'
op|'='
name|'mock_obj'
op|'.'
name|'ConfigureInOutParameter'
op|'('
op|'['
string|"'original'"
op|']'
op|')'
newline|'\n'
name|'method'
op|'.'
name|'WithSideEffects'
op|'('
name|'modifier'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'Exception'
op|'('
string|"'exception'"
op|')'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'WorkWithParameter'
op|'('
op|'['
string|"'mutated'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'local_list'
op|'='
op|'['
string|"'original'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'failUnlessRaises'
op|'('
name|'Exception'
op|','
nl|'\n'
name|'mock_obj'
op|'.'
name|'ConfigureInOutParameter'
op|','
nl|'\n'
name|'local_list'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'WorkWithParameter'
op|'('
name|'local_list'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStubOutMethod
dedent|''
name|'def'
name|'testStubOutMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that a method is replaced with a MockAnything."""'
newline|'\n'
name|'test_obj'
op|'='
name|'TestClass'
op|'('
op|')'
newline|'\n'
comment|'# Replace OtherValidCall with a mock.'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'test_obj'
op|','
string|"'OtherValidCall'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'test_obj'
op|'.'
name|'OtherValidCall'
op|','
name|'mox'
op|'.'
name|'MockAnything'
op|')'
op|')'
newline|'\n'
name|'test_obj'
op|'.'
name|'OtherValidCall'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'actual'
op|'='
name|'test_obj'
op|'.'
name|'OtherValidCall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'foo'"
op|','
name|'actual'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'test_obj'
op|'.'
name|'OtherValidCall'
op|','
name|'mox'
op|'.'
name|'MockAnything'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStubOutClass
dedent|''
name|'def'
name|'testStubOutClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test a mocked class whose __init__ returns a Mock."""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'mox_test_helper'
op|','
string|"'TestClassFromAnotherModule'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'mox_test_helper'
op|'.'
name|'TestClassFromAnotherModule'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'MockObject'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mock_instance'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
nl|'\n'
name|'mox_test_helper'
op|'.'
name|'TestClassFromAnotherModule'
op|')'
newline|'\n'
name|'mox_test_helper'
op|'.'
name|'TestClassFromAnotherModule'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_instance'
op|'.'
name|'Value'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'mock instance'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'a_mock'
op|'='
name|'mox_test_helper'
op|'.'
name|'TestClassFromAnotherModule'
op|'('
op|')'
newline|'\n'
name|'actual'
op|'='
name|'a_mock'
op|'.'
name|'Value'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'mock instance'"
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWarnsUserIfMockingMock
dedent|''
name|'def'
name|'testWarnsUserIfMockingMock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that user is warned if they try to stub out a MockAnything."""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'TestClass'
op|','
string|"'MyStaticMethod'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|','
name|'TestClass'
op|','
nl|'\n'
string|"'MyStaticMethod'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStubOutObject
dedent|''
name|'def'
name|'testStubOutObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test than object is replaced with a Mock."""'
newline|'\n'
nl|'\n'
DECL|class|Foo
name|'class'
name|'Foo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'      '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj'
op|'='
name|'TestClass'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'foo'
op|'='
name|'Foo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'foo'
op|','
string|'"obj"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'foo'
op|'.'
name|'obj'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|')'
op|')'
newline|'\n'
name|'foo'
op|'.'
name|'obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'foo'
op|'.'
name|'obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'isinstance'
op|'('
name|'foo'
op|'.'
name|'obj'
op|','
name|'mox'
op|'.'
name|'MockObject'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testForgotReplayHelpfulMessage
dedent|''
name|'def'
name|'testForgotReplayHelpfulMessage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""If there is an AttributeError on a MockMethod, give users a helpful msg.\n    """'
newline|'\n'
name|'foo'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'bar'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'foo'
op|'.'
name|'GetBar'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'bar'
op|')'
newline|'\n'
name|'bar'
op|'.'
name|'ShowMeTheMoney'
op|'('
op|')'
newline|'\n'
comment|'# Forgot to replay!'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'foo'
op|'.'
name|'GetBar'
op|'('
op|')'
op|'.'
name|'ShowMeTheMoney'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'\'MockMethod has no attribute "ShowMeTheMoney". \''
nl|'\n'
string|"'Did you remember to put your mocks in replay mode?'"
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReplayTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'ReplayTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify Replay works properly."""'
newline|'\n'
nl|'\n'
DECL|member|testReplay
name|'def'
name|'testReplay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replay should put objects into replay mode."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_obj'
op|'.'
name|'_replay_mode'
op|')'
newline|'\n'
name|'mox'
op|'.'
name|'Replay'
op|'('
name|'mock_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_obj'
op|'.'
name|'_replay_mode'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MoxTestBaseTest
dedent|''
dedent|''
name|'class'
name|'MoxTestBaseTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify that all tests in a class derived from MoxTestBase are wrapped."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'mox'
op|'='
name|'mox'
op|'.'
name|'Mox'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'='
name|'mox'
op|'.'
name|'Mox'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'='
name|'mox'
op|'.'
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'result'
op|'='
name|'unittest'
op|'.'
name|'TestResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setUpTestClass
dedent|''
name|'def'
name|'_setUpTestClass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replacement for setUp in the test class instance.\n\n    Assigns a mox.Mox instance as the mox attribute of the test class instance.\n    This replacement Mox instance is under our control before setUp is called\n    in the test class instance.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'mox'
op|'='
name|'self'
op|'.'
name|'test_mox'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'stubs'
op|'='
name|'self'
op|'.'
name|'test_stubs'
newline|'\n'
nl|'\n'
DECL|member|_CreateTest
dedent|''
name|'def'
name|'_CreateTest'
op|'('
name|'self'
op|','
name|'test_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a test from our example mox class.\n\n    The created test instance is assigned to this instances test attribute.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'='
name|'mox_test_helper'
op|'.'
name|'ExampleMoxTest'
op|'('
name|'test_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'test'
op|','
string|"'setUp'"
op|','
name|'self'
op|'.'
name|'_setUpTestClass'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_VerifySuccess
dedent|''
name|'def'
name|'_VerifySuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run the checks to confirm test method completed successfully."""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'UnsetStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'VerifyAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'UnsetAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'SmartUnsetAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
comment|'# Needed to call the real VerifyAll() below.'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSuccess
dedent|''
name|'def'
name|'testSuccess'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Successful test method execution test."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testSuccess'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_VerifySuccess'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testSuccessNoMocks
dedent|''
name|'def'
name|'testSuccessNoMocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Let testSuccess() unset all the mocks, and verify they\'ve been unset."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testSuccess'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'OS_LISTDIR'
op|','
name|'mox_test_helper'
op|'.'
name|'os'
op|'.'
name|'listdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStubs
dedent|''
name|'def'
name|'testStubs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that "self.stubs" is provided as is useful."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testHasStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_VerifySuccess'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testStubsNoMocks
dedent|''
name|'def'
name|'testStubsNoMocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Let testHasStubs() unset the stubs by itself."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testHasStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'OS_LISTDIR'
op|','
name|'mox_test_helper'
op|'.'
name|'os'
op|'.'
name|'listdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testExpectedNotCalled
dedent|''
name|'def'
name|'testExpectedNotCalled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stubbed out method is not called."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testExpectedNotCalled'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'UnsetStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'UnsetAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'SmartUnsetAll'"
op|')'
newline|'\n'
comment|"# Don't stub out VerifyAll - that's what causes the test to fail"
nl|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testExpectedNotCalledNoMocks
dedent|''
name|'def'
name|'testExpectedNotCalledNoMocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Let testExpectedNotCalled() unset all the mocks by itself."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testExpectedNotCalled'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'OS_LISTDIR'
op|','
name|'mox_test_helper'
op|'.'
name|'os'
op|'.'
name|'listdir'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testUnexpectedCall
dedent|''
name|'def'
name|'testUnexpectedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stubbed out method is called with unexpected arguments."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testUnexpectedCall'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'UnsetStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'UnsetAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'SmartUnsetAll'"
op|')'
newline|'\n'
comment|'# Ensure no calls are made to VerifyAll()'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'VerifyAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFailure
dedent|''
name|'def'
name|'testFailure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Failing assertion in test method."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testFailure'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'UnsetStubs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'UnsetAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_stubs'
op|','
string|"'SmartUnsetAll'"
op|')'
newline|'\n'
comment|'# Ensure no calls are made to VerifyAll()'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'test_mox'
op|','
string|"'VerifyAll'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test_stubs'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'test'
op|'.'
name|'run'
op|'('
name|'result'
op|'='
name|'self'
op|'.'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'failIf'
op|'('
name|'self'
op|'.'
name|'result'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMixin
dedent|''
name|'def'
name|'testMixin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run test from mix-in test class, ensure it passes."""'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testStat'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_VerifySuccess'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMixinAgain
dedent|''
name|'def'
name|'testMixinAgain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run same test as above but from the current test class.\n\n    This ensures metaclass properly wrapped test methods from all base classes.\n    If unsetting of stubs doesn\'t happen, this will fail.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'_CreateTest'
op|'('
string|"'testStatOther'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_VerifySuccess'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VerifyTest
dedent|''
dedent|''
name|'class'
name|'VerifyTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify Verify works properly."""'
newline|'\n'
nl|'\n'
DECL|member|testVerify
name|'def'
name|'testVerify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify should be called for all objects.\n\n    This should throw an exception because the expected behavior did not occur.\n    """'
newline|'\n'
name|'mock_obj'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'mox'
op|'.'
name|'ExpectedMethodCallsError'
op|','
name|'mox'
op|'.'
name|'Verify'
op|','
name|'mock_obj'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResetTest
dedent|''
dedent|''
name|'class'
name|'ResetTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify Reset works properly."""'
newline|'\n'
nl|'\n'
DECL|member|testReset
name|'def'
name|'testReset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should empty all queues and put mocks in record mode."""'
newline|'\n'
name|'mock_obj'
op|'='
name|'mox'
op|'.'
name|'MockObject'
op|'('
name|'TestClass'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'ValidCall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_obj'
op|'.'
name|'_replay_mode'
op|')'
newline|'\n'
name|'mock_obj'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_obj'
op|'.'
name|'_replay_mode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'mock_obj'
op|'.'
name|'_expected_calls_queue'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mox'
op|'.'
name|'Reset'
op|'('
name|'mock_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_obj'
op|'.'
name|'_replay_mode'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'mock_obj'
op|'.'
name|'_expected_calls_queue'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyTestCase
dedent|''
dedent|''
name|'class'
name|'MyTestCase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Simulate the use of a fake wrapper around Python\'s unittest library."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'super'
op|'('
name|'MyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'critical_variable'
op|'='
number|'42'
newline|'\n'
name|'self'
op|'.'
name|'another_critical_variable'
op|'='
number|'42'
newline|'\n'
nl|'\n'
DECL|member|testMethodOverride
dedent|''
name|'def'
name|'testMethodOverride'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should be properly overriden in a derived class."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'42'
op|','
name|'self'
op|'.'
name|'another_critical_variable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'another_critical_variable'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MoxTestBaseMultipleInheritanceTest
dedent|''
dedent|''
name|'class'
name|'MoxTestBaseMultipleInheritanceTest'
op|'('
name|'mox'
op|'.'
name|'MoxTestBase'
op|','
name|'MyTestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test that multiple inheritance can be used with MoxTestBase."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'super'
op|'('
name|'MoxTestBaseMultipleInheritanceTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'another_critical_variable'
op|'='
number|'99'
newline|'\n'
nl|'\n'
DECL|member|testMultipleInheritance
dedent|''
name|'def'
name|'testMultipleInheritance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should be able to access members created by all parent setUp()."""'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'mox'
op|'.'
name|'Mox'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'42'
op|','
name|'self'
op|'.'
name|'critical_variable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethodOverride
dedent|''
name|'def'
name|'testMethodOverride'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Should run before MyTestCase.testMethodOverride."""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'99'
op|','
name|'self'
op|'.'
name|'another_critical_variable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'another_critical_variable'
op|'='
number|'42'
newline|'\n'
name|'super'
op|'('
name|'MoxTestBaseMultipleInheritanceTest'
op|','
name|'self'
op|')'
op|'.'
name|'testMethodOverride'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'43'
op|','
name|'self'
op|'.'
name|'another_critical_variable'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestClass
dedent|''
dedent|''
name|'class'
name|'TestClass'
op|':'
newline|'\n'
indent|'  '
string|'"""This class is used only for testing the mock framework"""'
newline|'\n'
nl|'\n'
DECL|variable|SOME_CLASS_VAR
name|'SOME_CLASS_VAR'
op|'='
string|'"test_value"'
newline|'\n'
DECL|variable|_PROTECTED_CLASS_VAR
name|'_PROTECTED_CLASS_VAR'
op|'='
string|'"protected value"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'ivar'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'__ivar'
op|'='
name|'ivar'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'__ivar'
op|'=='
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'not'
name|'self'
op|'.'
name|'__eq__'
op|'('
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ValidCall
dedent|''
name|'def'
name|'ValidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|OtherValidCall
dedent|''
name|'def'
name|'OtherValidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ValidCallWithArgs
dedent|''
name|'def'
name|'ValidCallWithArgs'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|MyClassMethod
name|'def'
name|'MyClassMethod'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|MyStaticMethod
name|'def'
name|'MyStaticMethod'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_ProtectedCall
dedent|''
name|'def'
name|'_ProtectedCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__PrivateCall
dedent|''
name|'def'
name|'__PrivateCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__DoNotMock
dedent|''
name|'def'
name|'__DoNotMock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the value for key."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'d'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the value for key to value."""'
newline|'\n'
name|'self'
op|'.'
name|'d'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'     '
string|'"""Returns True if d contains the key."""'
newline|'\n'
name|'return'
name|'key'
name|'in'
name|'self'
op|'.'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|ChildClass
dedent|''
dedent|''
name|'class'
name|'ChildClass'
op|'('
name|'TestClass'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""This inherits from TestClass."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'TestClass'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ChildValidCall
dedent|''
name|'def'
name|'ChildValidCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CallableClass
dedent|''
dedent|''
name|'class'
name|'CallableClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""This class is callable, and that should be mockable!"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'param'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'param'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubscribtableNonIterableClass
dedent|''
dedent|''
name|'class'
name|'SubscribtableNonIterableClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__getitem__
indent|'  '
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'IndexError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InheritsFromCallable
dedent|''
dedent|''
name|'class'
name|'InheritsFromCallable'
op|'('
name|'CallableClass'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""This class should also be mockable; it inherits from a callable class."""'
newline|'\n'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

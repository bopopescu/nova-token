begin_unit
comment|'#!/usr/bin/python2.4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2008 Google Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'# you may not use this file except in compliance with the License.'
nl|'\n'
comment|'# You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'# See the License for the specific language governing permissions and'
nl|'\n'
comment|'# limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Mox, an object-mocking framework for Python.\n\nMox works in the record-replay-verify paradigm.  When you first create\na mock object, it is in record mode.  You then programmatically set\nthe expected behavior of the mock object (what methods are to be\ncalled on it, with what parameters, what they should return, and in\nwhat order).\n\nOnce you have set up the expected mock behavior, you put it in replay\nmode.  Now the mock responds to method calls just as you told it to.\nIf an unexpected method (or an expected method with unexpected\nparameters) is called, then an exception will be raised.\n\nOnce you are done interacting with the mock, you need to verify that\nall the expected interactions occured.  (Maybe your code exited\nprematurely without calling some cleanup method!)  The verify phase\nensures that every expected method was called; otherwise, an exception\nwill be raised.\n\nWARNING! Mock objects created by Mox are not thread-safe.  If you are\ncall a mock in multiple threads, it should be guarded by a mutex.\n\nTODO(stevepm): Add the option to make mocks thread-safe!\n\nSuggested usage / workflow:\n\n  # Create Mox factory\n  my_mox = Mox()\n\n  # Create a mock data access object\n  mock_dao = my_mox.CreateMock(DAOClass)\n\n  # Set up expected behavior\n  mock_dao.RetrievePersonWithIdentifier(\'1\').AndReturn(person)\n  mock_dao.DeletePerson(person)\n\n  # Put mocks in replay mode\n  my_mox.ReplayAll()\n\n  # Inject mock object and run test\n  controller.SetDao(mock_dao)\n  controller.DeletePersonById(\'1\')\n\n  # Verify all methods were called as expected\n  my_mox.VerifyAll()\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'collections'
name|'import'
name|'deque'
newline|'\n'
name|'import'
name|'difflib'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'import'
name|'stubout'
newline|'\n'
nl|'\n'
DECL|class|Error
name|'class'
name|'Error'
op|'('
name|'AssertionError'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Base exception for this module."""'
newline|'\n'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExpectedMethodCallsError
dedent|''
name|'class'
name|'ExpectedMethodCallsError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Raised when Verify() is called before all expected methods have been called\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expected_methods'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Init exception.\n\n    Args:\n      # expected_methods: A sequence of MockMethod objects that should have been\n      #   called.\n      expected_methods: [MockMethod]\n\n    Raises:\n      ValueError: if expected_methods contains no methods.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'expected_methods'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'ValueError'
op|'('
string|'"There must be at least one expected method"'
op|')'
newline|'\n'
dedent|''
name|'Error'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_expected_methods'
op|'='
name|'expected_methods'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'calls'
op|'='
string|'"\\n"'
op|'.'
name|'join'
op|'('
op|'['
string|'"%3d.  %s"'
op|'%'
op|'('
name|'i'
op|','
name|'m'
op|')'
nl|'\n'
name|'for'
name|'i'
op|','
name|'m'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'_expected_methods'
op|')'
op|']'
op|')'
newline|'\n'
name|'return'
string|'"Verify: Expected methods never called:\\n%s"'
op|'%'
op|'('
name|'calls'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnexpectedMethodCallError
dedent|''
dedent|''
name|'class'
name|'UnexpectedMethodCallError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Raised when an unexpected method is called.\n\n  This can occur if a method is called with incorrect parameters, or out of the\n  specified order.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'unexpected_method'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Init exception.\n\n    Args:\n      # unexpected_method: MockMethod that was called but was not at the head of\n      #   the expected_method queue.\n      # expected: MockMethod or UnorderedGroup the method should have\n      #   been in.\n      unexpected_method: MockMethod\n      expected: MockMethod or UnorderedGroup\n    """'
newline|'\n'
nl|'\n'
name|'Error'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'expected'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_str'
op|'='
string|'"Unexpected method call %s"'
op|'%'
op|'('
name|'unexpected_method'
op|','
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'differ'
op|'='
name|'difflib'
op|'.'
name|'Differ'
op|'('
op|')'
newline|'\n'
name|'diff'
op|'='
name|'differ'
op|'.'
name|'compare'
op|'('
name|'str'
op|'('
name|'unexpected_method'
op|')'
op|'.'
name|'splitlines'
op|'('
name|'True'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'expected'
op|')'
op|'.'
name|'splitlines'
op|'('
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_str'
op|'='
op|'('
string|'"Unexpected method call.  unexpected:-  expected:+\\n%s"'
nl|'\n'
op|'%'
op|'('
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'diff'
op|')'
op|','
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'_str'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnknownMethodCallError
dedent|''
dedent|''
name|'class'
name|'UnknownMethodCallError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Raised if an unknown method is requested of the mock object."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'unknown_method_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Init exception.\n\n    Args:\n      # unknown_method_name: Method call that is not part of the mocked class\'s\n      #   public interface.\n      unknown_method_name: str\n    """'
newline|'\n'
nl|'\n'
name|'Error'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_unknown_method_name'
op|'='
name|'unknown_method_name'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'"Method called is not a member of the object: %s"'
op|'%'
name|'self'
op|'.'
name|'_unknown_method_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PrivateAttributeError
dedent|''
dedent|''
name|'class'
name|'PrivateAttributeError'
op|'('
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""\n  Raised if a MockObject is passed a private additional attribute name.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'Error'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_attr'
op|'='
name|'attr'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'('
string|'"Attribute \'%s\' is private and should not be available in a mock "'
nl|'\n'
string|'"object."'
op|'%'
name|'attr'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Mox
dedent|''
dedent|''
name|'class'
name|'Mox'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Mox: a factory for creating mock objects."""'
newline|'\n'
nl|'\n'
comment|'# A list of types that should be stubbed out with MockObjects (as'
nl|'\n'
comment|'# opposed to MockAnythings).'
nl|'\n'
DECL|variable|_USE_MOCK_OBJECT
name|'_USE_MOCK_OBJECT'
op|'='
op|'['
name|'types'
op|'.'
name|'ClassType'
op|','
name|'types'
op|'.'
name|'InstanceType'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|','
nl|'\n'
name|'types'
op|'.'
name|'ObjectType'
op|','
name|'types'
op|'.'
name|'TypeType'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize a new Mox."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_mock_objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'='
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|CreateMock
dedent|''
name|'def'
name|'CreateMock'
op|'('
name|'self'
op|','
name|'class_to_mock'
op|','
name|'attrs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a new mock object.\n\n    Args:\n      # class_to_mock: the class to be mocked\n      class_to_mock: class\n      attrs: dict of attribute names to values that will be set on the mock\n        object.  Only public attributes may be set.\n\n    Returns:\n      MockObject that can be used as the class_to_mock would be.\n    """'
newline|'\n'
name|'new_mock'
op|'='
name|'MockObject'
op|'('
name|'class_to_mock'
op|','
name|'attrs'
op|'='
name|'attrs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mock_objects'
op|'.'
name|'append'
op|'('
name|'new_mock'
op|')'
newline|'\n'
name|'return'
name|'new_mock'
newline|'\n'
nl|'\n'
DECL|member|CreateMockAnything
dedent|''
name|'def'
name|'CreateMockAnything'
op|'('
name|'self'
op|','
name|'description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a mock that will accept any method calls.\n\n    This does not enforce an interface.\n\n    Args:\n      description: str. Optionally, a descriptive name for the mock object being\n        created, for debugging output purposes.\n    """'
newline|'\n'
name|'new_mock'
op|'='
name|'MockAnything'
op|'('
name|'description'
op|'='
name|'description'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mock_objects'
op|'.'
name|'append'
op|'('
name|'new_mock'
op|')'
newline|'\n'
name|'return'
name|'new_mock'
newline|'\n'
nl|'\n'
DECL|member|ReplayAll
dedent|''
name|'def'
name|'ReplayAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set all mock objects to replay mode."""'
newline|'\n'
nl|'\n'
name|'for'
name|'mock_obj'
name|'in'
name|'self'
op|'.'
name|'_mock_objects'
op|':'
newline|'\n'
indent|'      '
name|'mock_obj'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|VerifyAll
dedent|''
dedent|''
name|'def'
name|'VerifyAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Call verify on all mock objects created."""'
newline|'\n'
nl|'\n'
name|'for'
name|'mock_obj'
name|'in'
name|'self'
op|'.'
name|'_mock_objects'
op|':'
newline|'\n'
indent|'      '
name|'mock_obj'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|ResetAll
dedent|''
dedent|''
name|'def'
name|'ResetAll'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Call reset on all mock objects.  This does not unset stubs."""'
newline|'\n'
nl|'\n'
name|'for'
name|'mock_obj'
name|'in'
name|'self'
op|'.'
name|'_mock_objects'
op|':'
newline|'\n'
indent|'      '
name|'mock_obj'
op|'.'
name|'_Reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|StubOutWithMock
dedent|''
dedent|''
name|'def'
name|'StubOutWithMock'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr_name'
op|','
name|'use_mock_anything'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replace a method, attribute, etc. with a Mock.\n\n    This will replace a class or module with a MockObject, and everything else\n    (method, function, etc) with a MockAnything.  This can be overridden to\n    always use a MockAnything by setting use_mock_anything to True.\n\n    Args:\n      obj: A Python object (class, module, instance, callable).\n      attr_name: str.  The name of the attribute to replace with a mock.\n      use_mock_anything: bool. True if a MockAnything should be used regardless\n        of the type of attribute.\n    """'
newline|'\n'
nl|'\n'
name|'attr_to_replace'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'attr_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check for a MockAnything. This could cause confusing problems later on.'
nl|'\n'
name|'if'
name|'attr_to_replace'
op|'=='
name|'MockAnything'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'TypeError'
op|'('
string|"'Cannot mock a MockAnything! Did you remember to '"
nl|'\n'
string|"'call UnsetStubs in your previous test?'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'type'
op|'('
name|'attr_to_replace'
op|')'
name|'in'
name|'self'
op|'.'
name|'_USE_MOCK_OBJECT'
name|'and'
name|'not'
name|'use_mock_anything'
op|':'
newline|'\n'
indent|'      '
name|'stub'
op|'='
name|'self'
op|'.'
name|'CreateMock'
op|'('
name|'attr_to_replace'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'stub'
op|'='
name|'self'
op|'.'
name|'CreateMockAnything'
op|'('
name|'description'
op|'='
string|"'Stub for %s'"
op|'%'
name|'attr_to_replace'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'obj'
op|','
name|'attr_name'
op|','
name|'stub'
op|')'
newline|'\n'
nl|'\n'
DECL|member|UnsetStubs
dedent|''
name|'def'
name|'UnsetStubs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Restore stubs to their original state."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|Replay
dedent|''
dedent|''
name|'def'
name|'Replay'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Put mocks into Replay mode.\n\n  Args:\n    # args is any number of mocks to put into replay mode.\n  """'
newline|'\n'
nl|'\n'
name|'for'
name|'mock'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'    '
name|'mock'
op|'.'
name|'_Replay'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|Verify
dedent|''
dedent|''
name|'def'
name|'Verify'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Verify mocks.\n\n  Args:\n    # args is any number of mocks to be verified.\n  """'
newline|'\n'
nl|'\n'
name|'for'
name|'mock'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'    '
name|'mock'
op|'.'
name|'_Verify'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|Reset
dedent|''
dedent|''
name|'def'
name|'Reset'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Reset mocks.\n\n  Args:\n    # args is any number of mocks to be reset.\n  """'
newline|'\n'
nl|'\n'
name|'for'
name|'mock'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'    '
name|'mock'
op|'.'
name|'_Reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockAnything
dedent|''
dedent|''
name|'class'
name|'MockAnything'
op|':'
newline|'\n'
indent|'  '
string|'"""A mock that can be used to mock anything.\n\n  This is helpful for mocking classes that do not provide a public interface.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize a new MockAnything.\n\n    Args:\n      description: str. Optionally, a descriptive name for the mock object being\n        created, for debugging output purposes.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'_description'
op|'='
name|'description'
newline|'\n'
name|'self'
op|'.'
name|'_Reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'"<MockAnything instance at %s>"'
op|'%'
name|'id'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<MockAnything instance>'"
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'method_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Intercept method calls on this object.\n\n     A new MockMethod is returned that is aware of the MockAnything\'s\n     state (record or replay).  The call will be recorded or replayed\n     by the MockMethod\'s __call__.\n\n    Args:\n      # method name: the name of the method being called.\n      method_name: str\n\n    Returns:\n      A new MockMethod aware of MockAnything\'s state (record or replay).\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
name|'method_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_CreateMockMethod
dedent|''
name|'def'
name|'_CreateMockMethod'
op|'('
name|'self'
op|','
name|'method_name'
op|','
name|'method_to_mock'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a new mock method call and return it.\n\n    Args:\n      # method_name: the name of the method being called.\n      # method_to_mock: The actual method being mocked, used for introspection.\n      method_name: str\n      method_to_mock: a method object\n\n    Returns:\n      A new MockMethod aware of MockAnything\'s state (record or replay).\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'MockMethod'
op|'('
name|'method_name'
op|','
name|'self'
op|'.'
name|'_expected_calls_queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|','
name|'method_to_mock'
op|'='
name|'method_to_mock'
op|','
nl|'\n'
name|'description'
op|'='
name|'self'
op|'.'
name|'_description'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__nonzero__
dedent|''
name|'def'
name|'__nonzero__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return 1 for nonzero so the mock can be used as a conditional."""'
newline|'\n'
nl|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic to compare objects."""'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'MockAnything'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|'=='
name|'rhs'
op|'.'
name|'_replay_mode'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_expected_calls_queue'
op|'=='
name|'rhs'
op|'.'
name|'_expected_calls_queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic to compare objects."""'
newline|'\n'
nl|'\n'
name|'return'
name|'not'
name|'self'
op|'=='
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|_Replay
dedent|''
name|'def'
name|'_Replay'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Start replaying expected method calls."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_Verify
dedent|''
name|'def'
name|'_Verify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that all of the expected calls have been made.\n\n    Raises:\n      ExpectedMethodCallsError: if there are still more method calls in the\n        expected queue.\n    """'
newline|'\n'
nl|'\n'
comment|'# If the list of expected calls is not empty, raise an exception'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_expected_calls_queue'
op|':'
newline|'\n'
comment|'# The last MultipleTimesGroup is not popped from the queue.'
nl|'\n'
indent|'      '
name|'if'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'_expected_calls_queue'
op|')'
op|'=='
number|'1'
name|'and'
nl|'\n'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'_expected_calls_queue'
op|'['
number|'0'
op|']'
op|','
name|'MultipleTimesGroup'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_expected_calls_queue'
op|'['
number|'0'
op|']'
op|'.'
name|'IsSatisfied'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ExpectedMethodCallsError'
op|'('
name|'self'
op|'.'
name|'_expected_calls_queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_Reset
dedent|''
dedent|''
dedent|''
name|'def'
name|'_Reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Reset the state of this mock to record mode with an empty queue."""'
newline|'\n'
nl|'\n'
comment|'# Maintain a list of method calls we are expecting'
nl|'\n'
name|'self'
op|'.'
name|'_expected_calls_queue'
op|'='
name|'deque'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we are in setup mode, not replay mode'
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockObject
dedent|''
dedent|''
name|'class'
name|'MockObject'
op|'('
name|'MockAnything'
op|','
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""A mock object that simulates the public/protected interface of a class."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'class_to_mock'
op|','
name|'attrs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize a mock object.\n\n    This determines the methods and properties of the class and stores them.\n\n    Args:\n      # class_to_mock: class to be mocked\n      class_to_mock: class\n      attrs: dict of attribute names to values that will be set on the mock\n        object.  Only public attributes may be set.\n\n    Raises:\n      PrivateAttributeError: if a supplied attribute is not public.\n      ValueError: if an attribute would mask an existing method.\n    """'
newline|'\n'
nl|'\n'
comment|'# This is used to hack around the mixin/inheritance of MockAnything, which'
nl|'\n'
comment|'# is not a proper object (it can be anything. :-)'
nl|'\n'
name|'MockAnything'
op|'.'
name|'__dict__'
op|'['
string|"'__init__'"
op|']'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get a list of all the public and special methods we should mock.'
nl|'\n'
name|'self'
op|'.'
name|'_known_methods'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_known_vars'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_class_to_mock'
op|'='
name|'class_to_mock'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_description'
op|'='
name|'class_to_mock'
op|'.'
name|'__name__'
newline|'\n'
comment|"# If class_to_mock is a mock itself, then we'll get an UnknownMethodCall"
nl|'\n'
comment|"# error here from the underlying call to __getattr__('__name__')"
nl|'\n'
dedent|''
name|'except'
op|'('
name|'UnknownMethodCallError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_description'
op|'='
name|'type'
op|'('
name|'class_to_mock'
op|')'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'method'
name|'in'
name|'dir'
op|'('
name|'class_to_mock'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'callable'
op|'('
name|'getattr'
op|'('
name|'class_to_mock'
op|','
name|'method'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_known_methods'
op|'.'
name|'add'
op|'('
name|'method'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_known_vars'
op|'.'
name|'add'
op|'('
name|'method'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set additional attributes at instantiation time; this is quicker'
nl|'\n'
comment|'# than manually setting attributes that are normally created in'
nl|'\n'
comment|'# __init__.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'attr'
op|','
name|'value'
name|'in'
name|'attrs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'attr'
op|'.'
name|'startswith'
op|'('
string|'"_"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'PrivateAttributeError'
op|'('
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'attr'
name|'in'
name|'self'
op|'.'
name|'_known_methods'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|'"\'%s\' is a method of \'%s\' objects."'
op|'%'
op|'('
name|'attr'
op|','
nl|'\n'
name|'class_to_mock'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|','
name|'attr'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Intercept attribute request on this object.\n\n    If the attribute is a public class variable, it will be returned and not\n    recorded as a call.\n\n    If the attribute is not a variable, it is handled like a method\n    call. The method name is checked against the set of mockable\n    methods, and a new MockMethod is returned that is aware of the\n    MockObject\'s state (record or replay).  The call will be recorded\n    or replayed by the MockMethod\'s __call__.\n\n    Args:\n      # name: the name of the attribute being requested.\n      name: str\n\n    Returns:\n      Either a class variable or a new MockMethod that is aware of the state\n      of the mock (record or replay).\n\n    Raises:\n      UnknownMethodCallError if the MockObject does not mock the requested\n          method.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'_known_vars'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'_known_methods'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
nl|'\n'
name|'name'
op|','
nl|'\n'
name|'method_to_mock'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'UnknownMethodCallError'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic to compare objects."""'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'MockObject'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_class_to_mock'
op|'=='
name|'rhs'
op|'.'
name|'_class_to_mock'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|'=='
name|'rhs'
op|'.'
name|'_replay_mode'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_expected_calls_queue'
op|'=='
name|'rhs'
op|'.'
name|'_expected_calls_queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic for mocking classes that support item assignment.\n\n    Args:\n      key: Key to set the value for.\n      value: Value to set.\n\n    Returns:\n      Expected return value in replay mode.  A MockMethod object for the\n      __setitem__ method that has already been called if not in replay mode.\n\n    Raises:\n      TypeError if the underlying class does not support item assignment.\n      UnexpectedMethodCallError if the object does not expect the call to\n        __setitem__.\n\n    """'
newline|'\n'
comment|'# Verify the class supports item assignment.'
nl|'\n'
name|'if'
string|"'__setitem__'"
name|'not'
name|'in'
name|'dir'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'TypeError'
op|'('
string|"'object does not support item assignment'"
op|')'
newline|'\n'
nl|'\n'
comment|'# If we are in replay mode then simply call the mock __setitem__ method.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'MockMethod'
op|'('
string|"'__setitem__'"
op|','
name|'self'
op|'.'
name|'_expected_calls_queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|')'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Otherwise, create a mock method __setitem__.'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
string|"'__setitem__'"
op|')'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic for mocking classes that are subscriptable.\n\n    Args:\n      key: Key to return the value for.\n\n    Returns:\n      Expected return value in replay mode.  A MockMethod object for the\n      __getitem__ method that has already been called if not in replay mode.\n\n    Raises:\n      TypeError if the underlying class is not subscriptable.\n      UnexpectedMethodCallError if the object does not expect the call to\n        __getitem__.\n\n    """'
newline|'\n'
comment|'# Verify the class supports item assignment.'
nl|'\n'
name|'if'
string|"'__getitem__'"
name|'not'
name|'in'
name|'dir'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'TypeError'
op|'('
string|"'unsubscriptable object'"
op|')'
newline|'\n'
nl|'\n'
comment|'# If we are in replay mode then simply call the mock __getitem__ method.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'MockMethod'
op|'('
string|"'__getitem__'"
op|','
name|'self'
op|'.'
name|'_expected_calls_queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|')'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Otherwise, create a mock method __getitem__.'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
string|"'__getitem__'"
op|')'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic for mocking classes that are iterable.\n\n    Returns:\n      Expected return value in replay mode.  A MockMethod object for the\n      __iter__ method that has already been called if not in replay mode.\n\n    Raises:\n      TypeError if the underlying class is not iterable.\n      UnexpectedMethodCallError if the object does not expect the call to\n        __iter__.\n\n    """'
newline|'\n'
name|'methods'
op|'='
name|'dir'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the class supports iteration.'
nl|'\n'
name|'if'
string|"'__iter__'"
name|'not'
name|'in'
name|'methods'
op|':'
newline|'\n'
comment|"# If it doesn't have iter method and we are in replay method, then try to"
nl|'\n'
comment|'# iterate using subscripts.'
nl|'\n'
indent|'      '
name|'if'
string|"'__getitem__'"
name|'not'
name|'in'
name|'methods'
name|'or'
name|'not'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
string|"'not iterable object'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'index'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'          '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
name|'self'
op|'['
name|'index'
op|']'
op|')'
newline|'\n'
name|'index'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'          '
name|'return'
name|'iter'
op|'('
name|'results'
op|')'
newline|'\n'
nl|'\n'
comment|'# If we are in replay mode then simply call the mock __iter__ method.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'MockMethod'
op|'('
string|"'__iter__'"
op|','
name|'self'
op|'.'
name|'_expected_calls_queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|')'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Otherwise, create a mock method __iter__.'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
string|"'__iter__'"
op|')'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic for mocking classes that contain items.\n\n    Args:\n      key: Key to look in container for.\n\n    Returns:\n      Expected return value in replay mode.  A MockMethod object for the\n      __contains__ method that has already been called if not in replay mode.\n\n    Raises:\n      TypeError if the underlying class does not implement __contains__\n      UnexpectedMethodCaller if the object does not expect the call to\n      __contains__.\n\n    """'
newline|'\n'
name|'contains'
op|'='
name|'self'
op|'.'
name|'_class_to_mock'
op|'.'
name|'__dict__'
op|'.'
name|'get'
op|'('
string|"'__contains__'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'contains'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'TypeError'
op|'('
string|"'unsubscriptable object'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'MockMethod'
op|'('
string|"'__contains__'"
op|','
name|'self'
op|'.'
name|'_expected_calls_queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_replay_mode'
op|')'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
string|"'__contains__'"
op|')'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'params'
op|','
op|'**'
name|'named_params'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide custom logic for mocking classes that are callable."""'
newline|'\n'
nl|'\n'
comment|'# Verify the class we are mocking is callable.'
nl|'\n'
name|'callable'
op|'='
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'_class_to_mock'
op|','
string|"'__call__'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'callable'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'TypeError'
op|'('
string|"'Not callable'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Because the call is happening directly on this object instead of a method,'
nl|'\n'
comment|'# the call on the mock method is made right here'
nl|'\n'
dedent|''
name|'mock_method'
op|'='
name|'self'
op|'.'
name|'_CreateMockMethod'
op|'('
string|"'__call__'"
op|')'
newline|'\n'
name|'return'
name|'mock_method'
op|'('
op|'*'
name|'params'
op|','
op|'**'
name|'named_params'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|__class__
name|'def'
name|'__class__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the class that is being mocked."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_class_to_mock'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodCallChecker
dedent|''
dedent|''
name|'class'
name|'MethodCallChecker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Ensures that methods are called correctly."""'
newline|'\n'
nl|'\n'
name|'_NEEDED'
op|','
name|'_DEFAULT'
op|','
name|'_GIVEN'
op|'='
name|'range'
op|'('
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates a checker.\n\n    Args:\n      # method: A method to check.\n      method: function\n\n    Raises:\n      ValueError: method could not be inspected, so checks aren\'t possible.\n        Some methods and functions like built-ins can\'t be inspected.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_args'
op|','
name|'varargs'
op|','
name|'varkw'
op|','
name|'defaults'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'method'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'ValueError'
op|'('
string|"'Could not get argument specification for %r'"
nl|'\n'
op|'%'
op|'('
name|'method'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_args'
op|'='
name|'self'
op|'.'
name|'_args'
op|'['
number|'1'
op|':'
op|']'
comment|"# Skip 'self'."
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_method'
op|'='
name|'method'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_has_varargs'
op|'='
name|'varargs'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_has_varkw'
op|'='
name|'varkw'
name|'is'
name|'not'
name|'None'
newline|'\n'
name|'if'
name|'defaults'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_required_args'
op|'='
name|'self'
op|'.'
name|'_args'
newline|'\n'
name|'self'
op|'.'
name|'_default_args'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_required_args'
op|'='
name|'self'
op|'.'
name|'_args'
op|'['
op|':'
op|'-'
name|'len'
op|'('
name|'defaults'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_default_args'
op|'='
name|'self'
op|'.'
name|'_args'
op|'['
op|'-'
name|'len'
op|'('
name|'defaults'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_RecordArgumentGiven
dedent|''
dedent|''
name|'def'
name|'_RecordArgumentGiven'
op|'('
name|'self'
op|','
name|'arg_name'
op|','
name|'arg_status'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mark an argument as being given.\n\n    Args:\n      # arg_name: The name of the argument to mark in arg_status.\n      # arg_status: Maps argument names to one of _NEEDED, _DEFAULT, _GIVEN.\n      arg_name: string\n      arg_status: dict\n\n    Raises:\n      AttributeError: arg_name is already marked as _GIVEN.\n    """'
newline|'\n'
name|'if'
name|'arg_status'
op|'.'
name|'get'
op|'('
name|'arg_name'
op|','
name|'None'
op|')'
op|'=='
name|'MethodCallChecker'
op|'.'
name|'_GIVEN'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AttributeError'
op|'('
string|"'%s provided more than once'"
op|'%'
op|'('
name|'arg_name'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'arg_status'
op|'['
name|'arg_name'
op|']'
op|'='
name|'MethodCallChecker'
op|'.'
name|'_GIVEN'
newline|'\n'
nl|'\n'
DECL|member|Check
dedent|''
name|'def'
name|'Check'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'named_params'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensures that the parameters used while recording a call are valid.\n\n    Args:\n      # params: A list of positional parameters.\n      # named_params: A dict of named parameters.\n      params: list\n      named_params: dict\n\n    Raises:\n      AttributeError: the given parameters don\'t work with the given method.\n    """'
newline|'\n'
name|'arg_status'
op|'='
name|'dict'
op|'('
op|'('
name|'a'
op|','
name|'MethodCallChecker'
op|'.'
name|'_NEEDED'
op|')'
nl|'\n'
name|'for'
name|'a'
name|'in'
name|'self'
op|'.'
name|'_required_args'
op|')'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'self'
op|'.'
name|'_default_args'
op|':'
newline|'\n'
indent|'      '
name|'arg_status'
op|'['
name|'arg'
op|']'
op|'='
name|'MethodCallChecker'
op|'.'
name|'_DEFAULT'
newline|'\n'
nl|'\n'
comment|'# Check that each positional param is valid.'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'params'
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'arg_name'
op|'='
name|'self'
op|'.'
name|'_args'
op|'['
name|'i'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_has_varargs'
op|':'
newline|'\n'
indent|'          '
name|'raise'
name|'AttributeError'
op|'('
string|"'%s does not take %d or more positional '"
nl|'\n'
string|"'arguments'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_method'
op|'.'
name|'__name__'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_RecordArgumentGiven'
op|'('
name|'arg_name'
op|','
name|'arg_status'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check each keyword argument.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'arg_name'
name|'in'
name|'named_params'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'arg_name'
name|'not'
name|'in'
name|'arg_status'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_has_varkw'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'AttributeError'
op|'('
string|"'%s is not expecting keyword argument %s'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'_method'
op|'.'
name|'__name__'
op|','
name|'arg_name'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_RecordArgumentGiven'
op|'('
name|'arg_name'
op|','
name|'arg_status'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure all the required arguments have been given.'
nl|'\n'
dedent|''
name|'still_needed'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'arg_status'
op|'.'
name|'iteritems'
op|'('
op|')'
nl|'\n'
name|'if'
name|'v'
op|'=='
name|'MethodCallChecker'
op|'.'
name|'_NEEDED'
op|']'
newline|'\n'
name|'if'
name|'still_needed'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AttributeError'
op|'('
string|"'No values given for arguments %s'"
nl|'\n'
op|'%'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'sorted'
op|'('
name|'still_needed'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MockMethod
dedent|''
dedent|''
dedent|''
name|'class'
name|'MockMethod'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Callable mock method.\n\n  A MockMethod should act exactly like the method it mocks, accepting parameters\n  and returning a value, or throwing an exception (as specified).  When this\n  method is called, it can optionally verify whether the called method (name and\n  signature) matches the expected method.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method_name'
op|','
name|'call_queue'
op|','
name|'replay_mode'
op|','
nl|'\n'
name|'method_to_mock'
op|'='
name|'None'
op|','
name|'description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Construct a new mock method.\n\n    Args:\n      # method_name: the name of the method\n      # call_queue: deque of calls, verify this call against the head, or add\n      #     this call to the queue.\n      # replay_mode: False if we are recording, True if we are verifying calls\n      #     against the call queue.\n      # method_to_mock: The actual method being mocked, used for introspection.\n      # description: optionally, a descriptive name for this method. Typically\n      #     this is equal to the descriptive name of the method\'s class.\n      method_name: str\n      call_queue: list or deque\n      replay_mode: bool\n      method_to_mock: a method object\n      description: str or None\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_name'
op|'='
name|'method_name'
newline|'\n'
name|'self'
op|'.'
name|'__name__'
op|'='
name|'method_name'
newline|'\n'
name|'self'
op|'.'
name|'_call_queue'
op|'='
name|'call_queue'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'call_queue'
op|','
name|'deque'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_call_queue'
op|'='
name|'deque'
op|'('
name|'self'
op|'.'
name|'_call_queue'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_replay_mode'
op|'='
name|'replay_mode'
newline|'\n'
name|'self'
op|'.'
name|'_description'
op|'='
name|'description'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_params'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_named_params'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_return_value'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_exception'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_side_effects'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_checker'
op|'='
name|'MethodCallChecker'
op|'('
name|'method_to_mock'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_checker'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'params'
op|','
op|'**'
name|'named_params'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Log parameters and return the specified return value.\n\n    If the Mock(Anything/Object) associated with this call is in record mode,\n    this MockMethod will be pushed onto the expected call queue.  If the mock\n    is in replay mode, this will pop a MockMethod off the top of the queue and\n    verify this call is equal to the expected call.\n\n    Raises:\n      UnexpectedMethodCall if this call is supposed to match an expected method\n        call and it does not.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_params'
op|'='
name|'params'
newline|'\n'
name|'self'
op|'.'
name|'_named_params'
op|'='
name|'named_params'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_replay_mode'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'self'
op|'.'
name|'_checker'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_checker'
op|'.'
name|'Check'
op|'('
name|'params'
op|','
name|'named_params'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_call_queue'
op|'.'
name|'append'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_method'
op|'='
name|'self'
op|'.'
name|'_VerifyMethodCall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expected_method'
op|'.'
name|'_side_effects'
op|':'
newline|'\n'
indent|'      '
name|'result'
op|'='
name|'expected_method'
op|'.'
name|'_side_effects'
op|'('
op|'*'
name|'params'
op|','
op|'**'
name|'named_params'
op|')'
newline|'\n'
name|'if'
name|'expected_method'
op|'.'
name|'_return_value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'expected_method'
op|'.'
name|'_return_value'
op|'='
name|'result'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'expected_method'
op|'.'
name|'_exception'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'expected_method'
op|'.'
name|'_exception'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'expected_method'
op|'.'
name|'_return_value'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raise an AttributeError with a helpful message."""'
newline|'\n'
nl|'\n'
name|'raise'
name|'AttributeError'
op|'('
string|'\'MockMethod has no attribute "%s". \''
nl|'\n'
string|"'Did you remember to put your mocks in replay mode?'"
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raise a TypeError with a helpful message."""'
newline|'\n'
name|'raise'
name|'TypeError'
op|'('
string|"'MockMethod cannot be iterated. '"
nl|'\n'
string|"'Did you remember to put your mocks in replay mode?'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raise a TypeError with a helpful message."""'
newline|'\n'
name|'raise'
name|'TypeError'
op|'('
string|"'MockMethod cannot be iterated. '"
nl|'\n'
string|"'Did you remember to put your mocks in replay mode?'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_PopNextMethod
dedent|''
name|'def'
name|'_PopNextMethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Pop the next method from our call queue."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'self'
op|'.'
name|'_call_queue'
op|'.'
name|'popleft'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'UnexpectedMethodCallError'
op|'('
name|'self'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_VerifyMethodCall
dedent|''
dedent|''
name|'def'
name|'_VerifyMethodCall'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify the called method is expected.\n\n    This can be an ordered method, or part of an unordered set.\n\n    Returns:\n      The expected mock method.\n\n    Raises:\n      UnexpectedMethodCall if the method called was not expected.\n    """'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'_PopNextMethod'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Loop here, because we might have a MethodGroup followed by another'
nl|'\n'
comment|'# group.'
nl|'\n'
name|'while'
name|'isinstance'
op|'('
name|'expected'
op|','
name|'MethodGroup'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'expected'
op|','
name|'method'
op|'='
name|'expected'
op|'.'
name|'MethodCalled'
op|'('
name|'self'
op|')'
newline|'\n'
name|'if'
name|'method'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'method'
newline|'\n'
nl|'\n'
comment|'# This is a mock method, so just check equality.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'expected'
op|'!='
name|'self'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'UnexpectedMethodCallError'
op|'('
name|'self'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'expected'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'params'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
nl|'\n'
op|'['
name|'repr'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'_params'
name|'or'
op|'['
op|']'
op|']'
op|'+'
nl|'\n'
op|'['
string|"'%s=%r'"
op|'%'
name|'x'
name|'for'
name|'x'
name|'in'
name|'sorted'
op|'('
op|'('
name|'self'
op|'.'
name|'_named_params'
name|'or'
op|'{'
op|'}'
op|')'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|']'
op|')'
newline|'\n'
name|'full_desc'
op|'='
string|'"%s(%s) -> %r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_name'
op|','
name|'params'
op|','
name|'self'
op|'.'
name|'_return_value'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_description'
op|':'
newline|'\n'
indent|'      '
name|'full_desc'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'_description'
op|','
name|'full_desc'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'full_desc'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test whether this MockMethod is equivalent to another MockMethod.\n\n    Args:\n      # rhs: the right hand side of the test\n      rhs: MockMethod\n    """'
newline|'\n'
nl|'\n'
name|'return'
op|'('
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'MockMethod'
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_name'
op|'=='
name|'rhs'
op|'.'
name|'_name'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_params'
op|'=='
name|'rhs'
op|'.'
name|'_params'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'_named_params'
op|'=='
name|'rhs'
op|'.'
name|'_named_params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test whether this MockMethod is not equivalent to another MockMethod.\n\n    Args:\n      # rhs: the right hand side of the test\n      rhs: MockMethod\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'not'
name|'self'
op|'=='
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|GetPossibleGroup
dedent|''
name|'def'
name|'GetPossibleGroup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a possible group from the end of the call queue or None if no\n    other methods are on the stack.\n    """'
newline|'\n'
nl|'\n'
comment|'# Remove this method from the tail of the queue so we can add it to a group.'
nl|'\n'
name|'this_method'
op|'='
name|'self'
op|'.'
name|'_call_queue'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'this_method'
op|'=='
name|'self'
newline|'\n'
nl|'\n'
comment|'# Determine if the tail of the queue is a group, or just a regular ordered'
nl|'\n'
comment|'# mock method.'
nl|'\n'
name|'group'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'group'
op|'='
name|'self'
op|'.'
name|'_call_queue'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'group'
newline|'\n'
nl|'\n'
DECL|member|_CheckAndCreateNewGroup
dedent|''
name|'def'
name|'_CheckAndCreateNewGroup'
op|'('
name|'self'
op|','
name|'group_name'
op|','
name|'group_class'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks if the last method (a possible group) is an instance of our\n    group_class. Adds the current method to this group or creates a new one.\n\n    Args:\n\n      group_name: the name of the group.\n      group_class: the class used to create instance of this new group\n    """'
newline|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'GetPossibleGroup'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# If this is a group, and it is the correct group, add the method.'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'group'
op|','
name|'group_class'
op|')'
name|'and'
name|'group'
op|'.'
name|'group_name'
op|'('
op|')'
op|'=='
name|'group_name'
op|':'
newline|'\n'
indent|'      '
name|'group'
op|'.'
name|'AddMethod'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
comment|'# Create a new group and add the method.'
nl|'\n'
dedent|''
name|'new_group'
op|'='
name|'group_class'
op|'('
name|'group_name'
op|')'
newline|'\n'
name|'new_group'
op|'.'
name|'AddMethod'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_call_queue'
op|'.'
name|'append'
op|'('
name|'new_group'
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|InAnyOrder
dedent|''
name|'def'
name|'InAnyOrder'
op|'('
name|'self'
op|','
name|'group_name'
op|'='
string|'"default"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Move this method into a group of unordered calls.\n\n    A group of unordered calls must be defined together, and must be executed\n    in full before the next expected method can be called.  There can be\n    multiple groups that are expected serially, if they are given\n    different group names.  The same group name can be reused if there is a\n    standard method call, or a group with a different name, spliced between\n    usages.\n\n    Args:\n      group_name: the name of the unordered group.\n\n    Returns:\n      self\n    """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_CheckAndCreateNewGroup'
op|'('
name|'group_name'
op|','
name|'UnorderedGroup'
op|')'
newline|'\n'
nl|'\n'
DECL|member|MultipleTimes
dedent|''
name|'def'
name|'MultipleTimes'
op|'('
name|'self'
op|','
name|'group_name'
op|'='
string|'"default"'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Move this method into group of calls which may be called multiple times.\n\n    A group of repeating calls must be defined together, and must be executed in\n    full before the next expected mehtod can be called.\n\n    Args:\n      group_name: the name of the unordered group.\n\n    Returns:\n      self\n    """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_CheckAndCreateNewGroup'
op|'('
name|'group_name'
op|','
name|'MultipleTimesGroup'
op|')'
newline|'\n'
nl|'\n'
DECL|member|AndReturn
dedent|''
name|'def'
name|'AndReturn'
op|'('
name|'self'
op|','
name|'return_value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the value to return when this method is called.\n\n    Args:\n      # return_value can be anything.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_return_value'
op|'='
name|'return_value'
newline|'\n'
name|'return'
name|'return_value'
newline|'\n'
nl|'\n'
DECL|member|AndRaise
dedent|''
name|'def'
name|'AndRaise'
op|'('
name|'self'
op|','
name|'exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the exception to raise when this method is called.\n\n    Args:\n      # exception: the exception to raise when this method is called.\n      exception: Exception\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_exception'
op|'='
name|'exception'
newline|'\n'
nl|'\n'
DECL|member|WithSideEffects
dedent|''
name|'def'
name|'WithSideEffects'
op|'('
name|'self'
op|','
name|'side_effects'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the side effects that are simulated when this method is called.\n\n    Args:\n      side_effects: A callable which modifies the parameters or other relevant\n        state which a given test case depends on.\n\n    Returns:\n      Self for chaining with AndReturn and AndRaise.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'_side_effects'
op|'='
name|'side_effects'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|class|Comparator
dedent|''
dedent|''
name|'class'
name|'Comparator'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class for all Mox comparators.\n\n  A Comparator can be used as a parameter to a mocked method when the exact\n  value is not known.  For example, the code you are testing might build up a\n  long SQL string that is passed to your mock DAO. You\'re only interested that\n  the IN clause contains the proper primary keys, so you can set your mock\n  up as follows:\n\n  mock_dao.RunQuery(StrContains(\'IN (1, 2, 4, 5)\')).AndReturn(mock_result)\n\n  Now whatever query is passed in must contain the string \'IN (1, 2, 4, 5)\'.\n\n  A Comparator may replace one or more parameters, for example:\n  # return at most 10 rows\n  mock_dao.RunQuery(StrContains(\'SELECT\'), 10)\n\n  or\n\n  # Return some non-deterministic number of rows\n  mock_dao.RunQuery(StrContains(\'SELECT\'), IsA(int))\n  """'
newline|'\n'
nl|'\n'
DECL|member|equals
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Special equals method that all comparators must implement.\n\n    Args:\n      rhs: any python object\n    """'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|','
string|"'method must be implemented by a subclass.'"
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'equals'
op|'('
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'not'
name|'self'
op|'.'
name|'equals'
op|'('
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsA
dedent|''
dedent|''
name|'class'
name|'IsA'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""This class wraps a basic Python type or class.  It is used to verify\n  that a parameter is of the given type or class.\n\n  Example:\n  mock_dao.Connect(IsA(DbConnectInfo))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'class_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize IsA\n\n    Args:\n      class_name: basic python type or a class\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_class_name'
op|'='
name|'class_name'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see if the RHS is an instance of class_name.\n\n    Args:\n      # rhs: the right hand side of the test\n      rhs: object\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'self'
op|'.'
name|'_class_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# Check raw types if there was a type error.  This is helpful for'
nl|'\n'
comment|'# things like cStringIO.StringIO.'
nl|'\n'
indent|'      '
name|'return'
name|'type'
op|'('
name|'rhs'
op|')'
op|'=='
name|'type'
op|'('
name|'self'
op|'.'
name|'_class_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'_class_name'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IsAlmost
dedent|''
dedent|''
name|'class'
name|'IsAlmost'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Comparison class used to check whether a parameter is nearly equal\n  to a given value.  Generally useful for floating point numbers.\n\n  Example mock_dao.SetTimeout((IsAlmost(3.9)))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'float_value'
op|','
name|'places'
op|'='
number|'7'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize IsAlmost.\n\n    Args:\n      float_value: The value for making the comparison.\n      places: The number of decimal places to round to.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_float_value'
op|'='
name|'float_value'
newline|'\n'
name|'self'
op|'.'
name|'_places'
op|'='
name|'places'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see if RHS is almost equal to float_value\n\n    Args:\n      rhs: the value to compare to float_value\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'round'
op|'('
name|'rhs'
op|'-'
name|'self'
op|'.'
name|'_float_value'
op|','
name|'self'
op|'.'
name|'_places'
op|')'
op|'=='
number|'0'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# This is probably because either float_value or rhs is not a number.'
nl|'\n'
indent|'      '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'_float_value'
op|')'
newline|'\n'
nl|'\n'
DECL|class|StrContains
dedent|''
dedent|''
name|'class'
name|'StrContains'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Comparison class used to check whether a substring exists in a\n  string parameter.  This can be useful in mocking a database with SQL\n  passed in as a string parameter, for example.\n\n  Example:\n  mock_dao.RunQuery(StrContains(\'IN (1, 2, 4, 5)\')).AndReturn(mock_result)\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'search_string'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # search_string: the string you are searching for\n      search_string: str\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_search_string'
op|'='
name|'search_string'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see if the search_string is contained in the rhs string.\n\n    Args:\n      # rhs: the right hand side of the test\n      rhs: object\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'rhs'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'_search_string'
op|')'
op|'>'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<str containing \\'%s\\'>'"
op|'%'
name|'self'
op|'.'
name|'_search_string'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Regex
dedent|''
dedent|''
name|'class'
name|'Regex'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks if a string matches a regular expression.\n\n  This uses a given regular expression to determine equality.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|','
name|'flags'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # pattern is the regular expression to search for\n      pattern: str\n      # flags passed to re.compile function as the second argument\n      flags: int\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'pattern'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see if rhs matches regular expression pattern.\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'search'
op|'('
name|'rhs'
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'s'
op|'='
string|"'<regular expression \\'%s\\''"
op|'%'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'pattern'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'flags'
op|':'
newline|'\n'
indent|'      '
name|'s'
op|'+='
string|"', flags=%d'"
op|'%'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'flags'
newline|'\n'
dedent|''
name|'s'
op|'+='
string|"'>'"
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|In
dedent|''
dedent|''
name|'class'
name|'In'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks whether an item (or key) is in a list (or dict) parameter.\n\n  Example:\n  mock_dao.GetUsersInfo(In(\'expectedUserName\')).AndReturn(mock_result)\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # key is any thing that could be in a list or a key in a dict\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_key'
op|'='
name|'key'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see whether key is in rhs.\n\n    Args:\n      rhs: dict\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_key'
name|'in'
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<sequence or map containing \\'%s\\'>'"
op|'%'
name|'self'
op|'.'
name|'_key'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Not
dedent|''
dedent|''
name|'class'
name|'Not'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks whether a predicates is False.\n\n  Example:\n    mock_dao.UpdateUsers(Not(ContainsKeyValue(\'stevepm\', stevepm_user_info)))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'predicate'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # predicate: a Comparator instance.\n    """'
newline|'\n'
nl|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'predicate'
op|','
name|'Comparator'
op|')'
op|','
op|'('
string|'"predicate %r must be a"'
nl|'\n'
string|'" Comparator."'
op|'%'
name|'predicate'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_predicate'
op|'='
name|'predicate'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see whether the predicate is False.\n\n    Args:\n      rhs: A value that will be given in argument of the predicate.\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'not'
name|'self'
op|'.'
name|'_predicate'
op|'.'
name|'equals'
op|'('
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<not \\'%s\\'>'"
op|'%'
name|'self'
op|'.'
name|'_predicate'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainsKeyValue
dedent|''
dedent|''
name|'class'
name|'ContainsKeyValue'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks whether a key/value pair is in a dict parameter.\n\n  Example:\n  mock_dao.UpdateUsers(ContainsKeyValue(\'stevepm\', stevepm_user_info))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # key: a key in a dict\n      # value: the corresponding value\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'_value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether the given key/value pair is in the rhs dict.\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'rhs'
op|'['
name|'self'
op|'.'
name|'_key'
op|']'
op|'=='
name|'self'
op|'.'
name|'_value'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<map containing the entry \\'%s: %s\\'>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'_key'
op|','
name|'self'
op|'.'
name|'_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ContainsAttributeValue
dedent|''
dedent|''
name|'class'
name|'ContainsAttributeValue'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks whether a passed parameter contains attributes with a given value.\n\n  Example:\n  mock_dao.UpdateSomething(ContainsAttribute(\'stevepm\', stevepm_user_info))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      # key: an attribute name of an object\n      # value: the corresponding value\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'_value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether the given attribute has a matching value in the rhs object.\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'getattr'
op|'('
name|'rhs'
op|','
name|'self'
op|'.'
name|'_key'
op|')'
op|'=='
name|'self'
op|'.'
name|'_value'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SameElementsAs
dedent|''
dedent|''
dedent|''
name|'class'
name|'SameElementsAs'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Checks whether iterables contain the same elements (ignoring order).\n\n  Example:\n  mock_dao.ProcessUsers(SameElementsAs(\'stevepm\', \'salomaki\'))\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expected_seq'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      expected_seq: a sequence\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_expected_seq'
op|'='
name|'expected_seq'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'actual_seq'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check to see whether actual_seq has same elements as expected_seq.\n\n    Args:\n      actual_seq: sequence\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'expected'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'element'
op|','
name|'None'
op|')'
name|'for'
name|'element'
name|'in'
name|'self'
op|'.'
name|'_expected_seq'
op|']'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'element'
op|','
name|'None'
op|')'
name|'for'
name|'element'
name|'in'
name|'actual_seq'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# Fall back to slower list-compare if any of the objects are unhashable.'
nl|'\n'
indent|'      '
name|'expected'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'_expected_seq'
op|')'
newline|'\n'
name|'actual'
op|'='
name|'list'
op|'('
name|'actual_seq'
op|')'
newline|'\n'
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'actual'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'expected'
op|'=='
name|'actual'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<sequence with same elements as \\'%s\\'>'"
op|'%'
name|'self'
op|'.'
name|'_expected_seq'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|And
dedent|''
dedent|''
name|'class'
name|'And'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Evaluates one or more Comparators on RHS and returns an AND of the results.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      *args: One or more Comparator\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_comparators'
op|'='
name|'args'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks whether all Comparators are equal to rhs.\n\n    Args:\n      # rhs: can be anything\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'for'
name|'comparator'
name|'in'
name|'self'
op|'.'
name|'_comparators'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'not'
name|'comparator'
op|'.'
name|'equals'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<AND %s>'"
op|'%'
name|'str'
op|'('
name|'self'
op|'.'
name|'_comparators'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Or
dedent|''
dedent|''
name|'class'
name|'Or'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Evaluates one or more Comparators on RHS and returns an OR of the results.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      *args: One or more Mox comparators\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_comparators'
op|'='
name|'args'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks whether any Comparator is equal to rhs.\n\n    Args:\n      # rhs: can be anything\n\n    Returns:\n      bool\n    """'
newline|'\n'
nl|'\n'
name|'for'
name|'comparator'
name|'in'
name|'self'
op|'.'
name|'_comparators'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'comparator'
op|'.'
name|'equals'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<OR %s>'"
op|'%'
name|'str'
op|'('
name|'self'
op|'.'
name|'_comparators'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Func
dedent|''
dedent|''
name|'class'
name|'Func'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Call a function that should verify the parameter passed in is correct.\n\n  You may need the ability to perform more advanced operations on the parameter\n  in order to validate it.  You can use this to have a callable validate any\n  parameter. The callable should return either True or False.\n\n\n  Example:\n\n  def myParamValidator(param):\n    # Advanced logic here\n    return True\n\n  mock_dao.DoSomething(Func(myParamValidator), true)\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Initialize.\n\n    Args:\n      func: callable that takes one parameter and returns a bool\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_func'
op|'='
name|'func'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test whether rhs passes the function test.\n\n    rhs is passed into func.\n\n    Args:\n      rhs: any python object\n\n    Returns:\n      the result of func(rhs)\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_func'
op|'('
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'_func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IgnoreArg
dedent|''
dedent|''
name|'class'
name|'IgnoreArg'
op|'('
name|'Comparator'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Ignore an argument.\n\n  This can be used when we don\'t care about an argument of a method call.\n\n  Example:\n  # Check if CastMagic is called with 3 as first arg and \'disappear\' as third.\n  mymock.CastMagic(3, IgnoreArg(), \'disappear\')\n  """'
newline|'\n'
nl|'\n'
DECL|member|equals
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'unused_rhs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ignores arguments and returns True.\n\n    Args:\n      unused_rhs: any python object\n\n    Returns:\n      always returns True\n    """'
newline|'\n'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'<IgnoreArg>'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodGroup
dedent|''
dedent|''
name|'class'
name|'MethodGroup'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class containing common behaviour for MethodGroups."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'_group_name'
op|'='
name|'group_name'
newline|'\n'
nl|'\n'
DECL|member|group_name
dedent|''
name|'def'
name|'group_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'_group_name'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'\'<%s "%s">\''
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'self'
op|'.'
name|'_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|AddMethod
dedent|''
name|'def'
name|'AddMethod'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|MethodCalled
dedent|''
name|'def'
name|'MethodCalled'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|IsSatisfied
dedent|''
name|'def'
name|'IsSatisfied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|class|UnorderedGroup
dedent|''
dedent|''
name|'class'
name|'UnorderedGroup'
op|'('
name|'MethodGroup'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""UnorderedGroup holds a set of method calls that may occur in any order.\n\n  This construct is helpful for non-deterministic events, such as iterating\n  over the keys of a dict.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'super'
op|'('
name|'UnorderedGroup'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_methods'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|AddMethod
dedent|''
name|'def'
name|'AddMethod'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add a method to this group.\n\n    Args:\n      mock_method: A mock method to be added to this group.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_methods'
op|'.'
name|'append'
op|'('
name|'mock_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|MethodCalled
dedent|''
name|'def'
name|'MethodCalled'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    """'
newline|'\n'
nl|'\n'
comment|'# Check to see if this method exists, and if so, remove it from the set'
nl|'\n'
comment|'# and return it.'
nl|'\n'
name|'for'
name|'method'
name|'in'
name|'self'
op|'.'
name|'_methods'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'method'
op|'=='
name|'mock_method'
op|':'
newline|'\n'
comment|'# Remove the called mock_method instead of the method in the group.'
nl|'\n'
comment|'# The called method will match any comparators when equality is checked'
nl|'\n'
comment|'# during removal.  The method in the group could pass a comparator to'
nl|'\n'
comment|'# another comparator during the equality check.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_methods'
op|'.'
name|'remove'
op|'('
name|'mock_method'
op|')'
newline|'\n'
nl|'\n'
comment|'# If this group is not empty, put it back at the head of the queue.'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'IsSatisfied'
op|'('
op|')'
op|':'
newline|'\n'
indent|'          '
name|'mock_method'
op|'.'
name|'_call_queue'
op|'.'
name|'appendleft'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|','
name|'method'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'UnexpectedMethodCallError'
op|'('
name|'mock_method'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|IsSatisfied
dedent|''
name|'def'
name|'IsSatisfied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return True if there are not any methods in this group."""'
newline|'\n'
nl|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_methods'
op|')'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultipleTimesGroup
dedent|''
dedent|''
name|'class'
name|'MultipleTimesGroup'
op|'('
name|'MethodGroup'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""MultipleTimesGroup holds methods that may be called any number of times.\n\n  Note: Each method must be called at least once.\n\n  This is helpful, if you don\'t know or care how many times a method is called.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'group_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'super'
op|'('
name|'MultipleTimesGroup'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_methods'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_methods_left'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|AddMethod
dedent|''
name|'def'
name|'AddMethod'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Add a method to this group.\n\n    Args:\n      mock_method: A mock method to be added to this group.\n    """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_methods'
op|'.'
name|'add'
op|'('
name|'mock_method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_methods_left'
op|'.'
name|'add'
op|'('
name|'mock_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|MethodCalled
dedent|''
name|'def'
name|'MethodCalled'
op|'('
name|'self'
op|','
name|'mock_method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove a method call from the group.\n\n    If the method is not in the set, an UnexpectedMethodCallError will be\n    raised.\n\n    Args:\n      mock_method: a mock method that should be equal to a method in the group.\n\n    Returns:\n      The mock method from the group\n\n    Raises:\n      UnexpectedMethodCallError if the mock_method was not in the group.\n    """'
newline|'\n'
nl|'\n'
comment|'# Check to see if this method exists, and if so add it to the set of'
nl|'\n'
comment|'# called methods.'
nl|'\n'
name|'for'
name|'method'
name|'in'
name|'self'
op|'.'
name|'_methods'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'method'
op|'=='
name|'mock_method'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_methods_left'
op|'.'
name|'discard'
op|'('
name|'method'
op|')'
newline|'\n'
comment|"# Always put this group back on top of the queue, because we don't know"
nl|'\n'
comment|'# when we are done.'
nl|'\n'
name|'mock_method'
op|'.'
name|'_call_queue'
op|'.'
name|'appendleft'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
op|','
name|'method'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'IsSatisfied'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'next_method'
op|'='
name|'mock_method'
op|'.'
name|'_PopNextMethod'
op|'('
op|')'
op|';'
newline|'\n'
name|'return'
name|'next_method'
op|','
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'UnexpectedMethodCallError'
op|'('
name|'mock_method'
op|','
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|IsSatisfied
dedent|''
dedent|''
name|'def'
name|'IsSatisfied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return True if all methods in this group are called at least once."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_methods_left'
op|')'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MoxMetaTestBase
dedent|''
dedent|''
name|'class'
name|'MoxMetaTestBase'
op|'('
name|'type'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Metaclass to add mox cleanup and verification to every test.\n\n  As the mox unit testing class is being constructed (MoxTestBase or a\n  subclass), this metaclass will modify all test functions to call the\n  CleanUpMox method of the test class after they finish. This means that\n  unstubbing and verifying will happen for every test with no additional code,\n  and any failures will result in test failures as opposed to errors.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'type'
op|'.'
name|'__init__'
op|'('
name|'cls'
op|','
name|'name'
op|','
name|'bases'
op|','
name|'d'
op|')'
newline|'\n'
nl|'\n'
comment|'# also get all the attributes from the base classes to account'
nl|'\n'
comment|'# for a case when test class is not the immediate child of MoxTestBase'
nl|'\n'
name|'for'
name|'base'
name|'in'
name|'bases'
op|':'
newline|'\n'
indent|'      '
name|'for'
name|'attr_name'
name|'in'
name|'dir'
op|'('
name|'base'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'attr_name'
name|'not'
name|'in'
name|'d'
op|':'
newline|'\n'
indent|'          '
name|'d'
op|'['
name|'attr_name'
op|']'
op|'='
name|'getattr'
op|'('
name|'base'
op|','
name|'attr_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'func_name'
op|','
name|'func'
name|'in'
name|'d'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'func_name'
op|'.'
name|'startswith'
op|'('
string|"'test'"
op|')'
name|'and'
name|'callable'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'cls'
op|','
name|'func_name'
op|','
name|'MoxMetaTestBase'
op|'.'
name|'CleanUpTest'
op|'('
name|'cls'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|CleanUpTest
name|'def'
name|'CleanUpTest'
op|'('
name|'cls'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Adds Mox cleanup code to any MoxTestBase method.\n\n    Always unsets stubs after a test. Will verify all mocks for tests that\n    otherwise pass.\n\n    Args:\n      cls: MoxTestBase or subclass; the class whose test method we are altering.\n      func: method; the method of the MoxTestBase test class we wish to alter.\n\n    Returns:\n      The modified method.\n    """'
newline|'\n'
DECL|function|new_method
name|'def'
name|'new_method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'mox_obj'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'mox'"
op|','
name|'None'
op|')'
newline|'\n'
name|'stubout_obj'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'stubs'"
op|','
name|'None'
op|')'
newline|'\n'
name|'cleanup_mox'
op|'='
name|'False'
newline|'\n'
name|'cleanup_stubout'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'mox_obj'
name|'and'
name|'isinstance'
op|'('
name|'mox_obj'
op|','
name|'Mox'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cleanup_mox'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'stubout_obj'
name|'and'
name|'isinstance'
op|'('
name|'stubout_obj'
op|','
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cleanup_stubout'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'func'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cleanup_mox'
op|':'
newline|'\n'
indent|'          '
name|'mox_obj'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cleanup_stubout'
op|':'
newline|'\n'
indent|'          '
name|'stubout_obj'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'stubout_obj'
op|'.'
name|'SmartUnsetAll'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'cleanup_mox'
op|':'
newline|'\n'
indent|'        '
name|'mox_obj'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'new_method'
op|'.'
name|'__name__'
op|'='
name|'func'
op|'.'
name|'__name__'
newline|'\n'
name|'new_method'
op|'.'
name|'__doc__'
op|'='
name|'func'
op|'.'
name|'__doc__'
newline|'\n'
name|'new_method'
op|'.'
name|'__module__'
op|'='
name|'func'
op|'.'
name|'__module__'
newline|'\n'
name|'return'
name|'new_method'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MoxTestBase
dedent|''
dedent|''
name|'class'
name|'MoxTestBase'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Convenience test class to make stubbing easier.\n\n  Sets up a "mox" attribute which is an instance of Mox (any mox tests will\n  want this), and a "stubs" attribute that is an instance of StubOutForTesting\n  (needed at times). Also automatically unsets any stubs and verifies that all\n  mock methods have been called at the end of each test, eliminating boilerplate\n  code.\n  """'
newline|'\n'
nl|'\n'
DECL|variable|__metaclass__
name|'__metaclass__'
op|'='
name|'MoxMetaTestBase'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'super'
op|'('
name|'MoxTestBase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'='
name|'Mox'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'='
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

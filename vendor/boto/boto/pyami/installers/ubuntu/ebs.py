begin_unit
comment|'# Copyright (c) 2006-2009 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
comment|'#'
nl|'\n'
string|'"""\nAutomated installer to attach, format and mount an EBS volume.\nThis installer assumes that you want the volume formatted as\nan XFS file system.  To drive this installer, you need the\nfollowing section in the boto config passed to the new instance.\nYou also need to install dateutil by listing python-dateutil\nin the list of packages to be installed in the Pyami seciont\nof your boto config file.\n\nIf there is already a device mounted at the specified mount point,\nthe installer assumes that it is the ephemeral drive and unmounts\nit, remounts it as /tmp and chmods it to 777.\n\nConfig file section::\n\n    [EBS]\n    volume_id = <the id of the EBS volume, should look like vol-xxxxxxxx>\n    logical_volume_name = <the name of the logical volume that contaings \n        a reference to the physical volume to be mounted. If this parameter\n        is supplied, it overrides the volume_id setting.>\n    device = <the linux device the EBS volume should be mounted on>\n    mount_point = <directory to mount device, defaults to /ebs>\n\n"""'
newline|'\n'
name|'import'
name|'boto'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'manage'
op|'.'
name|'volume'
name|'import'
name|'Volume'
newline|'\n'
name|'import'
name|'os'
op|','
name|'time'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'pyami'
op|'.'
name|'installers'
op|'.'
name|'ubuntu'
op|'.'
name|'installer'
name|'import'
name|'Installer'
newline|'\n'
name|'from'
name|'string'
name|'import'
name|'Template'
newline|'\n'
nl|'\n'
name|'BackupScriptTemplate'
op|'='
string|'"""#!/usr/bin/env python\n# Backup EBS volume\nimport boto\nfrom boto.pyami.scriptbase import ScriptBase\nimport traceback\n\nclass Backup(ScriptBase):\n\n    def main(self):\n        try:\n            ec2 = boto.connect_ec2()\n            self.run("/usr/sbin/xfs_freeze -f ${mount_point}")\n            snapshot = ec2.create_snapshot(\'${volume_id}\')\n            boto.log.info("Snapshot created: %s " %  snapshot)\n        except Exception, e:\n            self.notify(subject="${instance_id} Backup Failed", body=traceback.format_exc())\n            boto.log.info("Snapshot created: ${volume_id}")\n        except Exception, e:\n            self.notify(subject="${instance_id} Backup Failed", body=traceback.format_exc())\n        finally:\n            self.run("/usr/sbin/xfs_freeze -u ${mount_point}")\n\nif __name__ == "__main__":\n    b = Backup()\n    b.main()\n"""'
newline|'\n'
nl|'\n'
name|'BackupCleanupScript'
op|'='
string|'"""#!/usr/bin/env python\nimport boto\nfrom boto.manage.volume import Volume\n\n# Cleans Backups of EBS volumes\n\nfor v in Volume.all():\n    v.trim_snapshots(True)\n"""'
newline|'\n'
nl|'\n'
DECL|class|EBSInstaller
name|'class'
name|'EBSInstaller'
op|'('
name|'Installer'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Set up the EBS stuff\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'config_file'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Installer'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'config_file'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_id'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Instance'"
op|','
string|"'instance-id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'device'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'device'"
op|','
string|"'/dev/sdp'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_id'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'volume_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'logical_volume_name'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'logical_volume_name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mount_point'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'mount_point'"
op|','
string|"'/ebs'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach
dedent|''
name|'def'
name|'attach'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ec2'
op|'='
name|'boto'
op|'.'
name|'connect_ec2'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'logical_volume_name'
op|':'
newline|'\n'
comment|'# if a logical volume was specified, override the specified volume_id'
nl|'\n'
comment|'# (if there was one) with the current AWS volume for the logical volume:'
nl|'\n'
indent|'            '
name|'logical_volume'
op|'='
name|'Volume'
op|'.'
name|'find'
op|'('
name|'name'
op|'='
name|'self'
op|'.'
name|'logical_volume_name'
op|')'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'volume_id'
op|'='
name|'logical_volume'
op|'.'
name|'_volume_id'
newline|'\n'
dedent|''
name|'volume'
op|'='
name|'ec2'
op|'.'
name|'get_all_volumes'
op|'('
op|'['
name|'self'
op|'.'
name|'volume_id'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# wait for the volume to be available. The volume may still be being created'
nl|'\n'
comment|'# from a snapshot.'
nl|'\n'
name|'while'
name|'volume'
op|'.'
name|'update'
op|'('
op|')'
op|'!='
string|"'available'"
op|':'
newline|'\n'
indent|'            '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'Volume %s not yet available. Current status = %s.'"
op|'%'
op|'('
name|'volume'
op|'.'
name|'id'
op|','
name|'volume'
op|'.'
name|'status'
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
dedent|''
name|'ec2'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'volume_id'
op|','
name|'self'
op|'.'
name|'instance_id'
op|','
name|'self'
op|'.'
name|'device'
op|')'
newline|'\n'
comment|'# now wait for the volume device to appear'
nl|'\n'
name|'while'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'%s still does not exist, waiting 10 seconds'"
op|'%'
name|'self'
op|'.'
name|'device'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'10'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_fs
dedent|''
dedent|''
name|'def'
name|'make_fs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'make_fs...'"
op|')'
newline|'\n'
name|'has_fs'
op|'='
name|'self'
op|'.'
name|'run'
op|'('
string|"'fsck %s'"
op|'%'
name|'self'
op|'.'
name|'device'
op|')'
newline|'\n'
name|'if'
name|'has_fs'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'run'
op|'('
string|"'mkfs -t xfs %s'"
op|'%'
name|'self'
op|'.'
name|'device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_backup_script
dedent|''
dedent|''
name|'def'
name|'create_backup_script'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'Template'
op|'('
name|'BackupScriptTemplate'
op|')'
newline|'\n'
name|'s'
op|'='
name|'t'
op|'.'
name|'substitute'
op|'('
name|'volume_id'
op|'='
name|'self'
op|'.'
name|'volume_id'
op|','
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'instance_id'
op|','
nl|'\n'
name|'mount_point'
op|'='
name|'self'
op|'.'
name|'mount_point'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
string|"'/usr/local/bin/ebs_backup'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'s'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'chmod +x /usr/local/bin/ebs_backup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_backup_cleanup_script
dedent|''
name|'def'
name|'create_backup_cleanup_script'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
string|"'/usr/local/bin/ebs_backup_cleanup'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'BackupCleanupScript'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'chmod +x /usr/local/bin/ebs_backup_cleanup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_mount_point
dedent|''
name|'def'
name|'handle_mount_point'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'handle_mount_point'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'self'
op|'.'
name|'mount_point'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'making directory'"
op|')'
newline|'\n'
comment|"# mount directory doesn't exist so create it"
nl|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|'"mkdir %s"'
op|'%'
name|'self'
op|'.'
name|'mount_point'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|"'directory exists already'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'mount -l'"
op|')'
newline|'\n'
name|'lines'
op|'='
name|'self'
op|'.'
name|'last_command'
op|'.'
name|'output'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                '
name|'t'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'t'
name|'and'
name|'t'
op|'['
number|'2'
op|']'
op|'=='
name|'self'
op|'.'
name|'mount_point'
op|':'
newline|'\n'
comment|'# something is already mounted at the mount point'
nl|'\n'
comment|'# unmount that and mount it as /tmp'
nl|'\n'
indent|'                    '
name|'if'
name|'t'
op|'['
number|'0'
op|']'
op|'!='
name|'self'
op|'.'
name|'device'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'run'
op|'('
string|"'umount %s'"
op|'%'
name|'self'
op|'.'
name|'mount_point'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'mount %s /tmp'"
op|'%'
name|'t'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'chmod 777 /tmp'"
op|')'
newline|'\n'
name|'break'
newline|'\n'
comment|'# Mount up our new EBS volume onto mount_point'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'run'
op|'('
string|'"mount %s %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'device'
op|','
name|'self'
op|'.'
name|'mount_point'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'xfs_growfs %s'"
op|'%'
name|'self'
op|'.'
name|'mount_point'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_fstab
dedent|''
name|'def'
name|'update_fstab'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'open'
op|'('
string|'"/etc/fstab"'
op|','
string|'"a"'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'write'
op|'('
string|"'%s\\t%s\\txfs\\tdefaults 0 0\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'mount_point'
op|','
name|'self'
op|'.'
name|'device'
op|')'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|install
dedent|''
name|'def'
name|'install'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# First, find and attach the volume'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'attach'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Install the xfs tools'
nl|'\n'
name|'self'
op|'.'
name|'run'
op|'('
string|"'apt-get -y install xfsprogs xfsdump'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Check to see if the filesystem was created or not'
nl|'\n'
name|'self'
op|'.'
name|'make_fs'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# create the /ebs directory for mounting'
nl|'\n'
name|'self'
op|'.'
name|'handle_mount_point'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# create the backup script'
nl|'\n'
name|'self'
op|'.'
name|'create_backup_script'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the backup script'
nl|'\n'
name|'minute'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'backup_cron_minute'"
op|','
string|"'0'"
op|')'
newline|'\n'
name|'hour'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'backup_cron_hour'"
op|','
string|"'4,16'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add_cron'
op|'('
string|'"ebs_backup"'
op|','
string|'"/usr/local/bin/ebs_backup"'
op|','
name|'minute'
op|'='
name|'minute'
op|','
name|'hour'
op|'='
name|'hour'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the backup cleanup script'
nl|'\n'
name|'minute'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'backup_cleanup_cron_minute'"
op|')'
newline|'\n'
name|'hour'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'EBS'"
op|','
string|"'backup_cleanup_cron_hour'"
op|')'
newline|'\n'
name|'if'
op|'('
name|'minute'
op|'!='
name|'None'
op|')'
name|'and'
op|'('
name|'hour'
op|'!='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'create_backup_cleanup_script'
op|'('
op|')'
op|';'
newline|'\n'
name|'self'
op|'.'
name|'add_cron'
op|'('
string|'"ebs_backup_cleanup"'
op|','
string|'"/usr/local/bin/ebs_backup_cleanup"'
op|','
name|'minute'
op|'='
name|'minute'
op|','
name|'hour'
op|'='
name|'hour'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up the fstab'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'update_fstab'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|main
dedent|''
name|'def'
name|'main'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'device'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'install'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'boto'
op|'.'
name|'log'
op|'.'
name|'info'
op|'('
string|'"Device %s is already attached, skipping EBS Installer"'
op|'%'
name|'self'
op|'.'
name|'device'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

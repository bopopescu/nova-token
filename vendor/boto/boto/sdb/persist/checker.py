begin_unit
comment|'# Copyright (c) 2006,2007,2008 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'from'
name|'datetime'
name|'import'
name|'datetime'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'key'
name|'import'
name|'Key'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'bucket'
name|'import'
name|'Bucket'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sdb'
op|'.'
name|'persist'
name|'import'
name|'revive_object_from_id'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'SDBPersistenceError'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'utils'
name|'import'
name|'Password'
newline|'\n'
nl|'\n'
DECL|variable|ISO8601
name|'ISO8601'
op|'='
string|"'%Y-%m-%dT%H:%M:%SZ'"
newline|'\n'
nl|'\n'
DECL|class|ValueChecker
name|'class'
name|'ValueChecker'
op|':'
newline|'\n'
nl|'\n'
DECL|member|check
indent|'    '
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Checks a value to see if it is of the right type.\n\n        Should raise a TypeError exception if an in appropriate value is passed in.\n        """'
newline|'\n'
name|'raise'
name|'TypeError'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Takes a string as input and returns the type-specific value represented by that string.\n\n        Should raise a ValueError if the value cannot be converted to the appropriate type.\n        """'
newline|'\n'
name|'raise'
name|'ValueError'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert a value to it\'s string representation.\n\n        Should raise a ValueError if the value cannot be converted to a string representation.\n        """'
newline|'\n'
name|'raise'
name|'ValueError'
newline|'\n'
nl|'\n'
DECL|class|StringChecker
dedent|''
dedent|''
name|'class'
name|'StringChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'params'
op|'.'
name|'has_key'
op|'('
string|"'maxlength'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maxlength'
op|'='
name|'params'
op|'['
string|"'maxlength'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maxlength'
op|'='
number|'1024'
newline|'\n'
dedent|''
name|'if'
name|'params'
op|'.'
name|'has_key'
op|'('
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'check'
op|'('
name|'params'
op|'['
string|"'default'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'params'
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'default'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'>'
name|'self'
op|'.'
name|'maxlength'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|','
string|"'Length of value greater than maxlength'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting String, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str_value'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|class|PasswordChecker
dedent|''
dedent|''
name|'class'
name|'PasswordChecker'
op|'('
name|'StringChecker'
op|')'
op|':'
newline|'\n'
DECL|member|check
indent|'    '
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'Password'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'>'
name|'self'
op|'.'
name|'maxlength'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|','
string|"'Length of value greater than maxlength'"
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting String, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IntegerChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'IntegerChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|__sizes__
indent|'    '
name|'__sizes__'
op|'='
op|'{'
string|"'small'"
op|':'
op|'('
number|'65535'
op|','
number|'32767'
op|','
op|'-'
number|'32768'
op|','
number|'5'
op|')'
op|','
nl|'\n'
string|"'medium'"
op|':'
op|'('
number|'4294967295'
op|','
number|'2147483647'
op|','
op|'-'
number|'2147483648'
op|','
number|'10'
op|')'
op|','
nl|'\n'
string|"'large'"
op|':'
op|'('
number|'18446744073709551615'
op|','
number|'9223372036854775807'
op|','
op|'-'
number|'9223372036854775808'
op|','
number|'20'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'size'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'size'"
op|','
string|"'medium'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'size'
name|'not'
name|'in'
name|'self'
op|'.'
name|'__sizes__'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'size must be one of %s'"
op|'%'
name|'self'
op|'.'
name|'__sizes__'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'signed'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'signed'"
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'default'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'format_string'
op|'='
string|"'%%0%dd'"
op|'%'
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'int'
op|')'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting int or long, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'signed'
op|':'
newline|'\n'
indent|'            '
name|'min'
op|'='
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'max'
op|'='
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'min'
op|'='
number|'0'
newline|'\n'
name|'max'
op|'='
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'>'
name|'max'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Maximum value is %d'"
op|'%'
name|'max'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'<'
name|'min'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Minimum value is %d'"
op|'%'
name|'min'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'int'
op|'('
name|'str_value'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'signed'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'val'
op|'+'
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'signed'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'+='
op|'-'
name|'self'
op|'.'
name|'__sizes__'
op|'['
name|'self'
op|'.'
name|'size'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'format_string'
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|class|BooleanChecker
dedent|''
dedent|''
name|'class'
name|'BooleanChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'params'
op|'.'
name|'has_key'
op|'('
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'default'
op|'='
name|'params'
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'default'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'bool'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting bool, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'str_value'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'value'
op|'=='
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'true'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'false'"
newline|'\n'
nl|'\n'
DECL|class|DateTimeChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'DateTimeChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'params'
op|'.'
name|'has_key'
op|'('
string|"'maxlength'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maxlength'
op|'='
name|'params'
op|'['
string|"'maxlength'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'maxlength'
op|'='
number|'1024'
newline|'\n'
dedent|''
name|'if'
name|'params'
op|'.'
name|'has_key'
op|'('
string|"'default'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'default'
op|'='
name|'params'
op|'['
string|"'default'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'default'
op|'='
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting datetime, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'datetime'
op|'.'
name|'strptime'
op|'('
name|'str_value'
op|','
name|'ISO8601'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Unable to convert %s to DateTime'"
op|'%'
name|'str_value'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'return'
name|'value'
op|'.'
name|'strftime'
op|'('
name|'ISO8601'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ObjectChecker
dedent|''
dedent|''
name|'class'
name|'ObjectChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'default'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'ref_class'
op|'='
name|'params'
op|'.'
name|'get'
op|'('
string|"'ref_class'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'ref_class'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SDBPersistenceError'
op|'('
string|"'ref_class parameter is required'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
comment|'# ugly little hack - sometimes I want to just stick a UUID string'
nl|'\n'
comment|'# in here rather than instantiate an object. '
nl|'\n'
comment|'# This does a bit of hand waving to "type check" the string'
nl|'\n'
indent|'            '
name|'t'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|"'-'"
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'t'
op|')'
op|'!='
number|'5'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'obj_lineage'
op|'='
name|'value'
op|'.'
name|'get_lineage'
op|'('
op|')'
newline|'\n'
name|'cls_lineage'
op|'='
name|'self'
op|'.'
name|'ref_class'
op|'.'
name|'get_lineage'
op|'('
op|')'
newline|'\n'
name|'if'
name|'obj_lineage'
op|'.'
name|'startswith'
op|'('
name|'cls_lineage'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'TypeError'
op|','
string|"'%s not instance of %s'"
op|'%'
op|'('
name|'obj_lineage'
op|','
name|'cls_lineage'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|','
string|"'%s is not an SDBObject'"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'str_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'revive_object_from_id'
op|'('
name|'str_value'
op|','
name|'obj'
op|'.'
name|'_manager'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Unable to convert %s to Object'"
op|'%'
name|'str_value'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
DECL|class|S3KeyChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'S3KeyChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'default'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'bucket_name'
op|','
name|'key_name'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'Key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting Key, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'str_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'str_value'
op|'=='
string|"'None'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bucket_name'
op|','
name|'key_name'
op|'='
name|'str_value'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
name|'if'
name|'obj'
op|':'
newline|'\n'
indent|'                '
name|'s3'
op|'='
name|'obj'
op|'.'
name|'_manager'
op|'.'
name|'get_s3_connection'
op|'('
op|')'
newline|'\n'
name|'bucket'
op|'='
name|'s3'
op|'.'
name|'get_bucket'
op|'('
name|'bucket_name'
op|')'
newline|'\n'
name|'key'
op|'='
name|'bucket'
op|'.'
name|'get_key'
op|'('
name|'key_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|':'
newline|'\n'
indent|'                    '
name|'key'
op|'='
name|'bucket'
op|'.'
name|'new_key'
op|'('
name|'key_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'key'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Unable to convert %s to S3Key'"
op|'%'
name|'str_value'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s/%s'"
op|'%'
op|'('
name|'value'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
name|'value'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|class|S3BucketChecker
dedent|''
dedent|''
dedent|''
name|'class'
name|'S3BucketChecker'
op|'('
name|'ValueChecker'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'params'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'default'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|check
dedent|''
name|'def'
name|'check'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'Bucket'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|','
string|"'Expecting Bucket, got %s'"
op|'%'
name|'type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|from_string
dedent|''
dedent|''
name|'def'
name|'from_string'
op|'('
name|'self'
op|','
name|'str_value'
op|','
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'str_value'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'str_value'
op|'=='
string|"'None'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'obj'
op|':'
newline|'\n'
indent|'                '
name|'s3'
op|'='
name|'obj'
op|'.'
name|'_manager'
op|'.'
name|'get_s3_connection'
op|'('
op|')'
newline|'\n'
name|'bucket'
op|'='
name|'s3'
op|'.'
name|'get_bucket'
op|'('
name|'str_value'
op|')'
newline|'\n'
name|'return'
name|'bucket'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|','
string|"'Unable to convert %s to S3Bucket'"
op|'%'
name|'str_value'
newline|'\n'
nl|'\n'
DECL|member|to_string
dedent|''
dedent|''
name|'def'
name|'to_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'check'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'value'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s'"
op|'%'
name|'value'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2010 Chris Moyer http://coredumped.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'SDBResponseError'
newline|'\n'
nl|'\n'
DECL|class|SequenceGenerator
name|'class'
name|'SequenceGenerator'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generic Sequence Generator object, this takes a single\n    string as the "sequence" and uses that to figure out\n    what the next value in a string is. For example\n    if you give "ABC" and pass in "A" it will give you "B",\n    and if you give it "C" it will give you "AA".\n\n    If you set "rollover" to True in the above example, passing\n    in "C" would give you "A" again.\n\n    The Sequence string can be a string or any iterable\n    that has the "index" function and is indexable.\n    """'
newline|'\n'
DECL|variable|__name__
name|'__name__'
op|'='
string|'"SequenceGenerator"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'sequence_string'
op|','
name|'rollover'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new SequenceGenerator using the sequence_string\n        as how to generate the next item.\n\n        :param sequence_string: The string or list that explains\n        how to generate the next item in the sequence\n        :type sequence_string: str,iterable\n\n        :param rollover: Rollover instead of incrementing when\n        we hit the end of the sequence\n        :type rollover: bool\n        """'
newline|'\n'
name|'self'
op|'.'
name|'sequence_string'
op|'='
name|'sequence_string'
newline|'\n'
name|'self'
op|'.'
name|'sequence_length'
op|'='
name|'len'
op|'('
name|'sequence_string'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rollover'
op|'='
name|'rollover'
newline|'\n'
name|'self'
op|'.'
name|'last_item'
op|'='
name|'sequence_string'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'__name__'
op|'='
string|'"%s(\'%s\')"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'sequence_string'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'val'
op|','
name|'last'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the next value in the sequence"""'
newline|'\n'
comment|"# If they pass us in a string that's not at least"
nl|'\n'
comment|'# the lenght of our sequence, then return the'
nl|'\n'
comment|'# first element in our sequence'
nl|'\n'
name|'if'
name|'val'
op|'=='
name|'None'
name|'or'
name|'len'
op|'('
name|'val'
op|')'
op|'<'
name|'self'
op|'.'
name|'sequence_length'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'sequence_string'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'last_value'
op|'='
name|'val'
op|'['
op|'-'
name|'self'
op|'.'
name|'sequence_length'
op|':'
op|']'
newline|'\n'
name|'if'
op|'('
name|'not'
name|'self'
op|'.'
name|'rollover'
op|')'
name|'and'
op|'('
name|'last_value'
op|'=='
name|'self'
op|'.'
name|'last_item'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'self'
op|'('
name|'val'
op|'['
op|':'
op|'-'
name|'self'
op|'.'
name|'sequence_length'
op|']'
op|')'
op|','
name|'self'
op|'.'
name|'_inc'
op|'('
name|'last_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'val'
op|'['
op|':'
op|'-'
name|'self'
op|'.'
name|'sequence_length'
op|']'
op|','
name|'self'
op|'.'
name|'_inc'
op|'('
name|'last_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|_inc
dedent|''
name|'def'
name|'_inc'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Increment a single value"""'
newline|'\n'
name|'assert'
op|'('
name|'len'
op|'('
name|'val'
op|')'
op|'=='
name|'self'
op|'.'
name|'sequence_length'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'sequence_string'
op|'['
op|'('
name|'self'
op|'.'
name|'sequence_string'
op|'.'
name|'index'
op|'('
name|'val'
op|')'
op|'+'
number|'1'
op|')'
op|'%'
name|'len'
op|'('
name|'self'
op|'.'
name|'sequence_string'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Simple Sequence Functions'
nl|'\n'
comment|'#'
nl|'\n'
DECL|function|increment_by_one
dedent|''
dedent|''
name|'def'
name|'increment_by_one'
op|'('
name|'cv'
op|'='
name|'None'
op|','
name|'lv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'cv'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'cv'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
DECL|function|double
dedent|''
name|'def'
name|'double'
op|'('
name|'cv'
op|'='
name|'None'
op|','
name|'lv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'cv'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'return'
name|'cv'
op|'*'
number|'2'
newline|'\n'
nl|'\n'
DECL|function|fib
dedent|''
name|'def'
name|'fib'
op|'('
name|'cv'
op|'='
number|'1'
op|','
name|'lv'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The fibonacci sequence, this incrementer uses the\n    last value"""'
newline|'\n'
name|'if'
name|'cv'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'cv'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'lv'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'lv'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'return'
name|'cv'
op|'+'
name|'lv'
newline|'\n'
nl|'\n'
DECL|variable|increment_string
dedent|''
name|'increment_string'
op|'='
name|'SequenceGenerator'
op|'('
string|'"ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|Sequence
name|'class'
name|'Sequence'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A simple Sequence using the new SDB "Consistent" features\n    Based largly off of the "Counter" example from mitch garnaat:\n    http://bitbucket.org/mitch/stupidbototricks/src/tip/counter.py"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'id'
op|'='
name|'None'
op|','
name|'domain_name'
op|'='
name|'None'
op|','
name|'fnc'
op|'='
name|'increment_by_one'
op|','
name|'init_val'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new Sequence, using an optional function to \n        increment to the next number, by default we just increment by one.\n        Every parameter here is optional, if you don\'t specify any options\n        then you\'ll get a new SequenceGenerator with a random ID stored in the\n        default domain that increments by one and uses the default botoweb \n        environment\n\n        :param id: Optional ID (name) for this counter\n        :type id: str\n\n        :param domain_name: Optional domain name to use, by default we get this out of the\n            environment configuration\n        :type domain_name:str\n\n        :param fnc: Optional function to use for the incrementation, by default we just increment by one\n            There are several functions defined in this module.\n            Your function must accept "None" to get the initial value\n        :type fnc: function, str\n\n        :param init_val: Initial value, by default this is the first element in your sequence, \n            but you can pass in any value, even a string if you pass in a function that uses\n            strings instead of ints to increment\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_db'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_value'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'last_value'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'domain_name'
op|'='
name|'domain_name'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'id'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'id'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'uuid'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'init_val'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'init_val'
op|'='
name|'fnc'
op|'('
name|'init_val'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'val'
op|'='
name|'init_val'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'item_type'
op|'='
name|'type'
op|'('
name|'fnc'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'None'
newline|'\n'
comment|'# Allow us to pass in a full name to a function'
nl|'\n'
name|'if'
name|'type'
op|'('
name|'fnc'
op|')'
op|'=='
name|'str'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'boto'
op|'.'
name|'utils'
name|'import'
name|'find_class'
newline|'\n'
name|'fnc'
op|'='
name|'find_class'
op|'('
name|'fnc'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fnc'
op|'='
name|'fnc'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the value"""'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'expected_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'new_val'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'new_val'
op|'['
string|"'timestamp'"
op|']'
op|'='
name|'now'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_value'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'new_val'
op|'['
string|"'last_value'"
op|']'
op|'='
name|'self'
op|'.'
name|'_value'
newline|'\n'
name|'expected_values'
op|'='
op|'['
string|"'current_value'"
op|','
name|'str'
op|'('
name|'self'
op|'.'
name|'_value'
op|')'
op|']'
newline|'\n'
dedent|''
name|'new_val'
op|'['
string|"'current_value'"
op|']'
op|'='
name|'val'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'put_attributes'
op|'('
name|'self'
op|'.'
name|'id'
op|','
name|'new_val'
op|','
name|'expected_values'
op|'='
name|'expected_values'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'new_val'
op|'['
string|"'timestamp'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'SDBResponseError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'status'
op|'=='
number|'409'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|','
string|'"Sequence out of sync"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|get
dedent|''
dedent|''
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the value"""'
newline|'\n'
name|'val'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'get_attributes'
op|'('
name|'self'
op|'.'
name|'id'
op|','
name|'consistent_read'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'val'
name|'and'
name|'val'
op|'.'
name|'has_key'
op|'('
string|"'timestamp'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'val'
op|'['
string|"'timestamp'"
op|']'
newline|'\n'
dedent|''
name|'if'
name|'val'
name|'and'
name|'val'
op|'.'
name|'has_key'
op|'('
string|"'current_value'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_value'
op|'='
name|'self'
op|'.'
name|'item_type'
op|'('
name|'val'
op|'['
string|"'current_value'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'val'
op|'.'
name|'has_key'
op|'('
string|'"last_value"'
op|')'
name|'and'
name|'val'
op|'['
string|"'last_value'"
op|']'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'last_value'
op|'='
name|'self'
op|'.'
name|'item_type'
op|'('
name|'val'
op|'['
string|"'last_value'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_value'
newline|'\n'
nl|'\n'
DECL|variable|val
dedent|''
name|'val'
op|'='
name|'property'
op|'('
name|'get'
op|','
name|'set'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"%s(\'%s\', \'%s\', \'%s.%s\', \'%s\')"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'domain_name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fnc'
op|'.'
name|'__module__'
op|','
name|'self'
op|'.'
name|'fnc'
op|'.'
name|'__name__'
op|','
nl|'\n'
name|'self'
op|'.'
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect to our domain"""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_db'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'domain_name'
op|':'
newline|'\n'
indent|'                '
name|'import'
name|'boto'
newline|'\n'
name|'sdb'
op|'='
name|'boto'
op|'.'
name|'connect_sdb'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'domain_name'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|'"DB"'
op|','
string|'"sequence_db"'
op|','
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|'"DB"'
op|','
string|'"db_name"'
op|','
string|'"default"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_db'
op|'='
name|'sdb'
op|'.'
name|'get_domain'
op|'('
name|'self'
op|'.'
name|'domain_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SDBResponseError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'status'
op|'=='
number|'400'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_db'
op|'='
name|'sdb'
op|'.'
name|'create_domain'
op|'('
name|'self'
op|'.'
name|'domain_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_db'
newline|'\n'
nl|'\n'
DECL|variable|db
dedent|''
name|'db'
op|'='
name|'property'
op|'('
name|'_connect'
op|')'
newline|'\n'
nl|'\n'
DECL|member|next
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'val'
op|'='
name|'self'
op|'.'
name|'fnc'
op|'('
name|'self'
op|'.'
name|'val'
op|','
name|'self'
op|'.'
name|'last_value'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Remove this sequence"""'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'delete_attributes'
op|'('
name|'self'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delete'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nRepresents an SDB Domain\n"""'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sdb'
op|'.'
name|'queryresultset'
name|'import'
name|'QueryResultSet'
op|','
name|'SelectResultSet'
newline|'\n'
nl|'\n'
DECL|class|Domain
name|'class'
name|'Domain'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|'='
name|'None'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_metadata'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Domain:%s'"
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'iter'
op|'('
name|'self'
op|'.'
name|'select'
op|'('
string|'"SELECT * FROM `%s`"'
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'DomainName'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'name'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metadata
dedent|''
dedent|''
name|'def'
name|'get_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_metadata'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_metadata'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'domain_metadata'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_metadata'
newline|'\n'
nl|'\n'
DECL|member|put_attributes
dedent|''
name|'def'
name|'put_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attributes'
op|','
nl|'\n'
name|'replace'
op|'='
name|'True'
op|','
name|'expected_values'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store attributes for a given item.\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being stored.\n\n        :type attribute_names: dict or dict-like object\n        :param attribute_names: The name/value pairs to store as attributes\n\n        :type expected_value: list\n        :param expected_value: If supplied, this is a list or tuple consisting\n                               of a single attribute name and expected value.\n                               The list can be of the form:\n                                * [\'name\', \'value\']\n                               In which case the call will first verify\n                               that the attribute "name" of this item has\n                               a value of "value".  If it does, the delete\n                               will proceed, otherwise a ConditionalCheckFailed\n                               error will be returned.\n                               The list can also be of the form:\n                                * [\'name\', True|False]\n                               which will simply check for the existence (True)\n                               or non-existencve (False) of the attribute.\n\n        :type replace: bool\n        :param replace: Whether the attribute values passed in will replace\n                        existing values or will be added as addition values.\n                        Defaults to True.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'put_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attributes'
op|','
nl|'\n'
name|'replace'
op|','
name|'expected_values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|batch_put_attributes
dedent|''
name|'def'
name|'batch_put_attributes'
op|'('
name|'self'
op|','
name|'items'
op|','
name|'replace'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store attributes for multiple items.\n\n        :type items: dict or dict-like object\n        :param items: A dictionary-like object.  The keys of the dictionary are\n                      the item names and the values are themselves dictionaries\n                      of attribute names/values, exactly the same as the\n                      attribute_names parameter of the scalar put_attributes\n                      call.\n\n        :type replace: bool\n        :param replace: Whether the attribute values passed in will replace\n                        existing values or will be added as addition values.\n                        Defaults to True.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'batch_put_attributes'
op|'('
name|'self'
op|','
name|'items'
op|','
name|'replace'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_attributes
dedent|''
name|'def'
name|'get_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attribute_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'consistent_read'
op|'='
name|'False'
op|','
name|'item'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve attributes for a given item.\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being retrieved.\n\n        :type attribute_names: string or list of strings\n        :param attribute_names: An attribute name or list of attribute names.  This\n                                parameter is optional.  If not supplied, all attributes\n                                will be retrieved for the item.\n\n        :rtype: :class:`boto.sdb.item.Item`\n        :return: An Item mapping type containing the requested attribute name/values\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attribute_name'
op|','
nl|'\n'
name|'consistent_read'
op|','
name|'item'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_attributes
dedent|''
name|'def'
name|'delete_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attributes'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_values'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete attributes from a given item.\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being deleted.\n\n        :type attributes: dict, list or :class:`boto.sdb.item.Item`\n        :param attributes: Either a list containing attribute names which will cause\n                           all values associated with that attribute name to be deleted or\n                           a dict or Item containing the attribute names and keys and list\n                           of values to delete as the value.  If no value is supplied,\n                           all attribute name/values for the item will be deleted.\n                           \n        :type expected_value: list\n        :param expected_value: If supplied, this is a list or tuple consisting\n                               of a single attribute name and expected value.\n                               The list can be of the form:\n                                * [\'name\', \'value\']\n                               In which case the call will first verify\n                               that the attribute "name" of this item has\n                               a value of "value".  If it does, the delete\n                               will proceed, otherwise a ConditionalCheckFailed\n                               error will be returned.\n                               The list can also be of the form:\n                                * [\'name\', True|False]\n                               which will simply check for the existence (True)\n                               or non-existencve (False) of the attribute.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'delete_attributes'
op|'('
name|'self'
op|','
name|'item_name'
op|','
name|'attributes'
op|','
nl|'\n'
name|'expected_values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'query'
op|'='
string|"''"
op|','
name|'next_token'
op|'='
name|'None'
op|','
name|'consistent_read'
op|'='
name|'False'
op|','
name|'max_items'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a set of Attributes for item names within domain_name that match the query.\n        The query must be expressed in using the SELECT style syntax rather than the\n        original SimpleDB query language.\n\n        :type query: string\n        :param query: The SimpleDB query to be performed.\n\n        :rtype: iter\n        :return: An iterator containing the results.  This is actually a generator\n                 function that will iterate across all search results, not just the\n                 first page.\n        """'
newline|'\n'
name|'return'
name|'SelectResultSet'
op|'('
name|'self'
op|','
name|'query'
op|','
name|'max_items'
op|'='
name|'max_items'
op|','
name|'next_token'
op|'='
name|'next_token'
op|','
nl|'\n'
name|'consistent_read'
op|'='
name|'consistent_read'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_item
dedent|''
name|'def'
name|'get_item'
op|'('
name|'self'
op|','
name|'item_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'item'
op|'='
name|'self'
op|'.'
name|'get_attributes'
op|'('
name|'item_name'
op|')'
newline|'\n'
name|'if'
name|'item'
op|':'
newline|'\n'
indent|'            '
name|'item'
op|'.'
name|'domain'
op|'='
name|'self'
newline|'\n'
name|'return'
name|'item'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|new_item
dedent|''
dedent|''
name|'def'
name|'new_item'
op|'('
name|'self'
op|','
name|'item_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'item_cls'
op|'('
name|'self'
op|','
name|'item_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_item
dedent|''
name|'def'
name|'delete_item'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'delete_attributes'
op|'('
name|'item'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_xml
dedent|''
name|'def'
name|'to_xml'
op|'('
name|'self'
op|','
name|'f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get this domain as an XML DOM Document\n        :param f: Optional File to dump directly to\n        :type f: File or Stream\n\n        :return: File object where the XML has been dumped to\n        :rtype: file\n        """'
newline|'\n'
name|'if'
name|'not'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'tempfile'
name|'import'
name|'TemporaryFile'
newline|'\n'
name|'f'
op|'='
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'f'
op|','
string|'\'<?xml version="1.0" encoding="UTF-8"?>\''
newline|'\n'
name|'print'
op|'>>'
name|'f'
op|','
string|'\'<Domain id="%s">\''
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'>>'
name|'f'
op|','
string|'\'\\t<Item id="%s">\''
op|'%'
name|'item'
op|'.'
name|'name'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'item'
op|':'
newline|'\n'
indent|'                '
name|'print'
op|'>>'
name|'f'
op|','
string|'\'\\t\\t<attribute id="%s">\''
op|'%'
name|'k'
newline|'\n'
name|'values'
op|'='
name|'item'
op|'['
name|'k'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'values'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'='
op|'['
name|'values'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'value'
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'                    '
name|'print'
op|'>>'
name|'f'
op|','
string|"'\\t\\t\\t<value><![CDATA['"
op|','
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'value'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'value'
op|'='
name|'unicode'
op|'('
name|'value'
op|','
name|'errors'
op|'='
string|"'replace'"
op|')'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|','
string|"'replace'"
op|')'
newline|'\n'
dedent|''
name|'f'
op|'.'
name|'write'
op|'('
name|'value'
op|')'
newline|'\n'
name|'print'
op|'>>'
name|'f'
op|','
string|"']]></value>'"
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'f'
op|','
string|"'\\t\\t</attribute>'"
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'f'
op|','
string|"'\\t</Item>'"
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'f'
op|','
string|"'</Domain>'"
newline|'\n'
name|'f'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|from_xml
dedent|''
name|'def'
name|'from_xml'
op|'('
name|'self'
op|','
name|'doc'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Load this domain based on an XML document"""'
newline|'\n'
name|'import'
name|'xml'
op|'.'
name|'sax'
newline|'\n'
name|'handler'
op|'='
name|'DomainDumpParser'
op|'('
name|'self'
op|')'
newline|'\n'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'parse'
op|'('
name|'doc'
op|','
name|'handler'
op|')'
newline|'\n'
name|'return'
name|'handler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomainMetaData
dedent|''
dedent|''
name|'class'
name|'DomainMetaData'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
name|'self'
op|'.'
name|'item_count'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'item_names_size'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attr_name_count'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attr_names_size'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attr_value_count'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attr_values_size'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'ItemCount'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'item_count'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'ItemNamesSizeBytes'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'item_names_size'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'AttributeNameCount'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attr_name_count'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'AttributeNamesSizeBytes'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attr_names_size'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'AttributeValueCount'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attr_value_count'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'AttributeValuesSizeBytes'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attr_values_size'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'Timestamp'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'timestamp'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'handler'
name|'import'
name|'ContentHandler'
newline|'\n'
DECL|class|DomainDumpParser
name|'class'
name|'DomainDumpParser'
op|'('
name|'ContentHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    SAX parser for a domain that has been dumped\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'uploader'
op|'='
name|'UploaderThread'
op|'('
name|'domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'item_id'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attrs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'attribute'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|'"Item"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'item_id'
op|'='
name|'attrs'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'attrs'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|'"attribute"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'attribute'
op|'='
name|'attrs'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|'"value"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'value'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|characters
dedent|''
dedent|''
name|'def'
name|'characters'
op|'('
name|'self'
op|','
name|'ch'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'value'
op|'+='
name|'ch'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|'"value"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'value'
name|'and'
name|'self'
op|'.'
name|'attribute'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'self'
op|'.'
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'attr_name'
op|'='
name|'self'
op|'.'
name|'attribute'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'attrs'
op|'.'
name|'has_key'
op|'('
name|'attr_name'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'attrs'
op|'['
name|'attr_name'
op|']'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'attrs'
op|'['
name|'attr_name'
op|']'
op|'='
op|'['
name|'value'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'name'
op|'=='
string|'"Item"'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'uploader'
op|'.'
name|'items'
op|'['
name|'self'
op|'.'
name|'item_id'
op|']'
op|'='
name|'self'
op|'.'
name|'attrs'
newline|'\n'
comment|'# Every 20 items we spawn off the uploader'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'uploader'
op|'.'
name|'items'
op|')'
op|'>='
number|'20'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'uploader'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'uploader'
op|'='
name|'UploaderThread'
op|'('
name|'self'
op|'.'
name|'domain'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'name'
op|'=='
string|'"Domain"'
op|':'
newline|'\n'
comment|"# If we're done, spawn off our last Uploader Thread"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'uploader'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'from'
name|'threading'
name|'import'
name|'Thread'
newline|'\n'
DECL|class|UploaderThread
name|'class'
name|'UploaderThread'
op|'('
name|'Thread'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Uploader Thread"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'domain'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'db'
op|'='
name|'domain'
newline|'\n'
name|'self'
op|'.'
name|'items'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'Thread'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'batch_put_attributes'
op|'('
name|'self'
op|'.'
name|'items'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"Exception using batch put, trying regular put instead"'
newline|'\n'
name|'for'
name|'item_name'
name|'in'
name|'self'
op|'.'
name|'items'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'put_attributes'
op|'('
name|'item_name'
op|','
name|'self'
op|'.'
name|'items'
op|'['
name|'item_name'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'print'
string|'"."'
op|','
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

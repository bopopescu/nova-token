begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'import'
name|'xml'
op|'.'
name|'sax'
newline|'\n'
name|'import'
name|'threading'
newline|'\n'
name|'from'
name|'boto'
name|'import'
name|'handler'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'connection'
name|'import'
name|'AWSQueryConnection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sdb'
op|'.'
name|'domain'
name|'import'
name|'Domain'
op|','
name|'DomainMetaData'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sdb'
op|'.'
name|'item'
name|'import'
name|'Item'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sdb'
op|'.'
name|'regioninfo'
name|'import'
name|'SDBRegionInfo'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'SDBResponseError'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'resultset'
name|'import'
name|'ResultSet'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ItemThread
name|'class'
name|'ItemThread'
op|'('
name|'threading'
op|'.'
name|'Thread'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'domain_name'
op|','
name|'item_names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'threading'
op|'.'
name|'Thread'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
name|'print'
string|"'starting %s with %d items'"
op|'%'
op|'('
name|'name'
op|','
name|'len'
op|'('
name|'item_names'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'domain_name'
op|'='
name|'domain_name'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'SDBConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'item_names'
op|'='
name|'item_names'
newline|'\n'
name|'self'
op|'.'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'item_name'
name|'in'
name|'self'
op|'.'
name|'item_names'
op|':'
newline|'\n'
indent|'            '
name|'item'
op|'='
name|'self'
op|'.'
name|'conn'
op|'.'
name|'get_attributes'
op|'('
name|'self'
op|'.'
name|'domain_name'
op|','
name|'item_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'items'
op|'.'
name|'append'
op|'('
name|'item'
op|')'
newline|'\n'
nl|'\n'
comment|"#boto.set_stream_logger('sdb')"
nl|'\n'
nl|'\n'
DECL|class|SDBConnection
dedent|''
dedent|''
dedent|''
name|'class'
name|'SDBConnection'
op|'('
name|'AWSQueryConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|DefaultRegionName
indent|'    '
name|'DefaultRegionName'
op|'='
string|"'us-east-1'"
newline|'\n'
DECL|variable|DefaultRegionEndpoint
name|'DefaultRegionEndpoint'
op|'='
string|"'sdb.amazonaws.com'"
newline|'\n'
DECL|variable|APIVersion
name|'APIVersion'
op|'='
string|"'2009-04-15'"
newline|'\n'
DECL|variable|SignatureVersion
name|'SignatureVersion'
op|'='
string|"'2'"
newline|'\n'
DECL|variable|ResponseError
name|'ResponseError'
op|'='
name|'SDBResponseError'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|'='
name|'None'
op|','
name|'aws_secret_access_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'True'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'proxy'
op|'='
name|'None'
op|','
name|'proxy_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'proxy_user'
op|'='
name|'None'
op|','
name|'proxy_pass'
op|'='
name|'None'
op|','
name|'debug'
op|'='
number|'0'
op|','
nl|'\n'
name|'https_connection_factory'
op|'='
name|'None'
op|','
name|'region'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|"'/'"
op|','
name|'converter'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'region'
op|':'
newline|'\n'
indent|'            '
name|'region'
op|'='
name|'SDBRegionInfo'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'DefaultRegionName'
op|','
name|'self'
op|'.'
name|'DefaultRegionEndpoint'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'region'
op|'='
name|'region'
newline|'\n'
name|'AWSQueryConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|','
name|'aws_secret_access_key'
op|','
nl|'\n'
name|'is_secure'
op|','
name|'port'
op|','
name|'proxy'
op|','
name|'proxy_port'
op|','
name|'proxy_user'
op|','
name|'proxy_pass'
op|','
nl|'\n'
name|'self'
op|'.'
name|'region'
op|'.'
name|'endpoint'
op|','
name|'debug'
op|','
name|'https_connection_factory'
op|','
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'box_usage'
op|'='
number|'0.0'
newline|'\n'
name|'self'
op|'.'
name|'converter'
op|'='
name|'converter'
newline|'\n'
name|'self'
op|'.'
name|'item_cls'
op|'='
name|'Item'
newline|'\n'
nl|'\n'
DECL|member|set_item_cls
dedent|''
name|'def'
name|'set_item_cls'
op|'('
name|'self'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'item_cls'
op|'='
name|'cls'
newline|'\n'
nl|'\n'
DECL|member|build_name_value_list
dedent|''
name|'def'
name|'build_name_value_list'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'attributes'
op|','
name|'replace'
op|'='
name|'False'
op|','
nl|'\n'
name|'label'
op|'='
string|"'Attribute'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
name|'attributes'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'attributes'
op|'['
name|'key'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'v'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                    '
name|'params'
op|'['
string|"'%s.%d.Name'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
name|'key'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'converter'
op|':'
newline|'\n'
indent|'                        '
name|'v'
op|'='
name|'self'
op|'.'
name|'converter'
op|'.'
name|'encode'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'params'
op|'['
string|"'%s.%d.Value'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
name|'v'
newline|'\n'
name|'if'
name|'replace'
op|':'
newline|'\n'
indent|'                        '
name|'params'
op|'['
string|"'%s.%d.Replace'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
string|"'%s.%d.Name'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
name|'key'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'converter'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'='
name|'self'
op|'.'
name|'converter'
op|'.'
name|'encode'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'params'
op|'['
string|"'%s.%d.Value'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
name|'if'
name|'replace'
op|':'
newline|'\n'
indent|'                    '
name|'params'
op|'['
string|"'%s.%d.Replace'"
op|'%'
op|'('
name|'label'
op|','
name|'i'
op|')'
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|build_expected_value
dedent|''
dedent|''
name|'def'
name|'build_expected_value'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'expected_value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'['
string|"'Expected.1.Name'"
op|']'
op|'='
name|'expected_value'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'expected_value'
op|'['
number|'1'
op|']'
op|'=='
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Expected.1.Exists'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'elif'
name|'expected_value'
op|'['
number|'1'
op|']'
op|'=='
name|'False'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Expected.1.Exists'"
op|']'
op|'='
string|"'false'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Expected.1.Value'"
op|']'
op|'='
name|'expected_value'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|build_batch_list
dedent|''
dedent|''
name|'def'
name|'build_batch_list'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'items'
op|','
name|'replace'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'item_names'
op|'='
name|'items'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'item_name'
name|'in'
name|'item_names'
op|':'
newline|'\n'
indent|'            '
name|'j'
op|'='
number|'0'
newline|'\n'
name|'item'
op|'='
name|'items'
op|'['
name|'item_name'
op|']'
newline|'\n'
name|'attr_names'
op|'='
name|'item'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'params'
op|'['
string|"'Item.%d.ItemName'"
op|'%'
name|'i'
op|']'
op|'='
name|'item_name'
newline|'\n'
name|'for'
name|'attr_name'
name|'in'
name|'attr_names'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'item'
op|'['
name|'attr_name'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'v'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'self'
op|'.'
name|'converter'
op|':'
newline|'\n'
indent|'                            '
name|'v'
op|'='
name|'self'
op|'.'
name|'converter'
op|'.'
name|'encode'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Name'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
name|'attr_name'
newline|'\n'
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Value'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
name|'v'
newline|'\n'
name|'if'
name|'replace'
op|':'
newline|'\n'
indent|'                            '
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Replace'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'j'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Name'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
name|'attr_name'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'converter'
op|':'
newline|'\n'
indent|'                        '
name|'value'
op|'='
name|'self'
op|'.'
name|'converter'
op|'.'
name|'encode'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Value'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
name|'value'
newline|'\n'
name|'if'
name|'replace'
op|':'
newline|'\n'
indent|'                        '
name|'params'
op|'['
string|"'Item.%d.Attribute.%d.Replace'"
op|'%'
op|'('
name|'i'
op|','
name|'j'
op|')'
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'j'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|build_name_list
dedent|''
dedent|''
name|'def'
name|'build_name_list'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'attribute_names'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'attribute_names'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'attribute_names'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Attribute.%d.Name'"
op|'%'
name|'i'
op|']'
op|'='
name|'name'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_usage
dedent|''
dedent|''
name|'def'
name|'get_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns the BoxUsage accumulated on this SDBConnection object.\n\n        :rtype: float\n        :return: The accumulated BoxUsage of all requests made on the connection.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'box_usage'
newline|'\n'
nl|'\n'
DECL|member|print_usage
dedent|''
name|'def'
name|'print_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Print the BoxUsage and approximate costs of all requests made on this connection.\n        """'
newline|'\n'
name|'print'
string|"'Total Usage: %f compute seconds'"
op|'%'
name|'self'
op|'.'
name|'box_usage'
newline|'\n'
name|'cost'
op|'='
name|'self'
op|'.'
name|'box_usage'
op|'*'
number|'0.14'
newline|'\n'
name|'print'
string|"'Approximate Cost: $%f'"
op|'%'
name|'cost'
newline|'\n'
nl|'\n'
DECL|member|get_domain
dedent|''
name|'def'
name|'get_domain'
op|'('
name|'self'
op|','
name|'domain_name'
op|','
name|'validate'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domain'
op|'='
name|'Domain'
op|'('
name|'self'
op|','
name|'domain_name'
op|')'
newline|'\n'
name|'if'
name|'validate'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'select'
op|'('
name|'domain'
op|','
string|'"""select * from `%s` limit 1"""'
op|'%'
name|'domain_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|lookup
dedent|''
name|'def'
name|'lookup'
op|'('
name|'self'
op|','
name|'domain_name'
op|','
name|'validate'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Lookup an existing SimpleDB domain\n\n        :type domain_name: string\n        :param domain_name: The name of the new domain\n\n        :rtype: :class:`boto.sdb.domain.Domain` object or None\n        :return: The Domain object or None if the domain does not exist.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'self'
op|'.'
name|'get_domain'
op|'('
name|'domain_name'
op|','
name|'validate'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'domain'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'domain'
newline|'\n'
nl|'\n'
DECL|member|get_all_domains
dedent|''
name|'def'
name|'get_all_domains'
op|'('
name|'self'
op|','
name|'max_domains'
op|'='
name|'None'
op|','
name|'next_token'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'max_domains'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'MaxNumberOfDomains'"
op|']'
op|'='
name|'max_domains'
newline|'\n'
dedent|''
name|'if'
name|'next_token'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'NextToken'"
op|']'
op|'='
name|'next_token'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'ListDomains'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'DomainName'"
op|','
name|'Domain'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_domain
dedent|''
name|'def'
name|'create_domain'
op|'('
name|'self'
op|','
name|'domain_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a SimpleDB domain.\n\n        :type domain_name: string\n        :param domain_name: The name of the new domain\n\n        :rtype: :class:`boto.sdb.domain.Domain` object\n        :return: The newly created domain\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|'}'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateDomain'"
op|','
name|'params'
op|','
name|'Domain'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'name'
op|'='
name|'domain_name'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|get_domain_and_name
dedent|''
name|'def'
name|'get_domain_and_name'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'isinstance'
op|'('
name|'domain_or_name'
op|','
name|'Domain'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'domain_or_name'
op|','
name|'domain_or_name'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'get_domain'
op|'('
name|'domain_or_name'
op|')'
op|','
name|'domain_or_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_domain
dedent|''
dedent|''
name|'def'
name|'delete_domain'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a SimpleDB domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :rtype: bool\n        :return: True if successful\n        \n        B{Note:} This will delete the domain and all items within the domain.\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteDomain'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|domain_metadata
dedent|''
name|'def'
name|'domain_metadata'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get the Metadata for a SimpleDB domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :rtype: :class:`boto.sdb.domain.DomainMetaData` object\n        :return: The newly created domain metadata object\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|'}'
newline|'\n'
name|'d'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'DomainMetadata'"
op|','
name|'params'
op|','
name|'DomainMetaData'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'domain'
op|'='
name|'domain'
newline|'\n'
name|'return'
name|'d'
newline|'\n'
nl|'\n'
DECL|member|put_attributes
dedent|''
name|'def'
name|'put_attributes'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|','
name|'item_name'
op|','
name|'attributes'
op|','
nl|'\n'
name|'replace'
op|'='
name|'True'
op|','
name|'expected_value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store attributes for a given item in a domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being stored.\n\n        :type attribute_names: dict or dict-like object\n        :param attribute_names: The name/value pairs to store as attributes\n\n        :type expected_value: list\n        :param expected_value: If supplied, this is a list or tuple consisting\n                               of a single attribute name and expected value.\n                               The list can be of the form:\n                                * [\'name\', \'value\']\n                               In which case the call will first verify\n                               that the attribute "name" of this item has\n                               a value of "value".  If it does, the delete\n                               will proceed, otherwise a ConditionalCheckFailed\n                               error will be returned.\n                               The list can also be of the form:\n                                * [\'name\', True|False]\n                               which will simply check for the existence (True)\n                               or non-existencve (False) of the attribute.\n\n        :type replace: bool\n        :param replace: Whether the attribute values passed in will replace\n                        existing values or will be added as addition values.\n                        Defaults to True.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|','
nl|'\n'
string|"'ItemName'"
op|':'
name|'item_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'build_name_value_list'
op|'('
name|'params'
op|','
name|'attributes'
op|','
name|'replace'
op|')'
newline|'\n'
name|'if'
name|'expected_value'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_expected_value'
op|'('
name|'params'
op|','
name|'expected_value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'PutAttributes'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|batch_put_attributes
dedent|''
name|'def'
name|'batch_put_attributes'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|','
name|'items'
op|','
name|'replace'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store attributes for multiple items in a domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :type items: dict or dict-like object\n        :param items: A dictionary-like object.  The keys of the dictionary are\n                      the item names and the values are themselves dictionaries\n                      of attribute names/values, exactly the same as the\n                      attribute_names parameter of the scalar put_attributes\n                      call.\n\n        :type replace: bool\n        :param replace: Whether the attribute values passed in will replace\n                        existing values or will be added as addition values.\n                        Defaults to True.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'build_batch_list'
op|'('
name|'params'
op|','
name|'items'
op|','
name|'replace'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'BatchPutAttributes'"
op|','
name|'params'
op|','
name|'verb'
op|'='
string|"'POST'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_attributes
dedent|''
name|'def'
name|'get_attributes'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|','
name|'item_name'
op|','
name|'attribute_names'
op|'='
name|'None'
op|','
nl|'\n'
name|'consistent_read'
op|'='
name|'False'
op|','
name|'item'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve attributes for a given item in a domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being retrieved.\n\n        :type attribute_names: string or list of strings\n        :param attribute_names: An attribute name or list of attribute names.  This\n                                parameter is optional.  If not supplied, all attributes\n                                will be retrieved for the item.\n\n        :type consistent_read: bool\n        :param consistent_read: When set to true, ensures that the most recent\n                                data is returned.\n\n        :rtype: :class:`boto.sdb.item.Item`\n        :return: An Item mapping type containing the requested attribute name/values\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|','
nl|'\n'
string|"'ItemName'"
op|':'
name|'item_name'
op|'}'
newline|'\n'
name|'if'
name|'consistent_read'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ConsistentRead'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'if'
name|'attribute_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'attribute_names'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'attribute_names'
op|'='
op|'['
name|'attribute_names'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'attribute_names'
op|','
string|"'AttributeName'"
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'self'
op|'.'
name|'make_request'
op|'('
string|"'GetAttributes'"
op|','
name|'params'
op|')'
newline|'\n'
name|'body'
op|'='
name|'response'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'if'
name|'response'
op|'.'
name|'status'
op|'=='
number|'200'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'item'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'item'
op|'='
name|'self'
op|'.'
name|'item_cls'
op|'('
name|'domain'
op|','
name|'item_name'
op|')'
newline|'\n'
dedent|''
name|'h'
op|'='
name|'handler'
op|'.'
name|'XmlHandler'
op|'('
name|'item'
op|','
name|'self'
op|')'
newline|'\n'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'body'
op|','
name|'h'
op|')'
newline|'\n'
name|'return'
name|'item'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SDBResponseError'
op|'('
name|'response'
op|'.'
name|'status'
op|','
name|'response'
op|'.'
name|'reason'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_attributes
dedent|''
dedent|''
name|'def'
name|'delete_attributes'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|','
name|'item_name'
op|','
name|'attr_names'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete attributes from a given item in a domain.\n\n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :type item_name: string\n        :param item_name: The name of the item whose attributes are being deleted.\n\n        :type attributes: dict, list or :class:`boto.sdb.item.Item`\n        :param attributes: Either a list containing attribute names which will cause\n                           all values associated with that attribute name to be deleted or\n                           a dict or Item containing the attribute names and keys and list\n                           of values to delete as the value.  If no value is supplied,\n                           all attribute name/values for the item will be deleted.\n                           \n        :type expected_value: list\n        :param expected_value: If supplied, this is a list or tuple consisting\n                               of a single attribute name and expected value.\n                               The list can be of the form:\n                                * [\'name\', \'value\']\n                               In which case the call will first verify\n                               that the attribute "name" of this item has\n                               a value of "value".  If it does, the delete\n                               will proceed, otherwise a ConditionalCheckFailed\n                               error will be returned.\n                               The list can also be of the form:\n                                * [\'name\', True|False]\n                               which will simply check for the existence (True)\n                               or non-existencve (False) of the attribute.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DomainName'"
op|':'
name|'domain_name'
op|','
nl|'\n'
string|"'ItemName'"
op|':'
name|'item_name'
op|'}'
newline|'\n'
name|'if'
name|'attr_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'attr_names'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'build_name_list'
op|'('
name|'params'
op|','
name|'attr_names'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'attr_names'
op|','
name|'dict'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'attr_names'
op|','
name|'self'
op|'.'
name|'item_cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'build_name_value_list'
op|'('
name|'params'
op|','
name|'attr_names'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'expected_value'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_expected_value'
op|'('
name|'params'
op|','
name|'expected_value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteAttributes'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'domain_or_name'
op|','
name|'query'
op|'='
string|"''"
op|','
name|'next_token'
op|'='
name|'None'
op|','
nl|'\n'
name|'consistent_read'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a set of Attributes for item names within domain_name that match the query.\n        The query must be expressed in using the SELECT style syntax rather than the\n        original SimpleDB query language.\n        Even though the select request does not require a domain object, a domain\n        object must be passed into this method so the Item objects returned can\n        point to the appropriate domain.\n        \n        :type domain_or_name: string or :class:`boto.sdb.domain.Domain` object.\n        :param domain_or_name: Either the name of a domain or a Domain object\n\n        :type query: string\n        :param query: The SimpleDB query to be performed.\n\n        :type consistent_read: bool\n        :param consistent_read: When set to true, ensures that the most recent\n                                data is returned.\n\n        :rtype: ResultSet\n        :return: An iterator containing the results.\n        """'
newline|'\n'
name|'domain'
op|','
name|'domain_name'
op|'='
name|'self'
op|'.'
name|'get_domain_and_name'
op|'('
name|'domain_or_name'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'SelectExpression'"
op|':'
name|'query'
op|'}'
newline|'\n'
name|'if'
name|'consistent_read'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ConsistentRead'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'if'
name|'next_token'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'NextToken'"
op|']'
op|'='
name|'next_token'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'Select'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'Item'"
op|','
name|'self'
op|'.'
name|'item_cls'
op|')'
op|']'
op|','
nl|'\n'
name|'parent'
op|'='
name|'domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'import'
name|'xml'
op|'.'
name|'sax'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'from'
name|'boto'
name|'import'
name|'handler'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'mturk'
op|'.'
name|'price'
name|'import'
name|'Price'
newline|'\n'
name|'import'
name|'boto'
op|'.'
name|'mturk'
op|'.'
name|'notification'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'connection'
name|'import'
name|'AWSQueryConnection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'EC2ResponseError'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'resultset'
name|'import'
name|'ResultSet'
newline|'\n'
nl|'\n'
DECL|class|MTurkConnection
name|'class'
name|'MTurkConnection'
op|'('
name|'AWSQueryConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|APIVersion
indent|'    '
name|'APIVersion'
op|'='
string|"'2008-08-02'"
newline|'\n'
DECL|variable|SignatureVersion
name|'SignatureVersion'
op|'='
string|"'1'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|'='
name|'None'
op|','
name|'aws_secret_access_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'False'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'proxy'
op|'='
name|'None'
op|','
name|'proxy_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'proxy_user'
op|'='
name|'None'
op|','
name|'proxy_pass'
op|'='
name|'None'
op|','
name|'host'
op|'='
string|"'mechanicalturk.amazonaws.com'"
op|','
name|'debug'
op|'='
number|'0'
op|','
nl|'\n'
name|'https_connection_factory'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'AWSQueryConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|','
name|'aws_secret_access_key'
op|','
nl|'\n'
name|'is_secure'
op|','
name|'port'
op|','
name|'proxy'
op|','
name|'proxy_port'
op|','
name|'proxy_user'
op|','
name|'proxy_pass'
op|','
nl|'\n'
name|'host'
op|','
name|'debug'
op|','
name|'https_connection_factory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_account_balance
dedent|''
name|'def'
name|'get_account_balance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'GetAccountBalance'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'AvailableBalance'"
op|','
name|'Price'
op|')'
op|','
nl|'\n'
op|'('
string|"'OnHoldBalance'"
op|','
name|'Price'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register_hit_type
dedent|''
name|'def'
name|'register_hit_type'
op|'('
name|'self'
op|','
name|'title'
op|','
name|'description'
op|','
name|'reward'
op|','
name|'duration'
op|','
nl|'\n'
name|'keywords'
op|'='
name|'None'
op|','
name|'approval_delay'
op|'='
name|'None'
op|','
name|'qual_req'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register a new HIT Type\n        \\ttitle, description are strings\n        \\treward is a Price object\n        \\tduration can be an integer or string\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Title'"
op|':'
name|'title'
op|','
nl|'\n'
string|"'Description'"
op|':'
name|'description'
op|','
nl|'\n'
string|"'AssignmentDurationInSeconds'"
op|':'
name|'duration'
op|'}'
newline|'\n'
name|'params'
op|'.'
name|'update'
op|'('
name|'MTurkConnection'
op|'.'
name|'get_price_as_price'
op|'('
name|'reward'
op|')'
op|'.'
name|'get_as_params'
op|'('
string|"'Reward'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'keywords'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Keywords'"
op|']'
op|'='
name|'keywords'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'approval_delay'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AutoApprovalDelayInSeconds'"
op|']'
op|'='
name|'approval_delay'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'RegisterHITType'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_email_notification
dedent|''
name|'def'
name|'set_email_notification'
op|'('
name|'self'
op|','
name|'hit_type'
op|','
name|'email'
op|','
name|'event_types'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Performs a SetHITTypeNotification operation to set email notification for a specified HIT type\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set_notification'
op|'('
name|'hit_type'
op|','
string|"'Email'"
op|','
name|'email'
op|','
name|'event_types'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_rest_notification
dedent|''
name|'def'
name|'set_rest_notification'
op|'('
name|'self'
op|','
name|'hit_type'
op|','
name|'url'
op|','
name|'event_types'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Performs a SetHITTypeNotification operation to set REST notification for a specified HIT type\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_set_notification'
op|'('
name|'hit_type'
op|','
string|"'REST'"
op|','
name|'url'
op|','
name|'event_types'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_notification
dedent|''
name|'def'
name|'_set_notification'
op|'('
name|'self'
op|','
name|'hit_type'
op|','
name|'transport'
op|','
name|'destination'
op|','
name|'event_types'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Common SetHITTypeNotification operation to set notification for a specified HIT type\n        """'
newline|'\n'
name|'assert'
name|'type'
op|'('
name|'hit_type'
op|')'
name|'is'
name|'str'
op|','
string|'"hit_type argument should be a string."'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'HITTypeId'"
op|':'
name|'hit_type'
op|'}'
newline|'\n'
nl|'\n'
comment|'# from the Developer Guide:'
nl|'\n'
comment|"# The 'Active' parameter is optional. If omitted, the active status of the HIT type's"
nl|'\n'
comment|'# notification specification is unchanged. All HIT types begin with their'
nl|'\n'
comment|'# notification specifications in the "inactive" status.'
nl|'\n'
name|'notification_params'
op|'='
op|'{'
string|"'Destination'"
op|':'
name|'destination'
op|','
nl|'\n'
string|"'Transport'"
op|':'
name|'transport'
op|','
nl|'\n'
string|"'Version'"
op|':'
name|'boto'
op|'.'
name|'mturk'
op|'.'
name|'notification'
op|'.'
name|'NotificationMessage'
op|'.'
name|'NOTIFICATION_VERSION'
op|','
nl|'\n'
string|"'Active'"
op|':'
name|'True'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# add specific event types if required'
nl|'\n'
name|'if'
name|'event_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'notification_params'
op|','
name|'event_types'
op|','
string|"'EventType'"
op|')'
newline|'\n'
nl|'\n'
comment|"# Set up dict of 'Notification.1.Transport' etc. values"
nl|'\n'
dedent|''
name|'notification_rest_params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'num'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'notification_params'
op|':'
newline|'\n'
indent|'            '
name|'notification_rest_params'
op|'['
string|"'Notification.%d.%s'"
op|'%'
op|'('
name|'num'
op|','
name|'key'
op|')'
op|']'
op|'='
name|'notification_params'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
comment|'# Update main params dict'
nl|'\n'
dedent|''
name|'params'
op|'.'
name|'update'
op|'('
name|'notification_rest_params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Execute operation'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'SetHITTypeNotification'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_hit
dedent|''
name|'def'
name|'create_hit'
op|'('
name|'self'
op|','
name|'hit_type'
op|'='
name|'None'
op|','
name|'question'
op|'='
name|'None'
op|','
name|'lifetime'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'7'
op|','
name|'max_assignments'
op|'='
number|'1'
op|','
nl|'\n'
name|'title'
op|'='
name|'None'
op|','
name|'description'
op|'='
name|'None'
op|','
name|'keywords'
op|'='
name|'None'
op|','
name|'reward'
op|'='
name|'None'
op|','
nl|'\n'
name|'duration'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
op|'*'
number|'7'
op|','
name|'approval_delay'
op|'='
name|'None'
op|','
name|'annotation'
op|'='
name|'None'
op|','
name|'qual_req'
op|'='
name|'None'
op|','
nl|'\n'
name|'questions'
op|'='
name|'None'
op|','
name|'qualifications'
op|'='
name|'None'
op|','
name|'response_groups'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a new HIT.\n        Returns a ResultSet\n        See: http://docs.amazonwebservices.com/AWSMechanicalTurkRequester/2006-10-31/ApiReference_CreateHITOperation.html\n        """'
newline|'\n'
nl|'\n'
comment|'# handle single or multiple questions'
nl|'\n'
name|'if'
name|'question'
name|'is'
name|'not'
name|'None'
name|'and'
name|'questions'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Must specify either question (single Question instance) or questions (list), but not both"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'question'
name|'is'
name|'not'
name|'None'
name|'and'
name|'questions'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'questions'
op|'='
op|'['
name|'question'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Handle basic required arguments and set up params dict'
nl|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'Question'"
op|':'
name|'question'
op|'.'
name|'get_as_xml'
op|'('
op|')'
op|','
nl|'\n'
string|"'LifetimeInSeconds'"
op|':'
name|'lifetime'
op|','
nl|'\n'
string|"'MaxAssignments'"
op|':'
name|'max_assignments'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# if hit type specified then add it'
nl|'\n'
comment|'# else add the additional required parameters'
nl|'\n'
name|'if'
name|'hit_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'HITTypeId'"
op|']'
op|'='
name|'hit_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Handle keywords'
nl|'\n'
indent|'            '
name|'final_keywords'
op|'='
name|'MTurkConnection'
op|'.'
name|'get_keywords_as_string'
op|'('
name|'keywords'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle price argument'
nl|'\n'
name|'final_price'
op|'='
name|'MTurkConnection'
op|'.'
name|'get_price_as_price'
op|'('
name|'reward'
op|')'
newline|'\n'
nl|'\n'
name|'additional_params'
op|'='
op|'{'
string|"'Title'"
op|':'
name|'title'
op|','
nl|'\n'
string|"'Description'"
op|':'
name|'description'
op|','
nl|'\n'
string|"'Keywords'"
op|':'
name|'final_keywords'
op|','
nl|'\n'
string|"'AssignmentDurationInSeconds'"
op|':'
name|'duration'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'additional_params'
op|'.'
name|'update'
op|'('
name|'final_price'
op|'.'
name|'get_as_params'
op|'('
string|"'Reward'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'approval_delay'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'additional_params'
op|'['
string|"'AutoApprovalDelayInSeconds'"
op|']'
op|'='
name|'approval_delay'
newline|'\n'
nl|'\n'
comment|'# add these params to the others'
nl|'\n'
dedent|''
name|'params'
op|'.'
name|'update'
op|'('
name|'additional_params'
op|')'
newline|'\n'
nl|'\n'
comment|'# add the annotation if specified'
nl|'\n'
dedent|''
name|'if'
name|'annotation'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RequesterAnnotation'"
op|']'
op|'='
name|'annotation'
newline|'\n'
nl|'\n'
comment|'# Add the Qualifications if specified'
nl|'\n'
dedent|''
name|'if'
name|'qualifications'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'.'
name|'update'
op|'('
name|'qualifications'
op|'.'
name|'get_as_params'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle optional response groups argument'
nl|'\n'
dedent|''
name|'if'
name|'response_groups'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'response_groups'
op|','
string|"'ResponseGroup'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Submit'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'CreateHIT'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'HIT'"
op|','
name|'HIT'
op|')'
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_reviewable_hits
dedent|''
name|'def'
name|'get_reviewable_hits'
op|'('
name|'self'
op|','
name|'hit_type'
op|'='
name|'None'
op|','
name|'status'
op|'='
string|"'Reviewable'"
op|','
nl|'\n'
name|'sort_by'
op|'='
string|"'Expiration'"
op|','
name|'sort_direction'
op|'='
string|"'Ascending'"
op|','
nl|'\n'
name|'page_size'
op|'='
number|'10'
op|','
name|'page_number'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the HITs that have a status of Reviewable, or HITs that\n        have a status of Reviewing, and that belong to the Requester calling the operation.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Status'"
op|':'
name|'status'
op|','
nl|'\n'
string|"'SortProperty'"
op|':'
name|'sort_by'
op|','
nl|'\n'
string|"'SortDirection'"
op|':'
name|'sort_direction'
op|','
nl|'\n'
string|"'PageSize'"
op|':'
name|'page_size'
op|','
nl|'\n'
string|"'PageNumber'"
op|':'
name|'page_number'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Handle optional hit_type argument'
nl|'\n'
name|'if'
name|'hit_type'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'.'
name|'update'
op|'('
op|'{'
string|"'HITTypeId'"
op|':'
name|'hit_type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'GetReviewableHITs'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'HIT'"
op|','
name|'HIT'
op|')'
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|search_hits
dedent|''
name|'def'
name|'search_hits'
op|'('
name|'self'
op|','
name|'sort_by'
op|'='
string|"'CreationTime'"
op|','
name|'sort_direction'
op|'='
string|"'Ascending'"
op|','
nl|'\n'
name|'page_size'
op|'='
number|'10'
op|','
name|'page_number'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return all of a Requester\'s HITs, on behalf of the Requester.\n        The operation returns HITs of any status, except for HITs that have been disposed \n        with the DisposeHIT operation.\n        Note:\n        The SearchHITs operation does not accept any search parameters that filter the results.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'SortProperty'"
op|':'
name|'sort_by'
op|','
nl|'\n'
string|"'SortDirection'"
op|':'
name|'sort_direction'
op|','
nl|'\n'
string|"'PageSize'"
op|':'
name|'page_size'
op|','
nl|'\n'
string|"'PageNumber'"
op|':'
name|'page_number'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'SearchHITs'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'HIT'"
op|','
name|'HIT'
op|')'
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_assignments
dedent|''
name|'def'
name|'get_assignments'
op|'('
name|'self'
op|','
name|'hit_id'
op|','
name|'status'
op|'='
name|'None'
op|','
nl|'\n'
name|'sort_by'
op|'='
string|"'SubmitTime'"
op|','
name|'sort_direction'
op|'='
string|"'Ascending'"
op|','
nl|'\n'
name|'page_size'
op|'='
number|'10'
op|','
name|'page_number'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves completed assignments for a HIT. \n        Use this operation to retrieve the results for a HIT.\n\n        The returned ResultSet will have the following attributes:\n\n        NumResults\n                The number of assignments on the page in the filtered results list, \n                equivalent to the number of assignments being returned by this call.\n                A non-negative integer\n        PageNumber\n                The number of the page in the filtered results list being returned.\n                A positive integer\n        TotalNumResults\n                The total number of HITs in the filtered results list based on this call.\n                A non-negative integer\n\n        The ResultSet will contain zero or more Assignment objects \n\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
nl|'\n'
string|"'SortProperty'"
op|':'
name|'sort_by'
op|','
nl|'\n'
string|"'SortDirection'"
op|':'
name|'sort_direction'
op|','
nl|'\n'
string|"'PageSize'"
op|':'
name|'page_size'
op|','
nl|'\n'
string|"'PageNumber'"
op|':'
name|'page_number'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'status'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AssignmentStatus'"
op|']'
op|'='
name|'status'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'GetAssignmentsForHIT'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'Assignment'"
op|','
name|'Assignment'
op|')'
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|approve_assignment
dedent|''
name|'def'
name|'approve_assignment'
op|'('
name|'self'
op|','
name|'assignment_id'
op|','
name|'feedback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'AssignmentId'"
op|':'
name|'assignment_id'
op|','
op|'}'
newline|'\n'
name|'if'
name|'feedback'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RequesterFeedback'"
op|']'
op|'='
name|'feedback'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'ApproveAssignment'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reject_assignment
dedent|''
name|'def'
name|'reject_assignment'
op|'('
name|'self'
op|','
name|'assignment_id'
op|','
name|'feedback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'AssignmentId'"
op|':'
name|'assignment_id'
op|','
op|'}'
newline|'\n'
name|'if'
name|'feedback'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RequesterFeedback'"
op|']'
op|'='
name|'feedback'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'RejectAssignment'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_hit
dedent|''
name|'def'
name|'get_hit'
op|'('
name|'self'
op|','
name|'hit_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'GetHIT'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'HIT'"
op|','
name|'HIT'
op|')'
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_reviewing
dedent|''
name|'def'
name|'set_reviewing'
op|'('
name|'self'
op|','
name|'hit_id'
op|','
name|'revert'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Update a HIT with a status of Reviewable to have a status of Reviewing, \n        or reverts a Reviewing HIT back to the Reviewable status.\n\n        Only HITs with a status of Reviewable can be updated with a status of Reviewing. \n        Similarly, only Reviewing HITs can be reverted back to a status of Reviewable.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'if'
name|'revert'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Revert'"
op|']'
op|'='
name|'revert'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'SetHITAsReviewing'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disable_hit
dedent|''
name|'def'
name|'disable_hit'
op|'('
name|'self'
op|','
name|'hit_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a HIT from the Mechanical Turk marketplace, approves all submitted assignments \n        that have not already been approved or rejected, and disposes of the HIT and all\n        assignment data.\n\n        Assignments for the HIT that have already been submitted, but not yet approved or rejected, will be\n        automatically approved. Assignments in progress at the time of the call to DisableHIT will be\n        approved once the assignments are submitted. You will be charged for approval of these assignments.\n        DisableHIT completely disposes of the HIT and all submitted assignment data. Assignment results\n        data cannot be retrieved for a HIT that has been disposed.\n\n        It is not possible to re-enable a HIT once it has been disabled. To make the work from a disabled HIT\n        available again, create a new HIT.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'DisableHIT'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|dispose_hit
dedent|''
name|'def'
name|'dispose_hit'
op|'('
name|'self'
op|','
name|'hit_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Dispose of a HIT that is no longer needed.\n\n        Only HITs in the "reviewable" state, with all submitted assignments approved or rejected, \n        can be disposed. A Requester can call GetReviewableHITs to determine which HITs are \n        reviewable, then call GetAssignmentsForHIT to retrieve the assignments. \n        Disposing of a HIT removes the HIT from the results of a call to GetReviewableHITs.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'DisposeHIT'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expire_hit
dedent|''
name|'def'
name|'expire_hit'
op|'('
name|'self'
op|','
name|'hit_id'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
string|'"""\n        Expire a HIT that is no longer needed.\n\n    The effect is identical to the HIT expiring on its own. The HIT no longer appears on the \n    Mechanical Turk web site, and no new Workers are allowed to accept the HIT. Workers who \n    have accepted the HIT prior to expiration are allowed to complete it or return it, or \n    allow the assignment duration to elapse (abandon the HIT). Once all remaining assignments \n    have been submitted, the expired HIT becomes "reviewable", and will be returned by a call \n    to GetReviewableHITs.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'ForceExpireHIT'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|extend_hit
dedent|''
name|'def'
name|'extend_hit'
op|'('
name|'self'
op|','
name|'hit_id'
op|','
name|'assignments_increment'
op|'='
name|'None'
op|','
name|'expiration_increment'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Increase the maximum number of assignments, or extend the expiration date, of an existing HIT.\n        \n        NOTE: If a HIT has a status of Reviewable and the HIT is extended to make it Available, the\n        HIT will not be returned by GetReviewableHITs, and its submitted assignments will not\n        be returned by GetAssignmentsForHIT, until the HIT is Reviewable again.\n        Assignment auto-approval will still happen on its original schedule, even if the HIT has\n        been extended. Be sure to retrieve and approve (or reject) submitted assignments before\n        extending the HIT, if so desired.\n        """'
newline|'\n'
comment|'# must provide assignment *or* expiration increment'
nl|'\n'
name|'if'
op|'('
name|'assignments_increment'
name|'is'
name|'None'
name|'and'
name|'expiration_increment'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'assignments_increment'
name|'is'
name|'not'
name|'None'
name|'and'
name|'expiration_increment'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Must specify either assignments_increment or expiration_increment, but not both"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'HITId'"
op|':'
name|'hit_id'
op|','
op|'}'
newline|'\n'
name|'if'
name|'assignments_increment'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'MaxAssignmentsIncrement'"
op|']'
op|'='
name|'assignments_increment'
newline|'\n'
dedent|''
name|'if'
name|'expiration_increment'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ExpirationIncrementInSeconds'"
op|']'
op|'='
name|'expiration_increment'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'ExtendHIT'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_help
dedent|''
name|'def'
name|'get_help'
op|'('
name|'self'
op|','
name|'about'
op|','
name|'help_type'
op|'='
string|"'Operation'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return information about the Mechanical Turk Service operations and response group\n        NOTE - this is basically useless as it just returns the URL of the documentation\n\n        help_type: either \'Operation\' or \'ResponseGroup\'\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'About'"
op|':'
name|'about'
op|','
string|"'HelpType'"
op|':'
name|'help_type'
op|','
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'Help'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|grant_bonus
dedent|''
name|'def'
name|'grant_bonus'
op|'('
name|'self'
op|','
name|'worker_id'
op|','
name|'assignment_id'
op|','
name|'bonus_price'
op|','
name|'reason'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Issues a payment of money from your account to a Worker.\n        To be eligible for a bonus, the Worker must have submitted results for one of your\n        HITs, and have had those results approved or rejected. This payment happens separately\n        from the reward you pay to the Worker when you approve the Worker\'s assignment.\n        The Bonus must be passed in as an instance of the Price object.\n        """'
newline|'\n'
name|'params'
op|'='
name|'bonus_price'
op|'.'
name|'get_as_params'
op|'('
string|"'BonusAmount'"
op|','
number|'1'
op|')'
newline|'\n'
name|'params'
op|'['
string|"'WorkerId'"
op|']'
op|'='
name|'worker_id'
newline|'\n'
name|'params'
op|'['
string|"'AssignmentId'"
op|']'
op|'='
name|'assignment_id'
newline|'\n'
name|'params'
op|'['
string|"'Reason'"
op|']'
op|'='
name|'reason'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_request'
op|'('
string|"'GrantBonus'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_request
dedent|''
name|'def'
name|'_process_request'
op|'('
name|'self'
op|','
name|'request_type'
op|','
name|'params'
op|','
name|'marker_elems'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper to process the xml response from AWS\n        """'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'make_request'
op|'('
name|'request_type'
op|','
name|'params'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_process_response'
op|'('
name|'response'
op|','
name|'marker_elems'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_response
dedent|''
name|'def'
name|'_process_response'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'marker_elems'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Helper to process the xml response from AWS\n        """'
newline|'\n'
name|'body'
op|'='
name|'response'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
comment|'#print body'
nl|'\n'
name|'if'
string|"'<Errors>'"
name|'not'
name|'in'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'rs'
op|'='
name|'ResultSet'
op|'('
name|'marker_elems'
op|')'
newline|'\n'
name|'h'
op|'='
name|'handler'
op|'.'
name|'XmlHandler'
op|'('
name|'rs'
op|','
name|'self'
op|')'
newline|'\n'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'body'
op|','
name|'h'
op|')'
newline|'\n'
name|'return'
name|'rs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'EC2ResponseError'
op|'('
name|'response'
op|'.'
name|'status'
op|','
name|'response'
op|'.'
name|'reason'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_keywords_as_string
name|'def'
name|'get_keywords_as_string'
op|'('
name|'keywords'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a comma+space-separated string of keywords from either a list or a string\n        """'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'keywords'
op|')'
name|'is'
name|'list'
op|':'
newline|'\n'
indent|'            '
name|'final_keywords'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'keywords'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'keywords'
op|')'
name|'is'
name|'str'
op|':'
newline|'\n'
indent|'            '
name|'final_keywords'
op|'='
name|'keywords'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'keywords'
op|')'
name|'is'
name|'unicode'
op|':'
newline|'\n'
indent|'            '
name|'final_keywords'
op|'='
name|'keywords'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'keywords'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'final_keywords'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"keywords argument must be a string or a list of strings; got a %s"'
op|'%'
name|'type'
op|'('
name|'keywords'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'final_keywords'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_price_as_price
name|'def'
name|'get_price_as_price'
op|'('
name|'reward'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a Price data structure from either a float or a Price\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'reward'
op|','
name|'Price'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'final_price'
op|'='
name|'reward'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'final_price'
op|'='
name|'Price'
op|'('
name|'reward'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'final_price'
newline|'\n'
nl|'\n'
DECL|class|BaseAutoResultElement
dedent|''
dedent|''
name|'class'
name|'BaseAutoResultElement'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class to automatically add attributes when parsing XML\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|class|HIT
dedent|''
dedent|''
name|'class'
name|'HIT'
op|'('
name|'BaseAutoResultElement'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Class to extract a HIT structure from a response (used in ResultSet)\n    \n    Will have attributes named as per the Developer Guide, \n    e.g. HITId, HITTypeId, CreationTime\n    """'
newline|'\n'
nl|'\n'
comment|'# property helper to determine if HIT has expired'
nl|'\n'
DECL|member|_has_expired
name|'def'
name|'_has_expired'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Has this HIT expired yet? """'
newline|'\n'
name|'expired'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'Expiration'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'expiration'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'strptime'
op|'('
name|'self'
op|'.'
name|'Expiration'
op|','
string|"'%Y-%m-%dT%H:%M:%SZ'"
op|')'
newline|'\n'
name|'expired'
op|'='
op|'('
name|'now'
op|'>='
name|'expiration'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"ERROR: Request for expired property, but no Expiration in HIT!"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'expired'
newline|'\n'
nl|'\n'
comment|'# are we there yet?'
nl|'\n'
DECL|variable|expired
dedent|''
name|'expired'
op|'='
name|'property'
op|'('
name|'_has_expired'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Assignment
dedent|''
name|'class'
name|'Assignment'
op|'('
name|'BaseAutoResultElement'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Class to extract an Assignment structure from a response (used in ResultSet)\n    \n    Will have attributes named as per the Developer Guide, \n    e.g. AssignmentId, WorkerId, HITId, Answer, etc\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BaseAutoResultElement'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'answers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
comment|'# the answer consists of embedded XML, so it needs to be parsed independantly'
nl|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'Answer'"
op|':'
newline|'\n'
indent|'            '
name|'answer_rs'
op|'='
name|'ResultSet'
op|'('
op|'['
op|'('
string|"'Answer'"
op|','
name|'QuestionFormAnswer'
op|')'
op|','
op|']'
op|')'
newline|'\n'
name|'h'
op|'='
name|'handler'
op|'.'
name|'XmlHandler'
op|'('
name|'answer_rs'
op|','
name|'connection'
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_utf8_value'
op|'('
name|'value'
op|')'
newline|'\n'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'parseString'
op|'('
name|'value'
op|','
name|'h'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'answers'
op|'.'
name|'append'
op|'('
name|'answer_rs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'BaseAutoResultElement'
op|'.'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
newline|'\n'
nl|'\n'
DECL|class|QuestionFormAnswer
dedent|''
dedent|''
dedent|''
name|'class'
name|'QuestionFormAnswer'
op|'('
name|'BaseAutoResultElement'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Class to extract Answers from inside the embedded XML QuestionFormAnswers element inside the\n    Answer element which is part of the Assignment structure\n\n    A QuestionFormAnswers element contains an Answer element for each question in the HIT or\n    Qualification test for which the Worker provided an answer. Each Answer contains a\n    QuestionIdentifier element whose value corresponds to the QuestionIdentifier of a\n    Question in the QuestionForm. See the QuestionForm data structure for more information about\n    questions and answer specifications.\n\n    If the question expects a free-text answer, the Answer element contains a FreeText element. This\n    element contains the Worker\'s answer\n\n    *NOTE* - currently really only supports free-text answers\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'BaseAutoResultElement'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fields'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'qid'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'QuestionIdentifier'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'qid'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'FreeText'"
name|'and'
name|'self'
op|'.'
name|'qid'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fields'
op|'.'
name|'append'
op|'('
op|'('
name|'self'
op|'.'
name|'qid'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'Answer'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'qid'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'import'
name|'mimetypes'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'rfc822'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'boto'
op|'.'
name|'utils'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'S3ResponseError'
op|','
name|'S3DataError'
op|','
name|'BotoClientError'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'user'
name|'import'
name|'User'
newline|'\n'
name|'from'
name|'boto'
name|'import'
name|'UserAgent'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'md5'
name|'import'
name|'md5'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Key
dedent|''
name|'class'
name|'Key'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|DefaultContentType
indent|'    '
name|'DefaultContentType'
op|'='
string|"'application/octet-stream'"
newline|'\n'
nl|'\n'
DECL|variable|BufferSize
name|'BufferSize'
op|'='
number|'8192'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'bucket'
op|'='
name|'None'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bucket'
op|'='
name|'bucket'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'content_type'
op|'='
name|'self'
op|'.'
name|'DefaultContentType'
newline|'\n'
name|'self'
op|'.'
name|'content_encoding'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'filename'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'etag'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'last_modified'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'owner'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'storage_class'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'md5'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'base64md5'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'size'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'version_id'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'source_version_id'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'delete_marker'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'bucket'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<Key: %s,%s>'"
op|'%'
op|'('
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'<Key: None,%s>'"
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'key'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
newline|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'key'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'name'"
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__dict__'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|handle_version_headers
dedent|''
name|'def'
name|'handle_version_headers'
op|'('
name|'self'
op|','
name|'resp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'version_id'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-amz-version-id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source_version_id'
op|'='
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-amz-copy-source-version-id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'resp'
op|'.'
name|'getheader'
op|'('
string|"'x-amz-delete-marker'"
op|','
string|"'false'"
op|')'
op|'=='
string|"'true'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'delete_marker'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'delete_marker'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|open_read
dedent|''
dedent|''
name|'def'
name|'open_read'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'query_args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open this key for reading\n        \n        :type headers: dict\n        :param headers: Headers to pass in the web request\n        \n        :type query_args: string\n        :param query_args: Arguments to pass in the query string (ie, \'torrent\')\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resp'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
string|"'r'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'make_request'
op|'('
string|"'GET'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|','
nl|'\n'
name|'query_args'
op|'='
name|'query_args'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resp'
op|'.'
name|'status'
op|'<'
number|'199'
name|'or'
name|'self'
op|'.'
name|'resp'
op|'.'
name|'status'
op|'>'
number|'299'
op|':'
newline|'\n'
indent|'                '
name|'body'
op|'='
name|'self'
op|'.'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'S3ResponseError'
op|'('
name|'self'
op|'.'
name|'resp'
op|'.'
name|'status'
op|','
name|'self'
op|'.'
name|'resp'
op|'.'
name|'reason'
op|','
name|'body'
op|')'
newline|'\n'
dedent|''
name|'response_headers'
op|'='
name|'self'
op|'.'
name|'resp'
op|'.'
name|'msg'
newline|'\n'
name|'self'
op|'.'
name|'metadata'
op|'='
name|'boto'
op|'.'
name|'utils'
op|'.'
name|'get_aws_metadata'
op|'('
name|'response_headers'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'response_headers'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'content-length'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'size'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'etag'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'etag'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'content-type'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'content_type'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'content-encoding'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'content_encoding'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'last-modified'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'last_modified'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'handle_version_headers'
op|'('
name|'self'
op|'.'
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|open_write
dedent|''
dedent|''
name|'def'
name|'open_write'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Open this key for writing. \n        Not yet implemented\n        \n        :type headers: dict\n        :param headers: Headers to pass in the write request\n        """'
newline|'\n'
name|'raise'
name|'BotoClientError'
op|'('
string|"'Not Implemented'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|open
dedent|''
name|'def'
name|'open'
op|'('
name|'self'
op|','
name|'mode'
op|'='
string|"'r'"
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'query_args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'mode'
op|'=='
string|"'r'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
string|"'r'"
newline|'\n'
name|'self'
op|'.'
name|'open_read'
op|'('
name|'headers'
op|'='
name|'headers'
op|','
name|'query_args'
op|'='
name|'query_args'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'mode'
op|'=='
string|"'w'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mode'
op|'='
string|"'w'"
newline|'\n'
name|'self'
op|'.'
name|'open_write'
op|'('
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BotoClientError'
op|'('
string|"'Invalid mode: %s'"
op|'%'
name|'mode'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|closed
dedent|''
dedent|''
name|'closed'
op|'='
name|'False'
newline|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'resp'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'resp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'resp'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mode'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'closed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|next
dedent|''
name|'def'
name|'next'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        By providing a next method, the key object supports use as an iterator.\n        For example, you can now say:\n\n        for bytes in key:\n            write bytes to a file or whatever\n\n        All of the HTTP connection stuff is handled for you.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'open_read'
op|'('
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'resp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'BufferSize'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|read
dedent|''
name|'def'
name|'read'
op|'('
name|'self'
op|','
name|'size'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'size'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'self'
op|'.'
name|'BufferSize'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'open_read'
op|'('
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'resp'
op|'.'
name|'read'
op|'('
name|'size'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|copy
dedent|''
name|'def'
name|'copy'
op|'('
name|'self'
op|','
name|'dst_bucket'
op|','
name|'dst_key'
op|','
name|'metadata'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Copy this Key to another bucket.\n\n        :type dst_bucket: string\n        :param dst_bucket: The name of the destination bucket\n\n        :type dst_key: string\n        :param dst_key: The name of the destinatino key\n        \n        :type metadata: dict\n        :param metadata: Metadata to be associated with new key.\n                         If metadata is supplied, it will replace the\n                         metadata of the source key being copied.\n                         If no metadata is supplied, the source key\'s\n                         metadata will be copied to the new key.\n\n        :rtype: :class:`boto.s3.key.Key` or subclass\n        :returns: An instance of the newly created key object\n        """'
newline|'\n'
name|'dst_bucket'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'lookup'
op|'('
name|'dst_bucket'
op|')'
newline|'\n'
name|'return'
name|'dst_bucket'
op|'.'
name|'copy_key'
op|'('
name|'dst_key'
op|','
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'Owner'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'owner'
op|'='
name|'User'
op|'('
name|'self'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'owner'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'Key'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'name'
op|'='
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'ETag'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'etag'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'LastModified'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'last_modified'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'Size'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'size'
op|'='
name|'int'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'StorageClass'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'storage_class'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'Owner'"
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'VersionId'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'version_id'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exists
dedent|''
dedent|''
name|'def'
name|'exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns True if the key exists\n        \n        :rtype: bool\n        :return: Whether the key exists on S3\n        """'
newline|'\n'
name|'return'
name|'bool'
op|'('
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete this key from S3\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'delete_key'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metadata
dedent|''
name|'def'
name|'get_metadata'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'metadata'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_metadata
dedent|''
name|'def'
name|'set_metadata'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'metadata'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|update_metadata
dedent|''
name|'def'
name|'update_metadata'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'metadata'
op|'.'
name|'update'
op|'('
name|'d'
op|')'
newline|'\n'
nl|'\n'
comment|'# convenience methods for setting/getting ACL'
nl|'\n'
DECL|member|set_acl
dedent|''
name|'def'
name|'set_acl'
op|'('
name|'self'
op|','
name|'acl_str'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'set_acl'
op|'('
name|'acl_str'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_acl
dedent|''
dedent|''
name|'def'
name|'get_acl'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'get_acl'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_xml_acl
dedent|''
dedent|''
name|'def'
name|'get_xml_acl'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'get_xml_acl'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_xml_acl
dedent|''
dedent|''
name|'def'
name|'set_xml_acl'
op|'('
name|'self'
op|','
name|'acl_str'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'set_xml_acl'
op|'('
name|'acl_str'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|'='
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_canned_acl
dedent|''
dedent|''
name|'def'
name|'set_canned_acl'
op|'('
name|'self'
op|','
name|'acl_str'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'set_canned_acl'
op|'('
name|'acl_str'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|make_public
dedent|''
name|'def'
name|'make_public'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'set_canned_acl'
op|'('
string|"'public-read'"
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate_url
dedent|''
name|'def'
name|'generate_url'
op|'('
name|'self'
op|','
name|'expires_in'
op|','
name|'method'
op|'='
string|"'GET'"
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'query_auth'
op|'='
name|'True'
op|','
name|'force_http'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Generate a URL to access this key.\n        \n        :type expires_in: int\n        :param expires_in: How long the url is valid for, in seconds\n        \n        :type method: string\n        :param method: The method to use for retrieving the file (default is GET)\n        \n        :type headers: dict\n        :param headers: Any headers to pass along in the request\n        \n        :type query_auth: bool\n        :param query_auth: \n        \n        :rtype: string\n        :return: The URL to access the key\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'generate_url'
op|'('
name|'expires_in'
op|','
name|'method'
op|','
nl|'\n'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'name'
op|','
nl|'\n'
name|'headers'
op|','
name|'query_auth'
op|','
name|'force_http'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send_file
dedent|''
name|'def'
name|'send_file'
op|'('
name|'self'
op|','
name|'fp'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Upload a file to a key into a bucket on S3.\n        \n        :type fp: file\n        :param fp: The file pointer to upload\n        \n        :type headers: dict\n        :param headers: The headers to pass along with the PUT request\n        \n        :type cb: function\n        :param cb: a callback function that will be called to report\n                    progress on the upload.  The callback should accept two integer\n                    parameters, the first representing the number of bytes that have\n                    been successfully transmitted to S3 and the second representing\n                    the total number of bytes that need to be transmitted.\n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        """'
newline|'\n'
DECL|function|sender
name|'def'
name|'sender'
op|'('
name|'http_conn'
op|','
name|'method'
op|','
name|'path'
op|','
name|'data'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'http_conn'
op|'.'
name|'putrequest'
op|'('
name|'method'
op|','
name|'path'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'http_conn'
op|'.'
name|'putheader'
op|'('
name|'key'
op|','
name|'headers'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'http_conn'
op|'.'
name|'endheaders'
op|'('
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'save_debug'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
newline|'\n'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'num_cb'
op|'>'
number|'2'
op|':'
newline|'\n'
indent|'                    '
name|'cb_count'
op|'='
name|'self'
op|'.'
name|'size'
op|'/'
name|'self'
op|'.'
name|'BufferSize'
op|'/'
op|'('
name|'num_cb'
op|'-'
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'cb_count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'i'
op|'='
name|'total_bytes'
op|'='
number|'0'
newline|'\n'
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
dedent|''
name|'l'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'BufferSize'
op|')'
newline|'\n'
name|'while'
name|'len'
op|'('
name|'l'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'http_conn'
op|'.'
name|'send'
op|'('
name|'l'
op|')'
newline|'\n'
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'                    '
name|'total_bytes'
op|'+='
name|'len'
op|'('
name|'l'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'cb_count'
op|':'
newline|'\n'
indent|'                        '
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'l'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'BufferSize'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'                '
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'http_conn'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'response'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
op|'='
name|'save_debug'
newline|'\n'
name|'if'
name|'response'
op|'.'
name|'status'
op|'=='
number|'500'
name|'or'
name|'response'
op|'.'
name|'status'
op|'=='
number|'503'
name|'or'
name|'response'
op|'.'
name|'getheader'
op|'('
string|"'location'"
op|')'
op|':'
newline|'\n'
comment|"# we'll try again"
nl|'\n'
indent|'                '
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'elif'
name|'response'
op|'.'
name|'status'
op|'>='
number|'200'
name|'and'
name|'response'
op|'.'
name|'status'
op|'<='
number|'299'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'etag'
op|'='
name|'response'
op|'.'
name|'getheader'
op|'('
string|"'etag'"
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'etag'
op|'!='
string|'\'"%s"\''
op|'%'
name|'self'
op|'.'
name|'md5'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'S3DataError'
op|'('
string|"'ETag from S3 did not match computed MD5'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'S3ResponseError'
op|'('
name|'response'
op|'.'
name|'status'
op|','
name|'response'
op|'.'
name|'reason'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'='
name|'headers'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'User-Agent'"
op|']'
op|'='
name|'UserAgent'
newline|'\n'
name|'headers'
op|'['
string|"'Content-MD5'"
op|']'
op|'='
name|'self'
op|'.'
name|'base64md5'
newline|'\n'
name|'if'
name|'headers'
op|'.'
name|'has_key'
op|'('
string|"'Content-Type'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content_type'
op|'='
name|'headers'
op|'['
string|"'Content-Type'"
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'content_type'
op|'='
name|'mimetypes'
op|'.'
name|'guess_type'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'content_type'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'content_type'
op|'='
name|'self'
op|'.'
name|'DefaultContentType'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'Content-Type'"
op|']'
op|'='
name|'self'
op|'.'
name|'content_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|"'Content-Type'"
op|']'
op|'='
name|'self'
op|'.'
name|'content_type'
newline|'\n'
dedent|''
name|'headers'
op|'['
string|"'Content-Length'"
op|']'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
name|'headers'
op|'['
string|"'Expect'"
op|']'
op|'='
string|"'100-Continue'"
newline|'\n'
name|'headers'
op|'='
name|'boto'
op|'.'
name|'utils'
op|'.'
name|'merge_meta'
op|'('
name|'headers'
op|','
name|'self'
op|'.'
name|'metadata'
op|')'
newline|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'make_request'
op|'('
string|"'PUT'"
op|','
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'name'
op|','
nl|'\n'
name|'self'
op|'.'
name|'name'
op|','
name|'headers'
op|','
nl|'\n'
name|'sender'
op|'='
name|'sender'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'handle_version_headers'
op|'('
name|'resp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_md5
dedent|''
name|'def'
name|'compute_md5'
op|'('
name|'self'
op|','
name|'fp'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        :type fp: file\n        :param fp: File pointer to the file to MD5 hash.  The file pointer will be\n                   reset to the beginning of the file before the method returns.\n        \n        :rtype: tuple\n        :return: A tuple containing the hex digest version of the MD5 hash\n                 as the first element and the base64 encoded version of the\n                 plain digest as the second element.\n        """'
newline|'\n'
name|'m'
op|'='
name|'md5'
op|'('
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'s'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'BufferSize'
op|')'
newline|'\n'
name|'while'
name|'s'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'update'
op|'('
name|'s'
op|')'
newline|'\n'
name|'s'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'BufferSize'
op|')'
newline|'\n'
dedent|''
name|'hex_md5'
op|'='
name|'m'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'base64md5'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
name|'m'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'base64md5'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'\\n'"
op|':'
newline|'\n'
indent|'            '
name|'base64md5'
op|'='
name|'base64md5'
op|'['
number|'0'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'size'
op|'='
name|'fp'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
op|'('
name|'hex_md5'
op|','
name|'base64md5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_contents_from_file
dedent|''
name|'def'
name|'set_contents_from_file'
op|'('
name|'self'
op|','
name|'fp'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'replace'
op|'='
name|'True'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'policy'
op|'='
name|'None'
op|','
name|'md5'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store an object in S3 using the name of the Key object as the\n        key in S3 and the contents of the file pointed to by \'fp\' as the\n        contents.\n        \n        :type fp: file\n        :param fp: the file whose contents to upload\n        \n        :type headers: dict\n        :param headers: additional HTTP headers that will be sent with the PUT request.\n\n        :type replace: bool\n        :param replace: If this parameter is False, the method\n                        will first check to see if an object exists in the\n                        bucket with the same key.  If it does, it won\'t\n                        overwrite it.  The default value is True which will\n                        overwrite the object.\n                    \n        :type cb: function\n        :param cb: a callback function that will be called to report\n                    progress on the upload.  The callback should accept two integer\n                    parameters, the first representing the number of bytes that have\n                    been successfully transmitted to S3 and the second representing\n                    the total number of bytes that need to be transmitted.\n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.\n\n        :type policy: :class:`boto.s3.acl.CannedACLStrings`\n        :param policy: A canned ACL policy that will be applied to the new key in S3.\n             \n        :type md5: A tuple containing the hexdigest version of the MD5 checksum of the\n                   file as the first element and the Base64-encoded version of the plain\n                   checksum as the second element.  This is the same format returned by\n                   the compute_md5 method.\n        :param md5: If you need to compute the MD5 for any reason prior to upload,\n                    it\'s silly to have to do it twice so this param, if present, will be\n                    used as the MD5 values of the file.  Otherwise, the checksum will be computed.\n        """'
newline|'\n'
name|'if'
name|'policy'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|"'x-amz-acl'"
op|']'
op|'='
name|'policy'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'='
op|'{'
string|"'x-amz-acl'"
op|':'
name|'policy'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'fp'
op|','
string|"'name'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'='
name|'fp'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'md5'
op|':'
newline|'\n'
indent|'                '
name|'md5'
op|'='
name|'self'
op|'.'
name|'compute_md5'
op|'('
name|'fp'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'md5'
op|'='
name|'md5'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'base64md5'
op|'='
name|'md5'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'name'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'name'
op|'='
name|'self'
op|'.'
name|'md5'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'replace'
op|':'
newline|'\n'
indent|'                '
name|'k'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'lookup'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'k'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'send_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'cb'
op|','
name|'num_cb'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_contents_from_filename
dedent|''
dedent|''
name|'def'
name|'set_contents_from_filename'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'replace'
op|'='
name|'True'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'policy'
op|'='
name|'None'
op|','
name|'md5'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store an object in S3 using the name of the Key object as the\n        key in S3 and the contents of the file named by \'filename\'.\n        See set_contents_from_file method for details about the\n        parameters.\n        \n        :type filename: string\n        :param filename: The name of the file that you want to put onto S3\n        \n        :type headers: dict\n        :param headers: Additional headers to pass along with the request to AWS.\n        \n        :type replace: bool\n        :param replace: If True, replaces the contents of the file if it already exists.\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.        \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type policy: :class:`boto.s3.acl.CannedACLStrings`\n        :param policy: A canned ACL policy that will be applied to the new key in S3.\n             \n        :type md5: A tuple containing the hexdigest version of the MD5 checksum of the\n                   file as the first element and the Base64-encoded version of the plain\n                   checksum as the second element.  This is the same format returned by\n                   the compute_md5 method.\n        :param md5: If you need to compute the MD5 for any reason prior to upload,\n                    it\'s silly to have to do it twice so this param, if present, will be\n                    used as the MD5 values of the file.  Otherwise, the checksum will be computed.\n        """'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'rb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_contents_from_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'replace'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'policy'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_contents_from_string
dedent|''
name|'def'
name|'set_contents_from_string'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'replace'
op|'='
name|'True'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'policy'
op|'='
name|'None'
op|','
name|'md5'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store an object in S3 using the name of the Key object as the\n        key in S3 and the string \'s\' as the contents.\n        See set_contents_from_file method for details about the\n        parameters.\n        \n        :type headers: dict\n        :param headers: Additional headers to pass along with the request to AWS.\n        \n        :type replace: bool\n        :param replace: If True, replaces the contents of the file if it already exists.\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.        \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type policy: :class:`boto.s3.acl.CannedACLStrings`\n        :param policy: A canned ACL policy that will be applied to the new key in S3.\n             \n        :type md5: A tuple containing the hexdigest version of the MD5 checksum of the\n                   file as the first element and the Base64-encoded version of the plain\n                   checksum as the second element.  This is the same format returned by\n                   the compute_md5 method.\n        :param md5: If you need to compute the MD5 for any reason prior to upload,\n                    it\'s silly to have to do it twice so this param, if present, will be\n                    used as the MD5 values of the file.  Otherwise, the checksum will be computed.\n        """'
newline|'\n'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'s'
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'set_contents_from_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'replace'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'policy'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'r'
newline|'\n'
nl|'\n'
DECL|member|get_file
dedent|''
name|'def'
name|'get_file'
op|'('
name|'self'
op|','
name|'fp'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'torrent'
op|'='
name|'False'
op|','
name|'version_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves a file from an S3 Key\n        \n        :type fp: file\n        :param fp: File pointer to put the data into\n        \n        :type headers: string\n        :param: headers to send when retrieving the files\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.\n        \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type torrent: bool\n        :param torrent: Flag for whether to get a torrent for the file\n        """'
newline|'\n'
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'num_cb'
op|'>'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'cb_count'
op|'='
name|'self'
op|'.'
name|'size'
op|'/'
name|'self'
op|'.'
name|'BufferSize'
op|'/'
op|'('
name|'num_cb'
op|'-'
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cb_count'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'i'
op|'='
name|'total_bytes'
op|'='
number|'0'
newline|'\n'
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
dedent|''
name|'save_debug'
op|'='
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
op|'='
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'query_args'
op|'='
string|"''"
newline|'\n'
name|'if'
name|'torrent'
op|':'
newline|'\n'
indent|'            '
name|'query_args'
op|'='
string|"'torrent'"
newline|'\n'
dedent|''
name|'elif'
name|'version_id'
op|':'
newline|'\n'
indent|'            '
name|'query_args'
op|'='
string|"'versionId=%s'"
op|'%'
name|'version_id'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'open'
op|'('
string|"'r'"
op|','
name|'headers'
op|','
name|'query_args'
op|'='
name|'query_args'
op|')'
newline|'\n'
name|'for'
name|'bytes'
name|'in'
name|'self'
op|':'
newline|'\n'
indent|'            '
name|'fp'
op|'.'
name|'write'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'                '
name|'total_bytes'
op|'+='
name|'len'
op|'('
name|'bytes'
op|')'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'cb_count'
op|':'
newline|'\n'
indent|'                    '
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
name|'i'
op|'='
number|'0'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'cb'
op|':'
newline|'\n'
indent|'            '
name|'cb'
op|'('
name|'total_bytes'
op|','
name|'self'
op|'.'
name|'size'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'bucket'
op|'.'
name|'connection'
op|'.'
name|'debug'
op|'='
name|'save_debug'
newline|'\n'
nl|'\n'
DECL|member|get_torrent_file
dedent|''
name|'def'
name|'get_torrent_file'
op|'('
name|'self'
op|','
name|'fp'
op|','
name|'headers'
op|'='
name|'None'
op|','
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get a torrent file (see to get_file)\n        \n        :type fp: file\n        :param fp: The file pointer of where to put the torrent\n        \n        :type headers: dict\n        :param headers: Headers to be passed\n        \n        :type cb: function\n        :param cb: Callback function to call on retrieved data\n        \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'torrent'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_contents_to_file
dedent|''
name|'def'
name|'get_contents_to_file'
op|'('
name|'self'
op|','
name|'fp'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'torrent'
op|'='
name|'False'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve an object from S3 using the name of the Key object as the\n        key in S3.  Write the contents of the object to the file pointed\n        to by \'fp\'.\n        \n        :type fp: File -like object\n        :param fp:\n        \n        :type headers: dict\n        :param headers: additional HTTP headers that will be sent with the GET request.\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.\n             \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type torrent: bool\n        :param torrent: If True, returns the contents of a torrent file as a string.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'bucket'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'get_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'torrent'
op|'='
name|'torrent'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'version_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_contents_to_filename
dedent|''
dedent|''
name|'def'
name|'get_contents_to_filename'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'torrent'
op|'='
name|'False'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve an object from S3 using the name of the Key object as the\n        key in S3.  Store contents of the object to a file named by \'filename\'.\n        See get_contents_to_file method for details about the\n        parameters.\n        \n        :type filename: string\n        :param filename: The filename of where to put the file contents\n        \n        :type headers: dict\n        :param headers: Any additional headers to send in the request\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.\n             \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type torrent: bool\n        :param torrent: If True, returns the contents of a torrent file as a string.\n        \n        """'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'get_contents_to_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'torrent'
op|'='
name|'torrent'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'version_id'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
comment|"# if last_modified date was sent from s3, try to set file's timestamp"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'last_modified'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'modified_tuple'
op|'='
name|'rfc822'
op|'.'
name|'parsedate_tz'
op|'('
name|'self'
op|'.'
name|'last_modified'
op|')'
newline|'\n'
name|'modified_stamp'
op|'='
name|'int'
op|'('
name|'rfc822'
op|'.'
name|'mktime_tz'
op|'('
name|'modified_tuple'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'utime'
op|'('
name|'fp'
op|'.'
name|'name'
op|','
op|'('
name|'modified_stamp'
op|','
name|'modified_stamp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_contents_as_string
dedent|''
dedent|''
name|'def'
name|'get_contents_as_string'
op|'('
name|'self'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'cb'
op|'='
name|'None'
op|','
name|'num_cb'
op|'='
number|'10'
op|','
nl|'\n'
name|'torrent'
op|'='
name|'False'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve an object from S3 using the name of the Key object as the\n        key in S3.  Return the contents of the object as a string.\n        See get_contents_to_file method for details about the\n        parameters.\n        \n        :type headers: dict\n        :param headers: Any additional headers to send in the request\n        \n        :type cb: function\n        :param cb: (optional) a callback function that will be called to report\n             progress on the download.  The callback should accept two integer\n             parameters, the first representing the number of bytes that have\n             been successfully transmitted from S3 and the second representing\n             the total number of bytes that need to be transmitted.\n\n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n                    \n        :type cb: int\n        :param num_cb: (optional) If a callback is specified with the cb parameter\n             this parameter determines the granularity of the callback by defining\n             the maximum number of times the callback will be called during the file transfer.  \n             \n        :type torrent: bool\n        :param torrent: If True, returns the contents of a torrent file as a string.\n        \n        :rtype: string\n        :returns: The contents of the file as a string\n        """'
newline|'\n'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'get_contents_to_file'
op|'('
name|'fp'
op|','
name|'headers'
op|','
name|'cb'
op|','
name|'num_cb'
op|','
name|'torrent'
op|'='
name|'torrent'
op|','
nl|'\n'
name|'version_id'
op|'='
name|'version_id'
op|')'
newline|'\n'
name|'return'
name|'fp'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_email_grant
dedent|''
name|'def'
name|'add_email_grant'
op|'('
name|'self'
op|','
name|'permission'
op|','
name|'email_address'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convenience method that provides a quick way to add an email grant to a key.\n        This method retrieves the current ACL, creates a new grant based on the parameters\n        passed in, adds that grant to the ACL and then PUT\'s the new ACL back to S3.\n        \n        :type permission: string\n        :param permission: The permission being granted.  Should be one of:\n                            READ|WRITE|READ_ACP|WRITE_ACP|FULL_CONTROL\n                            See http://docs.amazonwebservices.com/AmazonS3/2006-03-01/UsingAuthAccess.html\n                            for more details on permissions.\n        \n        :type email_address: string\n        :param email_address: The email address associated with the AWS account your are granting\n                                the permission to.\n        """'
newline|'\n'
name|'policy'
op|'='
name|'self'
op|'.'
name|'get_acl'
op|'('
op|')'
newline|'\n'
name|'policy'
op|'.'
name|'acl'
op|'.'
name|'add_email_grant'
op|'('
name|'permission'
op|','
name|'email_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_acl'
op|'('
name|'policy'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_user_grant
dedent|''
name|'def'
name|'add_user_grant'
op|'('
name|'self'
op|','
name|'permission'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convenience method that provides a quick way to add a canonical user grant to a key.\n        This method retrieves the current ACL, creates a new grant based on the parameters\n        passed in, adds that grant to the ACL and then PUT\'s the new ACL back to S3.\n        \n        :type permission: string\n        :param permission: The permission being granted.  Should be one of:\n                            READ|WRITE|READ_ACP|WRITE_ACP|FULL_CONTROL\n                            See http://docs.amazonwebservices.com/AmazonS3/2006-03-01/UsingAuthAccess.html\n                            for more details on permissions.\n        \n        :type user_id: string\n        :param user_id: The canonical user id associated with the AWS account your are granting\n                        the permission to.\n        """'
newline|'\n'
name|'policy'
op|'='
name|'self'
op|'.'
name|'get_acl'
op|'('
op|')'
newline|'\n'
name|'policy'
op|'.'
name|'acl'
op|'.'
name|'add_user_grant'
op|'('
name|'permission'
op|','
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_acl'
op|'('
name|'policy'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2009 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nRepresents a connection to the EC2 service.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'connection'
name|'import'
name|'EC2Connection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'vpc'
name|'import'
name|'VPC'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'customergateway'
name|'import'
name|'CustomerGateway'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'vpngateway'
name|'import'
name|'VpnGateway'
op|','
name|'Attachment'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'dhcpoptions'
name|'import'
name|'DhcpOptions'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'subnet'
name|'import'
name|'Subnet'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'vpc'
op|'.'
name|'vpnconnection'
name|'import'
name|'VpnConnection'
newline|'\n'
nl|'\n'
DECL|class|VPCConnection
name|'class'
name|'VPCConnection'
op|'('
name|'EC2Connection'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# VPC methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_vpcs
indent|'    '
name|'def'
name|'get_all_vpcs'
op|'('
name|'self'
op|','
name|'vpc_ids'
op|'='
name|'None'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your VPCs.  You can filter results to\n        return information only about those VPCs that match your search\n        parameters.  Otherwise, all VPCs associated with your account\n        are returned.\n        \n        :type vpc_ids: list\n        :param vpc_ids: A list of strings with the desired VPC ID\'s\n        \n        :type filters: list of tuples\n        :param filters: A list of tuples containing filters.  Each tuple\n                        consists of a filter key and a filter value.\n                        Possible filter keys are:\n                        \n                        - *state*, the state of the VPC (pending or available)\n                        - *cidrBlock*, CIDR block of the VPC\n                        - *dhcpOptionsId*, the ID of a set of DHCP options\n\n        :rtype: list\n        :return: A list of :class:`boto.vpc.vpc.VPC`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'vpc_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'vpc_ids'
op|','
string|"'VpcId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'filter'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
op|'('
string|"'Filter.%d.Key'"
op|'%'
name|'i'
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
op|'('
string|"'Filter.%d.Value.1'"
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'1'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeVpcs'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'VPC'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_vpc
dedent|''
name|'def'
name|'create_vpc'
op|'('
name|'self'
op|','
name|'cidr_block'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new Virtual Private Cloud.\n\n        :type cidr_block: str\n        :param cidr_block: A valid CIDR block\n\n        :rtype: The newly created VPC\n        :return: A :class:`boto.vpc.vpc.VPC` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'CidrBlock'"
op|':'
name|'cidr_block'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateVpc'"
op|','
name|'params'
op|','
name|'VPC'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_vpc
dedent|''
name|'def'
name|'delete_vpc'
op|'('
name|'self'
op|','
name|'vpc_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a Virtual Private Cloud.\n\n        :type vpc_id: str\n        :param vpc_id: The ID of the vpc to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpcId'"
op|':'
name|'vpc_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteVpc'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Customer Gateways'
nl|'\n'
nl|'\n'
DECL|member|get_all_customer_gateways
dedent|''
name|'def'
name|'get_all_customer_gateways'
op|'('
name|'self'
op|','
name|'customer_gateway_ids'
op|'='
name|'None'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your CustomerGateways.  You can filter results to\n        return information only about those CustomerGateways that match your search\n        parameters.  Otherwise, all CustomerGateways associated with your account\n        are returned.\n        \n        :type customer_gateway_ids: list\n        :param customer_gateway_ids: A list of strings with the desired CustomerGateway ID\'s\n        \n        :type filters: list of tuples\n        :param filters: A list of tuples containing filters.  Each tuple\n                        consists of a filter key and a filter value.\n                        Possible filter keys are:\n                        \n                         - *state*, the state of the CustomerGateway\n                           (pending,available,deleting,deleted)\n                         - *type*, the type of customer gateway (ipsec.1)\n                         - *ipAddress* the IP address of customer gateway\'s\n                           internet-routable external inteface\n\n        :rtype: list\n        :return: A list of :class:`boto.vpc.customergateway.CustomerGateway`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'customer_gateway_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'customer_gateway_ids'
op|','
string|"'CustomerGatewayId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'filter'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
op|'('
string|"'Filter.%d.Key'"
op|'%'
name|'i'
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
op|'('
string|"'Filter.%d.Value.1'"
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'1'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeCustomerGateways'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'CustomerGateway'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_customer_gateway
dedent|''
name|'def'
name|'create_customer_gateway'
op|'('
name|'self'
op|','
name|'type'
op|','
name|'ip_address'
op|','
name|'bgp_asn'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new Customer Gateway\n\n        :type type: str\n        :param type: Type of VPN Connection.  Only valid valid currently is \'ipsec.1\'\n\n        :type ip_address: str\n        :param ip_address: Internet-routable IP address for customer\'s gateway.\n                           Must be a static address.\n\n        :type bgp_asn: str\n        :param bgp_asn: Customer gateway\'s Border Gateway Protocol (BGP)\n                        Autonomous System Number (ASN)\n\n        :rtype: The newly created CustomerGateway\n        :return: A :class:`boto.vpc.customergateway.CustomerGateway` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Type'"
op|':'
name|'type'
op|','
nl|'\n'
string|"'IpAddress'"
op|':'
name|'ip_address'
op|','
nl|'\n'
string|"'BgpAsn'"
op|':'
name|'bgp_asn'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateCustomerGateway'"
op|','
name|'params'
op|','
name|'CustomerGateway'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_customer_gateway
dedent|''
name|'def'
name|'delete_customer_gateway'
op|'('
name|'self'
op|','
name|'customer_gateway_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a Customer Gateway.\n\n        :type customer_gateway_id: str\n        :param customer_gateway_id: The ID of the customer_gateway to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'CustomerGatewayId'"
op|':'
name|'customer_gateway_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteCustomerGateway'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# VPN Gateways'
nl|'\n'
nl|'\n'
DECL|member|get_all_vpn_gateways
dedent|''
name|'def'
name|'get_all_vpn_gateways'
op|'('
name|'self'
op|','
name|'vpn_gateway_ids'
op|'='
name|'None'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your VpnGateways.  You can filter results to\n        return information only about those VpnGateways that match your search\n        parameters.  Otherwise, all VpnGateways associated with your account\n        are returned.\n\n        :type vpn_gateway_ids: list\n        :param vpn_gateway_ids: A list of strings with the desired VpnGateway ID\'s\n        \n        :type filters: list of tuples\n        :param filters: A list of tuples containing filters.  Each tuple\n                        consists of a filter key and a filter value.\n                        Possible filter keys are:\n                        \n                        - *state*, the state of the VpnGateway\n                          (pending,available,deleting,deleted)\n                        - *type*, the type of customer gateway (ipsec.1)\n                        - *availabilityZone*, the Availability zone the\n                          VPN gateway is in.\n\n        :rtype: list\n        :return: A list of :class:`boto.vpc.customergateway.VpnGateway`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'vpn_gateway_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'vpn_gateway_ids'
op|','
string|"'VpnGatewayId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'filter'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
op|'('
string|"'Filter.%d.Key'"
op|'%'
name|'i'
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
op|'('
string|"'Filter.%d.Value.1'"
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'1'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeVpnGateways'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'VpnGateway'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_vpn_gateway
dedent|''
name|'def'
name|'create_vpn_gateway'
op|'('
name|'self'
op|','
name|'type'
op|','
name|'availability_zone'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new Vpn Gateway\n\n        :type type: str\n        :param type: Type of VPN Connection.  Only valid valid currently is \'ipsec.1\'\n\n        :type availability_zone: str\n        :param availability_zone: The Availability Zone where you want the VPN gateway.\n\n        :rtype: The newly created VpnGateway\n        :return: A :class:`boto.vpc.vpngateway.VpnGateway` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Type'"
op|':'
name|'type'
op|'}'
newline|'\n'
name|'if'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AvailabilityZone'"
op|']'
op|'='
name|'availability_zone'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateVpnGateway'"
op|','
name|'params'
op|','
name|'VpnGateway'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_vpn_gateway
dedent|''
name|'def'
name|'delete_vpn_gateway'
op|'('
name|'self'
op|','
name|'vpn_gateway_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a Vpn Gateway.\n\n        :type vpn_gateway_id: str\n        :param vpn_gateway_id: The ID of the vpn_gateway to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpnGatewayId'"
op|':'
name|'vpn_gateway_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteVpnGateway'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_vpn_gateway
dedent|''
name|'def'
name|'attach_vpn_gateway'
op|'('
name|'self'
op|','
name|'vpn_gateway_id'
op|','
name|'vpc_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attaches a VPN gateway to a VPC.\n\n        :type vpn_gateway_id: str\n        :param vpn_gateway_id: The ID of the vpn_gateway to attach\n\n        :type vpc_id: str\n        :param vpc_id: The ID of the VPC you want to attach the gateway to.\n\n        :rtype: An attachment\n        :return: a :class:`boto.vpc.vpngateway.Attachment`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpnGatewayId'"
op|':'
name|'vpn_gateway_id'
op|','
nl|'\n'
string|"'VpcId'"
op|':'
name|'vpc_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'AttachVpnGateway'"
op|','
name|'params'
op|','
name|'Attachment'
op|')'
newline|'\n'
nl|'\n'
comment|'# Subnets'
nl|'\n'
nl|'\n'
DECL|member|get_all_subnets
dedent|''
name|'def'
name|'get_all_subnets'
op|'('
name|'self'
op|','
name|'subnet_ids'
op|'='
name|'None'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your Subnets.  You can filter results to\n        return information only about those Subnets that match your search\n        parameters.  Otherwise, all Subnets associated with your account\n        are returned.\n        \n        :type subnet_ids: list\n        :param subnet_ids: A list of strings with the desired Subnet ID\'s\n        \n        :type filters: list of tuples\n        :param filters: A list of tuples containing filters.  Each tuple\n                        consists of a filter key and a filter value.\n                        Possible filter keys are:\n                        \n                        - *state*, the state of the Subnet\n                          (pending,available)\n                        - *vpdId*, the ID of teh VPC the subnet is in.\n                        - *cidrBlock*, CIDR block of the subnet\n                        - *availabilityZone*, the Availability Zone\n                          the subnet is in.\n\n\n        :rtype: list\n        :return: A list of :class:`boto.vpc.subnet.Subnet`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'subnet_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'subnet_ids'
op|','
string|"'SubnetId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'filter'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
op|'('
string|"'Filter.%d.Key'"
op|'%'
name|'i'
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
op|'('
string|"'Filter.%d.Value.1'"
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'1'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeSubnets'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Subnet'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_subnet
dedent|''
name|'def'
name|'create_subnet'
op|'('
name|'self'
op|','
name|'vpc_id'
op|','
name|'cidr_block'
op|','
name|'availability_zone'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new Subnet\n\n        :type vpc_id: str\n        :param vpc_id: The ID of the VPC where you want to create the subnet.\n\n        :type cidr_block: str\n        :param cidr_block: The CIDR block you want the subnet to cover.\n\n        :type availability_zone: str\n        :param availability_zone: The AZ you want the subnet in\n\n        :rtype: The newly created Subnet\n        :return: A :class:`boto.vpc.customergateway.Subnet` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpcId'"
op|':'
name|'vpc_id'
op|','
nl|'\n'
string|"'CidrBlock'"
op|':'
name|'cidr_block'
op|'}'
newline|'\n'
name|'if'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AvailabilityZone'"
op|']'
op|'='
name|'availability_zone'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateSubnet'"
op|','
name|'params'
op|','
name|'Subnet'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_subnet
dedent|''
name|'def'
name|'delete_subnet'
op|'('
name|'self'
op|','
name|'subnet_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a subnet.\n\n        :type subnet_id: str\n        :param subnet_id: The ID of the subnet to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'SubnetId'"
op|':'
name|'subnet_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteSubnet'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# DHCP Options'
nl|'\n'
nl|'\n'
DECL|member|get_all_dhcp_options
dedent|''
name|'def'
name|'get_all_dhcp_options'
op|'('
name|'self'
op|','
name|'dhcp_options_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your DhcpOptions.\n        \n        :type dhcp_options_ids: list\n        :param dhcp_options_ids: A list of strings with the desired DhcpOption ID\'s\n        \n        :rtype: list\n        :return: A list of :class:`boto.vpc.dhcpoptions.DhcpOptions`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'dhcp_options_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'dhcp_options_ids'
op|','
string|"'DhcpOptionsId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeDhcpOptions'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'DhcpOptions'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_dhcp_options
dedent|''
name|'def'
name|'create_dhcp_options'
op|'('
name|'self'
op|','
name|'vpc_id'
op|','
name|'cidr_block'
op|','
name|'availability_zone'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new DhcpOption\n\n        :type vpc_id: str\n        :param vpc_id: The ID of the VPC where you want to create the subnet.\n\n        :type cidr_block: str\n        :param cidr_block: The CIDR block you want the subnet to cover.\n\n        :type availability_zone: str\n        :param availability_zone: The AZ you want the subnet in\n\n        :rtype: The newly created DhcpOption\n        :return: A :class:`boto.vpc.customergateway.DhcpOption` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpcId'"
op|':'
name|'vpc_id'
op|','
nl|'\n'
string|"'CidrBlock'"
op|':'
name|'cidr_block'
op|'}'
newline|'\n'
name|'if'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AvailabilityZone'"
op|']'
op|'='
name|'availability_zone'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateDhcpOption'"
op|','
name|'params'
op|','
name|'DhcpOptions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_dhcp_options
dedent|''
name|'def'
name|'delete_dhcp_options'
op|'('
name|'self'
op|','
name|'dhcp_options_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a DHCP Options\n\n        :type dhcp_options_id: str\n        :param dhcp_options_id: The ID of the DHCP Options to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DhcpOptionsId'"
op|':'
name|'dhcp_options_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteDhcpOptions'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_dhcp_options
dedent|''
name|'def'
name|'associate_dhcp_options'
op|'('
name|'self'
op|','
name|'dhcp_options_id'
op|','
name|'vpc_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Associate a set of Dhcp Options with a VPC.\n        \n        :type dhcp_options_id: str\n        :param dhcp_options_id: The ID of the Dhcp Options\n        \n        :type vpc_id: str\n        :param vpc_id: The ID of the VPC.\n        \n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'DhcpOptionsId'"
op|':'
name|'dhcp_options_id'
op|','
nl|'\n'
string|"'VpcId'"
op|':'
name|'vpc_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'AssociateDhcpOptions'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# VPN Connection'
nl|'\n'
nl|'\n'
DECL|member|get_all_vpn_connections
dedent|''
name|'def'
name|'get_all_vpn_connections'
op|'('
name|'self'
op|','
name|'vpn_connection_ids'
op|'='
name|'None'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve information about your VPN_CONNECTIONs.  You can filter results to\n        return information only about those VPN_CONNECTIONs that match your search\n        parameters.  Otherwise, all VPN_CONNECTIONs associated with your account\n        are returned.\n        \n        :type vpn_connection_ids: list\n        :param vpn_connection_ids: A list of strings with the desired VPN_CONNECTION ID\'s\n        \n        :type filters: list of tuples\n        :param filters: A list of tuples containing filters.  Each tuple\n                        consists of a filter key and a filter value.\n                        Possible filter keys are:\n                        \n                        - *state*, the state of the VPN_CONNECTION\n                          pending,available,deleting,deleted\n                        - *type*, the type of connection, currently \'ipsec.1\'\n                        - *customerGatewayId*, the ID of the customer gateway\n                          associated with the VPN\n                        - *vpnGatewayId*, the ID of the VPN gateway associated\n                          with the VPN connection\n\n        :rtype: list\n        :return: A list of :class:`boto.vpn_connection.vpnconnection.VpnConnection`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'vpn_connection_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'vpn_connection_ids'
op|','
string|"'Vpn_ConnectionId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'filter'
name|'in'
name|'filters'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
op|'('
string|"'Filter.%d.Key'"
op|'%'
name|'i'
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'0'
op|']'
newline|'\n'
name|'params'
op|'['
op|'('
string|"'Filter.%d.Value.1'"
op|')'
op|']'
op|'='
name|'filter'
op|'['
number|'1'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeVpnConnections'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'VpnConnection'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_vpn_connection
dedent|''
name|'def'
name|'create_vpn_connection'
op|'('
name|'self'
op|','
name|'type'
op|','
name|'customer_gateway_id'
op|','
name|'vpn_gateway_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new VPN Connection.\n\n        :type type: str\n        :param type: The type of VPN Connection.  Currently only \'ipsec.1\'\n                     is supported\n\n        :type customer_gateway_id: str\n        :param customer_gateway_id: The ID of the customer gateway.\n\n        :type vpn_gateway_id: str\n        :param vpn_gateway_id: The ID of the VPN gateway.\n\n        :rtype: The newly created VpnConnection\n        :return: A :class:`boto.vpc.vpnconnection.VpnConnection` object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Type'"
op|':'
name|'type'
op|','
nl|'\n'
string|"'CustomerGatewayId'"
op|':'
name|'customer_gateway_id'
op|','
nl|'\n'
string|"'VpnGatewayId'"
op|':'
name|'vpn_gateway_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateVpnConnection'"
op|','
name|'params'
op|','
name|'VpnConnection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_vpn_connection
dedent|''
name|'def'
name|'delete_vpn_connection'
op|'('
name|'self'
op|','
name|'vpn_connection_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a VPN Connection.\n\n        :type vpn_connection_id: str\n        :param vpn_connection_id: The ID of the vpn_connection to be deleted.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VpnConnectionId'"
op|':'
name|'vpn_connection_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteVpnConnection'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2006-2009 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
comment|'#'
nl|'\n'
string|'"""\nThis module provides an interface to the Elastic Compute Cloud (EC2)\nCloudWatch service from AWS.\n\nThe 5 Minute How-To Guide\n-------------------------\nFirst, make sure you have something to monitor.  You can either create a\nLoadBalancer or enable monitoring on an existing EC2 instance.  To enable\nmonitoring, you can either call the monitor_instance method on the\nEC2Connection object or call the monitor method on the Instance object.\n\nIt takes a while for the monitoring data to start accumulating but once\nit does, you can do this:\n\n>>> import boto\n>>> c = boto.connect_cloudwatch()\n>>> metrics = c.list_metrics()\n>>> metrics\n[Metric:NetworkIn,\n Metric:NetworkOut,\n Metric:NetworkOut(InstanceType,m1.small),\n Metric:NetworkIn(InstanceId,i-e573e68c),\n Metric:CPUUtilization(InstanceId,i-e573e68c),\n Metric:DiskWriteBytes(InstanceType,m1.small),\n Metric:DiskWriteBytes(ImageId,ami-a1ffb63),\n Metric:NetworkOut(ImageId,ami-a1ffb63),\n Metric:DiskWriteOps(InstanceType,m1.small),\n Metric:DiskReadBytes(InstanceType,m1.small),\n Metric:DiskReadOps(ImageId,ami-a1ffb63),\n Metric:CPUUtilization(InstanceType,m1.small),\n Metric:NetworkIn(ImageId,ami-a1ffb63),\n Metric:DiskReadOps(InstanceType,m1.small),\n Metric:DiskReadBytes,\n Metric:CPUUtilization,\n Metric:DiskWriteBytes(InstanceId,i-e573e68c),\n Metric:DiskWriteOps(InstanceId,i-e573e68c),\n Metric:DiskWriteOps,\n Metric:DiskReadOps,\n Metric:CPUUtilization(ImageId,ami-a1ffb63),\n Metric:DiskReadOps(InstanceId,i-e573e68c),\n Metric:NetworkOut(InstanceId,i-e573e68c),\n Metric:DiskReadBytes(ImageId,ami-a1ffb63),\n Metric:DiskReadBytes(InstanceId,i-e573e68c),\n Metric:DiskWriteBytes,\n Metric:NetworkIn(InstanceType,m1.small),\n Metric:DiskWriteOps(ImageId,ami-a1ffb63)]\n\nThe list_metrics call will return a list of all of the available metrics\nthat you can query against.  Each entry in the list is a Metric object.\nAs you can see from the list above, some of the metrics are generic metrics\nand some have Dimensions associated with them (e.g. InstanceType=m1.small).\nThe Dimension can be used to refine your query.  So, for example, I could\nquery the metric Metric:CPUUtilization which would create the desired statistic\nby aggregating cpu utilization data across all sources of information available\nor I could refine that by querying the metric\nMetric:CPUUtilization(InstanceId,i-e573e68c) which would use only the data\nassociated with the instance identified by the instance ID i-e573e68c.\n\nBecause for this example, I\'m only monitoring a single instance, the set\nof metrics available to me are fairly limited.  If I was monitoring many\ninstances, using many different instance types and AMI\'s and also several\nload balancers, the list of available metrics would grow considerably.\n\nOnce you have the list of available metrics, you can actually\nquery the CloudWatch system for that metric.  Let\'s choose the CPU utilization\nmetric for our instance.\n\n>>> m = metrics[5]\n>>> m\nMetric:CPUUtilization(InstanceId,i-e573e68c)\n\nThe Metric object has a query method that lets us actually perform\nthe query against the collected data in CloudWatch.  To call that,\nwe need a start time and end time to control the time span of data\nthat we are interested in.  For this example, let\'s say we want the\ndata for the previous hour:\n\n>>> import datetime\n>>> end = datetime.datetime.now()\n>>> start = end - datetime.timedelta(hours=1)\n\nWe also need to supply the Statistic that we want reported and\nthe Units to use for the results.  The Statistic can be one of these\nvalues:\n\n[\'Minimum\', \'Maximum\', \'Sum\', \'Average\', \'Samples\']\n\nAnd Units must be one of the following:\n\n[\'Seconds\', \'Percent\', \'Bytes\', \'Bits\', \'Count\',\n\'Bytes/Second\', \'Bits/Second\', \'Count/Second\']\n\nThe query method also takes an optional parameter, period.  This\nparameter controls the granularity (in seconds) of the data returned.\nThe smallest period is 60 seconds and the value must be a multiple\nof 60 seconds.  So, let\'s ask for the average as a percent:\n\n>>> datapoints = m.query(start, end, \'Average\', \'Percent\')\n>>> len(datapoints)\n60\n\nOur period was 60 seconds and our duration was one hour so\nwe should get 60 data points back and we can see that we did.\nEach element in the datapoints list is a DataPoint object\nwhich is a simple subclass of a Python dict object.  Each\nDatapoint object contains all of the information available\nabout that particular data point.\n\n>>> d = datapoints[0]\n>>> d\n{u\'Average\': 0.0,\n u\'Samples\': 1.0,\n u\'Timestamp\': u\'2009-05-21T19:55:00Z\',\n u\'Unit\': u\'Percent\'}\n\nMy server obviously isn\'t very busy right now!\n"""'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'connection'
name|'import'
name|'AWSQueryConnection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'cloudwatch'
op|'.'
name|'metric'
name|'import'
name|'Metric'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'cloudwatch'
op|'.'
name|'datapoint'
name|'import'
name|'Datapoint'
newline|'\n'
name|'import'
name|'boto'
newline|'\n'
nl|'\n'
DECL|class|CloudWatchConnection
name|'class'
name|'CloudWatchConnection'
op|'('
name|'AWSQueryConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|APIVersion
indent|'    '
name|'APIVersion'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Boto'"
op|','
string|"'cloudwatch_version'"
op|','
string|"'2009-05-15'"
op|')'
newline|'\n'
DECL|variable|Endpoint
name|'Endpoint'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Boto'"
op|','
string|"'cloudwatch_endpoint'"
op|','
string|"'monitoring.amazonaws.com'"
op|')'
newline|'\n'
DECL|variable|SignatureVersion
name|'SignatureVersion'
op|'='
string|"'2'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|'='
name|'None'
op|','
name|'aws_secret_access_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'True'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'proxy'
op|'='
name|'None'
op|','
name|'proxy_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'proxy_user'
op|'='
name|'None'
op|','
name|'proxy_pass'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'Endpoint'
op|','
name|'debug'
op|'='
number|'0'
op|','
nl|'\n'
name|'https_connection_factory'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Init method to create a new connection to EC2 Monitoring Service.\n        \n        B{Note:} The host argument is overridden by the host specified in the boto configuration file.        \n        """'
newline|'\n'
name|'AWSQueryConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|','
name|'aws_secret_access_key'
op|','
nl|'\n'
name|'is_secure'
op|','
name|'port'
op|','
name|'proxy'
op|','
name|'proxy_port'
op|','
name|'proxy_user'
op|','
name|'proxy_pass'
op|','
nl|'\n'
name|'host'
op|','
name|'debug'
op|','
name|'https_connection_factory'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|build_list_params
dedent|''
name|'def'
name|'build_list_params'
op|'('
name|'self'
op|','
name|'params'
op|','
name|'items'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'items'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'items'
op|'='
op|'['
name|'items'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'items'
op|')'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
name|'label'
op|'%'
name|'i'
op|']'
op|'='
name|'items'
op|'['
name|'i'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_metric_statistics
dedent|''
dedent|''
name|'def'
name|'get_metric_statistics'
op|'('
name|'self'
op|','
name|'period'
op|','
name|'start_time'
op|','
name|'end_time'
op|','
name|'measure_name'
op|','
nl|'\n'
name|'namespace'
op|','
name|'statistics'
op|'='
name|'None'
op|','
name|'dimensions'
op|'='
name|'None'
op|','
name|'unit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get time-series data for one or more statistics of a given metric.\n        \n        :type measure_name: string\n        :param measure_name: CPUUtilization|NetworkIO-in|NetworkIO-out|DiskIO-ALL-read|\n                             DiskIO-ALL-write|DiskIO-ALL-read-bytes|DiskIO-ALL-write-bytes\n        \n        :rtype: list\n        :return: A list of :class:`boto.ec2.image.Image`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Period'"
op|':'
name|'period'
op|','
nl|'\n'
string|"'MeasureName'"
op|':'
name|'measure_name'
op|','
nl|'\n'
string|"'Namespace'"
op|':'
name|'namespace'
op|','
nl|'\n'
string|"'StartTime'"
op|':'
name|'start_time'
op|'.'
name|'isoformat'
op|'('
op|')'
op|','
nl|'\n'
string|"'EndTime'"
op|':'
name|'end_time'
op|'.'
name|'isoformat'
op|'('
op|')'
op|'}'
newline|'\n'
name|'if'
name|'dimensions'
op|':'
newline|'\n'
indent|'            '
name|'i'
op|'='
number|'1'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'dimensions'
op|':'
newline|'\n'
indent|'                '
name|'params'
op|'['
string|"'Dimensions.member.%d.Name'"
op|'%'
name|'i'
op|']'
op|'='
name|'name'
newline|'\n'
name|'params'
op|'['
string|"'Dimensions.member.%d.Value'"
op|'%'
name|'i'
op|']'
op|'='
name|'dimensions'
op|'['
name|'name'
op|']'
newline|'\n'
name|'i'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'statistics'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'statistics'
op|','
string|"'Statistics.member.%d'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'GetMetricStatistics'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'member'"
op|','
name|'Datapoint'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|list_metrics
dedent|''
name|'def'
name|'list_metrics'
op|'('
name|'self'
op|','
name|'next_token'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of the valid metrics for which there is recorded data available.\n\n        :type next_token: string\n        :param next_token: A maximum of 500 metrics will be returned at one time.\n                           If more results are available, the ResultSet returned\n                           will contain a non-Null next_token attribute.  Passing\n                           that token as a parameter to list_metrics will retrieve\n                           the next page of metrics.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'next_token'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'NextToken'"
op|']'
op|'='
name|'next_token'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'ListMetrics'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'member'"
op|','
name|'Metric'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

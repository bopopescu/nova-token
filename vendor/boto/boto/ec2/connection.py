begin_unit
comment|'# Copyright (c) 2006-2009 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,'
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nRepresents a connection to the EC2 service.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'boto'
newline|'\n'
name|'from'
name|'hashlib'
name|'import'
name|'sha1'
name|'as'
name|'sha'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'connection'
name|'import'
name|'AWSQueryConnection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'resultset'
name|'import'
name|'ResultSet'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'image'
name|'import'
name|'Image'
op|','
name|'ImageAttribute'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'instance'
name|'import'
name|'Reservation'
op|','
name|'Instance'
op|','
name|'ConsoleOutput'
op|','
name|'InstanceAttribute'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'keypair'
name|'import'
name|'KeyPair'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'address'
name|'import'
name|'Address'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'volume'
name|'import'
name|'Volume'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'snapshot'
name|'import'
name|'Snapshot'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'snapshot'
name|'import'
name|'SnapshotAttribute'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'zone'
name|'import'
name|'Zone'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'securitygroup'
name|'import'
name|'SecurityGroup'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'regioninfo'
name|'import'
name|'RegionInfo'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'instanceinfo'
name|'import'
name|'InstanceInfo'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'reservedinstance'
name|'import'
name|'ReservedInstancesOffering'
op|','
name|'ReservedInstance'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'spotinstancerequest'
name|'import'
name|'SpotInstanceRequest'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'spotpricehistory'
name|'import'
name|'SpotPriceHistory'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'spotdatafeedsubscription'
name|'import'
name|'SpotDatafeedSubscription'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'bundleinstance'
name|'import'
name|'BundleInstanceTask'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'EC2ResponseError'
newline|'\n'
nl|'\n'
comment|"#boto.set_stream_logger('ec2')"
nl|'\n'
nl|'\n'
DECL|class|EC2Connection
name|'class'
name|'EC2Connection'
op|'('
name|'AWSQueryConnection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|APIVersion
indent|'    '
name|'APIVersion'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Boto'"
op|','
string|"'ec2_version'"
op|','
string|"'2009-11-30'"
op|')'
newline|'\n'
DECL|variable|DefaultRegionName
name|'DefaultRegionName'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Boto'"
op|','
string|"'ec2_region_name'"
op|','
string|"'us-east-1'"
op|')'
newline|'\n'
DECL|variable|DefaultRegionEndpoint
name|'DefaultRegionEndpoint'
op|'='
name|'boto'
op|'.'
name|'config'
op|'.'
name|'get'
op|'('
string|"'Boto'"
op|','
string|"'ec2_region_endpoint'"
op|','
nl|'\n'
string|"'ec2.amazonaws.com'"
op|')'
newline|'\n'
DECL|variable|SignatureVersion
name|'SignatureVersion'
op|'='
string|"'2'"
newline|'\n'
DECL|variable|ResponseError
name|'ResponseError'
op|'='
name|'EC2ResponseError'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|'='
name|'None'
op|','
name|'aws_secret_access_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'True'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'proxy'
op|'='
name|'None'
op|','
name|'proxy_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'proxy_user'
op|'='
name|'None'
op|','
name|'proxy_pass'
op|'='
name|'None'
op|','
name|'debug'
op|'='
number|'0'
op|','
nl|'\n'
name|'https_connection_factory'
op|'='
name|'None'
op|','
name|'region'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Init method to create a new connection to EC2.\n\n        B{Note:} The host argument is overridden by the host specified in the boto configuration file.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'region'
op|':'
newline|'\n'
indent|'            '
name|'region'
op|'='
name|'RegionInfo'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'DefaultRegionName'
op|','
name|'self'
op|'.'
name|'DefaultRegionEndpoint'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'region'
op|'='
name|'region'
newline|'\n'
name|'AWSQueryConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|','
nl|'\n'
name|'aws_secret_access_key'
op|','
nl|'\n'
name|'is_secure'
op|','
name|'port'
op|','
name|'proxy'
op|','
name|'proxy_port'
op|','
nl|'\n'
name|'proxy_user'
op|','
name|'proxy_pass'
op|','
nl|'\n'
name|'self'
op|'.'
name|'region'
op|'.'
name|'endpoint'
op|','
name|'debug'
op|','
nl|'\n'
name|'https_connection_factory'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_params
dedent|''
name|'def'
name|'get_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a dictionary containing the value of of all of the keyword\n        arguments passed when constructing this connection.\n        """'
newline|'\n'
name|'param_names'
op|'='
op|'['
string|"'aws_access_key_id'"
op|','
string|"'aws_secret_access_key'"
op|','
string|"'is_secure'"
op|','
nl|'\n'
string|"'port'"
op|','
string|"'proxy'"
op|','
string|"'proxy_port'"
op|','
string|"'proxy_user'"
op|','
string|"'proxy_pass'"
op|','
nl|'\n'
string|"'debug'"
op|','
string|"'https_connection_factory'"
op|']'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'param_names'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
name|'name'
op|']'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'params'
newline|'\n'
nl|'\n'
comment|'# Image methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_images
dedent|''
name|'def'
name|'get_all_images'
op|'('
name|'self'
op|','
name|'image_ids'
op|'='
name|'None'
op|','
name|'owners'
op|'='
name|'None'
op|','
name|'executable_by'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all the EC2 images available on your account.\n\n        :type image_ids: list\n        :param image_ids: A list of strings with the image IDs wanted\n\n        :type owners: list\n        :param owners: A list of owner IDs\n\n        :type executable_by:\n        :param executable_by:\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.image.Image`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'image_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'image_ids'
op|','
string|"'ImageId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'owners'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'owners'
op|','
string|"'Owner'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'executable_by'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'executable_by'
op|','
string|"'ExecutableBy'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeImages'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Image'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_kernels
dedent|''
name|'def'
name|'get_all_kernels'
op|'('
name|'self'
op|','
name|'kernel_ids'
op|'='
name|'None'
op|','
name|'owners'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all the EC2 kernels available on your account.  Simply filters the list returned\n        by get_all_images because EC2 does not provide a way to filter server-side.\n\n        :type kernel_ids: list\n        :param kernel_ids: A list of strings with the image IDs wanted\n\n        :type owners: list\n        :param owners: A list of owner IDs\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.image.Image`\n        """'
newline|'\n'
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_all_images'
op|'('
name|'kernel_ids'
op|','
name|'owners'
op|')'
newline|'\n'
name|'kernels'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'image'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image'
op|'.'
name|'type'
op|'=='
string|"'kernel'"
op|':'
newline|'\n'
indent|'                '
name|'kernels'
op|'.'
name|'append'
op|'('
name|'image'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'kernels'
newline|'\n'
nl|'\n'
DECL|member|get_all_ramdisks
dedent|''
name|'def'
name|'get_all_ramdisks'
op|'('
name|'self'
op|','
name|'ramdisk_ids'
op|'='
name|'None'
op|','
name|'owners'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all the EC2 ramdisks available on your account.\n        Simply filters the list returned by get_all_images because\n        EC2 does not provide a way to filter server-side.\n\n        :type ramdisk_ids: list\n        :param ramdisk_ids: A list of strings with the image IDs wanted\n\n        :type owners: list\n        :param owners: A list of owner IDs\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.image.Image`\n        """'
newline|'\n'
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_all_images'
op|'('
name|'ramdisk_ids'
op|','
name|'owners'
op|')'
newline|'\n'
name|'ramdisks'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'image'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image'
op|'.'
name|'type'
op|'=='
string|"'ramdisk'"
op|':'
newline|'\n'
indent|'                '
name|'ramdisks'
op|'.'
name|'append'
op|'('
name|'image'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ramdisks'
newline|'\n'
nl|'\n'
DECL|member|get_image
dedent|''
name|'def'
name|'get_image'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Shortcut method to retrieve a specific image (AMI).\n\n        :type image_id: string\n        :param image_id: the ID of the Image to retrieve\n\n        :rtype: :class:`boto.ec2.image.Image`\n        :return: The EC2 Image specified or None if the image is not found\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_all_images'
op|'('
name|'image_ids'
op|'='
op|'['
name|'image_id'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
comment|'# None of those images available'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|register_image
dedent|''
dedent|''
name|'def'
name|'register_image'
op|'('
name|'self'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'description'
op|'='
name|'None'
op|','
name|'image_location'
op|'='
name|'None'
op|','
nl|'\n'
name|'architecture'
op|'='
name|'None'
op|','
name|'kernel_id'
op|'='
name|'None'
op|','
name|'ramdisk_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'root_device_name'
op|'='
name|'None'
op|','
name|'block_device_map'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register an image.\n\n        :type name: string\n        :param name: The name of the AMI.  Valid only for EBS-based images.\n\n        :type description: string\n        :param description: The description of the AMI.\n\n        :type image_location: string\n        :param image_location: Full path to your AMI manifest in Amazon S3 storage.\n                               Only used for S3-based AMI\'s.\n\n        :type architecture: string\n        :param architecture: The architecture of the AMI.  Valid choices are:\n                             i386 | x86_64\n\n        :type kernel_id: string\n        :param kernel_id: The ID of the kernel with which to launch the instances\n\n        :type root_device_name: string\n        :param root_device_name: The root device name (e.g. /dev/sdh)\n\n        :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping`\n        :param block_device_map: A BlockDeviceMapping data structure\n                                 describing the EBS volumes associated\n                                 with the Image.\n\n        :rtype: string\n        :return: The new image id\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Name'"
op|']'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'if'
name|'description'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Description'"
op|']'
op|'='
name|'description'
newline|'\n'
dedent|''
name|'if'
name|'architecture'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Architecture'"
op|']'
op|'='
name|'architecture'
newline|'\n'
dedent|''
name|'if'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'KernelId'"
op|']'
op|'='
name|'kernel_id'
newline|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RamdiskId'"
op|']'
op|'='
name|'ramdisk_id'
newline|'\n'
dedent|''
name|'if'
name|'image_location'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ImageLocation'"
op|']'
op|'='
name|'image_location'
newline|'\n'
dedent|''
name|'if'
name|'root_device_name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RootDeviceName'"
op|']'
op|'='
name|'root_device_name'
newline|'\n'
dedent|''
name|'if'
name|'block_device_map'
op|':'
newline|'\n'
indent|'            '
name|'block_device_map'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|')'
newline|'\n'
dedent|''
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'RegisterImage'"
op|','
name|'params'
op|','
name|'ResultSet'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'getattr'
op|'('
name|'rs'
op|','
string|"'imageId'"
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'image_id'
newline|'\n'
nl|'\n'
DECL|member|deregister_image
dedent|''
name|'def'
name|'deregister_image'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Unregister an AMI.\n\n        :type image_id: string\n        :param image_id: the ID of the Image to unregister\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeregisterImage'"
op|','
op|'{'
string|"'ImageId'"
op|':'
name|'image_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_image
dedent|''
name|'def'
name|'create_image'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'name'
op|','
name|'description'
op|'='
name|'None'
op|','
name|'no_reboot'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Will create an AMI from the instance in the running or stopped\n        state.\n        \n        :type instance_id: string\n        :param instance_id: the ID of the instance to image.\n\n        :type name: string\n        :param name: The name of the new image\n\n        :type description: string\n        :param description: An optional human-readable string describing\n                            the contents and purpose of the AMI.\n\n        :type no_reboot: bool\n        :param no_reboot: An optional flag indicating that the bundling process\n                          should not attempt to shutdown the instance before\n                          bundling.  If this flag is True, the responsibility\n                          of maintaining file system integrity is left to the\n                          owner of the instance.\n        \n        :rtype: string\n        :return: The new image id\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'Name'"
op|':'
name|'name'
op|'}'
newline|'\n'
name|'if'
name|'description'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Description'"
op|']'
op|'='
name|'description'
newline|'\n'
dedent|''
name|'if'
name|'no_reboot'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'NoReboot'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateImage'"
op|','
name|'params'
op|','
name|'Image'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'getattr'
op|'('
name|'rs'
op|','
string|"'imageId'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'image_id'
op|':'
newline|'\n'
indent|'            '
name|'image_id'
op|'='
name|'getattr'
op|'('
name|'rs'
op|','
string|"'ImageId'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'image_id'
newline|'\n'
nl|'\n'
comment|'# ImageAttribute methods'
nl|'\n'
nl|'\n'
DECL|member|get_image_attribute
dedent|''
name|'def'
name|'get_image_attribute'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'attribute'
op|'='
string|"'launchPermission'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets an attribute from an image.\n        See http://docs.amazonwebservices.com/AWSEC2/2008-02-01/DeveloperGuide/ApiReference-Query-DescribeImageAttribute.html\n\n        :type image_id: string\n        :param image_id: The Amazon image id for which you want info about\n\n        :type attribute: string\n        :param attribute: The attribute you need information about.\n                          Valid choices are:\n                          * launchPermission\n                          * productCodes\n                          * blockDeviceMapping\n\n        :rtype: :class:`boto.ec2.image.ImageAttribute`\n        :return: An ImageAttribute object representing the value of the attribute requested\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ImageId'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'DescribeImageAttribute'"
op|','
name|'params'
op|','
name|'ImageAttribute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_image_attribute
dedent|''
name|'def'
name|'modify_image_attribute'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'attribute'
op|'='
string|"'launchPermission'"
op|','
nl|'\n'
name|'operation'
op|'='
string|"'add'"
op|','
name|'user_ids'
op|'='
name|'None'
op|','
name|'groups'
op|'='
name|'None'
op|','
nl|'\n'
name|'product_codes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Changes an attribute of an image.\n        See http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-query-ModifyImageAttribute.html\n\n        :type image_id: string\n        :param image_id: The image id you wish to change\n\n        :type attribute: string\n        :param attribute: The attribute you wish to change\n\n        :type operation: string\n        :param operation: Either add or remove (this is required for changing launchPermissions)\n\n        :type user_ids: list\n        :param user_ids: The Amazon IDs of users to add/remove attributes\n\n        :type groups: list\n        :param groups: The groups to add/remove attributes\n\n        :type product_codes: list\n        :param product_codes: Amazon DevPay product code. Currently only one\n                              product code can be associated with an AMI. Once\n                              set, the product code cannot be changed or reset.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ImageId'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|','
nl|'\n'
string|"'OperationType'"
op|':'
name|'operation'
op|'}'
newline|'\n'
name|'if'
name|'user_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'user_ids'
op|','
string|"'UserId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'groups'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'groups'
op|','
string|"'UserGroup'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'product_codes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'product_codes'
op|','
string|"'ProductCode'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ModifyImageAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_image_attribute
dedent|''
name|'def'
name|'reset_image_attribute'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'attribute'
op|'='
string|"'launchPermission'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resets an attribute of an AMI to its default value.\n        See http://docs.amazonwebservices.com/AWSEC2/2008-02-01/DeveloperGuide/ApiReference-Query-ResetImageAttribute.html\n\n        :type image_id: string\n        :param image_id: ID of the AMI for which an attribute will be described\n\n        :type attribute: string\n        :param attribute: The attribute to reset\n\n        :rtype: bool\n        :return: Whether the operation succeeded or not\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ImageId'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ResetImageAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Instance methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_instances
dedent|''
name|'def'
name|'get_all_instances'
op|'('
name|'self'
op|','
name|'instance_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all the instances associated with your account.\n\n        :type instance_ids: list\n        :param instance_ids: A list of strings of instance IDs\n\n        :rtype: list\n        :return: A list of  :class:`boto.ec2.instance.Reservation`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'instance_ids'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Reservation'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_instances
dedent|''
name|'def'
name|'run_instances'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'min_count'
op|'='
number|'1'
op|','
name|'max_count'
op|'='
number|'1'
op|','
nl|'\n'
name|'key_name'
op|'='
name|'None'
op|','
name|'security_groups'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_data'
op|'='
name|'None'
op|','
name|'addressing_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
string|"'m1.small'"
op|','
name|'placement'
op|'='
name|'None'
op|','
nl|'\n'
name|'kernel_id'
op|'='
name|'None'
op|','
name|'ramdisk_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'monitoring_enabled'
op|'='
name|'False'
op|','
name|'subnet_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_map'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_initiated_shutdown_behavior'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Runs an image on EC2.\n\n        :type image_id: string\n        :param image_id: The ID of the image to run\n\n        :type min_count: int\n        :param min_count: The minimum number of instances to launch\n\n        :type max_count: int\n        :param max_count: The maximum number of instances to launch\n\n        :type key_name: string\n        :param key_name: The name of the key pair with which to launch instances\n\n        :type security_groups: list of strings\n        :param security_groups: The names of the security groups with which to associate instances\n\n        :type user_data: string\n        :param user_data: The user data passed to the launched instances\n\n        :type instance_type: string\n        :param instance_type: The type of instance to run (m1.small, m1.large, m1.xlarge)\n\n        :type placement: string\n        :param placement: The availability zone in which to launch the instances\n\n        :type kernel_id: string\n        :param kernel_id: The ID of the kernel with which to launch the instances\n\n        :type ramdisk_id: string\n        :param ramdisk_id: The ID of the RAM disk with which to launch the instances\n\n        :type monitoring_enabled: bool\n        :param monitoring_enabled: Enable CloudWatch monitoring on the instance.\n\n        :type subnet_id: string\n        :param subnet_id: The subnet ID within which to launch the instances for VPC.\n\n        :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping`\n        :param block_device_map: A BlockDeviceMapping data structure\n                                 describing the EBS volumes associated\n                                 with the Image.\n\n        :type instance_initiated_shutdown_behavior: string\n        :param instance_initiated_shutdown_behavior: Specifies whether the instance\'s\n                                                     EBS volues are stopped (i.e. detached)\n                                                     or terminated (i.e. deleted) when\n                                                     the instance is shutdown by the\n                                                     owner.  Valid values are:\n                                                     stop | terminate\n\n        :rtype: Reservation\n        :return: The :class:`boto.ec2.instance.Reservation` associated with the request for machines\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ImageId'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'MinCount'"
op|':'
name|'min_count'
op|','
nl|'\n'
string|"'MaxCount'"
op|':'
name|'max_count'
op|'}'
newline|'\n'
name|'if'
name|'key_name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'KeyName'"
op|']'
op|'='
name|'key_name'
newline|'\n'
dedent|''
name|'if'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'group'
op|','
name|'SecurityGroup'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'append'
op|'('
name|'group'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'append'
op|'('
name|'group'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'l'
op|','
string|"'SecurityGroup'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'user_data'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'UserData'"
op|']'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'user_data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'addressing_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AddressingType'"
op|']'
op|'='
name|'addressing_type'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'InstanceType'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
dedent|''
name|'if'
name|'placement'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Placement.AvailabilityZone'"
op|']'
op|'='
name|'placement'
newline|'\n'
dedent|''
name|'if'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'KernelId'"
op|']'
op|'='
name|'kernel_id'
newline|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RamdiskId'"
op|']'
op|'='
name|'ramdisk_id'
newline|'\n'
dedent|''
name|'if'
name|'monitoring_enabled'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Monitoring.Enabled'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'if'
name|'subnet_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SubnetId'"
op|']'
op|'='
name|'subnet_id'
newline|'\n'
dedent|''
name|'if'
name|'block_device_map'
op|':'
newline|'\n'
indent|'            '
name|'block_device_map'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance_initiated_shutdown_behavior'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'instance_initiated_shutdown_behavior'
newline|'\n'
name|'params'
op|'['
string|"'InstanceInitiatedShutdownBehavior'"
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'RunInstances'"
op|','
name|'params'
op|','
name|'Reservation'
op|','
name|'verb'
op|'='
string|"'POST'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|terminate_instances
dedent|''
name|'def'
name|'terminate_instances'
op|'('
name|'self'
op|','
name|'instance_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Terminate the instances specified\n\n        :type instance_ids: list\n        :param instance_ids: A list of strings of the Instance IDs to terminate\n\n        :rtype: list\n        :return: A list of the instances terminated\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'instance_ids'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'TerminateInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Instance'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop_instances
dedent|''
name|'def'
name|'stop_instances'
op|'('
name|'self'
op|','
name|'instance_ids'
op|'='
name|'None'
op|','
name|'force'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Stop the instances specified\n        \n        :type instance_ids: list\n        :param instance_ids: A list of strings of the Instance IDs to stop\n\n        :type force: bool\n        :param force: Forces the instance to stop\n        \n        :rtype: list\n        :return: A list of the instances stopped\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'force'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Force'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'instance_ids'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'StopInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Instance'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_instances
dedent|''
name|'def'
name|'start_instances'
op|'('
name|'self'
op|','
name|'instance_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Start the instances specified\n        \n        :type instance_ids: list\n        :param instance_ids: A list of strings of the Instance IDs to start\n        \n        :rtype: list\n        :return: A list of the instances started\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'instance_ids'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'StartInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Instance'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_console_output
dedent|''
name|'def'
name|'get_console_output'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieves the console output for the specified instance.\n        See http://docs.amazonwebservices.com/AWSEC2/2008-02-01/DeveloperGuide/ApiReference-Query-GetConsoleOutput.html\n\n        :type instance_id: string\n        :param instance_id: The instance ID of a running instance on the cloud.\n\n        :rtype: :class:`boto.ec2.instance.ConsoleOutput`\n        :return: The console output as a ConsoleOutput object\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
op|'['
name|'instance_id'
op|']'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'GetConsoleOutput'"
op|','
name|'params'
op|','
name|'ConsoleOutput'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reboot_instances
dedent|''
name|'def'
name|'reboot_instances'
op|'('
name|'self'
op|','
name|'instance_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Reboot the specified instances.\n\n        :type instance_ids: list\n        :param instance_ids: The instances to terminate and reboot\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'instance_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'instance_ids'
op|','
string|"'InstanceId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'RebootInstances'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|confirm_product_instance
dedent|''
name|'def'
name|'confirm_product_instance'
op|'('
name|'self'
op|','
name|'product_code'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'ProductCode'"
op|':'
name|'product_code'
op|','
nl|'\n'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'ConfirmProductInstance'"
op|','
name|'params'
op|','
name|'ResultSet'
op|')'
newline|'\n'
name|'return'
op|'('
name|'rs'
op|'.'
name|'status'
op|','
name|'rs'
op|'.'
name|'ownerId'
op|')'
newline|'\n'
nl|'\n'
comment|'# InstanceAttribute methods'
nl|'\n'
nl|'\n'
DECL|member|get_instance_attribute
dedent|''
name|'def'
name|'get_instance_attribute'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'attribute'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets an attribute from an instance.\n\n        :type instance_id: string\n        :param instance_id: The Amazon id of the instance\n\n        :type attribute: string\n        :param attribute: The attribute you need information about\n                          Valid choices are:\n                          instanceType|kernel|ramdisk|userData|\n                          disableApiTermination|\n                          instanceInitiatedShutdownBehavior|\n                          rootDeviceName|blockDeviceMapping\n\n        :rtype: :class:`boto.ec2.image.ImageAttribute`\n        :return: An ImageAttribute object representing the value of the attribute requested\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'if'
name|'attribute'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Attribute'"
op|']'
op|'='
name|'attribute'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'DescribeInstanceAttribute'"
op|','
name|'params'
op|','
name|'InstanceAttribute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_instance_attribute
dedent|''
name|'def'
name|'modify_instance_attribute'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'attribute'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Changes an attribute of an instance\n\n        :type instance_id: string\n        :param instance_id: The instance id you wish to change\n\n        :type attribute: string\n        :param attribute: The attribute you wish to change.\n                          AttributeName - Expected value (default)\n                          instanceType - A valid instance type (m1.small)\n                          kernel - Kernel ID (None)\n                          ramdisk - Ramdisk ID (None)\n                          userData - Base64 encoded String (None)\n                          disableApiTermination - Boolean (true)\n                          instanceInitiatedShutdownBehavior - stop|terminate\n                          rootDeviceName - device name (None)\n\n        :type value: string\n        :param value: The new value for the attribute\n\n        :rtype: bool\n        :return: Whether the operation succeeded or not\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|','
nl|'\n'
string|"'Value'"
op|':'
name|'value'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ModifyInstanceAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_instance_attribute
dedent|''
name|'def'
name|'reset_instance_attribute'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'attribute'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resets an attribute of an instance to its default value.\n\n        :type instance_id: string\n        :param instance_id: ID of the instance\n\n        :type attribute: string\n        :param attribute: The attribute to reset. Valid values are:\n                          kernel|ramdisk\n\n        :rtype: bool\n        :return: Whether the operation succeeded or not\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ResetInstanceAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Spot Instances'
nl|'\n'
nl|'\n'
DECL|member|get_all_spot_instance_requests
dedent|''
name|'def'
name|'get_all_spot_instance_requests'
op|'('
name|'self'
op|','
name|'request_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve all the spot instances requests associated with your account.\n        \n        @type request_ids: list\n        @param request_ids: A list of strings of spot instance request IDs\n        \n        @rtype: list\n        @return: A list of\n                 :class:`boto.ec2.spotinstancerequest.SpotInstanceRequest`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'request_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'request_ids'
op|','
string|"'SpotInstanceRequestId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeSpotInstanceRequests'"
op|','
name|'params'
op|','
nl|'\n'
op|'['
op|'('
string|"'item'"
op|','
name|'SpotInstanceRequest'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_spot_price_history
dedent|''
name|'def'
name|'get_spot_price_history'
op|'('
name|'self'
op|','
name|'start_time'
op|'='
name|'None'
op|','
name|'end_time'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'None'
op|','
name|'product_description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve the recent history of spot instances pricing.\n        \n        @type start_time: str\n        @param start_time: An indication of how far back to provide price\n                           changes for. An ISO8601 DateTime string.\n        \n        @type end_time: str\n        @param end_time: An indication of how far forward to provide price\n                         changes for.  An ISO8601 DateTime string.\n        \n        @type instance_type: str\n        @param instance_type: Filter responses to a particular instance type.\n        \n        @type product_description: str\n        @param product_descripton: Filter responses to a particular platform.\n                                   Valid values are currently: Linux\n        \n        @rtype: list\n        @return: A list tuples containing price and timestamp.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'start_time'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'StartTime'"
op|']'
op|'='
name|'start_time'
newline|'\n'
dedent|''
name|'if'
name|'end_time'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'EndTime'"
op|']'
op|'='
name|'end_time'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'InstanceType'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
dedent|''
name|'if'
name|'product_description'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ProductDescription'"
op|']'
op|'='
name|'product_description'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeSpotPriceHistory'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'SpotPriceHistory'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|request_spot_instances
dedent|''
name|'def'
name|'request_spot_instances'
op|'('
name|'self'
op|','
name|'price'
op|','
name|'image_id'
op|','
name|'count'
op|'='
number|'1'
op|','
name|'type'
op|'='
name|'None'
op|','
nl|'\n'
name|'valid_from'
op|'='
name|'None'
op|','
name|'valid_until'
op|'='
name|'None'
op|','
nl|'\n'
name|'launch_group'
op|'='
name|'None'
op|','
name|'availability_zone_group'
op|'='
name|'None'
op|','
nl|'\n'
name|'key_name'
op|'='
name|'None'
op|','
name|'security_groups'
op|'='
name|'None'
op|','
nl|'\n'
name|'user_data'
op|'='
name|'None'
op|','
name|'addressing_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
string|"'m1.small'"
op|','
name|'placement'
op|'='
name|'None'
op|','
nl|'\n'
name|'kernel_id'
op|'='
name|'None'
op|','
name|'ramdisk_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'monitoring_enabled'
op|'='
name|'False'
op|','
name|'subnet_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_map'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Request instances on the spot market at a particular price.\n\n        :type price: str\n        :param price: The maximum price of your bid\n        \n        :type image_id: string\n        :param image_id: The ID of the image to run\n\n        :type count: int\n        :param count: The of instances to requested\n        \n        :type type: str\n        :param type: Type of request. Can be \'one-time\' or \'persistent\'.\n                     Default is one-time.\n\n        :type valid_from: str\n        :param valid_from: Start date of the request. An ISO8601 time string.\n\n        :type valid_until: str\n        :param valid_until: End date of the request.  An ISO8601 time string.\n\n        :type launch_group: str\n        :param launch_group: If supplied, all requests will be fulfilled\n                             as a group.\n                             \n        :type availability_zone_group: str\n        :param availability_zone_group: If supplied, all requests will be fulfilled\n                                        within a single availability zone.\n                             \n        :type key_name: string\n        :param key_name: The name of the key pair with which to launch instances\n\n        :type security_groups: list of strings\n        :param security_groups: The names of the security groups with which to associate instances\n\n        :type user_data: string\n        :param user_data: The user data passed to the launched instances\n\n        :type instance_type: string\n        :param instance_type: The type of instance to run (m1.small, m1.large, m1.xlarge)\n\n        :type placement: string\n        :param placement: The availability zone in which to launch the instances\n\n        :type kernel_id: string\n        :param kernel_id: The ID of the kernel with which to launch the instances\n\n        :type ramdisk_id: string\n        :param ramdisk_id: The ID of the RAM disk with which to launch the instances\n\n        :type monitoring_enabled: bool\n        :param monitoring_enabled: Enable CloudWatch monitoring on the instance.\n\n        :type subnet_id: string\n        :param subnet_id: The subnet ID within which to launch the instances for VPC.\n\n        :type block_device_map: :class:`boto.ec2.blockdevicemapping.BlockDeviceMapping`\n        :param block_device_map: A BlockDeviceMapping data structure\n                                 describing the EBS volumes associated\n                                 with the Image.\n\n        :rtype: Reservation\n        :return: The :class:`boto.ec2.instance.Reservation` associated with the request for machines\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'LaunchSpecification.ImageId'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'SpotPrice'"
op|':'
name|'price'
op|'}'
newline|'\n'
name|'if'
name|'count'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'InstanceCount'"
op|']'
op|'='
name|'count'
newline|'\n'
dedent|''
name|'if'
name|'valid_from'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ValidFrom'"
op|']'
op|'='
name|'valid_from'
newline|'\n'
dedent|''
name|'if'
name|'valid_until'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ValidUntil'"
op|']'
op|'='
name|'valid_until'
newline|'\n'
dedent|''
name|'if'
name|'launch_group'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchGroup'"
op|']'
op|'='
name|'launch_group'
newline|'\n'
dedent|''
name|'if'
name|'availability_zone_group'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AvailabilityZoneGroup'"
op|']'
op|'='
name|'availability_zone_group'
newline|'\n'
dedent|''
name|'if'
name|'key_name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.KeyName'"
op|']'
op|'='
name|'key_name'
newline|'\n'
dedent|''
name|'if'
name|'security_groups'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'group'
name|'in'
name|'security_groups'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'group'
op|','
name|'SecurityGroup'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'append'
op|'('
name|'group'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'l'
op|'.'
name|'append'
op|'('
name|'group'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'l'
op|','
nl|'\n'
string|"'LaunchSpecification.SecurityGroup'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'user_data'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.UserData'"
op|']'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'user_data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'addressing_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.AddressingType'"
op|']'
op|'='
name|'addressing_type'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.InstanceType'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
dedent|''
name|'if'
name|'placement'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.Placement.AvailabilityZone'"
op|']'
op|'='
name|'placement'
newline|'\n'
dedent|''
name|'if'
name|'kernel_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.KernelId'"
op|']'
op|'='
name|'kernel_id'
newline|'\n'
dedent|''
name|'if'
name|'ramdisk_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.RamdiskId'"
op|']'
op|'='
name|'ramdisk_id'
newline|'\n'
dedent|''
name|'if'
name|'monitoring_enabled'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.Monitoring.Enabled'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'if'
name|'subnet_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'LaunchSpecification.SubnetId'"
op|']'
op|'='
name|'subnet_id'
newline|'\n'
dedent|''
name|'if'
name|'block_device_map'
op|':'
newline|'\n'
indent|'            '
name|'block_device_map'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
string|"'LaunchSpecification.'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'RequestSpotInstances'"
op|','
name|'params'
op|','
nl|'\n'
op|'['
op|'('
string|"'item'"
op|','
name|'SpotInstanceRequest'
op|')'
op|']'
op|','
nl|'\n'
name|'verb'
op|'='
string|"'POST'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|cancel_spot_instance_requests
dedent|''
name|'def'
name|'cancel_spot_instance_requests'
op|'('
name|'self'
op|','
name|'request_ids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel the specified Spot Instance Requests.\n        \n        :type request_ids: list\n        :param request_ids: A list of strings of the Request IDs to terminate\n        \n        :rtype: list\n        :return: A list of the instances terminated\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'request_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'request_ids'
op|','
string|"'SpotInstanceRequestId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'CancelSpotInstanceRequests'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Instance'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_spot_datafeed_subscription
dedent|''
name|'def'
name|'get_spot_datafeed_subscription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the current spot instance data feed subscription\n        associated with this account, if any.\n        \n        :rtype: :class:`boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription`\n        :return: The datafeed subscription object or None\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'DescribeSpotDatafeedSubscription'"
op|','
nl|'\n'
name|'None'
op|','
name|'SpotDatafeedSubscription'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_spot_datafeed_subscription
dedent|''
name|'def'
name|'create_spot_datafeed_subscription'
op|'('
name|'self'
op|','
name|'bucket'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a spot instance datafeed subscription for this account.\n\n        :type bucket: str or unicode\n        :param bucket: The name of the bucket where spot instance data\n                       will be written.  The account issuing this request\n                       must have FULL_CONTROL access to the bucket\n                       specified in the request.\n\n        :type prefix: str or unicode\n        :param prefix: An optional prefix that will be pre-pended to all\n                       data files written to the bucket.\n                       \n        :rtype: :class:`boto.ec2.spotdatafeedsubscription.SpotDatafeedSubscription`\n        :return: The datafeed subscription object or None\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Bucket'"
op|':'
name|'bucket'
op|'}'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Prefix'"
op|']'
op|'='
name|'prefix'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateSpotDatafeedSubscription'"
op|','
nl|'\n'
name|'params'
op|','
name|'SpotDatafeedSubscription'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_spot_datafeed_subscription
dedent|''
name|'def'
name|'delete_spot_datafeed_subscription'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete the current spot instance data feed subscription\n        associated with this account\n        \n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteSpotDatafeedSubscription'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Zone methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_zones
dedent|''
name|'def'
name|'get_all_zones'
op|'('
name|'self'
op|','
name|'zones'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all Availability Zones associated with the current region.\n\n        :type zones: list\n        :param zones: Optional list of zones.  If this list is present,\n                      only the Zones associated with these zone names\n                      will be returned.\n\n        :rtype: list of L{boto.ec2.zone.Zone}\n        :return: The requested Zone objects\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'zones'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'zones'
op|','
string|"'ZoneName'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeAvailabilityZones'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Zone'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Address methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_addresses
dedent|''
name|'def'
name|'get_all_addresses'
op|'('
name|'self'
op|','
name|'addresses'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all EIP\'s associated with the current credentials.\n\n        :type addresses: list\n        :param addresses: Optional list of addresses.  If this list is present,\n                           only the Addresses associated with these addresses\n                           will be returned.\n\n        :rtype: list of L{boto.ec2.address.Address}\n        :return: The requested Address objects\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'addresses'
op|','
string|"'PublicIp'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeAddresses'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Address'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|allocate_address
dedent|''
name|'def'
name|'allocate_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Allocate a new Elastic IP address and associate it with your account.\n\n        :rtype: L{boto.ec2.address.Address}\n        :return: The newly allocated Address\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'AllocateAddress'"
op|','
name|'None'
op|','
name|'Address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|associate_address
dedent|''
name|'def'
name|'associate_address'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Associate an Elastic IP address with a currently running instance.\n\n        :type instance_id: string\n        :param instance_id: The ID of the instance\n\n        :type public_ip: string\n        :param public_ip: The public IP address\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
string|"'PublicIp'"
op|':'
name|'public_ip'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'AssociateAddress'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|disassociate_address
dedent|''
name|'def'
name|'disassociate_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disassociate an Elastic IP address from a currently running instance.\n\n        :type public_ip: string\n        :param public_ip: The public IP address\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'PublicIp'"
op|':'
name|'public_ip'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DisassociateAddress'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|release_address
dedent|''
name|'def'
name|'release_address'
op|'('
name|'self'
op|','
name|'public_ip'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Free up an Elastic IP address\n\n        :type public_ip: string\n        :param public_ip: The public IP address\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'PublicIp'"
op|':'
name|'public_ip'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ReleaseAddress'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Volume methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_volumes
dedent|''
name|'def'
name|'get_all_volumes'
op|'('
name|'self'
op|','
name|'volume_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all Volumes associated with the current credentials.\n\n        :type volume_ids: list\n        :param volume_ids: Optional list of volume ids.  If this list is present,\n                           only the volumes associated with these volume ids\n                           will be returned.\n\n        :rtype: list of L{boto.ec2.volume.Volume}\n        :return: The requested Volume objects\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'volume_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'volume_ids'
op|','
string|"'VolumeId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeVolumes'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Volume'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_volume
dedent|''
name|'def'
name|'create_volume'
op|'('
name|'self'
op|','
name|'size'
op|','
name|'zone'
op|','
name|'snapshot'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new EBS Volume.\n\n        :type size: int\n        :param size: The size of the new volume, in GiB\n\n        :type zone: string or L{boto.ec2.zone.Zone}\n        :param zone: The availability zone in which the Volume will be created.\n\n        :type snapshot: string or L{boto.ec2.snapshot.Snapshot}\n        :param snapshot: The snapshot from which the new Volume will be created.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'zone'
op|','
name|'Zone'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'zone'
op|'='
name|'zone'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'AvailabilityZone'"
op|':'
name|'zone'
op|'}'
newline|'\n'
name|'if'
name|'size'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Size'"
op|']'
op|'='
name|'size'
newline|'\n'
dedent|''
name|'if'
name|'snapshot'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'snapshot'
op|','
name|'Snapshot'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'snapshot'
op|'='
name|'snapshot'
op|'.'
name|'id'
newline|'\n'
dedent|''
name|'params'
op|'['
string|"'SnapshotId'"
op|']'
op|'='
name|'snapshot'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateVolume'"
op|','
name|'params'
op|','
name|'Volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_volume
dedent|''
name|'def'
name|'delete_volume'
op|'('
name|'self'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete an EBS volume.\n\n        :type volume_id: str\n        :param volume_id: The ID of the volume to be delete.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VolumeId'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteVolume'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|','
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Attach an EBS volume to an EC2 instance.\n\n        :type volume_id: str\n        :param volume_id: The ID of the EBS volume to be attached.\n\n        :type instance_id: str\n        :param instance_id: The ID of the EC2 instance to which it will\n                            be attached.\n\n        :type device: str\n        :param device: The device on the instance through which the\n                       volume will be exposted (e.g. /dev/sdh)\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'VolumeId'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'Device'"
op|':'
name|'device'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'AttachVolume'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|'='
name|'None'
op|','
name|'device'
op|'='
name|'None'
op|','
name|'force'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Detach an EBS volume from an EC2 instance.\n\n        :type volume_id: str\n        :param volume_id: The ID of the EBS volume to be attached.\n\n        :type instance_id: str\n        :param instance_id: The ID of the EC2 instance from which it will\n                            be detached.\n\n        :type device: str\n        :param device: The device on the instance through which the\n                       volume is exposted (e.g. /dev/sdh)\n\n        :type force: bool\n        :param force: Forces detachment if the previous detachment attempt did\n                      not occur cleanly.  This option can lead to data loss or\n                      a corrupted file system. Use this option only as a last\n                      resort to detach a volume from a failed instance. The\n                      instance will not have an opportunity to flush file system\n                      caches nor file system meta data. If you use this option,\n                      you must perform file system check and repair procedures.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VolumeId'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'if'
name|'instance_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'InstanceId'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
dedent|''
name|'if'
name|'device'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Device'"
op|']'
op|'='
name|'device'
newline|'\n'
dedent|''
name|'if'
name|'force'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Force'"
op|']'
op|'='
string|"'true'"
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DetachVolume'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Snapshot methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_snapshots
dedent|''
name|'def'
name|'get_all_snapshots'
op|'('
name|'self'
op|','
name|'snapshot_ids'
op|'='
name|'None'
op|','
name|'owner'
op|'='
name|'None'
op|','
name|'restorable_by'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all EBS Snapshots associated with the current credentials.\n\n        :type snapshot_ids: list\n        :param snapshot_ids: Optional list of snapshot ids.  If this list is present,\n                           only the Snapshots associated with these snapshot ids\n                           will be returned.\n\n        :type owner: str\n        :param owner: If present, only the snapshots owned by the specified user\n                      will be returned.  Valid values are:\n                      self | amazon | AWS Account ID\n\n        :type restorable_by: str\n        :param restorable_by: If present, only the snapshots that are restorable\n                              by the specified account id will be returned.\n\n        :rtype: list of L{boto.ec2.snapshot.Snapshot}\n        :return: The requested Snapshot objects\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'snapshot_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'snapshot_ids'
op|','
string|"'SnapshotId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'owner'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Owner'"
op|']'
op|'='
name|'owner'
newline|'\n'
dedent|''
name|'if'
name|'restorable_by'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'RestorableBy'"
op|']'
op|'='
name|'restorable_by'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeSnapshots'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'Snapshot'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_snapshot
dedent|''
name|'def'
name|'create_snapshot'
op|'('
name|'self'
op|','
name|'volume_id'
op|','
name|'description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a snapshot of an existing EBS Volume.\n\n        :type volume_id: str\n        :param volume_id: The ID of the volume to be snapshot\'ed\n\n        :type description: str\n        :param description: A description of the snapshot.  Limited to 255 characters.\n\n        :rtype: bool\n        :return: True if successful\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'VolumeId'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'if'
name|'description'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'Description'"
op|']'
op|'='
name|'description'
op|'['
number|'0'
op|':'
number|'255'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateSnapshot'"
op|','
name|'params'
op|','
name|'Snapshot'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_snapshot
dedent|''
name|'def'
name|'delete_snapshot'
op|'('
name|'self'
op|','
name|'snapshot_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'SnapshotId'"
op|':'
name|'snapshot_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteSnapshot'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_snapshot_attribute
dedent|''
name|'def'
name|'get_snapshot_attribute'
op|'('
name|'self'
op|','
name|'snapshot_id'
op|','
name|'attribute'
op|'='
string|"'createVolumePermission'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get information about an attribute of a snapshot.  Only one attribute can be\n        specified per call.\n\n        :type snapshot_id: str\n        :param snapshot_id: The ID of the snapshot.\n\n        :type attribute: str\n        :param attribute: The requested attribute.  Valid values are:\n                          createVolumePermission\n\n        :rtype: list of L{boto.ec2.snapshotattribute.SnapshotAttribute}\n        :return: The requested Snapshot attribute\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Attribute'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'if'
name|'snapshot_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SnapshotId'"
op|']'
op|'='
name|'snapshot_id'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'DescribeSnapshotAttribute'"
op|','
name|'params'
op|','
name|'SnapshotAttribute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify_snapshot_attribute
dedent|''
name|'def'
name|'modify_snapshot_attribute'
op|'('
name|'self'
op|','
name|'snapshot_id'
op|','
name|'attribute'
op|'='
string|"'createVolumePermission'"
op|','
nl|'\n'
name|'operation'
op|'='
string|"'add'"
op|','
name|'user_ids'
op|'='
name|'None'
op|','
name|'groups'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Changes an attribute of an image.\n\n        :type snapshot_id: string\n        :param snapshot_id: The snapshot id you wish to change\n\n        :type attribute: string\n        :param attribute: The attribute you wish to change.  Valid values are:\n                          createVolumePermission\n\n        :type operation: string\n        :param operation: Either add or remove (this is required for changing\n                          snapshot ermissions)\n\n        :type user_ids: list\n        :param user_ids: The Amazon IDs of users to add/remove attributes\n\n        :type groups: list\n        :param groups: The groups to add/remove attributes.  The only valid\n                       value at this time is \'all\'.\n\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'SnapshotId'"
op|':'
name|'snapshot_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|','
nl|'\n'
string|"'OperationType'"
op|':'
name|'operation'
op|'}'
newline|'\n'
name|'if'
name|'user_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'user_ids'
op|','
string|"'UserId'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'groups'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'groups'
op|','
string|"'UserGroup'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ModifySnapshotAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset_snapshot_attribute
dedent|''
name|'def'
name|'reset_snapshot_attribute'
op|'('
name|'self'
op|','
name|'snapshot_id'
op|','
name|'attribute'
op|'='
string|"'createVolumePermission'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resets an attribute of a snapshot to its default value.\n\n        :type snapshot_id: string\n        :param snapshot_id: ID of the snapshot\n\n        :type attribute: string\n        :param attribute: The attribute to reset\n\n        :rtype: bool\n        :return: Whether the operation succeeded or not\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'SnapshotId'"
op|':'
name|'snapshot_id'
op|','
nl|'\n'
string|"'Attribute'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ResetSnapshotAttribute'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# Keypair methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_key_pairs
dedent|''
name|'def'
name|'get_all_key_pairs'
op|'('
name|'self'
op|','
name|'keynames'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all key pairs associated with your account.\n\n        :type keynames: list\n        :param keynames: A list of the names of keypairs to retrieve.\n                         If not provided, all key pairs will be returned.\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.keypair.KeyPair`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'keynames'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'keynames'
op|','
string|"'KeyName'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeKeyPairs'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'KeyPair'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_key_pair
dedent|''
name|'def'
name|'get_key_pair'
op|'('
name|'self'
op|','
name|'keyname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convenience method to retrieve a specific keypair (KeyPair).\n\n        :type image_id: string\n        :param image_id: the ID of the Image to retrieve\n\n        :rtype: :class:`boto.ec2.keypair.KeyPair`\n        :return: The KeyPair specified or None if it is not found\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'get_all_key_pairs'
op|'('
name|'keynames'
op|'='
op|'['
name|'keyname'
op|']'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'IndexError'
op|':'
comment|'# None of those key pairs available'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|create_key_pair
dedent|''
dedent|''
name|'def'
name|'create_key_pair'
op|'('
name|'self'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new key pair for your account.\n        This will create the key pair within the region you\n        are currently connected to.\n\n        :type key_name: string\n        :param key_name: The name of the new keypair\n\n        :rtype: :class:`boto.ec2.keypair.KeyPair`\n        :return: The newly created :class:`boto.ec2.keypair.KeyPair`.\n                 The material attribute of the new KeyPair object\n                 will contain the the unencrypted PEM encoded RSA private key.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'KeyName'"
op|':'
name|'key_name'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateKeyPair'"
op|','
name|'params'
op|','
name|'KeyPair'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_key_pair
dedent|''
name|'def'
name|'delete_key_pair'
op|'('
name|'self'
op|','
name|'key_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a key pair from your account.\n\n        :type key_name: string\n        :param key_name: The name of the keypair to delete\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'KeyName'"
op|':'
name|'key_name'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteKeyPair'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'# SecurityGroup methods'
nl|'\n'
nl|'\n'
DECL|member|get_all_security_groups
dedent|''
name|'def'
name|'get_all_security_groups'
op|'('
name|'self'
op|','
name|'groupnames'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all security groups associated with your account in a region.\n\n        :type groupnames: list\n        :param groupnames: A list of the names of security groups to retrieve.\n                           If not provided, all security groups will be returned.\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.securitygroup.SecurityGroup`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'groupnames'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'groupnames'
op|','
string|"'GroupName'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeSecurityGroups'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'SecurityGroup'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_security_group
dedent|''
name|'def'
name|'create_security_group'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new security group for your account.\n        This will create the security group within the region you\n        are currently connected to.\n\n        :type name: string\n        :param name: The name of the new security group\n\n        :type description: string\n        :param description: The description of the new security group\n\n        :rtype: :class:`boto.ec2.securitygroup.SecurityGroup`\n        :return: The newly created :class:`boto.ec2.keypair.KeyPair`.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'GroupName'"
op|':'
name|'name'
op|','
string|"'GroupDescription'"
op|':'
name|'description'
op|'}'
newline|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateSecurityGroup'"
op|','
name|'params'
op|','
name|'SecurityGroup'
op|')'
newline|'\n'
name|'group'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'group'
op|'.'
name|'description'
op|'='
name|'description'
newline|'\n'
name|'return'
name|'group'
newline|'\n'
nl|'\n'
DECL|member|delete_security_group
dedent|''
name|'def'
name|'delete_security_group'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a security group from your account.\n\n        :type key_name: string\n        :param key_name: The name of the keypair to delete\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'GroupName'"
op|':'
name|'name'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteSecurityGroup'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authorize_security_group
dedent|''
name|'def'
name|'authorize_security_group'
op|'('
name|'self'
op|','
name|'group_name'
op|','
name|'src_security_group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'src_security_group_owner_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'ip_protocol'
op|'='
name|'None'
op|','
name|'from_port'
op|'='
name|'None'
op|','
name|'to_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'cidr_ip'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a new rule to an existing security group.\n        You need to pass in either src_security_group_name and\n        src_security_group_owner_id OR ip_protocol, from_port, to_port,\n        and cidr_ip.  In other words, either you are authorizing another\n        group or you are authorizing some ip-based rule.\n\n        :type group_name: string\n        :param group_name: The name of the security group you are adding\n                           the rule to.\n\n        :type src_security_group_name: string\n        :param src_security_group_name: The name of the security group you are\n                                        granting access to.\n\n        :type src_security_group_owner_id: string\n        :param src_security_group_owner_id: The ID of the owner of the security group you are\n                                            granting access to.\n\n        :type ip_protocol: string\n        :param ip_protocol: Either tcp | udp | icmp\n\n        :type from_port: int\n        :param from_port: The beginning port number you are enabling\n\n        :type to_port: int\n        :param to_port: The ending port number you are enabling\n\n        :type to_port: string\n        :param to_port: The CIDR block you are providing access to.\n                        See http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\n\n        :rtype: bool\n        :return: True if successful.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'GroupName'"
op|':'
name|'group_name'
op|'}'
newline|'\n'
name|'if'
name|'src_security_group_name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SourceSecurityGroupName'"
op|']'
op|'='
name|'src_security_group_name'
newline|'\n'
dedent|''
name|'if'
name|'src_security_group_owner_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SourceSecurityGroupOwnerId'"
op|']'
op|'='
name|'src_security_group_owner_id'
newline|'\n'
dedent|''
name|'if'
name|'ip_protocol'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'IpProtocol'"
op|']'
op|'='
name|'ip_protocol'
newline|'\n'
dedent|''
name|'if'
name|'from_port'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'FromPort'"
op|']'
op|'='
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'to_port'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ToPort'"
op|']'
op|'='
name|'to_port'
newline|'\n'
dedent|''
name|'if'
name|'cidr_ip'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'CidrIp'"
op|']'
op|'='
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'cidr_ip'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'AuthorizeSecurityGroupIngress'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|revoke_security_group
dedent|''
name|'def'
name|'revoke_security_group'
op|'('
name|'self'
op|','
name|'group_name'
op|','
name|'src_security_group_name'
op|'='
name|'None'
op|','
nl|'\n'
name|'src_security_group_owner_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'ip_protocol'
op|'='
name|'None'
op|','
name|'from_port'
op|'='
name|'None'
op|','
name|'to_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'cidr_ip'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove an existing rule from an existing security group.\n        You need to pass in either src_security_group_name and\n        src_security_group_owner_id OR ip_protocol, from_port, to_port,\n        and cidr_ip.  In other words, either you are revoking another\n        group or you are revoking some ip-based rule.\n\n        :type group_name: string\n        :param group_name: The name of the security group you are removing\n                           the rule from.\n\n        :type src_security_group_name: string\n        :param src_security_group_name: The name of the security group you are\n                                        revoking access to.\n\n        :type src_security_group_owner_id: string\n        :param src_security_group_owner_id: The ID of the owner of the security group you are\n                                            revoking access to.\n\n        :type ip_protocol: string\n        :param ip_protocol: Either tcp | udp | icmp\n\n        :type from_port: int\n        :param from_port: The beginning port number you are disabling\n\n        :type to_port: int\n        :param to_port: The ending port number you are disabling\n\n        :type to_port: string\n        :param to_port: The CIDR block you are revoking access to.\n                        See http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\n\n        :rtype: bool\n        :return: True if successful.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'GroupName'"
op|':'
name|'group_name'
op|'}'
newline|'\n'
name|'if'
name|'src_security_group_name'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SourceSecurityGroupName'"
op|']'
op|'='
name|'src_security_group_name'
newline|'\n'
dedent|''
name|'if'
name|'src_security_group_owner_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'SourceSecurityGroupOwnerId'"
op|']'
op|'='
name|'src_security_group_owner_id'
newline|'\n'
dedent|''
name|'if'
name|'ip_protocol'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'IpProtocol'"
op|']'
op|'='
name|'ip_protocol'
newline|'\n'
dedent|''
name|'if'
name|'from_port'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'FromPort'"
op|']'
op|'='
name|'from_port'
newline|'\n'
dedent|''
name|'if'
name|'to_port'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ToPort'"
op|']'
op|'='
name|'to_port'
newline|'\n'
dedent|''
name|'if'
name|'cidr_ip'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'CidrIp'"
op|']'
op|'='
name|'cidr_ip'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'RevokeSecurityGroupIngress'"
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Regions'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|member|get_all_regions
dedent|''
name|'def'
name|'get_all_regions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get all available regions for the EC2 service.\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.regioninfo.RegionInfo`\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeRegions'"
op|','
name|'None'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'RegionInfo'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Reservation methods'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|member|get_all_reserved_instances_offerings
dedent|''
name|'def'
name|'get_all_reserved_instances_offerings'
op|'('
name|'self'
op|','
name|'reserved_instances_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'None'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'None'
op|','
nl|'\n'
name|'product_description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Describes Reserved Instance offerings that are available for purchase.\n\n        :type reserved_instances_id: str\n        :param reserved_instances_id: Displays Reserved Instances with the specified offering IDs.\n\n        :type instance_type: str\n        :param instance_type: Displays Reserved Instances of the specified instance type.\n\n        :type availability_zone: str\n        :param availability_zone: Displays Reserved Instances within the specified Availability Zone.\n\n        :type product_description: str\n        :param product_description: Displays Reserved Instances with the specified product description.\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.reservedinstance.ReservedInstancesOffering`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'reserved_instances_id'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ReservedInstancesId'"
op|']'
op|'='
name|'reserved_instances_id'
newline|'\n'
dedent|''
name|'if'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'InstanceType'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
dedent|''
name|'if'
name|'availability_zone'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'AvailabilityZone'"
op|']'
op|'='
name|'availability_zone'
newline|'\n'
dedent|''
name|'if'
name|'product_description'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'ProductDescription'"
op|']'
op|'='
name|'product_description'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeReservedInstancesOfferings'"
op|','
nl|'\n'
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'ReservedInstancesOffering'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_reserved_instances
dedent|''
name|'def'
name|'get_all_reserved_instances'
op|'('
name|'self'
op|','
name|'reserved_instances_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Describes Reserved Instance offerings that are available for purchase.\n\n        :type reserved_instance_ids: list\n        :param reserved_instance_ids: A list of the reserved instance ids that will be returned.\n                                      If not provided, all reserved instances will be returned.\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.reservedinstance.ReservedInstance`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'reserved_instances_id'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'reserved_instances_id'
op|','
string|"'ReservedInstancesId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeReservedInstances'"
op|','
nl|'\n'
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'ReservedInstance'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|purchase_reserved_instance_offering
dedent|''
name|'def'
name|'purchase_reserved_instance_offering'
op|'('
name|'self'
op|','
name|'reserved_instances_offering_id'
op|','
nl|'\n'
name|'instance_count'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Purchase a Reserved Instance for use with your account.\n        ** CAUTION **\n        This request can result in large amounts of money being charged to your\n        AWS account.  Use with caution!\n\n        :type reserved_instances_offering_id: string\n        :param reserved_instances_offering_id: The offering ID of the Reserved\n                                               Instance to purchase\n\n        :type instance_count: int\n        :param instance_count: The number of Reserved Instances to purchase.\n                               Default value is 1.\n\n        :rtype: :class:`boto.ec2.reservedinstance.ReservedInstance`\n        :return: The newly created Reserved Instance\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ReservedInstancesOfferingId'"
op|':'
name|'reserved_instances_offering_id'
op|','
nl|'\n'
string|"'InstanceCount'"
op|':'
name|'instance_count'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'PurchaseReservedInstancesOffering'"
op|','
name|'params'
op|','
name|'ReservedInstance'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Monitoring'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|member|monitor_instance
dedent|''
name|'def'
name|'monitor_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Enable CloudWatch monitoring for the supplied instance.\n\n        :type instance_id: string\n        :param instance_id: The instance id\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'MonitorInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'InstanceInfo'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unmonitor_instance
dedent|''
name|'def'
name|'unmonitor_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Disable CloudWatch monitoring for the supplied instance.\n\n        :type instance_id: string\n        :param instance_id: The instance id\n\n        :rtype: list\n        :return: A list of :class:`boto.ec2.instanceinfo.InstanceInfo`\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'UnmonitorInstances'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'InstanceInfo'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# '
nl|'\n'
comment|'# Bundle Windows Instances'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|member|bundle_instance
dedent|''
name|'def'
name|'bundle_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'s3_bucket'
op|','
nl|'\n'
name|'s3_prefix'
op|','
nl|'\n'
name|'s3_upload_policy'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Bundle Windows instance.\n\n        :type instance_id: string\n        :param instance_id: The instance id\n\n        :type s3_bucket: string\n        :param s3_bucket: The bucket in which the AMI should be stored.\n\n        :type s3_prefix: string\n        :param s3_prefix: The beginning of the file name for the AMI.\n\n        :type s3_upload_policy: string\n        :param s3_upload_policy: Base64 encoded policy that specifies condition and permissions\n                                 for Amazon EC2 to upload the user\'s image into Amazon S3.\n        """'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'Storage.S3.Bucket'"
op|':'
name|'s3_bucket'
op|','
nl|'\n'
string|"'Storage.S3.Prefix'"
op|':'
name|'s3_prefix'
op|','
nl|'\n'
string|"'Storage.S3.UploadPolicy'"
op|':'
name|'s3_upload_policy'
op|'}'
newline|'\n'
name|'params'
op|'['
string|"'Storage.S3.AWSAccessKeyId'"
op|']'
op|'='
name|'self'
op|'.'
name|'aws_access_key_id'
newline|'\n'
name|'local_hmac'
op|'='
name|'self'
op|'.'
name|'hmac'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'local_hmac'
op|'.'
name|'update'
op|'('
name|'s3_upload_policy'
op|')'
newline|'\n'
name|'s3_upload_policy_signature'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'local_hmac'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'['
string|"'Storage.S3.UploadPolicySignature'"
op|']'
op|'='
name|'s3_upload_policy_signature'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'BundleInstance'"
op|','
name|'params'
op|','
name|'BundleInstanceTask'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_bundle_tasks
dedent|''
name|'def'
name|'get_all_bundle_tasks'
op|'('
name|'self'
op|','
name|'bundle_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Retrieve current bundling tasks. If no bundle id is specified, all tasks are retrieved.\n\n        :type bundle_ids: list\n        :param bundle_ids: A list of strings containing identifiers for \n                           previously created bundling tasks. \n        """'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'bundle_ids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'bundle_ids'
op|','
string|"'BundleId'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'DescribeBundleTasks'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'item'"
op|','
name|'BundleInstanceTask'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel_bundle_task
dedent|''
name|'def'
name|'cancel_bundle_task'
op|'('
name|'self'
op|','
name|'bundle_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Cancel a previously submitted bundle task\n \n        :type bundle_id: string\n        :param bundle_id: The identifier of the bundle task to cancel.\n        """'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'BundleId'"
op|':'
name|'bundle_id'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CancelBundleTask'"
op|','
name|'params'
op|','
name|'BundleInstanceTask'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_password_data
dedent|''
name|'def'
name|'get_password_data'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Get encrypted administrator password for a Windows instance.\n\n        :type instance_id: string\n        :param instance_id: The identifier of the instance to retrieve the password for.\n        """'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'InstanceId'"
op|':'
name|'instance_id'
op|'}'
newline|'\n'
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'GetPasswordData'"
op|','
name|'params'
op|','
name|'ResultSet'
op|')'
newline|'\n'
name|'return'
name|'rs'
op|'.'
name|'passwordData'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

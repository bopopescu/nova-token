begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nRepresents an EC2 Keypair\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'ec2object'
name|'import'
name|'EC2Object'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'BotoClientError'
newline|'\n'
nl|'\n'
DECL|class|KeyPair
name|'class'
name|'KeyPair'
op|'('
name|'EC2Object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'EC2Object'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fingerprint'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'material'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'KeyPair:%s'"
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'keyName'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'name'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'keyFingerprint'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fingerprint'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'keyMaterial'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'material'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete the KeyPair.\n        \n        :rtype: bool\n        :return: True if successful, otherwise False.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'delete_key_pair'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|save
dedent|''
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'directory_path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Save the material (the unencrypted PEM encoded RSA private key)\n        of a newly created KeyPair to a local file.\n        \n        :type directory_path: string\n        :param directory_path: The fully qualified path to the directory\n                               in which the keypair will be saved.  The\n                               keypair file will be named using the name\n                               of the keypair as the base name and .pem\n                               for the file extension.  If a file of that\n                               name already exists in the directory, an\n                               exception will be raised and the old file\n                               will not be overwritten.\n        \n        :rtype: bool\n        :return: True if successful.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'material'
op|':'
newline|'\n'
indent|'            '
name|'file_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory_path'
op|','
string|"'%s.pem'"
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'BotoClientError'
op|'('
string|"'%s already exists, it will not be overwritten'"
op|'%'
name|'file_path'
op|')'
newline|'\n'
dedent|''
name|'fp'
op|'='
name|'open'
op|'('
name|'file_path'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'material'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BotoClientError'
op|'('
string|"'KeyPair contains no material'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|copy_to_region
dedent|''
dedent|''
name|'def'
name|'copy_to_region'
op|'('
name|'self'
op|','
name|'region'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a new key pair of the same new in another region.\n        Note that the new key pair will use a different ssh\n        cert than the this key pair.  After doing the copy,\n        you will need to save the material associated with the\n        new key pair (use the save method) to a local file.\n\n        :type region: :class:`boto.ec2.regioninfo.RegionInfo`\n        :param region: The region to which this security group will be copied.\n\n        :rtype: :class:`boto.ec2.keypair.KeyPair`\n        :return: The new key pair\n        """'
newline|'\n'
name|'if'
name|'region'
op|'.'
name|'name'
op|'=='
name|'self'
op|'.'
name|'region'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'BotoClientError'
op|'('
string|"'Unable to copy to the same Region'"
op|')'
newline|'\n'
dedent|''
name|'conn_params'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_params'
op|'('
op|')'
newline|'\n'
name|'rconn'
op|'='
name|'region'
op|'.'
name|'connect'
op|'('
op|'**'
name|'conn_params'
op|')'
newline|'\n'
name|'kp'
op|'='
name|'rconn'
op|'.'
name|'create_key_pair'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'return'
name|'kp'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nSQS Message\n\nA Message represents the data stored in an SQS queue.  The rules for what is allowed within an SQS\nMessage are here:\n\n    http://docs.amazonwebservices.com/AWSSimpleQueueService/2008-01-01/SQSDeveloperGuide/Query_QuerySendMessage.html\n\nSo, at it\'s simplest level a Message just needs to allow a developer to store bytes in it and get the bytes\nback out.  However, to allow messages to have richer semantics, the Message class must support the \nfollowing interfaces:\n\nThe constructor for the Message class must accept a keyword parameter "queue" which is an instance of a\nboto Queue object and represents the queue that the message will be stored in.  The default value for\nthis parameter is None.\n\nThe constructor for the Message class must accept a keyword parameter "body" which represents the\ncontent or body of the message.  The format of this parameter will depend on the behavior of the\nparticular Message subclass.  For example, if the Message subclass provides dictionary-like behavior to the\nuser the body passed to the constructor should be a dict-like object that can be used to populate\nthe initial state of the message.\n\nThe Message class must provide an encode method that accepts a value of the same type as the body\nparameter of the constructor and returns a string of characters that are able to be stored in an\nSQS message body (see rules above).\n\nThe Message class must provide a decode method that accepts a string of characters that can be\nstored (and probably were stored!) in an SQS message and return an object of a type that is consistent\nwith the "body" parameter accepted on the class constructor.\n\nThe Message class must provide a __len__ method that will return the size of the encoded message\nthat would be stored in SQS based on the current state of the Message object.\n\nThe Message class must provide a get_body method that will return the body of the message in the\nsame format accepted in the constructor of the class.\n\nThe Message class must provide a set_body method that accepts a message body in the same format\naccepted by the constructor of the class.  This method should alter to the internal state of the\nMessage object to reflect the state represented in the message body parameter.\n\nThe Message class must provide a get_body_encoded method that returns the current body of the message\nin the format in which it would be stored in SQS.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sqs'
op|'.'
name|'attributes'
name|'import'
name|'Attributes'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'SQSDecodeError'
newline|'\n'
nl|'\n'
DECL|class|RawMessage
name|'class'
name|'RawMessage'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Base class for SQS messages.  RawMessage does not encode the message\n    in any way.  Whatever you store in the body of the message is what\n    will be written to SQS and whatever is returned from SQS is stored\n    directly into the body of the message.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'queue'
op|'='
name|'None'
op|','
name|'body'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'queue'
op|'='
name|'queue'
newline|'\n'
name|'self'
op|'.'
name|'set_body'
op|'('
name|'body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'id'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'receipt_handle'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'md5'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'attributes'
op|'='
name|'Attributes'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'encode'
op|'('
name|'self'
op|'.'
name|'_body'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startElement
dedent|''
name|'def'
name|'startElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'attrs'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'Attribute'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'attributes'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|endElement
dedent|''
name|'def'
name|'endElement'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
string|"'Body'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'set_body'
op|'('
name|'self'
op|'.'
name|'decode'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'MessageId'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'id'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'ReceiptHandle'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'receipt_handle'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'elif'
name|'name'
op|'=='
string|"'MD5OfMessageBody'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'md5'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transform body object into serialized byte array format."""'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transform seralized byte array into any object."""'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|set_body
dedent|''
name|'def'
name|'set_body'
op|'('
name|'self'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override the current body for this object, using decoded format."""'
newline|'\n'
name|'self'
op|'.'
name|'_body'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|member|get_body
dedent|''
name|'def'
name|'get_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
newline|'\n'
nl|'\n'
DECL|member|get_body_encoded
dedent|''
name|'def'
name|'get_body_encoded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        This method is really a semi-private method used by the Queue.write\n        method when writing the contents of the message to SQS.\n        You probably shouldn\'t need to call this method in the normal course of events.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'encode'
op|'('
name|'self'
op|'.'
name|'get_body'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'queue'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'delete_message'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|change_visibility
dedent|''
dedent|''
name|'def'
name|'change_visibility'
op|'('
name|'self'
op|','
name|'visibility_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'queue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'connection'
op|'.'
name|'change_message_visibility'
op|'('
name|'self'
op|'.'
name|'queue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'receipt_handle'
op|','
nl|'\n'
name|'visibility_timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Message
dedent|''
dedent|''
dedent|''
name|'class'
name|'Message'
op|'('
name|'RawMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The default Message class used for SQS queues.  This class automatically\n    encodes/decodes the message body using Base64 encoding to avoid any\n    illegal characters in the message body.  See:\n\n    http://developer.amazonwebservices.com/connect/thread.jspa?messageID=49680%EC%88%90\n\n    for details on why this is a good idea.  The encode/decode is meant to\n    be transparent to the end-user.\n    """'
newline|'\n'
nl|'\n'
DECL|member|encode
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SQSDecodeError'
op|'('
string|"'Unable to decode message'"
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|class|MHMessage
dedent|''
dedent|''
name|'class'
name|'MHMessage'
op|'('
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The MHMessage class provides a message that provides RFC821-like\n    headers like this:\n\n    HeaderName: HeaderValue\n\n    The encoding/decoding of this is handled automatically and after\n    the message body has been read, the message instance can be treated\n    like a mapping object, i.e. m[\'HeaderName\'] would return \'HeaderValue\'.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'queue'
op|'='
name|'None'
op|','
name|'body'
op|'='
name|'None'
op|','
name|'xml_attrs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'body'
op|'=='
name|'None'
name|'or'
name|'body'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'Message'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'fp'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'value'
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
name|'while'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'delim'
op|'='
name|'line'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'key'
op|'='
name|'line'
op|'['
number|'0'
op|':'
name|'delim'
op|']'
newline|'\n'
name|'value'
op|'='
name|'line'
op|'['
name|'delim'
op|'+'
number|'1'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'['
name|'key'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'line'
op|'='
name|'fp'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SQSDecodeError'
op|'('
string|"'Unable to decode message'"
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'msg'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'value'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'='
name|'s'
op|'+'
string|"'%s: %s\\n'"
op|'%'
op|'('
name|'item'
op|'['
number|'0'
op|']'
op|','
name|'item'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'has_key'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'KeyError'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_body'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'set_body'
op|'('
name|'self'
op|'.'
name|'_body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|keys
dedent|''
name|'def'
name|'keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|values
dedent|''
name|'def'
name|'values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|items
dedent|''
name|'def'
name|'items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|has_key
dedent|''
name|'def'
name|'has_key'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'has_key'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_body'
op|'.'
name|'update'
op|'('
name|'d'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_body'
op|'('
name|'self'
op|'.'
name|'_body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_body'
op|'.'
name|'get'
op|'('
name|'key'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|class|EncodedMHMessage
dedent|''
dedent|''
name|'class'
name|'EncodedMHMessage'
op|'('
name|'MHMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The EncodedMHMessage class provides a message that provides RFC821-like\n    headers like this:\n\n    HeaderName: HeaderValue\n\n    This variation encodes/decodes the body of the message in base64 automatically.\n    The message instance can be treated like a mapping object,\n    i.e. m[\'HeaderName\'] would return \'HeaderValue\'.\n    """'
newline|'\n'
nl|'\n'
DECL|member|decode
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SQSDecodeError'
op|'('
string|"'Unable to decode message'"
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'MHMessage'
op|'.'
name|'decode'
op|'('
name|'self'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'MHMessage'
op|'.'
name|'encode'
op|'('
name|'value'
op|')'
newline|'\n'
name|'return'
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'self'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

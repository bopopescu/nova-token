begin_unit
comment|'# Copyright (c) 2006-2009 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
name|'from'
name|'boto'
op|'.'
name|'connection'
name|'import'
name|'AWSQueryConnection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sqs'
op|'.'
name|'regioninfo'
name|'import'
name|'SQSRegionInfo'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sqs'
op|'.'
name|'queue'
name|'import'
name|'Queue'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sqs'
op|'.'
name|'message'
name|'import'
name|'Message'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'sqs'
op|'.'
name|'attributes'
name|'import'
name|'Attributes'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'SQSError'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SQSConnection
name|'class'
name|'SQSConnection'
op|'('
name|'AWSQueryConnection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A Connection to the SQS Service.\n    """'
newline|'\n'
DECL|variable|DefaultRegionName
name|'DefaultRegionName'
op|'='
string|"'us-east-1'"
newline|'\n'
DECL|variable|DefaultRegionEndpoint
name|'DefaultRegionEndpoint'
op|'='
string|"'queue.amazonaws.com'"
newline|'\n'
DECL|variable|APIVersion
name|'APIVersion'
op|'='
string|"'2009-02-01'"
newline|'\n'
DECL|variable|SignatureVersion
name|'SignatureVersion'
op|'='
string|"'2'"
newline|'\n'
DECL|variable|DefaultContentType
name|'DefaultContentType'
op|'='
string|"'text/plain'"
newline|'\n'
DECL|variable|ResponseError
name|'ResponseError'
op|'='
name|'SQSError'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|'='
name|'None'
op|','
name|'aws_secret_access_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'True'
op|','
name|'port'
op|'='
name|'None'
op|','
name|'proxy'
op|'='
name|'None'
op|','
name|'proxy_port'
op|'='
name|'None'
op|','
nl|'\n'
name|'proxy_user'
op|'='
name|'None'
op|','
name|'proxy_pass'
op|'='
name|'None'
op|','
name|'debug'
op|'='
number|'0'
op|','
nl|'\n'
name|'https_connection_factory'
op|'='
name|'None'
op|','
name|'region'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|"'/'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'region'
op|':'
newline|'\n'
indent|'            '
name|'region'
op|'='
name|'SQSRegionInfo'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'DefaultRegionName'
op|','
name|'self'
op|'.'
name|'DefaultRegionEndpoint'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'region'
op|'='
name|'region'
newline|'\n'
name|'AWSQueryConnection'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'aws_access_key_id'
op|','
name|'aws_secret_access_key'
op|','
nl|'\n'
name|'is_secure'
op|','
name|'port'
op|','
name|'proxy'
op|','
name|'proxy_port'
op|','
name|'proxy_user'
op|','
name|'proxy_pass'
op|','
nl|'\n'
name|'self'
op|'.'
name|'region'
op|'.'
name|'endpoint'
op|','
name|'debug'
op|','
name|'https_connection_factory'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_queue
dedent|''
name|'def'
name|'create_queue'
op|'('
name|'self'
op|','
name|'queue_name'
op|','
name|'visibility_timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an SQS Queue.\n\n        :type queue_name: str or unicode\n        :param queue_name: The name of the new queue.  Names are scoped to an account and need to\n                           be unique within that account.  Calling this method on an existing\n                           queue name will not return an error from SQS unless the value for\n                           visibility_timeout is different than the value of the existing queue\n                           of that name.  This is still an expensive operation, though, and not\n                           the preferred way to check for the existence of a queue.  See the\n                           :func:`boto.sqs.connection.SQSConnection.lookup` method.\n\n        :type visibility_timeout: int\n        :param visibility_timeout: The default visibility timeout for all messages written in the\n                                   queue.  This can be overridden on a per-message.\n\n        :rtype: :class:`boto.sqs.queue.Queue`\n        :return: The newly created queue.\n\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'QueueName'"
op|':'
name|'queue_name'
op|'}'
newline|'\n'
name|'if'
name|'visibility_timeout'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'DefaultVisibilityTimeout'"
op|']'
op|'='
string|"'%d'"
op|'%'
op|'('
name|'visibility_timeout'
op|','
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'CreateQueue'"
op|','
name|'params'
op|','
name|'Queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_queue
dedent|''
name|'def'
name|'delete_queue'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'force_deletion'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete an SQS Queue.\n\n        :type queue: A Queue object\n        :param queue: The SQS queue to be deleted\n        \n        :type force_deletion: Boolean\n        :param force_deletion: Normally, SQS will not delete a queue that contains messages.\n                               However, if the force_deletion argument is True, the\n                               queue will be deleted regardless of whether there are messages in\n                               the queue or not.  USE WITH CAUTION.  This will delete all\n                               messages in the queue as well.\n                               \n        :rtype: bool\n        :return: True if the command succeeded, False otherwise\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteQueue'"
op|','
name|'None'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_queue_attributes
dedent|''
name|'def'
name|'get_queue_attributes'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'attribute'
op|'='
string|"'All'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Gets one or all attributes of a Queue\n        \n        :type queue: A Queue object\n        :param queue: The SQS queue to be deleted\n\n        :type attribute: str\n        :type attribute: The specific attribute requested.  If not supplied, the default\n                         is to return all attributes.  Valid attributes are:\n                         ApproximateNumberOfMessages,\n                         ApproximateNumberOfMessagesNotVisible,\n                         VisibilityTimeout,\n                         CreatedTimestamp,\n                         LastModifiedTimestamp,\n                         Policy\n                         \n        :rtype: :class:`boto.sqs.attributes.Attributes`\n        :return: An Attributes object containing request value(s).\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'AttributeName'"
op|':'
name|'attribute'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'GetQueueAttributes'"
op|','
name|'params'
op|','
name|'Attributes'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_queue_attribute
dedent|''
name|'def'
name|'set_queue_attribute'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'attribute'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'Attribute.Name'"
op|':'
name|'attribute'
op|','
string|"'Attribute.Value'"
op|':'
name|'value'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'SetQueueAttributes'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|receive_message
dedent|''
name|'def'
name|'receive_message'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'number_messages'
op|'='
number|'1'
op|','
name|'visibility_timeout'
op|'='
name|'None'
op|','
nl|'\n'
name|'attributes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read messages from an SQS Queue.\n\n        :type queue: A Queue object\n        :param queue: The Queue from which messages are read.\n        \n        :type number_messages: int\n        :param number_messages: The maximum number of messages to read (default=1)\n        \n        :type visibility_timeout: int\n        :param visibility_timeout: The number of seconds the message should remain invisible\n                                   to other queue readers (default=None which uses the Queues default)\n\n        :type attributes: str\n        :param attributes: The name of additional attribute to return with response\n                           or All if you want all attributes.  The default is to\n                           return no additional attributes.  Valid values:\n                           All\n                           SenderId\n                           SentTimestamp\n                           ApproximateReceiveCount\n                           ApproximateFirstReceiveTimestamp\n        \n        :rtype: list\n        :return: A list of :class:`boto.sqs.message.Message` objects.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'MaxNumberOfMessages'"
op|':'
name|'number_messages'
op|'}'
newline|'\n'
name|'if'
name|'visibility_timeout'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'VisibilityTimeout'"
op|']'
op|'='
name|'visibility_timeout'
newline|'\n'
dedent|''
name|'if'
name|'attributes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'build_list_params'
op|'('
name|'params'
op|','
name|'attributes'
op|','
string|"'AttributeName'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'ReceiveMessage'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'Message'"
op|','
name|'queue'
op|'.'
name|'message_class'
op|')'
op|']'
op|','
nl|'\n'
name|'queue'
op|'.'
name|'id'
op|','
name|'queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_message
dedent|''
name|'def'
name|'delete_message'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a message from a queue.\n\n        :type queue: A :class:`boto.sqs.queue.Queue` object\n        :param queue: The Queue from which messages are read.\n        \n        :type message: A :class:`boto.sqs.message.Message` object\n        :param message: The Message to be deleted\n        \n        :rtype: bool\n        :return: True if successful, False otherwise.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ReceiptHandle'"
op|':'
name|'message'
op|'.'
name|'receipt_handle'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteMessage'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_message_from_handle
dedent|''
name|'def'
name|'delete_message_from_handle'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'receipt_handle'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete a message from a queue, given a receipt handle.\n\n        :type queue: A :class:`boto.sqs.queue.Queue` object\n        :param queue: The Queue from which messages are read.\n        \n        :type receipt_handle: str\n        :param receipt_handle: The receipt handle for the message\n        \n        :rtype: bool\n        :return: True if successful, False otherwise.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ReceiptHandle'"
op|':'
name|'receipt_handle'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'DeleteMessage'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send_message
dedent|''
name|'def'
name|'send_message'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'message_content'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'MessageBody'"
op|':'
name|'message_content'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_object'
op|'('
string|"'SendMessage'"
op|','
name|'params'
op|','
name|'Message'
op|','
name|'queue'
op|'.'
name|'id'
op|','
name|'verb'
op|'='
string|"'POST'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|change_message_visibility
dedent|''
name|'def'
name|'change_message_visibility'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'receipt_handle'
op|','
name|'visibility_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Extends the read lock timeout for the specified message from the specified queue\n        to the specified value.\n\n        :type queue: A :class:`boto.sqs.queue.Queue` object\n        :param queue: The Queue from which messages are read.\n        \n        :type receipt_handle: str\n        :param queue: The receipt handle associated with the message whose\n                      visibility timeout will be changed.\n        \n        :type visibility_timeout: int\n        :param visibility_timeout: The new value of the message\'s visibility timeout\n                                   in seconds.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'ReceiptHandle'"
op|':'
name|'receipt_handle'
op|','
nl|'\n'
string|"'VisibilityTimeout'"
op|':'
name|'visibility_timeout'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'ChangeMessageVisibility'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_queues
dedent|''
name|'def'
name|'get_all_queues'
op|'('
name|'self'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'['
string|"'QueueNamePrefix'"
op|']'
op|'='
name|'prefix'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'get_list'
op|'('
string|"'ListQueues'"
op|','
name|'params'
op|','
op|'['
op|'('
string|"'QueueUrl'"
op|','
name|'Queue'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_queue
dedent|''
name|'def'
name|'get_queue'
op|'('
name|'self'
op|','
name|'queue_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rs'
op|'='
name|'self'
op|'.'
name|'get_all_queues'
op|'('
name|'queue_name'
op|')'
newline|'\n'
name|'for'
name|'q'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'q'
op|'.'
name|'url'
op|'.'
name|'endswith'
op|'('
name|'queue_name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'q'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|lookup
dedent|''
name|'lookup'
op|'='
name|'get_queue'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permissions methods'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|member|add_permission
name|'def'
name|'add_permission'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'label'
op|','
name|'aws_account_id'
op|','
name|'action_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add a permission to a queue.\n\n        :type queue: :class:`boto.sqs.queue.Queue`\n        :param queue: The queue object\n\n        :type label: str or unicode\n        :param label: A unique identification of the permission you are setting.\n                      Maximum of 80 characters ``[0-9a-zA-Z_-]``\n                      Example, AliceSendMessage\n\n        :type aws_account_id: str or unicode\n        :param principal_id: The AWS account number of the principal who will be given\n                             permission.  The principal must have an AWS account, but\n                             does not need to be signed up for Amazon SQS. For information\n                             about locating the AWS account identification.\n\n        :type action_name: str or unicode\n        :param action_name: The action.  Valid choices are:\n                            \\*|SendMessage|ReceiveMessage|DeleteMessage|\n                            ChangeMessageVisibility|GetQueueAttributes\n\n        :rtype: bool\n        :return: True if successful, False otherwise.\n\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Label'"
op|':'
name|'label'
op|','
nl|'\n'
string|"'AWSAccountId'"
op|':'
name|'aws_account_id'
op|','
nl|'\n'
string|"'ActionName'"
op|':'
name|'action_name'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'AddPermission'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_permission
dedent|''
name|'def'
name|'remove_permission'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Remove a permission from a queue.\n\n        :type queue: :class:`boto.sqs.queue.Queue`\n        :param queue: The queue object\n\n        :type label: str or unicode\n        :param label: The unique label associated with the permission being removed.\n\n        :rtype: bool\n        :return: True if successful, False otherwise.\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'Label'"
op|':'
name|'label'
op|'}'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_status'
op|'('
string|"'RemovePermission'"
op|','
name|'params'
op|','
name|'queue'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2006,2007 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nSome unit tests for the EC2Connection\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
op|'.'
name|'connection'
name|'import'
name|'EC2Connection'
newline|'\n'
name|'import'
name|'telnetlib'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
DECL|class|EC2ConnectionTest
name|'class'
name|'EC2ConnectionTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_1_basic
indent|'    '
name|'def'
name|'test_1_basic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# this is my user_id, if you want to run these tests you should'
nl|'\n'
comment|"# replace this with yours or they won't work"
nl|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'963068290131'"
newline|'\n'
name|'print'
string|"'--- running EC2Connection tests ---'"
newline|'\n'
name|'c'
op|'='
name|'EC2Connection'
op|'('
op|')'
newline|'\n'
comment|"# get list of private AMI's"
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_images'
op|'('
name|'owners'
op|'='
op|'['
name|'user_id'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'rs'
op|')'
op|'>'
number|'0'
newline|'\n'
comment|'# now pick the first one'
nl|'\n'
name|'image'
op|'='
name|'rs'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# temporarily make this image runnable by everyone'
nl|'\n'
name|'status'
op|'='
name|'image'
op|'.'
name|'set_launch_permissions'
op|'('
name|'group_names'
op|'='
op|'['
string|"'all'"
op|']'
op|')'
newline|'\n'
name|'assert'
name|'status'
newline|'\n'
name|'d'
op|'='
name|'image'
op|'.'
name|'get_launch_permissions'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'d'
op|'.'
name|'has_key'
op|'('
string|"'groups'"
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'d'
op|'['
string|"'groups'"
op|']'
op|')'
op|'>'
number|'0'
newline|'\n'
comment|'# now remove that permission'
nl|'\n'
name|'status'
op|'='
name|'image'
op|'.'
name|'remove_launch_permissions'
op|'('
name|'group_names'
op|'='
op|'['
string|"'all'"
op|']'
op|')'
newline|'\n'
name|'assert'
name|'status'
newline|'\n'
name|'d'
op|'='
name|'image'
op|'.'
name|'get_launch_permissions'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'d'
op|'.'
name|'has_key'
op|'('
string|"'groups'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a new security group'
nl|'\n'
name|'group_name'
op|'='
string|"'test-%d'"
op|'%'
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'group_desc'
op|'='
string|"'This is a security group created during unit testing'"
newline|'\n'
name|'group'
op|'='
name|'c'
op|'.'
name|'create_security_group'
op|'('
name|'group_name'
op|','
name|'group_desc'
op|')'
newline|'\n'
comment|'# now get a listing of all security groups and look for our new one'
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'g'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'g'
op|'.'
name|'name'
op|'=='
name|'group_name'
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'assert'
name|'found'
newline|'\n'
comment|'# now pass arg to filter results to only our new group'
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_security_groups'
op|'('
op|'['
name|'group_name'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'rs'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'group'
op|'='
name|'rs'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# now delete the security group'
nl|'\n'
name|'status'
op|'='
name|'c'
op|'.'
name|'delete_security_group'
op|'('
name|'group_name'
op|')'
newline|'\n'
comment|"# now make sure it's really gone"
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'g'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'g'
op|'.'
name|'name'
op|'=='
name|'group_name'
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'assert'
name|'not'
name|'found'
newline|'\n'
comment|'# now create it again for use with the instance test'
nl|'\n'
name|'group'
op|'='
name|'c'
op|'.'
name|'create_security_group'
op|'('
name|'group_name'
op|','
name|'group_desc'
op|')'
newline|'\n'
nl|'\n'
comment|'# now try to launch apache image with our new security group'
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_images'
op|'('
op|')'
newline|'\n'
name|'img_loc'
op|'='
string|"'ec2-public-images/fedora-core4-apache.manifest.xml'"
newline|'\n'
name|'for'
name|'image'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image'
op|'.'
name|'location'
op|'=='
name|'img_loc'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'reservation'
op|'='
name|'image'
op|'.'
name|'run'
op|'('
name|'security_groups'
op|'='
op|'['
name|'group'
op|'.'
name|'name'
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'reservation'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
name|'while'
name|'instance'
op|'.'
name|'state'
op|'!='
string|"'running'"
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'\\tinstance is %s'"
op|'%'
name|'instance'
op|'.'
name|'state'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'30'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
op|')'
newline|'\n'
comment|'# instance in now running, try to telnet to port 80'
nl|'\n'
dedent|''
name|'t'
op|'='
name|'telnetlib'
op|'.'
name|'Telnet'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'open'
op|'('
name|'instance'
op|'.'
name|'dns_name'
op|','
number|'80'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# now open up port 80 and try again, it should work'
nl|'\n'
dedent|''
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'80'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'t'
op|'.'
name|'open'
op|'('
name|'instance'
op|'.'
name|'dns_name'
op|','
number|'80'
op|')'
newline|'\n'
name|'t'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
comment|'# now revoke authorization and try again'
nl|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'80'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'open'
op|'('
name|'instance'
op|'.'
name|'dns_name'
op|','
number|'80'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
comment|'# now kill the instance and delete the security group'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
comment|"# unfortunately, I can't delete the sg within this script"
nl|'\n'
comment|'#sg.delete()'
nl|'\n'
nl|'\n'
comment|'# create a new key pair'
nl|'\n'
name|'key_name'
op|'='
string|"'test-%d'"
op|'%'
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'status'
op|'='
name|'c'
op|'.'
name|'create_key_pair'
op|'('
name|'key_name'
op|')'
newline|'\n'
name|'assert'
name|'status'
newline|'\n'
comment|'# now get a listing of all key pairs and look for our new one'
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_key_pairs'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'name'
op|'=='
name|'key_name'
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'assert'
name|'found'
newline|'\n'
comment|'# now pass arg to filter results to only our new key pair'
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_key_pairs'
op|'('
op|'['
name|'key_name'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'rs'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'key_pair'
op|'='
name|'rs'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# now delete the key pair'
nl|'\n'
name|'status'
op|'='
name|'c'
op|'.'
name|'delete_key_pair'
op|'('
name|'key_name'
op|')'
newline|'\n'
comment|"# now make sure it's really gone"
nl|'\n'
name|'rs'
op|'='
name|'c'
op|'.'
name|'get_all_key_pairs'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'k'
name|'in'
name|'rs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'name'
op|'=='
name|'key_name'
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'assert'
name|'not'
name|'found'
newline|'\n'
nl|'\n'
comment|'# short test around Paid AMI capability'
nl|'\n'
name|'demo_paid_ami_id'
op|'='
string|"'ami-bd9d78d4'"
newline|'\n'
name|'demo_paid_ami_product_code'
op|'='
string|"'A79EC0DB'"
newline|'\n'
name|'l'
op|'='
name|'c'
op|'.'
name|'get_all_images'
op|'('
op|'['
name|'demo_paid_ami_id'
op|']'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'l'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'product_codes'
op|')'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'l'
op|'['
number|'0'
op|']'
op|'.'
name|'product_codes'
op|'['
number|'0'
op|']'
op|'=='
name|'demo_paid_ami_product_code'
newline|'\n'
nl|'\n'
name|'print'
string|"'--- tests completed ---'"
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# -*- coding: utf-8 -*-'
nl|'\n'
comment|'# Copyright (c) 2010 Mitch Garnaat http://garnaat.org/'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Permission is hereby granted, free of charge, to any person obtaining a'
nl|'\n'
comment|'# copy of this software and associated documentation files (the'
nl|'\n'
comment|'# "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'# without limitation the rights to use, copy, modify, merge, publish, dis-'
nl|'\n'
comment|'# tribute, sublicense, and/or sell copies of the Software, and to permit'
nl|'\n'
comment|'# persons to whom the Software is furnished to do so, subject to the fol-'
nl|'\n'
comment|'# lowing conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The above copyright notice and this permission notice shall be included'
nl|'\n'
comment|'# in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS'
nl|'\n'
comment|'# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABIL-'
nl|'\n'
comment|'# ITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT'
nl|'\n'
comment|'# SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, '
nl|'\n'
comment|'# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
nl|'\n'
comment|'# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS'
nl|'\n'
comment|'# IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""\nSome unit tests for the S3 Versioning and MfaDelete\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'connection'
name|'import'
name|'S3Connection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'exception'
name|'import'
name|'S3ResponseError'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'deletemarker'
name|'import'
name|'DeleteMarker'
newline|'\n'
nl|'\n'
DECL|class|S3VersionTest
name|'class'
name|'S3VersionTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_1_versions
indent|'    '
name|'def'
name|'test_1_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'--- running S3Version tests ---'"
newline|'\n'
name|'c'
op|'='
name|'S3Connection'
op|'('
op|')'
newline|'\n'
comment|'# create a new, empty bucket'
nl|'\n'
name|'bucket_name'
op|'='
string|"'version-%d'"
op|'%'
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
newline|'\n'
name|'bucket'
op|'='
name|'c'
op|'.'
name|'create_bucket'
op|'('
name|'bucket_name'
op|')'
newline|'\n'
nl|'\n'
comment|"# now try a get_bucket call and see if it's really there"
nl|'\n'
name|'bucket'
op|'='
name|'c'
op|'.'
name|'get_bucket'
op|'('
name|'bucket_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# enable versions'
nl|'\n'
name|'d'
op|'='
name|'bucket'
op|'.'
name|'get_versioning_status'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'d'
op|'.'
name|'has_key'
op|'('
string|"'Versioning'"
op|')'
newline|'\n'
name|'bucket'
op|'.'
name|'configure_versioning'
op|'('
name|'versioning'
op|'='
name|'True'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
name|'d'
op|'='
name|'bucket'
op|'.'
name|'get_versioning_status'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'d'
op|'['
string|"'Versioning'"
op|']'
op|'=='
string|"'Enabled'"
newline|'\n'
nl|'\n'
comment|'# create a new key in the versioned bucket'
nl|'\n'
name|'k'
op|'='
name|'bucket'
op|'.'
name|'new_key'
op|'('
op|')'
newline|'\n'
name|'k'
op|'.'
name|'name'
op|'='
string|"'foobar'"
newline|'\n'
name|'s1'
op|'='
string|"'This is a test of s3 versioning'"
newline|'\n'
name|'s2'
op|'='
string|"'This is the second test of s3 versioning'"
newline|'\n'
name|'k'
op|'.'
name|'set_contents_from_string'
op|'('
name|'s1'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# remember the version id of this object'
nl|'\n'
name|'v1'
op|'='
name|'k'
op|'.'
name|'version_id'
newline|'\n'
nl|'\n'
comment|'# now get the contents from s3 '
nl|'\n'
name|'o1'
op|'='
name|'k'
op|'.'
name|'get_contents_as_string'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# check to make sure content read from s3 is identical to original'
nl|'\n'
name|'assert'
name|'o1'
op|'=='
name|'s1'
newline|'\n'
nl|'\n'
comment|'# now overwrite that same key with new data'
nl|'\n'
name|'k'
op|'.'
name|'set_contents_from_string'
op|'('
name|'s2'
op|')'
newline|'\n'
name|'v2'
op|'='
name|'k'
op|'.'
name|'version_id'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# now retrieve the contents as a string and compare'
nl|'\n'
name|'s3'
op|'='
name|'k'
op|'.'
name|'get_contents_as_string'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'s3'
op|'=='
name|'s2'
newline|'\n'
nl|'\n'
comment|'# Now list all versions and compare to what we have'
nl|'\n'
name|'rs'
op|'='
name|'bucket'
op|'.'
name|'get_all_versions'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'rs'
op|'['
number|'0'
op|']'
op|'.'
name|'version_id'
op|'=='
name|'v2'
newline|'\n'
name|'assert'
name|'rs'
op|'['
number|'1'
op|']'
op|'.'
name|'version_id'
op|'=='
name|'v1'
newline|'\n'
nl|'\n'
comment|'# Now do a regular list command and make sure only the new key shows up'
nl|'\n'
name|'rs'
op|'='
name|'bucket'
op|'.'
name|'get_all_keys'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'rs'
op|')'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Now do regular delete'
nl|'\n'
name|'bucket'
op|'.'
name|'delete_key'
op|'('
string|"'foobar'"
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now list versions and make sure old versions are there'
nl|'\n'
comment|'# plus the DeleteMarker'
nl|'\n'
name|'rs'
op|'='
name|'bucket'
op|'.'
name|'get_all_versions'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'rs'
op|')'
op|'=='
number|'3'
newline|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'rs'
op|'['
number|'0'
op|']'
op|','
name|'DeleteMarker'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now delete v1 of the key'
nl|'\n'
name|'bucket'
op|'.'
name|'delete_key'
op|'('
string|"'foobar'"
op|','
name|'version_id'
op|'='
name|'v1'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now list versions again and make sure v1 is not there'
nl|'\n'
name|'rs'
op|'='
name|'bucket'
op|'.'
name|'get_all_versions'
op|'('
op|')'
newline|'\n'
name|'versions'
op|'='
op|'['
name|'k'
op|'.'
name|'version_id'
name|'for'
name|'k'
name|'in'
name|'rs'
op|']'
newline|'\n'
name|'assert'
name|'v1'
name|'not'
name|'in'
name|'versions'
newline|'\n'
name|'assert'
name|'v2'
name|'in'
name|'versions'
newline|'\n'
nl|'\n'
comment|'# Now try to enable MfaDelete'
nl|'\n'
name|'mfa_sn'
op|'='
name|'raw_input'
op|'('
string|"'MFA S/N: '"
op|')'
newline|'\n'
name|'mfa_code'
op|'='
name|'raw_input'
op|'('
string|"'MFA Code: '"
op|')'
newline|'\n'
name|'bucket'
op|'.'
name|'configure_versioning'
op|'('
name|'True'
op|','
name|'mfa_delete'
op|'='
name|'True'
op|','
name|'mfa_token'
op|'='
op|'('
name|'mfa_sn'
op|','
name|'mfa_code'
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'5'
op|')'
newline|'\n'
name|'d'
op|'='
name|'bucket'
op|'.'
name|'get_versioning_status'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'d'
op|'['
string|"'Versioning'"
op|']'
op|'=='
string|"'Enabled'"
newline|'\n'
name|'assert'
name|'d'
op|'['
string|"'MfaDelete'"
op|']'
op|'=='
string|"'Enabled'"
newline|'\n'
nl|'\n'
comment|'# Now try to delete v2 without the MFA token'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'bucket'
op|'.'
name|'delete_key'
op|'('
string|"'foobar'"
op|','
name|'version_id'
op|'='
name|'v2'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'S3ResponseError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Now try to delete v2 with the MFA token'
nl|'\n'
dedent|''
name|'mfa_code'
op|'='
name|'raw_input'
op|'('
string|"'MFA Code: '"
op|')'
newline|'\n'
name|'bucket'
op|'.'
name|'delete_key'
op|'('
string|"'foobar'"
op|','
name|'version_id'
op|'='
name|'v2'
op|','
name|'mfa_token'
op|'='
op|'('
name|'mfa_sn'
op|','
name|'mfa_code'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now disable MfaDelete on the bucket'
nl|'\n'
name|'mfa_code'
op|'='
name|'raw_input'
op|'('
string|"'MFA Code: '"
op|')'
newline|'\n'
name|'bucket'
op|'.'
name|'configure_versioning'
op|'('
name|'True'
op|','
name|'mfa_delete'
op|'='
name|'False'
op|','
name|'mfa_token'
op|'='
op|'('
name|'mfa_sn'
op|','
name|'mfa_code'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now suspend Versioning on the bucket'
nl|'\n'
name|'bucket'
op|'.'
name|'configure_versioning'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# now delete all keys and deletemarkers in bucket'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'bucket'
op|'.'
name|'list_versions'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bucket'
op|'.'
name|'delete_key'
op|'('
name|'k'
op|'.'
name|'name'
op|','
name|'version_id'
op|'='
name|'k'
op|'.'
name|'version_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# now delete bucket'
nl|'\n'
dedent|''
name|'c'
op|'.'
name|'delete_bucket'
op|'('
name|'bucket'
op|')'
newline|'\n'
name|'print'
string|"'--- tests completed ---'"
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

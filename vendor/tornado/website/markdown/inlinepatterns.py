begin_unit
string|'"""\nINLINE PATTERNS\n=============================================================================\n\nInline patterns such as *emphasis* are handled by means of auxiliary\nobjects, one per pattern.  Pattern objects must be instances of classes\nthat extend markdown.Pattern.  Each pattern object uses a single regular\nexpression and needs support the following methods:\n\n    pattern.getCompiledRegExp() # returns a regular expression\n\n    pattern.handleMatch(m) # takes a match object and returns\n                           # an ElementTree element or just plain text\n\nAll of python markdown\'s built-in patterns subclass from Pattern,\nbut you can add additional patterns that don\'t.\n\nAlso note that all the regular expressions used by inline must\ncapture the whole block.  For this reason, they all start with\n\'^(.*)\' and end with \'(.*)!\'.  In case with built-in expression\nPattern takes care of adding the "^(.*)" and "(.*)!".\n\nFinally, the order in which regular expressions are applied is very\nimportant - e.g. if we first replace http://.../ links with <a> tags\nand _then_ try to replace inline html, we would end up with a mess.\nSo, we apply the expressions in the following order:\n\n* escape and backticks have to go before everything else, so\n  that we can preempt any markdown patterns by escaping them.\n\n* then we handle auto-links (must be done before inline html)\n\n* then we handle inline HTML.  At this point we will simply\n  replace all inline HTML strings with a placeholder and add\n  the actual HTML to a hash.\n\n* then inline images (must be done before links)\n\n* then bracketed links, first regular then reference-style\n\n* finally we apply strong and emphasis\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'markdown'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'from'
name|'urlparse'
name|'import'
name|'urlparse'
op|','
name|'urlunparse'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'if'
name|'sys'
op|'.'
name|'version'
op|'>='
string|'"3.0"'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'html'
name|'import'
name|'entities'
name|'as'
name|'htmlentitydefs'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'htmlentitydefs'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\nThe actual regular expressions for patterns\n-----------------------------------------------------------------------------\n"""'
newline|'\n'
nl|'\n'
DECL|variable|NOBRACKET
name|'NOBRACKET'
op|'='
string|"r'[^\\]\\[]*'"
newline|'\n'
DECL|variable|BRK
name|'BRK'
op|'='
op|'('
string|"r'\\[('"
nl|'\n'
op|'+'
op|'('
name|'NOBRACKET'
op|'+'
string|"r'(\\['"
op|')'
op|'*'
number|'6'
nl|'\n'
op|'+'
op|'('
name|'NOBRACKET'
op|'+'
string|"r'\\])*'"
op|')'
op|'*'
number|'6'
nl|'\n'
op|'+'
name|'NOBRACKET'
op|'+'
string|"r')\\]'"
op|')'
newline|'\n'
DECL|variable|NOIMG
name|'NOIMG'
op|'='
string|"r'(?<!\\!)'"
newline|'\n'
nl|'\n'
DECL|variable|BACKTICK_RE
name|'BACKTICK_RE'
op|'='
string|"r'(?<!\\\\)(`+)(.+?)(?<!`)\\2(?!`)'"
comment|'# `e=f()` or ``e=f("`")``'
newline|'\n'
DECL|variable|ESCAPE_RE
name|'ESCAPE_RE'
op|'='
string|"r'\\\\(.)'"
comment|'# \\<'
newline|'\n'
DECL|variable|EMPHASIS_RE
name|'EMPHASIS_RE'
op|'='
string|"r'(\\*)([^\\*]*)\\2'"
comment|'# *emphasis*'
newline|'\n'
DECL|variable|STRONG_RE
name|'STRONG_RE'
op|'='
string|"r'(\\*{2}|_{2})(.*?)\\2'"
comment|'# **strong**'
newline|'\n'
DECL|variable|STRONG_EM_RE
name|'STRONG_EM_RE'
op|'='
string|"r'(\\*{3}|_{3})(.*?)\\2'"
comment|'# ***strong***'
newline|'\n'
nl|'\n'
name|'if'
name|'markdown'
op|'.'
name|'SMART_EMPHASIS'
op|':'
newline|'\n'
DECL|variable|EMPHASIS_2_RE
indent|'    '
name|'EMPHASIS_2_RE'
op|'='
string|"r'(?<!\\S)(_)(\\S.*?)\\2'"
comment|'# _emphasis_'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|EMPHASIS_2_RE
indent|'    '
name|'EMPHASIS_2_RE'
op|'='
string|"r'(_)(.*?)\\2'"
comment|'# _emphasis_'
newline|'\n'
nl|'\n'
dedent|''
name|'LINK_RE'
op|'='
name|'NOIMG'
op|'+'
name|'BRK'
op|'+'
string|'r\'\'\'\\(\\s*(<.*?>|((?:(?:\\(.*?\\))|[^\\(\\)]))*?)\\s*(([\'"])(.*)\\12)?\\)\'\'\''
newline|'\n'
comment|'# [text](url) or [text](<url>)'
nl|'\n'
nl|'\n'
DECL|variable|IMAGE_LINK_RE
name|'IMAGE_LINK_RE'
op|'='
string|"r'\\!'"
op|'+'
name|'BRK'
op|'+'
string|"r'\\s*\\((<.*?>|([^\\)]*))\\)'"
newline|'\n'
comment|'# ![alttxt](http://x.com/) or ![alttxt](<http://x.com/>)'
nl|'\n'
DECL|variable|REFERENCE_RE
name|'REFERENCE_RE'
op|'='
name|'NOIMG'
op|'+'
name|'BRK'
op|'+'
string|"r'\\s*\\[([^\\]]*)\\]'"
comment|'# [Google][3]'
newline|'\n'
DECL|variable|IMAGE_REFERENCE_RE
name|'IMAGE_REFERENCE_RE'
op|'='
string|"r'\\!'"
op|'+'
name|'BRK'
op|'+'
string|"'\\s*\\[([^\\]]*)\\]'"
comment|'# ![alt text][2]'
newline|'\n'
DECL|variable|NOT_STRONG_RE
name|'NOT_STRONG_RE'
op|'='
string|"r'( \\* )'"
comment|'# stand-alone * or _'
newline|'\n'
DECL|variable|AUTOLINK_RE
name|'AUTOLINK_RE'
op|'='
string|"r'<((?:f|ht)tps?://[^>]*)>'"
comment|'# <http://www.123.com>'
newline|'\n'
DECL|variable|AUTOMAIL_RE
name|'AUTOMAIL_RE'
op|'='
string|"r'<([^> \\!]*@[^> ]*)>'"
comment|'# <me@example.com>'
newline|'\n'
nl|'\n'
DECL|variable|HTML_RE
name|'HTML_RE'
op|'='
string|"r'(\\<([a-zA-Z/][^\\>]*?|\\!--.*?--)\\>)'"
comment|'# <...>'
newline|'\n'
DECL|variable|ENTITY_RE
name|'ENTITY_RE'
op|'='
string|"r'(&[\\#a-zA-Z0-9]*;)'"
comment|'# &amp;'
newline|'\n'
DECL|variable|LINE_BREAK_RE
name|'LINE_BREAK_RE'
op|'='
string|"r'  \\n'"
comment|'# two spaces at end of line'
newline|'\n'
DECL|variable|LINE_BREAK_2_RE
name|'LINE_BREAK_2_RE'
op|'='
string|"r'  $'"
comment|'# two spaces at end of text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dequote
name|'def'
name|'dequote'
op|'('
name|'string'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove quotes from around a string."""'
newline|'\n'
name|'if'
op|'('
op|'('
name|'string'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
name|'and'
name|'string'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
op|')'
nl|'\n'
name|'or'
op|'('
name|'string'
op|'.'
name|'startswith'
op|'('
string|'"\'"'
op|')'
name|'and'
name|'string'
op|'.'
name|'endswith'
op|'('
string|'"\'"'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'string'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'string'
newline|'\n'
nl|'\n'
DECL|variable|ATTR_RE
dedent|''
dedent|''
name|'ATTR_RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"\\{@([^\\}]*)=([^\\}]*)}"'
op|')'
comment|'# {@id=123}'
newline|'\n'
nl|'\n'
DECL|function|handleAttributes
name|'def'
name|'handleAttributes'
op|'('
name|'text'
op|','
name|'parent'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set values of an element based on attribute definitions ({@id=123})."""'
newline|'\n'
DECL|function|attributeCallback
name|'def'
name|'attributeCallback'
op|'('
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parent'
op|'.'
name|'set'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|','
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"' '"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ATTR_RE'
op|'.'
name|'sub'
op|'('
name|'attributeCallback'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
string|'"""\nThe pattern classes\n-----------------------------------------------------------------------------\n"""'
newline|'\n'
nl|'\n'
DECL|class|Pattern
name|'class'
name|'Pattern'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class that inline patterns subclass. """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|','
name|'markdown_instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create an instant of an inline pattern.\n\n        Keyword arguments:\n\n        * pattern: A regular expression that matches a pattern\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'pattern'
op|'='
name|'pattern'
newline|'\n'
name|'self'
op|'.'
name|'compiled_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"^(.*?)%s(.*?)$"'
op|'%'
name|'pattern'
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
nl|'\n'
comment|'# Api for Markdown to pass safe_mode into instance'
nl|'\n'
name|'self'
op|'.'
name|'safe_mode'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'markdown_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'markdown'
op|'='
name|'markdown_instance'
newline|'\n'
nl|'\n'
DECL|member|getCompiledRegExp
dedent|''
dedent|''
name|'def'
name|'getCompiledRegExp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return a compiled regular expression. """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compiled_re'
newline|'\n'
nl|'\n'
DECL|member|handleMatch
dedent|''
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a ElementTree element from the given match.\n\n        Subclasses should override this method.\n\n        Keyword arguments:\n\n        * m: A re match object containing a match of the pattern.\n\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|type
dedent|''
name|'def'
name|'type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return class name, to define pattern type """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
DECL|variable|BasePattern
dedent|''
dedent|''
name|'BasePattern'
op|'='
name|'Pattern'
comment|'# for backward compatibility'
newline|'\n'
nl|'\n'
DECL|class|SimpleTextPattern
name|'class'
name|'SimpleTextPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a simple text of group(2) of a Pattern. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'text'
op|'=='
name|'markdown'
op|'.'
name|'INLINE_PLACEHOLDER_PREFIX'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|class|SimpleTagPattern
dedent|''
dedent|''
name|'class'
name|'SimpleTagPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return element of type `tag` with a text attribute of group(3)\n    of a Pattern.\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Pattern'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
name|'tag'
newline|'\n'
nl|'\n'
DECL|member|handleMatch
dedent|''
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'text'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubstituteTagPattern
dedent|''
dedent|''
name|'class'
name|'SubstituteTagPattern'
op|'('
name|'SimpleTagPattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a eLement of type `tag` with no children. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BacktickPattern
dedent|''
dedent|''
name|'class'
name|'BacktickPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a `<code>` element containing the matching text. """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'Pattern'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
string|'"code"'
newline|'\n'
nl|'\n'
DECL|member|handleMatch
dedent|''
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'text'
op|'='
name|'markdown'
op|'.'
name|'AtomicString'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DoubleTagPattern
dedent|''
dedent|''
name|'class'
name|'DoubleTagPattern'
op|'('
name|'SimpleTagPattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a ElementTree element nested in tag2 nested in tag1.\n\n    Useful for strong emphasis etc.\n\n    """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tag1'
op|','
name|'tag2'
op|'='
name|'self'
op|'.'
name|'tag'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
newline|'\n'
name|'el1'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
name|'tag1'
op|')'
newline|'\n'
name|'el2'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'SubElement'
op|'('
name|'el1'
op|','
name|'tag2'
op|')'
newline|'\n'
name|'el2'
op|'.'
name|'text'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
newline|'\n'
name|'return'
name|'el1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HtmlPattern
dedent|''
dedent|''
name|'class'
name|'HtmlPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Store raw inline html and return a placeholder. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rawhtml'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'inline'
op|'='
name|'True'
newline|'\n'
name|'place_holder'
op|'='
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'store'
op|'('
name|'rawhtml'
op|')'
newline|'\n'
name|'return'
name|'place_holder'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LinkPattern
dedent|''
dedent|''
name|'class'
name|'LinkPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a link element from the given match. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|'"a"'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'text'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'title'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'11'
op|')'
newline|'\n'
name|'href'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'9'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'href'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'href'
op|'['
number|'0'
op|']'
op|'=='
string|'"<"'
op|':'
newline|'\n'
indent|'                '
name|'href'
op|'='
name|'href'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'el'
op|'.'
name|'set'
op|'('
string|'"href"'
op|','
name|'self'
op|'.'
name|'sanitize_url'
op|'('
name|'href'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'.'
name|'set'
op|'('
string|'"href"'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'            '
name|'title'
op|'='
name|'dequote'
op|'('
name|'title'
op|')'
comment|'#.replace(\'"\', "&quot;")'
newline|'\n'
name|'el'
op|'.'
name|'set'
op|'('
string|'"title"'
op|','
name|'title'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'el'
newline|'\n'
nl|'\n'
DECL|member|sanitize_url
dedent|''
name|'def'
name|'sanitize_url'
op|'('
name|'self'
op|','
name|'url'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Sanitize a url against xss attacks in "safe_mode".\n\n        Rather than specifically blacklisting `javascript:alert("XSS")` and all\n        its aliases (see <http://ha.ckers.org/xss.html>), we whitelist known\n        safe url formats. Most urls contain a network location, however some\n        are known not to (i.e.: mailto links). Script urls do not contain a\n        location. Additionally, for `javascript:...`, the scheme would be\n        "javascript" but some aliases will appear to `urlparse()` to have no\n        scheme. On top of that relative links (i.e.: "foo/bar.html") have no\n        scheme. Therefore we must check "path", "parameters", "query" and\n        "fragment" for any literal colons. We don\'t check "scheme" for colons\n        because it *should* never have any and "netloc" must allow the form:\n        `username:password@host:port`.\n\n        """'
newline|'\n'
name|'locless_schemes'
op|'='
op|'['
string|"''"
op|','
string|"'mailto'"
op|','
string|"'news'"
op|']'
newline|'\n'
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|','
name|'params'
op|','
name|'query'
op|','
name|'fragment'
op|'='
name|'url'
op|'='
name|'urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'safe_url'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'netloc'
op|'!='
string|"''"
name|'or'
name|'scheme'
name|'in'
name|'locless_schemes'
op|':'
newline|'\n'
indent|'            '
name|'safe_url'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'part'
name|'in'
name|'url'
op|'['
number|'2'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|'":"'
name|'in'
name|'part'
op|':'
newline|'\n'
indent|'                '
name|'safe_url'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'safeMode'
name|'and'
name|'not'
name|'safe_url'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'urlunparse'
op|'('
name|'url'
op|')'
newline|'\n'
nl|'\n'
DECL|class|ImagePattern
dedent|''
dedent|''
dedent|''
name|'class'
name|'ImagePattern'
op|'('
name|'LinkPattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a img element from the given match. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|'"img"'
op|')'
newline|'\n'
name|'src_parts'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'9'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'if'
name|'src_parts'
op|':'
newline|'\n'
indent|'            '
name|'src'
op|'='
name|'src_parts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'src'
op|'['
number|'0'
op|']'
op|'=='
string|'"<"'
name|'and'
name|'src'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'">"'
op|':'
newline|'\n'
indent|'                '
name|'src'
op|'='
name|'src'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'el'
op|'.'
name|'set'
op|'('
string|"'src'"
op|','
name|'self'
op|'.'
name|'sanitize_url'
op|'('
name|'src'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'.'
name|'set'
op|'('
string|"'src'"
op|','
string|'""'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'src_parts'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'.'
name|'set'
op|'('
string|"'title'"
op|','
name|'dequote'
op|'('
string|'" "'
op|'.'
name|'join'
op|'('
name|'src_parts'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'markdown'
op|'.'
name|'ENABLE_ATTRIBUTES'
op|':'
newline|'\n'
indent|'            '
name|'truealt'
op|'='
name|'handleAttributes'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|','
name|'el'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'truealt'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'el'
op|'.'
name|'set'
op|'('
string|"'alt'"
op|','
name|'truealt'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
DECL|class|ReferencePattern
dedent|''
dedent|''
name|'class'
name|'ReferencePattern'
op|'('
name|'LinkPattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Match to a stored reference and return link element. """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'m'
op|'.'
name|'group'
op|'('
number|'9'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'id'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'9'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# if we got something like "[Google][]"'
nl|'\n'
comment|'# we\'ll use "google" as the id'
nl|'\n'
indent|'            '
name|'id'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'id'
name|'in'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'references'
op|':'
comment|'# ignore undefined refs'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'href'
op|','
name|'title'
op|'='
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'references'
op|'['
name|'id'
op|']'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'makeTag'
op|'('
name|'href'
op|','
name|'title'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makeTag
dedent|''
name|'def'
name|'makeTag'
op|'('
name|'self'
op|','
name|'href'
op|','
name|'title'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
nl|'\n'
name|'el'
op|'.'
name|'set'
op|'('
string|"'href'"
op|','
name|'self'
op|'.'
name|'sanitize_url'
op|'('
name|'href'
op|')'
op|')'
newline|'\n'
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'.'
name|'set'
op|'('
string|"'title'"
op|','
name|'title'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'el'
op|'.'
name|'text'
op|'='
name|'text'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ImageReferencePattern
dedent|''
dedent|''
name|'class'
name|'ImageReferencePattern'
op|'('
name|'ReferencePattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Match to a stored reference and return img element. """'
newline|'\n'
DECL|member|makeTag
name|'def'
name|'makeTag'
op|'('
name|'self'
op|','
name|'href'
op|','
name|'title'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|'"img"'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'set'
op|'('
string|'"src"'
op|','
name|'self'
op|'.'
name|'sanitize_url'
op|'('
name|'href'
op|')'
op|')'
newline|'\n'
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'            '
name|'el'
op|'.'
name|'set'
op|'('
string|'"title"'
op|','
name|'title'
op|')'
newline|'\n'
dedent|''
name|'el'
op|'.'
name|'set'
op|'('
string|'"alt"'
op|','
name|'text'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutolinkPattern
dedent|''
dedent|''
name|'class'
name|'AutolinkPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Return a link Element given an autolink (`<http://example/com>`). """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|'"a"'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'set'
op|'('
string|"'href'"
op|','
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'text'
op|'='
name|'markdown'
op|'.'
name|'AtomicString'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
DECL|class|AutomailPattern
dedent|''
dedent|''
name|'class'
name|'AutomailPattern'
op|'('
name|'Pattern'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a mailto link Element given an automail link (`<foo@example.com>`).\n    """'
newline|'\n'
DECL|member|handleMatch
name|'def'
name|'handleMatch'
op|'('
name|'self'
op|','
name|'m'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'el'
op|'='
name|'markdown'
op|'.'
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'email'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'email'
op|'.'
name|'startswith'
op|'('
string|'"mailto:"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'email'
op|'='
name|'email'
op|'['
name|'len'
op|'('
string|'"mailto:"'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|function|codepoint2name
dedent|''
name|'def'
name|'codepoint2name'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return entity definition by code, or the code if not defined."""'
newline|'\n'
name|'entity'
op|'='
name|'htmlentitydefs'
op|'.'
name|'codepoint2name'
op|'.'
name|'get'
op|'('
name|'code'
op|')'
newline|'\n'
name|'if'
name|'entity'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'"%s%s;"'
op|'%'
op|'('
name|'markdown'
op|'.'
name|'AMP_SUBSTITUTE'
op|','
name|'entity'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|'"%s#%d;"'
op|'%'
op|'('
name|'markdown'
op|'.'
name|'AMP_SUBSTITUTE'
op|','
name|'code'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'letters'
op|'='
op|'['
name|'codepoint2name'
op|'('
name|'ord'
op|'('
name|'letter'
op|')'
op|')'
name|'for'
name|'letter'
name|'in'
name|'email'
op|']'
newline|'\n'
name|'el'
op|'.'
name|'text'
op|'='
name|'markdown'
op|'.'
name|'AtomicString'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'letters'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mailto'
op|'='
string|'"mailto:"'
op|'+'
name|'email'
newline|'\n'
name|'mailto'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
op|'['
name|'markdown'
op|'.'
name|'AMP_SUBSTITUTE'
op|'+'
string|"'#%d;'"
op|'%'
nl|'\n'
name|'ord'
op|'('
name|'letter'
op|')'
name|'for'
name|'letter'
name|'in'
name|'mailto'
op|']'
op|')'
newline|'\n'
name|'el'
op|'.'
name|'set'
op|'('
string|"'href'"
op|','
name|'mailto'
op|')'
newline|'\n'
name|'return'
name|'el'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

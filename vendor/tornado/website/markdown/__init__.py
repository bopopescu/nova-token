begin_unit
string|'"""\nPython Markdown\n===============\n\nPython Markdown converts Markdown to HTML and can be used as a library or\ncalled from the command line.\n\n## Basic usage as a module:\n\n    import markdown\n    md = Markdown()\n    html = md.convert(your_text_string)\n\n## Basic use from the command line:\n\n    python markdown.py source.txt > destination.html\n\nRun "python markdown.py --help" to see more options.\n\n## Extensions\n\nSee <http://www.freewisdom.org/projects/python-markdown/> for more\ninformation and instructions on how to extend the functionality of\nPython Markdown.  Read that before you try modifying this file.\n\n## Authors and License\n\nStarted by [Manfred Stienstra](http://www.dwerg.net/).  Continued and\nmaintained  by [Yuri Takhteyev](http://www.freewisdom.org), [Waylan\nLimberg](http://achinghead.com/) and [Artem Yunusov](http://blog.splyer.com).\n\nContact: markdown@freewisdom.org\n\nCopyright 2007, 2008 The Python Markdown Project (v. 1.7 and later)\nCopyright 200? Django Software Foundation (OrderedDict implementation)\nCopyright 2004, 2005, 2006 Yuri Takhteyev (v. 0.2-1.6b)\nCopyright 2004 Manfred Stienstra (the original version)\n\nLicense: BSD (see docs/LICENSE for details).\n"""'
newline|'\n'
nl|'\n'
DECL|variable|version
name|'version'
op|'='
string|'"2.0"'
newline|'\n'
DECL|variable|version_info
name|'version_info'
op|'='
op|'('
number|'2'
op|','
number|'0'
op|','
number|'0'
op|','
string|'"Final"'
op|')'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'codecs'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'from'
name|'logging'
name|'import'
name|'DEBUG'
op|','
name|'INFO'
op|','
name|'WARN'
op|','
name|'ERROR'
op|','
name|'CRITICAL'
newline|'\n'
nl|'\n'
nl|'\n'
string|'"""\nCONSTANTS\n=============================================================================\n"""'
newline|'\n'
nl|'\n'
string|'"""\nConstants you might want to modify\n-----------------------------------------------------------------------------\n"""'
newline|'\n'
nl|'\n'
comment|'# default logging level for command-line use'
nl|'\n'
DECL|variable|COMMAND_LINE_LOGGING_LEVEL
name|'COMMAND_LINE_LOGGING_LEVEL'
op|'='
name|'CRITICAL'
newline|'\n'
DECL|variable|TAB_LENGTH
name|'TAB_LENGTH'
op|'='
number|'4'
comment|'# expand tabs to this many spaces'
newline|'\n'
DECL|variable|ENABLE_ATTRIBUTES
name|'ENABLE_ATTRIBUTES'
op|'='
name|'True'
comment|'# @id = xyz -> <... id="xyz">'
newline|'\n'
DECL|variable|SMART_EMPHASIS
name|'SMART_EMPHASIS'
op|'='
name|'True'
comment|'# this_or_that does not become this<i>or</i>that'
newline|'\n'
DECL|variable|DEFAULT_OUTPUT_FORMAT
name|'DEFAULT_OUTPUT_FORMAT'
op|'='
string|"'xhtml1'"
comment|'# xhtml or html4 output'
newline|'\n'
DECL|variable|HTML_REMOVED_TEXT
name|'HTML_REMOVED_TEXT'
op|'='
string|'"[HTML_REMOVED]"'
comment|'# text used instead of HTML in safe mode'
newline|'\n'
DECL|variable|BLOCK_LEVEL_ELEMENTS
name|'BLOCK_LEVEL_ELEMENTS'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"p|div|h[1-6]|blockquote|pre|table|dl|ol|ul"'
nl|'\n'
string|'"|script|noscript|form|fieldset|iframe|math"'
nl|'\n'
string|'"|ins|del|hr|hr/|style|li|dt|dd|thead|tbody"'
nl|'\n'
string|'"|tr|th|td"'
op|')'
newline|'\n'
DECL|variable|DOC_TAG
name|'DOC_TAG'
op|'='
string|'"div"'
comment|'# Element used to wrap document - later removed'
newline|'\n'
nl|'\n'
comment|'# Placeholders'
nl|'\n'
DECL|variable|STX
name|'STX'
op|'='
string|"u'\\u0002'"
comment|'# Use STX ("Start of text") for start-of-placeholder'
newline|'\n'
DECL|variable|ETX
name|'ETX'
op|'='
string|"u'\\u0003'"
comment|'# Use ETX ("End of text") for end-of-placeholder'
newline|'\n'
DECL|variable|INLINE_PLACEHOLDER_PREFIX
name|'INLINE_PLACEHOLDER_PREFIX'
op|'='
name|'STX'
op|'+'
string|'"klzzwxh:"'
newline|'\n'
DECL|variable|INLINE_PLACEHOLDER
name|'INLINE_PLACEHOLDER'
op|'='
name|'INLINE_PLACEHOLDER_PREFIX'
op|'+'
string|'"%s"'
op|'+'
name|'ETX'
newline|'\n'
DECL|variable|AMP_SUBSTITUTE
name|'AMP_SUBSTITUTE'
op|'='
name|'STX'
op|'+'
string|'"amp"'
op|'+'
name|'ETX'
newline|'\n'
nl|'\n'
nl|'\n'
string|'"""\nConstants you probably do not need to change\n-----------------------------------------------------------------------------\n"""'
newline|'\n'
nl|'\n'
DECL|variable|RTL_BIDI_RANGES
name|'RTL_BIDI_RANGES'
op|'='
op|'('
op|'('
string|"u'\\u0590'"
op|','
string|"u'\\u07FF'"
op|')'
op|','
nl|'\n'
comment|'# Hebrew (0590-05FF), Arabic (0600-06FF),'
nl|'\n'
comment|'# Syriac (0700-074F), Arabic supplement (0750-077F),'
nl|'\n'
comment|'# Thaana (0780-07BF), Nko (07C0-07FF).'
nl|'\n'
op|'('
string|"u'\\u2D30'"
op|','
string|"u'\\u2D7F'"
op|')'
op|','
comment|'# Tifinagh'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
string|'"""\nAUXILIARY GLOBAL FUNCTIONS\n=============================================================================\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|message
name|'def'
name|'message'
op|'('
name|'level'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" A wrapper method for logging debug messages. """'
newline|'\n'
name|'logger'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'MARKDOWN'"
op|')'
newline|'\n'
name|'if'
name|'logger'
op|'.'
name|'handlers'
op|':'
newline|'\n'
comment|'# The logger is configured'
nl|'\n'
indent|'        '
name|'logger'
op|'.'
name|'log'
op|'('
name|'level'
op|','
name|'text'
op|')'
newline|'\n'
name|'if'
name|'level'
op|'>'
name|'WARN'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'level'
op|'>'
name|'WARN'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'MarkdownException'
op|','
name|'text'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'text'
op|','
name|'MarkdownWarning'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isBlockLevel
dedent|''
dedent|''
name|'def'
name|'isBlockLevel'
op|'('
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if the tag is a block level HTML tag."""'
newline|'\n'
name|'return'
name|'BLOCK_LEVEL_ELEMENTS'
op|'.'
name|'match'
op|'('
name|'tag'
op|')'
newline|'\n'
nl|'\n'
dedent|''
string|'"""\nMISC AUXILIARY CLASSES\n=============================================================================\n"""'
newline|'\n'
nl|'\n'
DECL|class|AtomicString
name|'class'
name|'AtomicString'
op|'('
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A string which should not be further processed."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MarkdownException
dedent|''
name|'class'
name|'MarkdownException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" A Markdown Exception. """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MarkdownWarning
dedent|''
name|'class'
name|'MarkdownWarning'
op|'('
name|'Warning'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" A Markdown Warning. """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
string|'"""\nOVERALL DESIGN\n=============================================================================\n\nMarkdown processing takes place in four steps:\n\n1. A bunch of "preprocessors" munge the input text.\n2. BlockParser() parses the high-level structural elements of the\n   pre-processed text into an ElementTree.\n3. A bunch of "treeprocessors" are run against the ElementTree. One such\n   treeprocessor runs InlinePatterns against the ElementTree, detecting inline\n   markup.\n4. Some post-processors are run against the text after the ElementTree has\n   been serialized into text.\n5. The output is written to a string.\n\nThose steps are put together by the Markdown() class.\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'preprocessors'
newline|'\n'
name|'import'
name|'blockprocessors'
newline|'\n'
name|'import'
name|'treeprocessors'
newline|'\n'
name|'import'
name|'inlinepatterns'
newline|'\n'
name|'import'
name|'postprocessors'
newline|'\n'
name|'import'
name|'blockparser'
newline|'\n'
name|'import'
name|'etree_loader'
newline|'\n'
name|'import'
name|'odict'
newline|'\n'
nl|'\n'
comment|'# Extensions should use "markdown.etree" instead of "etree" (or do `from'
nl|'\n'
comment|'# markdown import etree`).  Do not import it by yourself.'
nl|'\n'
nl|'\n'
DECL|variable|etree
name|'etree'
op|'='
name|'etree_loader'
op|'.'
name|'importETree'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Adds the ability to output html4'
nl|'\n'
name|'import'
name|'html4'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Markdown
name|'class'
name|'Markdown'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert Markdown to HTML."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
nl|'\n'
name|'extensions'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'extension_configs'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'False'
op|','
nl|'\n'
name|'output_format'
op|'='
name|'DEFAULT_OUTPUT_FORMAT'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Creates a new Markdown instance.\n\n        Keyword arguments:\n\n        * extensions: A list of extensions.\n           If they are of type string, the module mdx_name.py will be loaded.\n           If they are a subclass of markdown.Extension, they will be used\n           as-is.\n        * extension-configs: Configuration setting for extensions.\n        * safe_mode: Disallow raw html. One of "remove", "replace" or "escape".\n        * output_format: Format of output. Supported formats are:\n            * "xhtml1": Outputs XHTML 1.x. Default.\n            * "xhtml": Outputs latest supported version of XHTML (currently XHTML 1.1).\n            * "html4": Outputs HTML 4\n            * "html": Outputs latest supported version of HTML (currently HTML 4).\n            Note that it is suggested that the more specific formats ("xhtml1" \n            and "html4") be used as "xhtml" or "html" may change in the future\n            if it makes sense at that time. \n\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'safeMode'
op|'='
name|'safe_mode'
newline|'\n'
name|'self'
op|'.'
name|'registeredExtensions'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'docType'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'stripTopLevelTags'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Preprocessors'
nl|'\n'
name|'self'
op|'.'
name|'preprocessors'
op|'='
name|'odict'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preprocessors'
op|'['
string|'"html_block"'
op|']'
op|'='
name|'preprocessors'
op|'.'
name|'HtmlBlockPreprocessor'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'preprocessors'
op|'['
string|'"reference"'
op|']'
op|'='
name|'preprocessors'
op|'.'
name|'ReferencePreprocessor'
op|'('
name|'self'
op|')'
newline|'\n'
comment|'# footnote preprocessor will be inserted with "<reference"'
nl|'\n'
nl|'\n'
comment|'# Block processors - ran by the parser'
nl|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'blockparser'
op|'.'
name|'BlockParser'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'empty'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'EmptyBlockProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'indent'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'ListIndentProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'code'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'CodeBlockProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'hashheader'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'HashHeaderProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'setextheader'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'SetextHeaderProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'hr'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'HRProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'olist'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'OListProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'ulist'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'UListProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'quote'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'BlockQuoteProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'blockprocessors'
op|'['
string|"'paragraph'"
op|']'
op|'='
name|'blockprocessors'
op|'.'
name|'ParagraphProcessor'
op|'('
name|'self'
op|'.'
name|'parser'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#self.prePatterns = []'
nl|'\n'
nl|'\n'
comment|'# Inline patterns - Run on the tree'
nl|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'='
name|'odict'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"backtick"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'BacktickPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'BACKTICK_RE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"escape"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SimpleTextPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'ESCAPE_RE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"reference"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'ReferencePattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'REFERENCE_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"link"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'LinkPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'LINK_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"image_link"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'ImagePattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'IMAGE_LINK_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"image_reference"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'ImageReferencePattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'IMAGE_REFERENCE_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"autolink"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'AutolinkPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'AUTOLINK_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"automail"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'AutomailPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'AUTOMAIL_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"linebreak2"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SubstituteTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'LINE_BREAK_2_RE'
op|','
string|"'br'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"linebreak"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SubstituteTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'LINE_BREAK_RE'
op|','
string|"'br'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"html"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'HtmlPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'HTML_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"entity"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'HtmlPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'ENTITY_RE'
op|','
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"not_strong"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SimpleTextPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'NOT_STRONG_RE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"strong_em"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'DoubleTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'STRONG_EM_RE'
op|','
string|"'strong,em'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"strong"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SimpleTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'STRONG_RE'
op|','
string|"'strong'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"emphasis"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SimpleTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'EMPHASIS_RE'
op|','
string|"'em'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inlinePatterns'
op|'['
string|'"emphasis2"'
op|']'
op|'='
name|'inlinepatterns'
op|'.'
name|'SimpleTagPattern'
op|'('
name|'inlinepatterns'
op|'.'
name|'EMPHASIS_2_RE'
op|','
string|"'em'"
op|')'
newline|'\n'
comment|'# The order of the handlers matters!!!'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# Tree processors - run once we have a basic parse.'
nl|'\n'
name|'self'
op|'.'
name|'treeprocessors'
op|'='
name|'odict'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'treeprocessors'
op|'['
string|'"inline"'
op|']'
op|'='
name|'treeprocessors'
op|'.'
name|'InlineProcessor'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'treeprocessors'
op|'['
string|'"prettify"'
op|']'
op|'='
name|'treeprocessors'
op|'.'
name|'PrettifyTreeprocessor'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# Postprocessors - finishing touches.'
nl|'\n'
name|'self'
op|'.'
name|'postprocessors'
op|'='
name|'odict'
op|'.'
name|'OrderedDict'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'postprocessors'
op|'['
string|'"raw_html"'
op|']'
op|'='
name|'postprocessors'
op|'.'
name|'RawHtmlPostprocessor'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'postprocessors'
op|'['
string|'"amp_substitute"'
op|']'
op|'='
name|'postprocessors'
op|'.'
name|'AndSubstitutePostprocessor'
op|'('
op|')'
newline|'\n'
comment|'# footnote postprocessor will be inserted with ">amp_substitute"'
nl|'\n'
nl|'\n'
comment|'# Map format keys to serializers'
nl|'\n'
name|'self'
op|'.'
name|'output_formats'
op|'='
op|'{'
nl|'\n'
string|"'html'"
op|':'
name|'html4'
op|'.'
name|'to_html_string'
op|','
nl|'\n'
string|"'html4'"
op|':'
name|'html4'
op|'.'
name|'to_html_string'
op|','
nl|'\n'
string|"'xhtml'"
op|':'
name|'etree'
op|'.'
name|'tostring'
op|','
nl|'\n'
string|"'xhtml1'"
op|':'
name|'etree'
op|'.'
name|'tostring'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'references'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'htmlStash'
op|'='
name|'preprocessors'
op|'.'
name|'HtmlStash'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'registerExtensions'
op|'('
name|'extensions'
op|'='
name|'extensions'
op|','
nl|'\n'
name|'configs'
op|'='
name|'extension_configs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_output_format'
op|'('
name|'output_format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|registerExtensions
dedent|''
name|'def'
name|'registerExtensions'
op|'('
name|'self'
op|','
name|'extensions'
op|','
name|'configs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Register extensions with this instance of Markdown.\n\n        Keyword aurguments:\n\n        * extensions: A list of extensions, which can either\n           be strings or objects.  See the docstring on Markdown.\n        * configs: A dictionary mapping module names to config options.\n\n        """'
newline|'\n'
name|'for'
name|'ext'
name|'in'
name|'extensions'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'ext'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ext'
op|'='
name|'load_extension'
op|'('
name|'ext'
op|','
name|'configs'
op|'.'
name|'get'
op|'('
name|'ext'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'ext'
op|'.'
name|'extendMarkdown'
op|'('
name|'self'
op|','
name|'globals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'('
name|'ERROR'
op|','
string|'"Incorrect type! Extension \'%s\' is "'
nl|'\n'
string|'"neither a string or an Extension."'
op|'%'
op|'('
name|'repr'
op|'('
name|'ext'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|registerExtension
dedent|''
dedent|''
dedent|''
name|'def'
name|'registerExtension'
op|'('
name|'self'
op|','
name|'extension'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" This gets called by the extension """'
newline|'\n'
name|'self'
op|'.'
name|'registeredExtensions'
op|'.'
name|'append'
op|'('
name|'extension'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Resets all state variables so that we can start with a new text.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'htmlStash'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'references'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'extension'
name|'in'
name|'self'
op|'.'
name|'registeredExtensions'
op|':'
newline|'\n'
indent|'            '
name|'extension'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_output_format
dedent|''
dedent|''
name|'def'
name|'set_output_format'
op|'('
name|'self'
op|','
name|'format'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set the output format for the class instance. """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'serializer'
op|'='
name|'self'
op|'.'
name|'output_formats'
op|'['
name|'format'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'('
name|'CRITICAL'
op|','
string|'\'Invalid Output Format: "%s". Use one of %s.\''
op|'%'
op|'('
name|'format'
op|','
name|'self'
op|'.'
name|'output_formats'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|convert
dedent|''
dedent|''
name|'def'
name|'convert'
op|'('
name|'self'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Convert markdown to serialized XHTML or HTML.\n\n        Keyword arguments:\n\n        * source: Source text as a Unicode string.\n\n        """'
newline|'\n'
nl|'\n'
comment|'# Fixup the source text'
nl|'\n'
name|'if'
name|'not'
name|'source'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'u""'
comment|'# a blank unicode string'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'source'
op|'='
name|'unicode'
op|'('
name|'source'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeDecodeError'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'('
name|'CRITICAL'
op|','
string|"'UnicodeDecodeError: Markdown only accepts unicode or ascii input.'"
op|')'
newline|'\n'
name|'return'
string|'u""'
newline|'\n'
nl|'\n'
dedent|''
name|'source'
op|'='
name|'source'
op|'.'
name|'replace'
op|'('
name|'STX'
op|','
string|'""'
op|')'
op|'.'
name|'replace'
op|'('
name|'ETX'
op|','
string|'""'
op|')'
newline|'\n'
name|'source'
op|'='
name|'source'
op|'.'
name|'replace'
op|'('
string|'"\\r\\n"'
op|','
string|'"\\n"'
op|')'
op|'.'
name|'replace'
op|'('
string|'"\\r"'
op|','
string|'"\\n"'
op|')'
op|'+'
string|'"\\n\\n"'
newline|'\n'
name|'source'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\n\\s+\\n'"
op|','
string|"'\\n\\n'"
op|','
name|'source'
op|')'
newline|'\n'
name|'source'
op|'='
name|'source'
op|'.'
name|'expandtabs'
op|'('
name|'TAB_LENGTH'
op|')'
newline|'\n'
nl|'\n'
comment|'# Split into lines and run the line preprocessors.'
nl|'\n'
name|'self'
op|'.'
name|'lines'
op|'='
name|'source'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
name|'for'
name|'prep'
name|'in'
name|'self'
op|'.'
name|'preprocessors'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'lines'
op|'='
name|'prep'
op|'.'
name|'run'
op|'('
name|'self'
op|'.'
name|'lines'
op|')'
newline|'\n'
nl|'\n'
comment|'# Parse the high-level elements.'
nl|'\n'
dedent|''
name|'root'
op|'='
name|'self'
op|'.'
name|'parser'
op|'.'
name|'parseDocument'
op|'('
name|'self'
op|'.'
name|'lines'
op|')'
op|'.'
name|'getroot'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Run the tree-processors'
nl|'\n'
name|'for'
name|'treeprocessor'
name|'in'
name|'self'
op|'.'
name|'treeprocessors'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'newRoot'
op|'='
name|'treeprocessor'
op|'.'
name|'run'
op|'('
name|'root'
op|')'
newline|'\n'
name|'if'
name|'newRoot'
op|':'
newline|'\n'
indent|'                '
name|'root'
op|'='
name|'newRoot'
newline|'\n'
nl|'\n'
comment|'# Serialize _properly_.  Strip top-level tags.'
nl|'\n'
dedent|''
dedent|''
name|'output'
op|','
name|'length'
op|'='
name|'codecs'
op|'.'
name|'utf_8_decode'
op|'('
name|'self'
op|'.'
name|'serializer'
op|'('
name|'root'
op|','
name|'encoding'
op|'='
string|'"utf8"'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'stripTopLevelTags'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
name|'output'
op|'.'
name|'index'
op|'('
string|"'<%s>'"
op|'%'
name|'DOC_TAG'
op|')'
op|'+'
name|'len'
op|'('
name|'DOC_TAG'
op|')'
op|'+'
number|'2'
newline|'\n'
name|'end'
op|'='
name|'output'
op|'.'
name|'rindex'
op|'('
string|"'</%s>'"
op|'%'
name|'DOC_TAG'
op|')'
newline|'\n'
name|'output'
op|'='
name|'output'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Run the text post-processors'
nl|'\n'
dedent|''
name|'for'
name|'pp'
name|'in'
name|'self'
op|'.'
name|'postprocessors'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'='
name|'pp'
op|'.'
name|'run'
op|'('
name|'output'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'output'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|convertFile
dedent|''
name|'def'
name|'convertFile'
op|'('
name|'self'
op|','
name|'input'
op|'='
name|'None'
op|','
name|'output'
op|'='
name|'None'
op|','
name|'encoding'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Converts a markdown file and returns the HTML as a unicode string.\n\n        Decodes the file using the provided encoding (defaults to utf-8),\n        passes the file content to markdown, and outputs the html to either\n        the provided stream or the file with provided name, using the same\n        encoding as the source file.\n\n        **Note:** This is the only place that decoding and encoding of unicode\n        takes place in Python-Markdown.  (All other code is unicode-in /\n        unicode-out.)\n\n        Keyword arguments:\n\n        * input: Name of source text file.\n        * output: Name of output file. Writes to stdout if `None`.\n        * encoding: Encoding of input and output files. Defaults to utf-8.\n\n        """'
newline|'\n'
nl|'\n'
name|'encoding'
op|'='
name|'encoding'
name|'or'
string|'"utf-8"'
newline|'\n'
nl|'\n'
comment|'# Read the source'
nl|'\n'
name|'input_file'
op|'='
name|'codecs'
op|'.'
name|'open'
op|'('
name|'input'
op|','
name|'mode'
op|'='
string|'"r"'
op|','
name|'encoding'
op|'='
name|'encoding'
op|')'
newline|'\n'
name|'text'
op|'='
name|'input_file'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'input_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'.'
name|'lstrip'
op|'('
string|"u'\\ufeff'"
op|')'
comment|'# remove the byte-order mark'
newline|'\n'
nl|'\n'
comment|'# Convert'
nl|'\n'
name|'html'
op|'='
name|'self'
op|'.'
name|'convert'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Write to file or stdout'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'output'
op|','
op|'('
name|'str'
op|','
name|'unicode'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'output_file'
op|'='
name|'codecs'
op|'.'
name|'open'
op|'('
name|'output'
op|','
string|'"w"'
op|','
name|'encoding'
op|'='
name|'encoding'
op|')'
newline|'\n'
name|'output_file'
op|'.'
name|'write'
op|'('
name|'html'
op|')'
newline|'\n'
name|'output_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'output'
op|'.'
name|'write'
op|'('
name|'html'
op|'.'
name|'encode'
op|'('
name|'encoding'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
string|'"""\nExtensions\n-----------------------------------------------------------------------------\n"""'
newline|'\n'
nl|'\n'
DECL|class|Extension
name|'class'
name|'Extension'
op|':'
newline|'\n'
indent|'    '
string|'""" Base class for extensions to subclass. """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'configs'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an instance of an Extention.\n\n        Keyword arguments:\n\n        * configs: A dict of configuration setting used by an Extension.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'='
name|'configs'
newline|'\n'
nl|'\n'
DECL|member|getConfig
dedent|''
name|'def'
name|'getConfig'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return a setting for the given key or an empty string. """'
newline|'\n'
name|'if'
name|'key'
name|'in'
name|'self'
op|'.'
name|'config'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'config'
op|'['
name|'key'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|member|getConfigInfo
dedent|''
dedent|''
name|'def'
name|'getConfigInfo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Return all config settings as a list of tuples. """'
newline|'\n'
name|'return'
op|'['
op|'('
name|'key'
op|','
name|'self'
op|'.'
name|'config'
op|'['
name|'key'
op|']'
op|'['
number|'1'
op|']'
op|')'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'config'
op|'.'
name|'keys'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|setConfig
dedent|''
name|'def'
name|'setConfig'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Set a config setting for `key` with the given `value`. """'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'['
name|'key'
op|']'
op|'['
number|'0'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|extendMarkdown
dedent|''
name|'def'
name|'extendMarkdown'
op|'('
name|'self'
op|','
name|'md'
op|','
name|'md_globals'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Add the various proccesors and patterns to the Markdown Instance.\n\n        This method must be overriden by every extension.\n\n        Keyword arguments:\n\n        * md: The Markdown instance.\n\n        * md_globals: Global variables in the markdown module namespace.\n\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_extension
dedent|''
dedent|''
name|'def'
name|'load_extension'
op|'('
name|'ext_name'
op|','
name|'configs'
op|'='
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Load extension by name, then return the module.\n\n    The extension name may contain arguments as part of the string in the\n    following format: "extname(key1=value1,key2=value2)"\n\n    """'
newline|'\n'
nl|'\n'
comment|'# Parse extensions config params (ignore the order)'
nl|'\n'
name|'configs'
op|'='
name|'dict'
op|'('
name|'configs'
op|')'
newline|'\n'
name|'pos'
op|'='
name|'ext_name'
op|'.'
name|'find'
op|'('
string|'"("'
op|')'
comment|'# find the first "("'
newline|'\n'
name|'if'
name|'pos'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'ext_args'
op|'='
name|'ext_name'
op|'['
name|'pos'
op|'+'
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'ext_name'
op|'='
name|'ext_name'
op|'['
op|':'
name|'pos'
op|']'
newline|'\n'
name|'pairs'
op|'='
op|'['
name|'x'
op|'.'
name|'split'
op|'('
string|'"="'
op|')'
name|'for'
name|'x'
name|'in'
name|'ext_args'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|']'
newline|'\n'
name|'configs'
op|'.'
name|'update'
op|'('
op|'['
op|'('
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'y'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
name|'for'
op|'('
name|'x'
op|','
name|'y'
op|')'
name|'in'
name|'pairs'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Setup the module names'
nl|'\n'
dedent|''
name|'ext_module'
op|'='
string|"'markdown.extensions'"
newline|'\n'
name|'module_name_new_style'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
op|'['
name|'ext_module'
op|','
name|'ext_name'
op|']'
op|')'
newline|'\n'
name|'module_name_old_style'
op|'='
string|"'_'"
op|'.'
name|'join'
op|'('
op|'['
string|"'mdx'"
op|','
name|'ext_name'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try loading the extention first from one place, then another'
nl|'\n'
name|'try'
op|':'
comment|'# New style (markdown.extensons.<extension>)'
newline|'\n'
indent|'        '
name|'module'
op|'='
name|'__import__'
op|'('
name|'module_name_new_style'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'['
name|'ext_module'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
comment|'# Old style (mdx.<extension>)'
newline|'\n'
indent|'            '
name|'module'
op|'='
name|'__import__'
op|'('
name|'module_name_old_style'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'           '
name|'message'
op|'('
name|'WARN'
op|','
string|'"Failed loading extension \'%s\' from \'%s\' or \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'ext_name'
op|','
name|'module_name_new_style'
op|','
name|'module_name_old_style'
op|')'
op|')'
newline|'\n'
comment|"# Return None so we don't try to initiate none-existant extension"
nl|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# If the module is loaded successfully, we expect it to define a'
nl|'\n'
comment|'# function called makeExtension()'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'module'
op|'.'
name|'makeExtension'
op|'('
name|'configs'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'('
name|'CRITICAL'
op|','
string|'"Failed to initiate extension \'%s\'"'
op|'%'
name|'ext_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_extensions
dedent|''
dedent|''
name|'def'
name|'load_extensions'
op|'('
name|'ext_names'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Loads multiple extensions"""'
newline|'\n'
name|'extensions'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'ext_name'
name|'in'
name|'ext_names'
op|':'
newline|'\n'
indent|'        '
name|'extension'
op|'='
name|'load_extension'
op|'('
name|'ext_name'
op|')'
newline|'\n'
name|'if'
name|'extension'
op|':'
newline|'\n'
indent|'            '
name|'extensions'
op|'.'
name|'append'
op|'('
name|'extension'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'extensions'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
string|'"""\nEXPORTED FUNCTIONS\n=============================================================================\n\nThose are the two functions we really mean to export: markdown() and\nmarkdownFromFile().\n"""'
newline|'\n'
nl|'\n'
DECL|function|markdown
name|'def'
name|'markdown'
op|'('
name|'text'
op|','
nl|'\n'
name|'extensions'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'False'
op|','
nl|'\n'
name|'output_format'
op|'='
name|'DEFAULT_OUTPUT_FORMAT'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a markdown string to HTML and return HTML as a unicode string.\n\n    This is a shortcut function for `Markdown` class to cover the most\n    basic use case.  It initializes an instance of Markdown, loads the\n    necessary extensions and runs the parser on the given text.\n\n    Keyword arguments:\n\n    * text: Markdown formatted text as Unicode or ASCII string.\n    * extensions: A list of extensions or extension names (may contain config args).\n    * safe_mode: Disallow raw html.  One of "remove", "replace" or "escape".\n    * output_format: Format of output. Supported formats are:\n        * "xhtml1": Outputs XHTML 1.x. Default.\n        * "xhtml": Outputs latest supported version of XHTML (currently XHTML 1.1).\n        * "html4": Outputs HTML 4\n        * "html": Outputs latest supported version of HTML (currently HTML 4).\n        Note that it is suggested that the more specific formats ("xhtml1" \n        and "html4") be used as "xhtml" or "html" may change in the future\n        if it makes sense at that time. \n\n    Returns: An HTML document as a string.\n\n    """'
newline|'\n'
name|'md'
op|'='
name|'Markdown'
op|'('
name|'extensions'
op|'='
name|'load_extensions'
op|'('
name|'extensions'
op|')'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'safe_mode'
op|','
nl|'\n'
name|'output_format'
op|'='
name|'output_format'
op|')'
newline|'\n'
name|'return'
name|'md'
op|'.'
name|'convert'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|markdownFromFile
dedent|''
name|'def'
name|'markdownFromFile'
op|'('
name|'input'
op|'='
name|'None'
op|','
nl|'\n'
name|'output'
op|'='
name|'None'
op|','
nl|'\n'
name|'extensions'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'encoding'
op|'='
name|'None'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'False'
op|','
nl|'\n'
name|'output_format'
op|'='
name|'DEFAULT_OUTPUT_FORMAT'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read markdown code from a file and write it to a file or a stream."""'
newline|'\n'
name|'md'
op|'='
name|'Markdown'
op|'('
name|'extensions'
op|'='
name|'load_extensions'
op|'('
name|'extensions'
op|')'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'safe_mode'
op|','
nl|'\n'
name|'output_format'
op|'='
name|'output_format'
op|')'
newline|'\n'
name|'md'
op|'.'
name|'convertFile'
op|'('
name|'input'
op|','
name|'output'
op|','
name|'encoding'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

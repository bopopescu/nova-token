begin_unit
nl|'\n'
string|'"""\nPRE-PROCESSORS\n=============================================================================\n\nPreprocessors work on source text before we start doing anything too\ncomplicated. \n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'markdown'
newline|'\n'
nl|'\n'
DECL|variable|HTML_PLACEHOLDER_PREFIX
name|'HTML_PLACEHOLDER_PREFIX'
op|'='
name|'markdown'
op|'.'
name|'STX'
op|'+'
string|'"wzxhzdk:"'
newline|'\n'
DECL|variable|HTML_PLACEHOLDER
name|'HTML_PLACEHOLDER'
op|'='
name|'HTML_PLACEHOLDER_PREFIX'
op|'+'
string|'"%d"'
op|'+'
name|'markdown'
op|'.'
name|'ETX'
newline|'\n'
nl|'\n'
DECL|class|Processor
name|'class'
name|'Processor'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'markdown_instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'markdown_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'markdown'
op|'='
name|'markdown_instance'
newline|'\n'
nl|'\n'
DECL|class|Preprocessor
dedent|''
dedent|''
dedent|''
name|'class'
name|'Preprocessor'
op|'('
name|'Processor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Preprocessors are run after the text is broken into lines.\n\n    Each preprocessor implements a "run" method that takes a pointer to a\n    list of lines of the document, modifies it as necessary and returns\n    either the same pointer or a pointer to a new list.\n\n    Preprocessors must extend markdown.Preprocessor.\n\n    """'
newline|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Each subclass of Preprocessor should override the `run` method, which\n        takes the document as a list of strings split by newlines and returns\n        the (possibly modified) list of lines.\n\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|HtmlStash
dedent|''
dedent|''
name|'class'
name|'HtmlStash'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class is used for stashing HTML objects that we extract\n    in the beginning and replace with place-holders.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create a HtmlStash. """'
newline|'\n'
name|'self'
op|'.'
name|'html_counter'
op|'='
number|'0'
comment|'# for counting inline html segments'
newline|'\n'
name|'self'
op|'.'
name|'rawHtmlBlocks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|store
dedent|''
name|'def'
name|'store'
op|'('
name|'self'
op|','
name|'html'
op|','
name|'safe'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Saves an HTML segment for later reinsertion.  Returns a\n        placeholder string that needs to be inserted into the\n        document.\n\n        Keyword arguments:\n\n        * html: an html segment\n        * safe: label an html segment as safe for safemode\n\n        Returns : a placeholder string\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'rawHtmlBlocks'
op|'.'
name|'append'
op|'('
op|'('
name|'html'
op|','
name|'safe'
op|')'
op|')'
newline|'\n'
name|'placeholder'
op|'='
name|'HTML_PLACEHOLDER'
op|'%'
name|'self'
op|'.'
name|'html_counter'
newline|'\n'
name|'self'
op|'.'
name|'html_counter'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'placeholder'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'html_counter'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'rawHtmlBlocks'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HtmlBlockPreprocessor
dedent|''
dedent|''
name|'class'
name|'HtmlBlockPreprocessor'
op|'('
name|'Preprocessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove html blocks from the text and store them for later retrieval."""'
newline|'\n'
nl|'\n'
DECL|variable|right_tag_patterns
name|'right_tag_patterns'
op|'='
op|'['
string|'"</%s>"'
op|','
string|'"%s>"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_left_tag
name|'def'
name|'_get_left_tag'
op|'('
name|'self'
op|','
name|'block'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'block'
op|'['
number|'1'
op|':'
op|']'
op|'.'
name|'replace'
op|'('
string|'">"'
op|','
string|'" "'
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_right_tag
dedent|''
name|'def'
name|'_get_right_tag'
op|'('
name|'self'
op|','
name|'left_tag'
op|','
name|'block'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'p'
name|'in'
name|'self'
op|'.'
name|'right_tag_patterns'
op|':'
newline|'\n'
indent|'            '
name|'tag'
op|'='
name|'p'
op|'%'
name|'left_tag'
newline|'\n'
name|'i'
op|'='
name|'block'
op|'.'
name|'rfind'
op|'('
name|'tag'
op|')'
newline|'\n'
name|'if'
name|'i'
op|'>'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'tag'
op|'.'
name|'lstrip'
op|'('
string|'"<"'
op|')'
op|'.'
name|'rstrip'
op|'('
string|'">"'
op|')'
op|','
name|'i'
op|'+'
name|'len'
op|'('
name|'p'
op|')'
op|'-'
number|'2'
op|'+'
name|'len'
op|'('
name|'left_tag'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'block'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'['
op|'-'
name|'len'
op|'('
name|'left_tag'
op|')'
op|'-'
number|'2'
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'len'
op|'('
name|'block'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_equal_tags
dedent|''
name|'def'
name|'_equal_tags'
op|'('
name|'self'
op|','
name|'left_tag'
op|','
name|'right_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'left_tag'
op|'=='
string|"'div'"
name|'or'
name|'left_tag'
op|'['
number|'0'
op|']'
name|'in'
op|'['
string|"'?'"
op|','
string|"'@'"
op|','
string|"'%'"
op|']'
op|':'
comment|'# handle PHP, etc.'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
op|'('
string|'"/"'
op|'+'
name|'left_tag'
op|')'
op|'=='
name|'right_tag'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
op|'('
name|'right_tag'
op|'=='
string|'"--"'
name|'and'
name|'left_tag'
op|'=='
string|'"--"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'left_tag'
op|'=='
name|'right_tag'
op|'['
number|'1'
op|':'
op|']'
name|'and'
name|'right_tag'
op|'['
number|'0'
op|']'
op|'!='
string|'"<"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_is_oneliner
dedent|''
dedent|''
name|'def'
name|'_is_oneliner'
op|'('
name|'self'
op|','
name|'tag'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'tag'
name|'in'
op|'['
string|"'hr'"
op|','
string|"'hr/'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'new_blocks'
op|'='
op|'['
op|']'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'.'
name|'split'
op|'('
string|'"\\n\\n"'
op|')'
newline|'\n'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
name|'left_tag'
op|'='
string|"''"
newline|'\n'
name|'right_tag'
op|'='
string|"''"
newline|'\n'
name|'in_tag'
op|'='
name|'False'
comment|'# flag'
newline|'\n'
nl|'\n'
name|'while'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'block'
op|'='
name|'text'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'block'
op|'.'
name|'startswith'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'block'
op|'='
name|'block'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'text'
op|'='
name|'text'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'block'
op|'.'
name|'startswith'
op|'('
string|'"\\n"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'block'
op|'='
name|'block'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'in_tag'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'block'
op|'.'
name|'startswith'
op|'('
string|'"<"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'left_tag'
op|'='
name|'self'
op|'.'
name|'_get_left_tag'
op|'('
name|'block'
op|')'
newline|'\n'
name|'right_tag'
op|','
name|'data_index'
op|'='
name|'self'
op|'.'
name|'_get_right_tag'
op|'('
name|'left_tag'
op|','
name|'block'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'data_index'
op|'<'
name|'len'
op|'('
name|'block'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'text'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'block'
op|'['
name|'data_index'
op|':'
op|']'
op|')'
newline|'\n'
name|'block'
op|'='
name|'block'
op|'['
op|':'
name|'data_index'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'markdown'
op|'.'
name|'isBlockLevel'
op|'('
name|'left_tag'
op|')'
name|'or'
name|'block'
op|'['
number|'1'
op|']'
name|'in'
op|'['
string|'"!"'
op|','
string|'"?"'
op|','
string|'"@"'
op|','
string|'"%"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'new_blocks'
op|'.'
name|'append'
op|'('
name|'block'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_is_oneliner'
op|'('
name|'left_tag'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'new_blocks'
op|'.'
name|'append'
op|'('
name|'block'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block'
op|'['
number|'1'
op|']'
op|'=='
string|'"!"'
op|':'
newline|'\n'
comment|'# is a comment block'
nl|'\n'
indent|'                        '
name|'left_tag'
op|'='
string|'"--"'
newline|'\n'
name|'right_tag'
op|','
name|'data_index'
op|'='
name|'self'
op|'.'
name|'_get_right_tag'
op|'('
name|'left_tag'
op|','
name|'block'
op|')'
newline|'\n'
comment|'# keep checking conditions below and maybe just append'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'block'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|'">"'
op|')'
name|'and'
name|'self'
op|'.'
name|'_equal_tags'
op|'('
name|'left_tag'
op|','
name|'right_tag'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'new_blocks'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'store'
op|'('
name|'block'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'#if not block[1] == "!":'
newline|'\n'
comment|'# if is block level tag and is not complete'
nl|'\n'
nl|'\n'
indent|'                        '
name|'if'
name|'markdown'
op|'.'
name|'isBlockLevel'
op|'('
name|'left_tag'
op|')'
name|'or'
name|'left_tag'
op|'=='
string|'"--"'
name|'and'
name|'not'
name|'block'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|'">"'
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'items'
op|'.'
name|'append'
op|'('
name|'block'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'in_tag'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'new_blocks'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'store'
op|'('
name|'block'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'new_blocks'
op|'.'
name|'append'
op|'('
name|'block'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'items'
op|'.'
name|'append'
op|'('
name|'block'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'right_tag'
op|','
name|'data_index'
op|'='
name|'self'
op|'.'
name|'_get_right_tag'
op|'('
name|'left_tag'
op|','
name|'block'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_equal_tags'
op|'('
name|'left_tag'
op|','
name|'right_tag'
op|')'
op|':'
newline|'\n'
comment|'# if find closing tag'
nl|'\n'
indent|'                    '
name|'in_tag'
op|'='
name|'False'
newline|'\n'
name|'new_blocks'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'store'
op|'('
string|"'\\n\\n'"
op|'.'
name|'join'
op|'('
name|'items'
op|')'
op|')'
op|')'
newline|'\n'
name|'items'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'new_blocks'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'store'
op|'('
string|"'\\n\\n'"
op|'.'
name|'join'
op|'('
name|'items'
op|')'
op|')'
op|')'
newline|'\n'
name|'new_blocks'
op|'.'
name|'append'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'new_text'
op|'='
string|'"\\n\\n"'
op|'.'
name|'join'
op|'('
name|'new_blocks'
op|')'
newline|'\n'
name|'return'
name|'new_text'
op|'.'
name|'split'
op|'('
string|'"\\n"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReferencePreprocessor
dedent|''
dedent|''
name|'class'
name|'ReferencePreprocessor'
op|'('
name|'Preprocessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Remove reference definitions from text and store for later use. """'
newline|'\n'
nl|'\n'
DECL|variable|RE
name|'RE'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^(\\ ?\\ ?\\ ?)\\[([^\\]]*)\\]:\\s*([^ ]*)(.*)$'"
op|','
name|'re'
op|'.'
name|'DOTALL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_text'
op|'='
op|'['
op|']'
op|';'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'self'
op|'.'
name|'RE'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'m'
op|':'
newline|'\n'
indent|'                '
name|'id'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'t'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'4'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
comment|'# potential title'
newline|'\n'
name|'if'
name|'not'
name|'t'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'references'
op|'['
name|'id'
op|']'
op|'='
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
op|','
name|'t'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'len'
op|'('
name|'t'
op|')'
op|'>='
number|'2'
nl|'\n'
name|'and'
op|'('
name|'t'
op|'['
number|'0'
op|']'
op|'=='
name|'t'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'"\\""'
nl|'\n'
name|'or'
name|'t'
op|'['
number|'0'
op|']'
op|'=='
name|'t'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'"\\\'"'
nl|'\n'
name|'or'
op|'('
name|'t'
op|'['
number|'0'
op|']'
op|'=='
string|'"("'
name|'and'
name|'t'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'")"'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'references'
op|'['
name|'id'
op|']'
op|'='
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
op|','
name|'t'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'new_text'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'new_text'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'new_text'
comment|'#+ "\\n"'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

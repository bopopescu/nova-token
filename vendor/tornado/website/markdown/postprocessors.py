begin_unit
string|'"""\nPOST-PROCESSORS\n=============================================================================\n\nMarkdown also allows post-processors, which are similar to preprocessors in\nthat they need to implement a "run" method. However, they are run after core\nprocessing.\n\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'markdown'
newline|'\n'
nl|'\n'
DECL|class|Processor
name|'class'
name|'Processor'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'markdown_instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'markdown_instance'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'markdown'
op|'='
name|'markdown_instance'
newline|'\n'
nl|'\n'
DECL|class|Postprocessor
dedent|''
dedent|''
dedent|''
name|'class'
name|'Postprocessor'
op|'('
name|'Processor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Postprocessors are run after the ElementTree it converted back into text.\n\n    Each Postprocessor implements a "run" method that takes a pointer to a\n    text string, modifies it as necessary and returns a text string.\n\n    Postprocessors must extend markdown.Postprocessor.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Subclasses of Postprocessor should implement a `run` method, which\n        takes the html document as a single text string and returns a\n        (possibly modified) string.\n\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RawHtmlPostprocessor
dedent|''
dedent|''
name|'class'
name|'RawHtmlPostprocessor'
op|'('
name|'Postprocessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Restore raw html to the document. """'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Iterate over html stash and restore "safe" html. """'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'html_counter'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'html'
op|','
name|'safe'
op|'='
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'htmlStash'
op|'.'
name|'rawHtmlBlocks'
op|'['
name|'i'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'safeMode'
name|'and'
name|'not'
name|'safe'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'str'
op|'('
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'safeMode'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'escape'"
op|':'
newline|'\n'
indent|'                    '
name|'html'
op|'='
name|'self'
op|'.'
name|'escape'
op|'('
name|'html'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'str'
op|'('
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'safeMode'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'remove'"
op|':'
newline|'\n'
indent|'                    '
name|'html'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'html'
op|'='
name|'markdown'
op|'.'
name|'HTML_REMOVED_TEXT'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'safe'
name|'or'
name|'not'
name|'self'
op|'.'
name|'markdown'
op|'.'
name|'safeMode'
op|':'
newline|'\n'
indent|'                '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
string|'"<p>%s</p>"'
op|'%'
nl|'\n'
op|'('
name|'markdown'
op|'.'
name|'preprocessors'
op|'.'
name|'HTML_PLACEHOLDER'
op|'%'
name|'i'
op|')'
op|','
nl|'\n'
name|'html'
op|'+'
string|'"\\n"'
op|')'
newline|'\n'
dedent|''
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'markdown'
op|'.'
name|'preprocessors'
op|'.'
name|'HTML_PLACEHOLDER'
op|'%'
name|'i'
op|','
nl|'\n'
name|'html'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|escape
dedent|''
name|'def'
name|'escape'
op|'('
name|'self'
op|','
name|'html'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Basic html escaping """'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'.'
name|'replace'
op|'('
string|"'&'"
op|','
string|"'&amp;'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'.'
name|'replace'
op|'('
string|"'<'"
op|','
string|"'&lt;'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'.'
name|'replace'
op|'('
string|"'>'"
op|','
string|"'&gt;'"
op|')'
newline|'\n'
name|'return'
name|'html'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AndSubstitutePostprocessor
dedent|''
dedent|''
name|'class'
name|'AndSubstitutePostprocessor'
op|'('
name|'Postprocessor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Restore valid entities """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|run
dedent|''
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'markdown'
op|'.'
name|'AMP_SUBSTITUTE'
op|','
string|'"&"'
op|')'
newline|'\n'
name|'return'
name|'text'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

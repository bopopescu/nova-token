begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""A command line parsing module that lets modules define their own options.\n\nEach module defines its own options, e.g.,\n\n    from tornado.options import define, options\n\n    define("mysql_host", default="127.0.0.1:3306", help="Main user DB")\n    define("memcache_hosts", default="127.0.0.1:11011", multiple=True,\n           help="Main user memcache servers")\n\n    def connect():\n        db = database.Connection(options.mysql_host)\n        ...\n\nThe main() method of your application does not need to be aware of all of\nthe options used throughout your program; they are all automatically loaded\nwhen the modules are loaded. Your main() method can parse the command line\nor parse a config file with:\n\n    import tornado.options\n    tornado.options.parse_config_file("/etc/server.conf")\n    tornado.options.parse_command_line()\n\nCommand line formats are what you would expect ("--myoption=myvalue").\nConfig files are just Python files. Global names become options, e.g.,\n\n    myoption = "myvalue"\n    myotheroption = "myothervalue"\n\nWe support datetimes, timedeltas, ints, and floats (just pass a \'type\'\nkwarg to define). We also accept multi-value options. See the documentation\nfor define() below.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'logging'
op|'.'
name|'handlers'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
comment|'# For pretty log messages, if available'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'curses'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|variable|curses
indent|'    '
name|'curses'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|define
dedent|''
name|'def'
name|'define'
op|'('
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'type'
op|'='
name|'str'
op|','
name|'help'
op|'='
name|'None'
op|','
name|'metavar'
op|'='
name|'None'
op|','
nl|'\n'
name|'multiple'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Defines a new command line option.\n\n    If type is given (one of str, float, int, datetime, or timedelta),\n    we parse the command line arguments based on the given type. If\n    multiple is True, we accept comma-separated values, and the option\n    value is always a list.\n\n    For multi-value integers, we also accept the syntax x:y, which\n    turns into range(x, y) - very useful for long integer ranges.\n\n    help and metavar are used to construct the automatically generated\n    command line help string. The help message is formatted like:\n\n       --name=METAVAR      help string\n\n    Command line option names must be unique globally. They can be parsed\n    from the command line with parse_command_line() or parsed from a\n    config file with parse_config_file.\n    """'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Error'
op|'('
string|'"Option %r already defined in %s"'
op|','
name|'name'
op|','
nl|'\n'
name|'options'
op|'['
name|'name'
op|']'
op|'.'
name|'file_name'
op|')'
newline|'\n'
dedent|''
name|'frame'
op|'='
name|'sys'
op|'.'
name|'_getframe'
op|'('
number|'0'
op|')'
newline|'\n'
name|'options_file'
op|'='
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
newline|'\n'
name|'file_name'
op|'='
name|'frame'
op|'.'
name|'f_back'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
newline|'\n'
name|'if'
name|'file_name'
op|'=='
name|'options_file'
op|':'
name|'file_name'
op|'='
string|'""'
newline|'\n'
name|'options'
op|'['
name|'name'
op|']'
op|'='
name|'_Option'
op|'('
name|'name'
op|','
name|'file_name'
op|'='
name|'file_name'
op|','
name|'default'
op|'='
name|'default'
op|','
nl|'\n'
name|'type'
op|'='
name|'type'
op|','
name|'help'
op|'='
name|'help'
op|','
name|'metavar'
op|'='
name|'metavar'
op|','
nl|'\n'
name|'multiple'
op|'='
name|'multiple'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_command_line
dedent|''
name|'def'
name|'parse_command_line'
op|'('
name|'args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parses all options given on the command line.\n\n    We return all command line arguments that are not options as a list.\n    """'
newline|'\n'
name|'if'
name|'args'
name|'is'
name|'None'
op|':'
name|'args'
op|'='
name|'sys'
op|'.'
name|'argv'
newline|'\n'
name|'remaining'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'args'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# All things after the last option are command line arguments'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'args'
op|'['
name|'i'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"-"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'remaining'
op|'='
name|'args'
op|'['
name|'i'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'args'
op|'['
name|'i'
op|']'
op|'=='
string|'"--"'
op|':'
newline|'\n'
indent|'            '
name|'remaining'
op|'='
name|'args'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'arg'
op|'='
name|'args'
op|'['
name|'i'
op|']'
op|'.'
name|'lstrip'
op|'('
string|'"-"'
op|')'
newline|'\n'
name|'name'
op|','
name|'equals'
op|','
name|'value'
op|'='
name|'arg'
op|'.'
name|'partition'
op|'('
string|'"="'
op|')'
newline|'\n'
name|'name'
op|'='
name|'name'
op|'.'
name|'replace'
op|'('
string|"'-'"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'name'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'print_help'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'Error'
op|'('
string|"'Unrecognized command line option: %r'"
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'option'
op|'='
name|'options'
op|'['
name|'name'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'equals'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'option'
op|'.'
name|'type'
op|'=='
name|'bool'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
string|'"true"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Error'
op|'('
string|"'Option %r requires a value'"
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'option'
op|'.'
name|'parse'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'options'
op|'.'
name|'help'
op|':'
newline|'\n'
indent|'        '
name|'print_help'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up log level and pretty console logging by default'
nl|'\n'
dedent|''
name|'if'
name|'options'
op|'.'
name|'logging'
op|'!='
string|"'none'"
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'getattr'
op|'('
name|'logging'
op|','
name|'options'
op|'.'
name|'logging'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'enable_pretty_logging'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'remaining'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_config_file
dedent|''
name|'def'
name|'parse_config_file'
op|'('
name|'path'
op|','
name|'overwrite'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parses and loads the Python config file at the given path."""'
newline|'\n'
name|'config'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'execfile'
op|'('
name|'path'
op|','
name|'config'
op|','
name|'config'
op|')'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'config'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'options'
op|'['
name|'name'
op|']'
op|'.'
name|'set'
op|'('
name|'config'
op|'['
name|'name'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|print_help
dedent|''
dedent|''
dedent|''
name|'def'
name|'print_help'
op|'('
name|'file'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Prints all the command line options to stdout."""'
newline|'\n'
name|'print'
op|'>>'
name|'file'
op|','
string|'"Usage: %s [OPTIONS]"'
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
newline|'\n'
name|'print'
op|'>>'
name|'file'
op|','
string|'""'
newline|'\n'
name|'print'
op|'>>'
name|'file'
op|','
string|'"Options:"'
newline|'\n'
name|'by_file'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'options'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'by_file'
op|'.'
name|'setdefault'
op|'('
name|'option'
op|'.'
name|'file_name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'option'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'filename'
op|','
name|'o'
name|'in'
name|'sorted'
op|'('
name|'by_file'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'filename'
op|':'
name|'print'
op|'>>'
name|'file'
op|','
name|'filename'
newline|'\n'
name|'o'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'option'
op|':'
name|'option'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'o'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
name|'option'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'option'
op|'.'
name|'metavar'
op|':'
newline|'\n'
indent|'                '
name|'prefix'
op|'+='
string|'"="'
op|'+'
name|'option'
op|'.'
name|'metavar'
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'file'
op|','
string|'"  --%-30s %s"'
op|'%'
op|'('
name|'prefix'
op|','
name|'option'
op|'.'
name|'help'
name|'or'
string|'""'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'print'
op|'>>'
name|'file'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Options
dedent|''
name|'class'
name|'_Options'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Our global program options, an dictionary with object-like access."""'
newline|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|instance
name|'def'
name|'instance'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'cls'
op|','
string|'"_instance"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_instance'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'.'
name|'_instance'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
op|','
name|'_Option'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'name'
op|']'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'AttributeError'
op|'('
string|'"Unrecognized option %r"'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Option
dedent|''
dedent|''
name|'class'
name|'_Option'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'type'
op|'='
name|'str'
op|','
name|'help'
op|'='
name|'None'
op|','
name|'metavar'
op|'='
name|'None'
op|','
nl|'\n'
name|'multiple'
op|'='
name|'False'
op|','
name|'file_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'default'
name|'is'
name|'None'
name|'and'
name|'multiple'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'type'
newline|'\n'
name|'self'
op|'.'
name|'help'
op|'='
name|'help'
newline|'\n'
name|'self'
op|'.'
name|'metavar'
op|'='
name|'metavar'
newline|'\n'
name|'self'
op|'.'
name|'multiple'
op|'='
name|'multiple'
newline|'\n'
name|'self'
op|'.'
name|'file_name'
op|'='
name|'file_name'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
name|'default'
newline|'\n'
name|'self'
op|'.'
name|'_value'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|value
dedent|''
name|'def'
name|'value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'default'
name|'if'
name|'self'
op|'.'
name|'_value'
name|'is'
name|'None'
name|'else'
name|'self'
op|'.'
name|'_value'
newline|'\n'
nl|'\n'
DECL|member|parse
dedent|''
name|'def'
name|'parse'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_parse'
op|'='
op|'{'
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|':'
name|'self'
op|'.'
name|'_parse_datetime'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'timedelta'
op|':'
name|'self'
op|'.'
name|'_parse_timedelta'
op|','
nl|'\n'
name|'bool'
op|':'
name|'self'
op|'.'
name|'_parse_bool'
op|','
nl|'\n'
name|'str'
op|':'
name|'self'
op|'.'
name|'_parse_string'
op|','
nl|'\n'
op|'}'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'type'
op|','
name|'self'
op|'.'
name|'type'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_value'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'for'
name|'part'
name|'in'
name|'value'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'type'
name|'in'
op|'('
name|'int'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
comment|'# allow ranges of the form X:Y (inclusive at both ends)'
nl|'\n'
indent|'                    '
name|'lo'
op|','
name|'_'
op|','
name|'hi'
op|'='
name|'part'
op|'.'
name|'partition'
op|'('
string|'":"'
op|')'
newline|'\n'
name|'lo'
op|'='
name|'_parse'
op|'('
name|'lo'
op|')'
newline|'\n'
name|'hi'
op|'='
name|'_parse'
op|'('
name|'hi'
op|')'
name|'if'
name|'hi'
name|'else'
name|'lo'
newline|'\n'
name|'self'
op|'.'
name|'_value'
op|'.'
name|'extend'
op|'('
name|'range'
op|'('
name|'lo'
op|','
name|'hi'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_value'
op|'.'
name|'append'
op|'('
name|'_parse'
op|'('
name|'part'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_value'
op|'='
name|'_parse'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'value'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'multiple'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Error'
op|'('
string|'"Option %r is required to be a list of %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'type'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'item'
op|'!='
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'item'
op|','
name|'self'
op|'.'
name|'type'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Error'
op|'('
string|'"Option %r is required to be a list of %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'type'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'value'
op|'!='
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'self'
op|'.'
name|'type'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Error'
op|'('
string|'"Option %r is required to be a %s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'type'
op|'.'
name|'__name__'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
comment|'# Supported date/time formats in our options'
nl|'\n'
DECL|variable|_DATETIME_FORMATS
dedent|''
name|'_DATETIME_FORMATS'
op|'='
op|'['
nl|'\n'
string|'"%a %b %d %H:%M:%S %Y"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M:%S"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M"'
op|','
nl|'\n'
string|'"%Y-%m-%dT%H:%M"'
op|','
nl|'\n'
string|'"%Y%m%d %H:%M:%S"'
op|','
nl|'\n'
string|'"%Y%m%d %H:%M"'
op|','
nl|'\n'
string|'"%Y-%m-%d"'
op|','
nl|'\n'
string|'"%Y%m%d"'
op|','
nl|'\n'
string|'"%H:%M:%S"'
op|','
nl|'\n'
string|'"%H:%M"'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_parse_datetime
name|'def'
name|'_parse_datetime'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'format'
name|'in'
name|'self'
op|'.'
name|'_DATETIME_FORMATS'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'strptime'
op|'('
name|'value'
op|','
name|'format'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'Error'
op|'('
string|"'Unrecognized date/time format: %r'"
op|'%'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_TIMEDELTA_ABBREVS
dedent|''
name|'_TIMEDELTA_ABBREVS'
op|'='
op|'['
nl|'\n'
op|'('
string|"'hours'"
op|','
op|'['
string|"'h'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'minutes'"
op|','
op|'['
string|"'m'"
op|','
string|"'min'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'seconds'"
op|','
op|'['
string|"'s'"
op|','
string|"'sec'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'milliseconds'"
op|','
op|'['
string|"'ms'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'microseconds'"
op|','
op|'['
string|"'us'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'days'"
op|','
op|'['
string|"'d'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'weeks'"
op|','
op|'['
string|"'w'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|_TIMEDELTA_ABBREV_DICT
name|'_TIMEDELTA_ABBREV_DICT'
op|'='
name|'dict'
op|'('
nl|'\n'
op|'('
name|'abbrev'
op|','
name|'full'
op|')'
name|'for'
name|'full'
op|','
name|'abbrevs'
name|'in'
name|'_TIMEDELTA_ABBREVS'
nl|'\n'
name|'for'
name|'abbrev'
name|'in'
name|'abbrevs'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_FLOAT_PATTERN
name|'_FLOAT_PATTERN'
op|'='
string|"r'[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:[eE][-+]?\\d+)?'"
newline|'\n'
nl|'\n'
DECL|variable|_TIMEDELTA_PATTERN
name|'_TIMEDELTA_PATTERN'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
nl|'\n'
string|"r'\\s*(%s)\\s*(\\w*)\\s*'"
op|'%'
name|'_FLOAT_PATTERN'
op|','
name|'re'
op|'.'
name|'IGNORECASE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_timedelta
name|'def'
name|'_parse_timedelta'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sum'
op|'='
name|'datetime'
op|'.'
name|'timedelta'
op|'('
op|')'
newline|'\n'
name|'start'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'start'
op|'<'
name|'len'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'m'
op|'='
name|'self'
op|'.'
name|'_TIMEDELTA_PATTERN'
op|'.'
name|'match'
op|'('
name|'value'
op|','
name|'start'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
dedent|''
name|'num'
op|'='
name|'float'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'units'
op|'='
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
name|'or'
string|"'seconds'"
newline|'\n'
name|'units'
op|'='
name|'self'
op|'.'
name|'_TIMEDELTA_ABBREV_DICT'
op|'.'
name|'get'
op|'('
name|'units'
op|','
name|'units'
op|')'
newline|'\n'
name|'sum'
op|'+='
name|'datetime'
op|'.'
name|'timedelta'
op|'('
op|'**'
op|'{'
name|'units'
op|':'
name|'num'
op|'}'
op|')'
newline|'\n'
name|'start'
op|'='
name|'m'
op|'.'
name|'end'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sum'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_parse_bool
dedent|''
dedent|''
name|'def'
name|'_parse_bool'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
op|'('
string|'"false"'
op|','
string|'"0"'
op|','
string|'"f"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_string
dedent|''
name|'def'
name|'_parse_string'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'decode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Error
dedent|''
dedent|''
name|'class'
name|'Error'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|enable_pretty_logging
dedent|''
name|'def'
name|'enable_pretty_logging'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turns on formatted logging output as configured."""'
newline|'\n'
name|'if'
op|'('
name|'options'
op|'.'
name|'log_to_stderr'
name|'or'
nl|'\n'
op|'('
name|'options'
op|'.'
name|'log_to_stderr'
name|'is'
name|'None'
name|'and'
name|'not'
name|'options'
op|'.'
name|'log_file_prefix'
op|')'
op|')'
op|':'
newline|'\n'
comment|'# Set up color if we are in a tty and curses is installed'
nl|'\n'
indent|'        '
name|'color'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'curses'
name|'and'
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'isatty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'curses'
op|'.'
name|'setupterm'
op|'('
op|')'
newline|'\n'
name|'if'
name|'curses'
op|'.'
name|'tigetnum'
op|'('
string|'"colors"'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'color'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'channel'
op|'='
name|'logging'
op|'.'
name|'StreamHandler'
op|'('
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'setFormatter'
op|'('
name|'_LogFormatter'
op|'('
name|'color'
op|'='
name|'color'
op|')'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'addHandler'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'options'
op|'.'
name|'log_file_prefix'
op|':'
newline|'\n'
indent|'        '
name|'channel'
op|'='
name|'logging'
op|'.'
name|'handlers'
op|'.'
name|'RotatingFileHandler'
op|'('
nl|'\n'
name|'filename'
op|'='
name|'options'
op|'.'
name|'log_file_prefix'
op|','
nl|'\n'
name|'maxBytes'
op|'='
name|'options'
op|'.'
name|'log_file_max_size'
op|','
nl|'\n'
name|'backupCount'
op|'='
name|'options'
op|'.'
name|'log_file_num_backups'
op|')'
newline|'\n'
name|'channel'
op|'.'
name|'setFormatter'
op|'('
name|'_LogFormatter'
op|'('
name|'color'
op|'='
name|'False'
op|')'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'addHandler'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LogFormatter
dedent|''
dedent|''
name|'class'
name|'_LogFormatter'
op|'('
name|'logging'
op|'.'
name|'Formatter'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'color'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'Formatter'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_color'
op|'='
name|'color'
newline|'\n'
name|'if'
name|'color'
op|':'
newline|'\n'
indent|'            '
name|'fg_color'
op|'='
name|'curses'
op|'.'
name|'tigetstr'
op|'('
string|'"setaf"'
op|')'
name|'or'
name|'curses'
op|'.'
name|'tigetstr'
op|'('
string|'"setf"'
op|')'
name|'or'
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'_colors'
op|'='
op|'{'
nl|'\n'
name|'logging'
op|'.'
name|'DEBUG'
op|':'
name|'curses'
op|'.'
name|'tparm'
op|'('
name|'fg_color'
op|','
number|'4'
op|')'
op|','
comment|'# Blue'
nl|'\n'
name|'logging'
op|'.'
name|'INFO'
op|':'
name|'curses'
op|'.'
name|'tparm'
op|'('
name|'fg_color'
op|','
number|'2'
op|')'
op|','
comment|'# Green'
nl|'\n'
name|'logging'
op|'.'
name|'WARNING'
op|':'
name|'curses'
op|'.'
name|'tparm'
op|'('
name|'fg_color'
op|','
number|'3'
op|')'
op|','
comment|'# Yellow'
nl|'\n'
name|'logging'
op|'.'
name|'ERROR'
op|':'
name|'curses'
op|'.'
name|'tparm'
op|'('
name|'fg_color'
op|','
number|'1'
op|')'
op|','
comment|'# Red'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_normal'
op|'='
name|'curses'
op|'.'
name|'tigetstr'
op|'('
string|'"sgr0"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|format
dedent|''
dedent|''
name|'def'
name|'format'
op|'('
name|'self'
op|','
name|'record'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'record'
op|'.'
name|'message'
op|'='
name|'record'
op|'.'
name|'getMessage'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'record'
op|'.'
name|'message'
op|'='
string|'"Bad message (%r): %r"'
op|'%'
op|'('
name|'e'
op|','
name|'record'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
dedent|''
name|'record'
op|'.'
name|'asctime'
op|'='
name|'time'
op|'.'
name|'strftime'
op|'('
nl|'\n'
string|'"%y%m%d %H:%M:%S"'
op|','
name|'self'
op|'.'
name|'converter'
op|'('
name|'record'
op|'.'
name|'created'
op|')'
op|')'
newline|'\n'
name|'prefix'
op|'='
string|"'[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]'"
op|'%'
name|'record'
op|'.'
name|'__dict__'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_color'
op|':'
newline|'\n'
indent|'            '
name|'prefix'
op|'='
op|'('
name|'self'
op|'.'
name|'_colors'
op|'.'
name|'get'
op|'('
name|'record'
op|'.'
name|'levelno'
op|','
name|'self'
op|'.'
name|'_normal'
op|')'
op|'+'
nl|'\n'
name|'prefix'
op|'+'
name|'self'
op|'.'
name|'_normal'
op|')'
newline|'\n'
dedent|''
name|'formatted'
op|'='
name|'prefix'
op|'+'
string|'" "'
op|'+'
name|'record'
op|'.'
name|'message'
newline|'\n'
name|'if'
name|'record'
op|'.'
name|'exc_info'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'record'
op|'.'
name|'exc_text'
op|':'
newline|'\n'
indent|'                '
name|'record'
op|'.'
name|'exc_text'
op|'='
name|'self'
op|'.'
name|'formatException'
op|'('
name|'record'
op|'.'
name|'exc_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'record'
op|'.'
name|'exc_text'
op|':'
newline|'\n'
indent|'            '
name|'formatted'
op|'='
name|'formatted'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'+'
string|'"\\n"'
op|'+'
name|'record'
op|'.'
name|'exc_text'
newline|'\n'
dedent|''
name|'return'
name|'formatted'
op|'.'
name|'replace'
op|'('
string|'"\\n"'
op|','
string|'"\\n    "'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|options
dedent|''
dedent|''
name|'options'
op|'='
name|'_Options'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Default options'
nl|'\n'
name|'define'
op|'('
string|'"help"'
op|','
name|'type'
op|'='
name|'bool'
op|','
name|'help'
op|'='
string|'"show this help information"'
op|')'
newline|'\n'
name|'define'
op|'('
string|'"logging"'
op|','
name|'default'
op|'='
string|'"info"'
op|','
nl|'\n'
name|'help'
op|'='
op|'('
string|'"Set the Python log level. If \'none\', tornado won\'t touch the "'
nl|'\n'
string|'"logging configuration."'
op|')'
op|','
nl|'\n'
name|'metavar'
op|'='
string|'"info|warning|error|none"'
op|')'
newline|'\n'
name|'define'
op|'('
string|'"log_to_stderr"'
op|','
name|'type'
op|'='
name|'bool'
op|','
name|'default'
op|'='
name|'None'
op|','
nl|'\n'
name|'help'
op|'='
op|'('
string|'"Send log output to stderr (colorized if possible). "'
nl|'\n'
string|'"By default use stderr if --log_file_prefix is not set."'
op|')'
op|')'
newline|'\n'
name|'define'
op|'('
string|'"log_file_prefix"'
op|','
name|'type'
op|'='
name|'str'
op|','
name|'default'
op|'='
name|'None'
op|','
name|'metavar'
op|'='
string|'"PATH"'
op|','
nl|'\n'
name|'help'
op|'='
op|'('
string|'"Path prefix for log files. "'
nl|'\n'
string|'"Note that if you are running multiple tornado processes, "'
nl|'\n'
string|'"log_file_prefix must be different for each of them (e.g. "'
nl|'\n'
string|'"include the port number)"'
op|')'
op|')'
newline|'\n'
name|'define'
op|'('
string|'"log_file_max_size"'
op|','
name|'type'
op|'='
name|'int'
op|','
name|'default'
op|'='
number|'100'
op|'*'
number|'1000'
op|'*'
number|'1000'
op|','
nl|'\n'
name|'help'
op|'='
string|'"max size of log files before rollover"'
op|')'
newline|'\n'
name|'define'
op|'('
string|'"log_file_num_backups"'
op|','
name|'type'
op|'='
name|'int'
op|','
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
name|'help'
op|'='
string|'"number of log files to keep"'
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""A utility class to write to and read from a non-blocking socket."""'
newline|'\n'
nl|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'ioloop'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
nl|'\n'
DECL|variable|_log
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'tornado.iostream'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|IOStream
name|'class'
name|'IOStream'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A utility class to write to and read from a non-blocking socket.\n\n    We support three methods: write(), read_until(), and read_bytes().\n    All of the methods take callbacks (since writing and reading are\n    non-blocking and asynchronous). read_until() reads the socket until\n    a given delimiter, and read_bytes() reads until a specified number\n    of bytes have been read from the socket.\n\n    A very simple (and broken) HTTP client using this class:\n\n        import ioloop\n        import iostream\n        import socket\n\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        s.connect(("friendfeed.com", 80))\n        stream = IOStream(s)\n\n        def on_headers(data):\n            headers = {}\n            for line in data.split("\\r\\n"):\n               parts = line.split(":")\n               if len(parts) == 2:\n                   headers[parts[0].strip()] = parts[1].strip()\n            stream.read_bytes(int(headers["Content-Length"]), on_body)\n\n        def on_body(data):\n            print data\n            stream.close()\n            ioloop.IOLoop.instance().stop()\n\n        stream.write("GET / HTTP/1.0\\r\\n\\r\\n")\n        stream.read_until("\\r\\n\\r\\n", on_headers)\n        ioloop.IOLoop.instance().start()\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'socket'
op|','
name|'io_loop'
op|'='
name|'None'
op|','
name|'max_buffer_size'
op|'='
number|'104857600'
op|','
nl|'\n'
name|'read_chunk_size'
op|'='
number|'4096'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'socket'
op|'='
name|'socket'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'setblocking'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'='
name|'io_loop'
name|'or'
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'max_buffer_size'
op|'='
name|'max_buffer_size'
newline|'\n'
name|'self'
op|'.'
name|'read_chunk_size'
op|'='
name|'read_chunk_size'
newline|'\n'
name|'self'
op|'.'
name|'_read_buffer'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'_write_buffer'
op|'='
string|'""'
newline|'\n'
name|'self'
op|'.'
name|'_read_delimiter'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_read_bytes'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_read_callback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_write_callback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_close_callback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'ERROR'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'add_handler'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_handle_events'
op|','
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|read_until
dedent|''
name|'def'
name|'read_until'
op|'('
name|'self'
op|','
name|'delimiter'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call callback when we read the given delimiter."""'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_read_callback'
op|','
string|'"Already reading"'
newline|'\n'
name|'loc'
op|'='
name|'self'
op|'.'
name|'_read_buffer'
op|'.'
name|'find'
op|'('
name|'delimiter'
op|')'
newline|'\n'
name|'if'
name|'loc'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'self'
op|'.'
name|'_consume'
op|'('
name|'loc'
op|'+'
name|'len'
op|'('
name|'delimiter'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_closed'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_read_delimiter'
op|'='
name|'delimiter'
newline|'\n'
name|'self'
op|'.'
name|'_read_callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'_add_io_state'
op|'('
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'READ'
op|')'
newline|'\n'
nl|'\n'
DECL|member|read_bytes
dedent|''
name|'def'
name|'read_bytes'
op|'('
name|'self'
op|','
name|'num_bytes'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call callback when we read the given number of bytes."""'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_read_callback'
op|','
string|'"Already reading"'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_read_buffer'
op|')'
op|'>='
name|'num_bytes'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'self'
op|'.'
name|'_consume'
op|'('
name|'num_bytes'
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_closed'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_read_bytes'
op|'='
name|'num_bytes'
newline|'\n'
name|'self'
op|'.'
name|'_read_callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'_add_io_state'
op|'('
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'READ'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write the given data to this stream.\n\n        If callback is given, we call it when all of the buffered write\n        data has been successfully written to the stream. If there was\n        previously buffered write data and an old write callback, that\n        callback is simply overwritten with this new callback.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_check_closed'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write_buffer'
op|'+='
name|'data'
newline|'\n'
name|'self'
op|'.'
name|'_add_io_state'
op|'('
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'WRITE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write_callback'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
DECL|member|set_close_callback
dedent|''
name|'def'
name|'set_close_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call the given callback when the stream is closed."""'
newline|'\n'
name|'self'
op|'.'
name|'_close_callback'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close this stream."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'socket'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'remove_handler'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'socket'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_close_callback'
op|':'
name|'self'
op|'.'
name|'_close_callback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reading
dedent|''
dedent|''
name|'def'
name|'reading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns true if we are currently reading from the stream."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_read_callback'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|writing
dedent|''
name|'def'
name|'writing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns true if we are currently writing to the stream."""'
newline|'\n'
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'_write_buffer'
op|')'
op|'>'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|closed
dedent|''
name|'def'
name|'closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'socket'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_handle_events
dedent|''
name|'def'
name|'_handle_events'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'socket'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Got events for closed stream %d"'
op|','
name|'fd'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'events'
op|'&'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'READ'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_handle_read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'socket'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'events'
op|'&'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'WRITE'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_handle_write'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'socket'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'events'
op|'&'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'ERROR'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'state'
op|'='
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'ERROR'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_read_delimiter'
name|'or'
name|'self'
op|'.'
name|'_read_bytes'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'|='
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'READ'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_write_buffer'
op|':'
newline|'\n'
indent|'            '
name|'state'
op|'|='
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'WRITE'
newline|'\n'
dedent|''
name|'if'
name|'state'
op|'!='
name|'self'
op|'.'
name|'_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_state'
op|'='
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'update_handler'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_read
dedent|''
dedent|''
name|'def'
name|'_handle_read'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
name|'self'
op|'.'
name|'socket'
op|'.'
name|'recv'
op|'('
name|'self'
op|'.'
name|'read_chunk_size'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'['
number|'0'
op|']'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EWOULDBLOCK'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Read error on %d: %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'chunk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_read_buffer'
op|'+='
name|'chunk'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_read_buffer'
op|')'
op|'>='
name|'self'
op|'.'
name|'max_buffer_size'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Reached maximum read buffer size"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_read_bytes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'_read_buffer'
op|')'
op|'>='
name|'self'
op|'.'
name|'_read_bytes'
op|':'
newline|'\n'
indent|'                '
name|'num_bytes'
op|'='
name|'self'
op|'.'
name|'_read_bytes'
newline|'\n'
name|'callback'
op|'='
name|'self'
op|'.'
name|'_read_callback'
newline|'\n'
name|'self'
op|'.'
name|'_read_callback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_read_bytes'
op|'='
name|'None'
newline|'\n'
name|'callback'
op|'('
name|'self'
op|'.'
name|'_consume'
op|'('
name|'num_bytes'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_read_delimiter'
op|':'
newline|'\n'
indent|'            '
name|'loc'
op|'='
name|'self'
op|'.'
name|'_read_buffer'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'_read_delimiter'
op|')'
newline|'\n'
name|'if'
name|'loc'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'callback'
op|'='
name|'self'
op|'.'
name|'_read_callback'
newline|'\n'
name|'delimiter_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'_read_delimiter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_read_callback'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_read_delimiter'
op|'='
name|'None'
newline|'\n'
name|'callback'
op|'('
name|'self'
op|'.'
name|'_consume'
op|'('
name|'loc'
op|'+'
name|'delimiter_len'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_write
dedent|''
dedent|''
dedent|''
name|'def'
name|'_handle_write'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'self'
op|'.'
name|'_write_buffer'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'num_bytes'
op|'='
name|'self'
op|'.'
name|'socket'
op|'.'
name|'send'
op|'('
name|'self'
op|'.'
name|'_write_buffer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write_buffer'
op|'='
name|'self'
op|'.'
name|'_write_buffer'
op|'['
name|'num_bytes'
op|':'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'['
number|'0'
op|']'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EWOULDBLOCK'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Write error on %d: %s"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_write_buffer'
name|'and'
name|'self'
op|'.'
name|'_write_callback'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'='
name|'self'
op|'.'
name|'_write_callback'
newline|'\n'
name|'self'
op|'.'
name|'_write_callback'
op|'='
name|'None'
newline|'\n'
name|'callback'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_consume
dedent|''
dedent|''
name|'def'
name|'_consume'
op|'('
name|'self'
op|','
name|'loc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'_read_buffer'
op|'['
op|':'
name|'loc'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_read_buffer'
op|'='
name|'self'
op|'.'
name|'_read_buffer'
op|'['
name|'loc'
op|':'
op|']'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|_check_closed
dedent|''
name|'def'
name|'_check_closed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'socket'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IOError'
op|'('
string|'"Stream is closed"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_io_state
dedent|''
dedent|''
name|'def'
name|'_add_io_state'
op|'('
name|'self'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_state'
op|'&'
name|'state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'_state'
op|'|'
name|'state'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'update_handler'
op|'('
name|'self'
op|'.'
name|'socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

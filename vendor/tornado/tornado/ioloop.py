begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""A level-triggered I/O loop for non-blocking sockets."""'
newline|'\n'
nl|'\n'
name|'import'
name|'bisect'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'select'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32_support'
newline|'\n'
name|'import'
name|'win32_support'
name|'as'
name|'fcntl'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
nl|'\n'
DECL|variable|_log
dedent|''
dedent|''
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"tornado.ioloop"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|IOLoop
name|'class'
name|'IOLoop'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A level-triggered I/O loop.\n\n    We use epoll if it is available, or else we fall back on select(). If\n    you are implementing a system that needs to handle 1000s of simultaneous\n    connections, you should use Linux and either compile our epoll module or\n    use Python 2.6+ to get epoll support.\n\n    Example usage for a simple TCP server:\n\n        import errno\n        import functools\n        import ioloop\n        import socket\n\n        def connection_ready(sock, fd, events):\n            while True:\n                try:\n                    connection, address = sock.accept()\n                except socket.error, e:\n                    if e[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):\n                        raise\n                    return\n                connection.setblocking(0)\n                handle_connection(connection, address)\n\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.setblocking(0)\n        sock.bind(("", port))\n        sock.listen(128)\n\n        io_loop = ioloop.IOLoop.instance()\n        callback = functools.partial(connection_ready, sock)\n        io_loop.add_handler(sock.fileno(), callback, io_loop.READ)\n        io_loop.start()\n\n    """'
newline|'\n'
comment|'# Constants from the epoll module'
nl|'\n'
DECL|variable|_EPOLLIN
name|'_EPOLLIN'
op|'='
number|'0x001'
newline|'\n'
DECL|variable|_EPOLLPRI
name|'_EPOLLPRI'
op|'='
number|'0x002'
newline|'\n'
DECL|variable|_EPOLLOUT
name|'_EPOLLOUT'
op|'='
number|'0x004'
newline|'\n'
DECL|variable|_EPOLLERR
name|'_EPOLLERR'
op|'='
number|'0x008'
newline|'\n'
DECL|variable|_EPOLLHUP
name|'_EPOLLHUP'
op|'='
number|'0x010'
newline|'\n'
DECL|variable|_EPOLLRDHUP
name|'_EPOLLRDHUP'
op|'='
number|'0x2000'
newline|'\n'
DECL|variable|_EPOLLONESHOT
name|'_EPOLLONESHOT'
op|'='
op|'('
number|'1'
op|'<<'
number|'30'
op|')'
newline|'\n'
DECL|variable|_EPOLLET
name|'_EPOLLET'
op|'='
op|'('
number|'1'
op|'<<'
number|'31'
op|')'
newline|'\n'
nl|'\n'
comment|'# Our events map exactly to the epoll events'
nl|'\n'
DECL|variable|NONE
name|'NONE'
op|'='
number|'0'
newline|'\n'
DECL|variable|READ
name|'READ'
op|'='
name|'_EPOLLIN'
newline|'\n'
DECL|variable|WRITE
name|'WRITE'
op|'='
name|'_EPOLLOUT'
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
name|'_EPOLLERR'
op|'|'
name|'_EPOLLHUP'
op|'|'
name|'_EPOLLRDHUP'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'impl'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_impl'
op|'='
name|'impl'
name|'or'
name|'_poll'
op|'('
op|')'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'_impl'
op|','
string|"'fileno'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_set_close_exec'
op|'('
name|'self'
op|'.'
name|'_impl'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_handlers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_events'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_callbacks'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_timeouts'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# Create a pipe that we send bogus data to when we want to wake'
nl|'\n'
comment|'# the I/O loop when it is idle'
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'name'
op|'!='
string|"'nt'"
op|':'
newline|'\n'
indent|'            '
name|'r'
op|','
name|'w'
op|'='
name|'os'
op|'.'
name|'pipe'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_nonblocking'
op|'('
name|'r'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_nonblocking'
op|'('
name|'w'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_close_exec'
op|'('
name|'r'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_set_close_exec'
op|'('
name|'w'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_waker_reader'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'r'
op|','
string|'"r"'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_waker_writer'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'w'
op|','
string|'"w"'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waker_reader'
op|'='
name|'self'
op|'.'
name|'_waker_writer'
op|'='
name|'win32_support'
op|'.'
name|'Pipe'
op|'('
op|')'
newline|'\n'
name|'r'
op|'='
name|'self'
op|'.'
name|'_waker_writer'
op|'.'
name|'reader_fd'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'add_handler'
op|'('
name|'r'
op|','
name|'self'
op|'.'
name|'_read_waker'
op|','
name|'self'
op|'.'
name|'READ'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|instance
name|'def'
name|'instance'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a global IOLoop instance.\n\n        Most single-threaded applications have a single, global IOLoop.\n        Use this method instead of passing around IOLoop instances\n        throughout your code.\n\n        A common pattern for classes that depend on IOLoops is to use\n        a default argument to enable programs with multiple IOLoops\n        but not require the argument for simpler applications:\n\n            class MyClass(object):\n                def __init__(self, io_loop=None):\n                    self.io_loop = io_loop or IOLoop.instance()\n        """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'cls'
op|','
string|'"_instance"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_instance'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'.'
name|'_instance'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|initialized
name|'def'
name|'initialized'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hasattr'
op|'('
name|'cls'
op|','
string|'"_instance"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_handler
dedent|''
name|'def'
name|'add_handler'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'handler'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Registers the given handler to receive the given events for fd."""'
newline|'\n'
name|'self'
op|'.'
name|'_handlers'
op|'['
name|'fd'
op|']'
op|'='
name|'handler'
newline|'\n'
name|'self'
op|'.'
name|'_impl'
op|'.'
name|'register'
op|'('
name|'fd'
op|','
name|'events'
op|'|'
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_handler
dedent|''
name|'def'
name|'update_handler'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Changes the events we listen for fd."""'
newline|'\n'
name|'self'
op|'.'
name|'_impl'
op|'.'
name|'modify'
op|'('
name|'fd'
op|','
name|'events'
op|'|'
name|'self'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_handler
dedent|''
name|'def'
name|'remove_handler'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop listening for events on fd."""'
newline|'\n'
name|'self'
op|'.'
name|'_handlers'
op|'.'
name|'pop'
op|'('
name|'fd'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_events'
op|'.'
name|'pop'
op|'('
name|'fd'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_impl'
op|'.'
name|'unregister'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'IOError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'debug'
op|'('
string|'"Error deleting fd from IOLoop"'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts the I/O loop.\n\n        The loop will run until one of the I/O handlers calls stop(), which\n        will make the loop stop after the current event iteration completes.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_stopped'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'False'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
comment|'# Never use an infinite timeout here - it can stall epoll'
nl|'\n'
indent|'            '
name|'poll_timeout'
op|'='
number|'0.2'
newline|'\n'
nl|'\n'
comment|'# Prevent IO event starvation by delaying new callbacks'
nl|'\n'
comment|'# to the next iteration of the event loop.'
nl|'\n'
name|'callbacks'
op|'='
name|'list'
op|'('
name|'self'
op|'.'
name|'_callbacks'
op|')'
newline|'\n'
name|'for'
name|'callback'
name|'in'
name|'callbacks'
op|':'
newline|'\n'
comment|'# A callback can add or remove other callbacks'
nl|'\n'
indent|'                '
name|'if'
name|'callback'
name|'in'
name|'self'
op|'.'
name|'_callbacks'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_callbacks'
op|'.'
name|'remove'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_callback'
op|'('
name|'callback'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'_callbacks'
op|':'
newline|'\n'
indent|'                '
name|'poll_timeout'
op|'='
number|'0.0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_timeouts'
op|':'
newline|'\n'
indent|'                '
name|'now'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_timeouts'
name|'and'
name|'self'
op|'.'
name|'_timeouts'
op|'['
number|'0'
op|']'
op|'.'
name|'deadline'
op|'<='
name|'now'
op|':'
newline|'\n'
indent|'                    '
name|'timeout'
op|'='
name|'self'
op|'.'
name|'_timeouts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_run_callback'
op|'('
name|'timeout'
op|'.'
name|'callback'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_timeouts'
op|':'
newline|'\n'
indent|'                    '
name|'milliseconds'
op|'='
name|'self'
op|'.'
name|'_timeouts'
op|'['
number|'0'
op|']'
op|'.'
name|'deadline'
op|'-'
name|'now'
newline|'\n'
name|'poll_timeout'
op|'='
name|'min'
op|'('
name|'milliseconds'
op|','
name|'poll_timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'event_pairs'
op|'='
name|'self'
op|'.'
name|'_impl'
op|'.'
name|'poll'
op|'('
name|'poll_timeout'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'hasattr'
op|'('
name|'e'
op|','
string|"'errno'"
op|')'
name|'and'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINTR'
op|':'
newline|'\n'
indent|'                    '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Interrupted system call"'
op|','
name|'exc_info'
op|'='
number|'1'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
comment|'# Pop one fd at a time from the set of pending fds and run'
nl|'\n'
comment|'# its handler. Since that handler may perform actions on'
nl|'\n'
comment|'# other file descriptors, there may be reentrant calls to'
nl|'\n'
comment|'# this IOLoop that update self._events'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_events'
op|'.'
name|'update'
op|'('
name|'event_pairs'
op|')'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_events'
op|':'
newline|'\n'
indent|'                '
name|'fd'
op|','
name|'events'
op|'='
name|'self'
op|'.'
name|'_events'
op|'.'
name|'popitem'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_handlers'
op|'['
name|'fd'
op|']'
op|'('
name|'fd'
op|','
name|'events'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyboardInterrupt'
op|','
name|'SystemExit'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OSError'
op|','
name|'IOError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'e'
op|'['
number|'0'
op|']'
op|'=='
name|'errno'
op|'.'
name|'EPIPE'
op|':'
newline|'\n'
comment|'# Happens when the client closes the connection'
nl|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Exception in I/O handler for fd %d"'
op|','
nl|'\n'
name|'fd'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Exception in I/O handler for fd %d"'
op|','
nl|'\n'
name|'fd'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# reset the stopped flag so another start/stop pair can be issued'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop the loop after the current event loop iteration is complete.\n        If the event loop is not currently running, the next call to start()\n        will return immediately.\n\n        To use asynchronous methods from otherwise-synchronous code (such as\n        unit tests), you can start and stop the event loop like this:\n          ioloop = IOLoop()\n          async_method(ioloop=ioloop, callback=ioloop.stop)\n          ioloop.start()\n        ioloop.start() will return after async_method has run its callback,\n        whether that callback was invoked before or after ioloop.start.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_stopped'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_wake'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|running
dedent|''
name|'def'
name|'running'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns true if this IOLoop is currently running."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_running'
newline|'\n'
nl|'\n'
DECL|member|add_timeout
dedent|''
name|'def'
name|'add_timeout'
op|'('
name|'self'
op|','
name|'deadline'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls the given callback at the time deadline from the I/O loop."""'
newline|'\n'
name|'timeout'
op|'='
name|'_Timeout'
op|'('
name|'deadline'
op|','
name|'callback'
op|')'
newline|'\n'
name|'bisect'
op|'.'
name|'insort'
op|'('
name|'self'
op|'.'
name|'_timeouts'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'return'
name|'timeout'
newline|'\n'
nl|'\n'
DECL|member|remove_timeout
dedent|''
name|'def'
name|'remove_timeout'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_timeouts'
op|'.'
name|'remove'
op|'('
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_callback
dedent|''
name|'def'
name|'add_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calls the given callback on the next I/O loop iteration."""'
newline|'\n'
name|'self'
op|'.'
name|'_callbacks'
op|'.'
name|'add'
op|'('
name|'callback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wake'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|remove_callback
dedent|''
name|'def'
name|'remove_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Removes the given callback from the next I/O loop iteration."""'
newline|'\n'
name|'self'
op|'.'
name|'_callbacks'
op|'.'
name|'remove'
op|'('
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wake
dedent|''
name|'def'
name|'_wake'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_waker_writer'
op|'.'
name|'write'
op|'('
string|'"x"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_run_callback
dedent|''
dedent|''
name|'def'
name|'_run_callback'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyboardInterrupt'
op|','
name|'SystemExit'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handle_callback_exception'
op|'('
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_callback_exception
dedent|''
dedent|''
name|'def'
name|'handle_callback_exception'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This method is called whenever a callback run by the IOLoop\n        throws an exception.\n\n        By default simply logs the exception as an error.  Subclasses\n        may override this method to customize reporting of exceptions.\n\n        The exception itself is not passed explicitly, but is available\n        in sys.exc_info.\n        """'
newline|'\n'
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Exception in callback %r"'
op|','
name|'callback'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_read_waker
dedent|''
name|'def'
name|'_read_waker'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_waker_reader'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_set_nonblocking
dedent|''
dedent|''
name|'def'
name|'_set_nonblocking'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFL'
op|')'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFL'
op|','
name|'flags'
op|'|'
name|'os'
op|'.'
name|'O_NONBLOCK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_set_close_exec
dedent|''
name|'def'
name|'_set_close_exec'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_GETFD'
op|')'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'fd'
op|','
name|'fcntl'
op|'.'
name|'F_SETFD'
op|','
name|'flags'
op|'|'
name|'fcntl'
op|'.'
name|'FD_CLOEXEC'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Timeout
dedent|''
dedent|''
name|'class'
name|'_Timeout'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An IOLoop timeout, a UNIX timestamp and a callback"""'
newline|'\n'
nl|'\n'
comment|'# Reduce memory overhead when there are lots of pending callbacks'
nl|'\n'
DECL|variable|__slots__
name|'__slots__'
op|'='
op|'['
string|"'deadline'"
op|','
string|"'callback'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'deadline'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'deadline'
op|'='
name|'deadline'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
DECL|member|__cmp__
dedent|''
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cmp'
op|'('
op|'('
name|'self'
op|'.'
name|'deadline'
op|','
name|'id'
op|'('
name|'self'
op|'.'
name|'callback'
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'other'
op|'.'
name|'deadline'
op|','
name|'id'
op|'('
name|'other'
op|'.'
name|'callback'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PeriodicCallback
dedent|''
dedent|''
name|'class'
name|'PeriodicCallback'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Schedules the given callback to be called periodically.\n\n    The callback is called every callback_time milliseconds.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'callback_time'
op|','
name|'io_loop'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'callback_time'
op|'='
name|'callback_time'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'='
name|'io_loop'
name|'or'
name|'IOLoop'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeout'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'+'
name|'self'
op|'.'
name|'callback_time'
op|'/'
number|'1000.0'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'add_timeout'
op|'('
name|'timeout'
op|','
name|'self'
op|'.'
name|'_run'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_run
dedent|''
name|'def'
name|'_run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
name|'return'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'callback'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyboardInterrupt'
op|','
name|'SystemExit'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Error in periodic callback"'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_EPoll
dedent|''
dedent|''
name|'class'
name|'_EPoll'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An epoll-based event loop using our C module for Python 2.5 systems"""'
newline|'\n'
DECL|variable|_EPOLL_CTL_ADD
name|'_EPOLL_CTL_ADD'
op|'='
number|'1'
newline|'\n'
DECL|variable|_EPOLL_CTL_DEL
name|'_EPOLL_CTL_DEL'
op|'='
number|'2'
newline|'\n'
DECL|variable|_EPOLL_CTL_MOD
name|'_EPOLL_CTL_MOD'
op|'='
number|'3'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_epoll_fd'
op|'='
name|'epoll'
op|'.'
name|'epoll_create'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|fileno
dedent|''
name|'def'
name|'fileno'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_epoll_fd'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'epoll'
op|'.'
name|'epoll_ctl'
op|'('
name|'self'
op|'.'
name|'_epoll_fd'
op|','
name|'self'
op|'.'
name|'_EPOLL_CTL_ADD'
op|','
name|'fd'
op|','
name|'events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify
dedent|''
name|'def'
name|'modify'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'epoll'
op|'.'
name|'epoll_ctl'
op|'('
name|'self'
op|'.'
name|'_epoll_fd'
op|','
name|'self'
op|'.'
name|'_EPOLL_CTL_MOD'
op|','
name|'fd'
op|','
name|'events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'epoll'
op|'.'
name|'epoll_ctl'
op|'('
name|'self'
op|'.'
name|'_epoll_fd'
op|','
name|'self'
op|'.'
name|'_EPOLL_CTL_DEL'
op|','
name|'fd'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll
dedent|''
name|'def'
name|'poll'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'epoll'
op|'.'
name|'epoll_wait'
op|'('
name|'self'
op|'.'
name|'_epoll_fd'
op|','
name|'int'
op|'('
name|'timeout'
op|'*'
number|'1000'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_KQueue
dedent|''
dedent|''
name|'class'
name|'_KQueue'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A kqueue-based event loop for BSD/Mac systems."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_kqueue'
op|'='
name|'select'
op|'.'
name|'kqueue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_active'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|fileno
dedent|''
name|'def'
name|'fileno'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_kqueue'
op|'.'
name|'fileno'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_control'
op|'('
name|'fd'
op|','
name|'events'
op|','
name|'select'
op|'.'
name|'KQ_EV_ADD'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_active'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
newline|'\n'
nl|'\n'
DECL|member|modify
dedent|''
name|'def'
name|'modify'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unregister'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'register'
op|'('
name|'fd'
op|','
name|'events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'events'
op|'='
name|'self'
op|'.'
name|'_active'
op|'.'
name|'pop'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_control'
op|'('
name|'fd'
op|','
name|'events'
op|','
name|'select'
op|'.'
name|'KQ_EV_DELETE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_control
dedent|''
name|'def'
name|'_control'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kevents'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'events'
op|'&'
name|'IOLoop'
op|'.'
name|'WRITE'
op|':'
newline|'\n'
indent|'            '
name|'kevents'
op|'.'
name|'append'
op|'('
name|'select'
op|'.'
name|'kevent'
op|'('
nl|'\n'
name|'fd'
op|','
name|'filter'
op|'='
name|'select'
op|'.'
name|'KQ_FILTER_WRITE'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'events'
op|'&'
name|'IOLoop'
op|'.'
name|'READ'
name|'or'
name|'not'
name|'kevents'
op|':'
newline|'\n'
comment|'# Always read when there is not a write'
nl|'\n'
indent|'            '
name|'kevents'
op|'.'
name|'append'
op|'('
name|'select'
op|'.'
name|'kevent'
op|'('
nl|'\n'
name|'fd'
op|','
name|'filter'
op|'='
name|'select'
op|'.'
name|'KQ_FILTER_READ'
op|','
name|'flags'
op|'='
name|'flags'
op|')'
op|')'
newline|'\n'
comment|'# Even though control() takes a list, it seems to return EINVAL'
nl|'\n'
comment|'# on Mac OS X (10.6) when there is more than one event in the list.'
nl|'\n'
dedent|''
name|'for'
name|'kevent'
name|'in'
name|'kevents'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_kqueue'
op|'.'
name|'control'
op|'('
op|'['
name|'kevent'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll
dedent|''
dedent|''
name|'def'
name|'poll'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kevents'
op|'='
name|'self'
op|'.'
name|'_kqueue'
op|'.'
name|'control'
op|'('
name|'None'
op|','
number|'1000'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'events'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'kevent'
name|'in'
name|'kevents'
op|':'
newline|'\n'
indent|'            '
name|'fd'
op|'='
name|'kevent'
op|'.'
name|'ident'
newline|'\n'
name|'flags'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'kevent'
op|'.'
name|'filter'
op|'=='
name|'select'
op|'.'
name|'KQ_FILTER_READ'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'READ'
newline|'\n'
dedent|''
name|'if'
name|'kevent'
op|'.'
name|'filter'
op|'=='
name|'select'
op|'.'
name|'KQ_FILTER_WRITE'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'WRITE'
newline|'\n'
dedent|''
name|'if'
name|'kevent'
op|'.'
name|'flags'
op|'&'
name|'select'
op|'.'
name|'KQ_EV_ERROR'
op|':'
newline|'\n'
indent|'                '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'ERROR'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'events'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Select
dedent|''
dedent|''
name|'class'
name|'_Select'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A simple, select()-based IOLoop implementation for non-Linux systems"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'read_fds'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write_fds'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error_fds'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fd_sets'
op|'='
op|'('
name|'self'
op|'.'
name|'read_fds'
op|','
name|'self'
op|'.'
name|'write_fds'
op|','
name|'self'
op|'.'
name|'error_fds'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'events'
op|'&'
name|'IOLoop'
op|'.'
name|'READ'
op|':'
name|'self'
op|'.'
name|'read_fds'
op|'.'
name|'add'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'if'
name|'events'
op|'&'
name|'IOLoop'
op|'.'
name|'WRITE'
op|':'
name|'self'
op|'.'
name|'write_fds'
op|'.'
name|'add'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'if'
name|'events'
op|'&'
name|'IOLoop'
op|'.'
name|'ERROR'
op|':'
name|'self'
op|'.'
name|'error_fds'
op|'.'
name|'add'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|modify
dedent|''
name|'def'
name|'modify'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'unregister'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'register'
op|'('
name|'fd'
op|','
name|'events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unregister
dedent|''
name|'def'
name|'unregister'
op|'('
name|'self'
op|','
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'read_fds'
op|'.'
name|'discard'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'write_fds'
op|'.'
name|'discard'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'error_fds'
op|'.'
name|'discard'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|poll
dedent|''
name|'def'
name|'poll'
op|'('
name|'self'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'readable'
op|','
name|'writeable'
op|','
name|'errors'
op|'='
name|'select'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'read_fds'
op|','
name|'self'
op|'.'
name|'write_fds'
op|','
name|'self'
op|'.'
name|'error_fds'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'events'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'fd'
name|'in'
name|'readable'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'READ'
newline|'\n'
dedent|''
name|'for'
name|'fd'
name|'in'
name|'writeable'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'WRITE'
newline|'\n'
dedent|''
name|'for'
name|'fd'
name|'in'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'events'
op|'['
name|'fd'
op|']'
op|'='
name|'events'
op|'.'
name|'get'
op|'('
name|'fd'
op|','
number|'0'
op|')'
op|'|'
name|'IOLoop'
op|'.'
name|'ERROR'
newline|'\n'
dedent|''
name|'return'
name|'events'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Choose a poll implementation. Use epoll if it is available, fall back to'
nl|'\n'
comment|'# select() for non-Linux platforms'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'select'
op|','
string|'"epoll"'
op|')'
op|':'
newline|'\n'
comment|'# Python 2.6+ on Linux'
nl|'\n'
DECL|variable|_poll
indent|'    '
name|'_poll'
op|'='
name|'select'
op|'.'
name|'epoll'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'select'
op|','
string|'"kqueue"'
op|')'
op|':'
newline|'\n'
comment|'# Python 2.6+ on BSD or Mac'
nl|'\n'
DECL|variable|_poll
indent|'    '
name|'_poll'
op|'='
name|'_KQueue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
comment|'# Linux systems with our C module installed'
nl|'\n'
indent|'        '
name|'import'
name|'epoll'
newline|'\n'
name|'_poll'
op|'='
name|'_EPoll'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
comment|'# All other systems'
nl|'\n'
indent|'        '
name|'import'
name|'sys'
newline|'\n'
name|'if'
string|'"linux"'
name|'in'
name|'sys'
op|'.'
name|'platform'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"epoll module not found; using select()"'
op|')'
newline|'\n'
dedent|''
name|'_poll'
op|'='
name|'_Select'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

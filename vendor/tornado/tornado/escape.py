begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Escaping/unescaping methods for HTML, JSON, URLs, and others."""'
newline|'\n'
nl|'\n'
name|'import'
name|'htmlentitydefs'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'saxutils'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'json'
newline|'\n'
name|'assert'
name|'hasattr'
op|'('
name|'json'
op|','
string|'"loads"'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'json'
op|','
string|'"dumps"'
op|')'
newline|'\n'
DECL|variable|_json_decode
name|'_json_decode'
op|'='
name|'lambda'
name|'s'
op|':'
name|'json'
op|'.'
name|'loads'
op|'('
name|'s'
op|')'
newline|'\n'
DECL|variable|_json_encode
name|'_json_encode'
op|'='
name|'lambda'
name|'v'
op|':'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'simplejson'
newline|'\n'
DECL|variable|_json_decode
name|'_json_decode'
op|'='
name|'lambda'
name|'s'
op|':'
name|'simplejson'
op|'.'
name|'loads'
op|'('
name|'_unicode'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
DECL|variable|_json_encode
name|'_json_encode'
op|'='
name|'lambda'
name|'v'
op|':'
name|'simplejson'
op|'.'
name|'dumps'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
comment|'# For Google AppEngine'
nl|'\n'
indent|'            '
name|'from'
name|'django'
op|'.'
name|'utils'
name|'import'
name|'simplejson'
newline|'\n'
DECL|variable|_json_decode
name|'_json_decode'
op|'='
name|'lambda'
name|'s'
op|':'
name|'simplejson'
op|'.'
name|'loads'
op|'('
name|'_unicode'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
DECL|variable|_json_encode
name|'_json_encode'
op|'='
name|'lambda'
name|'v'
op|':'
name|'simplejson'
op|'.'
name|'dumps'
op|'('
name|'v'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"A JSON parser is required, e.g., simplejson at "'
nl|'\n'
string|'"http://pypi.python.org/pypi/simplejson/"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_escape
dedent|''
dedent|''
dedent|''
name|'def'
name|'xhtml_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Escapes a string so it is valid within XML or XHTML."""'
newline|'\n'
name|'return'
name|'utf8'
op|'('
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'saxutils'
op|'.'
name|'escape'
op|'('
name|'value'
op|','
op|'{'
string|'\'"\''
op|':'
string|'"&quot;"'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_unescape
dedent|''
name|'def'
name|'xhtml_unescape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Un-escapes an XML-escaped string."""'
newline|'\n'
name|'return'
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"&(#?)(\\w+?);"'
op|','
name|'_convert_entity'
op|','
name|'_unicode'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|json_encode
dedent|''
name|'def'
name|'json_encode'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""JSON-encodes the given Python object."""'
newline|'\n'
name|'return'
name|'_json_encode'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|json_decode
dedent|''
name|'def'
name|'json_decode'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns Python objects for the given JSON string."""'
newline|'\n'
name|'return'
name|'_json_decode'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|squeeze
dedent|''
name|'def'
name|'squeeze'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replace all sequences of whitespace chars with a single space."""'
newline|'\n'
name|'return'
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"[\\x00-\\x20]+"'
op|','
string|'" "'
op|','
name|'value'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|url_escape
dedent|''
name|'def'
name|'url_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a valid URL-encoded version of the given value."""'
newline|'\n'
name|'return'
name|'urllib'
op|'.'
name|'quote_plus'
op|'('
name|'utf8'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|url_unescape
dedent|''
name|'def'
name|'url_unescape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decodes the given value from a URL."""'
newline|'\n'
name|'return'
name|'_unicode'
op|'('
name|'urllib'
op|'.'
name|'unquote_plus'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8
dedent|''
name|'def'
name|'utf8'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_unicode
dedent|''
name|'def'
name|'_unicode'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'decode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_convert_entity
dedent|''
name|'def'
name|'_convert_entity'
op|'('
name|'m'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|'=='
string|'"#"'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'unichr'
op|'('
name|'int'
op|'('
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"&#%s;"'
op|'%'
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_HTML_UNICODE_MAP'
op|'['
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"&%s;"'
op|'%'
name|'m'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_build_unicode_map
dedent|''
dedent|''
name|'def'
name|'_build_unicode_map'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'unicode_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'htmlentitydefs'
op|'.'
name|'name2codepoint'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unicode_map'
op|'['
name|'name'
op|']'
op|'='
name|'unichr'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'unicode_map'
newline|'\n'
nl|'\n'
DECL|variable|_HTML_UNICODE_MAP
dedent|''
name|'_HTML_UNICODE_MAP'
op|'='
name|'_build_unicode_map'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

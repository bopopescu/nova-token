begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""The Tornado web framework.\n\nThe Tornado web framework looks a bit like web.py (http://webpy.org/) or\nGoogle\'s webapp (http://code.google.com/appengine/docs/python/tools/webapp/),\nbut with additional tools and optimizations to take advantage of the\nTornado non-blocking web server and tools.\n\nHere is the canonical "Hello, world" example app:\n\n    import tornado.httpserver\n    import tornado.ioloop\n    import tornado.web\n\n    class MainHandler(tornado.web.RequestHandler):\n        def get(self):\n            self.write("Hello, world")\n\n    if __name__ == "__main__":\n        application = tornado.web.Application([\n            (r"/", MainHandler),\n        ])\n        http_server = tornado.httpserver.HTTPServer(application)\n        http_server.listen(8888)\n        tornado.ioloop.IOLoop.instance().start()\n\nSee the Tornado walkthrough on GitHub for more details and a good\ngetting started guide.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'binascii'
newline|'\n'
name|'import'
name|'calendar'
newline|'\n'
name|'import'
name|'Cookie'
newline|'\n'
name|'import'
name|'cStringIO'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'email'
op|'.'
name|'utils'
newline|'\n'
name|'import'
name|'escape'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'gzip'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'httplib'
newline|'\n'
name|'import'
name|'locale'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'mimetypes'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'template'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
DECL|variable|_log
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'tornado.web'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|RequestHandler
name|'class'
name|'RequestHandler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Subclass this class and define get() or post() to make a handler.\n\n    If you want to support more methods than the standard GET/HEAD/POST, you\n    should override the class variable SUPPORTED_METHODS in your\n    RequestHandler class.\n    """'
newline|'\n'
DECL|variable|SUPPORTED_METHODS
name|'SUPPORTED_METHODS'
op|'='
op|'('
string|'"GET"'
op|','
string|'"HEAD"'
op|','
string|'"POST"'
op|','
string|'"DELETE"'
op|','
string|'"PUT"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|','
name|'transforms'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'application'
op|'='
name|'application'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'_headers_written'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_finished'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_auto_finish'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_transforms'
op|'='
name|'transforms'
name|'or'
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'ui'
op|'='
name|'_O'
op|'('
op|'('
name|'n'
op|','
name|'self'
op|'.'
name|'_ui_method'
op|'('
name|'m'
op|')'
op|')'
name|'for'
name|'n'
op|','
name|'m'
name|'in'
nl|'\n'
name|'application'
op|'.'
name|'ui_methods'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ui'
op|'['
string|'"modules"'
op|']'
op|'='
name|'_O'
op|'('
op|'('
name|'n'
op|','
name|'self'
op|'.'
name|'_ui_module'
op|'('
name|'n'
op|','
name|'m'
op|')'
op|')'
name|'for'
name|'n'
op|','
name|'m'
name|'in'
nl|'\n'
name|'application'
op|'.'
name|'ui_modules'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
comment|'# Check since connection is not available in WSGI'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'request'
op|','
string|'"connection"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'connection'
op|'.'
name|'stream'
op|'.'
name|'set_close_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'on_connection_close'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|settings
name|'def'
name|'settings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
newline|'\n'
nl|'\n'
DECL|member|head
dedent|''
name|'def'
name|'head'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
nl|'\n'
DECL|member|post
dedent|''
name|'def'
name|'post'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
nl|'\n'
DECL|member|put
dedent|''
name|'def'
name|'put'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called before the actual handler method.\n\n        Useful to override in a handler if you want a common bottleneck for\n        all of your requests.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|on_connection_close
dedent|''
name|'def'
name|'on_connection_close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called in async handlers if the client closed the connection.\n\n        You may override this to clean up resources associated with\n        long-lived connections.\n\n        Note that the select()-based implementation of IOLoop does not detect\n        closed connections and so this method will not be called until\n        you try (and fail) to produce some output.  The epoll- and kqueue-\n        based implementations should detect closed connections even while\n        the request is idle.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|clear
dedent|''
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Resets all headers and content for this response."""'
newline|'\n'
name|'self'
op|'.'
name|'_headers'
op|'='
op|'{'
nl|'\n'
string|'"Server"'
op|':'
string|'"TornadoServer/0.1"'
op|','
nl|'\n'
string|'"Content-Type"'
op|':'
string|'"text/html; charset=UTF-8"'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|'.'
name|'supports_http_1_1'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Connection"'
op|')'
op|'=='
string|'"Keep-Alive"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Connection"'
op|','
string|'"Keep-Alive"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_write_buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_status_code'
op|'='
number|'200'
newline|'\n'
nl|'\n'
DECL|member|set_status
dedent|''
name|'def'
name|'set_status'
op|'('
name|'self'
op|','
name|'status_code'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the status code for our response."""'
newline|'\n'
name|'assert'
name|'status_code'
name|'in'
name|'httplib'
op|'.'
name|'responses'
newline|'\n'
name|'self'
op|'.'
name|'_status_code'
op|'='
name|'status_code'
newline|'\n'
nl|'\n'
DECL|member|set_header
dedent|''
name|'def'
name|'set_header'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the given response header name and value.\n\n        If a datetime is given, we automatically format it according to the\n        HTTP specification. If the value is not a string, we convert it to\n        a string. All header values are then encoded as UTF-8.\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'='
name|'calendar'
op|'.'
name|'timegm'
op|'('
name|'value'
op|'.'
name|'utctimetuple'
op|'('
op|')'
op|')'
newline|'\n'
name|'value'
op|'='
name|'email'
op|'.'
name|'utils'
op|'.'
name|'formatdate'
op|'('
name|'t'
op|','
name|'localtime'
op|'='
name|'False'
op|','
name|'usegmt'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'int'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'long'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'_utf8'
op|'('
name|'value'
op|')'
newline|'\n'
comment|'# If \\n is allowed into the header, it is possible to inject'
nl|'\n'
comment|'# additional headers or split the request. Also cap length to'
nl|'\n'
comment|'# prevent obviously erroneous values.'
nl|'\n'
name|'safe_value'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"[\\x00-\\x1f]"'
op|','
string|'" "'
op|','
name|'value'
op|')'
op|'['
op|':'
number|'4000'
op|']'
newline|'\n'
name|'if'
name|'safe_value'
op|'!='
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"Unsafe header value %r"'
op|','
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|variable|_ARG_DEFAULT
dedent|''
name|'_ARG_DEFAULT'
op|'='
op|'['
op|']'
newline|'\n'
DECL|member|get_argument
name|'def'
name|'get_argument'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'_ARG_DEFAULT'
op|','
name|'strip'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the value of the argument with the given name.\n\n        If default is not provided, the argument is considered to be\n        required, and we throw an HTTP 404 exception if it is missing.\n\n        The returned value is always unicode.\n        """'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'values'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'default'
name|'is'
name|'self'
op|'.'
name|'_ARG_DEFAULT'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'HTTPError'
op|'('
number|'404'
op|','
string|'"Missing argument %s"'
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'default'
newline|'\n'
comment|'# Get rid of any weird control chars'
nl|'\n'
dedent|''
name|'value'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"[\\x00-\\x08\\x0e-\\x1f]"'
op|','
string|'" "'
op|','
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'value'
op|'='
name|'_unicode'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'strip'
op|':'
name|'value'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|cookies
name|'def'
name|'cookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A dictionary of Cookie.Morsel objects."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_cookies"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cookies'
op|'='
name|'Cookie'
op|'.'
name|'BaseCookie'
op|'('
op|')'
newline|'\n'
name|'if'
string|'"Cookie"'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_cookies'
op|'.'
name|'load'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|'"Cookie"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'clear_all_cookies'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_cookies'
newline|'\n'
nl|'\n'
DECL|member|get_cookie
dedent|''
name|'def'
name|'get_cookie'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the value of the cookie with the given name, else default."""'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'cookies'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cookies'
op|'['
name|'name'
op|']'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|set_cookie
dedent|''
name|'def'
name|'set_cookie'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'domain'
op|'='
name|'None'
op|','
name|'expires'
op|'='
name|'None'
op|','
name|'path'
op|'='
string|'"/"'
op|','
nl|'\n'
name|'expires_days'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sets the given cookie name/value with the given options."""'
newline|'\n'
name|'name'
op|'='
name|'_utf8'
op|'('
name|'name'
op|')'
newline|'\n'
name|'value'
op|'='
name|'_utf8'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'re'
op|'.'
name|'search'
op|'('
string|'r"[\\x00-\\x20]"'
op|','
name|'name'
op|'+'
name|'value'
op|')'
op|':'
newline|'\n'
comment|"# Don't let us accidentally inject bad stuff"
nl|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"Invalid cookie %r: %r"'
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_new_cookies"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_new_cookies'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'new_cookie'
op|'='
name|'Cookie'
op|'.'
name|'BaseCookie'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_new_cookies'
op|'.'
name|'append'
op|'('
name|'new_cookie'
op|')'
newline|'\n'
name|'new_cookie'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
name|'if'
name|'domain'
op|':'
newline|'\n'
indent|'            '
name|'new_cookie'
op|'['
name|'name'
op|']'
op|'['
string|'"domain"'
op|']'
op|'='
name|'domain'
newline|'\n'
dedent|''
name|'if'
name|'expires_days'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'expires'
op|':'
newline|'\n'
indent|'            '
name|'expires'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
nl|'\n'
name|'days'
op|'='
name|'expires_days'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'expires'
op|':'
newline|'\n'
indent|'            '
name|'timestamp'
op|'='
name|'calendar'
op|'.'
name|'timegm'
op|'('
name|'expires'
op|'.'
name|'utctimetuple'
op|'('
op|')'
op|')'
newline|'\n'
name|'new_cookie'
op|'['
name|'name'
op|']'
op|'['
string|'"expires"'
op|']'
op|'='
name|'email'
op|'.'
name|'utils'
op|'.'
name|'formatdate'
op|'('
nl|'\n'
name|'timestamp'
op|','
name|'localtime'
op|'='
name|'False'
op|','
name|'usegmt'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'path'
op|':'
newline|'\n'
indent|'            '
name|'new_cookie'
op|'['
name|'name'
op|']'
op|'['
string|'"path"'
op|']'
op|'='
name|'path'
newline|'\n'
nl|'\n'
DECL|member|clear_cookie
dedent|''
dedent|''
name|'def'
name|'clear_cookie'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'path'
op|'='
string|'"/"'
op|','
name|'domain'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes the cookie with the given name."""'
newline|'\n'
name|'expires'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'365'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_cookie'
op|'('
name|'name'
op|','
name|'value'
op|'='
string|'""'
op|','
name|'path'
op|'='
name|'path'
op|','
name|'expires'
op|'='
name|'expires'
op|','
nl|'\n'
name|'domain'
op|'='
name|'domain'
op|')'
newline|'\n'
nl|'\n'
DECL|member|clear_all_cookies
dedent|''
name|'def'
name|'clear_all_cookies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes all the cookies the user sent with this request."""'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'cookies'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'clear_cookie'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_secure_cookie
dedent|''
dedent|''
name|'def'
name|'set_secure_cookie'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|','
name|'expires_days'
op|'='
number|'30'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Signs and timestamps a cookie so it cannot be forged.\n\n        You must specify the \'cookie_secret\' setting in your Application\n        to use this method. It should be a long, random sequence of bytes\n        to be used as the HMAC secret for the signature.\n\n        To read a cookie set with this method, use get_secure_cookie().\n        """'
newline|'\n'
name|'timestamp'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'value'
op|'='
name|'base64'
op|'.'
name|'b64encode'
op|'('
name|'value'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'self'
op|'.'
name|'_cookie_signature'
op|'('
name|'name'
op|','
name|'value'
op|','
name|'timestamp'
op|')'
newline|'\n'
name|'value'
op|'='
string|'"|"'
op|'.'
name|'join'
op|'('
op|'['
name|'value'
op|','
name|'timestamp'
op|','
name|'signature'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_cookie'
op|'('
name|'name'
op|','
name|'value'
op|','
name|'expires_days'
op|'='
name|'expires_days'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_secure_cookie
dedent|''
name|'def'
name|'get_secure_cookie'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'include_name'
op|'='
name|'True'
op|','
name|'value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the given signed cookie if it validates, or None.\n\n        In older versions of Tornado (0.1 and 0.2), we did not include the\n        name of the cookie in the cookie signature. To read these old-style\n        cookies, pass include_name=False to this method. Otherwise, all\n        attempts to read old-style cookies will fail (and you may log all\n        your users out whose cookies were written with a previous Tornado\n        version).\n        """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
name|'value'
op|'='
name|'self'
op|'.'
name|'get_cookie'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'value'
op|':'
name|'return'
name|'None'
newline|'\n'
name|'parts'
op|'='
name|'value'
op|'.'
name|'split'
op|'('
string|'"|"'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'3'
op|':'
name|'return'
name|'None'
newline|'\n'
name|'if'
name|'include_name'
op|':'
newline|'\n'
indent|'            '
name|'signature'
op|'='
name|'self'
op|'.'
name|'_cookie_signature'
op|'('
name|'name'
op|','
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'signature'
op|'='
name|'self'
op|'.'
name|'_cookie_signature'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'_time_independent_equals'
op|'('
name|'parts'
op|'['
number|'2'
op|']'
op|','
name|'signature'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Invalid cookie signature %r"'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'timestamp'
op|'='
name|'int'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'timestamp'
op|'<'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
number|'31'
op|'*'
number|'86400'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Expired cookie %r"'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'base64'
op|'.'
name|'b64decode'
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_cookie_signature
dedent|''
dedent|''
name|'def'
name|'_cookie_signature'
op|'('
name|'self'
op|','
op|'*'
name|'parts'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"cookie_secret"'
op|','
string|'"secure cookies"'
op|')'
newline|'\n'
name|'hash'
op|'='
name|'hmac'
op|'.'
name|'new'
op|'('
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'['
string|'"cookie_secret"'
op|']'
op|','
nl|'\n'
name|'digestmod'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
name|'hash'
op|'.'
name|'update'
op|'('
name|'part'
op|')'
newline|'\n'
name|'return'
name|'hash'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|redirect
dedent|''
name|'def'
name|'redirect'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'permanent'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sends a redirect to the given (optionally relative) URL."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_headers_written'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Cannot redirect after headers have been written"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'set_status'
op|'('
number|'301'
name|'if'
name|'permanent'
name|'else'
number|'302'
op|')'
newline|'\n'
comment|'# Remove whitespace'
nl|'\n'
name|'url'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"[\\x00-\\x20]+"'
op|','
string|'""'
op|','
name|'_utf8'
op|'('
name|'url'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Location"'
op|','
name|'urlparse'
op|'.'
name|'urljoin'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'uri'
op|','
name|'url'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Writes the given chunk to the output buffer.\n\n        To write the output to the network, use the flush() method below.\n\n        If the given chunk is a dictionary, we write it as JSON and set\n        the Content-Type of the response to be text/javascript.\n        """'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_finished'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'chunk'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'='
name|'escape'
op|'.'
name|'json_encode'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Content-Type"'
op|','
string|'"text/javascript; charset=UTF-8"'
op|')'
newline|'\n'
dedent|''
name|'chunk'
op|'='
name|'_utf8'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write_buffer'
op|'.'
name|'append'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
name|'template_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Renders the template with the given arguments as the response."""'
newline|'\n'
name|'html'
op|'='
name|'self'
op|'.'
name|'render_string'
op|'('
name|'template_name'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Insert the additional JS and CSS added by the modules on the page'
nl|'\n'
name|'js_embed'
op|'='
op|'['
op|']'
newline|'\n'
name|'js_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'css_embed'
op|'='
op|'['
op|']'
newline|'\n'
name|'css_files'
op|'='
op|'['
op|']'
newline|'\n'
name|'html_heads'
op|'='
op|'['
op|']'
newline|'\n'
name|'html_bodies'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'getattr'
op|'('
name|'self'
op|','
string|'"_active_modules"'
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'embed_part'
op|'='
name|'module'
op|'.'
name|'embedded_javascript'
op|'('
op|')'
newline|'\n'
name|'if'
name|'embed_part'
op|':'
name|'js_embed'
op|'.'
name|'append'
op|'('
name|'_utf8'
op|'('
name|'embed_part'
op|')'
op|')'
newline|'\n'
name|'file_part'
op|'='
name|'module'
op|'.'
name|'javascript_files'
op|'('
op|')'
newline|'\n'
name|'if'
name|'file_part'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'file_part'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'js_files'
op|'.'
name|'append'
op|'('
name|'file_part'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'js_files'
op|'.'
name|'extend'
op|'('
name|'file_part'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'embed_part'
op|'='
name|'module'
op|'.'
name|'embedded_css'
op|'('
op|')'
newline|'\n'
name|'if'
name|'embed_part'
op|':'
name|'css_embed'
op|'.'
name|'append'
op|'('
name|'_utf8'
op|'('
name|'embed_part'
op|')'
op|')'
newline|'\n'
name|'file_part'
op|'='
name|'module'
op|'.'
name|'css_files'
op|'('
op|')'
newline|'\n'
name|'if'
name|'file_part'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'file_part'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'css_files'
op|'.'
name|'append'
op|'('
name|'file_part'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'css_files'
op|'.'
name|'extend'
op|'('
name|'file_part'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'head_part'
op|'='
name|'module'
op|'.'
name|'html_head'
op|'('
op|')'
newline|'\n'
name|'if'
name|'head_part'
op|':'
name|'html_heads'
op|'.'
name|'append'
op|'('
name|'_utf8'
op|'('
name|'head_part'
op|')'
op|')'
newline|'\n'
name|'body_part'
op|'='
name|'module'
op|'.'
name|'html_body'
op|'('
op|')'
newline|'\n'
name|'if'
name|'body_part'
op|':'
name|'html_bodies'
op|'.'
name|'append'
op|'('
name|'_utf8'
op|'('
name|'body_part'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'js_files'
op|':'
newline|'\n'
comment|'# Maintain order of JavaScript files given by modules'
nl|'\n'
indent|'            '
name|'paths'
op|'='
op|'['
op|']'
newline|'\n'
name|'unique_paths'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'js_files'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"/"'
op|')'
name|'and'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"http:"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'path'
op|'='
name|'self'
op|'.'
name|'static_url'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'path'
name|'not'
name|'in'
name|'unique_paths'
op|':'
newline|'\n'
indent|'                    '
name|'paths'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'unique_paths'
op|'.'
name|'add'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'js'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
string|'\'<script src="\''
op|'+'
name|'escape'
op|'.'
name|'xhtml_escape'
op|'('
name|'p'
op|')'
op|'+'
nl|'\n'
string|'\'" type="text/javascript"></script>\''
nl|'\n'
name|'for'
name|'p'
name|'in'
name|'paths'
op|')'
newline|'\n'
name|'sloc'
op|'='
name|'html'
op|'.'
name|'rindex'
op|'('
string|"'</body>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'sloc'
op|']'
op|'+'
name|'js'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'sloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'js_embed'
op|':'
newline|'\n'
indent|'            '
name|'js'
op|'='
string|'\'<script type="text/javascript">\\n//<![CDATA[\\n\''
op|'+'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'js_embed'
op|')'
op|'+'
string|"'\\n//]]>\\n</script>'"
newline|'\n'
name|'sloc'
op|'='
name|'html'
op|'.'
name|'rindex'
op|'('
string|"'</body>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'sloc'
op|']'
op|'+'
name|'js'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'sloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'css_files'
op|':'
newline|'\n'
indent|'            '
name|'paths'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'css_files'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"/"'
op|')'
name|'and'
name|'not'
name|'path'
op|'.'
name|'startswith'
op|'('
string|'"http:"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'paths'
op|'.'
name|'add'
op|'('
name|'self'
op|'.'
name|'static_url'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'paths'
op|'.'
name|'add'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'css'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
string|'\'<link href="\''
op|'+'
name|'escape'
op|'.'
name|'xhtml_escape'
op|'('
name|'p'
op|')'
op|'+'
string|'\'" \''
nl|'\n'
string|'\'type="text/css" rel="stylesheet"/>\''
nl|'\n'
name|'for'
name|'p'
name|'in'
name|'paths'
op|')'
newline|'\n'
name|'hloc'
op|'='
name|'html'
op|'.'
name|'index'
op|'('
string|"'</head>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'hloc'
op|']'
op|'+'
name|'css'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'hloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'css_embed'
op|':'
newline|'\n'
indent|'            '
name|'css'
op|'='
string|'\'<style type="text/css">\\n\''
op|'+'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'css_embed'
op|')'
op|'+'
string|"'\\n</style>'"
newline|'\n'
name|'hloc'
op|'='
name|'html'
op|'.'
name|'index'
op|'('
string|"'</head>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'hloc'
op|']'
op|'+'
name|'css'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'hloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'html_heads'
op|':'
newline|'\n'
indent|'            '
name|'hloc'
op|'='
name|'html'
op|'.'
name|'index'
op|'('
string|"'</head>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'hloc'
op|']'
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'html_heads'
op|')'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'hloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'html_bodies'
op|':'
newline|'\n'
indent|'            '
name|'hloc'
op|'='
name|'html'
op|'.'
name|'index'
op|'('
string|"'</body>'"
op|')'
newline|'\n'
name|'html'
op|'='
name|'html'
op|'['
op|':'
name|'hloc'
op|']'
op|'+'
string|"''"
op|'.'
name|'join'
op|'('
name|'html_bodies'
op|')'
op|'+'
string|"'\\n'"
op|'+'
name|'html'
op|'['
name|'hloc'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'finish'
op|'('
name|'html'
op|')'
newline|'\n'
nl|'\n'
DECL|member|render_string
dedent|''
name|'def'
name|'render_string'
op|'('
name|'self'
op|','
name|'template_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate the given template with the given arguments.\n\n        We return the generated string. To generate and write a template\n        as a response, use render() above.\n        """'
newline|'\n'
comment|'# If no template_path is specified, use the path of the calling file'
nl|'\n'
name|'template_path'
op|'='
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"template_path"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'template_path'
op|':'
newline|'\n'
indent|'            '
name|'frame'
op|'='
name|'sys'
op|'.'
name|'_getframe'
op|'('
number|'0'
op|')'
newline|'\n'
name|'web_file'
op|'='
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
newline|'\n'
name|'while'
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
op|'=='
name|'web_file'
op|':'
newline|'\n'
indent|'                '
name|'frame'
op|'='
name|'frame'
op|'.'
name|'f_back'
newline|'\n'
dedent|''
name|'template_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'frame'
op|'.'
name|'f_code'
op|'.'
name|'co_filename'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'getattr'
op|'('
name|'RequestHandler'
op|','
string|'"_templates"'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'RequestHandler'
op|'.'
name|'_templates'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'template_path'
name|'not'
name|'in'
name|'RequestHandler'
op|'.'
name|'_templates'
op|':'
newline|'\n'
indent|'            '
name|'loader'
op|'='
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"template_loader"'
op|')'
name|'or'
name|'template'
op|'.'
name|'Loader'
op|'('
name|'template_path'
op|')'
newline|'\n'
name|'RequestHandler'
op|'.'
name|'_templates'
op|'['
name|'template_path'
op|']'
op|'='
name|'loader'
newline|'\n'
dedent|''
name|'t'
op|'='
name|'RequestHandler'
op|'.'
name|'_templates'
op|'['
name|'template_path'
op|']'
op|'.'
name|'load'
op|'('
name|'template_name'
op|')'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'handler'
op|'='
name|'self'
op|','
nl|'\n'
name|'request'
op|'='
name|'self'
op|'.'
name|'request'
op|','
nl|'\n'
name|'current_user'
op|'='
name|'self'
op|'.'
name|'current_user'
op|','
nl|'\n'
name|'locale'
op|'='
name|'self'
op|'.'
name|'locale'
op|','
nl|'\n'
name|'_'
op|'='
name|'self'
op|'.'
name|'locale'
op|'.'
name|'translate'
op|','
nl|'\n'
name|'static_url'
op|'='
name|'self'
op|'.'
name|'static_url'
op|','
nl|'\n'
name|'xsrf_form_html'
op|'='
name|'self'
op|'.'
name|'xsrf_form_html'
op|','
nl|'\n'
name|'reverse_url'
op|'='
name|'self'
op|'.'
name|'application'
op|'.'
name|'reverse_url'
nl|'\n'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'ui'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'t'
op|'.'
name|'generate'
op|'('
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|','
name|'include_footers'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Flushes the current output buffer to the nextwork."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'application'
op|'.'
name|'_wsgi'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"WSGI applications do not support flush()"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'chunk'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_write_buffer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_write_buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_headers_written'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_headers_written'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'transform'
name|'in'
name|'self'
op|'.'
name|'_transforms'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_headers'
op|','
name|'chunk'
op|'='
name|'transform'
op|'.'
name|'transform_first_chunk'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_headers'
op|','
name|'chunk'
op|','
name|'include_footers'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'='
name|'self'
op|'.'
name|'_generate_headers'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'transform'
name|'in'
name|'self'
op|'.'
name|'_transforms'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'transform'
op|'.'
name|'transform_chunk'
op|'('
name|'chunk'
op|','
name|'include_footers'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'='
string|'""'
newline|'\n'
nl|'\n'
comment|'# Ignore the chunk and only write the headers for HEAD requests'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"HEAD"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'headers'
op|':'
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'headers'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'headers'
name|'or'
name|'chunk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'request'
op|'.'
name|'write'
op|'('
name|'headers'
op|'+'
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|','
name|'chunk'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes this response, ending the HTTP request."""'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_finished'
newline|'\n'
name|'if'
name|'chunk'
name|'is'
name|'not'
name|'None'
op|':'
name|'self'
op|'.'
name|'write'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
comment|'# Automatically support ETags and add the Content-Length header if'
nl|'\n'
comment|'# we have not flushed any content yet.'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_headers_written'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'self'
op|'.'
name|'_status_code'
op|'=='
number|'200'
name|'and'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"GET"'
name|'and'
nl|'\n'
string|'"Etag"'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_headers'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'hasher'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'self'
op|'.'
name|'_write_buffer'
op|':'
newline|'\n'
indent|'                    '
name|'hasher'
op|'.'
name|'update'
op|'('
name|'part'
op|')'
newline|'\n'
dedent|''
name|'etag'
op|'='
string|'\'"%s"\''
op|'%'
name|'hasher'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'inm'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"If-None-Match"'
op|')'
newline|'\n'
name|'if'
name|'inm'
name|'and'
name|'inm'
op|'.'
name|'find'
op|'('
name|'etag'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_write_buffer'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'set_status'
op|'('
number|'304'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Etag"'
op|','
name|'etag'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
string|'"Content-Length"'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_headers'
op|':'
newline|'\n'
indent|'                '
name|'content_length'
op|'='
name|'sum'
op|'('
name|'len'
op|'('
name|'part'
op|')'
name|'for'
name|'part'
name|'in'
name|'self'
op|'.'
name|'_write_buffer'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Content-Length"'
op|','
name|'content_length'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'application'
op|'.'
name|'_wsgi'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flush'
op|'('
name|'include_footers'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_log'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_finished'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|send_error
dedent|''
name|'def'
name|'send_error'
op|'('
name|'self'
op|','
name|'status_code'
op|'='
number|'500'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sends the given HTTP error code to the browser.\n\n        We also send the error HTML for the given error code as returned by\n        get_error_html. Override that method if you want custom error pages\n        for your application.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_headers_written'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Cannot send error response after headers written"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_finished'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_status'
op|'('
name|'status_code'
op|')'
newline|'\n'
name|'message'
op|'='
name|'self'
op|'.'
name|'get_error_html'
op|'('
name|'status_code'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'finish'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_error_html
dedent|''
name|'def'
name|'get_error_html'
op|'('
name|'self'
op|','
name|'status_code'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to implement custom error pages.\n\n        If this error was caused by an uncaught exception, the\n        exception object can be found in kwargs e.g. kwargs[\'exception\']\n        """'
newline|'\n'
name|'return'
string|'"<html><title>%(code)d: %(message)s</title>"'
string|'"<body>%(code)d: %(message)s</body></html>"'
op|'%'
op|'{'
nl|'\n'
string|'"code"'
op|':'
name|'status_code'
op|','
nl|'\n'
string|'"message"'
op|':'
name|'httplib'
op|'.'
name|'responses'
op|'['
name|'status_code'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|locale
name|'def'
name|'locale'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The local for the current session.\n\n        Determined by either get_user_locale, which you can override to\n        set the locale based on, e.g., a user preference stored in a\n        database, or get_browser_locale, which uses the Accept-Language\n        header.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_locale"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_locale'
op|'='
name|'self'
op|'.'
name|'get_user_locale'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_locale'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_locale'
op|'='
name|'self'
op|'.'
name|'get_browser_locale'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'_locale'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'_locale'
newline|'\n'
nl|'\n'
DECL|member|get_user_locale
dedent|''
name|'def'
name|'get_user_locale'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to determine the locale from the authenticated user.\n\n        If None is returned, we use the Accept-Language header.\n        """'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_browser_locale
dedent|''
name|'def'
name|'get_browser_locale'
op|'('
name|'self'
op|','
name|'default'
op|'='
string|'"en_US"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determines the user\'s locale from Accept-Language header.\n\n        See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4\n        """'
newline|'\n'
name|'if'
string|'"Accept-Language"'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'languages'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'['
string|'"Accept-Language"'
op|']'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
newline|'\n'
name|'locales'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'language'
name|'in'
name|'languages'
op|':'
newline|'\n'
indent|'                '
name|'parts'
op|'='
name|'language'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'>'
number|'1'
name|'and'
name|'parts'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"q="'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'score'
op|'='
name|'float'
op|'('
name|'parts'
op|'['
number|'1'
op|']'
op|'['
number|'2'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'score'
op|'='
number|'0.0'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'score'
op|'='
number|'1.0'
newline|'\n'
dedent|''
name|'locales'
op|'.'
name|'append'
op|'('
op|'('
name|'parts'
op|'['
number|'0'
op|']'
op|','
name|'score'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'locales'
op|':'
newline|'\n'
indent|'                '
name|'locales'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
op|'('
name|'l'
op|','
name|'s'
op|')'
op|':'
name|'s'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'codes'
op|'='
op|'['
name|'l'
op|'['
number|'0'
op|']'
name|'for'
name|'l'
name|'in'
name|'locales'
op|']'
newline|'\n'
name|'return'
name|'locale'
op|'.'
name|'get'
op|'('
op|'*'
name|'codes'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'locale'
op|'.'
name|'get'
op|'('
name|'default'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|current_user
name|'def'
name|'current_user'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The authenticated user for this request.\n\n        Determined by either get_current_user, which you can override to\n        set the user based on, e.g., a cookie. If that method is not\n        overridden, this method always returns None.\n\n        We lazy-load the current user the first time this method is called\n        and cache the result after that.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_current_user"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_current_user'
op|'='
name|'self'
op|'.'
name|'get_current_user'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_current_user'
newline|'\n'
nl|'\n'
DECL|member|get_current_user
dedent|''
name|'def'
name|'get_current_user'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to determine the current user from, e.g., a cookie."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_login_url
dedent|''
name|'def'
name|'get_login_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override to customize the login URL based on the request.\n\n        By default, we use the \'login_url\' application setting.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"login_url"'
op|','
string|'"@tornado.web.authenticated"'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'['
string|'"login_url"'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|xsrf_token
name|'def'
name|'xsrf_token'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The XSRF-prevention token for the current user/session.\n\n        To prevent cross-site request forgery, we set an \'_xsrf\' cookie\n        and include the same \'_xsrf\' value as an argument with all POST\n        requests. If the two do not match, we reject the form submission\n        as a potential forgery.\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n        """'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_xsrf_token"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'token'
op|'='
name|'self'
op|'.'
name|'get_cookie'
op|'('
string|'"_xsrf"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
indent|'                '
name|'token'
op|'='
name|'binascii'
op|'.'
name|'b2a_hex'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'bytes'
op|')'
newline|'\n'
name|'expires_days'
op|'='
number|'30'
name|'if'
name|'self'
op|'.'
name|'current_user'
name|'else'
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'set_cookie'
op|'('
string|'"_xsrf"'
op|','
name|'token'
op|','
name|'expires_days'
op|'='
name|'expires_days'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_xsrf_token'
op|'='
name|'token'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_xsrf_token'
newline|'\n'
nl|'\n'
DECL|member|check_xsrf_cookie
dedent|''
name|'def'
name|'check_xsrf_cookie'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verifies that the \'_xsrf\' cookie matches the \'_xsrf\' argument.\n\n        To prevent cross-site request forgery, we set an \'_xsrf\' cookie\n        and include the same \'_xsrf\' value as an argument with all POST\n        requests. If the two do not match, we reject the form submission\n        as a potential forgery.\n\n        See http://en.wikipedia.org/wiki/Cross-site_request_forgery\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"X-Requested-With"'
op|')'
op|'=='
string|'"XMLHttpRequest"'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'token'
op|'='
name|'self'
op|'.'
name|'get_argument'
op|'('
string|'"_xsrf"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'403'
op|','
string|'"\'_xsrf\' argument missing from POST"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'xsrf_token'
op|'!='
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'403'
op|','
string|'"XSRF cookie does not match POST argument"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|xsrf_form_html
dedent|''
dedent|''
name|'def'
name|'xsrf_form_html'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""An HTML <input/> element to be included with all POST forms.\n\n        It defines the _xsrf input value, which we check on all POST\n        requests to prevent cross-site request forgery. If you have set\n        the \'xsrf_cookies\' application setting, you must include this\n        HTML within all of your HTML forms.\n\n        See check_xsrf_cookie() above for more information.\n        """'
newline|'\n'
name|'return'
string|'\'<input type="hidden" name="_xsrf" value="\''
op|'+'
name|'escape'
op|'.'
name|'xhtml_escape'
op|'('
name|'self'
op|'.'
name|'xsrf_token'
op|')'
op|'+'
string|'\'"/>\''
newline|'\n'
nl|'\n'
DECL|member|static_url
dedent|''
name|'def'
name|'static_url'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a static URL for the given relative static file path.\n\n        This method requires you set the \'static_path\' setting in your\n        application (which specifies the root directory of your static\n        files).\n\n        We append ?v=<signature> to the returned URL, which makes our\n        static file handler set an infinite expiration header on the\n        returned content. The signature is based on the content of the\n        file.\n\n        If this handler has a "include_host" attribute, we include the\n        full host for every static URL, including the "http://". Set\n        this attribute for handlers whose output needs non-relative static\n        path names.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"static_path"'
op|','
string|'"static_url"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'RequestHandler'
op|','
string|'"_static_hashes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'RequestHandler'
op|'.'
name|'_static_hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'hashes'
op|'='
name|'RequestHandler'
op|'.'
name|'_static_hashes'
newline|'\n'
name|'if'
name|'path'
name|'not'
name|'in'
name|'hashes'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'open'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'['
string|'"static_path"'
op|']'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
name|'hashes'
op|'['
name|'path'
op|']'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Could not open static file %r"'
op|','
name|'path'
op|')'
newline|'\n'
name|'hashes'
op|'['
name|'path'
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'base'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'protocol'
op|'+'
string|'"://"'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'host'
name|'if'
name|'getattr'
op|'('
name|'self'
op|','
string|'"include_host"'
op|','
name|'False'
op|')'
name|'else'
string|'""'
newline|'\n'
name|'static_url_prefix'
op|'='
name|'self'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|"'static_url_prefix'"
op|','
string|"'/static/'"
op|')'
newline|'\n'
name|'if'
name|'hashes'
op|'.'
name|'get'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'base'
op|'+'
name|'static_url_prefix'
op|'+'
name|'path'
op|'+'
string|'"?v="'
op|'+'
name|'hashes'
op|'['
name|'path'
op|']'
op|'['
op|':'
number|'5'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'base'
op|'+'
name|'static_url_prefix'
op|'+'
name|'path'
newline|'\n'
nl|'\n'
DECL|member|async_callback
dedent|''
dedent|''
name|'def'
name|'async_callback'
op|'('
name|'self'
op|','
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wrap callbacks with this if they are used on asynchronous requests.\n\n        Catches exceptions and properly finishes the request.\n        """'
newline|'\n'
name|'if'
name|'callback'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'args'
name|'or'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'callback'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
DECL|function|wrapper
dedent|''
name|'def'
name|'wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'callback'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'_headers_written'
op|':'
newline|'\n'
indent|'                    '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Exception after headers written"'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_handle_request_exception'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
DECL|member|require_setting
dedent|''
name|'def'
name|'require_setting'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'feature'
op|'='
string|'"this feature"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raises an exception if the given app setting is not defined."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"You must define the \'%s\' setting in your "'
nl|'\n'
string|'"application to use %s"'
op|'%'
op|'('
name|'name'
op|','
name|'feature'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reverse_url
dedent|''
dedent|''
name|'def'
name|'reverse_url'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'application'
op|'.'
name|'reverse_url'
op|'('
name|'name'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_execute
dedent|''
name|'def'
name|'_execute'
op|'('
name|'self'
op|','
name|'transforms'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Executes this request with the given output transforms."""'
newline|'\n'
name|'self'
op|'.'
name|'_transforms'
op|'='
name|'transforms'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
name|'not'
name|'in'
name|'self'
op|'.'
name|'SUPPORTED_METHODS'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'HTTPError'
op|'('
number|'405'
op|')'
newline|'\n'
comment|'# If XSRF cookies are turned on, reject form submissions without'
nl|'\n'
comment|'# the proper cookie'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"POST"'
name|'and'
name|'self'
op|'.'
name|'application'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"xsrf_cookies"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'check_xsrf_cookie'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'prepare'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_finished'
op|':'
newline|'\n'
indent|'                '
name|'getattr'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_auto_finish'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_finished'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_handle_request_exception'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_generate_headers
dedent|''
dedent|''
name|'def'
name|'_generate_headers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
op|'['
name|'self'
op|'.'
name|'request'
op|'.'
name|'version'
op|'+'
string|'" "'
op|'+'
name|'str'
op|'('
name|'self'
op|'.'
name|'_status_code'
op|')'
op|'+'
string|'" "'
op|'+'
nl|'\n'
name|'httplib'
op|'.'
name|'responses'
op|'['
name|'self'
op|'.'
name|'_status_code'
op|']'
op|']'
newline|'\n'
name|'lines'
op|'.'
name|'extend'
op|'('
op|'['
string|'"%s: %s"'
op|'%'
op|'('
name|'n'
op|','
name|'v'
op|')'
name|'for'
name|'n'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'_headers'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'for'
name|'cookie_dict'
name|'in'
name|'getattr'
op|'('
name|'self'
op|','
string|'"_new_cookies"'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cookie'
name|'in'
name|'cookie_dict'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'.'
name|'append'
op|'('
string|'"Set-Cookie: "'
op|'+'
name|'cookie'
op|'.'
name|'OutputString'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|'"\\r\\n"'
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
op|'+'
string|'"\\r\\n\\r\\n"'
newline|'\n'
nl|'\n'
DECL|member|_log
dedent|''
name|'def'
name|'_log'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_status_code'
op|'<'
number|'400'
op|':'
newline|'\n'
indent|'            '
name|'log_method'
op|'='
name|'_log'
op|'.'
name|'info'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_status_code'
op|'<'
number|'500'
op|':'
newline|'\n'
indent|'            '
name|'log_method'
op|'='
name|'_log'
op|'.'
name|'warning'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log_method'
op|'='
name|'_log'
op|'.'
name|'error'
newline|'\n'
dedent|''
name|'request_time'
op|'='
number|'1000.0'
op|'*'
name|'self'
op|'.'
name|'request'
op|'.'
name|'request_time'
op|'('
op|')'
newline|'\n'
name|'log_method'
op|'('
string|'"%d %s %.2fms"'
op|','
name|'self'
op|'.'
name|'_status_code'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_request_summary'
op|'('
op|')'
op|','
name|'request_time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_request_summary
dedent|''
name|'def'
name|'_request_summary'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'+'
string|'" "'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'uri'
op|'+'
string|'" ("'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'remote_ip'
op|'+'
string|'")"'
newline|'\n'
nl|'\n'
DECL|member|_handle_request_exception
dedent|''
name|'def'
name|'_handle_request_exception'
op|'('
name|'self'
op|','
name|'e'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'e'
op|','
name|'HTTPError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'log_message'
op|':'
newline|'\n'
indent|'                '
name|'format'
op|'='
string|'"%d %s: "'
op|'+'
name|'e'
op|'.'
name|'log_message'
newline|'\n'
name|'args'
op|'='
op|'['
name|'e'
op|'.'
name|'status_code'
op|','
name|'self'
op|'.'
name|'_request_summary'
op|'('
op|')'
op|']'
op|'+'
name|'list'
op|'('
name|'e'
op|'.'
name|'args'
op|')'
newline|'\n'
name|'_log'
op|'.'
name|'warning'
op|'('
name|'format'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'e'
op|'.'
name|'status_code'
name|'not'
name|'in'
name|'httplib'
op|'.'
name|'responses'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Bad HTTP status code: %d"'
op|','
name|'e'
op|'.'
name|'status_code'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'send_error'
op|'('
number|'500'
op|','
name|'exception'
op|'='
name|'e'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'send_error'
op|'('
name|'e'
op|'.'
name|'status_code'
op|','
name|'exception'
op|'='
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Uncaught exception %s\\n%r"'
op|','
name|'self'
op|'.'
name|'_request_summary'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'request'
op|','
name|'exc_info'
op|'='
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'send_error'
op|'('
number|'500'
op|','
name|'exception'
op|'='
name|'e'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ui_module
dedent|''
dedent|''
name|'def'
name|'_ui_module'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
DECL|function|render
indent|'        '
name|'def'
name|'render'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|'"_active_modules"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_active_modules'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_active_modules'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_active_modules'
op|'['
name|'name'
op|']'
op|'='
name|'module'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'rendered'
op|'='
name|'self'
op|'.'
name|'_active_modules'
op|'['
name|'name'
op|']'
op|'.'
name|'render'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'rendered'
newline|'\n'
dedent|''
name|'return'
name|'render'
newline|'\n'
nl|'\n'
DECL|member|_ui_method
dedent|''
name|'def'
name|'_ui_method'
op|'('
name|'self'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'lambda'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|asynchronous
dedent|''
dedent|''
name|'def'
name|'asynchronous'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Wrap request handler methods with this if they are asynchronous.\n\n    If this decorator is given, the response is not finished when the\n    method returns. It is up to the request handler to call self.finish()\n    to finish the HTTP request. Without this decorator, the request is\n    automatically finished when the get() or post() method returns.\n\n       class MyRequestHandler(web.RequestHandler):\n           @web.asynchronous\n           def get(self):\n              http = httpclient.AsyncHTTPClient()\n              http.fetch("http://friendfeed.com/", self._on_download)\n\n           def _on_download(self, response):\n              self.write("Downloaded!")\n              self.finish()\n\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'method'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'application'
op|'.'
name|'_wsgi'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"@asynchronous is not supported for WSGI apps"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_auto_finish'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|removeslash
dedent|''
name|'def'
name|'removeslash'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Use this decorator to remove trailing slashes from the request path.\n\n    For example, a request to \'/foo/\' would redirect to \'/foo\' with this\n    decorator. Your request handler mapping should use a regular expression\n    like r\'/foo/*\' in conjunction with using the decorator.\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'method'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'"/"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"GET"'
op|':'
newline|'\n'
indent|'                '
name|'uri'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
op|'.'
name|'rstrip'
op|'('
string|'"/"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'query'
op|':'
name|'uri'
op|'+='
string|'"?"'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'query'
newline|'\n'
name|'self'
op|'.'
name|'redirect'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'HTTPError'
op|'('
number|'404'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|addslash
dedent|''
name|'def'
name|'addslash'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Use this decorator to add a missing trailing slash to the request path.\n\n    For example, a request to \'/foo\' would redirect to \'/foo/\' with this\n    decorator. Your request handler mapping should use a regular expression\n    like r\'/foo/?\' in conjunction with using the decorator.\n    """'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'method'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'"/"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"GET"'
op|':'
newline|'\n'
indent|'                '
name|'uri'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
op|'+'
string|'"/"'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'query'
op|':'
name|'uri'
op|'+='
string|'"?"'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'query'
newline|'\n'
name|'self'
op|'.'
name|'redirect'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'HTTPError'
op|'('
number|'404'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Application
dedent|''
name|'class'
name|'Application'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A collection of request handlers that make up a web application.\n\n    Instances of this class are callable and can be passed directly to\n    HTTPServer to serve the application:\n\n        application = web.Application([\n            (r"/", MainPageHandler),\n        ])\n        http_server = httpserver.HTTPServer(application)\n        http_server.listen(8080)\n        ioloop.IOLoop.instance().start()\n\n    The constructor for this class takes in a list of URLSpec objects\n    or (regexp, request_class) tuples. When we receive requests, we\n    iterate over the list in order and instantiate an instance of the\n    first request class whose regexp matches the request path.\n\n    Each tuple can contain an optional third element, which should be a\n    dictionary if it is present. That dictionary is passed as keyword\n    arguments to the contructor of the handler. This pattern is used\n    for the StaticFileHandler below:\n\n        application = web.Application([\n            (r"/static/(.*)", web.StaticFileHandler, {"path": "/var/www"}),\n        ])\n\n    We support virtual hosts with the add_handlers method, which takes in\n    a host regular expression as the first argument:\n\n        application.add_handlers(r"www\\.myhost\\.com", [\n            (r"/article/([0-9]+)", ArticleHandler),\n        ])\n\n    You can serve static files by sending the static_path setting as a\n    keyword argument. We will serve those files from the /static/ URI\n    (this is configurable with the static_url_prefix setting),\n    and we will serve /favicon.ico and /robots.txt from the same directory.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'handlers'
op|'='
name|'None'
op|','
name|'default_host'
op|'='
string|'""'
op|','
name|'transforms'
op|'='
name|'None'
op|','
nl|'\n'
name|'wsgi'
op|'='
name|'False'
op|','
op|'**'
name|'settings'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'transforms'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transforms'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"gzip"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'transforms'
op|'.'
name|'append'
op|'('
name|'GZipContentEncoding'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'transforms'
op|'.'
name|'append'
op|'('
name|'ChunkedTransferEncoding'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'transforms'
op|'='
name|'transforms'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'handlers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'named_handlers'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'default_host'
op|'='
name|'default_host'
newline|'\n'
name|'self'
op|'.'
name|'settings'
op|'='
name|'settings'
newline|'\n'
name|'self'
op|'.'
name|'ui_modules'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'ui_methods'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_wsgi'
op|'='
name|'wsgi'
newline|'\n'
name|'self'
op|'.'
name|'_load_ui_modules'
op|'('
name|'settings'
op|'.'
name|'get'
op|'('
string|'"ui_modules"'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_load_ui_methods'
op|'('
name|'settings'
op|'.'
name|'get'
op|'('
string|'"ui_methods"'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"static_path"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"static_path"'
op|']'
newline|'\n'
name|'handlers'
op|'='
name|'list'
op|'('
name|'handlers'
name|'or'
op|'['
op|']'
op|')'
newline|'\n'
name|'static_url_prefix'
op|'='
name|'settings'
op|'.'
name|'get'
op|'('
string|'"static_url_prefix"'
op|','
nl|'\n'
string|'"/static/"'
op|')'
newline|'\n'
name|'handlers'
op|'='
op|'['
nl|'\n'
op|'('
name|'re'
op|'.'
name|'escape'
op|'('
name|'static_url_prefix'
op|')'
op|'+'
string|'r"(.*)"'
op|','
name|'StaticFileHandler'
op|','
nl|'\n'
name|'dict'
op|'('
name|'path'
op|'='
name|'path'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'r"/(favicon\\.ico)"'
op|','
name|'StaticFileHandler'
op|','
name|'dict'
op|'('
name|'path'
op|'='
name|'path'
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|'r"/(robots\\.txt)"'
op|','
name|'StaticFileHandler'
op|','
name|'dict'
op|'('
name|'path'
op|'='
name|'path'
op|')'
op|')'
op|','
nl|'\n'
op|']'
op|'+'
name|'handlers'
newline|'\n'
dedent|''
name|'if'
name|'handlers'
op|':'
name|'self'
op|'.'
name|'add_handlers'
op|'('
string|'".*$"'
op|','
name|'handlers'
op|')'
newline|'\n'
nl|'\n'
comment|'# Automatically reload modified modules'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"debug"'
op|')'
name|'and'
name|'not'
name|'wsgi'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'autoreload'
newline|'\n'
name|'autoreload'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_handlers
dedent|''
dedent|''
name|'def'
name|'add_handlers'
op|'('
name|'self'
op|','
name|'host_pattern'
op|','
name|'host_handlers'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Appends the given handlers to our handler list."""'
newline|'\n'
name|'if'
name|'not'
name|'host_pattern'
op|'.'
name|'endswith'
op|'('
string|'"$"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_pattern'
op|'+='
string|'"$"'
newline|'\n'
dedent|''
name|'handlers'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# The handlers with the wildcard host_pattern are a special'
nl|'\n'
comment|"# case - they're added in the constructor but should have lower"
nl|'\n'
comment|'# precedence than the more-precise handlers added later.'
nl|'\n'
comment|'# If a wildcard handler group exists, it should always be last'
nl|'\n'
comment|'# in the list, so insert new groups just before it.'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'handlers'
name|'and'
name|'self'
op|'.'
name|'handlers'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'pattern'
op|'=='
string|"'.*$'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handlers'
op|'.'
name|'insert'
op|'('
op|'-'
number|'1'
op|','
op|'('
name|'re'
op|'.'
name|'compile'
op|'('
name|'host_pattern'
op|')'
op|','
name|'handlers'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'handlers'
op|'.'
name|'append'
op|'('
op|'('
name|'re'
op|'.'
name|'compile'
op|'('
name|'host_pattern'
op|')'
op|','
name|'handlers'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'spec'
name|'in'
name|'host_handlers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'type'
op|'('
name|'spec'
op|')'
name|'is'
name|'type'
op|'('
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'assert'
name|'len'
op|'('
name|'spec'
op|')'
name|'in'
op|'('
number|'2'
op|','
number|'3'
op|')'
newline|'\n'
name|'pattern'
op|'='
name|'spec'
op|'['
number|'0'
op|']'
newline|'\n'
name|'handler'
op|'='
name|'spec'
op|'['
number|'1'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'spec'
op|')'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'                    '
name|'kwargs'
op|'='
name|'spec'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'spec'
op|'='
name|'URLSpec'
op|'('
name|'pattern'
op|','
name|'handler'
op|','
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'handlers'
op|'.'
name|'append'
op|'('
name|'spec'
op|')'
newline|'\n'
name|'if'
name|'spec'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'spec'
op|'.'
name|'name'
name|'in'
name|'self'
op|'.'
name|'named_handlers'
op|':'
newline|'\n'
indent|'                    '
name|'_log'
op|'.'
name|'warning'
op|'('
nl|'\n'
string|'"Multiple handlers named %s; replacing previous value"'
op|','
nl|'\n'
name|'spec'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'named_handlers'
op|'['
name|'spec'
op|'.'
name|'name'
op|']'
op|'='
name|'spec'
newline|'\n'
nl|'\n'
DECL|member|add_transform
dedent|''
dedent|''
dedent|''
name|'def'
name|'add_transform'
op|'('
name|'self'
op|','
name|'transform_class'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the given OutputTransform to our transform list."""'
newline|'\n'
name|'self'
op|'.'
name|'transforms'
op|'.'
name|'append'
op|'('
name|'transform_class'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_host_handlers
dedent|''
name|'def'
name|'_get_host_handlers'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'request'
op|'.'
name|'host'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'pattern'
op|','
name|'handlers'
name|'in'
name|'self'
op|'.'
name|'handlers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'pattern'
op|'.'
name|'match'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'handlers'
newline|'\n'
comment|'# Look for default host if not behind load balancer (for debugging)'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|'"X-Real-Ip"'
name|'not'
name|'in'
name|'request'
op|'.'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'pattern'
op|','
name|'handlers'
name|'in'
name|'self'
op|'.'
name|'handlers'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'pattern'
op|'.'
name|'match'
op|'('
name|'self'
op|'.'
name|'default_host'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'handlers'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_load_ui_methods
dedent|''
name|'def'
name|'_load_ui_methods'
op|'('
name|'self'
op|','
name|'methods'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'methods'
op|')'
name|'is'
name|'types'
op|'.'
name|'ModuleType'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_ui_methods'
op|'('
name|'dict'
op|'('
op|'('
name|'n'
op|','
name|'getattr'
op|'('
name|'methods'
op|','
name|'n'
op|')'
op|')'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'dir'
op|'('
name|'methods'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'methods'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'m'
name|'in'
name|'list'
op|':'
name|'self'
op|'.'
name|'_load_ui_methods'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'name'
op|','
name|'fn'
name|'in'
name|'methods'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'"_"'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'fn'
op|','
string|'"__call__"'
op|')'
name|'and'
name|'name'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
name|'name'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'ui_methods'
op|'['
name|'name'
op|']'
op|'='
name|'fn'
newline|'\n'
nl|'\n'
DECL|member|_load_ui_modules
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_load_ui_modules'
op|'('
name|'self'
op|','
name|'modules'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'modules'
op|')'
name|'is'
name|'types'
op|'.'
name|'ModuleType'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_ui_modules'
op|'('
name|'dict'
op|'('
op|'('
name|'n'
op|','
name|'getattr'
op|'('
name|'modules'
op|','
name|'n'
op|')'
op|')'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'dir'
op|'('
name|'modules'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'modules'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'m'
name|'in'
name|'list'
op|':'
name|'self'
op|'.'
name|'_load_ui_modules'
op|'('
name|'m'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'assert'
name|'isinstance'
op|'('
name|'modules'
op|','
name|'dict'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'cls'
name|'in'
name|'modules'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'issubclass'
op|'('
name|'cls'
op|','
name|'UIModule'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'ui_modules'
op|'['
name|'name'
op|']'
op|'='
name|'cls'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by HTTPServer to execute the request."""'
newline|'\n'
name|'transforms'
op|'='
op|'['
name|'t'
op|'('
name|'request'
op|')'
name|'for'
name|'t'
name|'in'
name|'self'
op|'.'
name|'transforms'
op|']'
newline|'\n'
name|'handler'
op|'='
name|'None'
newline|'\n'
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'handlers'
op|'='
name|'self'
op|'.'
name|'_get_host_handlers'
op|'('
name|'request'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'handlers'
op|':'
newline|'\n'
indent|'            '
name|'handler'
op|'='
name|'RedirectHandler'
op|'('
nl|'\n'
name|'request'
op|','
string|'"http://"'
op|'+'
name|'self'
op|'.'
name|'default_host'
op|'+'
string|'"/"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'spec'
name|'in'
name|'handlers'
op|':'
newline|'\n'
indent|'                '
name|'match'
op|'='
name|'spec'
op|'.'
name|'regex'
op|'.'
name|'match'
op|'('
name|'request'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                    '
name|'handler'
op|'='
name|'spec'
op|'.'
name|'handler_class'
op|'('
name|'self'
op|','
name|'request'
op|','
op|'**'
name|'spec'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
comment|'# Pass matched groups to the handler.  Since'
nl|'\n'
comment|'# match.groups() includes both named and unnamed groups,'
nl|'\n'
comment|'# we want to use either groups or groupdict but not both.'
nl|'\n'
name|'kwargs'
op|'='
name|'match'
op|'.'
name|'groupdict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'kwargs'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'args'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'handler'
op|':'
newline|'\n'
indent|'                '
name|'handler'
op|'='
name|'ErrorHandler'
op|'('
name|'self'
op|','
name|'request'
op|','
number|'404'
op|')'
newline|'\n'
nl|'\n'
comment|'# In debug mode, re-compile templates and reload static files on every'
nl|'\n'
comment|"# request so you don't need to restart to see changes"
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'settings'
op|'.'
name|'get'
op|'('
string|'"debug"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'getattr'
op|'('
name|'RequestHandler'
op|','
string|'"_templates"'
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'              '
name|'map'
op|'('
name|'lambda'
name|'loader'
op|':'
name|'loader'
op|'.'
name|'reset'
op|'('
op|')'
op|','
nl|'\n'
name|'RequestHandler'
op|'.'
name|'_templates'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'RequestHandler'
op|'.'
name|'_static_hashes'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'handler'
op|'.'
name|'_execute'
op|'('
name|'transforms'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'handler'
newline|'\n'
nl|'\n'
DECL|member|reverse_url
dedent|''
name|'def'
name|'reverse_url'
op|'('
name|'self'
op|','
name|'name'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a URL path for handler named `name`\n\n        The handler must be added to the application as a named URLSpec\n        """'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'named_handlers'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'named_handlers'
op|'['
name|'name'
op|']'
op|'.'
name|'reverse'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'KeyError'
op|'('
string|'"%s not found in named urls"'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPError
dedent|''
dedent|''
name|'class'
name|'HTTPError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An exception that will turn into an HTTP error response."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'status_code'
op|','
name|'log_message'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'status_code'
op|'='
name|'status_code'
newline|'\n'
name|'self'
op|'.'
name|'log_message'
op|'='
name|'log_message'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'message'
op|'='
string|'"HTTP %d: %s"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'status_code'
op|','
name|'httplib'
op|'.'
name|'responses'
op|'['
name|'self'
op|'.'
name|'status_code'
op|']'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'log_message'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'message'
op|'+'
string|'" ("'
op|'+'
op|'('
name|'self'
op|'.'
name|'log_message'
op|'%'
name|'self'
op|'.'
name|'args'
op|')'
op|'+'
string|'")"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'message'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrorHandler
dedent|''
dedent|''
dedent|''
name|'class'
name|'ErrorHandler'
op|'('
name|'RequestHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates an error response with status_code for all requests."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|','
name|'status_code'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'RequestHandler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_status'
op|'('
name|'status_code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'HTTPError'
op|'('
name|'self'
op|'.'
name|'_status_code'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RedirectHandler
dedent|''
dedent|''
name|'class'
name|'RedirectHandler'
op|'('
name|'RequestHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Redirects the client to the given URL for all GET requests.\n\n    You should provide the keyword argument "url" to the handler, e.g.:\n\n        application = web.Application([\n            (r"/oldpath", web.RedirectHandler, {"url": "/newpath"}),\n        ])\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|','
name|'url'
op|','
name|'permanent'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'RequestHandler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_url'
op|'='
name|'url'
newline|'\n'
name|'self'
op|'.'
name|'_permanent'
op|'='
name|'permanent'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'redirect'
op|'('
name|'self'
op|'.'
name|'_url'
op|','
name|'permanent'
op|'='
name|'self'
op|'.'
name|'_permanent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StaticFileHandler
dedent|''
dedent|''
name|'class'
name|'StaticFileHandler'
op|'('
name|'RequestHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A simple handler that can serve static content from a directory.\n\n    To map a path to this handler for a static data directory /var/www,\n    you would add a line to your application like:\n\n        application = web.Application([\n            (r"/static/(.*)", web.StaticFileHandler, {"path": "/var/www"}),\n        ])\n\n    The local root directory of the content should be passed as the "path"\n    argument to the handler.\n\n    To support aggressive browser caching, if the argument "v" is given\n    with the path, we set an infinite HTTP expiration header. So, if you\n    want browsers to cache a file indefinitely, send them to, e.g.,\n    /static/images/myimage.png?v=xxx.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'RequestHandler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'application'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'root'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
newline|'\n'
nl|'\n'
DECL|member|head
dedent|''
name|'def'
name|'head'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'get'
op|'('
name|'path'
op|','
name|'include_body'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'include_body'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'abspath'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'root'
op|','
name|'path'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'abspath'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'root'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'403'
op|','
string|'"%s is not in root static directory"'
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'abspath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'404'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'abspath'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'403'
op|','
string|'"%s is not a file"'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stat_result'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'abspath'
op|')'
newline|'\n'
name|'modified'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'fromtimestamp'
op|'('
name|'stat_result'
op|'['
name|'stat'
op|'.'
name|'ST_MTIME'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Last-Modified"'
op|','
name|'modified'
op|')'
newline|'\n'
name|'if'
string|'"v"'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Expires"'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'365'
op|'*'
number|'10'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Cache-Control"'
op|','
string|'"max-age="'
op|'+'
name|'str'
op|'('
number|'86400'
op|'*'
number|'365'
op|'*'
number|'10'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Cache-Control"'
op|','
string|'"public"'
op|')'
newline|'\n'
dedent|''
name|'mime_type'
op|','
name|'encoding'
op|'='
name|'mimetypes'
op|'.'
name|'guess_type'
op|'('
name|'abspath'
op|')'
newline|'\n'
name|'if'
name|'mime_type'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Content-Type"'
op|','
name|'mime_type'
op|')'
newline|'\n'
nl|'\n'
comment|"# Check the If-Modified-Since, and don't send the result if the"
nl|'\n'
comment|'# content has not been modified'
nl|'\n'
dedent|''
name|'ims_value'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"If-Modified-Since"'
op|')'
newline|'\n'
name|'if'
name|'ims_value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'date_tuple'
op|'='
name|'email'
op|'.'
name|'utils'
op|'.'
name|'parsedate'
op|'('
name|'ims_value'
op|')'
newline|'\n'
name|'if_since'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'fromtimestamp'
op|'('
name|'time'
op|'.'
name|'mktime'
op|'('
name|'date_tuple'
op|')'
op|')'
newline|'\n'
name|'if'
name|'if_since'
op|'>='
name|'modified'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'set_status'
op|'('
number|'304'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'include_body'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'set_header'
op|'('
string|'"Content-Length"'
op|','
name|'stat_result'
op|'['
name|'stat'
op|'.'
name|'ST_SIZE'
op|']'
op|')'
newline|'\n'
name|'file'
op|'='
name|'open'
op|'('
name|'abspath'
op|','
string|'"rb"'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'write'
op|'('
name|'file'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FallbackHandler
dedent|''
dedent|''
dedent|''
name|'class'
name|'FallbackHandler'
op|'('
name|'RequestHandler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A RequestHandler that wraps another HTTP server callback.\n\n    The fallback is a callable object that accepts an HTTPRequest,\n    such as an Application or tornado.wsgi.WSGIContainer.  This is most\n    useful to use both tornado RequestHandlers and WSGI in the same server.\n    Typical usage:\n        wsgi_app = tornado.wsgi.WSGIContainer(\n            django.core.handlers.wsgi.WSGIHandler())\n        application = tornado.web.Application([\n            (r"/foo", FooHandler),\n            (r".*", FallbackHandler, dict(fallback=wsgi_app),\n        ])\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'request'
op|','
name|'fallback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'RequestHandler'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fallback'
op|'='
name|'fallback'
newline|'\n'
nl|'\n'
DECL|member|prepare
dedent|''
name|'def'
name|'prepare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fallback'
op|'('
name|'self'
op|'.'
name|'request'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_finished'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OutputTransform
dedent|''
dedent|''
name|'class'
name|'OutputTransform'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A transform modifies the result of an HTTP request (e.g., GZip encoding)\n\n    A new transform instance is created for every request. See the\n    ChunkedTransferEncoding example below if you want to implement a\n    new Transform.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|transform_first_chunk
dedent|''
name|'def'
name|'transform_first_chunk'
op|'('
name|'self'
op|','
name|'headers'
op|','
name|'chunk'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'headers'
op|','
name|'chunk'
newline|'\n'
nl|'\n'
DECL|member|transform_chunk
dedent|''
name|'def'
name|'transform_chunk'
op|'('
name|'self'
op|','
name|'chunk'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'chunk'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GZipContentEncoding
dedent|''
dedent|''
name|'class'
name|'GZipContentEncoding'
op|'('
name|'OutputTransform'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Applies the gzip content encoding to the response.\n\n    See http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.11\n    """'
newline|'\n'
DECL|variable|CONTENT_TYPES
name|'CONTENT_TYPES'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
string|'"text/plain"'
op|','
string|'"text/html"'
op|','
string|'"text/css"'
op|','
string|'"text/xml"'
op|','
nl|'\n'
string|'"application/x-javascript"'
op|','
string|'"application/xml"'
op|','
string|'"application/atom+xml"'
op|','
nl|'\n'
string|'"text/javascript"'
op|','
string|'"application/json"'
op|','
string|'"application/xhtml+xml"'
op|']'
op|')'
newline|'\n'
DECL|variable|MIN_LENGTH
name|'MIN_LENGTH'
op|'='
number|'5'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_gzipping'
op|'='
name|'request'
op|'.'
name|'supports_http_1_1'
op|'('
op|')'
name|'and'
string|'"gzip"'
name|'in'
name|'request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Accept-Encoding"'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|transform_first_chunk
dedent|''
name|'def'
name|'transform_first_chunk'
op|'('
name|'self'
op|','
name|'headers'
op|','
name|'chunk'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_gzipping'
op|':'
newline|'\n'
indent|'            '
name|'ctype'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Content-Type"'
op|','
string|'""'
op|')'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_gzipping'
op|'='
op|'('
name|'ctype'
name|'in'
name|'self'
op|'.'
name|'CONTENT_TYPES'
op|')'
name|'and'
op|'('
name|'not'
name|'finishing'
name|'or'
name|'len'
op|'('
name|'chunk'
op|')'
op|'>='
name|'self'
op|'.'
name|'MIN_LENGTH'
op|')'
name|'and'
op|'('
name|'finishing'
name|'or'
string|'"Content-Length"'
name|'not'
name|'in'
name|'headers'
op|')'
name|'and'
op|'('
string|'"Content-Encoding"'
name|'not'
name|'in'
name|'headers'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_gzipping'
op|':'
newline|'\n'
indent|'            '
name|'headers'
op|'['
string|'"Content-Encoding"'
op|']'
op|'='
string|'"gzip"'
newline|'\n'
name|'self'
op|'.'
name|'_gzip_value'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_gzip_file'
op|'='
name|'gzip'
op|'.'
name|'GzipFile'
op|'('
name|'mode'
op|'='
string|'"w"'
op|','
name|'fileobj'
op|'='
name|'self'
op|'.'
name|'_gzip_value'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_gzip_pos'
op|'='
number|'0'
newline|'\n'
name|'chunk'
op|'='
name|'self'
op|'.'
name|'transform_chunk'
op|'('
name|'chunk'
op|','
name|'finishing'
op|')'
newline|'\n'
name|'if'
string|'"Content-Length"'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|'"Content-Length"'
op|']'
op|'='
name|'str'
op|'('
name|'len'
op|'('
name|'chunk'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'headers'
op|','
name|'chunk'
newline|'\n'
nl|'\n'
DECL|member|transform_chunk
dedent|''
name|'def'
name|'transform_chunk'
op|'('
name|'self'
op|','
name|'chunk'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_gzipping'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_gzip_file'
op|'.'
name|'write'
op|'('
name|'chunk'
op|')'
newline|'\n'
name|'if'
name|'finishing'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_gzip_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_gzip_file'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'chunk'
op|'='
name|'self'
op|'.'
name|'_gzip_value'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_gzip_pos'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'chunk'
op|'='
name|'chunk'
op|'['
name|'self'
op|'.'
name|'_gzip_pos'
op|':'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_gzip_pos'
op|'+='
name|'len'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'chunk'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChunkedTransferEncoding
dedent|''
dedent|''
name|'class'
name|'ChunkedTransferEncoding'
op|'('
name|'OutputTransform'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Applies the chunked transfer encoding to the response.\n\n    See http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.6.1\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_chunking'
op|'='
name|'request'
op|'.'
name|'supports_http_1_1'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|transform_first_chunk
dedent|''
name|'def'
name|'transform_first_chunk'
op|'('
name|'self'
op|','
name|'headers'
op|','
name|'chunk'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_chunking'
op|':'
newline|'\n'
comment|'# No need to chunk the output if a Content-Length is specified'
nl|'\n'
indent|'            '
name|'if'
string|'"Content-Length"'
name|'in'
name|'headers'
name|'or'
string|'"Transfer-Encoding"'
name|'in'
name|'headers'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_chunking'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'headers'
op|'['
string|'"Transfer-Encoding"'
op|']'
op|'='
string|'"chunked"'
newline|'\n'
name|'chunk'
op|'='
name|'self'
op|'.'
name|'transform_chunk'
op|'('
name|'chunk'
op|','
name|'finishing'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'headers'
op|','
name|'chunk'
newline|'\n'
nl|'\n'
DECL|member|transform_chunk
dedent|''
name|'def'
name|'transform_chunk'
op|'('
name|'self'
op|','
name|'block'
op|','
name|'finishing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_chunking'
op|':'
newline|'\n'
comment|"# Don't write out empty chunks because that means END-OF-STREAM"
nl|'\n'
comment|'# with chunked encoding'
nl|'\n'
indent|'            '
name|'if'
name|'block'
op|':'
newline|'\n'
indent|'                '
name|'block'
op|'='
op|'('
string|'"%x"'
op|'%'
name|'len'
op|'('
name|'block'
op|')'
op|')'
op|'+'
string|'"\\r\\n"'
op|'+'
name|'block'
op|'+'
string|'"\\r\\n"'
newline|'\n'
dedent|''
name|'if'
name|'finishing'
op|':'
newline|'\n'
indent|'                '
name|'block'
op|'+='
string|'"0\\r\\n\\r\\n"'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'block'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|authenticated
dedent|''
dedent|''
name|'def'
name|'authenticated'
op|'('
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorate methods with this to require that the user be logged in."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'method'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'current_user'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'request'
op|'.'
name|'method'
op|'=='
string|'"GET"'
op|':'
newline|'\n'
indent|'                '
name|'url'
op|'='
name|'self'
op|'.'
name|'get_login_url'
op|'('
op|')'
newline|'\n'
name|'if'
string|'"?"'
name|'not'
name|'in'
name|'url'
op|':'
newline|'\n'
indent|'                    '
name|'url'
op|'+='
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'dict'
op|'('
name|'next'
op|'='
name|'self'
op|'.'
name|'request'
op|'.'
name|'uri'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'redirect'
op|'('
name|'url'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'raise'
name|'HTTPError'
op|'('
number|'403'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'method'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UIModule
dedent|''
name|'class'
name|'UIModule'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A UI re-usable, modular unit on a page.\n\n    UI modules often execute additional queries, and they can include\n    additional CSS and JavaScript that will be included in the output\n    page, which is automatically inserted on page render.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'handler'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'handler'
op|'='
name|'handler'
newline|'\n'
name|'self'
op|'.'
name|'request'
op|'='
name|'handler'
op|'.'
name|'request'
newline|'\n'
name|'self'
op|'.'
name|'ui'
op|'='
name|'handler'
op|'.'
name|'ui'
newline|'\n'
name|'self'
op|'.'
name|'current_user'
op|'='
name|'handler'
op|'.'
name|'current_user'
newline|'\n'
name|'self'
op|'.'
name|'locale'
op|'='
name|'handler'
op|'.'
name|'locale'
newline|'\n'
nl|'\n'
DECL|member|render
dedent|''
name|'def'
name|'render'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|embedded_javascript
dedent|''
name|'def'
name|'embedded_javascript'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a JavaScript string that will be embedded in the page."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|javascript_files
dedent|''
name|'def'
name|'javascript_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of JavaScript files required by this module."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|embedded_css
dedent|''
name|'def'
name|'embedded_css'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a CSS string that will be embedded in the page."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|css_files
dedent|''
name|'def'
name|'css_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of JavaScript files required by this module."""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|html_head
dedent|''
name|'def'
name|'html_head'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a CSS string that will be put in the <head/> element"""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|html_body
dedent|''
name|'def'
name|'html_body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an HTML string that will be put in the <body/> element"""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|render_string
dedent|''
name|'def'
name|'render_string'
op|'('
name|'self'
op|','
name|'path'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'handler'
op|'.'
name|'render_string'
op|'('
name|'path'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|class|URLSpec
dedent|''
dedent|''
name|'class'
name|'URLSpec'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specifies mappings between URLs and handlers."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pattern'
op|','
name|'handler_class'
op|','
name|'kwargs'
op|'='
op|'{'
op|'}'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a URLSpec.\n\n        Parameters:\n        pattern: Regular expression to be matched.  Any groups in the regex\n            will be passed in to the handler\'s get/post/etc methods as\n            arguments.\n        handler_class: RequestHandler subclass to be invoked.\n        kwargs (optional): A dictionary of additional arguments to be passed\n            to the handler\'s constructor.\n        name (optional): A name for this handler.  Used by\n            Application.reverse_url.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'pattern'
op|'.'
name|'endswith'
op|'('
string|"'$'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pattern'
op|'+='
string|"'$'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'pattern'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'handler_class'
op|'='
name|'handler_class'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_path'
op|','
name|'self'
op|'.'
name|'_group_count'
op|'='
name|'self'
op|'.'
name|'_find_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_groups
dedent|''
name|'def'
name|'_find_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a tuple (reverse string, group count) for a url.\n\n        For example: Given the url pattern /([0-9]{4})/([a-z-]+)/, this method\n        would return (\'/%s/%s/\', 2).\n        """'
newline|'\n'
name|'pattern'
op|'='
name|'self'
op|'.'
name|'regex'
op|'.'
name|'pattern'
newline|'\n'
name|'if'
name|'pattern'
op|'.'
name|'startswith'
op|'('
string|"'^'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pattern'
op|'='
name|'pattern'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'pattern'
op|'.'
name|'endswith'
op|'('
string|"'$'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pattern'
op|'='
name|'pattern'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'groups'
op|'!='
name|'pattern'
op|'.'
name|'count'
op|'('
string|"'('"
op|')'
op|':'
newline|'\n'
comment|'# The pattern is too complicated for our simplistic matching,'
nl|'\n'
comment|"# so we can't support reversing it."
nl|'\n'
indent|'            '
name|'return'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pieces'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fragment'
name|'in'
name|'pattern'
op|'.'
name|'split'
op|'('
string|"'('"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"')'"
name|'in'
name|'fragment'
op|':'
newline|'\n'
indent|'                '
name|'paren_loc'
op|'='
name|'fragment'
op|'.'
name|'index'
op|'('
string|"')'"
op|')'
newline|'\n'
name|'if'
name|'paren_loc'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'pieces'
op|'.'
name|'append'
op|'('
string|"'%s'"
op|'+'
name|'fragment'
op|'['
name|'paren_loc'
op|'+'
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'pieces'
op|'.'
name|'append'
op|'('
name|'fragment'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'pieces'
op|')'
op|','
name|'self'
op|'.'
name|'regex'
op|'.'
name|'groups'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reverse
dedent|''
name|'def'
name|'reverse'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'_path'
name|'is'
name|'not'
name|'None'
op|','
string|'"Cannot reverse url regex "'
op|'+'
name|'self'
op|'.'
name|'regex'
op|'.'
name|'pattern'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'args'
op|')'
op|'=='
name|'self'
op|'.'
name|'_group_count'
op|','
string|'"required number of arguments "'
string|'"not found"'
newline|'\n'
name|'if'
name|'not'
name|'len'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_path'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_path'
op|'%'
name|'tuple'
op|'('
op|'['
name|'str'
op|'('
name|'a'
op|')'
name|'for'
name|'a'
name|'in'
name|'args'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|url
dedent|''
dedent|''
name|'url'
op|'='
name|'URLSpec'
newline|'\n'
nl|'\n'
DECL|function|_utf8
name|'def'
name|'_utf8'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'s'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'s'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'s'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_unicode
dedent|''
name|'def'
name|'_unicode'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'s'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'s'
op|'.'
name|'decode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeDecodeError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'HTTPError'
op|'('
number|'400'
op|','
string|'"Non-utf8 argument"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'s'
op|','
name|'unicode'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_time_independent_equals
dedent|''
name|'def'
name|'_time_independent_equals'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'len'
op|'('
name|'a'
op|')'
op|'!='
name|'len'
op|'('
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'result'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'zip'
op|'('
name|'a'
op|','
name|'b'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'|='
name|'ord'
op|'('
name|'x'
op|')'
op|'^'
name|'ord'
op|'('
name|'y'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_O
dedent|''
name|'class'
name|'_O'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Makes a dictionary behave like an object."""'
newline|'\n'
DECL|member|__getattr__
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""A simple template system that compiles templates to Python code.\n\nBasic usage looks like:\n\n    t = template.Template("<html>{{ myvalue }}</html>")\n    print t.generate(myvalue="XXX")\n\nLoader is a class that loads templates from a root directory and caches\nthe compiled templates:\n\n    loader = template.Loader("/home/btaylor")\n    print loader.load("test.html").generate(myvalue="XXX")\n\nWe compile all templates to raw Python. Error-reporting is currently... uh,\ninteresting. Syntax for the templates\n\n    ### base.html\n    <html>\n      <head>\n        <title>{% block title %}Default title{% end %}</title>\n      </head>\n      <body>\n        <ul>\n          {% for student in students %}\n            {% block student %}\n              <li>{{ escape(student.name) }}</li>\n            {% end %}\n          {% end %}\n        </ul>\n      </body>\n    </html>\n\n    ### bold.html\n    {% extends "base.html" %}\n\n    {% block title %}A bolder title{% end %}\n\n    {% block student %}\n      <li><span style="bold">{{ escape(student.name) }}</span></li>\n    {% block %}\n\nUnlike most other template systems, we do not put any restrictions on the\nexpressions you can include in your statements. if and for blocks get\ntranslated exactly into Python, do you can do complex expressions like:\n\n   {% for student in [p for p in people if p.student and p.age > 23] %}\n     <li>{{ escape(student.name) }}</li>\n   {% end %}\n\nTranslating directly to Python means you can apply functions to expressions\neasily, like the escape() function in the examples above. You can pass\nfunctions in to your template just like any other variable:\n\n   ### Python code\n   def add(x, y):\n      return x + y\n   template.execute(add=add)\n\n   ### The template\n   {{ add(1, 2) }}\n\nWe provide the functions escape(), url_escape(), json_encode(), and squeeze()\nto all templates by default.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'with_statement'
newline|'\n'
nl|'\n'
name|'import'
name|'cStringIO'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'escape'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
DECL|variable|_log
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'tornado.template'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|Template
name|'class'
name|'Template'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A compiled template.\n\n    We compile into Python from the given template_string. You can generate\n    the template from variables with generate().\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'template_string'
op|','
name|'name'
op|'='
string|'"<string>"'
op|','
name|'loader'
op|'='
name|'None'
op|','
nl|'\n'
name|'compress_whitespace'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'compress_whitespace'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'compress_whitespace'
op|'='
name|'name'
op|'.'
name|'endswith'
op|'('
string|'".html"'
op|')'
name|'or'
name|'name'
op|'.'
name|'endswith'
op|'('
string|'".js"'
op|')'
newline|'\n'
dedent|''
name|'reader'
op|'='
name|'_TemplateReader'
op|'('
name|'name'
op|','
name|'template_string'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'file'
op|'='
name|'_File'
op|'('
name|'_parse'
op|'('
name|'reader'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'self'
op|'.'
name|'_generate_python'
op|'('
name|'loader'
op|','
name|'compress_whitespace'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compiled'
op|'='
name|'compile'
op|'('
name|'self'
op|'.'
name|'code'
op|','
name|'self'
op|'.'
name|'name'
op|','
string|'"exec"'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'formatted_code'
op|'='
name|'_format_code'
op|'('
name|'self'
op|'.'
name|'code'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'_log'
op|'.'
name|'error'
op|'('
string|'"%s code:\\n%s"'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'formatted_code'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Generate this template with the given arguments."""'
newline|'\n'
name|'namespace'
op|'='
op|'{'
nl|'\n'
string|'"escape"'
op|':'
name|'escape'
op|'.'
name|'xhtml_escape'
op|','
nl|'\n'
string|'"url_escape"'
op|':'
name|'escape'
op|'.'
name|'url_escape'
op|','
nl|'\n'
string|'"json_encode"'
op|':'
name|'escape'
op|'.'
name|'json_encode'
op|','
nl|'\n'
string|'"squeeze"'
op|':'
name|'escape'
op|'.'
name|'squeeze'
op|','
nl|'\n'
string|'"datetime"'
op|':'
name|'datetime'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'namespace'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exec'
name|'self'
op|'.'
name|'compiled'
name|'in'
name|'namespace'
newline|'\n'
name|'execute'
op|'='
name|'namespace'
op|'['
string|'"_execute"'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'execute'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'formatted_code'
op|'='
name|'_format_code'
op|'('
name|'self'
op|'.'
name|'code'
op|')'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'_log'
op|'.'
name|'error'
op|'('
string|'"%s code:\\n%s"'
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'formatted_code'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|_generate_python
dedent|''
dedent|''
name|'def'
name|'_generate_python'
op|'('
name|'self'
op|','
name|'loader'
op|','
name|'compress_whitespace'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'buffer'
op|'='
name|'cStringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'named_blocks'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'ancestors'
op|'='
name|'self'
op|'.'
name|'_get_ancestors'
op|'('
name|'loader'
op|')'
newline|'\n'
name|'ancestors'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'for'
name|'ancestor'
name|'in'
name|'ancestors'
op|':'
newline|'\n'
indent|'                '
name|'ancestor'
op|'.'
name|'find_named_blocks'
op|'('
name|'loader'
op|','
name|'named_blocks'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'file'
op|'.'
name|'find_named_blocks'
op|'('
name|'loader'
op|','
name|'named_blocks'
op|')'
newline|'\n'
name|'writer'
op|'='
name|'_CodeWriter'
op|'('
name|'buffer'
op|','
name|'named_blocks'
op|','
name|'loader'
op|','
name|'self'
op|','
nl|'\n'
name|'compress_whitespace'
op|')'
newline|'\n'
name|'ancestors'
op|'['
number|'0'
op|']'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
name|'return'
name|'buffer'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'buffer'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ancestors
dedent|''
dedent|''
name|'def'
name|'_get_ancestors'
op|'('
name|'self'
op|','
name|'loader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ancestors'
op|'='
op|'['
name|'self'
op|'.'
name|'file'
op|']'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'self'
op|'.'
name|'file'
op|'.'
name|'body'
op|'.'
name|'chunks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'chunk'
op|','
name|'_ExtendsBlock'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'loader'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"{% extends %} block found, but no "'
nl|'\n'
string|'"template loader"'
op|')'
newline|'\n'
dedent|''
name|'template'
op|'='
name|'loader'
op|'.'
name|'load'
op|'('
name|'chunk'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'ancestors'
op|'.'
name|'extend'
op|'('
name|'template'
op|'.'
name|'_get_ancestors'
op|'('
name|'loader'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ancestors'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Loader
dedent|''
dedent|''
name|'class'
name|'Loader'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A template loader that loads from a single root directory.\n\n    You must use a template loader to use template constructs like\n    {% extends %} and {% include %}. Loader caches all templates after\n    they are loaded the first time.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'root_directory'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'root'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'root_directory'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'templates'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'templates'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|resolve_path
dedent|''
name|'def'
name|'resolve_path'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'parent_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'parent_path'
name|'and'
name|'not'
name|'parent_path'
op|'.'
name|'startswith'
op|'('
string|'"<"'
op|')'
name|'and'
name|'not'
name|'parent_path'
op|'.'
name|'startswith'
op|'('
string|'"/"'
op|')'
name|'and'
name|'not'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'"/"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'current_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'root'
op|','
name|'parent_path'
op|')'
newline|'\n'
name|'file_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'current_path'
op|')'
op|')'
newline|'\n'
name|'relative_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'file_dir'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
name|'if'
name|'relative_path'
op|'.'
name|'startswith'
op|'('
name|'self'
op|'.'
name|'root'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'relative_path'
op|'['
name|'len'
op|'('
name|'self'
op|'.'
name|'root'
op|')'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|load
dedent|''
name|'def'
name|'load'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'parent_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'resolve_path'
op|'('
name|'name'
op|','
name|'parent_path'
op|'='
name|'parent_path'
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'templates'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'root'
op|','
name|'name'
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'path'
op|','
string|'"r"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'templates'
op|'['
name|'name'
op|']'
op|'='
name|'Template'
op|'('
name|'f'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'name'
op|'='
name|'name'
op|','
name|'loader'
op|'='
name|'self'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'templates'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Node
dedent|''
dedent|''
name|'class'
name|'_Node'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|each_child
indent|'    '
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|find_named_blocks
dedent|''
name|'def'
name|'find_named_blocks'
op|'('
name|'self'
op|','
name|'loader'
op|','
name|'named_blocks'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'child'
name|'in'
name|'self'
op|'.'
name|'each_child'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'child'
op|'.'
name|'find_named_blocks'
op|'('
name|'loader'
op|','
name|'named_blocks'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_File
dedent|''
dedent|''
dedent|''
name|'class'
name|'_File'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"def _execute():"'
op|')'
newline|'\n'
name|'with'
name|'writer'
op|'.'
name|'indent'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"_buffer = []"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"return \'\'.join(_buffer)"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|each_child
dedent|''
dedent|''
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'body'
op|','
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ChunkList
dedent|''
dedent|''
name|'class'
name|'_ChunkList'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'chunks'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'chunks'
op|'='
name|'chunks'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'chunk'
name|'in'
name|'self'
op|'.'
name|'chunks'
op|':'
newline|'\n'
indent|'            '
name|'chunk'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|each_child
dedent|''
dedent|''
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'chunks'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NamedBlock
dedent|''
dedent|''
name|'class'
name|'_NamedBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'body'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|member|each_child
dedent|''
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'body'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'named_blocks'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|find_named_blocks
dedent|''
name|'def'
name|'find_named_blocks'
op|'('
name|'self'
op|','
name|'loader'
op|','
name|'named_blocks'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'named_blocks'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
op|'='
name|'self'
op|'.'
name|'body'
newline|'\n'
name|'_Node'
op|'.'
name|'find_named_blocks'
op|'('
name|'self'
op|','
name|'loader'
op|','
name|'named_blocks'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ExtendsBlock
dedent|''
dedent|''
name|'class'
name|'_ExtendsBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_IncludeBlock
dedent|''
dedent|''
name|'class'
name|'_IncludeBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'reader'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'template_name'
op|'='
name|'reader'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|find_named_blocks
dedent|''
name|'def'
name|'find_named_blocks'
op|'('
name|'self'
op|','
name|'loader'
op|','
name|'named_blocks'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'included'
op|'='
name|'loader'
op|'.'
name|'load'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'template_name'
op|')'
newline|'\n'
name|'included'
op|'.'
name|'file'
op|'.'
name|'find_named_blocks'
op|'('
name|'loader'
op|','
name|'named_blocks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'included'
op|'='
name|'writer'
op|'.'
name|'loader'
op|'.'
name|'load'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'template_name'
op|')'
newline|'\n'
name|'old'
op|'='
name|'writer'
op|'.'
name|'current_template'
newline|'\n'
name|'writer'
op|'.'
name|'current_template'
op|'='
name|'included'
newline|'\n'
name|'included'
op|'.'
name|'file'
op|'.'
name|'body'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'current_template'
op|'='
name|'old'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ApplyBlock
dedent|''
dedent|''
name|'class'
name|'_ApplyBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'body'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|member|each_child
dedent|''
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'body'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_name'
op|'='
string|'"apply%d"'
op|'%'
name|'writer'
op|'.'
name|'apply_counter'
newline|'\n'
name|'writer'
op|'.'
name|'apply_counter'
op|'+='
number|'1'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"def %s():"'
op|'%'
name|'method_name'
op|')'
newline|'\n'
name|'with'
name|'writer'
op|'.'
name|'indent'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"_buffer = []"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"return \'\'.join(_buffer)"'
op|')'
newline|'\n'
dedent|''
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"_buffer.append(%s(%s()))"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'method'
op|','
name|'method_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ControlBlock
dedent|''
dedent|''
name|'class'
name|'_ControlBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'statement'
op|','
name|'body'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'statement'
op|'='
name|'statement'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
newline|'\n'
nl|'\n'
DECL|member|each_child
dedent|''
name|'def'
name|'each_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
name|'self'
op|'.'
name|'body'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"%s:"'
op|'%'
name|'self'
op|'.'
name|'statement'
op|')'
newline|'\n'
name|'with'
name|'writer'
op|'.'
name|'indent'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'body'
op|'.'
name|'generate'
op|'('
name|'writer'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_IntermediateControlBlock
dedent|''
dedent|''
dedent|''
name|'class'
name|'_IntermediateControlBlock'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'statement'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'statement'
op|'='
name|'statement'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"%s:"'
op|'%'
name|'self'
op|'.'
name|'statement'
op|','
name|'writer'
op|'.'
name|'indent_size'
op|'('
op|')'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Statement
dedent|''
dedent|''
name|'class'
name|'_Statement'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'statement'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'statement'
op|'='
name|'statement'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'write_line'
op|'('
name|'self'
op|'.'
name|'statement'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Expression
dedent|''
dedent|''
name|'class'
name|'_Expression'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'expression'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expression'
op|'='
name|'expression'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"_tmp = %s"'
op|'%'
name|'self'
op|'.'
name|'expression'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"if isinstance(_tmp, str): _buffer.append(_tmp)"'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"elif isinstance(_tmp, unicode): "'
nl|'\n'
string|'"_buffer.append(_tmp.encode(\'utf-8\'))"'
op|')'
newline|'\n'
name|'writer'
op|'.'
name|'write_line'
op|'('
string|'"else: _buffer.append(str(_tmp))"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Text
dedent|''
dedent|''
name|'class'
name|'_Text'
op|'('
name|'_Node'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|generate
dedent|''
name|'def'
name|'generate'
op|'('
name|'self'
op|','
name|'writer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'self'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
comment|'# Compress lots of white space to a single character. If the whitespace'
nl|'\n'
comment|'# breaks a line, have it continue to break a line, but just with a'
nl|'\n'
comment|'# single \\n character'
nl|'\n'
name|'if'
name|'writer'
op|'.'
name|'compress_whitespace'
name|'and'
string|'"<pre>"'
name|'not'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"([\\t ]+)"'
op|','
string|'" "'
op|','
name|'value'
op|')'
newline|'\n'
name|'value'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r"(\\s*\\n\\s*)"'
op|','
string|'"\\n"'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'            '
name|'writer'
op|'.'
name|'write_line'
op|'('
string|"'_buffer.append(%r)'"
op|'%'
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParseError
dedent|''
dedent|''
dedent|''
name|'class'
name|'ParseError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Raised for template syntax errors."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_CodeWriter
dedent|''
name|'class'
name|'_CodeWriter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'file'
op|','
name|'named_blocks'
op|','
name|'loader'
op|','
name|'current_template'
op|','
nl|'\n'
name|'compress_whitespace'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'file'
op|'='
name|'file'
newline|'\n'
name|'self'
op|'.'
name|'named_blocks'
op|'='
name|'named_blocks'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'='
name|'loader'
newline|'\n'
name|'self'
op|'.'
name|'current_template'
op|'='
name|'current_template'
newline|'\n'
name|'self'
op|'.'
name|'compress_whitespace'
op|'='
name|'compress_whitespace'
newline|'\n'
name|'self'
op|'.'
name|'apply_counter'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_indent'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|indent
dedent|''
name|'def'
name|'indent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|indent_size
dedent|''
name|'def'
name|'indent_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_indent'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_indent'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'_indent'
op|'>'
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'_indent'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|write_line
dedent|''
name|'def'
name|'write_line'
op|'('
name|'self'
op|','
name|'line'
op|','
name|'indent'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'indent'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'indent'
op|'='
name|'self'
op|'.'
name|'_indent'
newline|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'file'
op|'.'
name|'write'
op|'('
string|'"    "'
op|')'
newline|'\n'
dedent|''
name|'print'
op|'>>'
name|'self'
op|'.'
name|'file'
op|','
name|'line'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TemplateReader
dedent|''
dedent|''
name|'class'
name|'_TemplateReader'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'text'
op|'='
name|'text'
newline|'\n'
name|'self'
op|'.'
name|'line'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'pos'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|find
dedent|''
name|'def'
name|'find'
op|'('
name|'self'
op|','
name|'needle'
op|','
name|'start'
op|'='
number|'0'
op|','
name|'end'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'start'
op|'>='
number|'0'
op|','
name|'start'
newline|'\n'
name|'pos'
op|'='
name|'self'
op|'.'
name|'pos'
newline|'\n'
name|'start'
op|'+='
name|'pos'
newline|'\n'
name|'if'
name|'end'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'index'
op|'='
name|'self'
op|'.'
name|'text'
op|'.'
name|'find'
op|'('
name|'needle'
op|','
name|'start'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'+='
name|'pos'
newline|'\n'
name|'assert'
name|'end'
op|'>='
name|'start'
newline|'\n'
name|'index'
op|'='
name|'self'
op|'.'
name|'text'
op|'.'
name|'find'
op|'('
name|'needle'
op|','
name|'start'
op|','
name|'end'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'index'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'index'
op|'-='
name|'pos'
newline|'\n'
dedent|''
name|'return'
name|'index'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'count'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'count'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'count'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'text'
op|')'
op|'-'
name|'self'
op|'.'
name|'pos'
newline|'\n'
dedent|''
name|'newpos'
op|'='
name|'self'
op|'.'
name|'pos'
op|'+'
name|'count'
newline|'\n'
name|'self'
op|'.'
name|'line'
op|'+='
name|'self'
op|'.'
name|'text'
op|'.'
name|'count'
op|'('
string|'"\\n"'
op|','
name|'self'
op|'.'
name|'pos'
op|','
name|'newpos'
op|')'
newline|'\n'
name|'s'
op|'='
name|'self'
op|'.'
name|'text'
op|'['
name|'self'
op|'.'
name|'pos'
op|':'
name|'newpos'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'pos'
op|'='
name|'newpos'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|remaining
dedent|''
name|'def'
name|'remaining'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'len'
op|'('
name|'self'
op|'.'
name|'text'
op|')'
op|'-'
name|'self'
op|'.'
name|'pos'
newline|'\n'
nl|'\n'
DECL|member|__len__
dedent|''
name|'def'
name|'__len__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'remaining'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'key'
op|')'
name|'is'
name|'slice'
op|':'
newline|'\n'
indent|'            '
name|'size'
op|'='
name|'len'
op|'('
name|'self'
op|')'
newline|'\n'
name|'start'
op|','
name|'stop'
op|','
name|'step'
op|'='
name|'slice'
op|'.'
name|'indices'
op|'('
name|'size'
op|')'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'None'
op|':'
name|'start'
op|'='
name|'self'
op|'.'
name|'pos'
newline|'\n'
name|'else'
op|':'
name|'start'
op|'+='
name|'self'
op|'.'
name|'pos'
newline|'\n'
name|'if'
name|'stop'
name|'is'
name|'not'
name|'None'
op|':'
name|'stop'
op|'+='
name|'self'
op|'.'
name|'pos'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'text'
op|'['
name|'slice'
op|'('
name|'start'
op|','
name|'stop'
op|','
name|'step'
op|')'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'text'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'text'
op|'['
name|'self'
op|'.'
name|'pos'
op|'+'
name|'key'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'text'
op|'['
name|'self'
op|'.'
name|'pos'
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_format_code
dedent|''
dedent|''
name|'def'
name|'_format_code'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'lines'
op|'='
name|'code'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
name|'format'
op|'='
string|'"%%%dd  %%s\\n"'
op|'%'
name|'len'
op|'('
name|'repr'
op|'('
name|'len'
op|'('
name|'lines'
op|')'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
string|'""'
op|'.'
name|'join'
op|'('
op|'['
name|'format'
op|'%'
op|'('
name|'i'
op|'+'
number|'1'
op|','
name|'line'
op|')'
name|'for'
op|'('
name|'i'
op|','
name|'line'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'lines'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parse
dedent|''
name|'def'
name|'_parse'
op|'('
name|'reader'
op|','
name|'in_block'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'body'
op|'='
name|'_ChunkList'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
comment|'# Find next template directive'
nl|'\n'
indent|'        '
name|'curly'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'curly'
op|'='
name|'reader'
op|'.'
name|'find'
op|'('
string|'"{"'
op|','
name|'curly'
op|')'
newline|'\n'
name|'if'
name|'curly'
op|'=='
op|'-'
number|'1'
name|'or'
name|'curly'
op|'+'
number|'1'
op|'=='
name|'reader'
op|'.'
name|'remaining'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# EOF'
nl|'\n'
indent|'                '
name|'if'
name|'in_block'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"Missing {%% end %%} block for %s"'
op|'%'
nl|'\n'
name|'in_block'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'_Text'
op|'('
name|'reader'
op|'.'
name|'consume'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'body'
newline|'\n'
comment|'# If the first curly brace is not the start of a special token,'
nl|'\n'
comment|'# start searching from the character after it'
nl|'\n'
dedent|''
name|'if'
name|'reader'
op|'['
name|'curly'
op|'+'
number|'1'
op|']'
name|'not'
name|'in'
op|'('
string|'"{"'
op|','
string|'"%"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'curly'
op|'+='
number|'1'
newline|'\n'
name|'continue'
newline|'\n'
comment|'# When there are more than 2 curlies in a row, use the'
nl|'\n'
comment|'# innermost ones.  This is useful when generating languages'
nl|'\n'
comment|'# like latex where curlies are also meaningful'
nl|'\n'
dedent|''
name|'if'
op|'('
name|'curly'
op|'+'
number|'2'
op|'<'
name|'reader'
op|'.'
name|'remaining'
op|'('
op|')'
name|'and'
nl|'\n'
name|'reader'
op|'['
name|'curly'
op|'+'
number|'1'
op|']'
op|'=='
string|"'{'"
name|'and'
name|'reader'
op|'['
name|'curly'
op|'+'
number|'2'
op|']'
op|'=='
string|"'{'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'curly'
op|'+='
number|'1'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
comment|'# Append any text before the special token'
nl|'\n'
dedent|''
name|'if'
name|'curly'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'_Text'
op|'('
name|'reader'
op|'.'
name|'consume'
op|'('
name|'curly'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'start_brace'
op|'='
name|'reader'
op|'.'
name|'consume'
op|'('
number|'2'
op|')'
newline|'\n'
name|'line'
op|'='
name|'reader'
op|'.'
name|'line'
newline|'\n'
nl|'\n'
comment|'# Expression'
nl|'\n'
name|'if'
name|'start_brace'
op|'=='
string|'"{{"'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'reader'
op|'.'
name|'find'
op|'('
string|'"}}"'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
name|'or'
name|'reader'
op|'.'
name|'find'
op|'('
string|'"\\n"'
op|','
number|'0'
op|','
name|'end'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ParseError'
op|'('
string|'"Missing end expression }} on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'contents'
op|'='
name|'reader'
op|'.'
name|'consume'
op|'('
name|'end'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'consume'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'contents'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ParseError'
op|'('
string|'"Empty expression on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'_Expression'
op|'('
name|'contents'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Block'
nl|'\n'
dedent|''
name|'assert'
name|'start_brace'
op|'=='
string|'"{%"'
op|','
name|'start_brace'
newline|'\n'
name|'end'
op|'='
name|'reader'
op|'.'
name|'find'
op|'('
string|'"%}"'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'=='
op|'-'
number|'1'
name|'or'
name|'reader'
op|'.'
name|'find'
op|'('
string|'"\\n"'
op|','
number|'0'
op|','
name|'end'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ParseError'
op|'('
string|'"Missing end block %%} on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'contents'
op|'='
name|'reader'
op|'.'
name|'consume'
op|'('
name|'end'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'reader'
op|'.'
name|'consume'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'contents'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ParseError'
op|'('
string|'"Empty block tag ({%% %%}) on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'operator'
op|','
name|'space'
op|','
name|'suffix'
op|'='
name|'contents'
op|'.'
name|'partition'
op|'('
string|'" "'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'suffix'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Intermediate ("else", "elif", etc) blocks'
nl|'\n'
name|'intermediate_blocks'
op|'='
op|'{'
nl|'\n'
string|'"else"'
op|':'
name|'set'
op|'('
op|'['
string|'"if"'
op|','
string|'"for"'
op|','
string|'"while"'
op|']'
op|')'
op|','
nl|'\n'
string|'"elif"'
op|':'
name|'set'
op|'('
op|'['
string|'"if"'
op|']'
op|')'
op|','
nl|'\n'
string|'"except"'
op|':'
name|'set'
op|'('
op|'['
string|'"try"'
op|']'
op|')'
op|','
nl|'\n'
string|'"finally"'
op|':'
name|'set'
op|'('
op|'['
string|'"try"'
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'allowed_parents'
op|'='
name|'intermediate_blocks'
op|'.'
name|'get'
op|'('
name|'operator'
op|')'
newline|'\n'
name|'if'
name|'allowed_parents'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'in_block'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ParseError'
op|'('
string|'"%s outside %s block"'
op|'%'
nl|'\n'
op|'('
name|'operator'
op|','
name|'allowed_parents'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'in_block'
name|'not'
name|'in'
name|'allowed_parents'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ParseError'
op|'('
string|'"%s block cannot be attached to %s block"'
op|'%'
op|'('
name|'operator'
op|','
name|'in_block'
op|')'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'_IntermediateControlBlock'
op|'('
name|'contents'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# End tag'
nl|'\n'
dedent|''
name|'elif'
name|'operator'
op|'=='
string|'"end"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'in_block'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ParseError'
op|'('
string|'"Extra {%% end %%} block on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'body'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'operator'
name|'in'
op|'('
string|'"extends"'
op|','
string|'"include"'
op|','
string|'"set"'
op|','
string|'"import"'
op|','
string|'"comment"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'operator'
op|'=='
string|'"comment"'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'operator'
op|'=='
string|'"extends"'
op|':'
newline|'\n'
indent|'                '
name|'suffix'
op|'='
name|'suffix'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|'.'
name|'strip'
op|'('
string|'"\'"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"extends missing file path on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_ExtendsBlock'
op|'('
name|'suffix'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'operator'
op|'=='
string|'"import"'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"import missing statement on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_Statement'
op|'('
name|'contents'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'operator'
op|'=='
string|'"include"'
op|':'
newline|'\n'
indent|'                '
name|'suffix'
op|'='
name|'suffix'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|'.'
name|'strip'
op|'('
string|'"\'"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"include missing file path on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_IncludeBlock'
op|'('
name|'suffix'
op|','
name|'reader'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'operator'
op|'=='
string|'"set"'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"set missing statement on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_Statement'
op|'('
name|'suffix'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'block'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'operator'
name|'in'
op|'('
string|'"apply"'
op|','
string|'"block"'
op|','
string|'"try"'
op|','
string|'"if"'
op|','
string|'"for"'
op|','
string|'"while"'
op|')'
op|':'
newline|'\n'
comment|'# parse inner body recursively'
nl|'\n'
indent|'            '
name|'block_body'
op|'='
name|'_parse'
op|'('
name|'reader'
op|','
name|'operator'
op|')'
newline|'\n'
name|'if'
name|'operator'
op|'=='
string|'"apply"'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"apply missing method name on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_ApplyBlock'
op|'('
name|'suffix'
op|','
name|'block_body'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'operator'
op|'=='
string|'"block"'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'suffix'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ParseError'
op|'('
string|'"block missing name on line %d"'
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'block'
op|'='
name|'_NamedBlock'
op|'('
name|'suffix'
op|','
name|'block_body'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'block'
op|'='
name|'_ControlBlock'
op|'('
name|'contents'
op|','
name|'block_body'
op|')'
newline|'\n'
dedent|''
name|'body'
op|'.'
name|'chunks'
op|'.'
name|'append'
op|'('
name|'block'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ParseError'
op|'('
string|'"unknown operator: %r"'
op|'%'
name|'operator'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

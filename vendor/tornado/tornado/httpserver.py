begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""A non-blocking, single-threaded HTTP server."""'
newline|'\n'
nl|'\n'
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'ioloop'
newline|'\n'
name|'import'
name|'iostream'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32_support'
name|'as'
name|'fcntl'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'ssl'
comment|'# Python 2.6+'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|ssl
indent|'    '
name|'ssl'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|_log
dedent|''
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'tornado.httpserver'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|HTTPServer
name|'class'
name|'HTTPServer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A non-blocking, single-threaded HTTP server.\n\n    A server is defined by a request callback that takes an HTTPRequest\n    instance as an argument and writes a valid HTTP response with\n    request.write(). request.finish() finishes the request (but does not\n    necessarily close the connection in the case of HTTP/1.1 keep-alive\n    requests). A simple example server that echoes back the URI you\n    requested:\n\n        import httpserver\n        import ioloop\n\n        def handle_request(request):\n           message = "You requested %s\\n" % request.uri\n           request.write("HTTP/1.1 200 OK\\r\\nContent-Length: %d\\r\\n\\r\\n%s" % (\n                         len(message), message))\n           request.finish()\n\n        http_server = httpserver.HTTPServer(handle_request)\n        http_server.listen(8888)\n        ioloop.IOLoop.instance().start()\n\n    HTTPServer is a very basic connection handler. Beyond parsing the\n    HTTP request body and headers, the only HTTP semantics implemented\n    in HTTPServer is HTTP/1.1 keep-alive connections. We do not, however,\n    implement chunked encoding, so the request callback must provide a\n    Content-Length header or implement chunked encoding for HTTP/1.1\n    requests for the server to run correctly for HTTP/1.1 clients. If\n    the request handler is unable to do this, you can provide the\n    no_keep_alive argument to the HTTPServer constructor, which will\n    ensure the connection is closed on every request no matter what HTTP\n    version the client is using.\n\n    If xheaders is True, we support the X-Real-Ip and X-Scheme headers,\n    which override the remote IP and HTTP scheme for all requests. These\n    headers are useful when running Tornado behind a reverse proxy or\n    load balancer.\n\n    HTTPServer can serve HTTPS (SSL) traffic with Python 2.6+ and OpenSSL.\n    To make this server serve SSL traffic, send the ssl_options dictionary\n    argument with the arguments required for the ssl.wrap_socket() method,\n    including "certfile" and "keyfile":\n\n       HTTPServer(applicaton, ssl_options={\n           "certfile": os.path.join(data_dir, "mydomain.crt"),\n           "keyfile": os.path.join(data_dir, "mydomain.key"),\n       })\n\n    By default, listen() runs in a single thread in a single process. You\n    can utilize all available CPUs on this machine by calling bind() and\n    start() instead of listen():\n\n        http_server = httpserver.HTTPServer(handle_request)\n        http_server.bind(8888)\n        http_server.start() # Forks multiple sub-processes\n        ioloop.IOLoop.instance().start()\n\n    start() detects the number of CPUs on this machine and "pre-forks" that\n    number of child processes so that we have one Tornado process per CPU,\n    all with their own IOLoop. You can also pass in the specific number of\n    child processes you want to run with if you want to override this\n    auto-detection.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'request_callback'
op|','
name|'no_keep_alive'
op|'='
name|'False'
op|','
name|'io_loop'
op|'='
name|'None'
op|','
nl|'\n'
name|'xheaders'
op|'='
name|'False'
op|','
name|'ssl_options'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initializes the server with the given request callback.\n\n        If you use pre-forking/start() instead of the listen() method to\n        start your server, you should not pass an IOLoop instance to this\n        constructor. Each pre-forked child process will create its own\n        IOLoop instance after the forking process.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'request_callback'
op|'='
name|'request_callback'
newline|'\n'
name|'self'
op|'.'
name|'no_keep_alive'
op|'='
name|'no_keep_alive'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'='
name|'io_loop'
newline|'\n'
name|'self'
op|'.'
name|'xheaders'
op|'='
name|'xheaders'
newline|'\n'
name|'self'
op|'.'
name|'ssl_options'
op|'='
name|'ssl_options'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_started'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|listen
dedent|''
name|'def'
name|'listen'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'address'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Binds to the given port and starts the server in a single process.\n\n        This method is a shortcut for:\n\n            server.bind(port, address)\n            server.start(1)\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'bind'
op|'('
name|'port'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|bind
dedent|''
name|'def'
name|'bind'
op|'('
name|'self'
op|','
name|'port'
op|','
name|'address'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Binds this server to the given port on the given IP address.\n\n        To start the server, call start(). If you want to run this server\n        in a single process, you can call listen() as a shortcut to the\n        sequence of bind() and start() calls.\n        """'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_socket'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_STREAM'
op|','
number|'0'
op|')'
newline|'\n'
name|'flags'
op|'='
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'fcntl'
op|'.'
name|'F_GETFD'
op|')'
newline|'\n'
name|'flags'
op|'|='
name|'fcntl'
op|'.'
name|'FD_CLOEXEC'
newline|'\n'
name|'fcntl'
op|'.'
name|'fcntl'
op|'('
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'fcntl'
op|'.'
name|'F_SETFD'
op|','
name|'flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'setsockopt'
op|'('
name|'socket'
op|'.'
name|'SOL_SOCKET'
op|','
name|'socket'
op|'.'
name|'SO_REUSEADDR'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'setblocking'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'bind'
op|'('
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'listen'
op|'('
number|'128'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'num_processes'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Starts this server in the IOLoop.\n\n        By default, we detect the number of cores available on this machine\n        and fork that number of child processes. If num_processes is given, we\n        fork that specific number of sub-processes.\n\n        If num_processes is 1 or we detect only 1 CPU core, we run the server\n        in this process and do not fork any additional child process.\n\n        Since we run use processes and not threads, there is no shared memory\n        between any server code.\n        """'
newline|'\n'
name|'assert'
name|'not'
name|'self'
op|'.'
name|'_started'
newline|'\n'
name|'self'
op|'.'
name|'_started'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'num_processes'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Use sysconf to detect the number of CPUs (cores)'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'num_processes'
op|'='
name|'os'
op|'.'
name|'sysconf'
op|'('
string|'"SC_NPROCESSORS_CONF"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Could not get num processors from sysconf; "'
nl|'\n'
string|'"running with one process"'
op|')'
newline|'\n'
name|'num_processes'
op|'='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'num_processes'
op|'>'
number|'1'
name|'and'
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'initialized'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Cannot run in multiple processes: IOLoop instance "'
nl|'\n'
string|'"has already been initialized. You cannot call "'
nl|'\n'
string|'"IOLoop.instance() before calling start()"'
op|')'
newline|'\n'
name|'num_processes'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'num_processes'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'info'
op|'('
string|'"Pre-forking %d server processes"'
op|','
name|'num_processes'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_processes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'os'
op|'.'
name|'fork'
op|'('
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'io_loop'
op|'='
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'add_handler'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'_handle_events'
op|','
nl|'\n'
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'READ'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'os'
op|'.'
name|'waitpid'
op|'('
op|'-'
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'io_loop'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'io_loop'
op|'='
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'add_handler'
op|'('
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_handle_events'
op|','
nl|'\n'
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'READ'
op|')'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'io_loop'
op|'.'
name|'remove_handler'
op|'('
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'fileno'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_events
dedent|''
name|'def'
name|'_handle_events'
op|'('
name|'self'
op|','
name|'fd'
op|','
name|'events'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'connection'
op|','
name|'address'
op|'='
name|'self'
op|'.'
name|'_socket'
op|'.'
name|'accept'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'['
number|'0'
op|']'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EWOULDBLOCK'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'ssl_options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'assert'
name|'ssl'
op|','
string|'"Python 2.6+ and OpenSSL required for SSL"'
newline|'\n'
name|'connection'
op|'='
name|'ssl'
op|'.'
name|'wrap_socket'
op|'('
nl|'\n'
name|'connection'
op|','
name|'server_side'
op|'='
name|'True'
op|','
op|'**'
name|'self'
op|'.'
name|'ssl_options'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'stream'
op|'='
name|'iostream'
op|'.'
name|'IOStream'
op|'('
name|'connection'
op|','
name|'io_loop'
op|'='
name|'self'
op|'.'
name|'io_loop'
op|')'
newline|'\n'
name|'HTTPConnection'
op|'('
name|'stream'
op|','
name|'address'
op|','
name|'self'
op|'.'
name|'request_callback'
op|','
nl|'\n'
name|'self'
op|'.'
name|'no_keep_alive'
op|','
name|'self'
op|'.'
name|'xheaders'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'error'
op|'('
string|'"Error in connection callback"'
op|','
name|'exc_info'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPConnection
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Handles a connection to an HTTP client, executing HTTP requests.\n\n    We parse HTTP headers and bodies, and execute the request callback\n    until the HTTP conection is closed.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'address'
op|','
name|'request_callback'
op|','
name|'no_keep_alive'
op|'='
name|'False'
op|','
nl|'\n'
name|'xheaders'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
name|'self'
op|'.'
name|'address'
op|'='
name|'address'
newline|'\n'
name|'self'
op|'.'
name|'request_callback'
op|'='
name|'request_callback'
newline|'\n'
name|'self'
op|'.'
name|'no_keep_alive'
op|'='
name|'no_keep_alive'
newline|'\n'
name|'self'
op|'.'
name|'xheaders'
op|'='
name|'xheaders'
newline|'\n'
name|'self'
op|'.'
name|'_request'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_request_finished'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'read_until'
op|'('
string|'"\\r\\n\\r\\n"'
op|','
name|'self'
op|'.'
name|'_on_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'_request'
op|','
string|'"Request closed"'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'closed'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
name|'chunk'
op|','
name|'self'
op|'.'
name|'_on_write_complete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'_request'
op|','
string|'"Request closed"'
newline|'\n'
name|'self'
op|'.'
name|'_request_finished'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writing'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_finish_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_write_complete
dedent|''
dedent|''
name|'def'
name|'_on_write_complete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_request_finished'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_finish_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_finish_request
dedent|''
dedent|''
name|'def'
name|'_finish_request'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'no_keep_alive'
op|':'
newline|'\n'
indent|'            '
name|'disconnect'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'connection_header'
op|'='
name|'self'
op|'.'
name|'_request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Connection"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_request'
op|'.'
name|'supports_http_1_1'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'disconnect'
op|'='
name|'connection_header'
op|'=='
string|'"close"'
newline|'\n'
dedent|''
name|'elif'
op|'('
string|'"Content-Length"'
name|'in'
name|'self'
op|'.'
name|'_request'
op|'.'
name|'headers'
nl|'\n'
name|'or'
name|'self'
op|'.'
name|'_request'
op|'.'
name|'method'
name|'in'
op|'('
string|'"HEAD"'
op|','
string|'"GET"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'disconnect'
op|'='
name|'connection_header'
op|'!='
string|'"Keep-Alive"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'disconnect'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'_request'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_request_finished'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'disconnect'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stream'
op|'.'
name|'read_until'
op|'('
string|'"\\r\\n\\r\\n"'
op|','
name|'self'
op|'.'
name|'_on_headers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_headers
dedent|''
name|'def'
name|'_on_headers'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'eol'
op|'='
name|'data'
op|'.'
name|'find'
op|'('
string|'"\\r\\n"'
op|')'
newline|'\n'
name|'start_line'
op|'='
name|'data'
op|'['
op|':'
name|'eol'
op|']'
newline|'\n'
name|'method'
op|','
name|'uri'
op|','
name|'version'
op|'='
name|'start_line'
op|'.'
name|'split'
op|'('
string|'" "'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'version'
op|'.'
name|'startswith'
op|'('
string|'"HTTP/"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Malformed HTTP version in HTTP Request-Line"'
op|')'
newline|'\n'
dedent|''
name|'headers'
op|'='
name|'HTTPHeaders'
op|'.'
name|'parse'
op|'('
name|'data'
op|'['
name|'eol'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_request'
op|'='
name|'HTTPRequest'
op|'('
nl|'\n'
name|'connection'
op|'='
name|'self'
op|','
name|'method'
op|'='
name|'method'
op|','
name|'uri'
op|'='
name|'uri'
op|','
name|'version'
op|'='
name|'version'
op|','
nl|'\n'
name|'headers'
op|'='
name|'headers'
op|','
name|'remote_ip'
op|'='
name|'self'
op|'.'
name|'address'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'content_length'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Content-Length"'
op|')'
newline|'\n'
name|'if'
name|'content_length'
op|':'
newline|'\n'
indent|'            '
name|'content_length'
op|'='
name|'int'
op|'('
name|'content_length'
op|')'
newline|'\n'
name|'if'
name|'content_length'
op|'>'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'max_buffer_size'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
string|'"Content-Length too long"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Expect"'
op|')'
op|'=='
string|'"100-continue"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"HTTP/1.1 100 (Continue)\\r\\n\\r\\n"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stream'
op|'.'
name|'read_bytes'
op|'('
name|'content_length'
op|','
name|'self'
op|'.'
name|'_on_request_body'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'request_callback'
op|'('
name|'self'
op|'.'
name|'_request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_request_body
dedent|''
name|'def'
name|'_on_request_body'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_request'
op|'.'
name|'body'
op|'='
name|'data'
newline|'\n'
name|'content_type'
op|'='
name|'self'
op|'.'
name|'_request'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Content-Type"'
op|','
string|'""'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_request'
op|'.'
name|'method'
op|'=='
string|'"POST"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'content_type'
op|'.'
name|'startswith'
op|'('
string|'"application/x-www-form-urlencoded"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'arguments'
op|'='
name|'cgi'
op|'.'
name|'parse_qs'
op|'('
name|'self'
op|'.'
name|'_request'
op|'.'
name|'body'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'values'
op|'='
op|'['
name|'v'
name|'for'
name|'v'
name|'in'
name|'values'
name|'if'
name|'v'
op|']'
newline|'\n'
name|'if'
name|'values'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_request'
op|'.'
name|'arguments'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'extend'
op|'('
nl|'\n'
name|'values'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'elif'
name|'content_type'
op|'.'
name|'startswith'
op|'('
string|'"multipart/form-data"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'boundary'
op|'='
name|'content_type'
op|'['
number|'30'
op|':'
op|']'
newline|'\n'
name|'if'
name|'boundary'
op|':'
name|'self'
op|'.'
name|'_parse_mime_body'
op|'('
name|'boundary'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'request_callback'
op|'('
name|'self'
op|'.'
name|'_request'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_mime_body
dedent|''
name|'def'
name|'_parse_mime_body'
op|'('
name|'self'
op|','
name|'boundary'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'data'
op|'.'
name|'endswith'
op|'('
string|'"\\r\\n"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'footer_length'
op|'='
name|'len'
op|'('
name|'boundary'
op|')'
op|'+'
number|'6'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'footer_length'
op|'='
name|'len'
op|'('
name|'boundary'
op|')'
op|'+'
number|'4'
newline|'\n'
dedent|''
name|'parts'
op|'='
name|'data'
op|'['
op|':'
op|'-'
name|'footer_length'
op|']'
op|'.'
name|'split'
op|'('
string|'"--"'
op|'+'
name|'boundary'
op|'+'
string|'"\\r\\n"'
op|')'
newline|'\n'
name|'for'
name|'part'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'part'
op|':'
name|'continue'
newline|'\n'
name|'eoh'
op|'='
name|'part'
op|'.'
name|'find'
op|'('
string|'"\\r\\n\\r\\n"'
op|')'
newline|'\n'
name|'if'
name|'eoh'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"multipart/form-data missing headers"'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'headers'
op|'='
name|'HTTPHeaders'
op|'.'
name|'parse'
op|'('
name|'part'
op|'['
op|':'
name|'eoh'
op|']'
op|')'
newline|'\n'
name|'name_header'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Content-Disposition"'
op|','
string|'""'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'name_header'
op|'.'
name|'startswith'
op|'('
string|'"form-data;"'
op|')'
name|'or'
name|'not'
name|'part'
op|'.'
name|'endswith'
op|'('
string|'"\\r\\n"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Invalid multipart/form-data"'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'value'
op|'='
name|'part'
op|'['
name|'eoh'
op|'+'
number|'4'
op|':'
op|'-'
number|'2'
op|']'
newline|'\n'
name|'name_values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name_part'
name|'in'
name|'name_header'
op|'['
number|'10'
op|':'
op|']'
op|'.'
name|'split'
op|'('
string|'";"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'name_value'
op|'='
name|'name_part'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|'"="'
op|','
number|'1'
op|')'
newline|'\n'
name|'name_values'
op|'['
name|'name'
op|']'
op|'='
name|'name_value'
op|'.'
name|'strip'
op|'('
string|'\'"\''
op|')'
op|'.'
name|'decode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'name_values'
op|'.'
name|'get'
op|'('
string|'"name"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"multipart/form-data value missing name"'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'name_values'
op|'['
string|'"name"'
op|']'
newline|'\n'
name|'if'
name|'name_values'
op|'.'
name|'get'
op|'('
string|'"filename"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ctype'
op|'='
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Content-Type"'
op|','
string|'"application/unknown"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_request'
op|'.'
name|'files'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
nl|'\n'
name|'filename'
op|'='
name|'name_values'
op|'['
string|'"filename"'
op|']'
op|','
name|'body'
op|'='
name|'value'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'ctype'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_request'
op|'.'
name|'arguments'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPRequest
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'HTTPRequest'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A single HTTP request.\n\n    GET/POST arguments are available in the arguments property, which\n    maps arguments names to lists of values (to support multiple values\n    for individual names). Names and values are both unicode always.\n\n    File uploads are available in the files property, which maps file\n    names to list of files. Each file is a dictionary of the form\n    {"filename":..., "content_type":..., "body":...}. The content_type\n    comes from the provided HTTP header and should not be trusted\n    outright given that it can be easily forged.\n\n    An HTTP request is attached to a single HTTP connection, which can\n    be accessed through the "connection" attribute. Since connections\n    are typically kept open in HTTP/1.1, multiple requests can be handled\n    sequentially on a single connection.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'uri'
op|','
name|'version'
op|'='
string|'"HTTP/1.0"'
op|','
name|'headers'
op|'='
name|'None'
op|','
nl|'\n'
name|'body'
op|'='
name|'None'
op|','
name|'remote_ip'
op|'='
name|'None'
op|','
name|'protocol'
op|'='
name|'None'
op|','
name|'host'
op|'='
name|'None'
op|','
nl|'\n'
name|'files'
op|'='
name|'None'
op|','
name|'connection'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'uri'
op|'='
name|'uri'
newline|'\n'
name|'self'
op|'.'
name|'version'
op|'='
name|'version'
newline|'\n'
name|'self'
op|'.'
name|'headers'
op|'='
name|'headers'
name|'or'
name|'HTTPHeaders'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'body'
name|'or'
string|'""'
newline|'\n'
name|'if'
name|'connection'
name|'and'
name|'connection'
op|'.'
name|'xheaders'
op|':'
newline|'\n'
comment|'# Squid uses X-Forwarded-For, others use X-Real-Ip'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'remote_ip'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
nl|'\n'
string|'"X-Real-Ip"'
op|','
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"X-Forwarded-For"'
op|','
name|'remote_ip'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"X-Scheme"'
op|','
name|'protocol'
op|')'
name|'or'
string|'"http"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remote_ip'
op|'='
name|'remote_ip'
newline|'\n'
name|'self'
op|'.'
name|'protocol'
op|'='
name|'protocol'
name|'or'
string|'"http"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
name|'or'
name|'self'
op|'.'
name|'headers'
op|'.'
name|'get'
op|'('
string|'"Host"'
op|')'
name|'or'
string|'"127.0.0.1"'
newline|'\n'
name|'self'
op|'.'
name|'files'
op|'='
name|'files'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'_start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_finish_time'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|','
name|'query'
op|','
name|'fragment'
op|'='
name|'urlparse'
op|'.'
name|'urlsplit'
op|'('
name|'uri'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'query'
op|'='
name|'query'
newline|'\n'
name|'arguments'
op|'='
name|'cgi'
op|'.'
name|'parse_qs'
op|'('
name|'query'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'arguments'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'values'
op|'='
op|'['
name|'v'
name|'for'
name|'v'
name|'in'
name|'values'
name|'if'
name|'v'
op|']'
newline|'\n'
name|'if'
name|'values'
op|':'
name|'self'
op|'.'
name|'arguments'
op|'['
name|'name'
op|']'
op|'='
name|'values'
newline|'\n'
nl|'\n'
DECL|member|supports_http_1_1
dedent|''
dedent|''
name|'def'
name|'supports_http_1_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns True if this request supports HTTP/1.1 semantics"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'version'
op|'=='
string|'"HTTP/1.1"'
newline|'\n'
nl|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'chunk'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Writes the given chunk to the response stream."""'
newline|'\n'
name|'assert'
name|'isinstance'
op|'('
name|'chunk'
op|','
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'write'
op|'('
name|'chunk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|finish
dedent|''
name|'def'
name|'finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Finishes this HTTP request on the open connection."""'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'finish'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_finish_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|full_url
dedent|''
name|'def'
name|'full_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reconstructs the full URL for this request."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'protocol'
op|'+'
string|'"://"'
op|'+'
name|'self'
op|'.'
name|'host'
op|'+'
name|'self'
op|'.'
name|'uri'
newline|'\n'
nl|'\n'
DECL|member|request_time
dedent|''
name|'def'
name|'request_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the amount of time it took for this request to execute."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_finish_time'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'_start_time'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_finish_time'
op|'-'
name|'self'
op|'.'
name|'_start_time'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
op|'('
string|'"protocol"'
op|','
string|'"host"'
op|','
string|'"method"'
op|','
string|'"uri"'
op|','
string|'"version"'
op|','
string|'"remote_ip"'
op|','
nl|'\n'
string|'"remote_ip"'
op|','
string|'"body"'
op|')'
newline|'\n'
name|'args'
op|'='
string|'", "'
op|'.'
name|'join'
op|'('
op|'['
string|'"%s=%r"'
op|'%'
op|'('
name|'n'
op|','
name|'getattr'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|')'
name|'for'
name|'n'
name|'in'
name|'attrs'
op|']'
op|')'
newline|'\n'
name|'return'
string|'"%s(%s, headers=%s)"'
op|'%'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'args'
op|','
name|'dict'
op|'('
name|'self'
op|'.'
name|'headers'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HTTPHeaders
dedent|''
dedent|''
name|'class'
name|'HTTPHeaders'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A dictionary that maintains Http-Header-Case for all keys."""'
newline|'\n'
DECL|member|__setitem__
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dict'
op|'.'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_normalize_name'
op|'('
name|'name'
op|')'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'dict'
op|'.'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'self'
op|'.'
name|'_normalize_name'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_normalize_name
dedent|''
name|'def'
name|'_normalize_name'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"-"'
op|'.'
name|'join'
op|'('
op|'['
name|'w'
op|'.'
name|'capitalize'
op|'('
op|')'
name|'for'
name|'w'
name|'in'
name|'name'
op|'.'
name|'split'
op|'('
string|'"-"'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|parse
name|'def'
name|'parse'
op|'('
name|'cls'
op|','
name|'headers_string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'headers'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'headers_string'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|','
name|'value'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|'": "'
op|','
number|'1'
op|')'
newline|'\n'
name|'headers'
op|'['
name|'name'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'headers'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

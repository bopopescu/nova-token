begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""A module to automatically restart the server when a module is modified.\n\nThis module depends on IOLoop, so it will not work in WSGI applications\nand Google AppEngine.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'ioloop'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
DECL|variable|_log
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'tornado.autoreload'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|start
name|'def'
name|'start'
op|'('
name|'io_loop'
op|'='
name|'None'
op|','
name|'check_time'
op|'='
number|'500'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Restarts the process automatically when a module is modified.\n\n    We run on the I/O loop, and restarting is a destructive operation,\n    so will terminate any pending requests.\n    """'
newline|'\n'
name|'io_loop'
op|'='
name|'io_loop'
name|'or'
name|'ioloop'
op|'.'
name|'IOLoop'
op|'.'
name|'instance'
op|'('
op|')'
newline|'\n'
name|'modify_times'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'callback'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'_reload_on_update'
op|','
name|'io_loop'
op|','
name|'modify_times'
op|')'
newline|'\n'
name|'scheduler'
op|'='
name|'ioloop'
op|'.'
name|'PeriodicCallback'
op|'('
name|'callback'
op|','
name|'check_time'
op|','
name|'io_loop'
op|'='
name|'io_loop'
op|')'
newline|'\n'
name|'scheduler'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_reload_attempted
dedent|''
name|'_reload_attempted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|_reload_on_update
name|'def'
name|'_reload_on_update'
op|'('
name|'io_loop'
op|','
name|'modify_times'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_reload_attempted'
newline|'\n'
name|'if'
name|'_reload_attempted'
op|':'
newline|'\n'
comment|"# We already tried to reload and it didn't work, so don't try again."
nl|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'for'
name|'module'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Some modules play games with sys.modules (e.g. email/__init__.py'
nl|'\n'
comment|'# in the standard library), and occasionally this can cause strange'
nl|'\n'
comment|"# failures in getattr.  Just ignore anything that's not an ordinary"
nl|'\n'
comment|'# module.'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'types'
op|'.'
name|'ModuleType'
op|')'
op|':'
name|'continue'
newline|'\n'
name|'path'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
string|'"__file__"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'path'
op|':'
name|'continue'
newline|'\n'
name|'if'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'".pyc"'
op|')'
name|'or'
name|'path'
op|'.'
name|'endswith'
op|'('
string|'".pyo"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'path'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'modified'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
op|'.'
name|'st_mtime'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'path'
name|'not'
name|'in'
name|'modify_times'
op|':'
newline|'\n'
indent|'            '
name|'modify_times'
op|'['
name|'path'
op|']'
op|'='
name|'modified'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'modify_times'
op|'['
name|'path'
op|']'
op|'!='
name|'modified'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'info'
op|'('
string|'"%s modified; restarting server"'
op|','
name|'path'
op|')'
newline|'\n'
name|'_reload_attempted'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'fd'
name|'in'
name|'io_loop'
op|'.'
name|'_handlers'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'execv'
op|'('
name|'sys'
op|'.'
name|'executable'
op|','
op|'['
name|'sys'
op|'.'
name|'executable'
op|']'
op|'+'
name|'sys'
op|'.'
name|'argv'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Mac OS X versions prior to 10.6 do not support execv in'
nl|'\n'
comment|'# a process that contains multiple threads.  Instead of'
nl|'\n'
comment|'# re-executing in the current process, start a new one'
nl|'\n'
comment|"# and cause the current process to exit.  This isn't"
nl|'\n'
comment|'# ideal since the new process is detached from the parent'
nl|'\n'
comment|'# terminal and thus cannot easily be killed with ctrl-C,'
nl|'\n'
comment|"# but it's better than not being able to autoreload at"
nl|'\n'
comment|'# all.'
nl|'\n'
comment|'# Unfortunately the errno returned in this case does not'
nl|'\n'
comment|"# appear to be consistent, so we can't easily check for"
nl|'\n'
comment|'# this error specifically.'
nl|'\n'
indent|'                '
name|'os'
op|'.'
name|'spawnv'
op|'('
name|'os'
op|'.'
name|'P_NOWAIT'
op|','
name|'sys'
op|'.'
name|'executable'
op|','
nl|'\n'
op|'['
name|'sys'
op|'.'
name|'executable'
op|']'
op|'+'
name|'sys'
op|'.'
name|'argv'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2009 Facebook'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Implementations of various third-party authentication schemes.\n\nAll the classes in this file are class Mixins designed to be used with\nweb.py RequestHandler classes. The primary methods for each service are\nauthenticate_redirect(), authorize_redirect(), and get_authenticated_user().\nThe former should be called to redirect the user to, e.g., the OpenID\nauthentication page on the third party service, and the latter should\nbe called upon return to get the user data from the data returned by\nthe third party service.\n\nThey all take slightly different arguments due to the fact all these\nservices implement authentication and authorization slightly differently.\nSee the individual service classes below for complete documentation.\n\nExample usage for Google OpenID:\n\nclass GoogleHandler(tornado.web.RequestHandler, tornado.auth.GoogleMixin):\n    @tornado.web.asynchronous\n    def get(self):\n        if self.get_argument("openid.mode", None):\n            self.get_authenticated_user(self.async_callback(self._on_auth))\n            return\n        self.authenticate_redirect()\n    \n    def _on_auth(self, user):\n        if not user:\n            raise tornado.web.HTTPError(500, "Google auth failed")\n        # Save the user with, e.g., set_secure_cookie()\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'binascii'
newline|'\n'
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'httpclient'
newline|'\n'
name|'import'
name|'escape'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
DECL|variable|_log
name|'_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"tornado.auth"'
op|')'
newline|'\n'
nl|'\n'
DECL|class|OpenIdMixin
name|'class'
name|'OpenIdMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Abstract implementation of OpenID and Attribute Exchange.\n\n    See GoogleMixin below for example implementations.\n    """'
newline|'\n'
DECL|member|authenticate_redirect
name|'def'
name|'authenticate_redirect'
op|'('
name|'self'
op|','
name|'callback_uri'
op|'='
name|'None'
op|','
nl|'\n'
name|'ax_attrs'
op|'='
op|'['
string|'"name"'
op|','
string|'"email"'
op|','
string|'"language"'
op|','
string|'"username"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the authentication URL for this service.\n\n        After authentication, the service will redirect back to the given\n        callback URI.\n\n        We request the given attributes for the authenticated user by\n        default (name, email, language, and username). If you don\'t need\n        all those attributes for your app, you can request fewer with\n        the ax_attrs keyword argument.\n        """'
newline|'\n'
name|'callback_uri'
op|'='
name|'callback_uri'
name|'or'
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'_openid_args'
op|'('
name|'callback_uri'
op|','
name|'ax_attrs'
op|'='
name|'ax_attrs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'redirect'
op|'('
name|'self'
op|'.'
name|'_OPENID_ENDPOINT'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_authenticated_user
dedent|''
name|'def'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetches the authenticated user data upon redirect.\n\n        This method should be called by the handler that receives the\n        redirect from the authenticate_redirect() or authorize_redirect()\n        methods.\n        """'
newline|'\n'
comment|'# Verify the OpenID response via direct request to the OP'
nl|'\n'
name|'args'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'v'
op|'['
op|'-'
number|'1'
op|']'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'args'
op|'['
string|'"openid.mode"'
op|']'
op|'='
string|'u"check_authentication"'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'_OPENID_ENDPOINT'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_authentication_verified'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_openid_args
dedent|''
name|'def'
name|'_openid_args'
op|'('
name|'self'
op|','
name|'callback_uri'
op|','
name|'ax_attrs'
op|'='
op|'['
op|']'
op|','
name|'oauth_scope'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'url'
op|'='
name|'urlparse'
op|'.'
name|'urljoin'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'full_url'
op|'('
op|')'
op|','
name|'callback_uri'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
nl|'\n'
string|'"openid.ns"'
op|':'
string|'"http://specs.openid.net/auth/2.0"'
op|','
nl|'\n'
string|'"openid.claimed_id"'
op|':'
nl|'\n'
string|'"http://specs.openid.net/auth/2.0/identifier_select"'
op|','
nl|'\n'
string|'"openid.identity"'
op|':'
nl|'\n'
string|'"http://specs.openid.net/auth/2.0/identifier_select"'
op|','
nl|'\n'
string|'"openid.return_to"'
op|':'
name|'url'
op|','
nl|'\n'
string|'"openid.realm"'
op|':'
string|'"http://"'
op|'+'
name|'self'
op|'.'
name|'request'
op|'.'
name|'host'
op|'+'
string|'"/"'
op|','
nl|'\n'
string|'"openid.mode"'
op|':'
string|'"checkid_setup"'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'ax_attrs'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|'"openid.ns.ax"'
op|':'
string|'"http://openid.net/srv/ax/1.0"'
op|','
nl|'\n'
string|'"openid.ax.mode"'
op|':'
string|'"fetch_request"'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'ax_attrs'
op|'='
name|'set'
op|'('
name|'ax_attrs'
op|')'
newline|'\n'
name|'required'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|'"name"'
name|'in'
name|'ax_attrs'
op|':'
newline|'\n'
indent|'                '
name|'ax_attrs'
op|'-='
name|'set'
op|'('
op|'['
string|'"name"'
op|','
string|'"firstname"'
op|','
string|'"fullname"'
op|','
string|'"lastname"'
op|']'
op|')'
newline|'\n'
name|'required'
op|'+='
op|'['
string|'"firstname"'
op|','
string|'"fullname"'
op|','
string|'"lastname"'
op|']'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|'"openid.ax.type.firstname"'
op|':'
nl|'\n'
string|'"http://axschema.org/namePerson/first"'
op|','
nl|'\n'
string|'"openid.ax.type.fullname"'
op|':'
nl|'\n'
string|'"http://axschema.org/namePerson"'
op|','
nl|'\n'
string|'"openid.ax.type.lastname"'
op|':'
nl|'\n'
string|'"http://axschema.org/namePerson/last"'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'known_attrs'
op|'='
op|'{'
nl|'\n'
string|'"email"'
op|':'
string|'"http://axschema.org/contact/email"'
op|','
nl|'\n'
string|'"language"'
op|':'
string|'"http://axschema.org/pref/language"'
op|','
nl|'\n'
string|'"username"'
op|':'
string|'"http://axschema.org/namePerson/friendly"'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'ax_attrs'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'['
string|'"openid.ax.type."'
op|'+'
name|'name'
op|']'
op|'='
name|'known_attrs'
op|'['
name|'name'
op|']'
newline|'\n'
name|'required'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'['
string|'"openid.ax.required"'
op|']'
op|'='
string|'","'
op|'.'
name|'join'
op|'('
name|'required'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'oauth_scope'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|'"openid.ns.oauth"'
op|':'
nl|'\n'
string|'"http://specs.openid.net/extensions/oauth/1.0"'
op|','
nl|'\n'
string|'"openid.oauth.consumer"'
op|':'
name|'self'
op|'.'
name|'request'
op|'.'
name|'host'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|'"openid.oauth.scope"'
op|':'
name|'oauth_scope'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'args'
newline|'\n'
nl|'\n'
DECL|member|_on_authentication_verified
dedent|''
name|'def'
name|'_on_authentication_verified'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
name|'or'
string|'u"is_valid:true"'
name|'not'
name|'in'
name|'response'
op|'.'
name|'body'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Invalid OpenID response: %s"'
op|','
name|'response'
op|'.'
name|'error'
name|'or'
nl|'\n'
name|'response'
op|'.'
name|'body'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'# Make sure we got back at least an email from attribute exchange'
nl|'\n'
dedent|''
name|'ax_ns'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'"openid.ns."'
op|')'
name|'and'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'u"http://openid.net/srv/ax/1.0"'
op|':'
newline|'\n'
indent|'                '
name|'ax_ns'
op|'='
name|'name'
op|'['
number|'10'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
DECL|function|get_ax_arg
dedent|''
dedent|''
name|'def'
name|'get_ax_arg'
op|'('
name|'uri'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'ax_ns'
op|':'
name|'return'
string|'u""'
newline|'\n'
name|'prefix'
op|'='
string|'"openid."'
op|'+'
name|'ax_ns'
op|'+'
string|'".type."'
newline|'\n'
name|'ax_name'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'uri'
name|'and'
name|'name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'part'
op|'='
name|'name'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
name|'ax_name'
op|'='
string|'"openid."'
op|'+'
name|'ax_ns'
op|'+'
string|'".value."'
op|'+'
name|'part'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'ax_name'
op|':'
name|'return'
string|'u""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'get_argument'
op|'('
name|'ax_name'
op|','
string|'u""'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'email'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/contact/email"'
op|')'
newline|'\n'
name|'name'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/namePerson"'
op|')'
newline|'\n'
name|'first_name'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/namePerson/first"'
op|')'
newline|'\n'
name|'last_name'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/namePerson/last"'
op|')'
newline|'\n'
name|'username'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/namePerson/friendly"'
op|')'
newline|'\n'
name|'locale'
op|'='
name|'get_ax_arg'
op|'('
string|'"http://axschema.org/pref/language"'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'user'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'name_parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'first_name'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"first_name"'
op|']'
op|'='
name|'first_name'
newline|'\n'
name|'name_parts'
op|'.'
name|'append'
op|'('
name|'first_name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'last_name'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"last_name"'
op|']'
op|'='
name|'last_name'
newline|'\n'
name|'name_parts'
op|'.'
name|'append'
op|'('
name|'last_name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"name"'
op|']'
op|'='
name|'name'
newline|'\n'
dedent|''
name|'elif'
name|'name_parts'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"name"'
op|']'
op|'='
string|'u" "'
op|'.'
name|'join'
op|'('
name|'name_parts'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'email'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"name"'
op|']'
op|'='
name|'email'
op|'.'
name|'split'
op|'('
string|'"@"'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'email'
op|':'
name|'user'
op|'['
string|'"email"'
op|']'
op|'='
name|'email'
newline|'\n'
name|'if'
name|'locale'
op|':'
name|'user'
op|'['
string|'"locale"'
op|']'
op|'='
name|'locale'
newline|'\n'
name|'if'
name|'username'
op|':'
name|'user'
op|'['
string|'"username"'
op|']'
op|'='
name|'username'
newline|'\n'
name|'callback'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OAuthMixin
dedent|''
dedent|''
name|'class'
name|'OAuthMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Abstract implementation of OAuth.\n\n    See TwitterMixin and FriendFeedMixin below for example implementations.\n    """'
newline|'\n'
DECL|member|authorize_redirect
name|'def'
name|'authorize_redirect'
op|'('
name|'self'
op|','
name|'callback_uri'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Redirects the user to obtain OAuth authorization for this service.\n\n        Twitter and FriendFeed both require that you register a Callback\n        URL with your application. You should call this method to log the\n        user in, and then call get_authenticated_user() in the handler\n        you registered as your Callback URL to complete the authorization\n        process.\n\n        This method sets a cookie called _oauth_request_token which is\n        subsequently used (and cleared) in get_authenticated_user for\n        security purposes.\n        """'
newline|'\n'
name|'if'
name|'callback_uri'
name|'and'
name|'getattr'
op|'('
name|'self'
op|','
string|'"_OAUTH_NO_CALLBACKS"'
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"This service does not support oauth_callback"'
op|')'
newline|'\n'
dedent|''
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'self'
op|'.'
name|'_oauth_request_token_url'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_request_token'
op|','
name|'self'
op|'.'
name|'_OAUTH_AUTHORIZE_URL'
op|','
name|'callback_uri'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_authenticated_user
dedent|''
name|'def'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Gets the OAuth authorized user and access token on callback.\n\n        This method should be called from the handler for your registered\n        OAuth Callback URL to complete the registration process. We call\n        callback with the authenticated user, which in addition to standard\n        attributes like \'name\' includes the \'access_key\' attribute, which\n        contains the OAuth access you can use to make authorized requests\n        to this service on behalf of the user.\n        """'
newline|'\n'
name|'request_key'
op|'='
name|'self'
op|'.'
name|'get_argument'
op|'('
string|'"oauth_token"'
op|')'
newline|'\n'
name|'request_cookie'
op|'='
name|'self'
op|'.'
name|'get_cookie'
op|'('
string|'"_oauth_request_token"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'request_cookie'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Missing OAuth request token cookie"'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'cookie_key'
op|','
name|'cookie_secret'
op|'='
name|'request_cookie'
op|'.'
name|'split'
op|'('
string|'"|"'
op|')'
newline|'\n'
name|'if'
name|'cookie_key'
op|'!='
name|'request_key'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Request token does not match cookie"'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'token'
op|'='
name|'dict'
op|'('
name|'key'
op|'='
name|'cookie_key'
op|','
name|'secret'
op|'='
name|'cookie_secret'
op|')'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'self'
op|'.'
name|'_oauth_access_token_url'
op|'('
name|'token'
op|')'
op|','
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_access_token'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_request_token_url
dedent|''
name|'def'
name|'_oauth_request_token_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'consumer_token'
op|'='
name|'self'
op|'.'
name|'_oauth_consumer_token'
op|'('
op|')'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'_OAUTH_REQUEST_TOKEN_URL'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'oauth_consumer_key'
op|'='
name|'consumer_token'
op|'['
string|'"key"'
op|']'
op|','
nl|'\n'
name|'oauth_signature_method'
op|'='
string|'"HMAC-SHA1"'
op|','
nl|'\n'
name|'oauth_timestamp'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'oauth_nonce'
op|'='
name|'binascii'
op|'.'
name|'b2a_hex'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'bytes'
op|')'
op|','
nl|'\n'
name|'oauth_version'
op|'='
string|'"1.0"'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'_oauth_signature'
op|'('
name|'consumer_token'
op|','
string|'"GET"'
op|','
name|'url'
op|','
name|'args'
op|')'
newline|'\n'
name|'args'
op|'['
string|'"oauth_signature"'
op|']'
op|'='
name|'signature'
newline|'\n'
name|'return'
name|'url'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_request_token
dedent|''
name|'def'
name|'_on_request_token'
op|'('
name|'self'
op|','
name|'authorize_url'
op|','
name|'callback_uri'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Could not get request token"'
op|')'
newline|'\n'
dedent|''
name|'request_token'
op|'='
name|'_oauth_parse_response'
op|'('
name|'response'
op|'.'
name|'body'
op|')'
newline|'\n'
name|'data'
op|'='
string|'"|"'
op|'.'
name|'join'
op|'('
op|'['
name|'request_token'
op|'['
string|'"key"'
op|']'
op|','
name|'request_token'
op|'['
string|'"secret"'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'set_cookie'
op|'('
string|'"_oauth_request_token"'
op|','
name|'data'
op|')'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
name|'oauth_token'
op|'='
name|'request_token'
op|'['
string|'"key"'
op|']'
op|')'
newline|'\n'
name|'if'
name|'callback_uri'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|'"oauth_callback"'
op|']'
op|'='
name|'urlparse'
op|'.'
name|'urljoin'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'full_url'
op|'('
op|')'
op|','
name|'callback_uri'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'redirect'
op|'('
name|'authorize_url'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_access_token_url
dedent|''
name|'def'
name|'_oauth_access_token_url'
op|'('
name|'self'
op|','
name|'request_token'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'consumer_token'
op|'='
name|'self'
op|'.'
name|'_oauth_consumer_token'
op|'('
op|')'
newline|'\n'
name|'url'
op|'='
name|'self'
op|'.'
name|'_OAUTH_ACCESS_TOKEN_URL'
newline|'\n'
name|'args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'oauth_consumer_key'
op|'='
name|'consumer_token'
op|'['
string|'"key"'
op|']'
op|','
nl|'\n'
name|'oauth_token'
op|'='
name|'request_token'
op|'['
string|'"key"'
op|']'
op|','
nl|'\n'
name|'oauth_signature_method'
op|'='
string|'"HMAC-SHA1"'
op|','
nl|'\n'
name|'oauth_timestamp'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'oauth_nonce'
op|'='
name|'binascii'
op|'.'
name|'b2a_hex'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'bytes'
op|')'
op|','
nl|'\n'
name|'oauth_version'
op|'='
string|'"1.0"'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'_oauth_signature'
op|'('
name|'consumer_token'
op|','
string|'"GET"'
op|','
name|'url'
op|','
name|'args'
op|','
nl|'\n'
name|'request_token'
op|')'
newline|'\n'
name|'args'
op|'['
string|'"oauth_signature"'
op|']'
op|'='
name|'signature'
newline|'\n'
name|'return'
name|'url'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_access_token
dedent|''
name|'def'
name|'_on_access_token'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Could not fetch access token"'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'access_token'
op|'='
name|'_oauth_parse_response'
op|'('
name|'response'
op|'.'
name|'body'
op|')'
newline|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'_oauth_get_user'
op|'('
name|'access_token'
op|','
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_oauth_get_user'
op|','
name|'access_token'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_get_user
dedent|''
name|'def'
name|'_oauth_get_user'
op|'('
name|'self'
op|','
name|'access_token'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_oauth_get_user
dedent|''
name|'def'
name|'_on_oauth_get_user'
op|'('
name|'self'
op|','
name|'access_token'
op|','
name|'callback'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'user'
op|'['
string|'"access_token"'
op|']'
op|'='
name|'access_token'
newline|'\n'
name|'callback'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_request_parameters
dedent|''
name|'def'
name|'_oauth_request_parameters'
op|'('
name|'self'
op|','
name|'url'
op|','
name|'access_token'
op|','
name|'parameters'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'method'
op|'='
string|'"GET"'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the OAuth parameters as a dict for the given request.\n\n        parameters should include all POST arguments and query string arguments\n        that will be sent with the request.\n        """'
newline|'\n'
name|'consumer_token'
op|'='
name|'self'
op|'.'
name|'_oauth_consumer_token'
op|'('
op|')'
newline|'\n'
name|'base_args'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'oauth_consumer_key'
op|'='
name|'consumer_token'
op|'['
string|'"key"'
op|']'
op|','
nl|'\n'
name|'oauth_token'
op|'='
name|'access_token'
op|'['
string|'"key"'
op|']'
op|','
nl|'\n'
name|'oauth_signature_method'
op|'='
string|'"HMAC-SHA1"'
op|','
nl|'\n'
name|'oauth_timestamp'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
op|','
nl|'\n'
name|'oauth_nonce'
op|'='
name|'binascii'
op|'.'
name|'b2a_hex'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'bytes'
op|')'
op|','
nl|'\n'
name|'oauth_version'
op|'='
string|'"1.0"'
op|','
nl|'\n'
op|')'
newline|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'base_args'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'parameters'
op|')'
newline|'\n'
name|'signature'
op|'='
name|'_oauth_signature'
op|'('
name|'consumer_token'
op|','
name|'method'
op|','
name|'url'
op|','
name|'args'
op|','
nl|'\n'
name|'access_token'
op|')'
newline|'\n'
name|'base_args'
op|'['
string|'"oauth_signature"'
op|']'
op|'='
name|'signature'
newline|'\n'
name|'return'
name|'base_args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TwitterMixin
dedent|''
dedent|''
name|'class'
name|'TwitterMixin'
op|'('
name|'OAuthMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Twitter OAuth authentication.\n\n    To authenticate with Twitter, register your application with\n    Twitter at http://twitter.com/apps. Then copy your Consumer Key and\n    Consumer Secret to the application settings \'twitter_consumer_key\' and\n    \'twitter_consumer_secret\'. Use this Mixin on the handler for the URL\n    you registered as your application\'s Callback URL.\n\n    When your application is set up, you can use this Mixin like this\n    to authenticate the user with Twitter and get access to their stream:\n\n    class TwitterHandler(tornado.web.RequestHandler,\n                         tornado.auth.TwitterMixin):\n        @tornado.web.asynchronous\n        def get(self):\n            if self.get_argument("oauth_token", None):\n                self.get_authenticated_user(self.async_callback(self._on_auth))\n                return\n            self.authorize_redirect()\n    \n        def _on_auth(self, user):\n            if not user:\n                raise tornado.web.HTTPError(500, "Twitter auth failed")\n            # Save the user using, e.g., set_secure_cookie()\n\n    The user object returned by get_authenticated_user() includes the\n    attributes \'username\', \'name\', and all of the custom Twitter user\n    attributes describe at\n    http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-users%C2%A0show\n    in addition to \'access_token\'. You should save the access token with\n    the user; it is required to make requests on behalf of the user later\n    with twitter_request().\n    """'
newline|'\n'
DECL|variable|_OAUTH_REQUEST_TOKEN_URL
name|'_OAUTH_REQUEST_TOKEN_URL'
op|'='
string|'"http://twitter.com/oauth/request_token"'
newline|'\n'
DECL|variable|_OAUTH_ACCESS_TOKEN_URL
name|'_OAUTH_ACCESS_TOKEN_URL'
op|'='
string|'"http://twitter.com/oauth/access_token"'
newline|'\n'
DECL|variable|_OAUTH_AUTHORIZE_URL
name|'_OAUTH_AUTHORIZE_URL'
op|'='
string|'"http://twitter.com/oauth/authorize"'
newline|'\n'
DECL|variable|_OAUTH_AUTHENTICATE_URL
name|'_OAUTH_AUTHENTICATE_URL'
op|'='
string|'"http://twitter.com/oauth/authenticate"'
newline|'\n'
DECL|variable|_OAUTH_NO_CALLBACKS
name|'_OAUTH_NO_CALLBACKS'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|authenticate_redirect
name|'def'
name|'authenticate_redirect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Just like authorize_redirect(), but auto-redirects if authorized.\n\n        This is generally the right interface to use if you are using\n        Twitter for single-sign on.\n        """'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'self'
op|'.'
name|'_oauth_request_token_url'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_request_token'
op|','
name|'self'
op|'.'
name|'_OAUTH_AUTHENTICATE_URL'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|twitter_request
dedent|''
name|'def'
name|'twitter_request'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'callback'
op|','
name|'access_token'
op|'='
name|'None'
op|','
nl|'\n'
name|'post_args'
op|'='
name|'None'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetches the given API path, e.g., "/statuses/user_timeline/btaylor"\n\n        The path should not include the format (we automatically append\n        ".json" and parse the JSON output).\n\n        If the request is a POST, post_args should be provided. Query\n        string arguments should be given as keyword arguments.\n\n        All the Twitter methods are documented at\n        http://apiwiki.twitter.com/Twitter-API-Documentation.\n\n        Many methods require an OAuth access token which you can obtain\n        through authorize_redirect() and get_authenticated_user(). The\n        user returned through that process includes an \'access_token\'\n        attribute that can be used to make authenticated requests via\n        this method. Example usage:\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.TwitterMixin):\n            @tornado.web.authenticated\n            @tornado.web.asynchronous\n            def get(self):\n                self.twitter_request(\n                    "/statuses/update",\n                    post_args={"status": "Testing Tornado Web Server"},\n                    access_token=user["access_token"],\n                    callback=self.async_callback(self._on_post))\n\n            def _on_post(self, new_entry):\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    self.authorize_redirect()\n                    return\n                self.finish("Posted a message!")\n\n        """'
newline|'\n'
comment|'# Add the OAuth resource request signature if we have credentials'
nl|'\n'
name|'url'
op|'='
string|'"http://twitter.com"'
op|'+'
name|'path'
op|'+'
string|'".json"'
newline|'\n'
name|'if'
name|'access_token'
op|':'
newline|'\n'
indent|'            '
name|'all_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'all_args'
op|'.'
name|'update'
op|'('
name|'args'
op|')'
newline|'\n'
name|'all_args'
op|'.'
name|'update'
op|'('
name|'post_args'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'consumer_token'
op|'='
name|'self'
op|'.'
name|'_oauth_consumer_token'
op|'('
op|')'
newline|'\n'
name|'method'
op|'='
string|'"POST"'
name|'if'
name|'post_args'
name|'is'
name|'not'
name|'None'
name|'else'
string|'"GET"'
newline|'\n'
name|'oauth'
op|'='
name|'self'
op|'.'
name|'_oauth_request_parameters'
op|'('
nl|'\n'
name|'url'
op|','
name|'access_token'
op|','
name|'all_args'
op|','
name|'method'
op|'='
name|'method'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'oauth'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'args'
op|':'
name|'url'
op|'+='
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
name|'self'
op|'.'
name|'_on_twitter_request'
op|','
name|'callback'
op|')'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'if'
name|'post_args'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'method'
op|'='
string|'"POST"'
op|','
name|'body'
op|'='
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'post_args'
op|')'
op|','
nl|'\n'
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_twitter_request
dedent|''
dedent|''
name|'def'
name|'_on_twitter_request'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Error response %s fetching %s"'
op|','
name|'response'
op|'.'
name|'error'
op|','
nl|'\n'
name|'response'
op|'.'
name|'request'
op|'.'
name|'url'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'escape'
op|'.'
name|'json_decode'
op|'('
name|'response'
op|'.'
name|'body'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_consumer_token
dedent|''
name|'def'
name|'_oauth_consumer_token'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"twitter_consumer_key"'
op|','
string|'"Twitter OAuth"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"twitter_consumer_secret"'
op|','
string|'"Twitter OAuth"'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"twitter_consumer_key"'
op|']'
op|','
nl|'\n'
name|'secret'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"twitter_consumer_secret"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_get_user
dedent|''
name|'def'
name|'_oauth_get_user'
op|'('
name|'self'
op|','
name|'access_token'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
name|'self'
op|'.'
name|'_parse_user_response'
op|','
name|'callback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'twitter_request'
op|'('
nl|'\n'
string|'"/users/show/"'
op|'+'
name|'access_token'
op|'['
string|'"screen_name"'
op|']'
op|','
nl|'\n'
name|'access_token'
op|'='
name|'access_token'
op|','
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_user_response
dedent|''
name|'def'
name|'_parse_user_response'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"username"'
op|']'
op|'='
name|'user'
op|'['
string|'"screen_name"'
op|']'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FriendFeedMixin
dedent|''
dedent|''
name|'class'
name|'FriendFeedMixin'
op|'('
name|'OAuthMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""FriendFeed OAuth authentication.\n\n    To authenticate with FriendFeed, register your application with\n    FriendFeed at http://friendfeed.com/api/applications. Then\n    copy your Consumer Key and Consumer Secret to the application settings\n    \'friendfeed_consumer_key\' and \'friendfeed_consumer_secret\'. Use\n    this Mixin on the handler for the URL you registered as your\n    application\'s Callback URL.\n\n    When your application is set up, you can use this Mixin like this\n    to authenticate the user with FriendFeed and get access to their feed:\n\n    class FriendFeedHandler(tornado.web.RequestHandler,\n                            tornado.auth.FriendFeedMixin):\n        @tornado.web.asynchronous\n        def get(self):\n            if self.get_argument("oauth_token", None):\n                self.get_authenticated_user(self.async_callback(self._on_auth))\n                return\n            self.authorize_redirect()\n    \n        def _on_auth(self, user):\n            if not user:\n                raise tornado.web.HTTPError(500, "FriendFeed auth failed")\n            # Save the user using, e.g., set_secure_cookie()\n\n    The user object returned by get_authenticated_user() includes the\n    attributes \'username\', \'name\', and \'description\' in addition to\n    \'access_token\'. You should save the access token with the user;\n    it is required to make requests on behalf of the user later with\n    friendfeed_request().\n    """'
newline|'\n'
DECL|variable|_OAUTH_REQUEST_TOKEN_URL
name|'_OAUTH_REQUEST_TOKEN_URL'
op|'='
string|'"https://friendfeed.com/account/oauth/request_token"'
newline|'\n'
DECL|variable|_OAUTH_ACCESS_TOKEN_URL
name|'_OAUTH_ACCESS_TOKEN_URL'
op|'='
string|'"https://friendfeed.com/account/oauth/access_token"'
newline|'\n'
DECL|variable|_OAUTH_AUTHORIZE_URL
name|'_OAUTH_AUTHORIZE_URL'
op|'='
string|'"https://friendfeed.com/account/oauth/authorize"'
newline|'\n'
DECL|variable|_OAUTH_NO_CALLBACKS
name|'_OAUTH_NO_CALLBACKS'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|friendfeed_request
name|'def'
name|'friendfeed_request'
op|'('
name|'self'
op|','
name|'path'
op|','
name|'callback'
op|','
name|'access_token'
op|'='
name|'None'
op|','
nl|'\n'
name|'post_args'
op|'='
name|'None'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetches the given relative API path, e.g., "/bret/friends"\n\n        If the request is a POST, post_args should be provided. Query\n        string arguments should be given as keyword arguments.\n\n        All the FriendFeed methods are documented at\n        http://friendfeed.com/api/documentation.\n\n        Many methods require an OAuth access token which you can obtain\n        through authorize_redirect() and get_authenticated_user(). The\n        user returned through that process includes an \'access_token\'\n        attribute that can be used to make authenticated requests via\n        this method. Example usage:\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FriendFeedMixin):\n            @tornado.web.authenticated\n            @tornado.web.asynchronous\n            def get(self):\n                self.friendfeed_request(\n                    "/entry",\n                    post_args={"body": "Testing Tornado Web Server"},\n                    access_token=self.current_user["access_token"],\n                    callback=self.async_callback(self._on_post))\n\n            def _on_post(self, new_entry):\n                if not new_entry:\n                    # Call failed; perhaps missing permission?\n                    self.authorize_redirect()\n                    return\n                self.finish("Posted a message!")\n\n        """'
newline|'\n'
comment|'# Add the OAuth resource request signature if we have credentials'
nl|'\n'
name|'url'
op|'='
string|'"http://friendfeed-api.com/v2"'
op|'+'
name|'path'
newline|'\n'
name|'if'
name|'access_token'
op|':'
newline|'\n'
indent|'            '
name|'all_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'all_args'
op|'.'
name|'update'
op|'('
name|'args'
op|')'
newline|'\n'
name|'all_args'
op|'.'
name|'update'
op|'('
name|'post_args'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'consumer_token'
op|'='
name|'self'
op|'.'
name|'_oauth_consumer_token'
op|'('
op|')'
newline|'\n'
name|'method'
op|'='
string|'"POST"'
name|'if'
name|'post_args'
name|'is'
name|'not'
name|'None'
name|'else'
string|'"GET"'
newline|'\n'
name|'oauth'
op|'='
name|'self'
op|'.'
name|'_oauth_request_parameters'
op|'('
nl|'\n'
name|'url'
op|','
name|'access_token'
op|','
name|'all_args'
op|','
name|'method'
op|'='
name|'method'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'update'
op|'('
name|'oauth'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'args'
op|':'
name|'url'
op|'+='
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
name|'self'
op|'.'
name|'_on_friendfeed_request'
op|','
name|'callback'
op|')'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'if'
name|'post_args'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'method'
op|'='
string|'"POST"'
op|','
name|'body'
op|'='
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'post_args'
op|')'
op|','
nl|'\n'
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_friendfeed_request
dedent|''
dedent|''
name|'def'
name|'_on_friendfeed_request'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Error response %s fetching %s"'
op|','
name|'response'
op|'.'
name|'error'
op|','
nl|'\n'
name|'response'
op|'.'
name|'request'
op|'.'
name|'url'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'escape'
op|'.'
name|'json_decode'
op|'('
name|'response'
op|'.'
name|'body'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_consumer_token
dedent|''
name|'def'
name|'_oauth_consumer_token'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"friendfeed_consumer_key"'
op|','
string|'"FriendFeed OAuth"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"friendfeed_consumer_secret"'
op|','
string|'"FriendFeed OAuth"'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"friendfeed_consumer_key"'
op|']'
op|','
nl|'\n'
name|'secret'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"friendfeed_consumer_secret"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_get_user
dedent|''
name|'def'
name|'_oauth_get_user'
op|'('
name|'self'
op|','
name|'access_token'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
name|'self'
op|'.'
name|'_parse_user_response'
op|','
name|'callback'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'friendfeed_request'
op|'('
nl|'\n'
string|'"/feedinfo/"'
op|'+'
name|'access_token'
op|'['
string|'"username"'
op|']'
op|','
nl|'\n'
name|'include'
op|'='
string|'"id,name,description"'
op|','
name|'access_token'
op|'='
name|'access_token'
op|','
nl|'\n'
name|'callback'
op|'='
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_user_response
dedent|''
name|'def'
name|'_parse_user_response'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'user'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'user'
op|':'
newline|'\n'
indent|'            '
name|'user'
op|'['
string|'"username"'
op|']'
op|'='
name|'user'
op|'['
string|'"id"'
op|']'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GoogleMixin
dedent|''
dedent|''
name|'class'
name|'GoogleMixin'
op|'('
name|'OpenIdMixin'
op|','
name|'OAuthMixin'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Google Open ID / OAuth authentication.\n\n    No application registration is necessary to use Google for authentication\n    or to access Google resources on behalf of a user. To authenticate with\n    Google, redirect with authenticate_redirect(). On return, parse the\n    response with get_authenticated_user(). We send a dict containing the\n    values for the user, including \'email\', \'name\', and \'locale\'.\n    Example usage:\n\n    class GoogleHandler(tornado.web.RequestHandler, tornado.auth.GoogleMixin):\n       @tornado.web.asynchronous\n       def get(self):\n           if self.get_argument("openid.mode", None):\n               self.get_authenticated_user(self.async_callback(self._on_auth))\n               return\n        self.authenticate_redirect()\n    \n        def _on_auth(self, user):\n            if not user:\n                raise tornado.web.HTTPError(500, "Google auth failed")\n            # Save the user with, e.g., set_secure_cookie()\n\n    """'
newline|'\n'
DECL|variable|_OPENID_ENDPOINT
name|'_OPENID_ENDPOINT'
op|'='
string|'"https://www.google.com/accounts/o8/ud"'
newline|'\n'
DECL|variable|_OAUTH_ACCESS_TOKEN_URL
name|'_OAUTH_ACCESS_TOKEN_URL'
op|'='
string|'"https://www.google.com/accounts/OAuthGetAccessToken"'
newline|'\n'
nl|'\n'
DECL|member|authorize_redirect
name|'def'
name|'authorize_redirect'
op|'('
name|'self'
op|','
name|'oauth_scope'
op|','
name|'callback_uri'
op|'='
name|'None'
op|','
nl|'\n'
name|'ax_attrs'
op|'='
op|'['
string|'"name"'
op|','
string|'"email"'
op|','
string|'"language"'
op|','
string|'"username"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Authenticates and authorizes for the given Google resource.\n\n        Some of the available resources are:\n\n           Gmail Contacts - http://www.google.com/m8/feeds/\n           Calendar - http://www.google.com/calendar/feeds/\n           Finance - http://finance.google.com/finance/feeds/\n\n        You can authorize multiple resources by separating the resource\n        URLs with a space.\n        """'
newline|'\n'
name|'callback_uri'
op|'='
name|'callback_uri'
name|'or'
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'_openid_args'
op|'('
name|'callback_uri'
op|','
name|'ax_attrs'
op|'='
name|'ax_attrs'
op|','
nl|'\n'
name|'oauth_scope'
op|'='
name|'oauth_scope'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'redirect'
op|'('
name|'self'
op|'.'
name|'_OPENID_ENDPOINT'
op|'+'
string|'"?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_authenticated_user
dedent|''
name|'def'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetches the authenticated user data upon redirect."""'
newline|'\n'
comment|'# Look to see if we are doing combined OpenID/OAuth'
nl|'\n'
name|'oauth_ns'
op|'='
string|'""'
newline|'\n'
name|'for'
name|'name'
op|','
name|'values'
name|'in'
name|'self'
op|'.'
name|'request'
op|'.'
name|'arguments'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|'"openid.ns."'
op|')'
name|'and'
name|'values'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|'u"http://specs.openid.net/extensions/oauth/1.0"'
op|':'
newline|'\n'
indent|'                '
name|'oauth_ns'
op|'='
name|'name'
op|'['
number|'10'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'token'
op|'='
name|'self'
op|'.'
name|'get_argument'
op|'('
string|'"openid."'
op|'+'
name|'oauth_ns'
op|'+'
string|'".request_token"'
op|','
string|'""'
op|')'
newline|'\n'
name|'if'
name|'token'
op|':'
newline|'\n'
indent|'            '
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'token'
op|'='
name|'dict'
op|'('
name|'key'
op|'='
name|'token'
op|','
name|'secret'
op|'='
string|'""'
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'self'
op|'.'
name|'_oauth_access_token_url'
op|'('
name|'token'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'async_callback'
op|'('
name|'self'
op|'.'
name|'_on_access_token'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'OpenIdMixin'
op|'.'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_consumer_token
dedent|''
dedent|''
name|'def'
name|'_oauth_consumer_token'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"google_consumer_key"'
op|','
string|'"Google OAuth"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"google_consumer_secret"'
op|','
string|'"Google OAuth"'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
nl|'\n'
name|'key'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"google_consumer_key"'
op|']'
op|','
nl|'\n'
name|'secret'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"google_consumer_secret"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_oauth_get_user
dedent|''
name|'def'
name|'_oauth_get_user'
op|'('
name|'self'
op|','
name|'access_token'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'OpenIdMixin'
op|'.'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FacebookMixin
dedent|''
dedent|''
name|'class'
name|'FacebookMixin'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Facebook Connect authentication.\n\n    To authenticate with Facebook, register your application with\n    Facebook at http://www.facebook.com/developers/apps.php. Then\n    copy your API Key and Application Secret to the application settings\n    \'facebook_api_key\' and \'facebook_secret\'.\n\n    When your application is set up, you can use this Mixin like this\n    to authenticate the user with Facebook:\n\n    class FacebookHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookMixin):\n        @tornado.web.asynchronous\n        def get(self):\n            if self.get_argument("session", None):\n                self.get_authenticated_user(self.async_callback(self._on_auth))\n                return\n            self.authenticate_redirect()\n    \n        def _on_auth(self, user):\n            if not user:\n                raise tornado.web.HTTPError(500, "Facebook auth failed")\n            # Save the user using, e.g., set_secure_cookie()\n\n    The user object returned by get_authenticated_user() includes the\n    attributes \'facebook_uid\' and \'name\' in addition to session attributes\n    like \'session_key\'. You should save the session key with the user; it is\n    required to make requests on behalf of the user later with\n    facebook_request().\n    """'
newline|'\n'
DECL|member|authenticate_redirect
name|'def'
name|'authenticate_redirect'
op|'('
name|'self'
op|','
name|'callback_uri'
op|'='
name|'None'
op|','
name|'cancel_uri'
op|'='
name|'None'
op|','
nl|'\n'
name|'extended_permissions'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Authenticates/installs this app for the current user."""'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"facebook_api_key"'
op|','
string|'"Facebook Connect"'
op|')'
newline|'\n'
name|'callback_uri'
op|'='
name|'callback_uri'
name|'or'
name|'self'
op|'.'
name|'request'
op|'.'
name|'path'
newline|'\n'
name|'args'
op|'='
op|'{'
nl|'\n'
string|'"api_key"'
op|':'
name|'self'
op|'.'
name|'settings'
op|'['
string|'"facebook_api_key"'
op|']'
op|','
nl|'\n'
string|'"v"'
op|':'
string|'"1.0"'
op|','
nl|'\n'
string|'"fbconnect"'
op|':'
string|'"true"'
op|','
nl|'\n'
string|'"display"'
op|':'
string|'"page"'
op|','
nl|'\n'
string|'"next"'
op|':'
name|'urlparse'
op|'.'
name|'urljoin'
op|'('
name|'self'
op|'.'
name|'request'
op|'.'
name|'full_url'
op|'('
op|')'
op|','
name|'callback_uri'
op|')'
op|','
nl|'\n'
string|'"return_session"'
op|':'
string|'"true"'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'cancel_uri'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'['
string|'"cancel_url"'
op|']'
op|'='
name|'urlparse'
op|'.'
name|'urljoin'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'request'
op|'.'
name|'full_url'
op|'('
op|')'
op|','
name|'cancel_uri'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'extended_permissions'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'extended_permissions'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'extended_permissions'
op|'='
op|'['
name|'extended_permissions'
op|']'
newline|'\n'
dedent|''
name|'args'
op|'['
string|'"req_perms"'
op|']'
op|'='
string|'","'
op|'.'
name|'join'
op|'('
name|'extended_permissions'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'redirect'
op|'('
string|'"http://www.facebook.com/login.php?"'
op|'+'
nl|'\n'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|authorize_redirect
dedent|''
name|'def'
name|'authorize_redirect'
op|'('
name|'self'
op|','
name|'extended_permissions'
op|','
name|'callback_uri'
op|'='
name|'None'
op|','
nl|'\n'
name|'cancel_uri'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Redirects to an authorization request for the given FB resource.\n\n        The available resource names are listed at\n        http://wiki.developers.facebook.com/index.php/Extended_permission.\n        The most common resource types include:\n\n            publish_stream\n            read_stream\n            email\n            sms\n\n        extended_permissions can be a single permission name or a list of\n        names. To get the session secret and session key, call\n        get_authenticated_user() just as you would with\n        authenticate_redirect().\n        """'
newline|'\n'
name|'self'
op|'.'
name|'authenticate_redirect'
op|'('
name|'callback_uri'
op|','
name|'cancel_uri'
op|','
nl|'\n'
name|'extended_permissions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_authenticated_user
dedent|''
name|'def'
name|'get_authenticated_user'
op|'('
name|'self'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fetches the authenticated Facebook user.\n\n        The authenticated user includes the special Facebook attributes\n        \'session_key\' and \'facebook_uid\' in addition to the standard\n        user attributes like \'name\'.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"facebook_api_key"'
op|','
string|'"Facebook Connect"'
op|')'
newline|'\n'
name|'session'
op|'='
name|'escape'
op|'.'
name|'json_decode'
op|'('
name|'self'
op|'.'
name|'get_argument'
op|'('
string|'"session"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'facebook_request'
op|'('
nl|'\n'
name|'method'
op|'='
string|'"facebook.users.getInfo"'
op|','
nl|'\n'
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_on_get_user_info'
op|','
name|'callback'
op|','
name|'session'
op|')'
op|','
nl|'\n'
name|'session_key'
op|'='
name|'session'
op|'['
string|'"session_key"'
op|']'
op|','
nl|'\n'
name|'uids'
op|'='
name|'session'
op|'['
string|'"uid"'
op|']'
op|','
nl|'\n'
name|'fields'
op|'='
string|'"uid,first_name,last_name,name,locale,pic_square,"'
string|'"profile_url,username"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|facebook_request
dedent|''
name|'def'
name|'facebook_request'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'callback'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes a Facebook API REST request.\n\n        We automatically include the Facebook API key and signature, but\n        it is the callers responsibility to include \'session_key\' and any\n        other required arguments to the method.\n\n        The available Facebook methods are documented here:\n        http://wiki.developers.facebook.com/index.php/API\n\n        Here is an example for the stream.get() method:\n\n        class MainHandler(tornado.web.RequestHandler,\n                          tornado.auth.FacebookMixin):\n            @tornado.web.authenticated\n            @tornado.web.asynchronous\n            def get(self):\n                self.facebook_request(\n                    method="stream.get",\n                    callback=self.async_callback(self._on_stream),\n                    session_key=self.current_user["session_key"])\n\n            def _on_stream(self, stream):\n                if stream is None:\n                   # Not authorized to read the stream yet?\n                   self.redirect(self.authorize_redirect("read_stream"))\n                   return\n                self.render("stream.html", stream=stream)\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"facebook_api_key"'
op|','
string|'"Facebook Connect"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'require_setting'
op|'('
string|'"facebook_secret"'
op|','
string|'"Facebook Connect"'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'method'
op|'.'
name|'startswith'
op|'('
string|'"facebook."'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'method'
op|'='
string|'"facebook."'
op|'+'
name|'method'
newline|'\n'
dedent|''
name|'args'
op|'['
string|'"api_key"'
op|']'
op|'='
name|'self'
op|'.'
name|'settings'
op|'['
string|'"facebook_api_key"'
op|']'
newline|'\n'
name|'args'
op|'['
string|'"v"'
op|']'
op|'='
string|'"1.0"'
newline|'\n'
name|'args'
op|'['
string|'"method"'
op|']'
op|'='
name|'method'
newline|'\n'
name|'args'
op|'['
string|'"call_id"'
op|']'
op|'='
name|'str'
op|'('
name|'long'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'*'
number|'1e6'
op|')'
op|')'
newline|'\n'
name|'args'
op|'['
string|'"format"'
op|']'
op|'='
string|'"json"'
newline|'\n'
name|'args'
op|'['
string|'"sig"'
op|']'
op|'='
name|'self'
op|'.'
name|'_signature'
op|'('
name|'args'
op|')'
newline|'\n'
name|'url'
op|'='
string|'"http://api.facebook.com/restserver.php?"'
op|'+'
name|'urllib'
op|'.'
name|'urlencode'
op|'('
name|'args'
op|')'
newline|'\n'
name|'http'
op|'='
name|'httpclient'
op|'.'
name|'AsyncHTTPClient'
op|'('
op|')'
newline|'\n'
name|'http'
op|'.'
name|'fetch'
op|'('
name|'url'
op|','
name|'callback'
op|'='
name|'self'
op|'.'
name|'async_callback'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_parse_response'
op|','
name|'callback'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_on_get_user_info
dedent|''
name|'def'
name|'_on_get_user_info'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'session'
op|','
name|'users'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'users'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'callback'
op|'('
op|'{'
nl|'\n'
string|'"name"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"name"'
op|']'
op|','
nl|'\n'
string|'"first_name"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"first_name"'
op|']'
op|','
nl|'\n'
string|'"last_name"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"last_name"'
op|']'
op|','
nl|'\n'
string|'"uid"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"uid"'
op|']'
op|','
nl|'\n'
string|'"locale"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"locale"'
op|']'
op|','
nl|'\n'
string|'"pic_square"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"pic_square"'
op|']'
op|','
nl|'\n'
string|'"profile_url"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'['
string|'"profile_url"'
op|']'
op|','
nl|'\n'
string|'"username"'
op|':'
name|'users'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|'"username"'
op|')'
op|','
nl|'\n'
string|'"session_key"'
op|':'
name|'session'
op|'['
string|'"session_key"'
op|']'
op|','
nl|'\n'
string|'"session_expires"'
op|':'
name|'session'
op|'['
string|'"expires"'
op|']'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_response
dedent|''
name|'def'
name|'_parse_response'
op|'('
name|'self'
op|','
name|'callback'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'response'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"HTTP error from Facebook: %s"'
op|','
name|'response'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'json'
op|'='
name|'escape'
op|'.'
name|'json_decode'
op|'('
name|'response'
op|'.'
name|'body'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Invalid JSON from Facebook: %r"'
op|','
name|'response'
op|'.'
name|'body'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'json'
op|','
name|'dict'
op|')'
name|'and'
name|'json'
op|'.'
name|'get'
op|'('
string|'"error_code"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_log'
op|'.'
name|'warning'
op|'('
string|'"Facebook error: %d: %r"'
op|','
name|'json'
op|'['
string|'"error_code"'
op|']'
op|','
nl|'\n'
name|'json'
op|'.'
name|'get'
op|'('
string|'"error_msg"'
op|')'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'None'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'callback'
op|'('
name|'json'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_signature
dedent|''
name|'def'
name|'_signature'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'parts'
op|'='
op|'['
string|'"%s=%s"'
op|'%'
op|'('
name|'n'
op|','
name|'args'
op|'['
name|'n'
op|']'
op|')'
name|'for'
name|'n'
name|'in'
name|'sorted'
op|'('
name|'args'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'body'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'parts'
op|')'
op|'+'
name|'self'
op|'.'
name|'settings'
op|'['
string|'"facebook_secret"'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'body'
op|','
name|'unicode'
op|')'
op|':'
name|'body'
op|'='
name|'body'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
name|'return'
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'body'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_oauth_signature
dedent|''
dedent|''
name|'def'
name|'_oauth_signature'
op|'('
name|'consumer_token'
op|','
name|'method'
op|','
name|'url'
op|','
name|'parameters'
op|'='
op|'{'
op|'}'
op|','
name|'token'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Calculates the HMAC-SHA1 OAuth signature for the given request.\n\n    See http://oauth.net/core/1.0/#signing_process\n    """'
newline|'\n'
name|'parts'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'url'
op|')'
newline|'\n'
name|'scheme'
op|','
name|'netloc'
op|','
name|'path'
op|'='
name|'parts'
op|'['
op|':'
number|'3'
op|']'
newline|'\n'
name|'normalized_url'
op|'='
name|'scheme'
op|'.'
name|'lower'
op|'('
op|')'
op|'+'
string|'"://"'
op|'+'
name|'netloc'
op|'.'
name|'lower'
op|'('
op|')'
op|'+'
name|'path'
newline|'\n'
nl|'\n'
name|'base_elems'
op|'='
op|'['
op|']'
newline|'\n'
name|'base_elems'
op|'.'
name|'append'
op|'('
name|'method'
op|'.'
name|'upper'
op|'('
op|')'
op|')'
newline|'\n'
name|'base_elems'
op|'.'
name|'append'
op|'('
name|'normalized_url'
op|')'
newline|'\n'
name|'base_elems'
op|'.'
name|'append'
op|'('
string|'"&"'
op|'.'
name|'join'
op|'('
string|'"%s=%s"'
op|'%'
op|'('
name|'k'
op|','
name|'_oauth_escape'
op|'('
name|'str'
op|'('
name|'v'
op|')'
op|')'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'sorted'
op|'('
name|'parameters'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'base_string'
op|'='
string|'"&"'
op|'.'
name|'join'
op|'('
name|'_oauth_escape'
op|'('
name|'e'
op|')'
name|'for'
name|'e'
name|'in'
name|'base_elems'
op|')'
newline|'\n'
nl|'\n'
name|'key_elems'
op|'='
op|'['
name|'consumer_token'
op|'['
string|'"secret"'
op|']'
op|']'
newline|'\n'
name|'key_elems'
op|'.'
name|'append'
op|'('
name|'token'
op|'['
string|'"secret"'
op|']'
name|'if'
name|'token'
name|'else'
string|'""'
op|')'
newline|'\n'
name|'key'
op|'='
string|'"&"'
op|'.'
name|'join'
op|'('
name|'key_elems'
op|')'
newline|'\n'
nl|'\n'
name|'hash'
op|'='
name|'hmac'
op|'.'
name|'new'
op|'('
name|'key'
op|','
name|'base_string'
op|','
name|'hashlib'
op|'.'
name|'sha1'
op|')'
newline|'\n'
name|'return'
name|'binascii'
op|'.'
name|'b2a_base64'
op|'('
name|'hash'
op|'.'
name|'digest'
op|'('
op|')'
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_oauth_escape
dedent|''
name|'def'
name|'_oauth_escape'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'val'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'val'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'val'
op|','
name|'safe'
op|'='
string|'"~"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_oauth_parse_response
dedent|''
name|'def'
name|'_oauth_parse_response'
op|'('
name|'body'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'p'
op|'='
name|'cgi'
op|'.'
name|'parse_qs'
op|'('
name|'body'
op|','
name|'keep_blank_values'
op|'='
name|'False'
op|')'
newline|'\n'
name|'token'
op|'='
name|'dict'
op|'('
name|'key'
op|'='
name|'p'
op|'['
string|'"oauth_token"'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'secret'
op|'='
name|'p'
op|'['
string|'"oauth_token_secret"'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the extra parameters the Provider included to the token'
nl|'\n'
name|'special'
op|'='
op|'('
string|'"oauth_token"'
op|','
string|'"oauth_token_secret"'
op|')'
newline|'\n'
name|'token'
op|'.'
name|'update'
op|'('
op|'('
name|'k'
op|','
name|'p'
op|'['
name|'k'
op|']'
op|'['
number|'0'
op|']'
op|')'
name|'for'
name|'k'
name|'in'
name|'p'
name|'if'
name|'k'
name|'not'
name|'in'
name|'special'
op|')'
newline|'\n'
name|'return'
name|'token'
newline|'\n'
dedent|''
endmarker|''
end_unit

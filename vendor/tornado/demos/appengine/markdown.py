begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# Copyright (c) 2007-2008 ActiveState Corp.'
nl|'\n'
comment|'# License: MIT (http://www.opensource.org/licenses/mit-license.php)'
nl|'\n'
nl|'\n'
string|'r"""A fast and complete Python implementation of Markdown.\n\n[from http://daringfireball.net/projects/markdown/]\n> Markdown is a text-to-HTML filter; it translates an easy-to-read /\n> easy-to-write structured text format into HTML.  Markdown\'s text\n> format is most similar to that of plain text email, and supports\n> features such as headers, *emphasis*, code blocks, blockquotes, and\n> links.\n>\n> Markdown\'s syntax is designed not as a generic markup language, but\n> specifically to serve as a front-end to (X)HTML. You can use span-level\n> HTML tags anywhere in a Markdown document, and you can use block level\n> HTML tags (like <div> and <table> as well).\n\nModule usage:\n\n    >>> import markdown2\n    >>> markdown2.markdown("*boo!*")  # or use `html = markdown_path(PATH)`\n    u\'<p><em>boo!</em></p>\\n\'\n\n    >>> markdowner = Markdown()\n    >>> markdowner.convert("*boo!*")\n    u\'<p><em>boo!</em></p>\\n\'\n    >>> markdowner.convert("**boom!**")\n    u\'<p><strong>boom!</strong></p>\\n\'\n\nThis implementation of Markdown implements the full "core" syntax plus a\nnumber of extras (e.g., code syntax coloring, footnotes) as described on\n<http://code.google.com/p/python-markdown2/wiki/Extras>.\n"""'
newline|'\n'
nl|'\n'
name|'cmdln_desc'
op|'='
string|'"""A fast and complete Python implementation of Markdown, a\ntext-to-HTML conversion tool for web writers.\n"""'
newline|'\n'
nl|'\n'
comment|'# Dev Notes:'
nl|'\n'
comment|'# - There is already a Python markdown processor'
nl|'\n'
comment|'#   (http://www.freewisdom.org/projects/python-markdown/).'
nl|'\n'
comment|"# - Python's regex syntax doesn't have '\\z', so I'm using '\\Z'. I'm"
nl|'\n'
comment|"#   not yet sure if there implications with this. Compare 'pydoc sre'"
nl|'\n'
comment|"#   and 'perldoc perlre'."
nl|'\n'
nl|'\n'
DECL|variable|__version_info__
name|'__version_info__'
op|'='
op|'('
number|'1'
op|','
number|'0'
op|','
number|'1'
op|','
number|'14'
op|')'
comment|'# first three nums match Markdown.pl'
newline|'\n'
DECL|variable|__version__
name|'__version__'
op|'='
string|"'1.0.1.14'"
newline|'\n'
DECL|variable|__author__
name|'__author__'
op|'='
string|'"Trent Mick"'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'from'
name|'pprint'
name|'import'
name|'pprint'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'hashlib'
name|'import'
name|'md5'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'md5'
name|'import'
name|'md5'
newline|'\n'
dedent|''
name|'import'
name|'optparse'
newline|'\n'
name|'from'
name|'random'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'codecs'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'#---- Python version compat'
nl|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
op|':'
number|'2'
op|']'
op|'<'
op|'('
number|'2'
op|','
number|'4'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'sets'
name|'import'
name|'Set'
name|'as'
name|'set'
newline|'\n'
DECL|function|reversed
name|'def'
name|'reversed'
op|'('
name|'sequence'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'sequence'
op|'['
op|':'
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'i'
newline|'\n'
DECL|function|_unicode_decode
dedent|''
dedent|''
name|'def'
name|'_unicode_decode'
op|'('
name|'s'
op|','
name|'encoding'
op|','
name|'errors'
op|'='
string|"'xmlcharrefreplace'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'unicode'
op|'('
name|'s'
op|','
name|'encoding'
op|','
name|'errors'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|_unicode_decode
indent|'    '
name|'def'
name|'_unicode_decode'
op|'('
name|'s'
op|','
name|'encoding'
op|','
name|'errors'
op|'='
string|"'strict'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'s'
op|'.'
name|'decode'
op|'('
name|'encoding'
op|','
name|'errors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#---- globals'
nl|'\n'
nl|'\n'
DECL|variable|DEBUG
dedent|''
dedent|''
name|'DEBUG'
op|'='
name|'False'
newline|'\n'
DECL|variable|log
name|'log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"markdown"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_TAB_WIDTH
name|'DEFAULT_TAB_WIDTH'
op|'='
number|'4'
newline|'\n'
nl|'\n'
comment|'# Table of hash values for escaped characters:'
nl|'\n'
DECL|function|_escape_hash
name|'def'
name|'_escape_hash'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
comment|'# Lame attempt to avoid possible collision with someone actually'
nl|'\n'
comment|'# using the MD5 hexdigest of one of these chars in there text.'
nl|'\n'
comment|'# Other ideas: random.random(), uuid.uuid()'
nl|'\n'
comment|'#return md5(s).hexdigest()   # Markdown.pl effectively does this.'
nl|'\n'
indent|'    '
name|'return'
string|"'md5-'"
op|'+'
name|'md5'
op|'('
name|'s'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
DECL|variable|g_escape_table
dedent|''
name|'g_escape_table'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'ch'
op|','
name|'_escape_hash'
op|'('
name|'ch'
op|')'
op|')'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|"'\\\\`*_{}[]()>#+-.!'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'#---- exceptions'
nl|'\n'
nl|'\n'
DECL|class|MarkdownError
name|'class'
name|'MarkdownError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'#---- public api'
nl|'\n'
nl|'\n'
DECL|function|markdown_path
dedent|''
name|'def'
name|'markdown_path'
op|'('
name|'path'
op|','
name|'encoding'
op|'='
string|'"utf-8"'
op|','
nl|'\n'
name|'html4tags'
op|'='
name|'False'
op|','
name|'tab_width'
op|'='
name|'DEFAULT_TAB_WIDTH'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'None'
op|','
name|'extras'
op|'='
name|'None'
op|','
name|'link_patterns'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_file_vars'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'text'
op|'='
name|'codecs'
op|'.'
name|'open'
op|'('
name|'path'
op|','
string|"'r'"
op|','
name|'encoding'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'return'
name|'Markdown'
op|'('
name|'html4tags'
op|'='
name|'html4tags'
op|','
name|'tab_width'
op|'='
name|'tab_width'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'safe_mode'
op|','
name|'extras'
op|'='
name|'extras'
op|','
nl|'\n'
name|'link_patterns'
op|'='
name|'link_patterns'
op|','
nl|'\n'
name|'use_file_vars'
op|'='
name|'use_file_vars'
op|')'
op|'.'
name|'convert'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|function|markdown
dedent|''
name|'def'
name|'markdown'
op|'('
name|'text'
op|','
name|'html4tags'
op|'='
name|'False'
op|','
name|'tab_width'
op|'='
name|'DEFAULT_TAB_WIDTH'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'None'
op|','
name|'extras'
op|'='
name|'None'
op|','
name|'link_patterns'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_file_vars'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'Markdown'
op|'('
name|'html4tags'
op|'='
name|'html4tags'
op|','
name|'tab_width'
op|'='
name|'tab_width'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'safe_mode'
op|','
name|'extras'
op|'='
name|'extras'
op|','
nl|'\n'
name|'link_patterns'
op|'='
name|'link_patterns'
op|','
nl|'\n'
name|'use_file_vars'
op|'='
name|'use_file_vars'
op|')'
op|'.'
name|'convert'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Markdown
dedent|''
name|'class'
name|'Markdown'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|'# The dict of "extras" to enable in processing -- a mapping of'
nl|'\n'
comment|'# extra name to argument for the extra. Most extras do not have an'
nl|'\n'
comment|'# argument, in which case the value is None.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This can be set via (a) subclassing and (b) the constructor'
nl|'\n'
comment|'# "extras" argument.'
nl|'\n'
DECL|variable|extras
indent|'    '
name|'extras'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|urls
name|'urls'
op|'='
name|'None'
newline|'\n'
DECL|variable|titles
name|'titles'
op|'='
name|'None'
newline|'\n'
DECL|variable|html_blocks
name|'html_blocks'
op|'='
name|'None'
newline|'\n'
DECL|variable|html_spans
name|'html_spans'
op|'='
name|'None'
newline|'\n'
DECL|variable|html_removed_text
name|'html_removed_text'
op|'='
string|'"[HTML_REMOVED]"'
comment|'# for compat with markdown.py'
newline|'\n'
nl|'\n'
comment|"# Used to track when we're inside an ordered or unordered list"
nl|'\n'
comment|'# (see _ProcessListItems() for details):'
nl|'\n'
DECL|variable|list_level
name|'list_level'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|variable|_ws_only_line_re
name|'_ws_only_line_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"^[ \\t]+$"'
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'html4tags'
op|'='
name|'False'
op|','
name|'tab_width'
op|'='
number|'4'
op|','
name|'safe_mode'
op|'='
name|'None'
op|','
nl|'\n'
name|'extras'
op|'='
name|'None'
op|','
name|'link_patterns'
op|'='
name|'None'
op|','
name|'use_file_vars'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'html4tags'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'empty_element_suffix'
op|'='
string|'">"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'empty_element_suffix'
op|'='
string|'" />"'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'tab_width'
op|'='
name|'tab_width'
newline|'\n'
nl|'\n'
comment|'# For compatibility with earlier markdown2.py and with'
nl|'\n'
comment|"# markdown.py's safe_mode being a boolean, "
nl|'\n'
comment|'#   safe_mode == True -> "replace"'
nl|'\n'
name|'if'
name|'safe_mode'
name|'is'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'safe_mode'
op|'='
string|'"replace"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'safe_mode'
op|'='
name|'safe_mode'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'extras'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'extras'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'not'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'extras'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'extras'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'e'
op|','
name|'None'
op|')'
name|'for'
name|'e'
name|'in'
name|'self'
op|'.'
name|'extras'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'extras'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'extras'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'e'
op|','
name|'None'
op|')'
name|'for'
name|'e'
name|'in'
name|'extras'
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'extras'
op|'.'
name|'update'
op|'('
name|'extras'
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'extras'
op|','
name|'dict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_extras'
op|'='
name|'self'
op|'.'
name|'extras'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'link_patterns'
op|'='
name|'link_patterns'
newline|'\n'
name|'self'
op|'.'
name|'use_file_vars'
op|'='
name|'use_file_vars'
newline|'\n'
name|'self'
op|'.'
name|'_outdent_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^(\\t|[ ]{1,%d})'"
op|'%'
name|'tab_width'
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'urls'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'titles'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'html_blocks'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'html_spans'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'list_level'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'extras'
op|'='
name|'self'
op|'.'
name|'_instance_extras'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
string|'"footnotes"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'footnotes'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'footnote_ids'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|convert
dedent|''
dedent|''
name|'def'
name|'convert'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert the given text."""'
newline|'\n'
comment|'# Main function. The order in which other subs are called here is'
nl|'\n'
comment|'# essential. Link and image substitutions need to happen before'
nl|'\n'
comment|"# _EscapeSpecialChars(), so that any *'s or _'s in the <a>"
nl|'\n'
comment|'# and <img> tags get encoded.'
nl|'\n'
nl|'\n'
comment|"# Clear the global hashes. If we don't clear these, you get conflicts"
nl|'\n'
comment|'# from other articles when generating a page which contains more than'
nl|'\n'
comment|'# one article (e.g. an index page that shows the N most recent'
nl|'\n'
comment|'# articles):'
nl|'\n'
name|'self'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'text'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
comment|"#TODO: perhaps shouldn't presume UTF-8 for string input?"
nl|'\n'
indent|'            '
name|'text'
op|'='
name|'unicode'
op|'('
name|'text'
op|','
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'use_file_vars'
op|':'
newline|'\n'
comment|'# Look for emacs-style file variable hints.'
nl|'\n'
indent|'            '
name|'emacs_vars'
op|'='
name|'self'
op|'.'
name|'_get_emacs_vars'
op|'('
name|'text'
op|')'
newline|'\n'
name|'if'
string|'"markdown-extras"'
name|'in'
name|'emacs_vars'
op|':'
newline|'\n'
indent|'                '
name|'splitter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"[ ,]+"'
op|')'
newline|'\n'
name|'for'
name|'e'
name|'in'
name|'splitter'
op|'.'
name|'split'
op|'('
name|'emacs_vars'
op|'['
string|'"markdown-extras"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'='"
name|'in'
name|'e'
op|':'
newline|'\n'
indent|'                        '
name|'ename'
op|','
name|'earg'
op|'='
name|'e'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'earg'
op|'='
name|'int'
op|'('
name|'earg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'ename'
op|','
name|'earg'
op|'='
name|'e'
op|','
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'extras'
op|'['
name|'ename'
op|']'
op|'='
name|'earg'
newline|'\n'
nl|'\n'
comment|'# Standardize line endings:'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'text'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'"\\r\\n|\\r"'
op|','
string|'"\\n"'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure $text ends with a couple of newlines:'
nl|'\n'
name|'text'
op|'+='
string|'"\\n\\n"'
newline|'\n'
nl|'\n'
comment|'# Convert all tabs to spaces.'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_detab'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Strip any lines consisting only of spaces and tabs.'
nl|'\n'
comment|'# This makes subsequent regexen easier to write, because we can'
nl|'\n'
comment|'# match consecutive blank lines with /\\n+/ instead of something'
nl|'\n'
comment|'# contorted like /[ \\t]*\\n+/ .'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_ws_only_line_re'
op|'.'
name|'sub'
op|'('
string|'""'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'safe_mode'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_hash_html_spans'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Turn block-level HTML blocks into hash entries'
nl|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_hash_html_blocks'
op|'('
name|'text'
op|','
name|'raw'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Strip link definitions, store in hashes.'
nl|'\n'
name|'if'
string|'"footnotes"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
comment|'# Must do footnotes first because an unlucky footnote defn'
nl|'\n'
comment|'# looks like a link defn:'
nl|'\n'
comment|'#   [^4]: this "looks like a link defn"'
nl|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_strip_footnote_definitions'
op|'('
name|'text'
op|')'
newline|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_strip_link_definitions'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_run_block_gamut'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|'"footnotes"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_add_footnotes'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_unescape_special_chars'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'safe_mode'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_unhash_html_spans'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'text'
op|'+='
string|'"\\n"'
newline|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|variable|_emacs_oneliner_vars_pat
dedent|''
name|'_emacs_oneliner_vars_pat'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"-\\*-\\s*([^\\r\\n]*?)\\s*-\\*-"'
op|','
name|'re'
op|'.'
name|'UNICODE'
op|')'
newline|'\n'
comment|'# This regular expression is intended to match blocks like this:'
nl|'\n'
comment|'#    PREFIX Local Variables: SUFFIX'
nl|'\n'
comment|'#    PREFIX mode: Tcl SUFFIX'
nl|'\n'
comment|'#    PREFIX End: SUFFIX'
nl|'\n'
comment|'# Some notes:'
nl|'\n'
comment|'# - "[ \\t]" is used instead of "\\s" to specifically exclude newlines'
nl|'\n'
comment|'# - "(\\r\\n|\\n|\\r)" is used instead of "$" because the sre engine does'
nl|'\n'
comment|'#   not like anything other than Unix-style line terminators.'
nl|'\n'
name|'_emacs_local_vars_pat'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""^\n        (?P<prefix>(?:[^\\r\\n|\\n|\\r])*?)\n        [\\ \\t]*Local\\ Variables:[\\ \\t]*\n        (?P<suffix>.*?)(?:\\r\\n|\\n|\\r)\n        (?P<content>.*?\\1End:)\n        """'
op|','
name|'re'
op|'.'
name|'IGNORECASE'
op|'|'
name|'re'
op|'.'
name|'MULTILINE'
op|'|'
name|'re'
op|'.'
name|'DOTALL'
op|'|'
name|'re'
op|'.'
name|'VERBOSE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_emacs_vars
name|'def'
name|'_get_emacs_vars'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a dictionary of emacs-style local variables.\n\n        Parsing is done loosely according to this spec (and according to\n        some in-practice deviations from this):\n        http://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables\n        """'
newline|'\n'
name|'emacs_vars'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'SIZE'
op|'='
name|'pow'
op|'('
number|'2'
op|','
number|'13'
op|')'
comment|'# 8kB'
newline|'\n'
nl|'\n'
comment|"# Search near the start for a '-*-'-style one-liner of variables."
nl|'\n'
name|'head'
op|'='
name|'text'
op|'['
op|':'
name|'SIZE'
op|']'
newline|'\n'
name|'if'
string|'"-*-"'
name|'in'
name|'head'
op|':'
newline|'\n'
indent|'            '
name|'match'
op|'='
name|'self'
op|'.'
name|'_emacs_oneliner_vars_pat'
op|'.'
name|'search'
op|'('
name|'head'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                '
name|'emacs_vars_str'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'assert'
string|"'\\n'"
name|'not'
name|'in'
name|'emacs_vars_str'
newline|'\n'
name|'emacs_var_strs'
op|'='
op|'['
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'emacs_vars_str'
op|'.'
name|'split'
op|'('
string|"';'"
op|')'
nl|'\n'
name|'if'
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
op|']'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'emacs_var_strs'
op|')'
op|'=='
number|'1'
name|'and'
string|"':'"
name|'not'
name|'in'
name|'emacs_var_strs'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
comment|'# While not in the spec, this form is allowed by emacs:'
nl|'\n'
comment|'#   -*- Tcl -*-'
nl|'\n'
comment|'# where the implied "variable" is "mode". This form'
nl|'\n'
comment|'# is only allowed if there are no other variables.'
nl|'\n'
indent|'                    '
name|'emacs_vars'
op|'['
string|'"mode"'
op|']'
op|'='
name|'emacs_var_strs'
op|'['
number|'0'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'for'
name|'emacs_var_str'
name|'in'
name|'emacs_var_strs'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'variable'
op|','
name|'value'
op|'='
name|'emacs_var_str'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                            '
name|'log'
op|'.'
name|'debug'
op|'('
string|'"emacs variables error: malformed -*- "'
nl|'\n'
string|'"line: %r"'
op|','
name|'emacs_var_str'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
comment|'# Lowercase the variable name because Emacs allows "Mode"'
nl|'\n'
comment|'# or "mode" or "MoDe", etc.'
nl|'\n'
dedent|''
name|'emacs_vars'
op|'['
name|'variable'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'tail'
op|'='
name|'text'
op|'['
op|'-'
name|'SIZE'
op|':'
op|']'
newline|'\n'
name|'if'
string|'"Local Variables"'
name|'in'
name|'tail'
op|':'
newline|'\n'
indent|'            '
name|'match'
op|'='
name|'self'
op|'.'
name|'_emacs_local_vars_pat'
op|'.'
name|'search'
op|'('
name|'tail'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                '
name|'prefix'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
string|'"prefix"'
op|')'
newline|'\n'
name|'suffix'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
string|'"suffix"'
op|')'
newline|'\n'
name|'lines'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
string|'"content"'
op|')'
op|'.'
name|'splitlines'
op|'('
number|'0'
op|')'
newline|'\n'
comment|'#print "prefix=%r, suffix=%r, content=%r, lines: %s"\\'
nl|'\n'
comment|'#      % (prefix, suffix, match.group("content"), lines)'
nl|'\n'
nl|'\n'
comment|'# Validate the Local Variables block: proper prefix and suffix'
nl|'\n'
comment|'# usage.'
nl|'\n'
name|'for'
name|'i'
op|','
name|'line'
name|'in'
name|'enumerate'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'not'
name|'line'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'debug'
op|'('
string|'"emacs variables error: line \'%s\' "'
nl|'\n'
string|'"does not use proper prefix \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'line'
op|','
name|'prefix'
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
comment|"# Don't validate suffix on last line. Emacs doesn't care,"
nl|'\n'
comment|'# neither should we.'
nl|'\n'
dedent|''
name|'if'
name|'i'
op|'!='
name|'len'
op|'('
name|'lines'
op|')'
op|'-'
number|'1'
name|'and'
name|'not'
name|'line'
op|'.'
name|'endswith'
op|'('
name|'suffix'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'log'
op|'.'
name|'debug'
op|'('
string|'"emacs variables error: line \'%s\' "'
nl|'\n'
string|'"does not use proper suffix \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'line'
op|','
name|'suffix'
op|')'
op|')'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Parse out one emacs var per line.'
nl|'\n'
dedent|''
dedent|''
name|'continued_for'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'lines'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|':'
comment|'# no var on the last line ("PREFIX End:")'
newline|'\n'
indent|'                    '
name|'if'
name|'prefix'
op|':'
name|'line'
op|'='
name|'line'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
comment|'# strip prefix'
newline|'\n'
name|'if'
name|'suffix'
op|':'
name|'line'
op|'='
name|'line'
op|'['
op|':'
op|'-'
name|'len'
op|'('
name|'suffix'
op|')'
op|']'
comment|'# strip suffix'
newline|'\n'
name|'line'
op|'='
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'continued_for'
op|':'
newline|'\n'
indent|'                        '
name|'variable'
op|'='
name|'continued_for'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'endswith'
op|'('
string|"'\\\\'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'line'
op|'='
name|'line'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'continued_for'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'emacs_vars'
op|'['
name|'variable'
op|']'
op|'+='
string|"' '"
op|'+'
name|'line'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'try'
op|':'
newline|'\n'
indent|'                            '
name|'variable'
op|','
name|'value'
op|'='
name|'line'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                            '
name|'log'
op|'.'
name|'debug'
op|'('
string|'"local variables error: missing colon "'
nl|'\n'
string|'"in local variables entry: \'%s\'"'
op|'%'
name|'line'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
comment|'# Do NOT lowercase the variable name, because Emacs only'
nl|'\n'
comment|'# allows "mode" (and not "Mode", "MoDe", etc.) in this block.'
nl|'\n'
dedent|''
name|'value'
op|'='
name|'value'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'value'
op|'.'
name|'endswith'
op|'('
string|"'\\\\'"
op|')'
op|':'
newline|'\n'
indent|'                            '
name|'value'
op|'='
name|'value'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'continued_for'
op|'='
name|'variable'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'continued_for'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'emacs_vars'
op|'['
name|'variable'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
comment|'# Unquote values.'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'var'
op|','
name|'val'
name|'in'
name|'emacs_vars'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'len'
op|'('
name|'val'
op|')'
op|'>'
number|'1'
name|'and'
op|'('
name|'val'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
name|'and'
name|'val'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
nl|'\n'
name|'or'
name|'val'
op|'.'
name|'startswith'
op|'('
string|'\'"\''
op|')'
name|'and'
name|'val'
op|'.'
name|'endswith'
op|'('
string|'\'"\''
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'emacs_vars'
op|'['
name|'var'
op|']'
op|'='
name|'val'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'emacs_vars'
newline|'\n'
nl|'\n'
comment|'# Cribbed from a post by Bart Lateur:'
nl|'\n'
comment|'# <http://www.nntp.perl.org/group/perl.macperl.anyperl/154>'
nl|'\n'
DECL|variable|_detab_re
dedent|''
name|'_detab_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(.*?)\\t'"
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
DECL|member|_detab_sub
name|'def'
name|'_detab_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'g1'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'return'
name|'g1'
op|'+'
op|'('
string|"' '"
op|'*'
op|'('
name|'self'
op|'.'
name|'tab_width'
op|'-'
name|'len'
op|'('
name|'g1'
op|')'
op|'%'
name|'self'
op|'.'
name|'tab_width'
op|')'
op|')'
newline|'\n'
DECL|member|_detab
dedent|''
name|'def'
name|'_detab'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'r"""Remove (leading?) tabs from a file.\n\n            >>> m = Markdown()\n            >>> m._detab("\\tfoo")\n            \'    foo\'\n            >>> m._detab("  \\tfoo")\n            \'    foo\'\n            >>> m._detab("\\t  foo")\n            \'      foo\'\n            >>> m._detab("  foo")\n            \'  foo\'\n            >>> m._detab("  foo\\n\\tbar\\tblam")\n            \'  foo\\n    bar blam\'\n        """'
newline|'\n'
name|'if'
string|"'\\t'"
name|'not'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'text'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_detab_re'
op|'.'
name|'subn'
op|'('
name|'self'
op|'.'
name|'_detab_sub'
op|','
name|'text'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|_block_tags_a
dedent|''
name|'_block_tags_a'
op|'='
string|"'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math|ins|del'"
newline|'\n'
name|'_strict_tag_block_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n        (                       # save in \\1\n            ^                   # start of line  (with re.M)\n            <(%s)               # start tag = \\2\n            \\b                  # word break\n            (.*\\n)*?            # any number of lines, minimally matching\n            </\\2>               # the matching end tag\n            [ \\t]*              # trailing spaces/tabs\n            (?=\\n+|\\Z)          # followed by a newline or end of document\n        )\n        """'
op|'%'
name|'_block_tags_a'
op|','
nl|'\n'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_block_tags_b
name|'_block_tags_b'
op|'='
string|"'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|script|noscript|form|fieldset|iframe|math'"
newline|'\n'
name|'_liberal_tag_block_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n        (                       # save in \\1\n            ^                   # start of line  (with re.M)\n            <(%s)               # start tag = \\2\n            \\b                  # word break\n            (.*\\n)*?            # any number of lines, minimally matching\n            .*</\\2>             # the matching end tag\n            [ \\t]*              # trailing spaces/tabs\n            (?=\\n+|\\Z)          # followed by a newline or end of document\n        )\n        """'
op|'%'
name|'_block_tags_b'
op|','
nl|'\n'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_hash_html_block_sub
name|'def'
name|'_hash_html_block_sub'
op|'('
name|'self'
op|','
name|'match'
op|','
name|'raw'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'html'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'if'
name|'raw'
name|'and'
name|'self'
op|'.'
name|'safe_mode'
op|':'
newline|'\n'
indent|'            '
name|'html'
op|'='
name|'self'
op|'.'
name|'_sanitize_html'
op|'('
name|'html'
op|')'
newline|'\n'
dedent|''
name|'key'
op|'='
name|'_hash_text'
op|'('
name|'html'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'html_blocks'
op|'['
name|'key'
op|']'
op|'='
name|'html'
newline|'\n'
name|'return'
string|'"\\n\\n"'
op|'+'
name|'key'
op|'+'
string|'"\\n\\n"'
newline|'\n'
nl|'\n'
DECL|member|_hash_html_blocks
dedent|''
name|'def'
name|'_hash_html_blocks'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'raw'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hashify HTML blocks\n\n        We only want to do this for block-level HTML tags, such as headers,\n        lists, and tables. That\'s because we still want to wrap <p>s around\n        "paragraphs" that are wrapped in non-block-level tags, such as anchors,\n        phrase emphasis, and spans. The list of tags we\'re looking for is\n        hard-coded.\n\n        @param raw {boolean} indicates if these are raw HTML blocks in\n            the original source. It makes a difference in "safe" mode.\n        """'
newline|'\n'
name|'if'
string|"'<'"
name|'not'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
comment|'# Pass `raw` value into our calls to self._hash_html_block_sub.'
nl|'\n'
dedent|''
name|'hash_html_block_sub'
op|'='
name|'_curry'
op|'('
name|'self'
op|'.'
name|'_hash_html_block_sub'
op|','
name|'raw'
op|'='
name|'raw'
op|')'
newline|'\n'
nl|'\n'
comment|'# First, look for nested blocks, e.g.:'
nl|'\n'
comment|'#   <div>'
nl|'\n'
comment|'#       <div>'
nl|'\n'
comment|'#       tags for inner block must be indented.'
nl|'\n'
comment|'#       </div>'
nl|'\n'
comment|'#   </div>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# The outermost tags must start at the left margin for this to match, and'
nl|'\n'
comment|'# the inner nested divs must be indented.'
nl|'\n'
comment|'# We need to do this before the next, more liberal match, because the next'
nl|'\n'
comment|'# match will start at the first `<div>` and stop at the first `</div>`.'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_strict_tag_block_re'
op|'.'
name|'sub'
op|'('
name|'hash_html_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now match more liberally, simply from `\\n<tag>` to `</tag>\\n`'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_liberal_tag_block_re'
op|'.'
name|'sub'
op|'('
name|'hash_html_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Special case just for <hr />. It was easier to make a special'
nl|'\n'
comment|'# case than to make the other regex more complicated.   '
nl|'\n'
name|'if'
string|'"<hr"'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'_hr_tag_re'
op|'='
name|'_hr_tag_re_from_tab_width'
op|'('
name|'self'
op|'.'
name|'tab_width'
op|')'
newline|'\n'
name|'text'
op|'='
name|'_hr_tag_re'
op|'.'
name|'sub'
op|'('
name|'hash_html_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Special case for standalone HTML comments:'
nl|'\n'
dedent|''
name|'if'
string|'"<!--"'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
comment|'# Delimiters for next comment block.'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'start_idx'
op|'='
name|'text'
op|'.'
name|'index'
op|'('
string|'"<!--"'
op|','
name|'start'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'end_idx'
op|'='
name|'text'
op|'.'
name|'index'
op|'('
string|'"-->"'
op|','
name|'start_idx'
op|')'
op|'+'
number|'3'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'ex'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
nl|'\n'
comment|'# Start position for next comment block search.'
nl|'\n'
dedent|''
name|'start'
op|'='
name|'end_idx'
newline|'\n'
nl|'\n'
comment|'# Validate whitespace before comment.'
nl|'\n'
name|'if'
name|'start_idx'
op|':'
newline|'\n'
comment|'# - Up to `tab_width - 1` spaces before start_idx.'
nl|'\n'
indent|'                    '
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'self'
op|'.'
name|'tab_width'
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'text'
op|'['
name|'start_idx'
op|'-'
number|'1'
op|']'
op|'!='
string|"' '"
op|':'
newline|'\n'
indent|'                            '
name|'break'
newline|'\n'
dedent|''
name|'start_idx'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'start_idx'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                            '
name|'break'
newline|'\n'
comment|'# - Must be preceded by 2 newlines or hit the start of'
nl|'\n'
comment|'#   the document.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'start_idx'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
name|'elif'
name|'start_idx'
op|'=='
number|'1'
name|'and'
name|'text'
op|'['
number|'0'
op|']'
op|'=='
string|"'\\n'"
op|':'
newline|'\n'
indent|'                        '
name|'start_idx'
op|'='
number|'0'
comment|'# to match minute detail of Markdown.pl regex'
newline|'\n'
dedent|''
name|'elif'
name|'text'
op|'['
name|'start_idx'
op|'-'
number|'2'
op|':'
name|'start_idx'
op|']'
op|'=='
string|"'\\n\\n'"
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
nl|'\n'
comment|'# Validate whitespace after comment.'
nl|'\n'
comment|'# - Any number of spaces and tabs.'
nl|'\n'
dedent|''
dedent|''
name|'while'
name|'end_idx'
op|'<'
name|'len'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'text'
op|'['
name|'end_idx'
op|']'
name|'not'
name|'in'
string|"' \\t'"
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'end_idx'
op|'+='
number|'1'
newline|'\n'
comment|'# - Must be following by 2 newlines or hit end of text.'
nl|'\n'
dedent|''
name|'if'
name|'text'
op|'['
name|'end_idx'
op|':'
name|'end_idx'
op|'+'
number|'2'
op|']'
name|'not'
name|'in'
op|'('
string|"''"
op|','
string|"'\\n'"
op|','
string|"'\\n\\n'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Escape and hash (must match `_hash_html_block_sub`).'
nl|'\n'
dedent|''
name|'html'
op|'='
name|'text'
op|'['
name|'start_idx'
op|':'
name|'end_idx'
op|']'
newline|'\n'
name|'if'
name|'raw'
name|'and'
name|'self'
op|'.'
name|'safe_mode'
op|':'
newline|'\n'
indent|'                    '
name|'html'
op|'='
name|'self'
op|'.'
name|'_sanitize_html'
op|'('
name|'html'
op|')'
newline|'\n'
dedent|''
name|'key'
op|'='
name|'_hash_text'
op|'('
name|'html'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'html_blocks'
op|'['
name|'key'
op|']'
op|'='
name|'html'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
string|'"\\n\\n"'
op|'+'
name|'key'
op|'+'
string|'"\\n\\n"'
op|'+'
name|'text'
op|'['
name|'end_idx'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|'"xml"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
comment|'# Treat XML processing instructions and namespaced one-liner'
nl|'\n'
comment|'# tags as if they were block HTML tags. E.g., if standalone'
nl|'\n'
comment|'# (i.e. are their own paragraph), the following do not get '
nl|'\n'
comment|'# wrapped in a <p> tag:'
nl|'\n'
comment|'#    <?foo bar?>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="chapter_1.md"/>'
nl|'\n'
indent|'            '
name|'_xml_oneliner_re'
op|'='
name|'_xml_oneliner_re_from_tab_width'
op|'('
name|'self'
op|'.'
name|'tab_width'
op|')'
newline|'\n'
name|'text'
op|'='
name|'_xml_oneliner_re'
op|'.'
name|'sub'
op|'('
name|'hash_html_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_strip_link_definitions
dedent|''
name|'def'
name|'_strip_link_definitions'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Strips link definitions from text, stores the URLs and titles in'
nl|'\n'
comment|'# hash references.'
nl|'\n'
indent|'        '
name|'less_than_tab'
op|'='
name|'self'
op|'.'
name|'tab_width'
op|'-'
number|'1'
newline|'\n'
nl|'\n'
comment|'# Link defs are in the form:'
nl|'\n'
comment|'#   [id]: url "optional title"'
nl|'\n'
name|'_link_def_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n            ^[ ]{0,%d}\\[(.+)\\]: # id = \\1\n              [ \\t]*\n              \\n?               # maybe *one* newline\n              [ \\t]*\n            <?(.+?)>?           # url = \\2\n              [ \\t]*\n            (?:\n                \\n?             # maybe one newline\n                [ \\t]*\n                (?<=\\s)         # lookbehind for whitespace\n                [\'"(]\n                ([^\\n]*)        # title = \\3\n                [\'")]\n                [ \\t]*\n            )?  # title is optional\n            (?:\\n+|\\Z)\n            """'
op|'%'
name|'less_than_tab'
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'U'
op|')'
newline|'\n'
name|'return'
name|'_link_def_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_extract_link_def_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_extract_link_def_sub
dedent|''
name|'def'
name|'_extract_link_def_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|','
name|'url'
op|','
name|'title'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'key'
op|'='
name|'id'
op|'.'
name|'lower'
op|'('
op|')'
comment|'# Link IDs are case-insensitive'
newline|'\n'
name|'self'
op|'.'
name|'urls'
op|'['
name|'key'
op|']'
op|'='
name|'self'
op|'.'
name|'_encode_amps_and_angles'
op|'('
name|'url'
op|')'
newline|'\n'
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'titles'
op|'['
name|'key'
op|']'
op|'='
name|'title'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
newline|'\n'
dedent|''
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|member|_extract_footnote_def_sub
dedent|''
name|'def'
name|'_extract_footnote_def_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id'
op|','
name|'text'
op|'='
name|'match'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'text'
op|'='
name|'_dedent'
op|'('
name|'text'
op|','
name|'skip_first_line'
op|'='
name|'not'
name|'text'
op|'.'
name|'startswith'
op|'('
string|"'\\n'"
op|')'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'normed_id'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\W'"
op|','
string|"'-'"
op|','
name|'id'
op|')'
newline|'\n'
comment|'# Ensure footnote text ends with a couple newlines (for some'
nl|'\n'
comment|'# block gamut matches).'
nl|'\n'
name|'self'
op|'.'
name|'footnotes'
op|'['
name|'normed_id'
op|']'
op|'='
name|'text'
op|'+'
string|'"\\n\\n"'
newline|'\n'
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|member|_strip_footnote_definitions
dedent|''
name|'def'
name|'_strip_footnote_definitions'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A footnote definition looks like this:\n\n            [^note-id]: Text of the note.\n\n                May include one or more indented paragraphs.\n\n        Where,\n        - The \'note-id\' can be pretty much anything, though typically it\n          is the number of the footnote.\n        - The first paragraph may start on the next line, like so:\n            \n            [^note-id]:\n                Text of the note.\n        """'
newline|'\n'
name|'less_than_tab'
op|'='
name|'self'
op|'.'
name|'tab_width'
op|'-'
number|'1'
newline|'\n'
name|'footnote_def_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n            ^[ ]{0,%d}\\[\\^(.+)\\]:   # id = \\1\n            [ \\t]*\n            (                       # footnote text = \\2\n              # First line need not start with the spaces.\n              (?:\\s*.*\\n+)\n              (?:\n                (?:[ ]{%d} | \\t)  # Subsequent lines must be indented.\n                .*\\n+\n              )*\n            )\n            # Lookahead for non-space at line-start, or end of doc.\n            (?:(?=^[ ]{0,%d}\\S)|\\Z)\n            '''"
op|'%'
op|'('
name|'less_than_tab'
op|','
name|'self'
op|'.'
name|'tab_width'
op|','
name|'self'
op|'.'
name|'tab_width'
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
name|'return'
name|'footnote_def_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_extract_footnote_def_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_hr_res
dedent|''
name|'_hr_res'
op|'='
op|'['
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"^[ ]{0,2}([ ]?\\*[ ]?){3,}[ \\t]*$"'
op|','
name|'re'
op|'.'
name|'M'
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"^[ ]{0,2}([ ]?\\-[ ]?){3,}[ \\t]*$"'
op|','
name|'re'
op|'.'
name|'M'
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"^[ ]{0,2}([ ]?\\_[ ]?){3,}[ \\t]*$"'
op|','
name|'re'
op|'.'
name|'M'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_run_block_gamut
name|'def'
name|'_run_block_gamut'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# These are all the transformations that form block-level'
nl|'\n'
comment|'# tags like paragraphs, headers, and list items.'
nl|'\n'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_headers'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do Horizontal Rules:'
nl|'\n'
name|'hr'
op|'='
string|'"\\n<hr"'
op|'+'
name|'self'
op|'.'
name|'empty_element_suffix'
op|'+'
string|'"\\n"'
newline|'\n'
name|'for'
name|'hr_re'
name|'in'
name|'self'
op|'.'
name|'_hr_res'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'hr_re'
op|'.'
name|'sub'
op|'('
name|'hr'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_lists'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|'"pyshell"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_prepare_pyshell_blocks'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_code_blocks'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_block_quotes'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# We already ran _HashHTMLBlocks() before, in Markdown(), but that'
nl|'\n'
comment|'# was to escape raw HTML in the original Markdown source. This time,'
nl|'\n'
comment|"# we're escaping the markup we've just created, so that we don't wrap"
nl|'\n'
comment|'# <p> tags around block-level tags.'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_hash_html_blocks'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_form_paragraphs'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_pyshell_block_sub
dedent|''
name|'def'
name|'_pyshell_block_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'0'
op|')'
op|'.'
name|'splitlines'
op|'('
number|'0'
op|')'
newline|'\n'
name|'_dedentlines'
op|'('
name|'lines'
op|')'
newline|'\n'
name|'indent'
op|'='
string|"' '"
op|'*'
name|'self'
op|'.'
name|'tab_width'
newline|'\n'
name|'s'
op|'='
op|'('
string|"'\\n'"
comment|'# separate from possible cuddled paragraph'
nl|'\n'
op|'+'
name|'indent'
op|'+'
op|'('
string|"'\\n'"
op|'+'
name|'indent'
op|')'
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
nl|'\n'
op|'+'
string|"'\\n\\n'"
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|_prepare_pyshell_blocks
dedent|''
name|'def'
name|'_prepare_pyshell_blocks'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that Python interactive shell sessions are put in\n        code blocks -- even if not properly indented.\n        """'
newline|'\n'
name|'if'
string|'">>>"'
name|'not'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'less_than_tab'
op|'='
name|'self'
op|'.'
name|'tab_width'
op|'-'
number|'1'
newline|'\n'
name|'_pyshell_block_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n            ^([ ]{0,%d})>>>[ ].*\\n   # first line\n            ^(\\1.*\\S+.*\\n)*         # any number of subsequent lines\n            ^\\n                     # ends with a blank line\n            """'
op|'%'
name|'less_than_tab'
op|','
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'_pyshell_block_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_pyshell_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run_span_gamut
dedent|''
name|'def'
name|'_run_span_gamut'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# These are all the transformations that occur *within* block-level'
nl|'\n'
comment|'# tags like paragraphs, headers, and list items.'
nl|'\n'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_code_spans'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_escape_special_chars'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Process anchor and image tags.'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_links'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make links out of things like `<http://example.com/>`'
nl|'\n'
comment|'# Must come after _do_links(), because you can use < and >'
nl|'\n'
comment|'# delimiters in inline links like [this](<url>).'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_auto_links'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|'"link-patterns"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_link_patterns'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'text'
op|'='
name|'self'
op|'.'
name|'_encode_amps_and_angles'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_do_italics_and_bold'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Do hard breaks:'
nl|'\n'
name|'text'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|'r" {2,}\\n"'
op|','
string|'" <br%s\\n"'
op|'%'
name|'self'
op|'.'
name|'empty_element_suffix'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
comment|'# "Sorta" because auto-links are identified as "tag" tokens.'
nl|'\n'
dedent|''
name|'_sorta_html_tokenize_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n        (\n            # tag\n            </?         \n            (?:\\w+)                                     # tag name\n            (?:\\s+(?:[\\w-]+:)?[\\w-]+=(?:".*?"|\'.*?\'))*  # attributes\n            \\s*/?>\n            |\n            # auto-link (e.g., <http://www.activestate.com/>)\n            <\\w+[^>]*>\n            |\n            <!--.*?-->      # comment\n            |\n            <\\?.*?\\?>       # processing instruction\n        )\n        """'
op|','
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_escape_special_chars
name|'def'
name|'_escape_special_chars'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Python markdown note: the HTML tokenization here differs from'
nl|'\n'
comment|'# that in Markdown.pl, hence the behaviour for subtle cases can'
nl|'\n'
comment|'# differ (I believe the tokenizer here does a better job because'
nl|'\n'
comment|"# it isn't susceptible to unmatched '<' and '>' in HTML tags)."
nl|'\n'
comment|"# Note, however, that '>' is not allowed in an auto-link URL"
nl|'\n'
comment|'# here.'
nl|'\n'
indent|'        '
name|'escaped'
op|'='
op|'['
op|']'
newline|'\n'
name|'is_html_markup'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'token'
name|'in'
name|'self'
op|'.'
name|'_sorta_html_tokenize_re'
op|'.'
name|'split'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'is_html_markup'
op|':'
newline|'\n'
comment|'# Within tags/HTML-comments/auto-links, encode * and _'
nl|'\n'
comment|"# so they don't conflict with their use in Markdown for"
nl|'\n'
comment|"# italics and strong.  We're replacing each such"
nl|'\n'
comment|'# character with its corresponding MD5 checksum value;'
nl|'\n'
comment|'# this is likely overkill, but it should prevent us from'
nl|'\n'
comment|'# colliding with the escape values by accident.'
nl|'\n'
indent|'                '
name|'escaped'
op|'.'
name|'append'
op|'('
name|'token'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
nl|'\n'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'escaped'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_encode_backslash_escapes'
op|'('
name|'token'
op|')'
op|')'
newline|'\n'
dedent|''
name|'is_html_markup'
op|'='
name|'not'
name|'is_html_markup'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'escaped'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_hash_html_spans
dedent|''
name|'def'
name|'_hash_html_spans'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Used for safe_mode.'
nl|'\n'
nl|'\n'
DECL|function|_is_auto_link
indent|'        '
name|'def'
name|'_is_auto_link'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"':'"
name|'in'
name|'s'
name|'and'
name|'self'
op|'.'
name|'_auto_link_re'
op|'.'
name|'match'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
string|"'@'"
name|'in'
name|'s'
name|'and'
name|'self'
op|'.'
name|'_auto_email_link_re'
op|'.'
name|'match'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'tokens'
op|'='
op|'['
op|']'
newline|'\n'
name|'is_html_markup'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'token'
name|'in'
name|'self'
op|'.'
name|'_sorta_html_tokenize_re'
op|'.'
name|'split'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'is_html_markup'
name|'and'
name|'not'
name|'_is_auto_link'
op|'('
name|'token'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sanitized'
op|'='
name|'self'
op|'.'
name|'_sanitize_html'
op|'('
name|'token'
op|')'
newline|'\n'
name|'key'
op|'='
name|'_hash_text'
op|'('
name|'sanitized'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'html_spans'
op|'['
name|'key'
op|']'
op|'='
name|'sanitized'
newline|'\n'
name|'tokens'
op|'.'
name|'append'
op|'('
name|'key'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'tokens'
op|'.'
name|'append'
op|'('
name|'token'
op|')'
newline|'\n'
dedent|''
name|'is_html_markup'
op|'='
name|'not'
name|'is_html_markup'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'tokens'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_unhash_html_spans
dedent|''
name|'def'
name|'_unhash_html_spans'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'sanitized'
name|'in'
name|'self'
op|'.'
name|'html_spans'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'key'
op|','
name|'sanitized'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_sanitize_html
dedent|''
name|'def'
name|'_sanitize_html'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'safe_mode'
op|'=='
string|'"replace"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'html_removed_text'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'safe_mode'
op|'=='
string|'"escape"'
op|':'
newline|'\n'
indent|'            '
name|'replacements'
op|'='
op|'['
nl|'\n'
op|'('
string|"'&'"
op|','
string|"'&amp;'"
op|')'
op|','
nl|'\n'
op|'('
string|"'<'"
op|','
string|"'&lt;'"
op|')'
op|','
nl|'\n'
op|'('
string|"'>'"
op|','
string|"'&gt;'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'before'
op|','
name|'after'
name|'in'
name|'replacements'
op|':'
newline|'\n'
indent|'                '
name|'s'
op|'='
name|'s'
op|'.'
name|'replace'
op|'('
name|'before'
op|','
name|'after'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'MarkdownError'
op|'('
string|'"invalid value for \'safe_mode\': %r (must be "'
nl|'\n'
string|'"\'escape\' or \'replace\')"'
op|'%'
name|'self'
op|'.'
name|'safe_mode'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'_tail_of_inline_link_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'\'\'\n          # Match tail of: [text](/url/) or [text](/url/ "title")\n          \\(            # literal paren\n            [ \\t]*\n            (?P<url>            # \\1\n                <.*?>\n                |\n                .*?\n            )\n            [ \\t]*\n            (                   # \\2\n              ([\'"])            # quote char = \\3\n              (?P<title>.*?)\n              \\3                # matching quote\n            )?                  # title is optional\n          \\)\n        \'\'\''
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
name|'_tail_of_reference_link_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n          # Match tail of: [text][id]\n          [ ]?          # one optional space\n          (?:\\n[ ]*)?   # one optional newline followed by spaces\n          \\[\n            (?P<id>.*?)\n          \\]\n        '''"
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_links
name|'def'
name|'_do_links'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Turn Markdown link shortcuts into XHTML <a> and <img> tags.\n\n        This is a combination of Markdown.pl\'s _DoAnchors() and\n        _DoImages(). They are done together because that simplified the\n        approach. It was necessary to use a different approach than\n        Markdown.pl because of the lack of atomic matching support in\n        Python\'s regex engine used in $g_nested_brackets.\n        """'
newline|'\n'
name|'MAX_LINK_TEXT_SENTINEL'
op|'='
number|'3000'
comment|'# markdown2 issue 24'
newline|'\n'
nl|'\n'
comment|'# `anchor_allowed_pos` is used to support img links inside'
nl|'\n'
comment|"# anchors, but not anchors inside anchors. An anchor's start"
nl|'\n'
comment|'# pos must be `>= anchor_allowed_pos`.'
nl|'\n'
name|'anchor_allowed_pos'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'curr_pos'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
comment|'# Handle the next link.'
newline|'\n'
comment|"# The next '[' is the start of:"
nl|'\n'
comment|'# - an inline anchor:   [text](url "title")'
nl|'\n'
comment|'# - a reference anchor: [text][id]'
nl|'\n'
comment|'# - an inline img:      ![text](url "title")'
nl|'\n'
comment|'# - a reference img:    ![text][id]'
nl|'\n'
comment|'# - a footnote ref:     [^id]'
nl|'\n'
comment|"#   (Only if 'footnotes' extra enabled)"
nl|'\n'
comment|'# - a footnote defn:    [^id]: ...'
nl|'\n'
comment|"#   (Only if 'footnotes' extra enabled) These have already"
nl|'\n'
comment|'#   been stripped in _strip_footnote_definitions() so no'
nl|'\n'
comment|'#   need to watch for them.'
nl|'\n'
comment|'# - a link definition:  [id]: url "title"'
nl|'\n'
comment|'#   These have already been stripped in'
nl|'\n'
comment|'#   _strip_link_definitions() so no need to watch for them.'
nl|'\n'
comment|'# - not markup:         [...anything else...'
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start_idx'
op|'='
name|'text'
op|'.'
name|'index'
op|'('
string|"'['"
op|','
name|'curr_pos'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'text_length'
op|'='
name|'len'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|"# Find the matching closing ']'."
nl|'\n'
comment|'# Markdown.pl allows *matching* brackets in link text so we'
nl|'\n'
comment|"# will here too. Markdown.pl *doesn't* currently allow"
nl|'\n'
comment|"# matching brackets in img alt text -- we'll differ in that"
nl|'\n'
comment|'# regard.'
nl|'\n'
name|'bracket_depth'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'p'
name|'in'
name|'range'
op|'('
name|'start_idx'
op|'+'
number|'1'
op|','
name|'min'
op|'('
name|'start_idx'
op|'+'
name|'MAX_LINK_TEXT_SENTINEL'
op|','
nl|'\n'
name|'text_length'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ch'
op|'='
name|'text'
op|'['
name|'p'
op|']'
newline|'\n'
name|'if'
name|'ch'
op|'=='
string|"']'"
op|':'
newline|'\n'
indent|'                    '
name|'bracket_depth'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'bracket_depth'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'['"
op|':'
newline|'\n'
indent|'                    '
name|'bracket_depth'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Closing bracket not found within sentinel length.'
nl|'\n'
comment|"# This isn't markup."
nl|'\n'
indent|'                '
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
number|'1'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'link_text'
op|'='
name|'text'
op|'['
name|'start_idx'
op|'+'
number|'1'
op|':'
name|'p'
op|']'
newline|'\n'
nl|'\n'
comment|'# Possibly a footnote ref?'
nl|'\n'
name|'if'
string|'"footnotes"'
name|'in'
name|'self'
op|'.'
name|'extras'
name|'and'
name|'link_text'
op|'.'
name|'startswith'
op|'('
string|'"^"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'normed_id'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'\\W'"
op|','
string|"'-'"
op|','
name|'link_text'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
name|'if'
name|'normed_id'
name|'in'
name|'self'
op|'.'
name|'footnotes'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'footnote_ids'
op|'.'
name|'append'
op|'('
name|'normed_id'
op|')'
newline|'\n'
name|'result'
op|'='
string|'\'<sup class="footnote-ref" id="fnref-%s">\''
string|'\'<a href="#fn-%s">%s</a></sup>\''
op|'%'
op|'('
name|'normed_id'
op|','
name|'normed_id'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'footnote_ids'
op|')'
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
name|'result'
op|'+'
name|'text'
op|'['
name|'p'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# This id isn't defined, leave the markup alone."
nl|'\n'
indent|'                    '
name|'curr_pos'
op|'='
name|'p'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Now determine what this is by the remainder.'
nl|'\n'
dedent|''
name|'p'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'p'
op|'=='
name|'text_length'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
comment|'# Inline anchor or img?'
nl|'\n'
dedent|''
name|'if'
name|'text'
op|'['
name|'p'
op|']'
op|'=='
string|"'('"
op|':'
comment|'# attempt at perf improvement'
newline|'\n'
indent|'                '
name|'match'
op|'='
name|'self'
op|'.'
name|'_tail_of_inline_link_re'
op|'.'
name|'match'
op|'('
name|'text'
op|','
name|'p'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
comment|'# Handle an inline anchor or img.'
nl|'\n'
indent|'                    '
name|'is_img'
op|'='
name|'start_idx'
op|'>'
number|'0'
name|'and'
name|'text'
op|'['
name|'start_idx'
op|'-'
number|'1'
op|']'
op|'=='
string|'"!"'
newline|'\n'
name|'if'
name|'is_img'
op|':'
newline|'\n'
indent|'                        '
name|'start_idx'
op|'-='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'url'
op|','
name|'title'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
string|'"url"'
op|')'
op|','
name|'match'
op|'.'
name|'group'
op|'('
string|'"title"'
op|')'
newline|'\n'
name|'if'
name|'url'
name|'and'
name|'url'
op|'['
number|'0'
op|']'
op|'=='
string|"'<'"
op|':'
newline|'\n'
indent|'                        '
name|'url'
op|'='
name|'url'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
comment|"# '<url>' -> 'url'"
newline|'\n'
comment|"# We've got to encode these to avoid conflicting"
nl|'\n'
comment|'# with italics/bold.'
nl|'\n'
dedent|''
name|'url'
op|'='
name|'url'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'                        '
name|'title_str'
op|'='
string|'\' title="%s"\''
op|'%'
name|'title'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'title_str'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'is_img'
op|':'
newline|'\n'
indent|'                        '
name|'result'
op|'='
string|'\'<img src="%s" alt="%s"%s%s\''
op|'%'
op|'('
name|'url'
op|','
name|'link_text'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
op|','
nl|'\n'
name|'title_str'
op|','
name|'self'
op|'.'
name|'empty_element_suffix'
op|')'
newline|'\n'
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result'
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
name|'result'
op|'+'
name|'text'
op|'['
name|'match'
op|'.'
name|'end'
op|'('
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'start_idx'
op|'>='
name|'anchor_allowed_pos'
op|':'
newline|'\n'
indent|'                        '
name|'result_head'
op|'='
string|'\'<a href="%s"%s>\''
op|'%'
op|'('
name|'url'
op|','
name|'title_str'
op|')'
newline|'\n'
name|'result'
op|'='
string|"'%s%s</a>'"
op|'%'
op|'('
name|'result_head'
op|','
name|'link_text'
op|')'
newline|'\n'
comment|'# <img> allowed from curr_pos on, <a> from'
nl|'\n'
comment|'# anchor_allowed_pos on.'
nl|'\n'
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result_head'
op|')'
newline|'\n'
name|'anchor_allowed_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result'
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
name|'result'
op|'+'
name|'text'
op|'['
name|'match'
op|'.'
name|'end'
op|'('
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Anchor not allowed here.'
nl|'\n'
indent|'                        '
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
number|'1'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
comment|'# Reference anchor or img?'
nl|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'match'
op|'='
name|'self'
op|'.'
name|'_tail_of_reference_link_re'
op|'.'
name|'match'
op|'('
name|'text'
op|','
name|'p'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
comment|'# Handle a reference-style anchor or img.'
nl|'\n'
indent|'                    '
name|'is_img'
op|'='
name|'start_idx'
op|'>'
number|'0'
name|'and'
name|'text'
op|'['
name|'start_idx'
op|'-'
number|'1'
op|']'
op|'=='
string|'"!"'
newline|'\n'
name|'if'
name|'is_img'
op|':'
newline|'\n'
indent|'                        '
name|'start_idx'
op|'-='
number|'1'
newline|'\n'
dedent|''
name|'link_id'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
string|'"id"'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'link_id'
op|':'
newline|'\n'
indent|'                        '
name|'link_id'
op|'='
name|'link_text'
op|'.'
name|'lower'
op|'('
op|')'
comment|'# for links like [this][]'
newline|'\n'
dedent|''
name|'if'
name|'link_id'
name|'in'
name|'self'
op|'.'
name|'urls'
op|':'
newline|'\n'
indent|'                        '
name|'url'
op|'='
name|'self'
op|'.'
name|'urls'
op|'['
name|'link_id'
op|']'
newline|'\n'
comment|"# We've got to encode these to avoid conflicting"
nl|'\n'
comment|'# with italics/bold.'
nl|'\n'
name|'url'
op|'='
name|'url'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
newline|'\n'
name|'title'
op|'='
name|'self'
op|'.'
name|'titles'
op|'.'
name|'get'
op|'('
name|'link_id'
op|')'
newline|'\n'
name|'if'
name|'title'
op|':'
newline|'\n'
indent|'                            '
name|'title'
op|'='
name|'title'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
newline|'\n'
name|'title_str'
op|'='
string|'\' title="%s"\''
op|'%'
name|'title'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'title_str'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'is_img'
op|':'
newline|'\n'
indent|'                            '
name|'result'
op|'='
string|'\'<img src="%s" alt="%s"%s%s\''
op|'%'
op|'('
name|'url'
op|','
name|'link_text'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
op|','
nl|'\n'
name|'title_str'
op|','
name|'self'
op|'.'
name|'empty_element_suffix'
op|')'
newline|'\n'
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result'
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
name|'result'
op|'+'
name|'text'
op|'['
name|'match'
op|'.'
name|'end'
op|'('
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'start_idx'
op|'>='
name|'anchor_allowed_pos'
op|':'
newline|'\n'
indent|'                            '
name|'result'
op|'='
string|'\'<a href="%s"%s>%s</a>\''
op|'%'
op|'('
name|'url'
op|','
name|'title_str'
op|','
name|'link_text'
op|')'
newline|'\n'
name|'result_head'
op|'='
string|'\'<a href="%s"%s>\''
op|'%'
op|'('
name|'url'
op|','
name|'title_str'
op|')'
newline|'\n'
name|'result'
op|'='
string|"'%s%s</a>'"
op|'%'
op|'('
name|'result_head'
op|','
name|'link_text'
op|')'
newline|'\n'
comment|'# <img> allowed from curr_pos on, <a> from'
nl|'\n'
comment|'# anchor_allowed_pos on.'
nl|'\n'
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result_head'
op|')'
newline|'\n'
name|'anchor_allowed_pos'
op|'='
name|'start_idx'
op|'+'
name|'len'
op|'('
name|'result'
op|')'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start_idx'
op|']'
op|'+'
name|'result'
op|'+'
name|'text'
op|'['
name|'match'
op|'.'
name|'end'
op|'('
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Anchor not allowed here.'
nl|'\n'
indent|'                            '
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
number|'1'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# This id isn't defined, leave the markup alone."
nl|'\n'
indent|'                        '
name|'curr_pos'
op|'='
name|'match'
op|'.'
name|'end'
op|'('
op|')'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
comment|"# Otherwise, it isn't markup."
nl|'\n'
dedent|''
dedent|''
name|'curr_pos'
op|'='
name|'start_idx'
op|'+'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_setext_h_re
dedent|''
name|'_setext_h_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'^(.+)[ \\t]*\\n(=+|-+)[ \\t]*\\n+'"
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
DECL|member|_setext_h_sub
name|'def'
name|'_setext_h_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'n'
op|'='
op|'{'
string|'"="'
op|':'
number|'1'
op|','
string|'"-"'
op|':'
number|'2'
op|'}'
op|'['
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'demote_headers'
op|'='
name|'self'
op|'.'
name|'extras'
op|'.'
name|'get'
op|'('
string|'"demote-headers"'
op|')'
newline|'\n'
name|'if'
name|'demote_headers'
op|':'
newline|'\n'
indent|'            '
name|'n'
op|'='
name|'min'
op|'('
name|'n'
op|'+'
name|'demote_headers'
op|','
number|'6'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'"<h%d>%s</h%d>\\n\\n"'
op|'%'
op|'('
name|'n'
op|','
name|'self'
op|'.'
name|'_run_span_gamut'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_atx_h_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n        ^(\\#{1,6})  # \\1 = string of #'s\n        [ \\t]*\n        (.+?)       # \\2 = Header text\n        [ \\t]*\n        (?<!\\\\)     # ensure not an escaped trailing '#'\n        \\#*         # optional closing #'s (not counted)\n        \\n+\n        '''"
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
DECL|member|_atx_h_sub
name|'def'
name|'_atx_h_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'n'
op|'='
name|'len'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'demote_headers'
op|'='
name|'self'
op|'.'
name|'extras'
op|'.'
name|'get'
op|'('
string|'"demote-headers"'
op|')'
newline|'\n'
name|'if'
name|'demote_headers'
op|':'
newline|'\n'
indent|'            '
name|'n'
op|'='
name|'min'
op|'('
name|'n'
op|'+'
name|'demote_headers'
op|','
number|'6'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'"<h%d>%s</h%d>\\n\\n"'
op|'%'
op|'('
name|'n'
op|','
name|'self'
op|'.'
name|'_run_span_gamut'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
op|','
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_headers
dedent|''
name|'def'
name|'_do_headers'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Setext-style headers:'
nl|'\n'
comment|'#     Header 1'
nl|'\n'
comment|'#     ========'
nl|'\n'
comment|'#  '
nl|'\n'
comment|'#     Header 2'
nl|'\n'
comment|'#     --------'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'self'
op|'.'
name|'_setext_h_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_setext_h_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# atx-style headers:'
nl|'\n'
comment|'#   # Header 1'
nl|'\n'
comment|'#   ## Header 2'
nl|'\n'
comment|'#   ## Header 2 with closing hashes ##'
nl|'\n'
comment|'#   ...'
nl|'\n'
comment|'#   ###### Header 6'
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_atx_h_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_atx_h_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_marker_ul_chars
dedent|''
name|'_marker_ul_chars'
op|'='
string|"'*+-'"
newline|'\n'
DECL|variable|_marker_any
name|'_marker_any'
op|'='
string|"r'(?:[%s]|\\d+\\.)'"
op|'%'
name|'_marker_ul_chars'
newline|'\n'
DECL|variable|_marker_ul
name|'_marker_ul'
op|'='
string|"'(?:[%s])'"
op|'%'
name|'_marker_ul_chars'
newline|'\n'
DECL|variable|_marker_ol
name|'_marker_ol'
op|'='
string|"r'(?:\\d+\\.)'"
newline|'\n'
nl|'\n'
DECL|member|_list_sub
name|'def'
name|'_list_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'lst_type'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
name|'in'
name|'self'
op|'.'
name|'_marker_ul_chars'
name|'and'
string|'"ul"'
name|'or'
string|'"ol"'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_process_list_items'
op|'('
name|'lst'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'list_level'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<%s>\\n%s</%s>\\n"'
op|'%'
op|'('
name|'lst_type'
op|','
name|'result'
op|','
name|'lst_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"<%s>\\n%s</%s>\\n\\n"'
op|'%'
op|'('
name|'lst_type'
op|','
name|'result'
op|','
name|'lst_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_lists
dedent|''
dedent|''
name|'def'
name|'_do_lists'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Form HTML ordered (numbered) and unordered (bulleted) lists.'
nl|'\n'
nl|'\n'
indent|'        '
name|'for'
name|'marker_pat'
name|'in'
op|'('
name|'self'
op|'.'
name|'_marker_ul'
op|','
name|'self'
op|'.'
name|'_marker_ol'
op|')'
op|':'
newline|'\n'
comment|'# Re-usable pattern to match any entire ul or ol list:'
nl|'\n'
indent|'            '
name|'less_than_tab'
op|'='
name|'self'
op|'.'
name|'tab_width'
op|'-'
number|'1'
newline|'\n'
name|'whole_list'
op|'='
string|"r'''\n                (                   # \\1 = whole list\n                  (                 # \\2\n                    [ ]{0,%d}\n                    (%s)            # \\3 = first list item marker\n                    [ \\t]+\n                  )\n                  (?:.+?)\n                  (                 # \\4\n                      \\Z\n                    |\n                      \\n{2,}\n                      (?=\\S)\n                      (?!           # Negative lookahead for another list item marker\n                        [ \\t]*\n                        %s[ \\t]+\n                      )\n                  )\n                )\n            '''"
op|'%'
op|'('
name|'less_than_tab'
op|','
name|'marker_pat'
op|','
name|'marker_pat'
op|')'
newline|'\n'
nl|'\n'
comment|'# We use a different prefix before nested lists than top-level lists.'
nl|'\n'
comment|'# See extended comment in _process_list_items().'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Note: There's a bit of duplication here. My original implementation"
nl|'\n'
comment|'# created a scalar regex pattern as the conditional result of the test on'
nl|'\n'
comment|'# $g_list_level, and then only ran the $text =~ s{...}{...}egmx'
nl|'\n'
comment|'# substitution once, using the scalar as the pattern. This worked,'
nl|'\n'
comment|'# everywhere except when running under MT on my hosting account at Pair'
nl|'\n'
comment|'# Networks. There, this caused all rebuilds to be killed by the reaper (or'
nl|'\n'
comment|'# perhaps they crashed, but that seems incredibly unlikely given that the'
nl|'\n'
comment|"# same script on the same server ran fine *except* under MT. I've spent"
nl|'\n'
comment|"# more time trying to figure out why this is happening than I'd like to"
nl|'\n'
comment|'# admit. My only guess, backed up by the fact that this workaround works,'
nl|'\n'
comment|'# is that Perl optimizes the substition when it can figure out that the'
nl|'\n'
comment|"# pattern will never change, and when this optimization isn't on, we run"
nl|'\n'
comment|'# afoul of the reaper. Thus, the slightly redundant code to that uses two'
nl|'\n'
comment|'# static s/// patterns rather than one conditional pattern.'
nl|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'list_level'
op|':'
newline|'\n'
indent|'                '
name|'sub_list_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"^"'
op|'+'
name|'whole_list'
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
name|'text'
op|'='
name|'sub_list_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_list_sub'
op|','
name|'text'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'list_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"(?:(?<=\\n\\n)|\\A\\n?)"'
op|'+'
name|'whole_list'
op|','
nl|'\n'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
name|'text'
op|'='
name|'list_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_list_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
dedent|''
name|'_list_item_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n        (\\n)?               # leading line = \\1\n        (^[ \\t]*)           # leading whitespace = \\2\n        (%s) [ \\t]+         # list marker = \\3\n        ((?:.+?)            # list item text = \\4\n         (\\n{1,2}))         # eols = \\5\n        (?= \\n* (\\Z | \\2 (%s) [ \\t]+))\n        '''"
op|'%'
op|'('
name|'_marker_any'
op|','
name|'_marker_any'
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_last_li_endswith_two_eols
name|'_last_li_endswith_two_eols'
op|'='
name|'False'
newline|'\n'
DECL|member|_list_item_sub
name|'def'
name|'_list_item_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'item'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'4'
op|')'
newline|'\n'
name|'leading_line'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'leading_space'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'leading_line'
name|'or'
string|'"\\n\\n"'
name|'in'
name|'item'
name|'or'
name|'self'
op|'.'
name|'_last_li_endswith_two_eols'
op|':'
newline|'\n'
indent|'            '
name|'item'
op|'='
name|'self'
op|'.'
name|'_run_block_gamut'
op|'('
name|'self'
op|'.'
name|'_outdent'
op|'('
name|'item'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Recursion for sub-lists:'
nl|'\n'
indent|'            '
name|'item'
op|'='
name|'self'
op|'.'
name|'_do_lists'
op|'('
name|'self'
op|'.'
name|'_outdent'
op|'('
name|'item'
op|')'
op|')'
newline|'\n'
name|'if'
name|'item'
op|'.'
name|'endswith'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'item'
op|'='
name|'item'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'item'
op|'='
name|'self'
op|'.'
name|'_run_span_gamut'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_last_li_endswith_two_eols'
op|'='
op|'('
name|'len'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'5'
op|')'
op|')'
op|'=='
number|'2'
op|')'
newline|'\n'
name|'return'
string|'"<li>%s</li>\\n"'
op|'%'
name|'item'
newline|'\n'
nl|'\n'
DECL|member|_process_list_items
dedent|''
name|'def'
name|'_process_list_items'
op|'('
name|'self'
op|','
name|'list_str'
op|')'
op|':'
newline|'\n'
comment|'# Process the contents of a single ordered or unordered list,'
nl|'\n'
comment|'# splitting it into individual list items.'
nl|'\n'
nl|'\n'
comment|"# The $g_list_level global keeps track of when we're inside a list."
nl|'\n'
comment|'# Each time we enter a list, we increment it; when we leave a list,'
nl|'\n'
comment|"# we decrement. If it's zero, we're not in a list anymore."
nl|'\n'
comment|'#'
nl|'\n'
comment|"# We do this because when we're not inside a list, we want to treat"
nl|'\n'
comment|'# something like this:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#       I recommend upgrading to version'
nl|'\n'
comment|'#       8. Oops, now this line is treated'
nl|'\n'
comment|'#       as a sub-list.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# As a single paragraph, despite the fact that the second line starts'
nl|'\n'
comment|'# with a digit-period-space sequence.'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# Whereas when we're inside a list (or sub-list), that line will be"
nl|'\n'
comment|'# treated as the start of a sub-list. What a kludge, huh? This is'
nl|'\n'
comment|"# an aspect of Markdown's syntax that's hard to parse perfectly"
nl|'\n'
comment|'# without resorting to mind-reading. Perhaps the solution is to'
nl|'\n'
comment|'# change the syntax rules such that sub-lists must start with a'
nl|'\n'
comment|'# starting cardinal number; e.g. "1." or "a.".'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'list_level'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_last_li_endswith_two_eols'
op|'='
name|'False'
newline|'\n'
name|'list_str'
op|'='
name|'list_str'
op|'.'
name|'rstrip'
op|'('
string|"'\\n'"
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
name|'list_str'
op|'='
name|'self'
op|'.'
name|'_list_item_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_list_item_sub'
op|','
name|'list_str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'list_level'
op|'-='
number|'1'
newline|'\n'
name|'return'
name|'list_str'
newline|'\n'
nl|'\n'
DECL|member|_get_pygments_lexer
dedent|''
name|'def'
name|'_get_pygments_lexer'
op|'('
name|'self'
op|','
name|'lexer_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'pygments'
name|'import'
name|'lexers'
op|','
name|'util'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'lexers'
op|'.'
name|'get_lexer_by_name'
op|'('
name|'lexer_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'util'
op|'.'
name|'ClassNotFound'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_color_with_pygments
dedent|''
dedent|''
name|'def'
name|'_color_with_pygments'
op|'('
name|'self'
op|','
name|'codeblock'
op|','
name|'lexer'
op|','
op|'**'
name|'formatter_opts'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'pygments'
newline|'\n'
name|'import'
name|'pygments'
op|'.'
name|'formatters'
newline|'\n'
nl|'\n'
DECL|class|HtmlCodeFormatter
name|'class'
name|'HtmlCodeFormatter'
op|'('
name|'pygments'
op|'.'
name|'formatters'
op|'.'
name|'HtmlFormatter'
op|')'
op|':'
newline|'\n'
DECL|member|_wrap_code
indent|'            '
name|'def'
name|'_wrap_code'
op|'('
name|'self'
op|','
name|'inner'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""A function for use in a Pygments Formatter which\n                wraps in <code> tags.\n                """'
newline|'\n'
name|'yield'
number|'0'
op|','
string|'"<code>"'
newline|'\n'
name|'for'
name|'tup'
name|'in'
name|'inner'
op|':'
newline|'\n'
indent|'                    '
name|'yield'
name|'tup'
newline|'\n'
dedent|''
name|'yield'
number|'0'
op|','
string|'"</code>"'
newline|'\n'
nl|'\n'
DECL|member|wrap
dedent|''
name|'def'
name|'wrap'
op|'('
name|'self'
op|','
name|'source'
op|','
name|'outfile'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""Return the source with a code, pre, and div."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_wrap_div'
op|'('
name|'self'
op|'.'
name|'_wrap_pre'
op|'('
name|'self'
op|'.'
name|'_wrap_code'
op|'('
name|'source'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'formatter'
op|'='
name|'HtmlCodeFormatter'
op|'('
name|'cssclass'
op|'='
string|'"codehilite"'
op|','
op|'**'
name|'formatter_opts'
op|')'
newline|'\n'
name|'return'
name|'pygments'
op|'.'
name|'highlight'
op|'('
name|'codeblock'
op|','
name|'lexer'
op|','
name|'formatter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_code_block_sub
dedent|''
name|'def'
name|'_code_block_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'codeblock'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'codeblock'
op|'='
name|'self'
op|'.'
name|'_outdent'
op|'('
name|'codeblock'
op|')'
newline|'\n'
name|'codeblock'
op|'='
name|'self'
op|'.'
name|'_detab'
op|'('
name|'codeblock'
op|')'
newline|'\n'
name|'codeblock'
op|'='
name|'codeblock'
op|'.'
name|'lstrip'
op|'('
string|"'\\n'"
op|')'
comment|'# trim leading newlines'
newline|'\n'
name|'codeblock'
op|'='
name|'codeblock'
op|'.'
name|'rstrip'
op|'('
op|')'
comment|'# trim trailing whitespace'
newline|'\n'
nl|'\n'
name|'if'
string|'"code-color"'
name|'in'
name|'self'
op|'.'
name|'extras'
name|'and'
name|'codeblock'
op|'.'
name|'startswith'
op|'('
string|'":::"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'lexer_name'
op|','
name|'rest'
op|'='
name|'codeblock'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|','
number|'1'
op|')'
newline|'\n'
name|'lexer_name'
op|'='
name|'lexer_name'
op|'['
number|'3'
op|':'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'lexer'
op|'='
name|'self'
op|'.'
name|'_get_pygments_lexer'
op|'('
name|'lexer_name'
op|')'
newline|'\n'
name|'codeblock'
op|'='
name|'rest'
op|'.'
name|'lstrip'
op|'('
string|'"\\n"'
op|')'
comment|'# Remove lexer declaration line.'
newline|'\n'
name|'if'
name|'lexer'
op|':'
newline|'\n'
indent|'                '
name|'formatter_opts'
op|'='
name|'self'
op|'.'
name|'extras'
op|'['
string|"'code-color'"
op|']'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'colored'
op|'='
name|'self'
op|'.'
name|'_color_with_pygments'
op|'('
name|'codeblock'
op|','
name|'lexer'
op|','
nl|'\n'
op|'**'
name|'formatter_opts'
op|')'
newline|'\n'
name|'return'
string|'"\\n\\n%s\\n\\n"'
op|'%'
name|'colored'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'codeblock'
op|'='
name|'self'
op|'.'
name|'_encode_code'
op|'('
name|'codeblock'
op|')'
newline|'\n'
name|'return'
string|'"\\n\\n<pre><code>%s\\n</code></pre>\\n\\n"'
op|'%'
name|'codeblock'
newline|'\n'
nl|'\n'
DECL|member|_do_code_blocks
dedent|''
name|'def'
name|'_do_code_blocks'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process Markdown `<pre><code>` blocks."""'
newline|'\n'
name|'code_block_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n            (?:\\n\\n|\\A)\n            (               # $1 = the code block -- one or more lines, starting with a space/tab\n              (?:\n                (?:[ ]{%d} | \\t)  # Lines must start with a tab or a tab-width of spaces\n                .*\\n+\n              )+\n            )\n            ((?=^[ ]{0,%d}\\S)|\\Z)   # Lookahead for non-space at line-start, or end of doc\n            '''"
op|'%'
op|'('
name|'self'
op|'.'
name|'tab_width'
op|','
name|'self'
op|'.'
name|'tab_width'
op|')'
op|','
nl|'\n'
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'code_block_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_code_block_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Rules for a code span:'
nl|'\n'
comment|'# - backslash escapes are not interpreted in a code span'
nl|'\n'
comment|'# - to include one or or a run of more backticks the delimiters must'
nl|'\n'
comment|'#   be a longer run of backticks'
nl|'\n'
comment|'# - cannot start or end a code span with a backtick; pad with a'
nl|'\n'
comment|'#   space and that space will be removed in the emitted HTML'
nl|'\n'
comment|'# See `test/tm-cases/escapes.text` for a number of edge-case'
nl|'\n'
comment|'# examples.'
nl|'\n'
dedent|''
name|'_code_span_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n            (?<!\\\\)\n            (`+)        # \\1 = Opening run of `\n            (?!`)       # See Note A test/tm-cases/escapes.text\n            (.+?)       # \\2 = The code block\n            (?<!`)\n            \\1          # Matching closer\n            (?!`)\n        '''"
op|','
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_code_span_sub
name|'def'
name|'_code_span_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|'.'
name|'strip'
op|'('
string|'" \\t"'
op|')'
newline|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'_encode_code'
op|'('
name|'c'
op|')'
newline|'\n'
name|'return'
string|'"<code>%s</code>"'
op|'%'
name|'c'
newline|'\n'
nl|'\n'
DECL|member|_do_code_spans
dedent|''
name|'def'
name|'_do_code_spans'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'#   *   Backtick quotes are used for <code></code> spans.'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#   *   You can use multiple backticks as the delimiters if you want to'
nl|'\n'
comment|'#       include literal backticks in the code span. So, this input:'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#         Just type ``foo `bar` baz`` at the prompt.'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#       Will translate to:'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>'
nl|'\n'
comment|'#     '
nl|'\n'
comment|"#       There's no arbitrary limit to the number of backticks you"
nl|'\n'
comment|'#       can use as delimters. If you need three consecutive backticks'
nl|'\n'
comment|'#       in your code, use four for delimiters, etc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   *   You can use spaces to get literal backticks at the edges:'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#         ... type `` `bar` `` ...'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#       Turns to:'
nl|'\n'
comment|'#     '
nl|'\n'
comment|'#         ... type <code>`bar`</code> ...'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_code_span_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_code_span_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_encode_code
dedent|''
name|'def'
name|'_encode_code'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Encode/escape certain characters inside Markdown code runs.\n        The point is that in code, these characters are literals,\n        and lose their special Markdown meanings.\n        """'
newline|'\n'
name|'replacements'
op|'='
op|'['
nl|'\n'
comment|'# Encode all ampersands; HTML entities are not'
nl|'\n'
comment|'# entities within a Markdown code span.'
nl|'\n'
op|'('
string|"'&'"
op|','
string|"'&amp;'"
op|')'
op|','
nl|'\n'
comment|'# Do the angle bracket song and dance:'
nl|'\n'
op|'('
string|"'<'"
op|','
string|"'&lt;'"
op|')'
op|','
nl|'\n'
op|'('
string|"'>'"
op|','
string|"'&gt;'"
op|')'
op|','
nl|'\n'
comment|'# Now, escape characters that are magic in Markdown:'
nl|'\n'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'{'"
op|','
name|'g_escape_table'
op|'['
string|"'{'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'}'"
op|','
name|'g_escape_table'
op|'['
string|"'}'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'['"
op|','
name|'g_escape_table'
op|'['
string|"'['"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"']'"
op|','
name|'g_escape_table'
op|'['
string|"']'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'\\\\'"
op|','
name|'g_escape_table'
op|'['
string|"'\\\\'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'before'
op|','
name|'after'
name|'in'
name|'replacements'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'before'
op|','
name|'after'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|variable|_strong_re
dedent|''
name|'_strong_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"(\\*\\*|__)(?=\\S)(.+?[*_]*)(?<=\\S)\\1"'
op|','
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
DECL|variable|_em_re
name|'_em_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"(\\*|_)(?=\\S)(.+?)(?<=\\S)\\1"'
op|','
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
DECL|variable|_code_friendly_strong_re
name|'_code_friendly_strong_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"\\*\\*(?=\\S)(.+?[*_]*)(?<=\\S)\\*\\*"'
op|','
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
DECL|variable|_code_friendly_em_re
name|'_code_friendly_em_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"\\*(?=\\S)(.+?)(?<=\\S)\\*"'
op|','
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
DECL|member|_do_italics_and_bold
name|'def'
name|'_do_italics_and_bold'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# <strong> must go first:'
nl|'\n'
indent|'        '
name|'if'
string|'"code-friendly"'
name|'in'
name|'self'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_code_friendly_strong_re'
op|'.'
name|'sub'
op|'('
string|'r"<strong>\\1</strong>"'
op|','
name|'text'
op|')'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_code_friendly_em_re'
op|'.'
name|'sub'
op|'('
string|'r"<em>\\1</em>"'
op|','
name|'text'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'self'
op|'.'
name|'_strong_re'
op|'.'
name|'sub'
op|'('
string|'r"<strong>\\2</strong>"'
op|','
name|'text'
op|')'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_em_re'
op|'.'
name|'sub'
op|'('
string|'r"<em>\\2</em>"'
op|','
name|'text'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'_block_quote_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'''\n        (                           # Wrap whole match in \\1\n          (\n            ^[ \\t]*>[ \\t]?          # '>' at the start of a line\n              .+\\n                  # rest of the first line\n            (.+\\n)*                 # subsequent consecutive lines\n            \\n*                     # blanks\n          )+\n        )\n        '''"
op|','
name|'re'
op|'.'
name|'M'
op|'|'
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
DECL|variable|_bq_one_level_re
name|'_bq_one_level_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^[ \\t]*>[ \\t]?'"
op|','
name|'re'
op|'.'
name|'M'
op|')'
op|';'
newline|'\n'
nl|'\n'
DECL|variable|_html_pre_block_re
name|'_html_pre_block_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(\\s*<pre>.+?</pre>)'"
op|','
name|'re'
op|'.'
name|'S'
op|')'
newline|'\n'
DECL|member|_dedent_two_spaces_sub
name|'def'
name|'_dedent_two_spaces_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'(?m)^  '"
op|','
string|"''"
op|','
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_block_quote_sub
dedent|''
name|'def'
name|'_block_quote_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bq'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'bq'
op|'='
name|'self'
op|'.'
name|'_bq_one_level_re'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'bq'
op|')'
comment|'# trim one level of quoting'
newline|'\n'
name|'bq'
op|'='
name|'self'
op|'.'
name|'_ws_only_line_re'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'bq'
op|')'
comment|'# trim whitespace-only lines'
newline|'\n'
name|'bq'
op|'='
name|'self'
op|'.'
name|'_run_block_gamut'
op|'('
name|'bq'
op|')'
comment|'# recurse'
newline|'\n'
nl|'\n'
name|'bq'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'(?m)^'"
op|','
string|"'  '"
op|','
name|'bq'
op|')'
newline|'\n'
comment|'# These leading spaces screw with <pre> content, so we need to fix that:'
nl|'\n'
name|'bq'
op|'='
name|'self'
op|'.'
name|'_html_pre_block_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_dedent_two_spaces_sub'
op|','
name|'bq'
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|'"<blockquote>\\n%s\\n</blockquote>\\n\\n"'
op|'%'
name|'bq'
newline|'\n'
nl|'\n'
DECL|member|_do_block_quotes
dedent|''
name|'def'
name|'_do_block_quotes'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'>'"
name|'not'
name|'in'
name|'text'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'text'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_block_quote_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_block_quote_sub'
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_form_paragraphs
dedent|''
name|'def'
name|'_form_paragraphs'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Strip leading and trailing lines:'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'text'
op|'.'
name|'strip'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Wrap <p> tags.'
nl|'\n'
name|'grafs'
op|'='
name|'re'
op|'.'
name|'split'
op|'('
string|'r"\\n{2,}"'
op|','
name|'text'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'graf'
name|'in'
name|'enumerate'
op|'('
name|'grafs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'graf'
name|'in'
name|'self'
op|'.'
name|'html_blocks'
op|':'
newline|'\n'
comment|'# Unhashify HTML blocks'
nl|'\n'
indent|'                '
name|'grafs'
op|'['
name|'i'
op|']'
op|'='
name|'self'
op|'.'
name|'html_blocks'
op|'['
name|'graf'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Wrap <p> tags.'
nl|'\n'
indent|'                '
name|'graf'
op|'='
name|'self'
op|'.'
name|'_run_span_gamut'
op|'('
name|'graf'
op|')'
newline|'\n'
name|'grafs'
op|'['
name|'i'
op|']'
op|'='
string|'"<p>"'
op|'+'
name|'graf'
op|'.'
name|'lstrip'
op|'('
string|'" \\t"'
op|')'
op|'+'
string|'"</p>"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
string|'"\\n\\n"'
op|'.'
name|'join'
op|'('
name|'grafs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_footnotes
dedent|''
name|'def'
name|'_add_footnotes'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'footnotes'
op|':'
newline|'\n'
indent|'            '
name|'footer'
op|'='
op|'['
nl|'\n'
string|'\'<div class="footnotes">\''
op|','
nl|'\n'
string|"'<hr'"
op|'+'
name|'self'
op|'.'
name|'empty_element_suffix'
op|','
nl|'\n'
string|"'<ol>'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'i'
op|','
name|'id'
name|'in'
name|'enumerate'
op|'('
name|'self'
op|'.'
name|'footnote_ids'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'i'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                    '
name|'footer'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'footer'
op|'.'
name|'append'
op|'('
string|'\'<li id="fn-%s">\''
op|'%'
name|'id'
op|')'
newline|'\n'
name|'footer'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_run_block_gamut'
op|'('
name|'self'
op|'.'
name|'footnotes'
op|'['
name|'id'
op|']'
op|')'
op|')'
newline|'\n'
name|'backlink'
op|'='
op|'('
string|'\'<a href="#fnref-%s" \''
nl|'\n'
string|'\'class="footnoteBackLink" \''
nl|'\n'
string|'\'title="Jump back to footnote %d in the text.">\''
nl|'\n'
string|"'&#8617;</a>'"
op|'%'
op|'('
name|'id'
op|','
name|'i'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
name|'if'
name|'footer'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'endswith'
op|'('
string|'"</p>"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'footer'
op|'['
op|'-'
number|'1'
op|']'
op|'='
name|'footer'
op|'['
op|'-'
number|'1'
op|']'
op|'['
op|':'
op|'-'
name|'len'
op|'('
string|'"</p>"'
op|')'
op|']'
op|'+'
string|"'&nbsp;'"
op|'+'
name|'backlink'
op|'+'
string|'"</p>"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'footer'
op|'.'
name|'append'
op|'('
string|'"\\n<p>%s</p>"'
op|'%'
name|'backlink'
op|')'
newline|'\n'
dedent|''
name|'footer'
op|'.'
name|'append'
op|'('
string|"'</li>'"
op|')'
newline|'\n'
dedent|''
name|'footer'
op|'.'
name|'append'
op|'('
string|"'</ol>'"
op|')'
newline|'\n'
name|'footer'
op|'.'
name|'append'
op|'('
string|"'</div>'"
op|')'
newline|'\n'
name|'return'
name|'text'
op|'+'
string|"'\\n\\n'"
op|'+'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'footer'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'text'
newline|'\n'
nl|'\n'
comment|"# Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:"
nl|'\n'
comment|'#   http://bumppo.net/projects/amputator/'
nl|'\n'
DECL|variable|_ampersand_re
dedent|''
dedent|''
name|'_ampersand_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)'"
op|')'
newline|'\n'
DECL|variable|_naked_lt_re
name|'_naked_lt_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'<(?![a-z/?\\$!])'"
op|','
name|'re'
op|'.'
name|'I'
op|')'
newline|'\n'
name|'_naked_gt_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'\'\'(?<![a-z?!/\'"-])>\'\'\''
op|','
name|'re'
op|'.'
name|'I'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_encode_amps_and_angles
name|'def'
name|'_encode_amps_and_angles'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Smart processing for ampersands and angle brackets that need'
nl|'\n'
comment|'# to be encoded.'
nl|'\n'
indent|'        '
name|'text'
op|'='
name|'self'
op|'.'
name|'_ampersand_re'
op|'.'
name|'sub'
op|'('
string|"'&amp;'"
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|"# Encode naked <'s"
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_naked_lt_re'
op|'.'
name|'sub'
op|'('
string|"'&lt;'"
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|"# Encode naked >'s"
nl|'\n'
comment|'# Note: Other markdown implementations (e.g. Markdown.pl, PHP'
nl|'\n'
comment|"# Markdown) don't do this."
nl|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_naked_gt_re'
op|'.'
name|'sub'
op|'('
string|"'&gt;'"
op|','
name|'text'
op|')'
newline|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_encode_backslash_escapes
dedent|''
name|'def'
name|'_encode_backslash_escapes'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'ch'
op|','
name|'escape'
name|'in'
name|'g_escape_table'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
string|'"\\\\"'
op|'+'
name|'ch'
op|','
name|'escape'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|variable|_auto_link_re
dedent|''
name|'_auto_link_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r\'<((https?|ftp):[^\\\'">\\s]+)>\''
op|','
name|'re'
op|'.'
name|'I'
op|')'
newline|'\n'
DECL|member|_auto_link_sub
name|'def'
name|'_auto_link_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'g1'
op|'='
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'return'
string|'\'<a href="%s">%s</a>\''
op|'%'
op|'('
name|'g1'
op|','
name|'g1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_auto_email_link_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n          <\n           (?:mailto:)?\n          (\n              [-.\\w]+\n              \\@\n              [-\\w]+(\\.[-\\w]+)*\\.[a-z]+\n          )\n          >\n        """'
op|','
name|'re'
op|'.'
name|'I'
op|'|'
name|'re'
op|'.'
name|'X'
op|'|'
name|'re'
op|'.'
name|'U'
op|')'
newline|'\n'
DECL|member|_auto_email_link_sub
name|'def'
name|'_auto_email_link_sub'
op|'('
name|'self'
op|','
name|'match'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_encode_email_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_unescape_special_chars'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_auto_links
dedent|''
name|'def'
name|'_do_auto_links'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'text'
op|'='
name|'self'
op|'.'
name|'_auto_link_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_auto_link_sub'
op|','
name|'text'
op|')'
newline|'\n'
name|'text'
op|'='
name|'self'
op|'.'
name|'_auto_email_link_re'
op|'.'
name|'sub'
op|'('
name|'self'
op|'.'
name|'_auto_email_link_sub'
op|','
name|'text'
op|')'
newline|'\n'
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_encode_email_address
dedent|''
name|'def'
name|'_encode_email_address'
op|'('
name|'self'
op|','
name|'addr'
op|')'
op|':'
newline|'\n'
comment|'#  Input: an email address, e.g. "foo@example.com"'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  Output: the email address as a mailto link, with each character'
nl|'\n'
comment|'#      of the address encoded as either a decimal or hex entity, in'
nl|'\n'
comment|'#      the hopes of foiling most address harvesting spam bots. E.g.:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    <a href="&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;'
nl|'\n'
comment|'#       x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;">&#102;&#111;&#111;'
nl|'\n'
comment|'#       &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk'
nl|'\n'
comment|'#  mailing list: <http://tinyurl.com/yu7ue>'
nl|'\n'
indent|'        '
name|'chars'
op|'='
op|'['
name|'_xml_encode_email_char_at_random'
op|'('
name|'ch'
op|')'
nl|'\n'
name|'for'
name|'ch'
name|'in'
string|'"mailto:"'
op|'+'
name|'addr'
op|']'
newline|'\n'
comment|'# Strip the mailto: from the visible part.'
nl|'\n'
name|'addr'
op|'='
string|'\'<a href="%s">%s</a>\''
op|'%'
op|'('
string|"''"
op|'.'
name|'join'
op|'('
name|'chars'
op|')'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'chars'
op|'['
number|'7'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'addr'
newline|'\n'
nl|'\n'
DECL|member|_do_link_patterns
dedent|''
name|'def'
name|'_do_link_patterns'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Caveat emptor: there isn\'t much guarding against link\n        patterns being formed inside other standard Markdown links, e.g.\n        inside a [link def][like this].\n\n        Dev Notes: *Could* consider prefixing regexes with a negative\n        lookbehind assertion to attempt to guard against this.\n        """'
newline|'\n'
name|'link_from_hash'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'regex'
op|','
name|'repl'
name|'in'
name|'self'
op|'.'
name|'link_patterns'
op|':'
newline|'\n'
indent|'            '
name|'replacements'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'match'
name|'in'
name|'regex'
op|'.'
name|'finditer'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'hasattr'
op|'('
name|'repl'
op|','
string|'"__call__"'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'href'
op|'='
name|'repl'
op|'('
name|'match'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'href'
op|'='
name|'match'
op|'.'
name|'expand'
op|'('
name|'repl'
op|')'
newline|'\n'
dedent|''
name|'replacements'
op|'.'
name|'append'
op|'('
op|'('
name|'match'
op|'.'
name|'span'
op|'('
op|')'
op|','
name|'href'
op|')'
op|')'
newline|'\n'
dedent|''
name|'for'
op|'('
name|'start'
op|','
name|'end'
op|')'
op|','
name|'href'
name|'in'
name|'reversed'
op|'('
name|'replacements'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'escaped_href'
op|'='
op|'('
nl|'\n'
name|'href'
op|'.'
name|'replace'
op|'('
string|'\'"\''
op|','
string|"'&quot;'"
op|')'
comment|'# b/c of attr quote'
nl|'\n'
comment|'# To avoid markdown <em> and <strong>:'
nl|'\n'
op|'.'
name|'replace'
op|'('
string|"'*'"
op|','
name|'g_escape_table'
op|'['
string|"'*'"
op|']'
op|')'
nl|'\n'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
name|'g_escape_table'
op|'['
string|"'_'"
op|']'
op|')'
op|')'
newline|'\n'
name|'link'
op|'='
string|'\'<a href="%s">%s</a>\''
op|'%'
op|'('
name|'escaped_href'
op|','
name|'text'
op|'['
name|'start'
op|':'
name|'end'
op|']'
op|')'
newline|'\n'
name|'hash'
op|'='
name|'md5'
op|'('
name|'link'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'link_from_hash'
op|'['
name|'hash'
op|']'
op|'='
name|'link'
newline|'\n'
name|'text'
op|'='
name|'text'
op|'['
op|':'
name|'start'
op|']'
op|'+'
name|'hash'
op|'+'
name|'text'
op|'['
name|'end'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'hash'
op|','
name|'link'
name|'in'
name|'link_from_hash'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'hash'
op|','
name|'link'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_unescape_special_chars
dedent|''
name|'def'
name|'_unescape_special_chars'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|"# Swap back in all the special characters we've hidden."
nl|'\n'
indent|'        '
name|'for'
name|'ch'
op|','
name|'hash'
name|'in'
name|'g_escape_table'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
name|'hash'
op|','
name|'ch'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'text'
newline|'\n'
nl|'\n'
DECL|member|_outdent
dedent|''
name|'def'
name|'_outdent'
op|'('
name|'self'
op|','
name|'text'
op|')'
op|':'
newline|'\n'
comment|'# Remove one level of line-leading tabs or spaces'
nl|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_outdent_re'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MarkdownWithExtras
dedent|''
dedent|''
name|'class'
name|'MarkdownWithExtras'
op|'('
name|'Markdown'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A markdowner class that enables most extras:\n\n    - footnotes\n    - code-color (only has effect if \'pygments\' Python module on path)\n\n    These are not included:\n    - pyshell (specific to Python-related documenting)\n    - code-friendly (because it *disables* part of the syntax)\n    - link-patterns (because you need to specify some actual\n      link-patterns anyway)\n    """'
newline|'\n'
DECL|variable|extras
name|'extras'
op|'='
op|'['
string|'"footnotes"'
op|','
string|'"code-color"'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#---- internal support functions'
nl|'\n'
nl|'\n'
comment|'# From http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52549'
nl|'\n'
DECL|function|_curry
dedent|''
name|'def'
name|'_curry'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'function'
op|','
name|'args'
op|'='
name|'args'
op|'['
number|'0'
op|']'
op|','
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
DECL|function|result
name|'def'
name|'result'
op|'('
op|'*'
name|'rest'
op|','
op|'**'
name|'kwrest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'combined'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'combined'
op|'.'
name|'update'
op|'('
name|'kwrest'
op|')'
newline|'\n'
name|'return'
name|'function'
op|'('
op|'*'
name|'args'
op|'+'
name|'rest'
op|','
op|'**'
name|'combined'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
comment|'# Recipe: regex_from_encoded_pattern (1.0)'
nl|'\n'
DECL|function|_regex_from_encoded_pattern
dedent|''
name|'def'
name|'_regex_from_encoded_pattern'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\'foo\'    -> re.compile(re.escape(\'foo\'))\n       \'/foo/\'  -> re.compile(\'foo\')\n       \'/foo/i\' -> re.compile(\'foo\', re.I)\n    """'
newline|'\n'
name|'if'
name|'s'
op|'.'
name|'startswith'
op|'('
string|"'/'"
op|')'
name|'and'
name|'s'
op|'.'
name|'rfind'
op|'('
string|"'/'"
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
comment|'# Parse it: /PATTERN/FLAGS'
nl|'\n'
indent|'        '
name|'idx'
op|'='
name|'s'
op|'.'
name|'rfind'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'pattern'
op|','
name|'flags_str'
op|'='
name|'s'
op|'['
number|'1'
op|':'
name|'idx'
op|']'
op|','
name|'s'
op|'['
name|'idx'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'flag_from_char'
op|'='
op|'{'
nl|'\n'
string|'"i"'
op|':'
name|'re'
op|'.'
name|'IGNORECASE'
op|','
nl|'\n'
string|'"l"'
op|':'
name|'re'
op|'.'
name|'LOCALE'
op|','
nl|'\n'
string|'"s"'
op|':'
name|'re'
op|'.'
name|'DOTALL'
op|','
nl|'\n'
string|'"m"'
op|':'
name|'re'
op|'.'
name|'MULTILINE'
op|','
nl|'\n'
string|'"u"'
op|':'
name|'re'
op|'.'
name|'UNICODE'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'flags'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'char'
name|'in'
name|'flags_str'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'flags'
op|'|='
name|'flag_from_char'
op|'['
name|'char'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'ValueError'
op|'('
string|'"unsupported regex flag: \'%s\' in \'%s\' "'
nl|'\n'
string|'"(must be one of \'%s\')"'
nl|'\n'
op|'%'
op|'('
name|'char'
op|','
name|'s'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'flag_from_char'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'re'
op|'.'
name|'compile'
op|'('
name|'s'
op|'['
number|'1'
op|':'
name|'idx'
op|']'
op|','
name|'flags'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# not an encoded regex'
newline|'\n'
indent|'        '
name|'return'
name|'re'
op|'.'
name|'compile'
op|'('
name|'re'
op|'.'
name|'escape'
op|'('
name|'s'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Recipe: dedent (0.1.2)'
nl|'\n'
DECL|function|_dedentlines
dedent|''
dedent|''
name|'def'
name|'_dedentlines'
op|'('
name|'lines'
op|','
name|'tabsize'
op|'='
number|'8'
op|','
name|'skip_first_line'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""_dedentlines(lines, tabsize=8, skip_first_line=False) -> dedented lines\n    \n        "lines" is a list of lines to dedent.\n        "tabsize" is the tab width to use for indent width calculations.\n        "skip_first_line" is a boolean indicating if the first line should\n            be skipped for calculating the indent width and for dedenting.\n            This is sometimes useful for docstrings and similar.\n    \n    Same as dedent() except operates on a sequence of lines. Note: the\n    lines list is modified **in-place**.\n    """'
newline|'\n'
name|'DEBUG'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'DEBUG'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"dedent: dedent(..., tabsize=%d, skip_first_line=%r)"'
op|'%'
op|'('
name|'tabsize'
op|','
name|'skip_first_line'
op|')'
newline|'\n'
dedent|''
name|'indents'
op|'='
op|'['
op|']'
newline|'\n'
name|'margin'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'i'
op|','
name|'line'
name|'in'
name|'enumerate'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'i'
op|'=='
number|'0'
name|'and'
name|'skip_first_line'
op|':'
name|'continue'
newline|'\n'
name|'indent'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ch'
op|'=='
string|"' '"
op|':'
newline|'\n'
indent|'                '
name|'indent'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'\\t'"
op|':'
newline|'\n'
indent|'                '
name|'indent'
op|'+='
name|'tabsize'
op|'-'
op|'('
name|'indent'
op|'%'
name|'tabsize'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
name|'in'
string|"'\\r\\n'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
comment|'# skip all-whitespace lines'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'continue'
comment|'# skip all-whitespace lines'
newline|'\n'
dedent|''
name|'if'
name|'DEBUG'
op|':'
name|'print'
string|'"dedent: indent=%d: %r"'
op|'%'
op|'('
name|'indent'
op|','
name|'line'
op|')'
newline|'\n'
name|'if'
name|'margin'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'margin'
op|'='
name|'indent'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'margin'
op|'='
name|'min'
op|'('
name|'margin'
op|','
name|'indent'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'DEBUG'
op|':'
name|'print'
string|'"dedent: margin=%r"'
op|'%'
name|'margin'
newline|'\n'
nl|'\n'
name|'if'
name|'margin'
name|'is'
name|'not'
name|'None'
name|'and'
name|'margin'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
op|','
name|'line'
name|'in'
name|'enumerate'
op|'('
name|'lines'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'i'
op|'=='
number|'0'
name|'and'
name|'skip_first_line'
op|':'
name|'continue'
newline|'\n'
name|'removed'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'j'
op|','
name|'ch'
name|'in'
name|'enumerate'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'ch'
op|'=='
string|"' '"
op|':'
newline|'\n'
indent|'                    '
name|'removed'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
op|'=='
string|"'\\t'"
op|':'
newline|'\n'
indent|'                    '
name|'removed'
op|'+='
name|'tabsize'
op|'-'
op|'('
name|'removed'
op|'%'
name|'tabsize'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'ch'
name|'in'
string|"'\\r\\n'"
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'DEBUG'
op|':'
name|'print'
string|'"dedent: %r: EOL -> strip up to EOL"'
op|'%'
name|'line'
newline|'\n'
name|'lines'
op|'['
name|'i'
op|']'
op|'='
name|'lines'
op|'['
name|'i'
op|']'
op|'['
name|'j'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'ValueError'
op|'('
string|'"unexpected non-whitespace char %r in "'
nl|'\n'
string|'"line %r while removing %d-space margin"'
nl|'\n'
op|'%'
op|'('
name|'ch'
op|','
name|'line'
op|','
name|'margin'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'DEBUG'
op|':'
newline|'\n'
indent|'                    '
name|'print'
string|'"dedent: %r: %r -> removed %d/%d"'
op|'%'
op|'('
name|'line'
op|','
name|'ch'
op|','
name|'removed'
op|','
name|'margin'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'removed'
op|'=='
name|'margin'
op|':'
newline|'\n'
indent|'                    '
name|'lines'
op|'['
name|'i'
op|']'
op|'='
name|'lines'
op|'['
name|'i'
op|']'
op|'['
name|'j'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'elif'
name|'removed'
op|'>'
name|'margin'
op|':'
newline|'\n'
indent|'                    '
name|'lines'
op|'['
name|'i'
op|']'
op|'='
string|"' '"
op|'*'
op|'('
name|'removed'
op|'-'
name|'margin'
op|')'
op|'+'
name|'lines'
op|'['
name|'i'
op|']'
op|'['
name|'j'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'removed'
op|':'
newline|'\n'
indent|'                    '
name|'lines'
op|'['
name|'i'
op|']'
op|'='
name|'lines'
op|'['
name|'i'
op|']'
op|'['
name|'removed'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'lines'
newline|'\n'
nl|'\n'
DECL|function|_dedent
dedent|''
name|'def'
name|'_dedent'
op|'('
name|'text'
op|','
name|'tabsize'
op|'='
number|'8'
op|','
name|'skip_first_line'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""_dedent(text, tabsize=8, skip_first_line=False) -> dedented text\n\n        "text" is the text to dedent.\n        "tabsize" is the tab width to use for indent width calculations.\n        "skip_first_line" is a boolean indicating if the first line should\n            be skipped for calculating the indent width and for dedenting.\n            This is sometimes useful for docstrings and similar.\n    \n    textwrap.dedent(s), but don\'t expand tabs to spaces\n    """'
newline|'\n'
name|'lines'
op|'='
name|'text'
op|'.'
name|'splitlines'
op|'('
number|'1'
op|')'
newline|'\n'
name|'_dedentlines'
op|'('
name|'lines'
op|','
name|'tabsize'
op|'='
name|'tabsize'
op|','
name|'skip_first_line'
op|'='
name|'skip_first_line'
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'lines'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_memoized
dedent|''
name|'class'
name|'_memoized'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'   '
string|'"""Decorator that caches a function\'s return value each time it is called.\n   If called later with the same arguments, the cached value is returned, and\n   not re-evaluated.\n\n   http://wiki.python.org/moin/PythonDecoratorLibrary\n   """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'func'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'func'
op|'='
name|'func'
newline|'\n'
name|'self'
op|'.'
name|'cache'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'         '
name|'return'
name|'self'
op|'.'
name|'cache'
op|'['
name|'args'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'         '
name|'self'
op|'.'
name|'cache'
op|'['
name|'args'
op|']'
op|'='
name|'value'
op|'='
name|'self'
op|'.'
name|'func'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
comment|'# uncachable -- for instance, passing a list as an argument.'
nl|'\n'
comment|'# Better to not cache than to blow up entirely.'
nl|'\n'
indent|'         '
name|'return'
name|'self'
op|'.'
name|'func'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
DECL|member|__repr__
dedent|''
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'      '
string|'"""Return the function\'s docstring."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'func'
op|'.'
name|'__doc__'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_xml_oneliner_re_from_tab_width
dedent|''
dedent|''
name|'def'
name|'_xml_oneliner_re_from_tab_width'
op|'('
name|'tab_width'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Standalone XML processing instruction regex."""'
newline|'\n'
name|'return'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n        (?:\n            (?<=\\n\\n)       # Starting after a blank line\n            |               # or\n            \\A\\n?           # the beginning of the doc\n        )\n        (                           # save in $1\n            [ ]{0,%d}\n            (?:\n                <\\?\\w+\\b\\s+.*?\\?>   # XML processing instruction\n                |\n                <\\w+:\\w+\\b\\s+.*?/>  # namespaced single tag\n            )\n            [ \\t]*\n            (?=\\n{2,}|\\Z)       # followed by a blank line or end of document\n        )\n        """'
op|'%'
op|'('
name|'tab_width'
op|'-'
number|'1'
op|')'
op|','
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
DECL|variable|_xml_oneliner_re_from_tab_width
dedent|''
name|'_xml_oneliner_re_from_tab_width'
op|'='
name|'_memoized'
op|'('
name|'_xml_oneliner_re_from_tab_width'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_hr_tag_re_from_tab_width
name|'def'
name|'_hr_tag_re_from_tab_width'
op|'('
name|'tab_width'
op|')'
op|':'
newline|'\n'
indent|'     '
name|'return'
name|'re'
op|'.'
name|'compile'
op|'('
string|'r"""\n        (?:\n            (?<=\\n\\n)       # Starting after a blank line\n            |               # or\n            \\A\\n?           # the beginning of the doc\n        )\n        (                       # save in \\1\n            [ ]{0,%d}\n            <(hr)               # start tag = \\2\n            \\b                  # word break\n            ([^<>])*?           # \n            /?>                 # the matching end tag\n            [ \\t]*\n            (?=\\n{2,}|\\Z)       # followed by a blank line or end of document\n        )\n        """'
op|'%'
op|'('
name|'tab_width'
op|'-'
number|'1'
op|')'
op|','
name|'re'
op|'.'
name|'X'
op|')'
newline|'\n'
DECL|variable|_hr_tag_re_from_tab_width
dedent|''
name|'_hr_tag_re_from_tab_width'
op|'='
name|'_memoized'
op|'('
name|'_hr_tag_re_from_tab_width'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_xml_encode_email_char_at_random
name|'def'
name|'_xml_encode_email_char_at_random'
op|'('
name|'ch'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'r'
op|'='
name|'random'
op|'('
op|')'
newline|'\n'
comment|'# Roughly 10% raw, 45% hex, 45% dec.'
nl|'\n'
comment|"# '@' *must* be encoded. I [John Gruber] insist."
nl|'\n'
comment|"# Issue 26: '_' must be encoded."
nl|'\n'
name|'if'
name|'r'
op|'>'
number|'0.9'
name|'and'
name|'ch'
name|'not'
name|'in'
string|'"@_"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'ch'
newline|'\n'
dedent|''
name|'elif'
name|'r'
op|'<'
number|'0.45'
op|':'
newline|'\n'
comment|"# The [1:] is to drop leading '0': 0x63 -> x63"
nl|'\n'
indent|'        '
name|'return'
string|"'&#%s;'"
op|'%'
name|'hex'
op|'('
name|'ord'
op|'('
name|'ch'
op|')'
op|')'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'&#%s;'"
op|'%'
name|'ord'
op|'('
name|'ch'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_hash_text
dedent|''
dedent|''
name|'def'
name|'_hash_text'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'md5:'"
op|'+'
name|'md5'
op|'('
name|'text'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#---- mainline'
nl|'\n'
nl|'\n'
DECL|class|_NoReflowFormatter
dedent|''
name|'class'
name|'_NoReflowFormatter'
op|'('
name|'optparse'
op|'.'
name|'IndentedHelpFormatter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""An optparse formatter that does NOT reflow the description."""'
newline|'\n'
DECL|member|format_description
name|'def'
name|'format_description'
op|'('
name|'self'
op|','
name|'description'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'description'
name|'or'
string|'""'
newline|'\n'
nl|'\n'
DECL|function|_test
dedent|''
dedent|''
name|'def'
name|'_test'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'doctest'
newline|'\n'
name|'doctest'
op|'.'
name|'testmod'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
name|'argv'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'argv'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'argv'
op|'='
name|'sys'
op|'.'
name|'argv'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'logging'
op|'.'
name|'root'
op|'.'
name|'handlers'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'basicConfig'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'usage'
op|'='
string|'"usage: %prog [PATHS...]"'
newline|'\n'
name|'version'
op|'='
string|'"%prog "'
op|'+'
name|'__version__'
newline|'\n'
name|'parser'
op|'='
name|'optparse'
op|'.'
name|'OptionParser'
op|'('
name|'prog'
op|'='
string|'"markdown2"'
op|','
name|'usage'
op|'='
name|'usage'
op|','
nl|'\n'
name|'version'
op|'='
name|'version'
op|','
name|'description'
op|'='
name|'cmdln_desc'
op|','
nl|'\n'
name|'formatter'
op|'='
name|'_NoReflowFormatter'
op|'('
op|')'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-v"'
op|','
string|'"--verbose"'
op|','
name|'dest'
op|'='
string|'"log_level"'
op|','
nl|'\n'
name|'action'
op|'='
string|'"store_const"'
op|','
name|'const'
op|'='
name|'logging'
op|'.'
name|'DEBUG'
op|','
nl|'\n'
name|'help'
op|'='
string|'"more verbose output"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--encoding"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"specify encoding of text content"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--html4tags"'
op|','
name|'action'
op|'='
string|'"store_true"'
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
name|'help'
op|'='
string|'"use HTML 4 style for empty element tags"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-s"'
op|','
string|'"--safe"'
op|','
name|'metavar'
op|'='
string|'"MODE"'
op|','
name|'dest'
op|'='
string|'"safe_mode"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"sanitize literal HTML: \'escape\' escapes "'
nl|'\n'
string|'"HTML meta chars, \'replace\' replaces with an "'
nl|'\n'
string|'"[HTML_REMOVED] note"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-x"'
op|','
string|'"--extras"'
op|','
name|'action'
op|'='
string|'"append"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"Turn on specific extra features (not part of "'
nl|'\n'
string|'"the core Markdown spec). Supported values: "'
nl|'\n'
string|'"\'code-friendly\' disables _/__ for emphasis; "'
nl|'\n'
string|'"\'code-color\' adds code-block syntax coloring; "'
nl|'\n'
string|'"\'link-patterns\' adds auto-linking based on patterns; "'
nl|'\n'
string|'"\'footnotes\' adds the footnotes syntax;"'
nl|'\n'
string|'"\'xml\' passes one-liner processing instructions and namespaced XML tags;"'
nl|'\n'
string|'"\'pyshell\' to put unindented Python interactive shell sessions in a <code> block."'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--use-file-vars"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"Look for and use Emacs-style \'markdown-extras\' "'
nl|'\n'
string|'"file var to turn on extras. See "'
nl|'\n'
string|'"<http://code.google.com/p/python-markdown2/wiki/Extras>."'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--link-patterns-file"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"path to a link pattern file"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--self-test"'
op|','
name|'action'
op|'='
string|'"store_true"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"run internal self-tests (some doctests)"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"--compare"'
op|','
name|'action'
op|'='
string|'"store_true"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"run against Markdown.pl as well (for testing)"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'set_defaults'
op|'('
name|'log_level'
op|'='
name|'logging'
op|'.'
name|'INFO'
op|','
name|'compare'
op|'='
name|'False'
op|','
nl|'\n'
name|'encoding'
op|'='
string|'"utf-8"'
op|','
name|'safe_mode'
op|'='
name|'None'
op|','
name|'use_file_vars'
op|'='
name|'False'
op|')'
newline|'\n'
name|'opts'
op|','
name|'paths'
op|'='
name|'parser'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
name|'log'
op|'.'
name|'setLevel'
op|'('
name|'opts'
op|'.'
name|'log_level'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'opts'
op|'.'
name|'self_test'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opts'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'        '
name|'extras'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'s'
name|'in'
name|'opts'
op|'.'
name|'extras'
op|':'
newline|'\n'
indent|'            '
name|'splitter'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|'"[,;: ]+"'
op|')'
newline|'\n'
name|'for'
name|'e'
name|'in'
name|'splitter'
op|'.'
name|'split'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'='"
name|'in'
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'ename'
op|','
name|'earg'
op|'='
name|'e'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'earg'
op|'='
name|'int'
op|'('
name|'earg'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'ename'
op|','
name|'earg'
op|'='
name|'e'
op|','
name|'None'
newline|'\n'
dedent|''
name|'extras'
op|'['
name|'ename'
op|']'
op|'='
name|'earg'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'extras'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'opts'
op|'.'
name|'link_patterns_file'
op|':'
newline|'\n'
indent|'        '
name|'link_patterns'
op|'='
op|'['
op|']'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'opts'
op|'.'
name|'link_patterns_file'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'i'
op|','
name|'line'
name|'in'
name|'enumerate'
op|'('
name|'f'
op|'.'
name|'readlines'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
name|'continue'
newline|'\n'
name|'if'
name|'line'
op|'.'
name|'lstrip'
op|'('
op|')'
op|'.'
name|'startswith'
op|'('
string|'"#"'
op|')'
op|':'
name|'continue'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'pat'
op|','
name|'href'
op|'='
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|'.'
name|'rsplit'
op|'('
name|'None'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'MarkdownError'
op|'('
string|'"%s:%d: invalid link pattern line: %r"'
nl|'\n'
op|'%'
op|'('
name|'opts'
op|'.'
name|'link_patterns_file'
op|','
name|'i'
op|'+'
number|'1'
op|','
name|'line'
op|')'
op|')'
newline|'\n'
dedent|''
name|'link_patterns'
op|'.'
name|'append'
op|'('
nl|'\n'
op|'('
name|'_regex_from_encoded_pattern'
op|'('
name|'pat'
op|')'
op|','
name|'href'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'link_patterns'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'os'
op|'.'
name|'path'
name|'import'
name|'join'
op|','
name|'dirname'
op|','
name|'abspath'
op|','
name|'exists'
newline|'\n'
name|'markdown_pl'
op|'='
name|'join'
op|'('
name|'dirname'
op|'('
name|'dirname'
op|'('
name|'abspath'
op|'('
name|'__file__'
op|')'
op|')'
op|')'
op|','
string|'"test"'
op|','
nl|'\n'
string|'"Markdown.pl"'
op|')'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'paths'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'opts'
op|'.'
name|'compare'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"==== Markdown.pl ===="'
newline|'\n'
name|'perl_cmd'
op|'='
string|'\'perl %s "%s"\''
op|'%'
op|'('
name|'markdown_pl'
op|','
name|'path'
op|')'
newline|'\n'
name|'o'
op|'='
name|'os'
op|'.'
name|'popen'
op|'('
name|'perl_cmd'
op|')'
newline|'\n'
name|'perl_html'
op|'='
name|'o'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'o'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
name|'perl_html'
op|')'
newline|'\n'
name|'print'
string|'"==== markdown2.py ===="'
newline|'\n'
dedent|''
name|'html'
op|'='
name|'markdown_path'
op|'('
name|'path'
op|','
name|'encoding'
op|'='
name|'opts'
op|'.'
name|'encoding'
op|','
nl|'\n'
name|'html4tags'
op|'='
name|'opts'
op|'.'
name|'html4tags'
op|','
nl|'\n'
name|'safe_mode'
op|'='
name|'opts'
op|'.'
name|'safe_mode'
op|','
nl|'\n'
name|'extras'
op|'='
name|'extras'
op|','
name|'link_patterns'
op|'='
name|'link_patterns'
op|','
nl|'\n'
name|'use_file_vars'
op|'='
name|'opts'
op|'.'
name|'use_file_vars'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'html'
op|'.'
name|'encode'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'encoding'
name|'or'
string|'"utf-8"'
op|','
string|"'xmlcharrefreplace'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'opts'
op|'.'
name|'compare'
op|':'
newline|'\n'
indent|'            '
name|'test_dir'
op|'='
name|'join'
op|'('
name|'dirname'
op|'('
name|'dirname'
op|'('
name|'abspath'
op|'('
name|'__file__'
op|')'
op|')'
op|')'
op|','
string|'"test"'
op|')'
newline|'\n'
name|'if'
name|'exists'
op|'('
name|'join'
op|'('
name|'test_dir'
op|','
string|'"test_markdown2.py"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'path'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'test_dir'
op|')'
newline|'\n'
name|'from'
name|'test_markdown2'
name|'import'
name|'norm_html_from_html'
newline|'\n'
name|'norm_html'
op|'='
name|'norm_html_from_html'
op|'('
name|'html'
op|')'
newline|'\n'
name|'norm_perl_html'
op|'='
name|'norm_html_from_html'
op|'('
name|'perl_html'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'norm_html'
op|'='
name|'html'
newline|'\n'
name|'norm_perl_html'
op|'='
name|'perl_html'
newline|'\n'
dedent|''
name|'print'
string|'"==== match? %r ===="'
op|'%'
op|'('
name|'norm_perl_html'
op|'=='
name|'norm_html'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'exit'
op|'('
name|'main'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

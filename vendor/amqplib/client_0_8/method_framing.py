begin_unit
string|'"""\nConvert between frames and higher-level AMQP methods\n\n"""'
newline|'\n'
comment|'# Copyright (C) 2007-2008 Barry Pederson <bp@barryp.org>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This library is free software; you can redistribute it and/or'
nl|'\n'
comment|'# modify it under the terms of the GNU Lesser General Public'
nl|'\n'
comment|'# License as published by the Free Software Foundation; either'
nl|'\n'
comment|'# version 2.1 of the License, or (at your option) any later version.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This library is distributed in the hope that it will be useful,'
nl|'\n'
comment|'# but WITHOUT ANY WARRANTY; without even the implied warranty of'
nl|'\n'
comment|'# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU'
nl|'\n'
comment|'# Lesser General Public License for more details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# You should have received a copy of the GNU Lesser General Public'
nl|'\n'
comment|'# License along with this library; if not, write to the Free Software'
nl|'\n'
comment|'# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301'
nl|'\n'
nl|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Empty'
op|','
name|'Queue'
newline|'\n'
name|'from'
name|'struct'
name|'import'
name|'pack'
op|','
name|'unpack'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'collections'
name|'import'
name|'defaultdict'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
DECL|class|defaultdict
indent|'    '
name|'class'
name|'defaultdict'
op|'('
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Mini-implementation of collections.defaultdict that\n        appears in Python 2.5 and up.\n\n        """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'default_factory'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dict'
op|'.'
name|'__init__'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default_factory'
op|'='
name|'default_factory'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'dict'
op|'.'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'self'
op|'.'
name|'default_factory'
op|'('
op|')'
newline|'\n'
name|'dict'
op|'.'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'result'
op|')'
newline|'\n'
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'from'
name|'basic_message'
name|'import'
name|'Message'
newline|'\n'
name|'from'
name|'exceptions'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'serialization'
name|'import'
name|'AMQPReader'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'MethodReader'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# MethodReader needs to know which methods are supposed'
nl|'\n'
comment|'# to be followed by content headers and bodies.'
nl|'\n'
comment|'#'
nl|'\n'
DECL|variable|_CONTENT_METHODS
name|'_CONTENT_METHODS'
op|'='
op|'['
nl|'\n'
op|'('
number|'60'
op|','
number|'50'
op|')'
op|','
comment|'# Basic.return'
nl|'\n'
op|'('
number|'60'
op|','
number|'60'
op|')'
op|','
comment|'# Basic.deliver'
nl|'\n'
op|'('
number|'60'
op|','
number|'71'
op|')'
op|','
comment|'# Basic.get_ok'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PartialMessage
name|'class'
name|'_PartialMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper class to build up a multi-frame method.\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'method_sig'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'method_sig'
op|'='
name|'method_sig'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'='
name|'Message'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'body_parts'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'body_received'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'body_size'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'complete'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|add_header
dedent|''
name|'def'
name|'add_header'
op|'('
name|'self'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'class_id'
op|','
name|'weight'
op|','
name|'self'
op|'.'
name|'body_size'
op|'='
name|'unpack'
op|'('
string|"'>HHQ'"
op|','
name|'payload'
op|'['
op|':'
number|'12'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg'
op|'.'
name|'_load_properties'
op|'('
name|'payload'
op|'['
number|'12'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'complete'
op|'='
op|'('
name|'self'
op|'.'
name|'body_size'
op|'=='
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|add_payload
dedent|''
name|'def'
name|'add_payload'
op|'('
name|'self'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'body_parts'
op|'.'
name|'append'
op|'('
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'body_received'
op|'+='
name|'len'
op|'('
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'body_received'
op|'=='
name|'self'
op|'.'
name|'body_size'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'msg'
op|'.'
name|'body'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'body_parts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'complete'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodReader
dedent|''
dedent|''
dedent|''
name|'class'
name|'MethodReader'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper class to receive frames from the broker, combine them if\n    necessary with content-headers and content-bodies into complete methods.\n\n    Normally a method is represented as a tuple containing\n    (channel, method_sig, args, content).\n\n    In the case of a framing error, an AMQPConnectionException is placed\n    in the queue.\n\n    In the case of unexpected frames, a tuple made up of\n    (channel, AMQPChannelException) is placed in the queue.\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'source'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'source'
op|'='
name|'source'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'running'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'partial_messages'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# For each channel, which type is expected next'
nl|'\n'
name|'self'
op|'.'
name|'expected_types'
op|'='
name|'defaultdict'
op|'('
name|'lambda'
op|':'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_next_method
dedent|''
name|'def'
name|'_next_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read the next method from the source, once one complete method has\n        been assembled it is placed in the internal queue.\n\n        """'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'empty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'frame_type'
op|','
name|'channel'
op|','
name|'payload'
op|'='
name|'self'
op|'.'
name|'source'
op|'.'
name|'read_frame'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# Connection was closed?  Framing Error?'
nl|'\n'
comment|'#'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
name|'e'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|'!='
name|'frame_type'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'Exception'
op|'('
string|"'Received frame type %s while expecting type: %s'"
op|'%'
nl|'\n'
op|'('
name|'frame_type'
op|','
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|')'
nl|'\n'
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'frame_type'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_method_frame'
op|'('
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'frame_type'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_content_header'
op|'('
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'frame_type'
op|'=='
number|'3'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_content_body'
op|'('
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_process_method_frame
dedent|''
dedent|''
dedent|''
name|'def'
name|'_process_method_frame'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Process Method frames\n\n        """'
newline|'\n'
name|'method_sig'
op|'='
name|'unpack'
op|'('
string|"'>HH'"
op|','
name|'payload'
op|'['
op|':'
number|'4'
op|']'
op|')'
newline|'\n'
name|'args'
op|'='
name|'AMQPReader'
op|'('
name|'payload'
op|'['
number|'4'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'method_sig'
name|'in'
name|'_CONTENT_METHODS'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|"# Save what we've got so far and wait for the content-header"
nl|'\n'
comment|'#'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'partial_messages'
op|'['
name|'channel'
op|']'
op|'='
name|'_PartialMessage'
op|'('
name|'method_sig'
op|','
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|'='
number|'2'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
op|'('
name|'channel'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_process_content_header
dedent|''
dedent|''
name|'def'
name|'_process_content_header'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Process Content Header frames\n\n        """'
newline|'\n'
name|'partial'
op|'='
name|'self'
op|'.'
name|'partial_messages'
op|'['
name|'channel'
op|']'
newline|'\n'
name|'partial'
op|'.'
name|'add_header'
op|'('
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'partial'
op|'.'
name|'complete'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|"# a bodyless message, we're done"
nl|'\n'
comment|'#'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
op|'('
name|'channel'
op|','
name|'partial'
op|'.'
name|'method_sig'
op|','
name|'partial'
op|'.'
name|'args'
op|','
name|'partial'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'partial_messages'
op|'['
name|'channel'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# wait for the content-body'
nl|'\n'
comment|'#'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|'='
number|'3'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_process_content_body
dedent|''
dedent|''
name|'def'
name|'_process_content_body'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Process Content Body frames\n\n        """'
newline|'\n'
name|'partial'
op|'='
name|'self'
op|'.'
name|'partial_messages'
op|'['
name|'channel'
op|']'
newline|'\n'
name|'partial'
op|'.'
name|'add_payload'
op|'('
name|'payload'
op|')'
newline|'\n'
name|'if'
name|'partial'
op|'.'
name|'complete'
op|':'
newline|'\n'
comment|'#'
nl|'\n'
comment|'# Stick the message in the queue and go back to'
nl|'\n'
comment|'# waiting for method frames'
nl|'\n'
comment|'#'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'put'
op|'('
op|'('
name|'channel'
op|','
name|'partial'
op|'.'
name|'method_sig'
op|','
name|'partial'
op|'.'
name|'args'
op|','
name|'partial'
op|'.'
name|'msg'
op|')'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'partial_messages'
op|'['
name|'channel'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected_types'
op|'['
name|'channel'
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|read_method
dedent|''
dedent|''
name|'def'
name|'read_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Read a method from the peer.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_next_method'
op|'('
op|')'
newline|'\n'
name|'m'
op|'='
name|'self'
op|'.'
name|'queue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'m'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'m'
newline|'\n'
dedent|''
name|'return'
name|'m'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MethodWriter
dedent|''
dedent|''
name|'class'
name|'MethodWriter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert AMQP methods into AMQP frames and send them out\n    to the peer.\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dest'
op|','
name|'frame_max'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dest'
op|'='
name|'dest'
newline|'\n'
name|'self'
op|'.'
name|'frame_max'
op|'='
name|'frame_max'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|write_method
dedent|''
name|'def'
name|'write_method'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'payload'
op|'='
name|'pack'
op|'('
string|"'>HH'"
op|','
name|'method_sig'
op|'['
number|'0'
op|']'
op|','
name|'method_sig'
op|'['
number|'1'
op|']'
op|')'
op|'+'
name|'args'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'dest'
op|'.'
name|'write_frame'
op|'('
number|'1'
op|','
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'content'
op|':'
newline|'\n'
indent|'            '
name|'body'
op|'='
name|'content'
op|'.'
name|'body'
newline|'\n'
name|'payload'
op|'='
name|'pack'
op|'('
string|"'>HHQ'"
op|','
name|'method_sig'
op|'['
number|'0'
op|']'
op|','
number|'0'
op|','
name|'len'
op|'('
name|'body'
op|')'
op|')'
op|'+'
name|'content'
op|'.'
name|'_serialize_properties'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'dest'
op|'.'
name|'write_frame'
op|'('
number|'2'
op|','
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'body'
op|':'
newline|'\n'
indent|'                '
name|'payload'
op|','
name|'body'
op|'='
name|'body'
op|'['
op|':'
name|'self'
op|'.'
name|'frame_max'
op|'-'
number|'8'
op|']'
op|','
name|'body'
op|'['
name|'self'
op|'.'
name|'frame_max'
op|'-'
number|'8'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dest'
op|'.'
name|'write_frame'
op|'('
number|'3'
op|','
name|'channel'
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

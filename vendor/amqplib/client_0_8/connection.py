begin_unit
string|'"""\nAMQP 0-8 Connections\n\n"""'
newline|'\n'
comment|'# Copyright (C) 2007-2008 Barry Pederson <bp@barryp.org>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This library is free software; you can redistribute it and/or'
nl|'\n'
comment|'# modify it under the terms of the GNU Lesser General Public'
nl|'\n'
comment|'# License as published by the Free Software Foundation; either'
nl|'\n'
comment|'# version 2.1 of the License, or (at your option) any later version.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This library is distributed in the hope that it will be useful,'
nl|'\n'
comment|'# but WITHOUT ANY WARRANTY; without even the implied warranty of'
nl|'\n'
comment|'# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU'
nl|'\n'
comment|'# Lesser General Public License for more details.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# You should have received a copy of the GNU Lesser General Public'
nl|'\n'
comment|'# License along with this library; if not, write to the Free Software'
nl|'\n'
comment|'# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301'
nl|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'abstract_channel'
name|'import'
name|'AbstractChannel'
newline|'\n'
name|'from'
name|'channel'
name|'import'
name|'Channel'
newline|'\n'
name|'from'
name|'exceptions'
name|'import'
op|'*'
newline|'\n'
name|'from'
name|'method_framing'
name|'import'
name|'MethodReader'
op|','
name|'MethodWriter'
newline|'\n'
name|'from'
name|'serialization'
name|'import'
name|'AMQPReader'
op|','
name|'AMQPWriter'
newline|'\n'
name|'from'
name|'transport'
name|'import'
name|'create_transport'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
nl|'\n'
string|"'Connection'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Client property info that gets sent to the server on connection startup'
nl|'\n'
comment|'#'
nl|'\n'
DECL|variable|LIBRARY_PROPERTIES
name|'LIBRARY_PROPERTIES'
op|'='
op|'{'
nl|'\n'
string|"'library'"
op|':'
string|"'Python amqplib'"
op|','
nl|'\n'
string|"'library_version'"
op|':'
string|"'0.6.1'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|AMQP_LOGGER
name|'AMQP_LOGGER'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'amqplib'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
name|'class'
name|'Connection'
op|'('
name|'AbstractChannel'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The connection class provides methods for a client to establish a\n    network connection to a server, and for both peers to operate the\n    connection thereafter.\n\n    GRAMMAR:\n\n        connection          = open-connection *use-connection close-connection\n        open-connection     = C:protocol-header\n                              S:START C:START-OK\n                              *challenge\n                              S:TUNE C:TUNE-OK\n                              C:OPEN S:OPEN-OK | S:REDIRECT\n        challenge           = S:SECURE C:SECURE-OK\n        use-connection      = *channel\n        close-connection    = C:CLOSE S:CLOSE-OK\n                            / S:CLOSE C:CLOSE-OK\n\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
nl|'\n'
name|'host'
op|'='
string|"'localhost'"
op|','
nl|'\n'
name|'userid'
op|'='
string|"'guest'"
op|','
nl|'\n'
name|'password'
op|'='
string|"'guest'"
op|','
nl|'\n'
name|'login_method'
op|'='
string|"'AMQPLAIN'"
op|','
nl|'\n'
name|'login_response'
op|'='
name|'None'
op|','
nl|'\n'
name|'virtual_host'
op|'='
string|"'/'"
op|','
nl|'\n'
name|'locale'
op|'='
string|"'en_US'"
op|','
nl|'\n'
name|'client_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'ssl'
op|'='
name|'False'
op|','
nl|'\n'
name|'insist'
op|'='
name|'False'
op|','
nl|'\n'
name|'connect_timeout'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Create a connection to the specified host, which should be\n        a \'host[:port]\', such as \'localhost\', or \'1.2.3.4:5672\'\n        (defaults to \'localhost\', if a port is not specified then\n        5672 is used)\n\n        If login_response is not specified, one is built up for you from\n        userid and password if they are present.\n\n        """'
newline|'\n'
name|'if'
op|'('
name|'login_response'
name|'is'
name|'None'
op|')'
name|'and'
op|'('
name|'userid'
name|'is'
name|'not'
name|'None'
op|')'
name|'and'
op|'('
name|'password'
name|'is'
name|'not'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'login_response'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'login_response'
op|'.'
name|'write_table'
op|'('
op|'{'
string|"'LOGIN'"
op|':'
name|'userid'
op|','
string|"'PASSWORD'"
op|':'
name|'password'
op|'}'
op|')'
newline|'\n'
name|'login_response'
op|'='
name|'login_response'
op|'.'
name|'getvalue'
op|'('
op|')'
op|'['
number|'4'
op|':'
op|']'
comment|'#Skip the length'
newline|'\n'
comment|'#at the beginning'
nl|'\n'
nl|'\n'
dedent|''
name|'d'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'d'
op|'.'
name|'update'
op|'('
name|'LIBRARY_PROPERTIES'
op|')'
newline|'\n'
name|'if'
name|'client_properties'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'.'
name|'update'
op|'('
name|'client_properties'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'known_hosts'
op|'='
string|"''"
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channels'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# The connection object itself is treated as channel 0'
nl|'\n'
name|'super'
op|'('
name|'Connection'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Properties set in the Tune method'
nl|'\n'
name|'self'
op|'.'
name|'channel_max'
op|'='
number|'65535'
newline|'\n'
name|'self'
op|'.'
name|'frame_max'
op|'='
number|'131072'
newline|'\n'
name|'self'
op|'.'
name|'heartbeat'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Properties set in the Start method'
nl|'\n'
name|'self'
op|'.'
name|'version_major'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'version_minor'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'server_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mechanisms'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'locales'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Let the transport.py module setup the actual'
nl|'\n'
comment|'# socket connection to the broker.'
nl|'\n'
comment|'#'
nl|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'create_transport'
op|'('
name|'host'
op|','
name|'connect_timeout'
op|','
name|'ssl'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'method_reader'
op|'='
name|'MethodReader'
op|'('
name|'self'
op|'.'
name|'transport'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'method_writer'
op|'='
name|'MethodWriter'
op|'('
name|'self'
op|'.'
name|'transport'
op|','
name|'self'
op|'.'
name|'frame_max'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'wait'
op|'('
name|'allowed_methods'
op|'='
op|'['
nl|'\n'
op|'('
number|'10'
op|','
number|'10'
op|')'
op|','
comment|'# start'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_x_start_ok'
op|'('
name|'d'
op|','
name|'login_method'
op|','
name|'login_response'
op|','
name|'locale'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_wait_tune_ok'
op|'='
name|'True'
newline|'\n'
name|'while'
name|'self'
op|'.'
name|'_wait_tune_ok'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'wait'
op|'('
name|'allowed_methods'
op|'='
op|'['
nl|'\n'
op|'('
number|'10'
op|','
number|'20'
op|')'
op|','
comment|'# secure'
nl|'\n'
op|'('
number|'10'
op|','
number|'30'
op|')'
op|','
comment|'# tune'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'host'
op|'='
name|'self'
op|'.'
name|'_x_open'
op|'('
name|'virtual_host'
op|','
name|'insist'
op|'='
name|'insist'
op|')'
newline|'\n'
name|'if'
name|'host'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|"# we weren't redirected"
nl|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
comment|'# we were redirected, close the socket, loop and try again'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_do_close
dedent|''
dedent|''
dedent|''
name|'def'
name|'_do_close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'transport'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'transport'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'temp_list'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'channels'
op|'.'
name|'values'
op|'('
op|')'
name|'if'
name|'x'
name|'is'
name|'not'
name|'self'
op|']'
newline|'\n'
name|'for'
name|'ch'
name|'in'
name|'temp_list'
op|':'
newline|'\n'
indent|'            '
name|'ch'
op|'.'
name|'_do_close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'channels'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_get_free_channel_id
dedent|''
name|'def'
name|'_get_free_channel_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'channel_max'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'i'
name|'not'
name|'in'
name|'self'
op|'.'
name|'channels'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'i'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'AMQPException'
op|'('
string|"'No free channel ids, current=%d, channel_max=%d'"
nl|'\n'
op|'%'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'channels'
op|')'
op|','
name|'self'
op|'.'
name|'channel_max'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_wait_method
dedent|''
name|'def'
name|'_wait_method'
op|'('
name|'self'
op|','
name|'channel_id'
op|','
name|'allowed_methods'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Wait for a method from the server destined for\n        a particular channel.\n\n        """'
newline|'\n'
comment|'#'
nl|'\n'
comment|"# Check the channel's deferred methods"
nl|'\n'
comment|'#'
nl|'\n'
name|'method_queue'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel_id'
op|']'
op|'.'
name|'method_queue'
newline|'\n'
nl|'\n'
name|'for'
name|'queued_method'
name|'in'
name|'method_queue'
op|':'
newline|'\n'
indent|'            '
name|'method_sig'
op|'='
name|'queued_method'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
op|'('
name|'allowed_methods'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'method_sig'
name|'in'
name|'allowed_methods'
op|')'
name|'or'
op|'('
name|'method_sig'
op|'=='
op|'('
number|'20'
op|','
number|'40'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'method_queue'
op|'.'
name|'remove'
op|'('
name|'queued_method'
op|')'
newline|'\n'
name|'return'
name|'queued_method'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Nothing queued, need to wait for a method from the peer'
nl|'\n'
comment|'#'
nl|'\n'
dedent|''
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|'='
name|'self'
op|'.'
name|'method_reader'
op|'.'
name|'read_method'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'channel'
op|'=='
name|'channel_id'
op|')'
name|'and'
op|'('
op|'('
name|'allowed_methods'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'method_sig'
name|'in'
name|'allowed_methods'
op|')'
name|'or'
op|'('
name|'method_sig'
op|'=='
op|'('
number|'20'
op|','
number|'40'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Not the channel and/or method we were looking for.  Queue'
nl|'\n'
comment|'# this method for later'
nl|'\n'
comment|'#'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel'
op|']'
op|'.'
name|'method_queue'
op|'.'
name|'append'
op|'('
op|'('
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# If we just queued up a method for channel 0 (the Connection'
nl|'\n'
comment|"# itself) it's probably a close method in reaction to some"
nl|'\n'
comment|'# error, so deal with it right away.'
nl|'\n'
comment|'#'
nl|'\n'
name|'if'
name|'channel'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|channel
dedent|''
dedent|''
dedent|''
name|'def'
name|'channel'
op|'('
name|'self'
op|','
name|'channel_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Fetch a Channel object identified by the numeric channel_id, or\n        create that object if it doesn\'t already exist.\n\n        """'
newline|'\n'
name|'if'
name|'channel_id'
name|'in'
name|'self'
op|'.'
name|'channels'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel_id'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'Channel'
op|'('
name|'self'
op|','
name|'channel_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#################'
nl|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|','
name|'reply_code'
op|'='
number|'0'
op|','
name|'reply_text'
op|'='
string|"''"
op|','
name|'method_sig'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        request a connection close\n\n        This method indicates that the sender wants to close the\n        connection. This may be due to internal conditions (e.g. a\n        forced shut-down) or due to an error handling a specific\n        method, i.e. an exception.  When a close is due to an\n        exception, the sender provides the class and method id of the\n        method which caused the exception.\n\n        RULE:\n\n            After sending this method any received method except the\n            Close-OK method MUST be discarded.\n\n        RULE:\n\n            The peer sending this method MAY use a counter or timeout\n            to detect failure of the other peer to respond correctly\n            with the Close-OK method.\n\n        RULE:\n\n            When a server receives the Close method from a client it\n            MUST delete all server-side resources associated with the\n            client\'s context.  A client CANNOT reconnect to a context\n            after sending or receiving a Close method.\n\n        PARAMETERS:\n            reply_code: short\n\n                The reply code. The AMQ reply codes are defined in AMQ\n                RFC 011.\n\n            reply_text: shortstr\n\n                The localised reply text.  This text can be logged as an\n                aid to resolving issues.\n\n            class_id: short\n\n                failing method class\n\n                When the close is provoked by a method exception, this\n                is the class of the method.\n\n            method_id: short\n\n                failing method ID\n\n                When the close is provoked by a method exception, this\n                is the ID of the method.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'transport'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# already closed'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_short'
op|'('
name|'reply_code'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_shortstr'
op|'('
name|'reply_text'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_short'
op|'('
name|'method_sig'
op|'['
number|'0'
op|']'
op|')'
comment|'# class_id'
newline|'\n'
name|'args'
op|'.'
name|'write_short'
op|'('
name|'method_sig'
op|'['
number|'1'
op|']'
op|')'
comment|'# method_id'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'60'
op|')'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'wait'
op|'('
name|'allowed_methods'
op|'='
op|'['
nl|'\n'
op|'('
number|'10'
op|','
number|'61'
op|')'
op|','
comment|'# Connection.close_ok'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_close
dedent|''
name|'def'
name|'_close'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        request a connection close\n\n        This method indicates that the sender wants to close the\n        connection. This may be due to internal conditions (e.g. a\n        forced shut-down) or due to an error handling a specific\n        method, i.e. an exception.  When a close is due to an\n        exception, the sender provides the class and method id of the\n        method which caused the exception.\n\n        RULE:\n\n            After sending this method any received method except the\n            Close-OK method MUST be discarded.\n\n        RULE:\n\n            The peer sending this method MAY use a counter or timeout\n            to detect failure of the other peer to respond correctly\n            with the Close-OK method.\n\n        RULE:\n\n            When a server receives the Close method from a client it\n            MUST delete all server-side resources associated with the\n            client\'s context.  A client CANNOT reconnect to a context\n            after sending or receiving a Close method.\n\n        PARAMETERS:\n            reply_code: short\n\n                The reply code. The AMQ reply codes are defined in AMQ\n                RFC 011.\n\n            reply_text: shortstr\n\n                The localised reply text.  This text can be logged as an\n                aid to resolving issues.\n\n            class_id: short\n\n                failing method class\n\n                When the close is provoked by a method exception, this\n                is the class of the method.\n\n            method_id: short\n\n                failing method ID\n\n                When the close is provoked by a method exception, this\n                is the ID of the method.\n\n        """'
newline|'\n'
name|'reply_code'
op|'='
name|'args'
op|'.'
name|'read_short'
op|'('
op|')'
newline|'\n'
name|'reply_text'
op|'='
name|'args'
op|'.'
name|'read_shortstr'
op|'('
op|')'
newline|'\n'
name|'class_id'
op|'='
name|'args'
op|'.'
name|'read_short'
op|'('
op|')'
newline|'\n'
name|'method_id'
op|'='
name|'args'
op|'.'
name|'read_short'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_x_close_ok'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'raise'
name|'AMQPConnectionException'
op|'('
name|'reply_code'
op|','
name|'reply_text'
op|','
op|'('
name|'class_id'
op|','
name|'method_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_x_close_ok
dedent|''
name|'def'
name|'_x_close_ok'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        confirm a connection close\n\n        This method confirms a Connection.Close method and tells the\n        recipient that it is safe to release resources for the\n        connection and close the socket.\n\n        RULE:\n\n            A peer that detects a socket closure without having\n            received a Close-Ok handshake method SHOULD log the error.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'61'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_close_ok
dedent|''
name|'def'
name|'_close_ok'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        confirm a connection close\n\n        This method confirms a Connection.Close method and tells the\n        recipient that it is safe to release resources for the\n        connection and close the socket.\n\n        RULE:\n\n            A peer that detects a socket closure without having\n            received a Close-Ok handshake method SHOULD log the error.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_do_close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_x_open
dedent|''
name|'def'
name|'_x_open'
op|'('
name|'self'
op|','
name|'virtual_host'
op|','
name|'capabilities'
op|'='
string|"''"
op|','
name|'insist'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        open connection to virtual host\n\n        This method opens a connection to a virtual host, which is a\n        collection of resources, and acts to separate multiple\n        application domains within a server.\n\n        RULE:\n\n            The client MUST open the context before doing any work on\n            the connection.\n\n        PARAMETERS:\n            virtual_host: shortstr\n\n                virtual host name\n\n                The name of the virtual host to work with.\n\n                RULE:\n\n                    If the server supports multiple virtual hosts, it\n                    MUST enforce a full separation of exchanges,\n                    queues, and all associated entities per virtual\n                    host. An application, connected to a specific\n                    virtual host, MUST NOT be able to access resources\n                    of another virtual host.\n\n                RULE:\n\n                    The server SHOULD verify that the client has\n                    permission to access the specified virtual host.\n\n                RULE:\n\n                    The server MAY configure arbitrary limits per\n                    virtual host, such as the number of each type of\n                    entity that may be used, per connection and/or in\n                    total.\n\n            capabilities: shortstr\n\n                required capabilities\n\n                The client may specify a number of capability names,\n                delimited by spaces.  The server can use this string\n                to how to process the client\'s connection request.\n\n            insist: boolean\n\n                insist on connecting to server\n\n                In a configuration with multiple load-sharing servers,\n                the server may respond to a Connection.Open method\n                with a Connection.Redirect. The insist option tells\n                the server that the client is insisting on a\n                connection to the specified server.\n\n                RULE:\n\n                    When the client uses the insist option, the server\n                    SHOULD accept the client connection unless it is\n                    technically unable to do so.\n\n        """'
newline|'\n'
name|'args'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_shortstr'
op|'('
name|'virtual_host'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_shortstr'
op|'('
name|'capabilities'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_bit'
op|'('
name|'insist'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'40'
op|')'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'wait'
op|'('
name|'allowed_methods'
op|'='
op|'['
nl|'\n'
op|'('
number|'10'
op|','
number|'41'
op|')'
op|','
comment|'# Connection.open_ok'
nl|'\n'
op|'('
number|'10'
op|','
number|'50'
op|')'
op|','
comment|'# Connection.redirect'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_open_ok
dedent|''
name|'def'
name|'_open_ok'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        signal that the connection is ready\n\n        This method signals to the client that the connection is ready\n        for use.\n\n        PARAMETERS:\n            known_hosts: shortstr\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'known_hosts'
op|'='
name|'args'
op|'.'
name|'read_shortstr'
op|'('
op|')'
newline|'\n'
name|'AMQP_LOGGER'
op|'.'
name|'debug'
op|'('
string|"'Open OK! known_hosts [%s]'"
op|'%'
name|'self'
op|'.'
name|'known_hosts'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_redirect
dedent|''
name|'def'
name|'_redirect'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        asks the client to use a different server\n\n        This method redirects the client to another server, based on\n        the requested virtual host and/or capabilities.\n\n        RULE:\n\n            When getting the Connection.Redirect method, the client\n            SHOULD reconnect to the host specified, and if that host\n            is not present, to any of the hosts specified in the\n            known-hosts list.\n\n        PARAMETERS:\n            host: shortstr\n\n                server to connect to\n\n                Specifies the server to connect to.  This is an IP\n                address or a DNS name, optionally followed by a colon\n                and a port number. If no port number is specified, the\n                client should use the default port number for the\n                protocol.\n\n            known_hosts: shortstr\n\n        """'
newline|'\n'
name|'host'
op|'='
name|'args'
op|'.'
name|'read_shortstr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'known_hosts'
op|'='
name|'args'
op|'.'
name|'read_shortstr'
op|'('
op|')'
newline|'\n'
name|'AMQP_LOGGER'
op|'.'
name|'debug'
op|'('
string|"'Redirected to [%s], known_hosts [%s]'"
op|'%'
op|'('
name|'host'
op|','
name|'self'
op|'.'
name|'known_hosts'
op|')'
op|')'
newline|'\n'
name|'return'
name|'host'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_secure
dedent|''
name|'def'
name|'_secure'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        security mechanism challenge\n\n        The SASL protocol works by exchanging challenges and responses\n        until both peers have received sufficient information to\n        authenticate each other.  This method challenges the client to\n        provide more information.\n\n        PARAMETERS:\n            challenge: longstr\n\n                security challenge data\n\n                Challenge information, a block of opaque binary data\n                passed to the security mechanism.\n\n        """'
newline|'\n'
name|'challenge'
op|'='
name|'args'
op|'.'
name|'read_longstr'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_x_secure_ok
dedent|''
name|'def'
name|'_x_secure_ok'
op|'('
name|'self'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        security mechanism response\n\n        This method attempts to authenticate, passing a block of SASL\n        data for the security mechanism at the server side.\n\n        PARAMETERS:\n            response: longstr\n\n                security response data\n\n                A block of opaque data passed to the security\n                mechanism.  The contents of this data are defined by\n                the SASL security mechanism.\n\n        """'
newline|'\n'
name|'args'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_longstr'
op|'('
name|'response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'21'
op|')'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_start
dedent|''
name|'def'
name|'_start'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        start connection negotiation\n\n        This method starts the connection negotiation process by\n        telling the client the protocol version that the server\n        proposes, along with a list of security mechanisms which the\n        client can use for authentication.\n\n        RULE:\n\n            If the client cannot handle the protocol version suggested\n            by the server it MUST close the socket connection.\n\n        RULE:\n\n            The server MUST provide a protocol version that is lower\n            than or equal to that requested by the client in the\n            protocol header. If the server cannot support the\n            specified protocol it MUST NOT send this method, but MUST\n            close the socket connection.\n\n        PARAMETERS:\n            version_major: octet\n\n                protocol major version\n\n                The protocol major version that the server agrees to\n                use, which cannot be higher than the client\'s major\n                version.\n\n            version_minor: octet\n\n                protocol major version\n\n                The protocol minor version that the server agrees to\n                use, which cannot be higher than the client\'s minor\n                version.\n\n            server_properties: table\n\n                server properties\n\n            mechanisms: longstr\n\n                available security mechanisms\n\n                A list of the security mechanisms that the server\n                supports, delimited by spaces.  Currently ASL supports\n                these mechanisms: PLAIN.\n\n            locales: longstr\n\n                available message locales\n\n                A list of the message locales that the server\n                supports, delimited by spaces.  The locale defines the\n                language in which the server will send reply texts.\n\n                RULE:\n\n                    All servers MUST support at least the en_US\n                    locale.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'version_major'
op|'='
name|'args'
op|'.'
name|'read_octet'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'version_minor'
op|'='
name|'args'
op|'.'
name|'read_octet'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'server_properties'
op|'='
name|'args'
op|'.'
name|'read_table'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mechanisms'
op|'='
name|'args'
op|'.'
name|'read_longstr'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'locales'
op|'='
name|'args'
op|'.'
name|'read_longstr'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
nl|'\n'
name|'AMQP_LOGGER'
op|'.'
name|'debug'
op|'('
string|"'Start from server, version: %d.%d, properties: %s, mechanisms: %s, locales: %s'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'version_major'
op|','
name|'self'
op|'.'
name|'version_minor'
op|','
nl|'\n'
name|'str'
op|'('
name|'self'
op|'.'
name|'server_properties'
op|')'
op|','
name|'self'
op|'.'
name|'mechanisms'
op|','
name|'self'
op|'.'
name|'locales'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_x_start_ok
dedent|''
name|'def'
name|'_x_start_ok'
op|'('
name|'self'
op|','
name|'client_properties'
op|','
name|'mechanism'
op|','
name|'response'
op|','
name|'locale'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        select security mechanism and locale\n\n        This method selects a SASL security mechanism. ASL uses SASL\n        (RFC2222) to negotiate authentication and encryption.\n\n        PARAMETERS:\n            client_properties: table\n\n                client properties\n\n            mechanism: shortstr\n\n                selected security mechanism\n\n                A single security mechanisms selected by the client,\n                which must be one of those specified by the server.\n\n                RULE:\n\n                    The client SHOULD authenticate using the highest-\n                    level security profile it can handle from the list\n                    provided by the server.\n\n                RULE:\n\n                    The mechanism field MUST contain one of the\n                    security mechanisms proposed by the server in the\n                    Start method. If it doesn\'t, the server MUST close\n                    the socket.\n\n            response: longstr\n\n                security response data\n\n                A block of opaque data passed to the security\n                mechanism. The contents of this data are defined by\n                the SASL security mechanism.  For the PLAIN security\n                mechanism this is defined as a field table holding two\n                fields, LOGIN and PASSWORD.\n\n            locale: shortstr\n\n                selected message locale\n\n                A single message local selected by the client, which\n                must be one of those specified by the server.\n\n        """'
newline|'\n'
name|'args'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_table'
op|'('
name|'client_properties'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_shortstr'
op|'('
name|'mechanism'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_longstr'
op|'('
name|'response'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_shortstr'
op|'('
name|'locale'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'11'
op|')'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_tune
dedent|''
name|'def'
name|'_tune'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        propose connection tuning parameters\n\n        This method proposes a set of connection configuration values\n        to the client.  The client can accept and/or adjust these.\n\n        PARAMETERS:\n            channel_max: short\n\n                proposed maximum channels\n\n                The maximum total number of channels that the server\n                allows per connection. Zero means that the server does\n                not impose a fixed limit, but the number of allowed\n                channels may be limited by available server resources.\n\n            frame_max: long\n\n                proposed maximum frame size\n\n                The largest frame size that the server proposes for\n                the connection. The client can negotiate a lower\n                value.  Zero means that the server does not impose any\n                specific limit but may reject very large frames if it\n                cannot allocate resources for them.\n\n                RULE:\n\n                    Until the frame-max has been negotiated, both\n                    peers MUST accept frames of up to 4096 octets\n                    large. The minimum non-zero value for the frame-\n                    max field is 4096.\n\n            heartbeat: short\n\n                desired heartbeat delay\n\n                The delay, in seconds, of the connection heartbeat\n                that the server wants.  Zero means the server does not\n                want a heartbeat.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'channel_max'
op|'='
name|'args'
op|'.'
name|'read_short'
op|'('
op|')'
name|'or'
name|'self'
op|'.'
name|'channel_max'
newline|'\n'
name|'self'
op|'.'
name|'frame_max'
op|'='
name|'args'
op|'.'
name|'read_long'
op|'('
op|')'
name|'or'
name|'self'
op|'.'
name|'frame_max'
newline|'\n'
name|'self'
op|'.'
name|'method_writer'
op|'.'
name|'frame_max'
op|'='
name|'self'
op|'.'
name|'frame_max'
newline|'\n'
name|'self'
op|'.'
name|'heartbeat'
op|'='
name|'args'
op|'.'
name|'read_short'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_x_tune_ok'
op|'('
name|'self'
op|'.'
name|'channel_max'
op|','
name|'self'
op|'.'
name|'frame_max'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|_x_tune_ok
dedent|''
name|'def'
name|'_x_tune_ok'
op|'('
name|'self'
op|','
name|'channel_max'
op|','
name|'frame_max'
op|','
name|'heartbeat'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        negotiate connection tuning parameters\n\n        This method sends the client\'s connection tuning parameters to\n        the server. Certain fields are negotiated, others provide\n        capability information.\n\n        PARAMETERS:\n            channel_max: short\n\n                negotiated maximum channels\n\n                The maximum total number of channels that the client\n                will use per connection.  May not be higher than the\n                value specified by the server.\n\n                RULE:\n\n                    The server MAY ignore the channel-max value or MAY\n                    use it for tuning its resource allocation.\n\n            frame_max: long\n\n                negotiated maximum frame size\n\n                The largest frame size that the client and server will\n                use for the connection.  Zero means that the client\n                does not impose any specific limit but may reject very\n                large frames if it cannot allocate resources for them.\n                Note that the frame-max limit applies principally to\n                content frames, where large contents can be broken\n                into frames of arbitrary size.\n\n                RULE:\n\n                    Until the frame-max has been negotiated, both\n                    peers must accept frames of up to 4096 octets\n                    large. The minimum non-zero value for the frame-\n                    max field is 4096.\n\n            heartbeat: short\n\n                desired heartbeat delay\n\n                The delay, in seconds, of the connection heartbeat\n                that the client wants. Zero means the client does not\n                want a heartbeat.\n\n        """'
newline|'\n'
name|'args'
op|'='
name|'AMQPWriter'
op|'('
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_short'
op|'('
name|'channel_max'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_long'
op|'('
name|'frame_max'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'write_short'
op|'('
name|'heartbeat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_send_method'
op|'('
op|'('
number|'10'
op|','
number|'31'
op|')'
op|','
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_tune_ok'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_METHOD_MAP
dedent|''
name|'_METHOD_MAP'
op|'='
op|'{'
nl|'\n'
op|'('
number|'10'
op|','
number|'10'
op|')'
op|':'
name|'_start'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'20'
op|')'
op|':'
name|'_secure'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'30'
op|')'
op|':'
name|'_tune'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'41'
op|')'
op|':'
name|'_open_ok'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'50'
op|')'
op|':'
name|'_redirect'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'60'
op|')'
op|':'
name|'_close'
op|','
nl|'\n'
op|'('
number|'10'
op|','
number|'61'
op|')'
op|':'
name|'_close_ok'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
endmarker|''
end_unit

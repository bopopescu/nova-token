begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2009, Google Inc.'
nl|'\n'
comment|'# All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Redistribution and use in source and binary forms, with or without'
nl|'\n'
comment|'# modification, are permitted provided that the following conditions are'
nl|'\n'
comment|'# met:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     * Redistributions of source code must retain the above copyright'
nl|'\n'
comment|'# notice, this list of conditions and the following disclaimer.'
nl|'\n'
comment|'#     * Redistributions in binary form must reproduce the above'
nl|'\n'
comment|'# copyright notice, this list of conditions and the following disclaimer'
nl|'\n'
comment|'# in the documentation and/or other materials provided with the'
nl|'\n'
comment|'# distribution.'
nl|'\n'
comment|'#     * Neither the name of Google Inc. nor the names of its'
nl|'\n'
comment|'# contributors may be used to endorse or promote products derived from'
nl|'\n'
comment|'# this software without specific prior written permission.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
nl|'\n'
comment|'# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
nl|'\n'
comment|'# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT'
nl|'\n'
comment|'# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,'
nl|'\n'
comment|'# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,'
nl|'\n'
comment|'# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY'
nl|'\n'
comment|'# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
nl|'\n'
comment|'# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE'
nl|'\n'
comment|'# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
nl|'\n'
nl|'\n'
string|'"""Auxiliary module for testing flags.py.\n\nThe purpose of this module is to define a few flags, and declare some\nother flags as being important.  We want to make sure the unit tests\nfor flags.py involve more than one module.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|__author__
name|'__author__'
op|'='
string|"'Alex Salcianu'"
newline|'\n'
nl|'\n'
DECL|variable|__pychecker__
name|'__pychecker__'
op|'='
string|'"no-local"'
comment|'# for unittest'
newline|'\n'
nl|'\n'
comment|"# We use the name 'flags' internally in this test, for historical reasons."
nl|'\n'
comment|"# Don't do this yourself! :-) Just do 'import gflags; FLAGS=gflags.FLAGS; etc'"
nl|'\n'
name|'import'
name|'gflags'
name|'as'
name|'flags'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
comment|'# For historical reasons we use the name module_bar instead of test_module_bar.'
nl|'\n'
name|'import'
name|'test_module_bar'
name|'as'
name|'module_bar'
newline|'\n'
nl|'\n'
DECL|variable|DECLARED_KEY_FLAGS
name|'DECLARED_KEY_FLAGS'
op|'='
op|'['
string|"'tmod_bar_x'"
op|','
string|"'tmod_bar_z'"
op|','
string|"'tmod_bar_t'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DefineFlags
name|'def'
name|'DefineFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Defines a few flags."""'
newline|'\n'
name|'module_bar'
op|'.'
name|'DefineFlags'
op|'('
op|')'
newline|'\n'
comment|"# The 'tmod_foo_' prefix (short for 'test_module_foo') ensures that we"
nl|'\n'
comment|'# have no name clash with existing flags.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'tmod_foo_bool'"
op|','
name|'True'
op|','
string|"'Boolean flag from module foo.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'tmod_foo_str'"
op|','
string|"'default'"
op|','
string|"'String flag.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'tmod_foo_int'"
op|','
number|'3'
op|','
string|"'Sample int flag.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DeclareKeyFlags
dedent|''
name|'def'
name|'DeclareKeyFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Declares a few key flags."""'
newline|'\n'
name|'for'
name|'flag_name'
name|'in'
name|'DECLARED_KEY_FLAGS'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
name|'flag_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DeclareExtraKeyFlags
dedent|''
dedent|''
name|'def'
name|'DeclareExtraKeyFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Declares some extra key flags."""'
newline|'\n'
name|'flags'
op|'.'
name|'ADOPT_module_key_flags'
op|'('
name|'module_bar'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|NamesOfDefinedFlags
dedent|''
name|'def'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns: list of names of flags defined by this module."""'
newline|'\n'
name|'return'
op|'['
string|"'tmod_foo_bool'"
op|','
string|"'tmod_foo_str'"
op|','
string|"'tmod_foo_int'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|NamesOfDeclaredKeyFlags
dedent|''
name|'def'
name|'NamesOfDeclaredKeyFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns: list of names of key flags for this module."""'
newline|'\n'
name|'return'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|'+'
name|'DECLARED_KEY_FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|NamesOfDeclaredExtraKeyFlags
dedent|''
name|'def'
name|'NamesOfDeclaredExtraKeyFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns the list of names of additional key flags for this module.\n\n  These are the flags that became key for this module only as a result\n  of a call to DeclareExtraKeyFlags() above.  I.e., the flags declared\n  by module_bar, that were not already declared as key for this\n  module.\n\n  Returns:\n    The list of names of additional key flags for this module.\n  """'
newline|'\n'
name|'names_of_extra_key_flags'
op|'='
name|'list'
op|'('
name|'module_bar'
op|'.'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'flag_name'
name|'in'
name|'NamesOfDeclaredKeyFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'while'
name|'flag_name'
name|'in'
name|'names_of_extra_key_flags'
op|':'
newline|'\n'
indent|'      '
name|'names_of_extra_key_flags'
op|'.'
name|'remove'
op|'('
name|'flag_name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'names_of_extra_key_flags'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|RemoveFlags
dedent|''
name|'def'
name|'RemoveFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Deletes the flag definitions done by the above DefineFlags()."""'
newline|'\n'
name|'for'
name|'flag_name'
name|'in'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'module_bar'
op|'.'
name|'RemoveOneFlag'
op|'('
name|'flag_name'
op|')'
newline|'\n'
dedent|''
name|'module_bar'
op|'.'
name|'RemoveFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|GetModuleName
dedent|''
name|'def'
name|'GetModuleName'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Uses flags._GetCallingModule() to return the name of this module.\n\n  For checking that _GetCallingModule works as expected.\n\n  Returns:\n    A string, the name of this module.\n  """'
newline|'\n'
comment|'# Calling the protected _GetCallingModule generates a lint warning,'
nl|'\n'
comment|'# but we do not have any other alternative to test that function.'
nl|'\n'
name|'return'
name|'flags'
op|'.'
name|'_GetCallingModule'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

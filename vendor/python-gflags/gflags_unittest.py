begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2007, Google Inc.'
nl|'\n'
comment|'# All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Redistribution and use in source and binary forms, with or without'
nl|'\n'
comment|'# modification, are permitted provided that the following conditions are'
nl|'\n'
comment|'# met:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     * Redistributions of source code must retain the above copyright'
nl|'\n'
comment|'# notice, this list of conditions and the following disclaimer.'
nl|'\n'
comment|'#     * Redistributions in binary form must reproduce the above'
nl|'\n'
comment|'# copyright notice, this list of conditions and the following disclaimer'
nl|'\n'
comment|'# in the documentation and/or other materials provided with the'
nl|'\n'
comment|'# distribution.'
nl|'\n'
comment|'#     * Neither the name of Google Inc. nor the names of its'
nl|'\n'
comment|'# contributors may be used to endorse or promote products derived from'
nl|'\n'
comment|'# this software without specific prior written permission.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
nl|'\n'
comment|'# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
nl|'\n'
comment|'# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT'
nl|'\n'
comment|'# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,'
nl|'\n'
comment|'# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,'
nl|'\n'
comment|'# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY'
nl|'\n'
comment|'# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
nl|'\n'
comment|'# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE'
nl|'\n'
comment|'# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
nl|'\n'
nl|'\n'
string|'"Unittest for gflags.py module"'
newline|'\n'
nl|'\n'
DECL|variable|__pychecker__
name|'__pychecker__'
op|'='
string|'"no-local"'
comment|'# for unittest'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
comment|"# We use the name 'flags' internally in this test, for historical reasons."
nl|'\n'
comment|"# Don't do this yourself! :-)  Just do 'import gflags; FLAGS=gflags.FLAGS; etc'"
nl|'\n'
name|'import'
name|'gflags'
name|'as'
name|'flags'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
comment|'# For historic reasons, we use the name module_foo instead of'
nl|'\n'
comment|'# test_module_foo, and module_bar instead of test_module_bar.'
nl|'\n'
name|'import'
name|'test_module_foo'
name|'as'
name|'module_foo'
newline|'\n'
name|'import'
name|'test_module_bar'
name|'as'
name|'module_bar'
newline|'\n'
name|'import'
name|'test_module_baz'
name|'as'
name|'module_baz'
newline|'\n'
nl|'\n'
DECL|function|MultiLineEqual
name|'def'
name|'MultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'help'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns True if expected_help == help.  Otherwise returns False\n  and logs the difference in a human-readable way.\n  """'
newline|'\n'
name|'if'
name|'help'
op|'=='
name|'expected_help'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
string|'"Error: FLAGS.MainModuleHelp() didn\'t return the expected result."'
newline|'\n'
name|'print'
string|'"Got:"'
newline|'\n'
name|'print'
name|'help'
newline|'\n'
name|'print'
string|'"[End of got]"'
newline|'\n'
nl|'\n'
name|'help_lines'
op|'='
name|'help'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'expected_help_lines'
op|'='
name|'expected_help'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'num_help_lines'
op|'='
name|'len'
op|'('
name|'help_lines'
op|')'
newline|'\n'
name|'num_expected_help_lines'
op|'='
name|'len'
op|'('
name|'expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_help_lines'
op|'!='
name|'num_expected_help_lines'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Number of help lines = %d, expected %d"'
op|'%'
op|'('
nl|'\n'
name|'num_help_lines'
op|','
name|'num_expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'num_to_match'
op|'='
name|'min'
op|'('
name|'num_help_lines'
op|','
name|'num_expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_to_match'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'help_lines'
op|'['
name|'i'
op|']'
op|'!='
name|'expected_help_lines'
op|'['
name|'i'
op|']'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"One discrepancy: Got:"'
newline|'\n'
name|'print'
name|'help_lines'
op|'['
name|'i'
op|']'
newline|'\n'
name|'print'
string|'"Expected:"'
newline|'\n'
name|'print'
name|'expected_help_lines'
op|'['
name|'i'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If we got here, found no discrepancy, print first new line.'
nl|'\n'
indent|'    '
name|'if'
name|'num_help_lines'
op|'>'
name|'num_expected_help_lines'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"New help line:"'
newline|'\n'
name|'print'
name|'help_lines'
op|'['
name|'num_expected_help_lines'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'num_expected_help_lines'
op|'>'
name|'num_help_lines'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Missing expected help line:"'
newline|'\n'
name|'print'
name|'expected_help_lines'
op|'['
name|'num_help_lines'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Bug in this test -- discrepancy detected but not found."'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlagsUnitTest
dedent|''
name|'class'
name|'FlagsUnitTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"Flags Unit Test"'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# make sure we are using the old, stupid way of parsing flags.'
nl|'\n'
indent|'    '
name|'FLAGS'
op|'.'
name|'UseGnuGetOpt'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertListEqual
dedent|''
name|'def'
name|'assertListEqual'
op|'('
name|'self'
op|','
name|'list1'
op|','
name|'list2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Asserts that, when sorted, list1 and list2 are identical."""'
newline|'\n'
name|'sorted_list1'
op|'='
name|'list1'
op|'['
op|':'
op|']'
newline|'\n'
name|'sorted_list2'
op|'='
name|'list2'
op|'['
op|':'
op|']'
newline|'\n'
name|'sorted_list1'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'sorted_list2'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted_list1'
op|','
name|'sorted_list2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertMultiLineEqual
dedent|''
name|'def'
name|'assertMultiLineEqual'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'actual'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'MultiLineEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_flags
dedent|''
name|'def'
name|'test_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'##############################################'
nl|'\n'
comment|'# Test normal usage with no (expected) errors.'
nl|'\n'
nl|'\n'
comment|'# Define flags'
nl|'\n'
indent|'    '
name|'number_test_framework_flags'
op|'='
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
newline|'\n'
name|'repeatHelp'
op|'='
string|'"how many times to repeat (0-5)"'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"repeat"'
op|','
number|'4'
op|','
name|'repeatHelp'
op|','
nl|'\n'
name|'lower_bound'
op|'='
number|'0'
op|','
name|'short_name'
op|'='
string|"'r'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"name"'
op|','
string|'"Bob"'
op|','
string|'"namehelp"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"debug"'
op|','
number|'0'
op|','
string|'"debughelp"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"q"'
op|','
number|'1'
op|','
string|'"quiet mode"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"quack"'
op|','
number|'0'
op|','
string|'"superstring of \'q\'"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"noexec"'
op|','
number|'1'
op|','
string|'"boolean flag with no as prefix"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"x"'
op|','
number|'3'
op|','
string|'"how eXtreme to be"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"l"'
op|','
number|'0x7fffffff00000000L'
op|','
string|'"how long to be"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'letters'"
op|','
string|"'a,b,c'"
op|','
string|'"a list of letters"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'numbers'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
string|'"a list of numbers"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_enum'
op|'('
string|'"kwery"'
op|','
name|'None'
op|','
op|'['
string|"'who'"
op|','
string|"'what'"
op|','
string|"'why'"
op|','
string|"'where'"
op|','
string|"'when'"
op|']'
op|','
nl|'\n'
string|'"?"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Specify number of flags defined above.  The short_name defined'
nl|'\n'
comment|"# for 'repeat' counts as an extra flag."
nl|'\n'
name|'number_defined_flags'
op|'='
number|'11'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'number_defined_flags'
op|'+'
name|'number_test_framework_flags'
op|')'
newline|'\n'
nl|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'repeat'
op|'=='
number|'4'
op|','
string|'"integer default values not set:"'
op|'+'
name|'FLAGS'
op|'.'
name|'repeat'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'name'
op|'=='
string|"'Bob'"
op|','
string|'"default values not set:"'
op|'+'
name|'FLAGS'
op|'.'
name|'name'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'debug'
op|'=='
number|'0'
op|','
string|'"boolean default values not set:"'
op|'+'
name|'FLAGS'
op|'.'
name|'debug'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'q'
op|'=='
number|'1'
op|','
string|'"boolean default values not set:"'
op|'+'
name|'FLAGS'
op|'.'
name|'q'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'x'
op|'=='
number|'3'
op|','
string|'"integer default values not set:"'
op|'+'
name|'FLAGS'
op|'.'
name|'x'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'l'
op|'=='
number|'0x7fffffff00000000L'
op|','
op|'('
string|'"integer default values not set:"'
nl|'\n'
op|'+'
name|'FLAGS'
op|'.'
name|'l'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'letters'
op|'=='
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
op|','
op|'('
string|'"list default values not set:"'
nl|'\n'
op|'+'
name|'FLAGS'
op|'.'
name|'letters'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'numbers'
op|'=='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
op|'('
string|'"list default values not set:"'
nl|'\n'
op|'+'
name|'FLAGS'
op|'.'
name|'numbers'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'kwery'
name|'is'
name|'None'
op|','
op|'('
string|'"enum default None value not set:"'
nl|'\n'
op|'+'
name|'FLAGS'
op|'.'
name|'kwery'
op|')'
newline|'\n'
nl|'\n'
name|'flag_values'
op|'='
name|'FLAGS'
op|'.'
name|'FlagValuesDict'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'repeat'"
op|']'
op|'=='
number|'4'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'name'"
op|']'
op|'=='
string|"'Bob'"
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'debug'"
op|']'
op|'=='
number|'0'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'r'"
op|']'
op|'=='
number|'4'
comment|'# short for of repeat'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'q'"
op|']'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'quack'"
op|']'
op|'=='
number|'0'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'x'"
op|']'
op|'=='
number|'3'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'l'"
op|']'
op|'=='
number|'0x7fffffff00000000L'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'letters'"
op|']'
op|'=='
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'numbers'"
op|']'
op|'=='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
name|'assert'
name|'flag_values'
op|'['
string|"'kwery'"
op|']'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Verify string form of defaults'
nl|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'repeat'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'4\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'name'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'Bob\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'false\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'q'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'true\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'quack'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'false\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'noexec'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'true\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'x'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'3\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'l'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'9223372032559808512\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'letters'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'a,b,c\'"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'numbers'"
op|']'
op|'.'
name|'default_as_str'
op|'=='
string|'"\'1,2,3\'"'
newline|'\n'
nl|'\n'
comment|'# Verify that the iterator for flags yields all the keys'
nl|'\n'
name|'keys'
op|'='
name|'list'
op|'('
name|'FLAGS'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'reg_flags'
op|'='
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'reg_flags'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'keys'
op|','
name|'reg_flags'
op|')'
newline|'\n'
nl|'\n'
comment|'# Parse flags'
nl|'\n'
comment|'# .. empty command line'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
nl|'\n'
comment|'# .. non-empty command line'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug'"
op|','
string|"'--name=Bob'"
op|','
string|"'-q'"
op|','
string|"'--x=8'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'name'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'name'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'q'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'q'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'x'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'x'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
nl|'\n'
comment|'# Flags list'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'number_defined_flags'
op|'+'
name|'number_test_framework_flags'
op|')'
newline|'\n'
name|'assert'
string|"'name'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'debug'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'repeat'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'r'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'q'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'quack'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'x'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'l'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'letters'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
name|'assert'
string|"'numbers'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# has_key'
nl|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'has_key'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'assert'
name|'not'
name|'FLAGS'
op|'.'
name|'has_key'
op|'('
string|"'name2'"
op|')'
newline|'\n'
name|'assert'
string|"'name'"
name|'in'
name|'FLAGS'
newline|'\n'
name|'assert'
string|"'name2'"
name|'not'
name|'in'
name|'FLAGS'
newline|'\n'
nl|'\n'
comment|'# try deleting a flag'
nl|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'r'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'number_defined_flags'
op|'-'
number|'1'
op|'+'
name|'number_test_framework_flags'
op|')'
newline|'\n'
name|'assert'
name|'not'
string|"'r'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# .. command line with extra stuff'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug'"
op|','
string|"'--name=Bob'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'name'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'FLAGS'
op|'['
string|"'name'"
op|']'
op|'.'
name|'present'
op|'='
number|'0'
comment|'# Reset'
newline|'\n'
nl|'\n'
comment|'# Test reset'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'value'
newline|'\n'
name|'FLAGS'
op|'.'
name|'Reset'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'present'
op|'=='
number|'0'
newline|'\n'
name|'assert'
name|'not'
name|'FLAGS'
op|'['
string|"'debug'"
op|']'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
comment|'# Test that reset restores default value when default value is None.'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--kwery=who'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'kwery'"
op|']'
op|'.'
name|'present'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'kwery'"
op|']'
op|'.'
name|'value'
op|'=='
string|"'who'"
newline|'\n'
name|'FLAGS'
op|'.'
name|'Reset'
op|'('
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'kwery'"
op|']'
op|'.'
name|'present'
op|'=='
number|'0'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'['
string|"'kwery'"
op|']'
op|'.'
name|'value'
op|'=='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Test integer argument passing'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'0x12345'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|','
number|'0x12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|')'
op|','
name|'int'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'0x1234567890ABCDEF1234567890ABCDEF'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|','
number|'0x1234567890ABCDEF1234567890ABCDEF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|')'
op|','
name|'long'
op|')'
newline|'\n'
nl|'\n'
comment|'# Treat 0-prefixed parameters as base-10, not base-8'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'012345'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|','
number|'12345'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|')'
op|','
name|'int'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'0123459'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|','
number|'123459'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'type'
op|'('
name|'FLAGS'
op|'.'
name|'x'
op|')'
op|','
name|'int'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'0x123efg'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"failed to detect invalid hex argument"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--x'"
op|','
string|"'0X123efg'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"failed to detect invalid hex argument"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Test boolean argument parsing'
nl|'\n'
dedent|''
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"test0"'
op|','
name|'None'
op|','
string|'"test boolean parsing"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--notest0'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test0'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"test1"'
op|','
name|'None'
op|','
string|'"test boolean parsing"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--test1'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test1'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'test0'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--test0=false'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test0'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'test1'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--test1=true'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test1'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'test0'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--test0=0'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test0'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'test1'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--test1=1'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'test1'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
comment|"# Test booleans that already have 'no' as a prefix"
nl|'\n'
name|'FLAGS'
op|'.'
name|'noexec'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nonoexec'"
op|','
string|"'--name'"
op|','
string|"'Bob'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'noexec'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'noexec'
op|'='
name|'None'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--name'"
op|','
string|"'Bob'"
op|','
string|"'--noexec'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'noexec'
op|'=='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Test unassigned booleans'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"testnone"'
op|','
name|'None'
op|','
string|'"test boolean parsing"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'testnone'
op|'=='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Test get with default'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"testget1"'
op|','
name|'None'
op|','
string|'"test parsing with defaults"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"testget2"'
op|','
name|'None'
op|','
string|'"test parsing with defaults"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"testget3"'
op|','
name|'None'
op|','
string|'"test parsing with defaults"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|'"testget4"'
op|','
name|'None'
op|','
string|'"test parsing with defaults"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--testget1'"
op|','
string|"'--notestget2'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'testget1'"
op|','
string|"'foo'"
op|')'
op|'=='
number|'1'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'testget2'"
op|','
string|"'foo'"
op|')'
op|'=='
number|'0'
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'testget3'"
op|','
string|"'foo'"
op|')'
op|'=='
string|"'foo'"
newline|'\n'
name|'assert'
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'testget4'"
op|','
string|"'foo'"
op|')'
op|'=='
string|"'foo'"
newline|'\n'
nl|'\n'
comment|'# test list code'
nl|'\n'
name|'lists'
op|'='
op|'['
op|'['
string|"'hello'"
op|','
string|"'moo'"
op|','
string|"'boo'"
op|','
string|"'1'"
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|','
op|']'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'testlist'"
op|','
string|"''"
op|','
string|"'test lists parsing'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_spaceseplist'
op|'('
string|"'testspacelist'"
op|','
string|"''"
op|','
string|"'tests space lists parsing'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
op|','
name|'sep'
name|'in'
op|'('
op|'('
string|"'testlist'"
op|','
string|"','"
op|')'
op|','
op|'('
string|"'testspacelist'"
op|','
string|"' '"
op|')'
op|','
nl|'\n'
op|'('
string|"'testspacelist'"
op|','
string|"'\\n'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'for'
name|'lst'
name|'in'
name|'lists'
op|':'
newline|'\n'
indent|'        '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--%s=%s'"
op|'%'
op|'('
name|'name'
op|','
name|'sep'
op|'.'
name|'join'
op|'('
name|'lst'
op|')'
op|')'
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'getattr'
op|'('
name|'FLAGS'
op|','
name|'name'
op|')'
op|','
name|'lst'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test help text'
nl|'\n'
dedent|''
dedent|''
name|'flagsHelp'
op|'='
name|'str'
op|'('
name|'FLAGS'
op|')'
newline|'\n'
name|'assert'
name|'flagsHelp'
op|'.'
name|'find'
op|'('
string|'"repeat"'
op|')'
op|'!='
op|'-'
number|'1'
op|','
string|'"cannot find flag in help"'
newline|'\n'
name|'assert'
name|'flagsHelp'
op|'.'
name|'find'
op|'('
name|'repeatHelp'
op|')'
op|'!='
op|'-'
number|'1'
op|','
string|'"cannot find help string in help"'
newline|'\n'
nl|'\n'
comment|'# Test flag specified twice'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--repeat=4'"
op|','
string|"'--repeat=2'"
op|','
string|"'--debug'"
op|','
string|"'--nodebug'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'repeat'"
op|','
name|'None'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'debug'"
op|','
name|'None'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test MultiFlag with single default value'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_multistring'
op|'('
string|"'s_str'"
op|','
string|"'sing1'"
op|','
nl|'\n'
string|"'string option that can occur multiple times'"
op|','
nl|'\n'
name|'short_name'
op|'='
string|"'s'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'s_str'"
op|','
name|'None'
op|')'
op|','
op|'['
string|"'sing1'"
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test MultiFlag with list of default values'
nl|'\n'
name|'multi_string_defs'
op|'='
op|'['
string|"'def1'"
op|','
string|"'def2'"
op|','
op|']'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_multistring'
op|'('
string|"'m_str'"
op|','
name|'multi_string_defs'
op|','
nl|'\n'
string|"'string option that can occur multiple times'"
op|','
nl|'\n'
name|'short_name'
op|'='
string|"'m'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'m_str'"
op|','
name|'None'
op|')'
op|','
name|'multi_string_defs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test flag specified multiple times with a MultiFlag'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--m_str=str1'"
op|','
string|"'-m'"
op|','
string|"'str2'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'m_str'"
op|','
name|'None'
op|')'
op|','
op|'['
string|"'str1'"
op|','
string|"'str2'"
op|','
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test single-letter flags; should support both single and double dash'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'-q'"
op|','
string|"'-x8'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'q'"
op|','
name|'None'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'x'"
op|','
name|'None'
op|')'
op|','
number|'8'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--q'"
op|','
string|"'--x'"
op|','
string|"'9'"
op|','
string|"'--noqu'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'q'"
op|','
name|'None'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'x'"
op|','
name|'None'
op|')'
op|','
number|'9'
op|')'
newline|'\n'
comment|"# --noqu should match '--noquack since it's a unique prefix"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'quack'"
op|','
name|'None'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--noq'"
op|','
string|"'--x=10'"
op|','
string|"'--qu'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'q'"
op|','
name|'None'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'x'"
op|','
name|'None'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'quack'"
op|','
name|'None'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'####################################'
nl|'\n'
comment|'# Test flag serialization code:'
nl|'\n'
nl|'\n'
name|'oldtestlist'
op|'='
name|'FLAGS'
op|'.'
name|'testlist'
newline|'\n'
name|'oldtestspacelist'
op|'='
name|'FLAGS'
op|'.'
name|'testspacelist'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'test0'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'test1'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'testnone'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'s_str'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'test0'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
string|"'--notest0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'test1'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
string|"'--test1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'testnone'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'s_str'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
string|"'--s_str=sing1'"
op|')'
newline|'\n'
nl|'\n'
name|'testlist1'
op|'='
op|'['
string|"'aa'"
op|','
string|"'bb'"
op|']'
newline|'\n'
name|'testspacelist1'
op|'='
op|'['
string|"'aa'"
op|','
string|"'bb'"
op|','
string|"'cc'"
op|']'
newline|'\n'
name|'FLAGS'
op|'.'
name|'testlist'
op|'='
name|'list'
op|'('
name|'testlist1'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'testspacelist'
op|'='
name|'list'
op|'('
name|'testspacelist1'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'testlist'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'testspacelist'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'testlist'
op|','
name|'testlist1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'testspacelist'
op|','
name|'testspacelist1'
op|')'
newline|'\n'
nl|'\n'
name|'testlist1'
op|'='
op|'['
string|"'aa some spaces'"
op|','
string|"'bb'"
op|']'
newline|'\n'
name|'testspacelist1'
op|'='
op|'['
string|"'aa'"
op|','
string|"'bb,some,commas,'"
op|','
string|"'cc'"
op|']'
newline|'\n'
name|'FLAGS'
op|'.'
name|'testlist'
op|'='
name|'list'
op|'('
name|'testlist1'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'testspacelist'
op|'='
name|'list'
op|'('
name|'testspacelist1'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'testlist'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'testspacelist'"
op|']'
op|'.'
name|'Serialize'
op|'('
op|')'
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'testlist'
op|','
name|'testlist1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'testspacelist'
op|','
name|'testspacelist1'
op|')'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'testlist'
op|'='
name|'oldtestlist'
newline|'\n'
name|'FLAGS'
op|'.'
name|'testspacelist'
op|'='
name|'oldtestspacelist'
newline|'\n'
nl|'\n'
comment|'####################################'
nl|'\n'
comment|'# Test flag-update:'
nl|'\n'
nl|'\n'
DECL|function|ArgsString
name|'def'
name|'ArgsString'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'flagnames'
op|'='
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'flagnames'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'nonbool_flags'
op|'='
op|'['
string|"'--%s %s'"
op|'%'
op|'('
name|'name'
op|','
name|'FLAGS'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'flagnames'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'FLAGS'
op|'['
name|'name'
op|']'
op|','
name|'flags'
op|'.'
name|'BooleanFlag'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'truebool_flags'
op|'='
op|'['
string|"'--%s'"
op|'%'
op|'('
name|'name'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'flagnames'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'FLAGS'
op|'['
name|'name'
op|']'
op|','
name|'flags'
op|'.'
name|'BooleanFlag'
op|')'
name|'and'
nl|'\n'
name|'FLAGS'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'falsebool_flags'
op|'='
op|'['
string|"'--no%s'"
op|'%'
op|'('
name|'name'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'flagnames'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'FLAGS'
op|'['
name|'name'
op|']'
op|','
name|'flags'
op|'.'
name|'BooleanFlag'
op|')'
name|'and'
nl|'\n'
name|'not'
name|'FLAGS'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'return'
string|"' '"
op|'.'
name|'join'
op|'('
name|'nonbool_flags'
op|'+'
name|'truebool_flags'
op|'+'
name|'falsebool_flags'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--repeat=3'"
op|','
string|"'--name=giants'"
op|','
string|"'--nodebug'"
op|')'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'repeat'"
op|','
name|'None'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'None'
op|')'
op|','
string|"'giants'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'debug'"
op|','
name|'None'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ArgsString'
op|'('
op|')'
op|','
nl|'\n'
string|'"--kwery None "'
nl|'\n'
string|'"--l 9223372032559808512 "'
nl|'\n'
string|'"--letters [\'a\', \'b\', \'c\'] "'
nl|'\n'
string|'"--m [\'str1\', \'str2\'] --m_str [\'str1\', \'str2\'] "'
nl|'\n'
string|'"--name giants "'
nl|'\n'
string|'"--numbers [1, 2, 3] "'
nl|'\n'
string|'"--repeat 3 "'
nl|'\n'
string|'"--s [\'sing1\'] --s_str [\'sing1\'] "'
nl|'\n'
string|'"--testget4 None --testlist [] "'
nl|'\n'
string|'"--testspacelist [] --x 10 "'
nl|'\n'
string|'"--noexec --quack "'
nl|'\n'
string|'"--test1 "'
nl|'\n'
string|'"--testget1 --tmod_baz_x --no? --nodebug --nohelp --nohelpshort --nohelpxml "'
nl|'\n'
string|'"--noq --notest0 --notestget2 "'
nl|'\n'
string|'"--notestget3 --notestnone"'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug'"
op|','
string|"'--m_str=upd1'"
op|','
string|"'-s'"
op|','
string|"'upd2'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'repeat'"
op|','
name|'None'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
name|'None'
op|')'
op|','
string|"'giants'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'get'
op|'('
string|"'debug'"
op|','
name|'None'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# items appended to existing non-default value lists for --m/--m_str'
nl|'\n'
comment|'# new value overwrites default value (not appended to it) for --s/--s_str'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ArgsString'
op|'('
op|')'
op|','
nl|'\n'
string|'"--kwery None "'
nl|'\n'
string|'"--l 9223372032559808512 "'
nl|'\n'
string|'"--letters [\'a\', \'b\', \'c\'] "'
nl|'\n'
string|'"--m [\'str1\', \'str2\', \'upd1\'] "'
nl|'\n'
string|'"--m_str [\'str1\', \'str2\', \'upd1\'] "'
nl|'\n'
string|'"--name giants "'
nl|'\n'
string|'"--numbers [1, 2, 3] "'
nl|'\n'
string|'"--repeat 3 "'
nl|'\n'
string|'"--s [\'upd2\'] --s_str [\'upd2\'] "'
nl|'\n'
string|'"--testget4 None --testlist [] "'
nl|'\n'
string|'"--testspacelist [] --x 10 "'
nl|'\n'
string|'"--debug --noexec --quack "'
nl|'\n'
string|'"--test1 "'
nl|'\n'
string|'"--testget1 --tmod_baz_x --no? --nohelp --nohelpshort --nohelpxml "'
nl|'\n'
string|'"--noq --notest0 --notestget2 "'
nl|'\n'
string|'"--notestget3 --notestnone"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'####################################'
nl|'\n'
comment|'# Test all kind of error conditions.'
nl|'\n'
nl|'\n'
comment|'# Duplicate flag detection'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"run"'
op|','
number|'0'
op|','
string|'"runhelp"'
op|','
name|'short_name'
op|'='
string|"'q'"
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"duplicate flag detection failed"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Duplicate short flag detection'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"zoom1"'
op|','
number|'0'
op|','
string|'"runhelp z1"'
op|','
name|'short_name'
op|'='
string|"'z'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"zoom2"'
op|','
number|'0'
op|','
string|'"runhelp z2"'
op|','
name|'short_name'
op|'='
string|"'z'"
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"duplicate short flag detection failed"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"The flag \'z\' is defined twice. "'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"First from"'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'", Second from"'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Duplicate mixed flag detection'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"short1"'
op|','
number|'0'
op|','
string|'"runhelp s1"'
op|','
name|'short_name'
op|'='
string|"'s'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"s"'
op|','
number|'0'
op|','
string|'"runhelp s2"'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"duplicate mixed flag detection failed"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"The flag \'s\' is defined twice. "'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"First from"'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'", Second from"'
name|'in'
name|'e'
op|'.'
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure allow_override works'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup1"'
op|','
number|'0'
op|','
string|'"runhelp d11"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'0'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'dup1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flag'
op|'.'
name|'default'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup1"'
op|','
number|'1'
op|','
string|'"runhelp d12"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'dup1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flag'
op|'.'
name|'default'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AssertionError'
op|'('
string|'"allow_override did not permit a flag duplication"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure allow_override works'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup2"'
op|','
number|'0'
op|','
string|'"runhelp d21"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'dup2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flag'
op|'.'
name|'default'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup2"'
op|','
number|'1'
op|','
string|'"runhelp d22"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'0'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'dup2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flag'
op|'.'
name|'default'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AssertionError'
op|'('
string|'"allow_override did not permit a flag duplication"'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure allow_override doesn't work with None default"
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup3"'
op|','
number|'0'
op|','
string|'"runhelp d31"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'0'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'dup3'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flag'
op|'.'
name|'default'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup3"'
op|','
name|'None'
op|','
string|'"runhelp d32"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|"'Cannot override a flag with a default of None'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Make sure that when we override, the help string gets updated correctly'
nl|'\n'
dedent|''
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup3"'
op|','
number|'0'
op|','
string|'"runhelp d31"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup3"'
op|','
number|'1'
op|','
string|'"runhelp d32"'
op|','
name|'short_name'
op|'='
string|"'u'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'str'
op|'('
name|'FLAGS'
op|')'
op|'.'
name|'find'
op|'('
string|"'runhelp d31'"
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'str'
op|'('
name|'FLAGS'
op|')'
op|'.'
name|'find'
op|'('
string|"'runhelp d32'"
op|')'
op|'!='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure AppendFlagValues works'
nl|'\n'
name|'new_flags'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"new1"'
op|','
number|'0'
op|','
string|'"runhelp n1"'
op|','
name|'flag_values'
op|'='
name|'new_flags'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"new2"'
op|','
number|'0'
op|','
string|'"runhelp n2"'
op|','
name|'flag_values'
op|'='
name|'new_flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'new_flags'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'old_len'
op|'='
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'AppendFlagValues'
op|'('
name|'new_flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
op|'-'
name|'old_len'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"new1"'
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"new2"'
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure AppendFlagValues works with flags with shortnames.'
nl|'\n'
name|'new_flags'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"new3"'
op|','
number|'0'
op|','
string|'"runhelp n3"'
op|','
name|'flag_values'
op|'='
name|'new_flags'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"new4"'
op|','
number|'0'
op|','
string|'"runhelp n4"'
op|','
name|'flag_values'
op|'='
name|'new_flags'
op|','
nl|'\n'
name|'short_name'
op|'='
string|'"n4"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'new_flags'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'old_len'
op|'='
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'AppendFlagValues'
op|'('
name|'new_flags'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
op|'-'
name|'old_len'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"new3"'
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"new4"'
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"n4"'
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'n4'"
op|']'
op|','
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
string|"'new4'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure AppendFlagValues fails on duplicates'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup4"'
op|','
number|'0'
op|','
string|'"runhelp d41"'
op|')'
newline|'\n'
name|'new_flags'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|'"dup4"'
op|','
number|'0'
op|','
string|'"runhelp d42"'
op|','
name|'flag_values'
op|'='
name|'new_flags'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'FLAGS'
op|'.'
name|'AppendFlagValues'
op|'('
name|'new_flags'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"ignore_copy was not set but caused no exception"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'DuplicateFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Integer out of bounds'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--repeat=-4'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|"'integer bounds exception not raised:'"
nl|'\n'
op|'+'
name|'str'
op|'('
name|'FLAGS'
op|'.'
name|'repeat'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Non-integer'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--repeat=2.5'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"malformed integer value exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Missing required arugment'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--name'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Flag argument required exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'FlagsError'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Non-boolean arguments for boolean'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug=goofup'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Illegal flag value exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--debug=42'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Illegal flag value exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Non-numeric argument for integer flag --repeat'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--repeat'"
op|','
string|"'Bob'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Illegal flag value exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'################################################'
nl|'\n'
comment|'# Code to test the flagfile=<> loading behavior'
nl|'\n'
comment|'################################################'
nl|'\n'
DECL|member|_SetupTestFiles
dedent|''
dedent|''
name|'def'
name|'_SetupTestFiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Creates and sets up some dummy flagfile files with bogus flags"""'
newline|'\n'
nl|'\n'
comment|'# Figure out where to create temporary files'
nl|'\n'
name|'tmp_path'
op|'='
string|"'/tmp/flags_unittest'"
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tmp_path'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmp_path'
op|')'
newline|'\n'
dedent|''
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'tmp_path'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_flag_file_1'
op|'='
name|'open'
op|'('
op|'('
name|'tmp_path'
op|'+'
string|"'/UnitTestFile1.tst'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'='
name|'open'
op|'('
op|'('
name|'tmp_path'
op|'+'
string|"'/UnitTestFile2.tst'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'tmp_flag_file_3'
op|'='
name|'open'
op|'('
op|'('
name|'tmp_path'
op|'+'
string|"'/UnitTestFile3.tst'"
op|')'
op|','
string|"'w'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e_msg'
op|':'
newline|'\n'
indent|'      '
name|'print'
name|'e_msg'
newline|'\n'
name|'print'
string|"'FAIL\\n File Creation problem in Unit Test'"
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# put some dummy flags in our test files'
nl|'\n'
dedent|''
name|'tmp_flag_file_1'
op|'.'
name|'write'
op|'('
string|"'#A Fake Comment\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_1'
op|'.'
name|'write'
op|'('
string|"'--UnitTestMessage1=tempFile1!\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_1'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_1'
op|'.'
name|'write'
op|'('
string|"'--UnitTestNumber=54321\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_1'
op|'.'
name|'write'
op|'('
string|"'--noUnitTestBoolFlag\\n'"
op|')'
newline|'\n'
name|'file_list'
op|'='
op|'['
name|'tmp_flag_file_1'
op|'.'
name|'name'
op|']'
newline|'\n'
comment|'# this one includes test file 1'
nl|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'write'
op|'('
string|"'//A Different Fake Comment\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'write'
op|'('
string|"'--flagfile=%s\\n'"
op|'%'
name|'tmp_flag_file_1'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'write'
op|'('
string|"'--UnitTestMessage2=setFromTempFile2\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'write'
op|'('
string|"'\\t\\t\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'write'
op|'('
string|"'--UnitTestNumber=6789a\\n'"
op|')'
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'tmp_flag_file_2'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# this file points to itself'
nl|'\n'
name|'tmp_flag_file_3'
op|'.'
name|'write'
op|'('
string|"'--flagfile=%s\\n'"
op|'%'
name|'tmp_flag_file_3'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'tmp_flag_file_3'
op|'.'
name|'write'
op|'('
string|"'--UnitTestMessage1=setFromTempFile3\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_3'
op|'.'
name|'write'
op|'('
string|"'#YAFC\\n'"
op|')'
newline|'\n'
name|'tmp_flag_file_3'
op|'.'
name|'write'
op|'('
string|"'--UnitTestBoolFlag\\n'"
op|')'
newline|'\n'
name|'file_list'
op|'.'
name|'append'
op|'('
name|'tmp_flag_file_3'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'tmp_flag_file_1'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'tmp_flag_file_2'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'tmp_flag_file_3'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'file_list'
comment|'# these are just the file names'
newline|'\n'
comment|'# end SetupFiles def'
nl|'\n'
nl|'\n'
DECL|member|_RemoveTestFiles
dedent|''
name|'def'
name|'_RemoveTestFiles'
op|'('
name|'self'
op|','
name|'tmp_file_list'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Closes the files we just created.  tempfile deletes them for us """'
newline|'\n'
name|'for'
name|'file_name'
name|'in'
name|'tmp_file_list'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'remove'
op|'('
name|'file_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e_msg'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'%s\\n, Problem deleting test file'"
op|'%'
name|'e_msg'
newline|'\n'
comment|'#end RemoveTestFiles def'
nl|'\n'
nl|'\n'
DECL|member|__DeclareSomeFlags
dedent|''
dedent|''
dedent|''
name|'def'
name|'__DeclareSomeFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'UnitTestMessage1'"
op|','
string|"'Foo!'"
op|','
string|"'You Add Here.'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'UnitTestMessage2'"
op|','
string|"'Bar!'"
op|','
string|"'Hello, Sailor!'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'UnitTestBoolFlag'"
op|','
number|'0'
op|','
string|"'Some Boolean thing'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'UnitTestNumber'"
op|','
number|'12345'
op|','
string|"'Some integer'"
op|','
nl|'\n'
name|'lower_bound'
op|'='
number|'0'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'UnitTestList'"
op|','
string|'"1,2,3"'
op|','
string|"'Some list'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_UndeclareSomeFlags
dedent|''
name|'def'
name|'_UndeclareSomeFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'UnitTestMessage1'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'UnitTestMessage2'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'UnitTestBoolFlag'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'UnitTestNumber'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'UnitTestList'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ReadFlagsFromFiles
dedent|''
name|'def'
name|'_ReadFlagsFromFiles'
op|'('
name|'self'
op|','
name|'argv'
op|','
name|'force_gnu'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'argv'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'FLAGS'
op|'.'
name|'ReadFlagsFromFiles'
op|'('
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'force_gnu'
op|'='
name|'force_gnu'
op|')'
newline|'\n'
nl|'\n'
comment|'#### Flagfile Unit Tests ####'
nl|'\n'
DECL|member|testMethod_flagfiles_1
dedent|''
name|'def'
name|'testMethod_flagfiles_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Test trivial case with no flagfile based options. """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'fake_cmd_line'
op|'='
string|"'fooScript --UnitTestBoolFlag'"
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'fake_argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestBoolFlag'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_argv'
op|','
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
comment|'# end testMethodOne'
nl|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_2
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests parsing one file + arguments off simulated argv"""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
string|"'fooScript --q --flagfile=%s'"
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
nl|'\n'
comment|"# We should see the original cmd line with the file's contents spliced in."
nl|'\n'
comment|'# Note that these will be in REVERSE order from order encountered in file'
nl|'\n'
comment|'# This is done so arguements we encounter sooner will have priority.'
nl|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--UnitTestMessage1=tempFile1!'"
op|','
nl|'\n'
string|"'--UnitTestNumber=54321'"
op|','
nl|'\n'
string|"'--noUnitTestBoolFlag'"
op|','
nl|'\n'
string|"'--q'"
op|']'
newline|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
comment|'# end testTwo def'
nl|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_3
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests parsing nested files + arguments of simulated argv"""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
op|'('
string|"'fooScript --UnitTestNumber=77 --flagfile=%s'"
nl|'\n'
op|'%'
name|'tmp_files'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
nl|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--UnitTestMessage1=tempFile1!'"
op|','
nl|'\n'
string|"'--UnitTestNumber=54321'"
op|','
nl|'\n'
string|"'--noUnitTestBoolFlag'"
op|','
nl|'\n'
string|"'--UnitTestMessage2=setFromTempFile2'"
op|','
nl|'\n'
string|"'--UnitTestNumber=6789a'"
op|','
nl|'\n'
string|"'--UnitTestNumber=77'"
op|']'
newline|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
comment|'# end testThree def'
nl|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_4
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests parsing self-referential files + arguments of simulated argv.\n      This test should print a warning to stderr of some sort.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
op|'('
string|"'fooScript --flagfile=%s --noUnitTestBoolFlag'"
nl|'\n'
op|'%'
name|'tmp_files'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--UnitTestMessage1=setFromTempFile3'"
op|','
nl|'\n'
string|"'--UnitTestBoolFlag'"
op|','
nl|'\n'
string|"'--noUnitTestBoolFlag'"
op|']'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_5
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_5'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that --flagfile parsing respects the \'--\' end-of-options marker."""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
string|"'fooScript --SomeFlag -- --flagfile=%s'"
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--SomeFlag'"
op|','
nl|'\n'
string|"'--'"
op|','
nl|'\n'
string|"'--flagfile=%s'"
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_6
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that --flagfile parsing stops at non-options (non-GNU behavior)."""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
op|'('
string|"'fooScript --SomeFlag some_arg --flagfile=%s'"
nl|'\n'
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--SomeFlag'"
op|','
nl|'\n'
string|"'some_arg'"
op|','
nl|'\n'
string|"'--flagfile=%s'"
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_7
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_7'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that --flagfile parsing skips over a non-option (GNU behavior)."""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'FLAGS'
op|'.'
name|'UseGnuGetOpt'
op|'('
op|')'
newline|'\n'
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
op|'('
string|"'fooScript --SomeFlag some_arg --flagfile=%s'"
nl|'\n'
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--UnitTestMessage1=tempFile1!'"
op|','
nl|'\n'
string|"'--UnitTestNumber=54321'"
op|','
nl|'\n'
string|"'--noUnitTestBoolFlag'"
op|','
nl|'\n'
string|"'--SomeFlag'"
op|','
nl|'\n'
string|"'some_arg'"
op|']'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethod_flagfiles_8
dedent|''
dedent|''
name|'def'
name|'testMethod_flagfiles_8'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that --flagfile parsing respects force_gnu=True."""'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'tmp_files'
op|'='
name|'self'
op|'.'
name|'_SetupTestFiles'
op|'('
op|')'
newline|'\n'
comment|'# specify our temp file on the fake cmd line'
nl|'\n'
name|'fake_cmd_line'
op|'='
op|'('
string|"'fooScript --SomeFlag some_arg --flagfile=%s'"
nl|'\n'
op|'%'
name|'tmp_files'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'fake_argv'
op|'='
name|'fake_cmd_line'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'expected_results'
op|'='
op|'['
string|"'fooScript'"
op|','
nl|'\n'
string|"'--UnitTestMessage1=tempFile1!'"
op|','
nl|'\n'
string|"'--UnitTestNumber=54321'"
op|','
nl|'\n'
string|"'--noUnitTestBoolFlag'"
op|','
nl|'\n'
string|"'--SomeFlag'"
op|','
nl|'\n'
string|"'some_arg'"
op|']'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'self'
op|'.'
name|'_ReadFlagsFromFiles'
op|'('
name|'fake_argv'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'_RemoveTestFiles'
op|'('
name|'tmp_files'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flagfiles_user_path_expansion
dedent|''
dedent|''
name|'def'
name|'test_flagfiles_user_path_expansion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that user directory referenced paths (ie. ~/foo) are correctly\n      expanded.  This test depends on whatever account\'s running the unit test\n      to have read/write access to their own home directory, otherwise it\'ll\n      FAIL.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'fake_flagfile_item_style_1'
op|'='
string|"'--flagfile=~/foo.file'"
newline|'\n'
name|'fake_flagfile_item_style_2'
op|'='
string|"'-flagfile=~/foo.file'"
newline|'\n'
nl|'\n'
name|'expected_results'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
string|"'~/foo.file'"
op|')'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'FLAGS'
op|'.'
name|'ExtractFilename'
op|'('
name|'fake_flagfile_item_style_1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
nl|'\n'
name|'test_results'
op|'='
name|'FLAGS'
op|'.'
name|'ExtractFilename'
op|'('
name|'fake_flagfile_item_style_2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'test_results'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# end testFour def'
nl|'\n'
nl|'\n'
DECL|member|test_no_touchy_non_flags
dedent|''
name|'def'
name|'test_no_touchy_non_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that the flags parser does not mutilate arguments which are\n    not supposed to be flags\n    """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'fake_argv'
op|'='
op|'['
string|"'fooScript'"
op|','
string|"'--UnitTestBoolFlag'"
op|','
nl|'\n'
string|"'command'"
op|','
string|"'--command_arg1'"
op|','
string|"'--UnitTestBoom'"
op|','
string|"'--UnitTestB'"
op|']'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'fake_argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|','
name|'fake_argv'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'fake_argv'
op|'['
number|'2'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_parse_flags_after_args_if_using_gnu_getopt
dedent|''
name|'def'
name|'test_parse_flags_after_args_if_using_gnu_getopt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test that flags given after arguments are parsed if using gnu_getopt.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'UseGnuGetOpt'
op|'('
op|')'
newline|'\n'
name|'fake_argv'
op|'='
op|'['
string|"'fooScript'"
op|','
string|"'--UnitTestBoolFlag'"
op|','
nl|'\n'
string|"'command'"
op|','
string|"'--UnitTestB'"
op|']'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'fake_argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|','
op|'['
string|"'fooScript'"
op|','
string|"'command'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_SetDefault
dedent|''
name|'def'
name|'test_SetDefault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test changing flag defaults.\n    """'
newline|'\n'
name|'self'
op|'.'
name|'__DeclareSomeFlags'
op|'('
op|')'
newline|'\n'
comment|'# Test that SetDefault changes both the default and the value,'
nl|'\n'
comment|'# and that the value is changed when one is given as an option.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestMessage1'"
op|']'
op|'.'
name|'SetDefault'
op|'('
string|"'New value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestMessage1'
op|','
string|"'New value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestMessage1'"
op|']'
op|'.'
name|'default_as_str'
op|','
string|'"\'New value\'"'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestMessage1=Newer value'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestMessage1'
op|','
string|"'Newer value'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting the default to None works correctly.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'SetDefault'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestNumber'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'default_as_str'
op|','
name|'None'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestNumber=56'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestNumber'
op|','
number|'56'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting the default to zero works correctly.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'SetDefault'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestNumber'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'default_as_str'
op|','
string|'"\'0\'"'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestNumber=56'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestNumber'
op|','
number|'56'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting the default to "" works correctly.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestMessage1'"
op|']'
op|'.'
name|'SetDefault'
op|'('
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestMessage1'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestMessage1'"
op|']'
op|'.'
name|'default_as_str'
op|','
string|'"\'\'"'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestMessage1=fifty-six'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestMessage1'
op|','
string|'"fifty-six"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting the default to false works correctly.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestBoolFlag'"
op|']'
op|'.'
name|'SetDefault'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestBoolFlag'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestBoolFlag'"
op|']'
op|'.'
name|'default_as_str'
op|','
string|'"\'false\'"'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestBoolFlag=true'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestBoolFlag'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting a list default works correctly.'
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestList'"
op|']'
op|'.'
name|'SetDefault'
op|'('
string|"'4,5,6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestList'
op|','
op|'['
string|"'4'"
op|','
string|"'5'"
op|','
string|"'6'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'['
string|"'UnitTestList'"
op|']'
op|'.'
name|'default_as_str'
op|','
string|'"\'4,5,6\'"'
op|')'
newline|'\n'
name|'FLAGS'
op|'('
op|'['
string|"'dummyscript'"
op|','
string|"'--UnitTestList=7,8,9'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'UnitTestList'
op|','
op|'['
string|"'7'"
op|','
string|"'8'"
op|','
string|"'9'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test that setting invalid defaults raises exceptions'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'SetDefault'
op|','
string|"'oops'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestNumber'"
op|']'
op|'.'
name|'SetDefault'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|','
nl|'\n'
name|'FLAGS'
op|'['
string|"'UnitTestBoolFlag'"
op|']'
op|'.'
name|'SetDefault'
op|','
string|"'oops'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_UndeclareSomeFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMethod_ShortestUniquePrefixes
dedent|''
name|'def'
name|'testMethod_ShortestUniquePrefixes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Test FlagValues.ShortestUniquePrefixes\n    """'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'a'"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'abc'"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'common_a_string'"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'common_b_boolean'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'common_c_boolean'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'common'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'commonly'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'zz'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'nozz'"
op|','
number|'0'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'shorter_flags'
op|'='
name|'FLAGS'
op|'.'
name|'ShortestUniquePrefixes'
op|'('
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected_results'
op|'='
op|'{'
string|"'nocommon_b_boolean'"
op|':'
string|"'nocommon_b'"
op|','
nl|'\n'
string|"'common_c_boolean'"
op|':'
string|"'common_c'"
op|','
nl|'\n'
string|"'common_b_boolean'"
op|':'
string|"'common_b'"
op|','
nl|'\n'
string|"'a'"
op|':'
string|"'a'"
op|','
nl|'\n'
string|"'abc'"
op|':'
string|"'ab'"
op|','
nl|'\n'
string|"'zz'"
op|':'
string|"'z'"
op|','
nl|'\n'
string|"'nozz'"
op|':'
string|"'nozz'"
op|','
nl|'\n'
string|"'common_a_string'"
op|':'
string|"'common_a'"
op|','
nl|'\n'
string|"'commonly'"
op|':'
string|"'commonl'"
op|','
nl|'\n'
string|"'nocommon_c_boolean'"
op|':'
string|"'nocommon_c'"
op|','
nl|'\n'
string|"'nocommon'"
op|':'
string|"'nocommon'"
op|','
nl|'\n'
string|"'common'"
op|':'
string|"'common'"
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
op|','
name|'shorter'
name|'in'
name|'expected_results'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'shorter_flags'
op|'['
name|'name'
op|']'
op|','
name|'shorter'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'a'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'abc'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'common_a_string'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'common_b_boolean'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'common_c_boolean'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'common'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'commonly'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'zz'"
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'nozz'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_twodasharg_first
dedent|''
name|'def'
name|'test_twodasharg_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"twodash_name"'
op|','
string|'"Bob"'
op|','
string|'"namehelp"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"twodash_blame"'
op|','
string|'"Rob"'
op|','
string|'"blamehelp"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'--'"
op|','
nl|'\n'
string|"'--twodash_name=Harry'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Bob'"
op|','
name|'FLAGS'
op|'.'
name|'twodash_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|'['
number|'1'
op|']'
op|','
string|"'--twodash_name=Harry'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_twodasharg_middle
dedent|''
name|'def'
name|'test_twodasharg_middle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"twodash2_name"'
op|','
string|'"Bob"'
op|','
string|'"namehelp"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"twodash2_blame"'
op|','
string|'"Rob"'
op|','
string|'"blamehelp"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'--twodash2_blame=Larry'"
op|','
nl|'\n'
string|"'--'"
op|','
nl|'\n'
string|"'--twodash2_name=Harry'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Bob'"
op|','
name|'FLAGS'
op|'.'
name|'twodash2_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Larry'"
op|','
name|'FLAGS'
op|'.'
name|'twodash2_blame'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|'['
number|'1'
op|']'
op|','
string|"'--twodash2_name=Harry'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_onedasharg_first
dedent|''
name|'def'
name|'test_onedasharg_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"onedash_name"'
op|','
string|'"Bob"'
op|','
string|'"namehelp"'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"onedash_blame"'
op|','
string|'"Rob"'
op|','
string|'"blamehelp"'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'-'"
op|','
nl|'\n'
string|"'--onedash_name=Harry'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|'['
number|'1'
op|']'
op|','
string|"'-'"
op|')'
newline|'\n'
comment|'# TODO(csilvers): we should still parse --onedash_name=Harry as a'
nl|'\n'
comment|"# flag, but currently we don't (we stop flag processing as soon as"
nl|'\n'
comment|'# we see the first non-flag).'
nl|'\n'
comment|'# - This requires gnu_getopt from Python 2.3+ see FLAGS.UseGnuGetOpt()'
nl|'\n'
nl|'\n'
DECL|member|test_unrecognized_flags
dedent|''
name|'def'
name|'test_unrecognized_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Unknown flag --nosuchflag'
nl|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'--name=Bob'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflag'"
newline|'\n'
nl|'\n'
comment|'# Unknown flag -w (short option)'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'-w'"
op|','
string|"'--name=Bob'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'w'"
newline|'\n'
nl|'\n'
comment|'# Unknown flag --nosuchflagwithparam=foo'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflagwithparam=foo'"
op|','
string|"'--name=Bob'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflagwithparam'"
newline|'\n'
nl|'\n'
comment|'# Allow unknown flag --nosuchflag if specified with undefok'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=nosuchflag'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
comment|'# Allow unknown flag --noboolflag if undefok=boolflag is specified'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--noboolflag'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=boolflag'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
comment|'# But not if the flagname is misspelled:'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=nosuchfla'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflag'"
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=nosuchflagg'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflag'"
newline|'\n'
nl|'\n'
comment|'# Allow unknown short flag -w if specified with undefok'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'-w'"
op|','
string|"'--name=Bob'"
op|','
string|"'--undefok=w'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
comment|'# Allow unknown flag --nosuchflagwithparam=foo if specified'
nl|'\n'
comment|'# with undefok'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflagwithparam=foo'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=nosuchflagwithparam'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
comment|'# Even if undefok specifies multiple flags'
nl|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'-w'"
op|','
string|"'--nosuchflagwithparam=foo'"
op|','
nl|'\n'
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=nosuchflag,w,nosuchflagwithparam'"
op|','
nl|'\n'
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
comment|"# However, not if undefok doesn't specify the flag"
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok=another_such'"
op|','
string|"'extra'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflag'"
newline|'\n'
nl|'\n'
comment|"# Make sure --undefok doesn't mask other option errors."
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# Provide an option requiring a parameter but not giving it one.'
nl|'\n'
indent|'      '
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--undefok=name'"
op|','
string|"'--name'"
op|')'
newline|'\n'
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Missing option parameter exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AssertionError'
op|'('
string|'"Wrong kind of error exception raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'FlagsError'
op|':'
newline|'\n'
indent|'      '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Test --undefok <list>'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
string|"'--nosuchflag'"
op|','
string|"'-w'"
op|','
string|"'--nosuchflagwithparam=foo'"
op|','
nl|'\n'
string|"'--name=Bob'"
op|','
nl|'\n'
string|"'--undefok'"
op|','
nl|'\n'
string|"'nosuchflag,w,nosuchflagwithparam'"
op|','
nl|'\n'
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
nl|'\n'
DECL|member|test_nonglobal_flags
dedent|''
name|'def'
name|'test_nonglobal_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test use of non-global FlagValues"""'
newline|'\n'
name|'nonglobal_flags'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|'"nonglobal_flag"'
op|','
string|'"Bob"'
op|','
string|'"flaghelp"'
op|','
name|'nonglobal_flags'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'--nonglobal_flag=Mary'"
op|','
nl|'\n'
string|"'extra'"
op|')'
newline|'\n'
name|'argv'
op|'='
name|'nonglobal_flags'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'2'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'1'
op|']'
op|'=='
string|"'extra'"
op|','
string|'"extra argument not preserved"'
newline|'\n'
name|'assert'
name|'nonglobal_flags'
op|'['
string|"'nonglobal_flag'"
op|']'
op|'.'
name|'value'
op|'=='
string|"'Mary'"
newline|'\n'
nl|'\n'
DECL|member|test_unrecognized_nonglobal_flags
dedent|''
name|'def'
name|'test_unrecognized_nonglobal_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test unrecognized non-global flags"""'
newline|'\n'
name|'nonglobal_flags'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'--nosuchflag'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'argv'
op|'='
name|'nonglobal_flags'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'raise'
name|'AssertionError'
op|'('
string|'"Unknown flag exception not raised"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|','
name|'e'
op|':'
newline|'\n'
indent|'      '
name|'assert'
name|'e'
op|'.'
name|'flagname'
op|'=='
string|"'nosuchflag'"
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'argv'
op|'='
op|'('
string|"'./program'"
op|','
nl|'\n'
string|"'--nosuchflag'"
op|','
nl|'\n'
string|"'--undefok=nosuchflag'"
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
name|'nonglobal_flags'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'assert'
name|'len'
op|'('
name|'argv'
op|')'
op|'=='
number|'1'
op|','
string|'"wrong number of arguments pulled"'
newline|'\n'
name|'assert'
name|'argv'
op|'['
number|'0'
op|']'
op|'=='
string|"'./program'"
op|','
string|'"program name not preserved"'
newline|'\n'
nl|'\n'
DECL|member|test_module_help
dedent|''
name|'def'
name|'test_module_help'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test ModuleHelp()."""'
newline|'\n'
name|'helpstr'
op|'='
name|'FLAGS'
op|'.'
name|'ModuleHelp'
op|'('
name|'module_baz'
op|')'
newline|'\n'
nl|'\n'
name|'expected_help'
op|'='
string|'"\\n"'
op|'+'
name|'module_baz'
op|'.'
name|'__name__'
op|'+'
string|'":"'
op|'+'
string|'"""\n  --[no]tmod_baz_x: Boolean flag.\n    (default: \'true\')"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'helpstr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_main_module_help
dedent|''
name|'def'
name|'test_main_module_help'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test MainModuleHelp()."""'
newline|'\n'
name|'helpstr'
op|'='
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# When this test is invoked on behalf of flags_unittest_2_2,'
nl|'\n'
comment|"# the main module has not defined any flags. Since there's"
nl|'\n'
comment|'# no easy way to run this script in our test environment'
nl|'\n'
comment|"# directly from python2.2, don't bother to test the output"
nl|'\n'
comment|'# of MainModuleHelp() in that scenario.'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version'
op|'.'
name|'startswith'
op|'('
string|"'2.2.'"
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_help'
op|'='
string|'"\\n"'
op|'+'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|'+'
string|"':'"
op|'+'
string|'"""\n  --[no]debug: debughelp\n    (default: \'false\')\n  -u,--[no]dup1: runhelp d12\n    (default: \'true\')\n  -u,--[no]dup2: runhelp d22\n    (default: \'true\')\n  -u,--[no]dup3: runhelp d32\n    (default: \'true\')\n  --[no]dup4: runhelp d41\n    (default: \'false\')\n  -?,--[no]help: show this help\n  --[no]helpshort: show usage only for this module\n  --[no]helpxml: like --help, but generates XML output\n  --kwery: <who|what|why|where|when>: ?\n  --l: how long to be\n    (default: \'9223372032559808512\')\n    (an integer)\n  --letters: a list of letters\n    (default: \'a,b,c\')\n    (a comma separated list)\n  -m,--m_str: string option that can occur multiple times;\n    repeat this option to specify a list of values\n    (default: "[\'def1\', \'def2\']")\n  --name: namehelp\n    (default: \'Bob\')\n  --[no]noexec: boolean flag with no as prefix\n    (default: \'true\')\n  --numbers: a list of numbers\n    (default: \'1,2,3\')\n    (a comma separated list)\n  --[no]q: quiet mode\n    (default: \'true\')\n  --[no]quack: superstring of \'q\'\n    (default: \'false\')\n  -r,--repeat: how many times to repeat (0-5)\n    (default: \'4\')\n    (a non-negative integer)\n  -s,--s_str: string option that can occur multiple times;\n    repeat this option to specify a list of values\n    (default: "[\'sing1\']")\n  --[no]test0: test boolean parsing\n  --[no]test1: test boolean parsing\n  --[no]testget1: test parsing with defaults\n  --[no]testget2: test parsing with defaults\n  --[no]testget3: test parsing with defaults\n  --testget4: test parsing with defaults\n    (an integer)\n  --testlist: test lists parsing\n    (default: \'\')\n    (a comma separated list)\n  --[no]testnone: test boolean parsing\n  --testspacelist: tests space lists parsing\n    (default: \'\')\n    (a whitespace separated list)\n  --x: how eXtreme to be\n    (default: \'3\')\n    (an integer)\n  -z,--[no]zoom1: runhelp z1\n    (default: \'false\')"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'MultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'helpstr'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_flag_errors
dedent|''
dedent|''
name|'def'
name|'test_create_flag_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Since the exception classes are exposed, nothing stops users'
nl|'\n'
comment|'# from creating their own instances. This test makes sure that'
nl|'\n'
comment|'# people modifying the flags module understand that the external'
nl|'\n'
comment|'# mechanisms for creating the exceptions should continue to work.'
nl|'\n'
indent|'    '
name|'e'
op|'='
name|'flags'
op|'.'
name|'FlagsError'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'FlagsError'
op|'('
string|'"message"'
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'DuplicateFlag'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'DuplicateFlag'
op|'('
string|'"message"'
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'IllegalFlagValue'
op|'('
string|'"message"'
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|'('
op|')'
newline|'\n'
name|'e'
op|'='
name|'flags'
op|'.'
name|'UnrecognizedFlag'
op|'('
string|'"message"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagValuesDelAttr
dedent|''
name|'def'
name|'testFlagValuesDelAttr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks that del FLAGS.flag_id works."""'
newline|'\n'
name|'default_value'
op|'='
string|"'default value for testFlagValuesDelAttr'"
newline|'\n'
comment|'# 1. Declare and delete a flag with no short name.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'delattr_foo'"
op|','
name|'default_value'
op|','
string|"'A simple flag.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'FLAGS'
op|'.'
name|'delattr_foo'
op|','
name|'default_value'
op|')'
newline|'\n'
name|'flag_obj'
op|'='
name|'FLAGS'
op|'['
string|"'delattr_foo'"
op|']'
newline|'\n'
comment|'# We also check that _FlagIsRegistered works as expected :)'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'delattr_foo'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'delattr_foo'"
name|'in'
name|'FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
comment|'# If the previous del FLAGS.delattr_foo did not work properly, the'
nl|'\n'
comment|'# next definition will trigger a redefinition error.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'delattr_foo'"
op|','
number|'3'
op|','
string|"'A simple flag.'"
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'delattr_foo'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'delattr_foo'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2. Declare and delete a flag with a short name.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'delattr_bar'"
op|','
name|'default_value'
op|','
string|"'flag with short name'"
op|','
nl|'\n'
name|'short_name'
op|'='
string|"'x5'"
op|')'
newline|'\n'
name|'flag_obj'
op|'='
name|'FLAGS'
op|'['
string|"'delattr_bar'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'x5'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'delattr_bar'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# 3. Just like 2, but del FLAGS.name last'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'delattr_bar'"
op|','
name|'default_value'
op|','
string|"'flag with short name'"
op|','
nl|'\n'
name|'short_name'
op|'='
string|"'x5'"
op|')'
newline|'\n'
name|'flag_obj'
op|'='
name|'FLAGS'
op|'['
string|"'delattr_bar'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'delattr_bar'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
name|'del'
name|'FLAGS'
op|'.'
name|'x5'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'FLAGS'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'delattr_bar'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'x5'"
name|'in'
name|'FLAGS'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_GetNamesOfDefinedFlags
dedent|''
name|'def'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the list of names of flags defined by a module.\n\n    Auxiliary for the testKeyFlags* methods.\n\n    Args:\n      module: A module object or a string module name.\n      flag_values: A FlagValues object.\n\n    Returns:\n      A list of strings.\n    """'
newline|'\n'
name|'return'
op|'['
name|'f'
op|'.'
name|'name'
name|'for'
name|'f'
name|'in'
name|'flag_values'
op|'.'
name|'_GetFlagsDefinedByModule'
op|'('
name|'module'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_GetNamesOfKeyFlags
dedent|''
name|'def'
name|'_GetNamesOfKeyFlags'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the list of names of key flags for a module.\n\n    Auxiliary for the testKeyFlags* methods.\n\n    Args:\n      module: A module object or a string module name.\n      flag_values: A FlagValues object.\n\n    Returns:\n      A list of strings.\n    """'
newline|'\n'
name|'return'
op|'['
name|'f'
op|'.'
name|'name'
name|'for'
name|'f'
name|'in'
name|'flag_values'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'module'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|testKeyFlags
dedent|''
name|'def'
name|'testKeyFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Before starting any testing, make sure no flags are already'
nl|'\n'
comment|'# defined for module_foo and module_bar.'
nl|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'module_foo'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'module_bar'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module_foo'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module_bar'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Defines a few flags in module_foo and module_bar.'
nl|'\n'
indent|'      '
name|'module_foo'
op|'.'
name|'DefineFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Part 1. Check that all flags defined by module_foo are key for'
nl|'\n'
comment|'# that module, and similarly for module_bar.'
nl|'\n'
name|'for'
name|'module'
name|'in'
op|'['
name|'module_foo'
op|','
name|'module_bar'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'FLAGS'
op|'.'
name|'_GetFlagsDefinedByModule'
op|'('
name|'module'
op|')'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'module'
op|')'
op|')'
newline|'\n'
comment|'# Also check that each module defined the expected flags.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module'
op|')'
op|','
nl|'\n'
name|'module'
op|'.'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Part 2. Check that flags.DECLARE_key_flag works fine.'
nl|'\n'
comment|'# Declare that some flags from module_bar are key for'
nl|'\n'
comment|'# module_foo.'
nl|'\n'
dedent|''
name|'module_foo'
op|'.'
name|'DeclareKeyFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that module_foo has the expected list of defined flags.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module_foo'
op|')'
op|','
nl|'\n'
name|'module_foo'
op|'.'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that module_foo has the expected list of key flags.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'module_foo'
op|')'
op|','
nl|'\n'
name|'module_foo'
op|'.'
name|'NamesOfDeclaredKeyFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Part 3. Check that flags.ADOPT_module_key_flags works fine.'
nl|'\n'
comment|'# Trigger a call to flags.ADOPT_module_key_flags(module_bar)'
nl|'\n'
comment|'# inside module_foo.  This should declare a few more key'
nl|'\n'
comment|'# flags in module_foo.'
nl|'\n'
name|'module_foo'
op|'.'
name|'DeclareExtraKeyFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that module_foo has the expected list of key flags.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'module_foo'
op|')'
op|','
nl|'\n'
name|'module_foo'
op|'.'
name|'NamesOfDeclaredKeyFlags'
op|'('
op|')'
op|'+'
nl|'\n'
name|'module_foo'
op|'.'
name|'NamesOfDeclaredExtraKeyFlags'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'      '
name|'module_foo'
op|'.'
name|'RemoveFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testKeyFlagsWithNonDefaultFlagValuesObject
dedent|''
dedent|''
name|'def'
name|'testKeyFlagsWithNonDefaultFlagValuesObject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Check that key flags work even when we use a FlagValues object'
nl|'\n'
comment|'# that is not the default flags.FLAGS object.  Otherwise, this'
nl|'\n'
comment|'# test is similar to testKeyFlags, but it uses only module_bar.'
nl|'\n'
comment|'# The other test module (module_foo) uses only the default values'
nl|'\n'
comment|'# for the flag_values keyword arguments.  This way, testKeyFlags'
nl|'\n'
comment|'# and this method test both the default FlagValues, the explicitly'
nl|'\n'
comment|'# specified one, and a mixed usage of the two.'
nl|'\n'
nl|'\n'
comment|'# A brand-new FlagValues object, to use instead of flags.FLAGS.'
nl|'\n'
indent|'    '
name|'fv'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Before starting any testing, make sure no flags are already'
nl|'\n'
comment|'# defined for module_foo and module_bar.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'module_bar'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module_bar'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'module_bar'
op|'.'
name|'DefineFlags'
op|'('
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that all flags defined by module_bar are key for that'
nl|'\n'
comment|'# module, and that module_bar defined the expected flags.'
nl|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'fv'
op|'.'
name|'_GetFlagsDefinedByModule'
op|'('
name|'module_bar'
op|')'
op|','
nl|'\n'
name|'fv'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'module_bar'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_GetNamesOfDefinedFlags'
op|'('
name|'module_bar'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
op|','
nl|'\n'
name|'module_bar'
op|'.'
name|'NamesOfDefinedFlags'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Pick two flags from module_bar, declare them as key for the'
nl|'\n'
comment|'# current (i.e., main) module (via flags.DECLARE_key_flag), and'
nl|'\n'
comment|'# check that we get the expected effect.  The important thing is'
nl|'\n'
comment|'# that we always use flags_values=fv (instead of the default'
nl|'\n'
comment|'# FLAGS).'
nl|'\n'
name|'main_module'
op|'='
name|'flags'
op|'.'
name|'_GetMainModule'
op|'('
op|')'
newline|'\n'
name|'names_of_flags_defined_by_bar'
op|'='
name|'module_bar'
op|'.'
name|'NamesOfDefinedFlags'
op|'('
op|')'
newline|'\n'
name|'flag_name_0'
op|'='
name|'names_of_flags_defined_by_bar'
op|'['
number|'0'
op|']'
newline|'\n'
name|'flag_name_2'
op|'='
name|'names_of_flags_defined_by_bar'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
name|'flag_name_0'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'main_module'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
op|','
nl|'\n'
op|'['
name|'flag_name_0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
name|'flag_name_2'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'main_module'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
op|','
nl|'\n'
op|'['
name|'flag_name_0'
op|','
name|'flag_name_2'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'ADOPT_module_key_flags'
op|'('
name|'module_bar'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'key_flags'
op|'='
name|'self'
op|'.'
name|'_GetNamesOfKeyFlags'
op|'('
name|'main_module'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
comment|'# Order is irrelevant; hence, we sort both lists before comparison.'
nl|'\n'
name|'key_flags'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'names_of_flags_defined_by_bar'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertListEqual'
op|'('
name|'key_flags'
op|','
name|'names_of_flags_defined_by_bar'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMainModuleHelpWithKeyFlags
dedent|''
name|'def'
name|'testMainModuleHelpWithKeyFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Similar to test_main_module_help, but this time we make sure to'
nl|'\n'
comment|'# declare some key flags.'
nl|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'help_flag_help'
op|'='
op|'('
nl|'\n'
string|'"  -?,--[no]help: show this help\\n"'
nl|'\n'
string|'"  --[no]helpshort: show usage only for this module\\n"'
nl|'\n'
string|'"  --[no]helpxml: like --help, but generates XML output"'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'expected_help'
op|'='
string|'"\\n%s:\\n%s"'
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
name|'help_flag_help'
op|')'
newline|'\n'
nl|'\n'
comment|'# Safety check that the main module does not declare any flags'
nl|'\n'
comment|'# at the beginning of this test.'
nl|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define one flag in this main module and some flags in modules'
nl|'\n'
comment|'# a and b.  Also declare one flag from module a and one flag'
nl|'\n'
comment|'# from module b as key flags for the main module.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'main_module_int_fg'"
op|','
number|'1'
op|','
nl|'\n'
string|"'Integer flag in the main module.'"
op|')'
newline|'\n'
nl|'\n'
name|'main_module_int_fg_help'
op|'='
op|'('
nl|'\n'
string|'"  --main_module_int_fg: Integer flag in the main module.\\n"'
nl|'\n'
string|'"    (default: \'1\')\\n"'
nl|'\n'
string|'"    (an integer)"'
op|')'
newline|'\n'
nl|'\n'
name|'expected_help'
op|'+='
string|'"\\n"'
op|'+'
name|'main_module_int_fg_help'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The following call should be a no-op: any flag declared by a'
nl|'\n'
comment|'# module is automatically key for that module.'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
string|"'main_module_int_fg'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The definition of a few flags in an imported module should not'
nl|'\n'
comment|'# change the main module help.'
nl|'\n'
name|'module_foo'
op|'.'
name|'DefineFlags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
string|"'tmod_foo_bool'"
op|')'
newline|'\n'
name|'tmod_foo_bool_help'
op|'='
op|'('
nl|'\n'
string|'"  --[no]tmod_foo_bool: Boolean flag from module foo.\\n"'
nl|'\n'
string|'"    (default: \'true\')"'
op|')'
newline|'\n'
name|'expected_help'
op|'+='
string|'"\\n"'
op|'+'
name|'tmod_foo_bool_help'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
string|"'tmod_bar_z'"
op|')'
newline|'\n'
name|'tmod_bar_z_help'
op|'='
op|'('
nl|'\n'
string|'"  --[no]tmod_bar_z: Another boolean flag from module bar.\\n"'
nl|'\n'
string|'"    (default: \'false\')"'
op|')'
newline|'\n'
comment|'# Unfortunately, there is some flag sorting inside'
nl|'\n'
comment|"# MainModuleHelp, so we can't keep incrementally extending"
nl|'\n'
comment|'# the expected_help string ...'
nl|'\n'
name|'expected_help'
op|'='
op|'('
string|'"\\n%s:\\n%s\\n%s\\n%s\\n%s"'
op|'%'
nl|'\n'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'help_flag_help'
op|','
nl|'\n'
name|'main_module_int_fg_help'
op|','
nl|'\n'
name|'tmod_bar_z_help'
op|','
nl|'\n'
name|'tmod_foo_bool_help'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
op|','
name|'expected_help'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# At the end, delete all the flag information we created.'
nl|'\n'
indent|'      '
name|'FLAGS'
op|'.'
name|'__delattr__'
op|'('
string|"'main_module_int_fg'"
op|')'
newline|'\n'
name|'module_foo'
op|'.'
name|'RemoveFlags'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ADOPT_module_key_flags
dedent|''
dedent|''
name|'def'
name|'test_ADOPT_module_key_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Check that ADOPT_module_key_flags raises an exception when'
nl|'\n'
comment|'# called with a module name (as opposed to a module object).'
nl|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'flags'
op|'.'
name|'FlagsError'
op|','
nl|'\n'
name|'flags'
op|'.'
name|'ADOPT_module_key_flags'
op|','
nl|'\n'
string|"'google3.pyglib.app'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_GetCallingModule
dedent|''
name|'def'
name|'test_GetCallingModule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flags'
op|'.'
name|'_GetCallingModule'
op|'('
op|')'
op|','
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'module_foo'
op|'.'
name|'GetModuleName'
op|'('
op|')'
op|','
nl|'\n'
string|"'test_module_foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'module_bar'
op|'.'
name|'GetModuleName'
op|'('
op|')'
op|','
nl|'\n'
string|"'test_module_bar'"
op|')'
newline|'\n'
nl|'\n'
comment|'# We execute the following exec statements for their side-effect'
nl|'\n'
comment|'# (i.e., not raising an error).  They emphasize the case that not'
nl|'\n'
comment|'# all code resides in one of the imported modules: Python is a'
nl|'\n'
comment|'# really dynamic language, where we can dynamically construct some'
nl|'\n'
comment|'# code and execute it.'
nl|'\n'
name|'code'
op|'='
op|'('
string|'"import gflags\\n"'
nl|'\n'
string|'"module_name = gflags._GetCallingModule()"'
op|')'
newline|'\n'
name|'exec'
name|'code'
newline|'\n'
nl|'\n'
comment|'# Next two exec statements executes code with a global environment'
nl|'\n'
comment|'# that is different from the global environment of any imported'
nl|'\n'
comment|'# module.'
nl|'\n'
name|'exec'
name|'code'
name|'in'
op|'{'
op|'}'
newline|'\n'
comment|'# vars(self) returns a dictionary corresponding to the symbol'
nl|'\n'
comment|'# table of the self object.  dict(...) makes a distinct copy of'
nl|'\n'
comment|'# this dictionary, such that any new symbol definition by the'
nl|'\n'
comment|'# exec-ed code (e.g., import flags, module_name = ...) does not'
nl|'\n'
comment|'# affect the symbol table of self.'
nl|'\n'
name|'exec'
name|'code'
name|'in'
name|'dict'
op|'('
name|'vars'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Next test is actually more involved: it checks not only that'
nl|'\n'
comment|'# _GetCallingModule does not crash inside exec code, it also checks'
nl|'\n'
comment|'# that it returns the expected value: the code executed via exec'
nl|'\n'
comment|'# code is treated as being executed by the current module.  We'
nl|'\n'
comment|'# check it twice: first time by executing exec from the main'
nl|'\n'
comment|'# module, second time by executing it from module_bar.'
nl|'\n'
name|'global_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'exec'
name|'code'
name|'in'
name|'global_dict'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'global_dict'
op|'['
string|"'module_name'"
op|']'
op|','
nl|'\n'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'global_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'module_bar'
op|'.'
name|'ExecuteCode'
op|'('
name|'code'
op|','
name|'global_dict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'global_dict'
op|'['
string|"'module_name'"
op|']'
op|','
nl|'\n'
string|"'test_module_bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

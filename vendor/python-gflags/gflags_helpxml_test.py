begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2009, Google Inc.'
nl|'\n'
comment|'# All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Redistribution and use in source and binary forms, with or without'
nl|'\n'
comment|'# modification, are permitted provided that the following conditions are'
nl|'\n'
comment|'# met:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     * Redistributions of source code must retain the above copyright'
nl|'\n'
comment|'# notice, this list of conditions and the following disclaimer.'
nl|'\n'
comment|'#     * Redistributions in binary form must reproduce the above'
nl|'\n'
comment|'# copyright notice, this list of conditions and the following disclaimer'
nl|'\n'
comment|'# in the documentation and/or other materials provided with the'
nl|'\n'
comment|'# distribution.'
nl|'\n'
comment|'#     * Neither the name of Google Inc. nor the names of its'
nl|'\n'
comment|'# contributors may be used to endorse or promote products derived from'
nl|'\n'
comment|'# this software without specific prior written permission.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
nl|'\n'
comment|'# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
nl|'\n'
comment|'# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT'
nl|'\n'
comment|'# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,'
nl|'\n'
comment|'# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,'
nl|'\n'
comment|'# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY'
nl|'\n'
comment|'# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
nl|'\n'
comment|'# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE'
nl|'\n'
comment|'# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
nl|'\n'
nl|'\n'
string|'"""Unit tests for the XML-format help generated by the gflags.py module."""'
newline|'\n'
nl|'\n'
DECL|variable|__author__
name|'__author__'
op|'='
string|"'Alex Salcianu'"
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
newline|'\n'
name|'import'
name|'xml'
op|'.'
name|'sax'
op|'.'
name|'saxutils'
newline|'\n'
nl|'\n'
comment|"# We use the name 'flags' internally in this test, for historical reasons."
nl|'\n'
comment|"# Don't do this yourself! :-)  Just do 'import gflags; FLAGS=gflags.FLAGS; etc'"
nl|'\n'
name|'import'
name|'gflags'
name|'as'
name|'flags'
newline|'\n'
nl|'\n'
comment|'# For historic reasons, we use the name module_bar instead of test_module_bar'
nl|'\n'
name|'import'
name|'test_module_bar'
name|'as'
name|'module_bar'
newline|'\n'
nl|'\n'
DECL|function|MultiLineEqual
name|'def'
name|'MultiLineEqual'
op|'('
name|'expected_help'
op|','
name|'help'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns True if expected_help == help.  Otherwise returns False\n  and logs the difference in a human-readable way.\n  """'
newline|'\n'
name|'if'
name|'help'
op|'=='
name|'expected_help'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
string|'"Error: FLAGS.MainModuleHelp() didn\'t return the expected result."'
newline|'\n'
name|'print'
string|'"Got:"'
newline|'\n'
name|'print'
name|'help'
newline|'\n'
name|'print'
string|'"[End of got]"'
newline|'\n'
nl|'\n'
name|'help_lines'
op|'='
name|'help'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'expected_help_lines'
op|'='
name|'expected_help'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
name|'num_help_lines'
op|'='
name|'len'
op|'('
name|'help_lines'
op|')'
newline|'\n'
name|'num_expected_help_lines'
op|'='
name|'len'
op|'('
name|'expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'num_help_lines'
op|'!='
name|'num_expected_help_lines'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Number of help lines = %d, expected %d"'
op|'%'
op|'('
nl|'\n'
name|'num_help_lines'
op|','
name|'num_expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'num_to_match'
op|'='
name|'min'
op|'('
name|'num_help_lines'
op|','
name|'num_expected_help_lines'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_to_match'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'help_lines'
op|'['
name|'i'
op|']'
op|'!='
name|'expected_help_lines'
op|'['
name|'i'
op|']'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"One discrepancy: Got:"'
newline|'\n'
name|'print'
name|'help_lines'
op|'['
name|'i'
op|']'
newline|'\n'
name|'print'
string|'"Expected:"'
newline|'\n'
name|'print'
name|'expected_help_lines'
op|'['
name|'i'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If we got here, found no discrepancy, print first new line.'
nl|'\n'
indent|'    '
name|'if'
name|'num_help_lines'
op|'>'
name|'num_expected_help_lines'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"New help line:"'
newline|'\n'
name|'print'
name|'help_lines'
op|'['
name|'num_expected_help_lines'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'num_expected_help_lines'
op|'>'
name|'num_help_lines'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Missing expected help line:"'
newline|'\n'
name|'print'
name|'expected_help_lines'
op|'['
name|'num_help_lines'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'print'
string|'"Bug in this test -- discrepancy detected but not found."'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_MakeXMLSafeTest
dedent|''
name|'class'
name|'_MakeXMLSafeTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_Check
indent|'  '
name|'def'
name|'_Check'
op|'('
name|'self'
op|','
name|'s'
op|','
name|'expected_output'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flags'
op|'.'
name|'_MakeXMLSafe'
op|'('
name|'s'
op|')'
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testMakeXMLSafe
dedent|''
name|'def'
name|'testMakeXMLSafe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'_Check'
op|'('
string|"'plain text'"
op|','
string|"'plain text'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_Check'
op|'('
string|"'(x < y) && (a >= b)'"
op|','
nl|'\n'
string|"'(x &lt; y) &amp;&amp; (a &gt;= b)'"
op|')'
newline|'\n'
comment|'# Some characters with ASCII code < 32 are illegal in XML 1.0 and'
nl|'\n'
comment|"# are removed by us.  However, '\\n', '\\t', and '\\r' are legal."
nl|'\n'
name|'self'
op|'.'
name|'_Check'
op|'('
string|"'\\x09\\x0btext \\x02 with\\x0dsome \\x08 good & bad chars'"
op|','
nl|'\n'
string|"'\\ttext  with\\rsome  good &amp; bad chars'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ListSeparatorsInXMLFormat
dedent|''
dedent|''
name|'def'
name|'_ListSeparatorsInXMLFormat'
op|'('
name|'separators'
op|','
name|'indent'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Generates XML encoding of a list of list separators.\n\n  Args:\n    separators: A list of list separators.  Usually, this should be a\n      string whose characters are the valid list separators, e.g., \',\'\n      means that both comma (\',\') and space (\' \') are valid list\n      separators.\n    indent: A string that is added at the beginning of each generated\n      XML element.\n\n  Returns:\n    A string.\n  """'
newline|'\n'
name|'result'
op|'='
string|"''"
newline|'\n'
name|'separators'
op|'='
name|'list'
op|'('
name|'separators'
op|')'
newline|'\n'
name|'separators'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'sep_char'
name|'in'
name|'separators'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'+='
op|'('
string|"'%s<list_separator>%s</list_separator>\\n'"
op|'%'
nl|'\n'
op|'('
name|'indent'
op|','
name|'repr'
op|'('
name|'sep_char'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WriteFlagHelpInXMLFormatTest
dedent|''
name|'class'
name|'WriteFlagHelpInXMLFormatTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Test the XML-format help for a single flag at a time.\n\n  There is one test* method for each kind of DEFINE_* declaration.\n  """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# self.fv is a FlagValues object, just like flags.FLAGS.  Each'
nl|'\n'
comment|'# test registers one flag with this FlagValues.'
nl|'\n'
indent|'    '
name|'self'
op|'.'
name|'fv'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertMultiLineEqual
dedent|''
name|'def'
name|'assertMultiLineEqual'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'actual'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'MultiLineEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_CheckFlagHelpInXML
dedent|''
name|'def'
name|'_CheckFlagHelpInXML'
op|'('
name|'self'
op|','
name|'flag_name'
op|','
name|'module_name'
op|','
nl|'\n'
name|'expected_output'
op|','
name|'is_key'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# StringIO.StringIO is a file object that writes into a memory string.'
nl|'\n'
indent|'    '
name|'sio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'flag_obj'
op|'='
name|'self'
op|'.'
name|'fv'
op|'['
name|'flag_name'
op|']'
newline|'\n'
name|'flag_obj'
op|'.'
name|'WriteInfoInXMLFormat'
op|'('
name|'sio'
op|','
name|'module_name'
op|','
name|'is_key'
op|'='
name|'is_key'
op|','
name|'indent'
op|'='
string|"' '"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
op|','
name|'expected_output'
op|')'
newline|'\n'
name|'sio'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_Int
dedent|''
name|'def'
name|'testFlagHelpInXML_Int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'index'"
op|','
number|'17'
op|','
string|"'An integer flag'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output_pattern'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>module.name</file>\\n'"
nl|'\n'
string|"'   <name>index</name>\\n'"
nl|'\n'
string|"'   <meaning>An integer flag</meaning>\\n'"
nl|'\n'
string|"'   <default>17</default>\\n'"
nl|'\n'
string|"'   <current>%d</current>\\n'"
nl|'\n'
string|"'   <type>int</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'index'"
op|','
string|"'module.name'"
op|','
nl|'\n'
name|'expected_output_pattern'
op|'%'
number|'17'
op|')'
newline|'\n'
comment|'# Check that the output is correct even when the current value of'
nl|'\n'
comment|'# a flag is different from the default one.'
nl|'\n'
name|'self'
op|'.'
name|'fv'
op|'['
string|"'index'"
op|']'
op|'.'
name|'value'
op|'='
number|'20'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'index'"
op|','
string|"'module.name'"
op|','
nl|'\n'
name|'expected_output_pattern'
op|'%'
number|'20'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_IntWithBounds
dedent|''
name|'def'
name|'testFlagHelpInXML_IntWithBounds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'nb_iters'"
op|','
number|'17'
op|','
string|"'An integer flag'"
op|','
nl|'\n'
name|'lower_bound'
op|'='
number|'5'
op|','
name|'upper_bound'
op|'='
number|'27'
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <key>yes</key>\\n'"
nl|'\n'
string|"'   <file>module.name</file>\\n'"
nl|'\n'
string|"'   <name>nb_iters</name>\\n'"
nl|'\n'
string|"'   <meaning>An integer flag</meaning>\\n'"
nl|'\n'
string|"'   <default>17</default>\\n'"
nl|'\n'
string|"'   <current>17</current>\\n'"
nl|'\n'
string|"'   <type>int</type>\\n'"
nl|'\n'
string|"'   <lower_bound>5</lower_bound>\\n'"
nl|'\n'
string|"'   <upper_bound>27</upper_bound>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'nb_iters'"
op|','
string|"'module.name'"
op|','
nl|'\n'
name|'expected_output'
op|','
name|'is_key'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_String
dedent|''
name|'def'
name|'testFlagHelpInXML_String'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'file_path'"
op|','
string|"'/path/to/my/dir'"
op|','
string|"'A test string flag.'"
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>simple_module</file>\\n'"
nl|'\n'
string|"'   <name>file_path</name>\\n'"
nl|'\n'
string|"'   <meaning>A test string flag.</meaning>\\n'"
nl|'\n'
string|"'   <default>/path/to/my/dir</default>\\n'"
nl|'\n'
string|"'   <current>/path/to/my/dir</current>\\n'"
nl|'\n'
string|"'   <type>string</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'file_path'"
op|','
string|"'simple_module'"
op|','
nl|'\n'
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_StringWithXMLIllegalChars
dedent|''
name|'def'
name|'testFlagHelpInXML_StringWithXMLIllegalChars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'file_path'"
op|','
string|"'/path/to/\\x08my/dir'"
op|','
nl|'\n'
string|"'A test string flag.'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
comment|"# '\\x08' is not a legal character in XML 1.0 documents.  Our"
nl|'\n'
comment|'# current code purges such characters from the generated XML.'
nl|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>simple_module</file>\\n'"
nl|'\n'
string|"'   <name>file_path</name>\\n'"
nl|'\n'
string|"'   <meaning>A test string flag.</meaning>\\n'"
nl|'\n'
string|"'   <default>/path/to/my/dir</default>\\n'"
nl|'\n'
string|"'   <current>/path/to/my/dir</current>\\n'"
nl|'\n'
string|"'   <type>string</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'file_path'"
op|','
string|"'simple_module'"
op|','
nl|'\n'
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_Boolean
dedent|''
name|'def'
name|'testFlagHelpInXML_Boolean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'use_hack'"
op|','
name|'False'
op|','
string|"'Use performance hack'"
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <key>yes</key>\\n'"
nl|'\n'
string|"'   <file>a_module</file>\\n'"
nl|'\n'
string|"'   <name>use_hack</name>\\n'"
nl|'\n'
string|"'   <meaning>Use performance hack</meaning>\\n'"
nl|'\n'
string|"'   <default>false</default>\\n'"
nl|'\n'
string|"'   <current>false</current>\\n'"
nl|'\n'
string|"'   <type>bool</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'use_hack'"
op|','
string|"'a_module'"
op|','
nl|'\n'
name|'expected_output'
op|','
name|'is_key'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_Enum
dedent|''
name|'def'
name|'testFlagHelpInXML_Enum'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_enum'
op|'('
string|"'cc_version'"
op|','
string|"'stable'"
op|','
op|'['
string|"'stable'"
op|','
string|"'experimental'"
op|']'
op|','
nl|'\n'
string|"'Compiler version to use.'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>tool</file>\\n'"
nl|'\n'
string|"'   <name>cc_version</name>\\n'"
nl|'\n'
string|"'   <meaning>&lt;stable|experimental&gt;: '"
nl|'\n'
string|"'Compiler version to use.</meaning>\\n'"
nl|'\n'
string|"'   <default>stable</default>\\n'"
nl|'\n'
string|"'   <current>stable</current>\\n'"
nl|'\n'
string|"'   <type>string enum</type>\\n'"
nl|'\n'
string|"'   <enum_value>stable</enum_value>\\n'"
nl|'\n'
string|"'   <enum_value>experimental</enum_value>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'cc_version'"
op|','
string|"'tool'"
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_CommaSeparatedList
dedent|''
name|'def'
name|'testFlagHelpInXML_CommaSeparatedList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'files'"
op|','
string|"'a.cc,a.h,archive/old.zip'"
op|','
nl|'\n'
string|"'Files to process.'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>tool</file>\\n'"
nl|'\n'
string|"'   <name>files</name>\\n'"
nl|'\n'
string|"'   <meaning>Files to process.</meaning>\\n'"
nl|'\n'
string|"'   <default>a.cc,a.h,archive/old.zip</default>\\n'"
nl|'\n'
string|"'   <current>[\\'a.cc\\', \\'a.h\\', \\'archive/old.zip\\']</current>\\n'"
nl|'\n'
string|"'   <type>comma separated list of strings</type>\\n'"
nl|'\n'
string|"'   <list_separator>\\',\\'</list_separator>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'files'"
op|','
string|"'tool'"
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_SpaceSeparatedList
dedent|''
name|'def'
name|'testFlagHelpInXML_SpaceSeparatedList'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_spaceseplist'
op|'('
string|"'dirs'"
op|','
string|"'src libs bin'"
op|','
nl|'\n'
string|"'Directories to search.'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>tool</file>\\n'"
nl|'\n'
string|"'   <name>dirs</name>\\n'"
nl|'\n'
string|"'   <meaning>Directories to search.</meaning>\\n'"
nl|'\n'
string|"'   <default>src libs bin</default>\\n'"
nl|'\n'
string|"'   <current>[\\'src\\', \\'libs\\', \\'bin\\']</current>\\n'"
nl|'\n'
string|"'   <type>whitespace separated list of strings</type>\\n'"
nl|'\n'
string|"'LIST_SEPARATORS'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
op|'.'
name|'replace'
op|'('
string|"'LIST_SEPARATORS'"
op|','
nl|'\n'
name|'_ListSeparatorsInXMLFormat'
op|'('
name|'string'
op|'.'
name|'whitespace'
op|','
nl|'\n'
name|'indent'
op|'='
string|"'   '"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'dirs'"
op|','
string|"'tool'"
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_MultiString
dedent|''
name|'def'
name|'testFlagHelpInXML_MultiString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_multistring'
op|'('
string|"'to_delete'"
op|','
op|'['
string|"'a.cc'"
op|','
string|"'b.h'"
op|']'
op|','
nl|'\n'
string|"'Files to delete'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>tool</file>\\n'"
nl|'\n'
string|"'   <name>to_delete</name>\\n'"
nl|'\n'
string|"'   <meaning>Files to delete;\\n    '"
nl|'\n'
string|"'repeat this option to specify a list of values</meaning>\\n'"
nl|'\n'
string|"'   <default>[\\'a.cc\\', \\'b.h\\']</default>\\n'"
nl|'\n'
string|"'   <current>[\\'a.cc\\', \\'b.h\\']</current>\\n'"
nl|'\n'
string|"'   <type>multi string</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'to_delete'"
op|','
string|"'tool'"
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testFlagHelpInXML_MultiInt
dedent|''
name|'def'
name|'testFlagHelpInXML_MultiInt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flags'
op|'.'
name|'DEFINE_multi_int'
op|'('
string|"'cols'"
op|','
op|'['
number|'5'
op|','
number|'7'
op|','
number|'23'
op|']'
op|','
nl|'\n'
string|"'Columns to select'"
op|','
name|'flag_values'
op|'='
name|'self'
op|'.'
name|'fv'
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
string|"' <flag>\\n'"
nl|'\n'
string|"'   <file>tool</file>\\n'"
nl|'\n'
string|"'   <name>cols</name>\\n'"
nl|'\n'
string|"'   <meaning>Columns to select;\\n    '"
nl|'\n'
string|"'repeat this option to specify a list of values</meaning>\\n'"
nl|'\n'
string|"'   <default>[5, 7, 23]</default>\\n'"
nl|'\n'
string|"'   <current>[5, 7, 23]</current>\\n'"
nl|'\n'
string|"'   <type>multi int</type>\\n'"
nl|'\n'
string|"' </flag>\\n'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_CheckFlagHelpInXML'
op|'('
string|"'cols'"
op|','
string|"'tool'"
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The next EXPECTED_HELP_XML_* constants are parts of a template for'
nl|'\n'
comment|'# the expected XML output from WriteHelpInXMLFormatTest below.  When'
nl|'\n'
comment|"# we assemble these parts into a single big string, we'll take into"
nl|'\n'
comment|'# account the ordering between the name of the main module and the'
nl|'\n'
comment|"# name of module_bar.  Next, we'll fill in the docstring for this"
nl|'\n'
comment|'# module (%(usage_doc)s), the name of the main module'
nl|'\n'
comment|'# (%(main_module_name)s) and the name of the module module_bar'
nl|'\n'
comment|'# (%(module_bar_name)s).  See WriteHelpInXMLFormatTest below.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# NOTE: given the current implementation of _GetMainModule(), we'
nl|'\n'
comment|'# already know the ordering between the main module and module_bar.'
nl|'\n'
comment|'# However, there is no guarantee that _GetMainModule will never be'
nl|'\n'
comment|"# changed in the future (especially since it's far from perfect)."
nl|'\n'
dedent|''
dedent|''
name|'EXPECTED_HELP_XML_START'
op|'='
string|'"""\\\n<?xml version="1.0"?>\n<AllFlags>\n  <program>gflags_helpxml_test.py</program>\n  <usage>%(usage_doc)s</usage>\n"""'
newline|'\n'
nl|'\n'
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE'
op|'='
string|'"""\\\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>cc_version</name>\n    <meaning>&lt;stable|experimental&gt;: Compiler version to use.</meaning>\n    <default>stable</default>\n    <current>stable</current>\n    <type>string enum</type>\n    <enum_value>stable</enum_value>\n    <enum_value>experimental</enum_value>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>cols</name>\n    <meaning>Columns to select;\n    repeat this option to specify a list of values</meaning>\n    <default>[5, 7, 23]</default>\n    <current>[5, 7, 23]</current>\n    <type>multi int</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>dirs</name>\n    <meaning>Directories to create.</meaning>\n    <default>src libs bins</default>\n    <current>[\'src\', \'libs\', \'bins\']</current>\n    <type>whitespace separated list of strings</type>\n%(whitespace_separators)s  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>file_path</name>\n    <meaning>A test string flag.</meaning>\n    <default>/path/to/my/dir</default>\n    <current>/path/to/my/dir</current>\n    <type>string</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>files</name>\n    <meaning>Files to process.</meaning>\n    <default>a.cc,a.h,archive/old.zip</default>\n    <current>[\'a.cc\', \'a.h\', \'archive/old.zip\']</current>\n    <type>comma separated list of strings</type>\n    <list_separator>\\\',\\\'</list_separator>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>index</name>\n    <meaning>An integer flag</meaning>\n    <default>17</default>\n    <current>17</current>\n    <type>int</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>nb_iters</name>\n    <meaning>An integer flag</meaning>\n    <default>17</default>\n    <current>17</current>\n    <type>int</type>\n    <lower_bound>5</lower_bound>\n    <upper_bound>27</upper_bound>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>to_delete</name>\n    <meaning>Files to delete;\n    repeat this option to specify a list of values</meaning>\n    <default>[\'a.cc\', \'b.h\']</default>\n    <current>[\'a.cc\', \'b.h\']</current>\n    <type>multi string</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(main_module_name)s</file>\n    <name>use_hack</name>\n    <meaning>Use performance hack</meaning>\n    <default>false</default>\n    <current>false</current>\n    <type>bool</type>\n  </flag>\n"""'
newline|'\n'
nl|'\n'
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR'
op|'='
string|'"""\\\n  <flag>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_t</name>\n    <meaning>Sample int flag.</meaning>\n    <default>4</default>\n    <current>4</current>\n    <type>int</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_u</name>\n    <meaning>Sample int flag.</meaning>\n    <default>5</default>\n    <current>5</current>\n    <type>int</type>\n  </flag>\n  <flag>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_v</name>\n    <meaning>Sample int flag.</meaning>\n    <default>6</default>\n    <current>6</current>\n    <type>int</type>\n  </flag>\n  <flag>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_x</name>\n    <meaning>Boolean flag.</meaning>\n    <default>true</default>\n    <current>true</current>\n    <type>bool</type>\n  </flag>\n  <flag>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_y</name>\n    <meaning>String flag.</meaning>\n    <default>default</default>\n    <current>default</current>\n    <type>string</type>\n  </flag>\n  <flag>\n    <key>yes</key>\n    <file>%(module_bar_name)s</file>\n    <name>tmod_bar_z</name>\n    <meaning>Another boolean flag from module bar.</meaning>\n    <default>false</default>\n    <current>false</current>\n    <type>bool</type>\n  </flag>\n"""'
newline|'\n'
nl|'\n'
name|'EXPECTED_HELP_XML_END'
op|'='
string|'"""\\\n</AllFlags>\n"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WriteHelpInXMLFormatTest
name|'class'
name|'WriteHelpInXMLFormatTest'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Big test of FlagValues.WriteHelpInXMLFormat, with several flags."""'
newline|'\n'
nl|'\n'
DECL|member|assertMultiLineEqual
name|'def'
name|'assertMultiLineEqual'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'actual'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'assert_'
op|'('
name|'MultiLineEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|testWriteHelpInXMLFormat
dedent|''
name|'def'
name|'testWriteHelpInXMLFormat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fv'
op|'='
name|'flags'
op|'.'
name|'FlagValues'
op|'('
op|')'
newline|'\n'
comment|'# Since these flags are defined by the top module, they are all key.'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'index'"
op|','
number|'17'
op|','
string|"'An integer flag'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'nb_iters'"
op|','
number|'17'
op|','
string|"'An integer flag'"
op|','
nl|'\n'
name|'lower_bound'
op|'='
number|'5'
op|','
name|'upper_bound'
op|'='
number|'27'
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'file_path'"
op|','
string|"'/path/to/my/dir'"
op|','
string|"'A test string flag.'"
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_boolean'
op|'('
string|"'use_hack'"
op|','
name|'False'
op|','
string|"'Use performance hack'"
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_enum'
op|'('
string|"'cc_version'"
op|','
string|"'stable'"
op|','
op|'['
string|"'stable'"
op|','
string|"'experimental'"
op|']'
op|','
nl|'\n'
string|"'Compiler version to use.'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_list'
op|'('
string|"'files'"
op|','
string|"'a.cc,a.h,archive/old.zip'"
op|','
nl|'\n'
string|"'Files to process.'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_spaceseplist'
op|'('
string|"'dirs'"
op|','
string|"'src libs bins'"
op|','
nl|'\n'
string|"'Directories to create.'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_multistring'
op|'('
string|"'to_delete'"
op|','
op|'['
string|"'a.cc'"
op|','
string|"'b.h'"
op|']'
op|','
nl|'\n'
string|"'Files to delete'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_multi_int'
op|'('
string|"'cols'"
op|','
op|'['
number|'5'
op|','
number|'7'
op|','
number|'23'
op|']'
op|','
nl|'\n'
string|"'Columns to select'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
comment|'# Define a few flags in a different module.'
nl|'\n'
name|'module_bar'
op|'.'
name|'DefineFlags'
op|'('
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
comment|'# And declare only a few of them to be key.  This way, we have'
nl|'\n'
comment|'# different kinds of flags, defined in different modules, and not'
nl|'\n'
comment|'# all of them are key flags.'
nl|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
string|"'tmod_bar_z'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE_key_flag'
op|'('
string|"'tmod_bar_u'"
op|','
name|'flag_values'
op|'='
name|'fv'
op|')'
newline|'\n'
nl|'\n'
comment|'# Generate flag help in XML format in the StringIO sio.'
nl|'\n'
name|'sio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'fv'
op|'.'
name|'WriteHelpInXMLFormat'
op|'('
name|'sio'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that we got the expected result.'
nl|'\n'
name|'expected_output_template'
op|'='
name|'EXPECTED_HELP_XML_START'
newline|'\n'
name|'main_module_name'
op|'='
name|'flags'
op|'.'
name|'_GetMainModule'
op|'('
op|')'
newline|'\n'
name|'module_bar_name'
op|'='
name|'module_bar'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
name|'if'
name|'main_module_name'
op|'<'
name|'module_bar_name'
op|':'
newline|'\n'
indent|'      '
name|'expected_output_template'
op|'+='
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE'
newline|'\n'
name|'expected_output_template'
op|'+='
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'expected_output_template'
op|'+='
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MODULE_BAR'
newline|'\n'
name|'expected_output_template'
op|'+='
name|'EXPECTED_HELP_XML_FOR_FLAGS_FROM_MAIN_MODULE'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_output_template'
op|'+='
name|'EXPECTED_HELP_XML_END'
newline|'\n'
nl|'\n'
comment|'# XML representation of the whitespace list separators.'
nl|'\n'
name|'whitespace_separators'
op|'='
name|'_ListSeparatorsInXMLFormat'
op|'('
name|'string'
op|'.'
name|'whitespace'
op|','
nl|'\n'
name|'indent'
op|'='
string|"'    '"
op|')'
newline|'\n'
name|'expected_output'
op|'='
op|'('
nl|'\n'
name|'expected_output_template'
op|'%'
nl|'\n'
op|'{'
string|"'usage_doc'"
op|':'
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
op|'.'
name|'__doc__'
op|','
nl|'\n'
string|"'main_module_name'"
op|':'
name|'main_module_name'
op|','
nl|'\n'
string|"'module_bar_name'"
op|':'
name|'module_bar_name'
op|','
nl|'\n'
string|"'whitespace_separators'"
op|':'
name|'whitespace_separators'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'actual_output'
op|'='
name|'sio'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertMultiLineEqual'
op|'('
name|'actual_output'
op|','
name|'expected_output'
op|')'
newline|'\n'
nl|'\n'
comment|'# Also check that our result is valid XML.  minidom.parseString'
nl|'\n'
comment|'# throws an xml.parsers.expat.ExpatError in case of an error.'
nl|'\n'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'actual_output'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'unittest'
op|'.'
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

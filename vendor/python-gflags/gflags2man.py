begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright (c) 2007, Google Inc.'
nl|'\n'
comment|'# All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Redistribution and use in source and binary forms, with or without'
nl|'\n'
comment|'# modification, are permitted provided that the following conditions are'
nl|'\n'
comment|'# met:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     * Redistributions of source code must retain the above copyright'
nl|'\n'
comment|'# notice, this list of conditions and the following disclaimer.'
nl|'\n'
comment|'#     * Redistributions in binary form must reproduce the above'
nl|'\n'
comment|'# copyright notice, this list of conditions and the following disclaimer'
nl|'\n'
comment|'# in the documentation and/or other materials provided with the'
nl|'\n'
comment|'# distribution.'
nl|'\n'
comment|'#     * Neither the name of Google Inc. nor the names of its'
nl|'\n'
comment|'# contributors may be used to endorse or promote products derived from'
nl|'\n'
comment|'# this software without specific prior written permission.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
nl|'\n'
comment|'# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
nl|'\n'
comment|'# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT'
nl|'\n'
comment|'# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,'
nl|'\n'
comment|'# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,'
nl|'\n'
comment|'# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY'
nl|'\n'
comment|'# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
nl|'\n'
comment|'# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE'
nl|'\n'
comment|'# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
nl|'\n'
nl|'\n'
string|'"""gflags2man runs a Google flags base program and generates a man page.\n\nRun the program, parse the output, and then format that into a man\npage.\n\nUsage:\n  gflags2man <program> [program] ...\n"""'
newline|'\n'
nl|'\n'
comment|'# TODO(csilvers): work with windows paths (\\) as well as unix (/)'
nl|'\n'
nl|'\n'
comment|"# This may seem a bit of an end run, but it:  doesn't bloat flags, can"
nl|'\n'
comment|'# support python/java/C++, supports older executables, and can be'
nl|'\n'
comment|'# extended to other document formats.'
nl|'\n'
comment|'# Inspired by help2man.'
nl|'\n'
nl|'\n'
DECL|variable|__author__
name|'__author__'
op|'='
string|"'Dan Christian'"
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'gflags'
newline|'\n'
nl|'\n'
DECL|variable|_VERSION
name|'_VERSION'
op|'='
string|"'0.1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_GetDefaultDestDir
name|'def'
name|'_GetDefaultDestDir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
name|'home'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'HOME'"
op|','
string|"''"
op|')'
newline|'\n'
name|'homeman'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'home'
op|','
string|"'man'"
op|','
string|"'man1'"
op|')'
newline|'\n'
name|'if'
name|'home'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'homeman'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'homeman'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'TMPDIR'"
op|','
string|"'/tmp'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
dedent|''
dedent|''
name|'FLAGS'
op|'='
name|'gflags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'gflags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'dest_dir'"
op|','
name|'_GetDefaultDestDir'
op|'('
op|')'
op|','
nl|'\n'
string|"'Directory to write resulting manpage to.'"
nl|'\n'
string|"' Specify \\'-\\' for stdout'"
op|')'
newline|'\n'
name|'gflags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'help_flag'"
op|','
string|"'--help'"
op|','
nl|'\n'
string|"'Option to pass to target program in to get help'"
op|')'
newline|'\n'
name|'gflags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'v'"
op|','
number|'0'
op|','
string|"'verbosity level to use for output'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_MIN_VALID_USAGE_MSG
name|'_MIN_VALID_USAGE_MSG'
op|'='
number|'9'
comment|'# if fewer lines than this, help is suspect'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Logging
name|'class'
name|'Logging'
op|':'
newline|'\n'
indent|'  '
string|'"""A super-simple logging class"""'
newline|'\n'
DECL|member|error
name|'def'
name|'error'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"ERROR: "'
op|','
name|'msg'
newline|'\n'
DECL|member|warn
name|'def'
name|'warn'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"WARNING: "'
op|','
name|'msg'
newline|'\n'
DECL|member|info
name|'def'
name|'info'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
name|'print'
name|'msg'
newline|'\n'
DECL|member|debug
name|'def'
name|'debug'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
name|'self'
op|'.'
name|'vlog'
op|'('
number|'1'
op|','
name|'msg'
op|')'
newline|'\n'
DECL|member|vlog
name|'def'
name|'vlog'
op|'('
name|'self'
op|','
name|'level'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'FLAGS'
op|'.'
name|'v'
op|'>='
name|'level'
op|':'
name|'print'
name|'msg'
newline|'\n'
DECL|variable|logging
dedent|''
dedent|''
name|'logging'
op|'='
name|'Logging'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|GetRealPath
name|'def'
name|'GetRealPath'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Given an executable filename, find in the PATH or find absolute path.\n  Args:\n    filename  An executable filename (string)\n  Returns:\n    Absolute version of filename.\n    None if filename could not be found locally, absolutely, or in PATH\n  """'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'filename'
op|')'
op|':'
comment|'# already absolute'
newline|'\n'
indent|'    '
name|'return'
name|'filename'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'filename'
op|'.'
name|'startswith'
op|'('
string|"'./'"
op|')'
name|'or'
name|'filename'
op|'.'
name|'startswith'
op|'('
string|"'../'"
op|')'
op|':'
comment|'# relative'
newline|'\n'
indent|'    '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'PATH'"
op|','
string|"''"
op|')'
newline|'\n'
name|'for'
name|'directory'
name|'in'
name|'path'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'tryname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'directory'
op|','
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'tryname'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'directory'
op|')'
op|':'
comment|'# relative directory'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'tryname'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tryname'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'None'
comment|'# could not determine'
newline|'\n'
nl|'\n'
DECL|class|Flag
dedent|''
name|'class'
name|'Flag'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""The information about a single flag."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'flag_desc'
op|','
name|'help'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create the flag object.\n    Args:\n      flag_desc  The command line forms this could take. (string)\n      help       The help text (string)\n    """'
newline|'\n'
name|'self'
op|'.'
name|'desc'
op|'='
name|'flag_desc'
comment|'# the command line forms'
newline|'\n'
name|'self'
op|'.'
name|'help'
op|'='
name|'help'
comment|'# the help text'
newline|'\n'
name|'self'
op|'.'
name|'default'
op|'='
string|"''"
comment|'# default value'
newline|'\n'
name|'self'
op|'.'
name|'tips'
op|'='
string|"''"
comment|'# parsing/syntax tips'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProgramInfo
dedent|''
dedent|''
name|'class'
name|'ProgramInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""All the information gleaned from running a program with --help."""'
newline|'\n'
nl|'\n'
comment|'# Match a module block start, for python scripts --help'
nl|'\n'
comment|'# "goopy.logging:"'
nl|'\n'
DECL|variable|module_py_re
name|'module_py_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'(\\S.+):$'"
op|')'
newline|'\n'
comment|'# match the start of a flag listing'
nl|'\n'
comment|'# " -v,--verbosity:  Logging verbosity"'
nl|'\n'
DECL|variable|flag_py_re
name|'flag_py_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+(-\\S+):\\s+(.*)$'"
op|')'
newline|'\n'
comment|'# "   (default: \'0\')"'
nl|'\n'
DECL|variable|flag_default_py_re
name|'flag_default_py_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+\\(default:\\s+\\'(.*)\\'\\)$'"
op|')'
newline|'\n'
comment|'# "   (an integer)"'
nl|'\n'
DECL|variable|flag_tips_py_re
name|'flag_tips_py_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+\\((.*)\\)$'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Match a module block start, for c++ programs --help'
nl|'\n'
comment|'# "google/base/commandlineflags"'
nl|'\n'
DECL|variable|module_c_re
name|'module_c_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+Flags from (\\S.+):$'"
op|')'
newline|'\n'
comment|'# match the start of a flag listing'
nl|'\n'
comment|'# " -v,--verbosity:  Logging verbosity"'
nl|'\n'
DECL|variable|flag_c_re
name|'flag_c_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+(-\\S+)\\s+(.*)$'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Match a module block start, for java programs --help'
nl|'\n'
comment|'# "com.google.common.flags"'
nl|'\n'
DECL|variable|module_java_re
name|'module_java_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+Flags for (\\S.+):$'"
op|')'
newline|'\n'
comment|'# match the start of a flag listing'
nl|'\n'
comment|'# " -v,--verbosity:  Logging verbosity"'
nl|'\n'
DECL|variable|flag_java_re
name|'flag_java_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'\\s+(-\\S+)\\s+(.*)$'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'executable'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create object with executable.\n    Args:\n      executable  Program to execute (string)\n    """'
newline|'\n'
name|'self'
op|'.'
name|'long_name'
op|'='
name|'executable'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'executable'
op|')'
comment|'# name'
newline|'\n'
comment|'# Get name without extension (PAR files)'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'short_name'
op|','
name|'self'
op|'.'
name|'ext'
op|')'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'executable'
op|'='
name|'GetRealPath'
op|'('
name|'executable'
op|')'
comment|'# name of the program'
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
op|'['
op|']'
comment|'# output from the program.  List of lines.'
newline|'\n'
name|'self'
op|'.'
name|'desc'
op|'='
op|'['
op|']'
comment|'# top level description.  List of lines'
newline|'\n'
name|'self'
op|'.'
name|'modules'
op|'='
op|'{'
op|'}'
comment|'# { section_name(string), [ flags ] }'
newline|'\n'
name|'self'
op|'.'
name|'module_list'
op|'='
op|'['
op|']'
comment|'# list of module names in their original order'
newline|'\n'
name|'self'
op|'.'
name|'date'
op|'='
name|'time'
op|'.'
name|'localtime'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
comment|'# default date info'
newline|'\n'
nl|'\n'
DECL|member|Run
dedent|''
name|'def'
name|'Run'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run it and collect output.\n\n    Returns:\n      1 (true)   If everything went well.\n      0 (false)  If there were problems.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'executable'
op|':'
newline|'\n'
indent|'      '
name|'logging'
op|'.'
name|'error'
op|'('
string|'\'Could not locate "%s"\''
op|'%'
name|'self'
op|'.'
name|'long_name'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'finfo'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'self'
op|'.'
name|'executable'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'date'
op|'='
name|'time'
op|'.'
name|'localtime'
op|'('
name|'finfo'
op|'['
name|'stat'
op|'.'
name|'ST_MTIME'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Running: %s %s </dev/null 2>&1'"
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'executable'
op|','
name|'FLAGS'
op|'.'
name|'help_flag'
op|')'
op|')'
newline|'\n'
comment|'# --help output is often routed to stderr, so we combine with stdout.'
nl|'\n'
comment|'# Re-direct stdin to /dev/null to encourage programs that'
nl|'\n'
comment|"# don't understand --help to exit."
nl|'\n'
op|'('
name|'child_stdin'
op|','
name|'child_stdout_and_stderr'
op|')'
op|'='
name|'os'
op|'.'
name|'popen4'
op|'('
nl|'\n'
op|'['
name|'self'
op|'.'
name|'executable'
op|','
name|'FLAGS'
op|'.'
name|'help_flag'
op|']'
op|')'
newline|'\n'
name|'child_stdin'
op|'.'
name|'close'
op|'('
op|')'
comment|"# '</dev/null'"
newline|'\n'
name|'self'
op|'.'
name|'output'
op|'='
name|'child_stdout_and_stderr'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
name|'child_stdout_and_stderr'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|'<'
name|'_MIN_VALID_USAGE_MSG'
op|':'
newline|'\n'
indent|'      '
name|'logging'
op|'.'
name|'error'
op|'('
string|'\'Error: "%s %s" returned only %d lines: %s\''
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'FLAGS'
op|'.'
name|'help_flag'
op|','
nl|'\n'
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|','
name|'self'
op|'.'
name|'output'
op|')'
op|')'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse program output."""'
newline|'\n'
op|'('
name|'start_line'
op|','
name|'lang'
op|')'
op|'='
name|'self'
op|'.'
name|'ParseDesc'
op|'('
op|')'
newline|'\n'
name|'if'
name|'start_line'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'      '
name|'return'
newline|'\n'
dedent|''
name|'if'
string|"'python'"
op|'=='
name|'lang'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'ParsePythonFlags'
op|'('
name|'start_line'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'c'"
op|'=='
name|'lang'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'ParseCFlags'
op|'('
name|'start_line'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'java'"
op|'=='
name|'lang'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'ParseJavaFlags'
op|'('
name|'start_line'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ParseDesc
dedent|''
dedent|''
name|'def'
name|'ParseDesc'
op|'('
name|'self'
op|','
name|'start_line'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse the initial description.\n\n    This could be Python or C++.\n\n    Returns:\n      (start_line, lang_type)\n        start_line  Line to start parsing flags on (int)\n        lang_type   Either \'python\' or \'c\'\n       (-1, \'\')  if the flags start could not be found\n    """'
newline|'\n'
name|'exec_mod_start'
op|'='
name|'self'
op|'.'
name|'executable'
op|'+'
string|"':'"
newline|'\n'
nl|'\n'
name|'after_blank'
op|'='
number|'0'
newline|'\n'
name|'start_line'
op|'='
number|'0'
comment|'# ignore the passed-in arg for now (?)'
newline|'\n'
name|'for'
name|'start_line'
name|'in'
name|'range'
op|'('
name|'start_line'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|')'
op|':'
comment|'# collect top description'
newline|'\n'
indent|'      '
name|'line'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
name|'start_line'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
comment|"# Python flags start with 'flags:\\n'"
nl|'\n'
name|'if'
op|'('
string|"'flags:'"
op|'=='
name|'line'
nl|'\n'
name|'and'
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|'>'
name|'start_line'
op|'+'
number|'1'
nl|'\n'
name|'and'
string|"''"
op|'=='
name|'self'
op|'.'
name|'output'
op|'['
name|'start_line'
op|'+'
number|'1'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_line'
op|'+='
number|'2'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flags start (python): %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'return'
op|'('
name|'start_line'
op|','
string|"'python'"
op|')'
newline|'\n'
comment|'# SWIG flags just have the module name followed by colon.'
nl|'\n'
dedent|''
name|'if'
name|'exec_mod_start'
op|'=='
name|'line'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flags start (swig): %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'return'
op|'('
name|'start_line'
op|','
string|"'python'"
op|')'
newline|'\n'
comment|'# C++ flags begin after a blank line and with a constant string'
nl|'\n'
dedent|''
name|'if'
name|'after_blank'
name|'and'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'  Flags from '"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flags start (c): %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'return'
op|'('
name|'start_line'
op|','
string|"'c'"
op|')'
newline|'\n'
comment|'# java flags begin with a constant string'
nl|'\n'
dedent|''
name|'if'
name|'line'
op|'=='
string|"'where flags are'"
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flags start (java): %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'start_line'
op|'+='
number|'2'
comment|'# skip "Standard flags:"'
newline|'\n'
name|'return'
op|'('
name|'start_line'
op|','
string|"'java'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Desc: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'desc'
op|'.'
name|'append'
op|'('
name|'line'
op|')'
newline|'\n'
name|'after_blank'
op|'='
op|'('
name|'line'
op|'=='
string|"''"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'\'Never found the start of the flags section for "%s"!\''
nl|'\n'
op|'%'
name|'self'
op|'.'
name|'long_name'
op|')'
newline|'\n'
name|'return'
op|'('
op|'-'
number|'1'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|ParsePythonFlags
dedent|''
dedent|''
name|'def'
name|'ParsePythonFlags'
op|'('
name|'self'
op|','
name|'start_line'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse python/swig style flags."""'
newline|'\n'
name|'modname'
op|'='
name|'None'
comment|'# name of current module'
newline|'\n'
name|'modlist'
op|'='
op|'['
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'line_num'
name|'in'
name|'range'
op|'('
name|'start_line'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|')'
op|':'
comment|'# collect flags'
newline|'\n'
indent|'      '
name|'line'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
name|'line_num'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
comment|'# blank'
newline|'\n'
indent|'        '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'module_py_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new module'
newline|'\n'
indent|'        '
name|'modname'
op|'='
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Module: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'module_list'
op|'.'
name|'append'
op|'('
name|'modname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modules'
op|'.'
name|'setdefault'
op|'('
name|'modname'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'modlist'
op|'='
name|'self'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'flag_py_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new flag'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flag: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'Flag'
op|'('
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|','
name|'mobj'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'flag'
op|':'
comment|'# continuation of a flag'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'error'
op|'('
string|'\'Flag info, but no current flag "%s"\''
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'flag_default_py_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|"# (default: '...')"
newline|'\n'
indent|'        '
name|'flag'
op|'.'
name|'default'
op|'='
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Fdef: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'flag_tips_py_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# (tips)'
newline|'\n'
indent|'        '
name|'flag'
op|'.'
name|'tips'
op|'='
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Ftip: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'flag'
name|'and'
name|'flag'
op|'.'
name|'help'
op|':'
newline|'\n'
indent|'        '
name|'flag'
op|'.'
name|'help'
op|'+='
name|'line'
comment|'# multiflags tack on an extra line'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Extra: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'      '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ParseCFlags
dedent|''
dedent|''
name|'def'
name|'ParseCFlags'
op|'('
name|'self'
op|','
name|'start_line'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse C style flags."""'
newline|'\n'
name|'modname'
op|'='
name|'None'
comment|'# name of current module'
newline|'\n'
name|'modlist'
op|'='
op|'['
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'line_num'
name|'in'
name|'range'
op|'('
name|'start_line'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|')'
op|':'
comment|'# collect flags'
newline|'\n'
indent|'      '
name|'line'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
name|'line_num'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
comment|'# blank lines terminate flags'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|':'
comment|'# save last flag'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'module_c_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new module'
newline|'\n'
indent|'        '
name|'modname'
op|'='
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Module: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'module_list'
op|'.'
name|'append'
op|'('
name|'modname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modules'
op|'.'
name|'setdefault'
op|'('
name|'modname'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'modlist'
op|'='
name|'self'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'flag_c_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new flag'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|':'
comment|'# save last flag'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flag: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'Flag'
op|'('
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|','
name|'mobj'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# append to flag help.  type and default are part of the main text'
nl|'\n'
dedent|''
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'        '
name|'flag'
op|'.'
name|'help'
op|'+='
string|"' '"
op|'+'
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Extra: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'      '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ParseJavaFlags
dedent|''
dedent|''
name|'def'
name|'ParseJavaFlags'
op|'('
name|'self'
op|','
name|'start_line'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse Java style flags (com.google.common.flags)."""'
newline|'\n'
comment|'# The java flags prints starts with a "Standard flags" "module"'
nl|'\n'
comment|"# that doesn't follow the standard module syntax."
nl|'\n'
name|'modname'
op|'='
string|"'Standard flags'"
comment|'# name of current module'
newline|'\n'
name|'self'
op|'.'
name|'module_list'
op|'.'
name|'append'
op|'('
name|'modname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modules'
op|'.'
name|'setdefault'
op|'('
name|'modname'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'modlist'
op|'='
name|'self'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'for'
name|'line_num'
name|'in'
name|'range'
op|'('
name|'start_line'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'output'
op|')'
op|')'
op|':'
comment|'# collect flags'
newline|'\n'
indent|'      '
name|'line'
op|'='
name|'self'
op|'.'
name|'output'
op|'['
name|'line_num'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'vlog'
op|'('
number|'2'
op|','
string|'\'Line: "%s"\''
op|'%'
name|'line'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'line'
op|':'
comment|'# blank lines terminate module'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|':'
comment|'# save last flag'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'module_java_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new module'
newline|'\n'
indent|'        '
name|'modname'
op|'='
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Module: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'module_list'
op|'.'
name|'append'
op|'('
name|'modname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'modules'
op|'.'
name|'setdefault'
op|'('
name|'modname'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'modlist'
op|'='
name|'self'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
newline|'\n'
name|'flag'
op|'='
name|'None'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'mobj'
op|'='
name|'self'
op|'.'
name|'flag_java_re'
op|'.'
name|'match'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'mobj'
op|':'
comment|'# start of a new flag'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|':'
comment|'# save last flag'
newline|'\n'
indent|'          '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'logging'
op|'.'
name|'debug'
op|'('
string|"'Flag: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
name|'flag'
op|'='
name|'Flag'
op|'('
name|'mobj'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|','
name|'mobj'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
nl|'\n'
comment|'# append to flag help.  type and default are part of the main text'
nl|'\n'
dedent|''
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'        '
name|'flag'
op|'.'
name|'help'
op|'+='
string|"' '"
op|'+'
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Extra: %s'"
op|'%'
name|'line'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'flag'
op|':'
newline|'\n'
indent|'      '
name|'modlist'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Filter
dedent|''
dedent|''
name|'def'
name|'Filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Filter parsed data to create derived fields."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'desc'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'short_desc'
op|'='
string|"''"
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'desc'
op|')'
op|')'
op|':'
comment|'# replace full path with name'
newline|'\n'
indent|'      '
name|'if'
name|'self'
op|'.'
name|'desc'
op|'['
name|'i'
op|']'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'executable'
op|')'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'desc'
op|'['
name|'i'
op|']'
op|'='
name|'self'
op|'.'
name|'desc'
op|'['
name|'i'
op|']'
op|'.'
name|'replace'
op|'('
name|'self'
op|'.'
name|'executable'
op|','
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'short_desc'
op|'='
name|'self'
op|'.'
name|'desc'
op|'['
number|'0'
op|']'
newline|'\n'
name|'word_list'
op|'='
name|'self'
op|'.'
name|'short_desc'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'all_names'
op|'='
op|'['
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'short_name'
op|','
op|']'
newline|'\n'
comment|'# Since the short_desc is always listed right after the name,'
nl|'\n'
comment|'#  trim it from the short_desc'
nl|'\n'
name|'while'
name|'word_list'
name|'and'
op|'('
name|'word_list'
op|'['
number|'0'
op|']'
name|'in'
name|'all_names'
nl|'\n'
name|'or'
name|'word_list'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'all_names'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'del'
name|'word_list'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'short_desc'
op|'='
string|"''"
comment|'# signal need to reconstruct'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'short_desc'
name|'and'
name|'word_list'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'short_desc'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'word_list'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenerateDoc
dedent|''
dedent|''
dedent|''
name|'class'
name|'GenerateDoc'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class to output flags information."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proginfo'
op|','
name|'directory'
op|'='
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create base object.\n    Args:\n      proginfo   A ProgramInfo object\n      directory  Directory to write output into\n    """'
newline|'\n'
name|'self'
op|'.'
name|'info'
op|'='
name|'proginfo'
newline|'\n'
name|'self'
op|'.'
name|'dirname'
op|'='
name|'directory'
newline|'\n'
nl|'\n'
DECL|member|Output
dedent|''
name|'def'
name|'Output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Output all sections of the page."""'
newline|'\n'
name|'self'
op|'.'
name|'Open'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'Header'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'Body'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'Footer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|Open
dedent|''
name|'def'
name|'Open'
op|'('
name|'self'
op|')'
op|':'
name|'raise'
name|'NotImplementedError'
comment|'# define in subclass'
newline|'\n'
DECL|member|Header
name|'def'
name|'Header'
op|'('
name|'self'
op|')'
op|':'
name|'raise'
name|'NotImplementedError'
comment|'# define in subclass'
newline|'\n'
DECL|member|Body
name|'def'
name|'Body'
op|'('
name|'self'
op|')'
op|':'
name|'raise'
name|'NotImplementedError'
comment|'# define in subclass'
newline|'\n'
DECL|member|Footer
name|'def'
name|'Footer'
op|'('
name|'self'
op|')'
op|':'
name|'raise'
name|'NotImplementedError'
comment|'# define in subclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenerateMan
dedent|''
name|'class'
name|'GenerateMan'
op|'('
name|'GenerateDoc'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Output a man page."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proginfo'
op|','
name|'directory'
op|'='
string|"'.'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create base object.\n    Args:\n      proginfo   A ProgramInfo object\n      directory  Directory to write output into\n    """'
newline|'\n'
name|'GenerateDoc'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'proginfo'
op|','
name|'directory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Open
dedent|''
name|'def'
name|'Open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'dirname'
op|'=='
string|"'-'"
op|':'
newline|'\n'
indent|'      '
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Writing to stdout'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'file_path'
op|'='
string|"'%s.1'"
op|'%'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'dirname'
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'info'
op|'('
string|"'Writing: %s'"
op|'%'
name|'self'
op|'.'
name|'file_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'file_path'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|Header
dedent|''
dedent|''
name|'def'
name|'Header'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'\'.\\\\" DO NOT MODIFY THIS FILE!  It was generated by gflags2man %s\\n\''
nl|'\n'
op|'%'
name|'_VERSION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'\'.TH %s "1" "%s" "%s" "User Commands"\\n\''
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|','
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%x'"
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'date'
op|')'
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'.SH NAME\\n%s \\\\- %s\\n'"
op|'%'
op|'('
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'short_desc'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'.SH SYNOPSIS\\n.B %s\\n[\\\\fIFLAGS\\\\fR]...\\n'"
op|'%'
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Body
dedent|''
name|'def'
name|'Body'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'\'.SH DESCRIPTION\\n.\\\\" Add any additional description here\\n.PP\\n\''
op|')'
newline|'\n'
name|'for'
name|'ln'
name|'in'
name|'self'
op|'.'
name|'info'
op|'.'
name|'desc'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
string|"'%s\\n'"
op|'%'
name|'ln'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'.SH OPTIONS\\n'"
op|')'
newline|'\n'
comment|'# This shows flags in the original order'
nl|'\n'
name|'for'
name|'modname'
name|'in'
name|'self'
op|'.'
name|'info'
op|'.'
name|'module_list'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'modname'
op|'.'
name|'find'
op|'('
name|'self'
op|'.'
name|'info'
op|'.'
name|'executable'
op|')'
op|'>='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'mod'
op|'='
name|'modname'
op|'.'
name|'replace'
op|'('
name|'self'
op|'.'
name|'info'
op|'.'
name|'executable'
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'mod'
op|'='
name|'modname'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
string|"'\\n.P\\n.I %s\\n'"
op|'%'
name|'mod'
op|')'
newline|'\n'
name|'for'
name|'flag'
name|'in'
name|'self'
op|'.'
name|'info'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'help_string'
op|'='
name|'flag'
op|'.'
name|'help'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'default'
name|'or'
name|'flag'
op|'.'
name|'tips'
op|':'
newline|'\n'
indent|'          '
name|'help_string'
op|'+='
string|"'\\n.br\\n'"
newline|'\n'
dedent|''
name|'if'
name|'flag'
op|'.'
name|'default'
op|':'
newline|'\n'
indent|'          '
name|'help_string'
op|'+='
string|"'  (default: \\'%s\\')'"
op|'%'
name|'flag'
op|'.'
name|'default'
newline|'\n'
dedent|''
name|'if'
name|'flag'
op|'.'
name|'tips'
op|':'
newline|'\n'
indent|'          '
name|'help_string'
op|'+='
string|"'  (%s)'"
op|'%'
name|'flag'
op|'.'
name|'tips'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'.TP\\n%s\\n%s\\n'"
op|'%'
op|'('
name|'flag'
op|'.'
name|'desc'
op|','
name|'help_string'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Footer
dedent|''
dedent|''
dedent|''
name|'def'
name|'Footer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
nl|'\n'
string|"'.SH COPYRIGHT\\nCopyright \\(co %s Google.\\n'"
nl|'\n'
op|'%'
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%Y'"
op|','
name|'self'
op|'.'
name|'info'
op|'.'
name|'date'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
string|'\'Gflags2man created this page from "%s %s" output.\\n\''
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|','
name|'FLAGS'
op|'.'
name|'help_flag'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fp'
op|'.'
name|'write'
op|'('
string|"'\\nGflags2man was written by Dan Christian. '"
nl|'\n'
string|"' Note that the date on this'"
nl|'\n'
string|"' page is the modification date of %s.\\n'"
op|'%'
name|'self'
op|'.'
name|'info'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
dedent|''
name|'def'
name|'main'
op|'('
name|'argv'
op|')'
op|':'
newline|'\n'
indent|'  '
name|'argv'
op|'='
name|'FLAGS'
op|'('
name|'argv'
op|')'
comment|'# handles help as well'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'argv'
op|')'
op|'<='
number|'1'
op|':'
newline|'\n'
indent|'    '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'__doc__'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"flags:"'
newline|'\n'
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
name|'str'
op|'('
name|'FLAGS'
op|')'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'arg'
name|'in'
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'    '
name|'prog'
op|'='
name|'ProgramInfo'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'prog'
op|'.'
name|'Run'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'continue'
newline|'\n'
dedent|''
name|'prog'
op|'.'
name|'Parse'
op|'('
op|')'
newline|'\n'
name|'prog'
op|'.'
name|'Filter'
op|'('
op|')'
newline|'\n'
name|'doc'
op|'='
name|'GenerateMan'
op|'('
name|'prog'
op|','
name|'FLAGS'
op|'.'
name|'dest_dir'
op|')'
newline|'\n'
name|'doc'
op|'.'
name|'Output'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'  '
name|'main'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

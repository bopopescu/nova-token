begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2007, Google Inc.'
nl|'\n'
comment|'# All rights reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Redistribution and use in source and binary forms, with or without'
nl|'\n'
comment|'# modification, are permitted provided that the following conditions are'
nl|'\n'
comment|'# met:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     * Redistributions of source code must retain the above copyright'
nl|'\n'
comment|'# notice, this list of conditions and the following disclaimer.'
nl|'\n'
comment|'#     * Redistributions in binary form must reproduce the above'
nl|'\n'
comment|'# copyright notice, this list of conditions and the following disclaimer'
nl|'\n'
comment|'# in the documentation and/or other materials provided with the'
nl|'\n'
comment|'# distribution.'
nl|'\n'
comment|'#     * Neither the name of Google Inc. nor the names of its'
nl|'\n'
comment|'# contributors may be used to endorse or promote products derived from'
nl|'\n'
comment|'# this software without specific prior written permission.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS'
nl|'\n'
comment|'# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR'
nl|'\n'
comment|'# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT'
nl|'\n'
comment|'# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,'
nl|'\n'
comment|'# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT'
nl|'\n'
comment|'# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,'
nl|'\n'
comment|'# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY'
nl|'\n'
comment|'# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT'
nl|'\n'
comment|'# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE'
nl|'\n'
comment|'# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ---'
nl|'\n'
comment|'# Author: Chad Lester'
nl|'\n'
comment|'# Design and style contributions by:'
nl|'\n'
comment|'#   Amit Patel, Bogdan Cocosel, Daniel Dulitz, Eric Tiedemann,'
nl|'\n'
comment|'#   Eric Veach, Laurence Gonsalves, Matthew Springer'
nl|'\n'
comment|'# Code reorganized a bit by Craig Silverstein'
nl|'\n'
nl|'\n'
string|'"""This module is used to define and parse command line flags.\n\nThis module defines a *distributed* flag-definition policy: rather than\nan application having to define all flags in or near main(), each python\nmodule defines flags that are useful to it.  When one python module\nimports another, it gains access to the other\'s flags.  (This is\nimplemented by having all modules share a common, global registry object\ncontaining all the flag information.)\n\nFlags are defined through the use of one of the DEFINE_xxx functions.\nThe specific function used determines how the flag is parsed, checked,\nand optionally type-converted, when it\'s seen on the command line.\n\n\nIMPLEMENTATION: DEFINE_* creates a \'Flag\' object and registers it with a\n\'FlagValues\' object (typically the global FlagValues FLAGS, defined\nhere).  The \'FlagValues\' object can scan the command line arguments and\npass flag arguments to the corresponding \'Flag\' objects for\nvalue-checking and type conversion.  The converted flag values are\navailable as attributes of the \'FlagValues\' object.\n\nCode can access the flag through a FlagValues object, for instance\ngflags.FLAGS.myflag.  Typically, the __main__ module passes the\ncommand line arguments to gflags.FLAGS for parsing.\n\nAt bottom, this module calls getopt(), so getopt functionality is\nsupported, including short- and long-style flags, and the use of -- to\nterminate flags.\n\nMethods defined by the flag module will throw \'FlagsError\' exceptions.\nThe exception argument will be a human-readable string.\n\n\nFLAG TYPES: This is a list of the DEFINE_*\'s that you can do.  All flags\ntake a name, default value, help-string, and optional \'short\' name\n(one-letter name).  Some flags have other arguments, which are described\nwith the flag.\n\nDEFINE_string: takes any input, and interprets it as a string.\n\nDEFINE_bool or\nDEFINE_boolean: typically does not take an argument: say --myflag to\n                set FLAGS.myflag to true, or --nomyflag to set\n                FLAGS.myflag to false.  Alternately, you can say\n                   --myflag=true  or --myflag=t or --myflag=1  or\n                   --myflag=false or --myflag=f or --myflag=0\n\nDEFINE_float: takes an input and interprets it as a floating point\n              number.  Takes optional args lower_bound and upper_bound;\n              if the number specified on the command line is out of\n              range, it will raise a FlagError.\n\nDEFINE_integer: takes an input and interprets it as an integer.  Takes\n                optional args lower_bound and upper_bound as for floats.\n\nDEFINE_enum: takes a list of strings which represents legal values.  If\n             the command-line value is not in this list, raise a flag\n             error.  Otherwise, assign to FLAGS.flag as a string.\n\nDEFINE_list: Takes a comma-separated list of strings on the commandline.\n             Stores them in a python list object.\n\nDEFINE_spaceseplist: Takes a space-separated list of strings on the\n                     commandline.  Stores them in a python list object.\n                     Example: --myspacesepflag "foo bar baz"\n\nDEFINE_multistring: The same as DEFINE_string, except the flag can be\n                    specified more than once on the commandline.  The\n                    result is a python list object (list of strings),\n                    even if the flag is only on the command line once.\n\nDEFINE_multi_int: The same as DEFINE_integer, except the flag can be\n                  specified more than once on the commandline.  The\n                  result is a python list object (list of ints), even if\n                  the flag is only on the command line once.\n\n\nSPECIAL FLAGS: There are a few flags that have special meaning:\n   --help          prints a list of all the flags in a human-readable fashion\n   --helpshort     prints a list of all key flags (see below).\n   --helpxml       prints a list of all flags, in XML format.  DO NOT parse\n                   the output of --help and --helpshort.  Instead, parse\n                   the output of --helpxml.  As we add new flags, we may\n                   add new XML elements.  Hence, make sure your parser\n                   does not crash when it encounters new XML elements.\n   --flagfile=foo  read flags from foo.\n   --undefok=f1,f2 ignore unrecognized option errors for f1,f2.\n                   For boolean flags, you should use --undefok=boolflag, and\n                   --boolflag and --noboolflag will be accepted.  Do not use\n                   --undefok=noboolflag.\n   --              as in getopt(), terminates flag-processing\n\n\nNOTE ON --flagfile:\n\nFlags may be loaded from text files in addition to being specified on\nthe commandline.\n\nAny flags you don\'t feel like typing, throw them in a file, one flag per\nline, for instance:\n   --myflag=myvalue\n   --nomyboolean_flag\nYou then specify your file with the special flag \'--flagfile=somefile\'.\nYou CAN recursively nest flagfile= tokens OR use multiple files on the\ncommand line.  Lines beginning with a single hash \'#\' or a double slash\n\'//\' are comments in your flagfile.\n\nAny flagfile=<file> will be interpreted as having a relative path from\nthe current working directory rather than from the place the file was\nincluded from:\n   myPythonScript.py --flagfile=config/somefile.cfg\n\nIf somefile.cfg includes further --flagfile= directives, these will be\nreferenced relative to the original CWD, not from the directory the\nincluding flagfile was found in!\n\nThe caveat applies to people who are including a series of nested files\nin a different dir than they are executing out of.  Relative path names\nare always from CWD, not from the directory of the parent include\nflagfile. We do now support \'~\' expanded directory names.\n\nAbsolute path names ALWAYS work!\n\n\nEXAMPLE USAGE:\n\n  import gflags\n  FLAGS = gflags.FLAGS\n\n  # Flag names are globally defined!  So in general, we need to be\n  # careful to pick names that are unlikely to be used by other libraries.\n  # If there is a conflict, we\'ll get an error at import time.\n  gflags.DEFINE_string(\'name\', \'Mr. President\', \'your name\')\n  gflags.DEFINE_integer(\'age\', None, \'your age in years\', lower_bound=0)\n  gflags.DEFINE_boolean(\'debug\', False, \'produces debugging output\')\n  gflags.DEFINE_enum(\'gender\', \'male\', [\'male\', \'female\'], \'your gender\')\n\n  def main(argv):\n    try:\n      argv = FLAGS(argv)  # parse flags\n    except gflags.FlagsError, e:\n      print \'%s\\\\nUsage: %s ARGS\\\\n%s\' % (e, sys.argv[0], FLAGS)\n      sys.exit(1)\n    if FLAGS.debug: print \'non-flag arguments:\', argv\n    print \'Happy Birthday\', FLAGS.name\n    if FLAGS.age is not None:\n      print \'You are a %s, who is %d years old\' % (FLAGS.gender, FLAGS.age)\n\n  if __name__ == \'__main__\':\n    main(sys.argv)\n\n\nKEY FLAGS:\n\nAs we already explained, each module gains access to all flags defined\nby all the other modules it transitively imports.  In the case of\nnon-trivial scripts, this means a lot of flags ...  For documentation\npurposes, it is good to identify the flags that are key (i.e., really\nimportant) to a module.  Clearly, the concept of "key flag" is a\nsubjective one.  When trying to determine whether a flag is key to a\nmodule or not, assume that you are trying to explain your module to a\npotential user: which flags would you really like to mention first?\n\nWe\'ll describe shortly how to declare which flags are key to a module.\nFor the moment, assume we know the set of key flags for each module.\nThen, if you use the app.py module, you can use the --helpshort flag to\nprint only the help for the flags that are key to the main module, in a\nhuman-readable format.\n\nNOTE: If you need to parse the flag help, do NOT use the output of\n--help / --helpshort.  That output is meant for human consumption, and\nmay be changed in the future.  Instead, use --helpxml; flags that are\nkey for the main module are marked there with a <key>yes</key> element.\n\nThe set of key flags for a module M is composed of:\n\n1. Flags defined by module M by calling a DEFINE_* function.\n\n2. Flags that module M explictly declares as key by using the function\n\n     DECLARE_key_flag(<flag_name>)\n\n3. Key flags of other modules that M specifies by using the function\n\n     ADOPT_module_key_flags(<other_module>)\n\n   This is a "bulk" declaration of key flags: each flag that is key for\n   <other_module> becomes key for the current module too.\n\nNotice that if you do not use the functions described at points 2 and 3\nabove, then --helpshort prints information only about the flags defined\nby the main module of our script.  In many cases, this behavior is good\nenough.  But if you move part of the main module code (together with the\nrelated flags) into a different module, then it is nice to use\nDECLARE_key_flag / ADOPT_module_key_flags and make sure --helpshort\nlists all relevant flags (otherwise, your code refactoring may confuse\nyour users).\n\nNote: each of DECLARE_key_flag / ADOPT_module_key_flags has its own\npluses and minuses: DECLARE_key_flag is more targeted and may lead a\nmore focused --helpshort documentation.  ADOPT_module_key_flags is good\nfor cases when an entire module is considered key to the current script.\nAlso, it does not require updates to client scripts when a new flag is\nadded to the module.\n\n\nEXAMPLE USAGE 2 (WITH KEY FLAGS):\n\nConsider an application that contains the following three files (two\nauxiliary modules and a main module):\n\nFile libfoo.py:\n\n  import gflags\n\n  gflags.DEFINE_integer(\'num_replicas\', 3, \'Number of replicas to start\')\n  gflags.DEFINE_boolean(\'rpc2\', True, \'Turn on the usage of RPC2.\')\n\n  ... some code ...\n\nFile libbar.py:\n\n  import gflags\n\n  gflags.DEFINE_string(\'bar_gfs_path\', \'/gfs/path\',\n                       \'Path to the GFS files for libbar.\')\n  gflags.DEFINE_string(\'email_for_bar_errors\', \'bar-team@google.com\',\n                       \'Email address for bug reports about module libbar.\')\n  gflags.DEFINE_boolean(\'bar_risky_hack\', False,\n                        \'Turn on an experimental and buggy optimization.\')\n\n  ... some code ...\n\nFile myscript.py:\n\n  import gflags\n  import libfoo\n  import libbar\n\n  gflags.DEFINE_integer(\'num_iterations\', 0, \'Number of iterations.\')\n\n  # Declare that all flags that are key for libfoo are\n  # key for this module too.\n  gflags.ADOPT_module_key_flags(libfoo)\n\n  # Declare that the flag --bar_gfs_path (defined in libbar) is key\n  # for this module.\n  gflags.DECLARE_key_flag(\'bar_gfs_path\')\n\n  ... some code ...\n\nWhen myscript is invoked with the flag --helpshort, the resulted help\nmessage lists information about all the key flags for myscript:\n--num_iterations, --num_replicas, --rpc2, and --bar_gfs_path (in\naddition to the special flags --help and --helpshort).\n\nOf course, myscript uses all the flags declared by it (in this case,\njust --num_replicas) or by any of the modules it transitively imports\n(e.g., the modules libfoo, libbar).  E.g., it can access the value of\nFLAGS.bar_risky_hack, even if --bar_risky_hack is not declared as a key\nflag for myscript.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'cgi'
newline|'\n'
name|'import'
name|'getopt'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
comment|'# Are we running at least python 2.2?                                           '
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'  '
name|'if'
name|'tuple'
op|'('
name|'sys'
op|'.'
name|'version_info'
op|'['
op|':'
number|'3'
op|']'
op|')'
op|'<'
op|'('
number|'2'
op|','
number|'2'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"requires python 2.2.0 or later"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'AttributeError'
op|':'
comment|'# a very old python, that lacks sys.version_info       '
newline|'\n'
indent|'  '
name|'raise'
name|'NotImplementedError'
op|'('
string|'"requires python 2.2.0 or later"'
op|')'
newline|'\n'
nl|'\n'
comment|"# If we're not running at least python 2.2.1, define True, False, and bool.     "
nl|'\n'
comment|'# Thanks, Guido, for the code.                                                  '
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'  '
name|'True'
op|','
name|'False'
op|','
name|'bool'
newline|'\n'
dedent|''
name|'except'
name|'NameError'
op|':'
newline|'\n'
DECL|variable|False
indent|'  '
name|'False'
op|'='
number|'0'
newline|'\n'
DECL|variable|True
name|'True'
op|'='
number|'1'
newline|'\n'
DECL|function|bool
name|'def'
name|'bool'
op|'('
name|'x'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'x'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Are we running under pychecker?'
nl|'\n'
DECL|variable|_RUNNING_PYCHECKER
dedent|''
dedent|''
dedent|''
name|'_RUNNING_PYCHECKER'
op|'='
string|"'pychecker.python'"
name|'in'
name|'sys'
op|'.'
name|'modules'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_GetCallingModule
name|'def'
name|'_GetCallingModule'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns the name of the module that\'s calling into this module.\n\n  We generally use this function to get the name of the module calling a\n  DEFINE_foo... function.\n  """'
newline|'\n'
comment|"# Walk down the stack to find the first globals dict that's not ours."
nl|'\n'
name|'for'
name|'depth'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'sys'
op|'.'
name|'getrecursionlimit'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'sys'
op|'.'
name|'_getframe'
op|'('
name|'depth'
op|')'
op|'.'
name|'f_globals'
name|'is'
name|'globals'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'module_name'
op|'='
name|'__GetModuleName'
op|'('
name|'sys'
op|'.'
name|'_getframe'
op|'('
name|'depth'
op|')'
op|'.'
name|'f_globals'
op|')'
newline|'\n'
name|'if'
name|'module_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'module_name'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'raise'
name|'AssertionError'
op|'('
string|'"No module was found"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# module exceptions:'
nl|'\n'
DECL|class|FlagsError
dedent|''
name|'class'
name|'FlagsError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""The base class for all flags errors."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DuplicateFlag
dedent|''
name|'class'
name|'DuplicateFlag'
op|'('
name|'FlagsError'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Raised if there is a flag naming conflict."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# A DuplicateFlagError conveys more information than a'
nl|'\n'
comment|'# DuplicateFlag. Since there are external modules that create'
nl|'\n'
comment|"# DuplicateFlags, the interface to DuplicateFlag shouldn't change."
nl|'\n'
DECL|class|DuplicateFlagError
dedent|''
name|'class'
name|'DuplicateFlagError'
op|'('
name|'DuplicateFlag'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'flagname'
op|','
name|'flag_values'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'flagname'
op|'='
name|'flagname'
newline|'\n'
name|'message'
op|'='
string|'"The flag \'%s\' is defined twice."'
op|'%'
name|'self'
op|'.'
name|'flagname'
newline|'\n'
name|'flags_by_module'
op|'='
name|'flag_values'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'module'
name|'in'
name|'flags_by_module'
op|':'
newline|'\n'
indent|'      '
name|'for'
name|'flag'
name|'in'
name|'flags_by_module'
op|'['
name|'module'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'flag'
op|'.'
name|'name'
op|'=='
name|'flagname'
name|'or'
name|'flag'
op|'.'
name|'short_name'
op|'=='
name|'flagname'
op|':'
newline|'\n'
indent|'          '
name|'message'
op|'='
name|'message'
op|'+'
string|'" First from "'
op|'+'
name|'module'
op|'+'
string|'","'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'message'
op|'='
name|'message'
op|'+'
string|'" Second from "'
op|'+'
name|'_GetCallingModule'
op|'('
op|')'
newline|'\n'
name|'DuplicateFlag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IllegalFlagValue
dedent|''
dedent|''
name|'class'
name|'IllegalFlagValue'
op|'('
name|'FlagsError'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""The flag command line argument is illegal."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnrecognizedFlag
dedent|''
name|'class'
name|'UnrecognizedFlag'
op|'('
name|'FlagsError'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Raised if a flag is unrecognized."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# An UnrecognizedFlagError conveys more information than an'
nl|'\n'
comment|'# UnrecognizedFlag. Since there are external modules that create'
nl|'\n'
comment|"# DuplicateFlags, the interface to DuplicateFlag shouldn't change."
nl|'\n'
DECL|class|UnrecognizedFlagError
dedent|''
name|'class'
name|'UnrecognizedFlagError'
op|'('
name|'UnrecognizedFlag'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'flagname'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'flagname'
op|'='
name|'flagname'
newline|'\n'
name|'UnrecognizedFlag'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'self'
op|','
string|'"Unknown command line flag \'%s\'"'
op|'%'
name|'flagname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Global variable used by expvar'
nl|'\n'
DECL|variable|_exported_flags
dedent|''
dedent|''
name|'_exported_flags'
op|'='
op|'{'
op|'}'
newline|'\n'
DECL|variable|_help_width
name|'_help_width'
op|'='
number|'80'
comment|'# width of help output'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|GetHelpWidth
name|'def'
name|'GetHelpWidth'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns: an integer, the width of help lines that is used in TextWrap."""'
newline|'\n'
name|'return'
name|'_help_width'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|CutCommonSpacePrefix
dedent|''
name|'def'
name|'CutCommonSpacePrefix'
op|'('
name|'text'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Removes a common space prefix from the lines of a multiline text.\n\n  If the first line does not start with a space, it is left as it is and\n  only in the remaining lines a common space prefix is being searched\n  for. That means the first line will stay untouched. This is especially\n  useful to turn doc strings into help texts. This is because some\n  people prefer to have the doc comment start already after the\n  apostrophy and then align the following lines while others have the\n  apostrophies on a seperately line.\n\n  The function also drops trailing empty lines and ignores empty lines\n  following the initial content line while calculating the initial\n  common whitespace.\n\n  Args:\n    text: text to work on\n\n  Returns:\n    the resulting text\n  """'
newline|'\n'
name|'text_lines'
op|'='
name|'text'
op|'.'
name|'splitlines'
op|'('
op|')'
newline|'\n'
comment|'# Drop trailing empty lines'
nl|'\n'
name|'while'
name|'text_lines'
name|'and'
name|'not'
name|'text_lines'
op|'['
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'    '
name|'text_lines'
op|'='
name|'text_lines'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'text_lines'
op|':'
newline|'\n'
comment|'# We got some content, is the first line starting with a space?'
nl|'\n'
indent|'    '
name|'if'
name|'text_lines'
op|'['
number|'0'
op|']'
name|'and'
name|'text_lines'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'text_first_line'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'text_first_line'
op|'='
op|'['
name|'text_lines'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
op|']'
newline|'\n'
comment|'# Calculate length of common leading whitesppace (only over content lines)'
nl|'\n'
dedent|''
name|'common_prefix'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'commonprefix'
op|'('
op|'['
name|'line'
name|'for'
name|'line'
name|'in'
name|'text_lines'
name|'if'
name|'line'
op|']'
op|')'
newline|'\n'
name|'space_prefix_len'
op|'='
name|'len'
op|'('
name|'common_prefix'
op|')'
op|'-'
name|'len'
op|'('
name|'common_prefix'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# If we have a common space prefix, drop it from all lines'
nl|'\n'
name|'if'
name|'space_prefix_len'
op|':'
newline|'\n'
indent|'      '
name|'for'
name|'index'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'text_lines'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'text_lines'
op|'['
name|'index'
op|']'
op|':'
newline|'\n'
indent|'          '
name|'text_lines'
op|'['
name|'index'
op|']'
op|'='
name|'text_lines'
op|'['
name|'index'
op|']'
op|'['
name|'space_prefix_len'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'text_first_line'
op|'+'
name|'text_lines'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|TextWrap
dedent|''
name|'def'
name|'TextWrap'
op|'('
name|'text'
op|','
name|'length'
op|'='
name|'None'
op|','
name|'indent'
op|'='
string|"''"
op|','
name|'firstline_indent'
op|'='
name|'None'
op|','
name|'tabs'
op|'='
string|"'    '"
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Wraps a given text to a maximum line length and returns it.\n\n  We turn lines that only contain whitespaces into empty lines.  We keep\n  new lines and tabs (e.g., we do not treat tabs as spaces).\n\n  Args:\n    text:             text to wrap\n    length:           maximum length of a line, includes indentation\n                      if this is None then use GetHelpWidth()\n    indent:           indent for all but first line\n    firstline_indent: indent for first line; if None, fall back to indent\n    tabs:             replacement for tabs\n\n  Returns:\n    wrapped text\n\n  Raises:\n    FlagsError: if indent not shorter than length\n    FlagsError: if firstline_indent not shorter than length\n  """'
newline|'\n'
comment|'# Get defaults where callee used None'
nl|'\n'
name|'if'
name|'length'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'length'
op|'='
name|'GetHelpWidth'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'indent'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'indent'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'indent'
op|')'
op|'>='
name|'length'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'FlagsError'
op|'('
string|"'Indent must be shorter than length'"
op|')'
newline|'\n'
comment|'# In line we will be holding the current line which is to be started'
nl|'\n'
comment|'# with indent (or firstline_indent if available) and then appended'
nl|'\n'
comment|'# with words.'
nl|'\n'
dedent|''
name|'if'
name|'firstline_indent'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'    '
name|'firstline_indent'
op|'='
string|"''"
newline|'\n'
name|'line'
op|'='
name|'indent'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'line'
op|'='
name|'firstline_indent'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'firstline_indent'
op|')'
op|'>='
name|'length'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'FlagsError'
op|'('
string|"'First iline indent must be shorter than length'"
op|')'
newline|'\n'
nl|'\n'
comment|'# If the callee does not care about tabs we simply convert them to'
nl|'\n'
comment|'# spaces If callee wanted tabs to be single space then we do that'
nl|'\n'
comment|'# already here.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'tabs'
name|'or'
name|'tabs'
op|'=='
string|"' '"
op|':'
newline|'\n'
indent|'    '
name|'text'
op|'='
name|'text'
op|'.'
name|'replace'
op|'('
string|"'\\t'"
op|','
string|"' '"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'tabs_are_whitespace'
op|'='
name|'not'
name|'tabs'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'line_regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'([ ]*)(\\t*)([^ \\t]+)'"
op|','
name|'re'
op|'.'
name|'MULTILINE'
op|')'
newline|'\n'
nl|'\n'
comment|'# Split the text into lines and the lines with the regex above. The'
nl|'\n'
comment|'# resulting lines are collected in result[]. For each split we get the'
nl|'\n'
comment|'# spaces, the tabs and the next non white space (e.g. next word).'
nl|'\n'
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'text_line'
name|'in'
name|'text'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Store result length so we can find out whether processing the next'
nl|'\n'
comment|'# line gave any new content'
nl|'\n'
indent|'    '
name|'old_result_len'
op|'='
name|'len'
op|'('
name|'result'
op|')'
newline|'\n'
comment|'# Process next line with line_regex. For optimization we do an rstrip().'
nl|'\n'
comment|'# - process tabs (changes either line or word, see below)'
nl|'\n'
comment|'# - process word (first try to squeeze on line, then wrap or force wrap)'
nl|'\n'
comment|'# Spaces found on the line are ignored, they get added while wrapping as'
nl|'\n'
comment|'# needed.'
nl|'\n'
name|'for'
name|'spaces'
op|','
name|'current_tabs'
op|','
name|'word'
name|'in'
name|'line_regex'
op|'.'
name|'findall'
op|'('
name|'text_line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
comment|"# If tabs weren't converted to spaces, handle them now"
nl|'\n'
indent|'      '
name|'if'
name|'current_tabs'
op|':'
newline|'\n'
comment|'# If the last thing we added was a space anyway then drop'
nl|'\n'
comment|"# it. But let's not get rid of the indentation."
nl|'\n'
indent|'        '
name|'if'
op|'('
op|'('
op|'('
name|'result'
name|'and'
name|'line'
op|'!='
name|'indent'
op|')'
name|'or'
nl|'\n'
op|'('
name|'not'
name|'result'
name|'and'
name|'line'
op|'!='
name|'firstline_indent'
op|')'
op|')'
name|'and'
name|'line'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"' '"
op|')'
op|':'
newline|'\n'
indent|'          '
name|'line'
op|'='
name|'line'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
comment|'# Add the tabs, if that means adding whitespace, just add it at'
nl|'\n'
comment|'# the line, the rstrip() code while shorten the line down if'
nl|'\n'
comment|'# necessary'
nl|'\n'
dedent|''
name|'if'
name|'tabs_are_whitespace'
op|':'
newline|'\n'
indent|'          '
name|'line'
op|'+='
name|'tabs'
op|'*'
name|'len'
op|'('
name|'current_tabs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# if not all tab replacement is whitespace we prepend it to the word'
nl|'\n'
indent|'          '
name|'word'
op|'='
name|'tabs'
op|'*'
name|'len'
op|'('
name|'current_tabs'
op|')'
op|'+'
name|'word'
newline|'\n'
comment|'# Handle the case where word cannot be squeezed onto current last line'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'+'
name|'len'
op|'('
name|'word'
op|')'
op|'>'
name|'length'
name|'and'
name|'len'
op|'('
name|'indent'
op|')'
op|'+'
name|'len'
op|'('
name|'word'
op|')'
op|'<='
name|'length'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'append'
op|'('
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'indent'
op|'+'
name|'word'
newline|'\n'
name|'word'
op|'='
string|"''"
newline|'\n'
comment|'# No space left on line or can we append a space?'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'line'
op|')'
op|'+'
number|'1'
op|'>='
name|'length'
op|':'
newline|'\n'
indent|'          '
name|'result'
op|'.'
name|'append'
op|'('
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
name|'line'
op|'='
name|'indent'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'          '
name|'line'
op|'+='
string|"' '"
newline|'\n'
comment|'# Add word and shorten it up to allowed line length. Restart next'
nl|'\n'
comment|"# line with indent and repeat, or add a space if we're done (word"
nl|'\n'
comment|'# finished) This deals with words that caanot fit on one line'
nl|'\n'
comment|'# (e.g. indent + word longer than allowed line length).'
nl|'\n'
dedent|''
dedent|''
name|'while'
name|'len'
op|'('
name|'line'
op|')'
op|'+'
name|'len'
op|'('
name|'word'
op|')'
op|'>='
name|'length'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'+='
name|'word'
newline|'\n'
name|'result'
op|'.'
name|'append'
op|'('
name|'line'
op|'['
op|':'
name|'length'
op|']'
op|')'
newline|'\n'
name|'word'
op|'='
name|'line'
op|'['
name|'length'
op|':'
op|']'
newline|'\n'
name|'line'
op|'='
name|'indent'
newline|'\n'
comment|'# Default case, simply append the word and a space'
nl|'\n'
dedent|''
name|'if'
name|'word'
op|':'
newline|'\n'
indent|'        '
name|'line'
op|'+='
name|'word'
op|'+'
string|"' '"
newline|'\n'
comment|'# End of input line. If we have content we finish the line. If the'
nl|'\n'
comment|'# current line is just the indent but we had content in during this'
nl|'\n'
comment|'# original line then we need to add an emoty line.'
nl|'\n'
dedent|''
dedent|''
name|'if'
op|'('
name|'result'
name|'and'
name|'line'
op|'!='
name|'indent'
op|')'
name|'or'
op|'('
name|'not'
name|'result'
name|'and'
name|'line'
op|'!='
name|'firstline_indent'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'result'
op|'.'
name|'append'
op|'('
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'len'
op|'('
name|'result'
op|')'
op|'=='
name|'old_result_len'
op|':'
newline|'\n'
indent|'      '
name|'result'
op|'.'
name|'append'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'line'
op|'='
name|'indent'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DocToHelp
dedent|''
name|'def'
name|'DocToHelp'
op|'('
name|'doc'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Takes a __doc__ string and reformats it as help."""'
newline|'\n'
nl|'\n'
comment|'# Get rid of starting and ending white space. Using lstrip() or even'
nl|'\n'
comment|'# strip() could drop more than maximum of first line and right space'
nl|'\n'
comment|'# of last line.'
nl|'\n'
name|'doc'
op|'='
name|'doc'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Get rid of all empty lines'
nl|'\n'
name|'whitespace_only_line'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'^[ \\t]+$'"
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
name|'doc'
op|'='
name|'whitespace_only_line'
op|'.'
name|'sub'
op|'('
string|"''"
op|','
name|'doc'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cut out common space at line beginnings'
nl|'\n'
name|'doc'
op|'='
name|'CutCommonSpacePrefix'
op|'('
name|'doc'
op|')'
newline|'\n'
nl|'\n'
comment|"# Just like this module's comment, comments tend to be aligned somehow."
nl|'\n'
comment|'# In other words they all start with the same amount of white space'
nl|'\n'
comment|'# 1) keep double new lines'
nl|'\n'
comment|'# 2) keep ws after new lines if not empty line'
nl|'\n'
comment|'# 3) all other new lines shall be changed to a space'
nl|'\n'
comment|'# Solution: Match new lines between non white space and replace with space.'
nl|'\n'
name|'doc'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'(?<=\\S)\\n(?=\\S)'"
op|','
string|"' '"
op|','
name|'doc'
op|','
name|'re'
op|'.'
name|'M'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'doc'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|__GetModuleName
dedent|''
name|'def'
name|'__GetModuleName'
op|'('
name|'globals_dict'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Given a globals dict, returns the name of the module that defines it.\n\n  Args:\n    globals_dict: A dictionary that should correspond to an environment\n      providing the values of the globals.\n\n  Returns:\n    A string (the name of the module) or None (if the module could not\n    be identified.\n  """'
newline|'\n'
name|'for'
name|'name'
op|','
name|'module'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'getattr'
op|'('
name|'module'
op|','
string|"'__dict__'"
op|','
name|'None'
op|')'
name|'is'
name|'globals_dict'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'name'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'name'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_GetMainModule
dedent|''
name|'def'
name|'_GetMainModule'
op|'('
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Returns the name of the module from which execution started."""'
newline|'\n'
name|'for'
name|'depth'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'sys'
op|'.'
name|'getrecursionlimit'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'globals_of_main'
op|'='
name|'sys'
op|'.'
name|'_getframe'
op|'('
name|'depth'
op|')'
op|'.'
name|'f_globals'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'__GetModuleName'
op|'('
name|'globals_of_main'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'AssertionError'
op|'('
string|'"No module was found"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlagValues
dedent|''
name|'class'
name|'FlagValues'
op|':'
newline|'\n'
indent|'  '
string|'"""Registry of \'Flag\' objects.\n\n  A \'FlagValues\' can then scan command line arguments, passing flag\n  arguments through to the \'Flag\' objects that it owns.  It also\n  provides easy access to the flag values.  Typically only one\n  \'FlagValues\' object is needed by an application: gflags.FLAGS\n\n  This class is heavily overloaded:\n\n  \'Flag\' objects are registered via __setitem__:\n       FLAGS[\'longname\'] = x   # register a new flag\n\n  The .value attribute of the registered \'Flag\' objects can be accessed\n  as attributes of this \'FlagValues\' object, through __getattr__.  Both\n  the long and short name of the original \'Flag\' objects can be used to\n  access its value:\n       FLAGS.longname          # parsed flag value\n       FLAGS.x                 # parsed flag value (short name)\n\n  Command line arguments are scanned and passed to the registered \'Flag\'\n  objects through the __call__ method.  Unparsed arguments, including\n  argv[0] (e.g. the program name) are returned.\n       argv = FLAGS(sys.argv)  # scan command line arguments\n\n  The original registered Flag objects can be retrieved through the use\n  of the dictionary-like operator, __getitem__:\n       x = FLAGS[\'longname\']   # access the registered Flag object\n\n  The str() operator of a \'FlagValues\' object provides help for all of\n  the registered \'Flag\' objects.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Since everything in this class is so heavily overloaded, the only'
nl|'\n'
comment|'# way of defining and using fields is to access __dict__ directly.'
nl|'\n'
nl|'\n'
comment|'# Dictionary: flag name (string) -> Flag object.'
nl|'\n'
indent|'    '
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__flags'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dictionary: module name (string) -> list of Flag objects that are defined'
nl|'\n'
comment|'# by that module.'
nl|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__flags_by_module'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dictionary: module name (string) -> list of Flag objects that are'
nl|'\n'
comment|'# key for that module.'
nl|'\n'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__key_flags_by_module'"
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Set if we should use new style gnu_getopt rather than getopt when parsing'
nl|'\n'
comment|'# the args.  Only possible with Python 2.3+'
nl|'\n'
name|'self'
op|'.'
name|'UseGnuGetOpt'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|UseGnuGetOpt
dedent|''
name|'def'
name|'UseGnuGetOpt'
op|'('
name|'self'
op|','
name|'use_gnu_getopt'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__use_gnu_getopt'"
op|']'
op|'='
name|'use_gnu_getopt'
newline|'\n'
nl|'\n'
DECL|member|IsGnuGetOpt
dedent|''
name|'def'
name|'IsGnuGetOpt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__use_gnu_getopt'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|FlagDict
dedent|''
name|'def'
name|'FlagDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__flags'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|FlagsByModuleDict
dedent|''
name|'def'
name|'FlagsByModuleDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the dictionary of module_name -> list of defined flags.\n\n    Returns:\n      A dictionary.  Its keys are module names (strings).  Its values\n      are lists of Flag objects.\n    """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__flags_by_module'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|KeyFlagsByModuleDict
dedent|''
name|'def'
name|'KeyFlagsByModuleDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the dictionary of module_name -> list of key flags.\n\n    Returns:\n      A dictionary.  Its keys are module names (strings).  Its values\n      are lists of Flag objects.\n    """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__key_flags_by_module'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_RegisterFlagByModule
dedent|''
name|'def'
name|'_RegisterFlagByModule'
op|'('
name|'self'
op|','
name|'module_name'
op|','
name|'flag'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Records the module that defines a specific flag.\n\n    We keep track of which flag is defined by which module so that we\n    can later sort the flags by module.\n\n    Args:\n      module_name: A string, the name of a Python module.\n      flag: A Flag object, a flag that is key to the module.\n    """'
newline|'\n'
name|'flags_by_module'
op|'='
name|'self'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
newline|'\n'
name|'flags_by_module'
op|'.'
name|'setdefault'
op|'('
name|'module_name'
op|','
op|'['
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_RegisterKeyFlagForModule
dedent|''
name|'def'
name|'_RegisterKeyFlagForModule'
op|'('
name|'self'
op|','
name|'module_name'
op|','
name|'flag'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specifies that a flag is a key flag for a module.\n\n    Args:\n      module_name: A string, the name of a Python module.\n      flag: A Flag object, a flag that is key to the module.\n    """'
newline|'\n'
name|'key_flags_by_module'
op|'='
name|'self'
op|'.'
name|'KeyFlagsByModuleDict'
op|'('
op|')'
newline|'\n'
comment|'# The list of key flags for the module named module_name.'
nl|'\n'
name|'key_flags'
op|'='
name|'key_flags_by_module'
op|'.'
name|'setdefault'
op|'('
name|'module_name'
op|','
op|'['
op|']'
op|')'
newline|'\n'
comment|'# Add flag, but avoid duplicates.'
nl|'\n'
name|'if'
name|'flag'
name|'not'
name|'in'
name|'key_flags'
op|':'
newline|'\n'
indent|'      '
name|'key_flags'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_GetFlagsDefinedByModule
dedent|''
dedent|''
name|'def'
name|'_GetFlagsDefinedByModule'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the list of flags defined by a module.\n\n    Args:\n      module: A module object or a module name (a string).\n\n    Returns:\n      A new list of Flag objects.  Caller may update this list as he\n      wishes: none of those changes will affect the internals of this\n      FlagValue object.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'module'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'list'
op|'('
name|'self'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
op|'.'
name|'get'
op|'('
name|'module'
op|','
op|'['
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_GetKeyFlagsForModule
dedent|''
name|'def'
name|'_GetKeyFlagsForModule'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the list of key flags for a module.\n\n    Args:\n      module: A module object or a module name (a string)\n\n    Returns:\n      A new list of Flag objects.  Caller may update this list as he\n      wishes: none of those changes will affect the internals of this\n      FlagValue object.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'module'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
comment|'# Any flag is a key flag for the module that defined it.  NOTE:'
nl|'\n'
comment|'# key_flags is a fresh list: we can update it without affecting the'
nl|'\n'
comment|'# internals of this FlagValues object.'
nl|'\n'
dedent|''
name|'key_flags'
op|'='
name|'self'
op|'.'
name|'_GetFlagsDefinedByModule'
op|'('
name|'module'
op|')'
newline|'\n'
nl|'\n'
comment|'# Take into account flags explicitly declared as key for a module.'
nl|'\n'
name|'for'
name|'flag'
name|'in'
name|'self'
op|'.'
name|'KeyFlagsByModuleDict'
op|'('
op|')'
op|'.'
name|'get'
op|'('
name|'module'
op|','
op|'['
op|']'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'flag'
name|'not'
name|'in'
name|'key_flags'
op|':'
newline|'\n'
indent|'        '
name|'key_flags'
op|'.'
name|'append'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'key_flags'
newline|'\n'
nl|'\n'
DECL|member|AppendFlagValues
dedent|''
name|'def'
name|'AppendFlagValues'
op|'('
name|'self'
op|','
name|'flag_values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Appends flags registered in another FlagValues instance.\n\n    Args:\n      flag_values: registry to copy from\n    """'
newline|'\n'
name|'for'
name|'flag_name'
op|','
name|'flag'
name|'in'
name|'flag_values'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Each flags with shortname appears here twice (once under its'
nl|'\n'
comment|'# normal name, and again with its short name).  To prevent'
nl|'\n'
comment|'# problems (DuplicateFlagError) with double flag registration, we'
nl|'\n'
comment|"# perform a check to make sure that the entry we're looking at is"
nl|'\n'
comment|'# for its normal name.'
nl|'\n'
indent|'      '
name|'if'
name|'flag_name'
op|'=='
name|'flag'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'['
name|'flag_name'
op|']'
op|'='
name|'flag'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'flag'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Registers a new flag variable."""'
newline|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'flag'
op|','
name|'Flag'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'IllegalFlagValue'
op|'('
name|'flag'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'name'
op|','
name|'type'
op|'('
string|'""'
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'FlagsError'
op|'('
string|'"Flag name must be a string"'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'name'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'FlagsError'
op|'('
string|'"Flag name cannot be empty"'
op|')'
newline|'\n'
comment|'# If running under pychecker, duplicate keys are likely to be'
nl|'\n'
comment|"# defined.  Disable check for duplicate keys when pycheck'ing."
nl|'\n'
dedent|''
name|'if'
op|'('
name|'fl'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
name|'and'
name|'not'
name|'flag'
op|'.'
name|'allow_override'
name|'and'
nl|'\n'
name|'not'
name|'fl'
op|'['
name|'name'
op|']'
op|'.'
name|'allow_override'
name|'and'
name|'not'
name|'_RUNNING_PYCHECKER'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'DuplicateFlagError'
op|'('
name|'name'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'short_name'
op|'='
name|'flag'
op|'.'
name|'short_name'
newline|'\n'
name|'if'
name|'short_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'if'
op|'('
name|'fl'
op|'.'
name|'has_key'
op|'('
name|'short_name'
op|')'
name|'and'
name|'not'
name|'flag'
op|'.'
name|'allow_override'
name|'and'
nl|'\n'
name|'not'
name|'fl'
op|'['
name|'short_name'
op|']'
op|'.'
name|'allow_override'
name|'and'
name|'not'
name|'_RUNNING_PYCHECKER'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'DuplicateFlagError'
op|'('
name|'short_name'
op|','
name|'self'
op|')'
newline|'\n'
dedent|''
name|'fl'
op|'['
name|'short_name'
op|']'
op|'='
name|'flag'
newline|'\n'
dedent|''
name|'fl'
op|'['
name|'name'
op|']'
op|'='
name|'flag'
newline|'\n'
name|'global'
name|'_exported_flags'
newline|'\n'
name|'_exported_flags'
op|'['
name|'name'
op|']'
op|'='
name|'flag'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieves the Flag object for the flag --name."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Retrieves the \'value\' attribute of the flag --name."""'
newline|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fl'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'fl'
op|'['
name|'name'
op|']'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|__setattr__
dedent|''
name|'def'
name|'__setattr__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sets the \'value\' attribute of the flag --name."""'
newline|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'fl'
op|'['
name|'name'
op|']'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_FlagIsRegistered
dedent|''
name|'def'
name|'_FlagIsRegistered'
op|'('
name|'self'
op|','
name|'flag_obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks whether a Flag object is registered under some name.\n\n    Note: this is non trivial: in addition to its normal name, a flag\n    may have a short name too.  In self.FlagDict(), both the normal and\n    the short name are mapped to the same flag object.  E.g., calling\n    only "del FLAGS.short_name" is not unregistering the corresponding\n    Flag object (it is still registered under the longer name).\n\n    Args:\n      flag_obj: A Flag object.\n\n    Returns:\n      A boolean: True iff flag_obj is registered under some name.\n    """'
newline|'\n'
name|'flag_dict'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
comment|'# Check whether flag_obj is registered under its long name.'
nl|'\n'
name|'name'
op|'='
name|'flag_obj'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'flag_dict'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|'=='
name|'flag_obj'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'True'
newline|'\n'
comment|'# Check whether flag_obj is registered under its short name.'
nl|'\n'
dedent|''
name|'short_name'
op|'='
name|'flag_obj'
op|'.'
name|'short_name'
newline|'\n'
name|'if'
op|'('
name|'short_name'
name|'is'
name|'not'
name|'None'
name|'and'
nl|'\n'
name|'flag_dict'
op|'.'
name|'get'
op|'('
name|'short_name'
op|','
name|'None'
op|')'
op|'=='
name|'flag_obj'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'True'
newline|'\n'
comment|'# The flag cannot be registered under any other name, so we do not'
nl|'\n'
comment|'# need to do a full search through the values of self.FlagDict().'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__delattr__
dedent|''
name|'def'
name|'__delattr__'
op|'('
name|'self'
op|','
name|'flag_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Deletes a previously-defined flag from a flag object.\n\n    This method makes sure we can delete a flag by using\n\n      del flag_values_object.<flag_name>\n\n    E.g.,\n\n      flags.DEFINE_integer(\'foo\', 1, \'Integer flag.\')\n      del flags.FLAGS.foo\n\n    Args:\n      flag_name: A string, the name of the flag to be deleted.\n\n    Raises:\n      AttributeError: When there is no registered flag named flag_name.\n    """'
newline|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'flag_name'
name|'not'
name|'in'
name|'fl'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AttributeError'
op|'('
name|'flag_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'flag_obj'
op|'='
name|'fl'
op|'['
name|'flag_name'
op|']'
newline|'\n'
name|'del'
name|'fl'
op|'['
name|'flag_name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_FlagIsRegistered'
op|'('
name|'flag_obj'
op|')'
op|':'
newline|'\n'
comment|'# If the Flag object indicated by flag_name is no longer'
nl|'\n'
comment|'# registered (please see the docstring of _FlagIsRegistered), then'
nl|'\n'
comment|'# we delete the occurences of the flag object in all our internal'
nl|'\n'
comment|'# dictionaries.'
nl|'\n'
indent|'      '
name|'self'
op|'.'
name|'__RemoveFlagFromDictByModule'
op|'('
name|'self'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
op|','
name|'flag_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__RemoveFlagFromDictByModule'
op|'('
name|'self'
op|'.'
name|'KeyFlagsByModuleDict'
op|'('
op|')'
op|','
name|'flag_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__RemoveFlagFromDictByModule
dedent|''
dedent|''
name|'def'
name|'__RemoveFlagFromDictByModule'
op|'('
name|'self'
op|','
name|'flags_by_module_dict'
op|','
name|'flag_obj'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Removes a flag object from a module -> list of flags dictionary.\n\n    Args:\n      flags_by_module_dict: A dictionary that maps module names to lists of\n        flags.\n      flag_obj: A flag object.\n    """'
newline|'\n'
name|'for'
name|'unused_module'
op|','
name|'flags_in_module'
name|'in'
name|'flags_by_module_dict'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# while (as opposed to if) takes care of multiple occurences of a'
nl|'\n'
comment|'# flag in the list for the same module.'
nl|'\n'
indent|'      '
name|'while'
name|'flag_obj'
name|'in'
name|'flags_in_module'
op|':'
newline|'\n'
indent|'        '
name|'flags_in_module'
op|'.'
name|'remove'
op|'('
name|'flag_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|SetDefault
dedent|''
dedent|''
dedent|''
name|'def'
name|'SetDefault'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Changes the default value of the named flag object."""'
newline|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fl'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'AttributeError'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'fl'
op|'['
name|'name'
op|']'
op|'.'
name|'SetDefault'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__contains__
dedent|''
name|'def'
name|'__contains__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns True if name is a value (flag) in the dict."""'
newline|'\n'
name|'return'
name|'name'
name|'in'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|has_key
dedent|''
name|'has_key'
op|'='
name|'__contains__'
comment|'# a synonym for __contains__()'
newline|'\n'
nl|'\n'
DECL|member|__iter__
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'iterkeys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'argv'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parses flags from argv; stores parsed flags into this FlagValues object.\n\n    All unparsed arguments are returned.  Flags are parsed using the GNU\n    Program Argument Syntax Conventions, using getopt:\n\n    http://www.gnu.org/software/libc/manual/html_mono/libc.html#Getopt\n\n    Args:\n       argv: argument list. Can be of any type that may be converted to a list.\n\n    Returns:\n       The list of arguments not parsed as options, including argv[0]\n\n    Raises:\n       FlagsError: on any parsing error\n    """'
newline|'\n'
comment|'# Support any sequence type that can be converted to a list'
nl|'\n'
name|'argv'
op|'='
name|'list'
op|'('
name|'argv'
op|')'
newline|'\n'
nl|'\n'
name|'shortopts'
op|'='
string|'""'
newline|'\n'
name|'longopts'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# This pre parses the argv list for --flagfile=<> options.'
nl|'\n'
name|'argv'
op|'='
name|'argv'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'self'
op|'.'
name|'ReadFlagsFromFiles'
op|'('
name|'argv'
op|'['
number|'1'
op|':'
op|']'
op|','
name|'force_gnu'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Correct the argv to support the google style of passing boolean'
nl|'\n'
comment|'# parameters.  Boolean parameters may be passed by using --mybool,'
nl|'\n'
comment|'# --nomybool, --mybool=(true|false|1|0).  getopt does not support'
nl|'\n'
comment|'# having options that may or may not have a parameter.  We replace'
nl|'\n'
comment|'# instances of the short form --mybool and --nomybool with their'
nl|'\n'
comment|'# full forms: --mybool=(true|false).'
nl|'\n'
name|'original_argv'
op|'='
name|'list'
op|'('
name|'argv'
op|')'
comment|'# list() makes a copy'
newline|'\n'
name|'shortest_matches'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'name'
op|','
name|'flag'
name|'in'
name|'fl'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'not'
name|'flag'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'        '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'shortest_matches'
name|'is'
name|'None'
op|':'
newline|'\n'
comment|'# Determine the smallest allowable prefix for all flag names'
nl|'\n'
indent|'        '
name|'shortest_matches'
op|'='
name|'self'
op|'.'
name|'ShortestUniquePrefixes'
op|'('
name|'fl'
op|')'
newline|'\n'
dedent|''
name|'no_name'
op|'='
string|"'no'"
op|'+'
name|'name'
newline|'\n'
name|'prefix'
op|'='
name|'shortest_matches'
op|'['
name|'name'
op|']'
newline|'\n'
name|'no_prefix'
op|'='
name|'shortest_matches'
op|'['
name|'no_name'
op|']'
newline|'\n'
nl|'\n'
comment|'# Replace all occurences of this boolean with extended forms'
nl|'\n'
name|'for'
name|'arg_idx'
name|'in'
name|'range'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'argv'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'arg'
op|'='
name|'argv'
op|'['
name|'arg_idx'
op|']'
newline|'\n'
name|'if'
name|'arg'
op|'.'
name|'find'
op|'('
string|"'='"
op|')'
op|'>='
number|'0'
op|':'
name|'continue'
newline|'\n'
name|'if'
name|'arg'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|'+'
name|'prefix'
op|')'
name|'and'
op|'('
string|"'--'"
op|'+'
name|'name'
op|')'
op|'.'
name|'startswith'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'argv'
op|'['
name|'arg_idx'
op|']'
op|'='
op|'('
string|"'--%s=true'"
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'arg'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|'+'
name|'no_prefix'
op|')'
name|'and'
op|'('
string|"'--'"
op|'+'
name|'no_name'
op|')'
op|'.'
name|'startswith'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'argv'
op|'['
name|'arg_idx'
op|']'
op|'='
op|'('
string|"'--%s=false'"
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Loop over all of the flags, building up the lists of short options'
nl|'\n'
comment|'# and long options that will be passed to getopt.  Short options are'
nl|'\n'
comment|'# specified as a string of letters, each letter followed by a colon'
nl|'\n'
comment|'# if it takes an argument.  Long options are stored in an array of'
nl|'\n'
comment|"# strings.  Each string ends with an '=' if it takes an argument."
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'name'
op|','
name|'flag'
name|'in'
name|'fl'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'longopts'
op|'.'
name|'append'
op|'('
name|'name'
op|'+'
string|'"="'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'name'
op|')'
op|'=='
number|'1'
op|':'
comment|'# one-letter option: allow short flag type also'
newline|'\n'
indent|'        '
name|'shortopts'
op|'+='
name|'name'
newline|'\n'
name|'if'
name|'not'
name|'flag'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'          '
name|'shortopts'
op|'+='
string|'":"'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'longopts'
op|'.'
name|'append'
op|'('
string|"'undefok='"
op|')'
newline|'\n'
name|'undefok_flags'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# In case --undefok is specified, loop to pick up unrecognized'
nl|'\n'
comment|'# options one by one.'
nl|'\n'
name|'unrecognized_opts'
op|'='
op|'['
op|']'
newline|'\n'
name|'args'
op|'='
name|'argv'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__use_gnu_getopt'"
op|']'
op|':'
newline|'\n'
indent|'          '
name|'optlist'
op|','
name|'unparsed_args'
op|'='
name|'getopt'
op|'.'
name|'gnu_getopt'
op|'('
name|'args'
op|','
name|'shortopts'
op|','
name|'longopts'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'          '
name|'optlist'
op|','
name|'unparsed_args'
op|'='
name|'getopt'
op|'.'
name|'getopt'
op|'('
name|'args'
op|','
name|'shortopts'
op|','
name|'longopts'
op|')'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'getopt'
op|'.'
name|'GetoptError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'e'
op|'.'
name|'opt'
name|'or'
name|'e'
op|'.'
name|'opt'
name|'in'
name|'fl'
op|':'
newline|'\n'
comment|'# Not an unrecognized option, reraise the exception as a FlagsError'
nl|'\n'
indent|'          '
name|'raise'
name|'FlagsError'
op|'('
name|'e'
op|')'
newline|'\n'
comment|'# Handle an unrecognized option.'
nl|'\n'
dedent|''
name|'unrecognized_opts'
op|'.'
name|'append'
op|'('
name|'e'
op|'.'
name|'opt'
op|')'
newline|'\n'
comment|'# Remove offender from args and try again'
nl|'\n'
name|'for'
name|'arg_index'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'args'
op|')'
op|')'
op|':'
newline|'\n'
indent|'          '
name|'if'
op|'('
op|'('
name|'args'
op|'['
name|'arg_index'
op|']'
op|'=='
string|"'--'"
op|'+'
name|'e'
op|'.'
name|'opt'
op|')'
name|'or'
nl|'\n'
op|'('
name|'args'
op|'['
name|'arg_index'
op|']'
op|'=='
string|"'-'"
op|'+'
name|'e'
op|'.'
name|'opt'
op|')'
name|'or'
nl|'\n'
name|'args'
op|'['
name|'arg_index'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|'+'
name|'e'
op|'.'
name|'opt'
op|'+'
string|"'='"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'='
name|'args'
op|'['
number|'0'
op|':'
name|'arg_index'
op|']'
op|'+'
name|'args'
op|'['
name|'arg_index'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# We should have found the option, so we don't expect to get"
nl|'\n'
comment|'# here.  We could assert, but raising the original exception'
nl|'\n'
comment|'# might work better.'
nl|'\n'
indent|'          '
name|'raise'
name|'FlagsError'
op|'('
name|'e'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'name'
op|','
name|'arg'
name|'in'
name|'optlist'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'name'
op|'=='
string|"'--undefok'"
op|':'
newline|'\n'
indent|'        '
name|'flag_names'
op|'='
name|'arg'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
name|'undefok_flags'
op|'.'
name|'extend'
op|'('
name|'flag_names'
op|')'
newline|'\n'
comment|'# For boolean flags, if --undefok=boolflag is specified, then we should'
nl|'\n'
comment|'# also accept --noboolflag, in addition to --boolflag.'
nl|'\n'
comment|"# Since we don't know the type of the undefok'd flag, this will affect"
nl|'\n'
comment|'# non-boolean flags as well.'
nl|'\n'
comment|"# NOTE: You shouldn't use --undefok=noboolflag, because then we will"
nl|'\n'
comment|'# accept --nonoboolflag here.  We are choosing not to do the conversion'
nl|'\n'
comment|'# from noboolflag -> boolflag because of the ambiguity that flag names'
nl|'\n'
comment|"# can start with 'no'."
nl|'\n'
name|'undefok_flags'
op|'.'
name|'extend'
op|'('
string|"'no'"
op|'+'
name|'name'
name|'for'
name|'name'
name|'in'
name|'flag_names'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'name'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|')'
op|':'
newline|'\n'
comment|'# long option'
nl|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'['
number|'2'
op|':'
op|']'
newline|'\n'
name|'short_option'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# short option'
nl|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'short_option'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'fl'
op|'.'
name|'has_key'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flag'
op|'='
name|'fl'
op|'['
name|'name'
op|']'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'boolean'
name|'and'
name|'short_option'
op|':'
name|'arg'
op|'='
number|'1'
newline|'\n'
name|'flag'
op|'.'
name|'Parse'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
comment|'# If there were unrecognized options, raise an exception unless'
nl|'\n'
comment|'# the options were named via --undefok.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'opt'
name|'in'
name|'unrecognized_opts'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'opt'
name|'not'
name|'in'
name|'undefok_flags'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'UnrecognizedFlagError'
op|'('
name|'opt'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'unparsed_args'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__use_gnu_getopt'"
op|']'
op|':'
newline|'\n'
comment|'# if using gnu_getopt just return the program name + remainder of argv.'
nl|'\n'
indent|'        '
name|'return'
name|'argv'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'unparsed_args'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# unparsed_args becomes the first non-flag detected by getopt to'
nl|'\n'
comment|'# the end of argv.  Because argv may have been modified above,'
nl|'\n'
comment|'# return original_argv for this region.'
nl|'\n'
indent|'        '
name|'return'
name|'argv'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'original_argv'
op|'['
op|'-'
name|'len'
op|'('
name|'unparsed_args'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'argv'
op|'['
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|Reset
dedent|''
dedent|''
name|'def'
name|'Reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Resets the values to the point before FLAGS(argv) was called."""'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'f'
op|'.'
name|'Unparse'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|RegisteredFlags
dedent|''
dedent|''
name|'def'
name|'RegisteredFlags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns: a list of the names and short names of all registered flags."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|FlagValuesDict
dedent|''
name|'def'
name|'FlagValuesDict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns: a dictionary that maps flag names to flag values."""'
newline|'\n'
name|'flag_values'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'flag_name'
name|'in'
name|'self'
op|'.'
name|'RegisteredFlags'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'flag'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
name|'flag_name'
op|']'
newline|'\n'
name|'flag_values'
op|'['
name|'flag_name'
op|']'
op|'='
name|'flag'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'flag_values'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates a help string for all known flags."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'GetHelp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|GetHelp
dedent|''
name|'def'
name|'GetHelp'
op|'('
name|'self'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates a help string for all known flags."""'
newline|'\n'
name|'helplist'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'flags_by_module'
op|'='
name|'self'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
newline|'\n'
name|'if'
name|'flags_by_module'
op|':'
newline|'\n'
nl|'\n'
indent|'      '
name|'modules'
op|'='
name|'flags_by_module'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'modules'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Print the help for the main module first, if possible.'
nl|'\n'
name|'main_module'
op|'='
name|'_GetMainModule'
op|'('
op|')'
newline|'\n'
name|'if'
name|'main_module'
name|'in'
name|'modules'
op|':'
newline|'\n'
indent|'        '
name|'modules'
op|'.'
name|'remove'
op|'('
name|'main_module'
op|')'
newline|'\n'
name|'modules'
op|'='
op|'['
name|'main_module'
op|']'
op|'+'
name|'modules'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'module'
name|'in'
name|'modules'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__RenderOurModuleFlags'
op|'('
name|'module'
op|','
name|'helplist'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'__RenderModuleFlags'
op|'('
string|"'gflags'"
op|','
nl|'\n'
name|'_SPECIAL_FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|','
nl|'\n'
name|'helplist'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Just print one long list of flags.'
nl|'\n'
indent|'      '
name|'self'
op|'.'
name|'__RenderFlagList'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|'+'
name|'_SPECIAL_FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|','
nl|'\n'
name|'helplist'
op|','
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'helplist'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__RenderModuleFlags
dedent|''
name|'def'
name|'__RenderModuleFlags'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'flags'
op|','
name|'output_lines'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates a help string for a given module."""'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'module'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'module'
op|'='
name|'module'
op|'.'
name|'__name__'
newline|'\n'
dedent|''
name|'output_lines'
op|'.'
name|'append'
op|'('
string|"'\\n%s%s:'"
op|'%'
op|'('
name|'prefix'
op|','
name|'module'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'__RenderFlagList'
op|'('
name|'flags'
op|','
name|'output_lines'
op|','
name|'prefix'
op|'+'
string|'"  "'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__RenderOurModuleFlags
dedent|''
name|'def'
name|'__RenderOurModuleFlags'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'output_lines'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates a help string for a given module."""'
newline|'\n'
name|'flags'
op|'='
name|'self'
op|'.'
name|'_GetFlagsDefinedByModule'
op|'('
name|'module'
op|')'
newline|'\n'
name|'if'
name|'flags'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'__RenderModuleFlags'
op|'('
name|'module'
op|','
name|'flags'
op|','
name|'output_lines'
op|','
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__RenderOurModuleKeyFlags
dedent|''
dedent|''
name|'def'
name|'__RenderOurModuleKeyFlags'
op|'('
name|'self'
op|','
name|'module'
op|','
name|'output_lines'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generates a help string for the key flags of a given module.\n\n    Args:\n      module: A module object or a module name (a string).\n      output_lines: A list of strings.  The generated help message\n        lines will be appended to this list.\n      prefix: A string that is prepended to each generated help line.\n    """'
newline|'\n'
name|'key_flags'
op|'='
name|'self'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'module'
op|')'
newline|'\n'
name|'if'
name|'key_flags'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'__RenderModuleFlags'
op|'('
name|'module'
op|','
name|'key_flags'
op|','
name|'output_lines'
op|','
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ModuleHelp
dedent|''
dedent|''
name|'def'
name|'ModuleHelp'
op|'('
name|'self'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe the key flags of a module.\n\n    Args:\n      module: A module object or a module name (a string).\n\n    Returns:\n      string describing the key flags of a module.\n    """'
newline|'\n'
name|'helplist'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'__RenderOurModuleKeyFlags'
op|'('
name|'module'
op|','
name|'helplist'
op|')'
newline|'\n'
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'helplist'
op|')'
newline|'\n'
nl|'\n'
DECL|member|MainModuleHelp
dedent|''
name|'def'
name|'MainModuleHelp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Describe the key flags of the main module.\n\n    Returns:\n      string describing the key flags of a module.\n    """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'ModuleHelp'
op|'('
name|'_GetMainModule'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__RenderFlagList
dedent|''
name|'def'
name|'__RenderFlagList'
op|'('
name|'self'
op|','
name|'flaglist'
op|','
name|'output_lines'
op|','
name|'prefix'
op|'='
string|'"  "'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fl'
op|'='
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'special_fl'
op|'='
name|'_SPECIAL_FLAGS'
op|'.'
name|'FlagDict'
op|'('
op|')'
newline|'\n'
name|'flaglist'
op|'='
op|'['
op|'('
name|'flag'
op|'.'
name|'name'
op|','
name|'flag'
op|')'
name|'for'
name|'flag'
name|'in'
name|'flaglist'
op|']'
newline|'\n'
name|'flaglist'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'flagset'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'flag'
op|')'
name|'in'
name|'flaglist'
op|':'
newline|'\n'
comment|"# It's possible this flag got deleted or overridden since being"
nl|'\n'
comment|'# registered in the per-module flaglist.  Check now against the'
nl|'\n'
comment|'# canonical source of current flag information, the FlagDict.'
nl|'\n'
indent|'      '
name|'if'
name|'fl'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|'!='
name|'flag'
name|'and'
name|'special_fl'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'None'
op|')'
op|'!='
name|'flag'
op|':'
newline|'\n'
comment|'# a different flag is using this name now'
nl|'\n'
indent|'        '
name|'continue'
newline|'\n'
comment|'# only print help once'
nl|'\n'
dedent|''
name|'if'
name|'flagset'
op|'.'
name|'has_key'
op|'('
name|'flag'
op|')'
op|':'
name|'continue'
newline|'\n'
name|'flagset'
op|'['
name|'flag'
op|']'
op|'='
number|'1'
newline|'\n'
name|'flaghelp'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'short_name'
op|':'
name|'flaghelp'
op|'+='
string|'"-%s,"'
op|'%'
name|'flag'
op|'.'
name|'short_name'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'        '
name|'flaghelp'
op|'+='
string|'"--[no]%s"'
op|'%'
name|'flag'
op|'.'
name|'name'
op|'+'
string|'":"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'flaghelp'
op|'+='
string|'"--%s"'
op|'%'
name|'flag'
op|'.'
name|'name'
op|'+'
string|'":"'
newline|'\n'
dedent|''
name|'flaghelp'
op|'+='
string|'"  "'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'help'
op|':'
newline|'\n'
indent|'        '
name|'flaghelp'
op|'+='
name|'flag'
op|'.'
name|'help'
newline|'\n'
dedent|''
name|'flaghelp'
op|'='
name|'TextWrap'
op|'('
name|'flaghelp'
op|','
name|'indent'
op|'='
name|'prefix'
op|'+'
string|'"  "'
op|','
nl|'\n'
name|'firstline_indent'
op|'='
name|'prefix'
op|')'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'default_as_str'
op|':'
newline|'\n'
indent|'        '
name|'flaghelp'
op|'+='
string|'"\\n"'
newline|'\n'
name|'flaghelp'
op|'+='
name|'TextWrap'
op|'('
string|'"(default: %s)"'
op|'%'
name|'flag'
op|'.'
name|'default_as_str'
op|','
nl|'\n'
name|'indent'
op|'='
name|'prefix'
op|'+'
string|'"  "'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'flag'
op|'.'
name|'parser'
op|'.'
name|'syntactic_help'
op|':'
newline|'\n'
indent|'        '
name|'flaghelp'
op|'+='
string|'"\\n"'
newline|'\n'
name|'flaghelp'
op|'+='
name|'TextWrap'
op|'('
string|'"(%s)"'
op|'%'
name|'flag'
op|'.'
name|'parser'
op|'.'
name|'syntactic_help'
op|','
nl|'\n'
name|'indent'
op|'='
name|'prefix'
op|'+'
string|'"  "'
op|')'
newline|'\n'
dedent|''
name|'output_lines'
op|'.'
name|'append'
op|'('
name|'flaghelp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the value of a flag (if not None) or a default value.\n\n    Args:\n      name: A string, the name of a flag.\n      default: Default value to use if the flag value is None.\n    """'
newline|'\n'
nl|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'__getattr__'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
comment|'# Can\'t do if not value, b/c value might be \'0\' or ""'
newline|'\n'
indent|'      '
name|'return'
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'default'
newline|'\n'
nl|'\n'
DECL|member|ShortestUniquePrefixes
dedent|''
dedent|''
name|'def'
name|'ShortestUniquePrefixes'
op|'('
name|'self'
op|','
name|'fl'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns: dictionary; maps flag names to their shortest unique prefix."""'
newline|'\n'
comment|'# Sort the list of flag names'
nl|'\n'
name|'sorted_flags'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
op|','
name|'flag'
name|'in'
name|'fl'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'sorted_flags'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'if'
name|'flag'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'        '
name|'sorted_flags'
op|'.'
name|'append'
op|'('
string|"'no%s'"
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'sorted_flags'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# For each name in the sorted list, determine the shortest unique'
nl|'\n'
comment|'# prefix by comparing itself to the next name and to the previous'
nl|'\n'
comment|'# name (the latter check uses cached info from the previous loop).'
nl|'\n'
name|'shortest_matches'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'prev_idx'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'flag_idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'sorted_flags'
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'curr'
op|'='
name|'sorted_flags'
op|'['
name|'flag_idx'
op|']'
newline|'\n'
name|'if'
name|'flag_idx'
op|'=='
op|'('
name|'len'
op|'('
name|'sorted_flags'
op|')'
op|'-'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'next'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'next'
op|'='
name|'sorted_flags'
op|'['
name|'flag_idx'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'next_len'
op|'='
name|'len'
op|'('
name|'next'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'curr_idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'curr'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'next'
name|'is'
name|'None'
nl|'\n'
name|'or'
name|'curr_idx'
op|'>='
name|'next_len'
nl|'\n'
name|'or'
name|'curr'
op|'['
name|'curr_idx'
op|']'
op|'!='
name|'next'
op|'['
name|'curr_idx'
op|']'
op|')'
op|':'
newline|'\n'
comment|'# curr longer than next or no more chars in common'
nl|'\n'
indent|'          '
name|'shortest_matches'
op|'['
name|'curr'
op|']'
op|'='
name|'curr'
op|'['
op|':'
name|'max'
op|'('
name|'prev_idx'
op|','
name|'curr_idx'
op|')'
op|'+'
number|'1'
op|']'
newline|'\n'
name|'prev_idx'
op|'='
name|'curr_idx'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# curr shorter than (or equal to) next'
nl|'\n'
indent|'        '
name|'shortest_matches'
op|'['
name|'curr'
op|']'
op|'='
name|'curr'
newline|'\n'
name|'prev_idx'
op|'='
name|'curr_idx'
op|'+'
number|'1'
comment|'# next will need at least one more char'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'shortest_matches'
newline|'\n'
nl|'\n'
DECL|member|__IsFlagFileDirective
dedent|''
name|'def'
name|'__IsFlagFileDirective'
op|'('
name|'self'
op|','
name|'flag_string'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks whether flag_string contain a --flagfile=<foo> directive."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'flag_string'
op|','
name|'type'
op|'('
string|'""'
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'flag_string'
op|'.'
name|'startswith'
op|'('
string|"'--flagfile='"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'flag_string'
op|'=='
string|"'--flagfile'"
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'flag_string'
op|'.'
name|'startswith'
op|'('
string|"'-flagfile='"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'flag_string'
op|'=='
string|"'-flagfile'"
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|ExtractFilename
dedent|''
name|'def'
name|'ExtractFilename'
op|'('
name|'self'
op|','
name|'flagfile_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns filename from a flagfile_str of form -[-]flagfile=filename.\n\n    The cases of --flagfile foo and -flagfile foo shouldn\'t be hitting\n    this function, as they are dealt with in the level above this\n    function.\n    """'
newline|'\n'
name|'if'
name|'flagfile_str'
op|'.'
name|'startswith'
op|'('
string|"'--flagfile='"
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
op|'('
name|'flagfile_str'
op|'['
op|'('
name|'len'
op|'('
string|"'--flagfile='"
op|')'
op|')'
op|':'
op|']'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'flagfile_str'
op|'.'
name|'startswith'
op|'('
string|"'-flagfile='"
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
op|'('
name|'flagfile_str'
op|'['
op|'('
name|'len'
op|'('
string|"'-flagfile='"
op|')'
op|')'
op|':'
op|']'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'FlagsError'
op|'('
string|"'Hit illegal --flagfile type: %s'"
op|'%'
name|'flagfile_str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__GetFlagFileLines
dedent|''
dedent|''
name|'def'
name|'__GetFlagFileLines'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'parsed_file_list'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the useful (!=comments, etc) lines from a file with flags.\n\n    Args:\n      filename: A string, the name of the flag file.\n      parsed_file_list: A list of the names of the files we have\n        already read.  MUTATED BY THIS FUNCTION.\n\n    Returns:\n      List of strings. See the note below.\n\n    NOTE(springer): This function checks for a nested --flagfile=<foo>\n    tag and handles the lower file recursively. It returns a list of\n    all the lines that _could_ contain command flags. This is\n    EVERYTHING except whitespace lines and comments (lines starting\n    with \'#\' or \'//\').\n    """'
newline|'\n'
name|'line_list'
op|'='
op|'['
op|']'
comment|'# All line from flagfile.'
newline|'\n'
name|'flag_line_list'
op|'='
op|'['
op|']'
comment|'# Subset of lines w/o comments, blanks, flagfile= tags.'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'file_obj'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e_msg'
op|':'
newline|'\n'
indent|'      '
name|'print'
name|'e_msg'
newline|'\n'
name|'print'
string|"'ERROR:: Unable to open flagfile: %s'"
op|'%'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'return'
name|'flag_line_list'
newline|'\n'
nl|'\n'
dedent|''
name|'line_list'
op|'='
name|'file_obj'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
name|'file_obj'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'parsed_file_list'
op|'.'
name|'append'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
comment|'# This is where we check each line in the file we just read.'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'line_list'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'line'
op|'.'
name|'isspace'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
comment|"# Checks for comment (a line that starts with '#')."
nl|'\n'
dedent|''
name|'elif'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'or'
name|'line'
op|'.'
name|'startswith'
op|'('
string|"'//'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
comment|'# Checks for a nested "--flagfile=<bar>" flag in the current file.'
nl|'\n'
comment|'# If we find one, recursively parse down into that file.'
nl|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'__IsFlagFileDirective'
op|'('
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sub_filename'
op|'='
name|'self'
op|'.'
name|'ExtractFilename'
op|'('
name|'line'
op|')'
newline|'\n'
comment|"# We do a little safety check for reparsing a file we've already done."
nl|'\n'
name|'if'
name|'not'
name|'sub_filename'
name|'in'
name|'parsed_file_list'
op|':'
newline|'\n'
indent|'          '
name|'included_flags'
op|'='
name|'self'
op|'.'
name|'__GetFlagFileLines'
op|'('
name|'sub_filename'
op|','
nl|'\n'
name|'parsed_file_list'
op|')'
newline|'\n'
name|'flag_line_list'
op|'.'
name|'extend'
op|'('
name|'included_flags'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
comment|'# Case of hitting a circularly included file.'
newline|'\n'
indent|'          '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
op|'('
string|"'Warning: Hit circular flagfile dependency: %s'"
nl|'\n'
op|'%'
name|'sub_filename'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# Any line that's not a comment or a nested flagfile should get"
nl|'\n'
comment|'# copied into 2nd position.  This leaves earlier arguements'
nl|'\n'
comment|'# further back in the list, thus giving them higher priority.'
nl|'\n'
indent|'        '
name|'flag_line_list'
op|'.'
name|'append'
op|'('
name|'line'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'flag_line_list'
newline|'\n'
nl|'\n'
DECL|member|ReadFlagsFromFiles
dedent|''
name|'def'
name|'ReadFlagsFromFiles'
op|'('
name|'self'
op|','
name|'argv'
op|','
name|'force_gnu'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Processes command line args, but also allow args to be read from file.\n    Args:\n      argv: A list of strings, usually sys.argv[1:], which may contain one or\n        more flagfile directives of the form --flagfile="./filename".\n        Note that the name of the program (sys.argv[0]) should be omitted.\n      force_gnu: If False, --flagfile parsing obeys normal flag semantics.\n        If True, --flagfile parsing instead follows gnu_getopt semantics.\n        *** WARNING *** force_gnu=False may become the future default!\n\n    Returns:\n\n      A new list which has the original list combined with what we read\n      from any flagfile(s).\n\n    References: Global gflags.FLAG class instance.\n\n    This function should be called before the normal FLAGS(argv) call.\n    This function scans the input list for a flag that looks like:\n    --flagfile=<somefile>. Then it opens <somefile>, reads all valid key\n    and value pairs and inserts them into the input list between the\n    first item of the list and any subsequent items in the list.\n\n    Note that your application\'s flags are still defined the usual way\n    using gflags DEFINE_flag() type functions.\n\n    Notes (assuming we\'re getting a commandline of some sort as our input):\n    --> Flags from the command line argv _should_ always take precedence!\n    --> A further "--flagfile=<otherfile.cfg>" CAN be nested in a flagfile.\n        It will be processed after the parent flag file is done.\n    --> For duplicate flags, first one we hit should "win".\n    --> In a flagfile, a line beginning with # or // is a comment.\n    --> Entirely blank lines _should_ be ignored.\n    """'
newline|'\n'
name|'parsed_file_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'rest_of_args'
op|'='
name|'argv'
newline|'\n'
name|'new_argv'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'rest_of_args'
op|':'
newline|'\n'
indent|'      '
name|'current_arg'
op|'='
name|'rest_of_args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'rest_of_args'
op|'='
name|'rest_of_args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__IsFlagFileDirective'
op|'('
name|'current_arg'
op|')'
op|':'
newline|'\n'
comment|'# This handles the case of -(-)flagfile foo.  In this case the'
nl|'\n'
comment|'# next arg really is part of this one.'
nl|'\n'
indent|'        '
name|'if'
name|'current_arg'
op|'=='
string|"'--flagfile'"
name|'or'
name|'current_arg'
op|'=='
string|"'-flagfile'"
op|':'
newline|'\n'
indent|'          '
name|'if'
name|'not'
name|'rest_of_args'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'IllegalFlagValue'
op|'('
string|"'--flagfile with no argument'"
op|')'
newline|'\n'
dedent|''
name|'flag_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'rest_of_args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'rest_of_args'
op|'='
name|'rest_of_args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This handles the case of (-)-flagfile=foo.'
nl|'\n'
indent|'          '
name|'flag_filename'
op|'='
name|'self'
op|'.'
name|'ExtractFilename'
op|'('
name|'current_arg'
op|')'
newline|'\n'
dedent|''
name|'new_argv'
op|'['
number|'0'
op|':'
number|'0'
op|']'
op|'='
name|'self'
op|'.'
name|'__GetFlagFileLines'
op|'('
name|'flag_filename'
op|','
name|'parsed_file_list'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'new_argv'
op|'.'
name|'append'
op|'('
name|'current_arg'
op|')'
newline|'\n'
comment|"# Stop parsing after '--', like getopt and gnu_getopt."
nl|'\n'
name|'if'
name|'current_arg'
op|'=='
string|"'--'"
op|':'
newline|'\n'
indent|'          '
name|'break'
newline|'\n'
comment|'# Stop parsing after a non-flag, like getopt.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'current_arg'
op|'.'
name|'startswith'
op|'('
string|"'-'"
op|')'
op|':'
newline|'\n'
indent|'          '
name|'if'
name|'not'
name|'force_gnu'
name|'and'
name|'not'
name|'self'
op|'.'
name|'__dict__'
op|'['
string|"'__use_gnu_getopt'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'rest_of_args'
op|':'
newline|'\n'
indent|'      '
name|'new_argv'
op|'.'
name|'extend'
op|'('
name|'rest_of_args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'new_argv'
newline|'\n'
nl|'\n'
DECL|member|FlagsIntoString
dedent|''
name|'def'
name|'FlagsIntoString'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a string with the flags assignments from this FlagValues object.\n\n    This function ignores flags whose value is None.  Each flag\n    assignment is separated by a newline.\n\n    NOTE: MUST mirror the behavior of the C++ function\n    CommandlineFlagsIntoString from google3/base/commandlineflags.cc.\n    """'
newline|'\n'
name|'s'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'flag'
name|'in'
name|'self'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'flag'
op|'.'
name|'value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'+='
name|'flag'
op|'.'
name|'Serialize'
op|'('
op|')'
op|'+'
string|"'\\n'"
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|AppendFlagsIntoFile
dedent|''
name|'def'
name|'AppendFlagsIntoFile'
op|'('
name|'self'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Appends all flags assignments from this FlagInfo object to a file.\n\n    Output will be in the format of a flagfile.\n\n    NOTE: MUST mirror the behavior of the C++ version of\n    AppendFlagsIntoFile from google3/base/commandlineflags.cc.\n    """'
newline|'\n'
name|'out_file'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'out_file'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'FlagsIntoString'
op|'('
op|')'
op|')'
newline|'\n'
name|'out_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|WriteHelpInXMLFormat
dedent|''
name|'def'
name|'WriteHelpInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Outputs flag documentation in XML format.\n\n    NOTE: We use element names that are consistent with those used by\n    the C++ command-line flag library, from\n    google3/base/commandlineflags_reporting.cc.  We also use a few new\n    elements (e.g., <key>), but we do not interfere / overlap with\n    existing XML elements used by the C++ library.  Please maintain this\n    consistency.\n\n    Args:\n      outfile: File object we write to.  Default None means sys.stdout.\n    """'
newline|'\n'
name|'outfile'
op|'='
name|'outfile'
name|'or'
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
nl|'\n'
name|'outfile'
op|'.'
name|'write'
op|'('
string|'\'<?xml version=\\"1.0\\"?>\\n\''
op|')'
newline|'\n'
name|'outfile'
op|'.'
name|'write'
op|'('
string|"'<AllFlags>\\n'"
op|')'
newline|'\n'
name|'indent'
op|'='
string|"'  '"
newline|'\n'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'program'"
op|','
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'indent'
op|')'
newline|'\n'
nl|'\n'
name|'usage_doc'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
string|"'__main__'"
op|']'
op|'.'
name|'__doc__'
newline|'\n'
name|'if'
name|'not'
name|'usage_doc'
op|':'
newline|'\n'
indent|'      '
name|'usage_doc'
op|'='
string|"'\\nUSAGE: %s [flags]\\n'"
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'usage_doc'
op|'='
name|'usage_doc'
op|'.'
name|'replace'
op|'('
string|"'%s'"
op|','
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'usage'"
op|','
name|'usage_doc'
op|','
name|'indent'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get list of key flags for the main module.'
nl|'\n'
name|'key_flags'
op|'='
name|'self'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'_GetMainModule'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sort flags by declaring module name and next by flag name.'
nl|'\n'
name|'flags_by_module'
op|'='
name|'self'
op|'.'
name|'FlagsByModuleDict'
op|'('
op|')'
newline|'\n'
name|'all_module_names'
op|'='
name|'list'
op|'('
name|'flags_by_module'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'all_module_names'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'module_name'
name|'in'
name|'all_module_names'
op|':'
newline|'\n'
indent|'      '
name|'flag_list'
op|'='
op|'['
op|'('
name|'f'
op|'.'
name|'name'
op|','
name|'f'
op|')'
name|'for'
name|'f'
name|'in'
name|'flags_by_module'
op|'['
name|'module_name'
op|']'
op|']'
newline|'\n'
name|'flag_list'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'unused_flag_name'
op|','
name|'flag'
name|'in'
name|'flag_list'
op|':'
newline|'\n'
indent|'        '
name|'is_key'
op|'='
name|'flag'
name|'in'
name|'key_flags'
newline|'\n'
name|'flag'
op|'.'
name|'WriteInfoInXMLFormat'
op|'('
name|'outfile'
op|','
name|'module_name'
op|','
nl|'\n'
name|'is_key'
op|'='
name|'is_key'
op|','
name|'indent'
op|'='
name|'indent'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'outfile'
op|'.'
name|'write'
op|'('
string|"'</AllFlags>\\n'"
op|')'
newline|'\n'
name|'outfile'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
comment|'# end of FlagValues definition'
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# The global FlagValues instance'
nl|'\n'
DECL|variable|FLAGS
dedent|''
dedent|''
name|'FLAGS'
op|'='
name|'FlagValues'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_MakeXMLSafe
name|'def'
name|'_MakeXMLSafe'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Escapes <, >, and & from s, and removes XML 1.0-illegal chars."""'
newline|'\n'
name|'s'
op|'='
name|'cgi'
op|'.'
name|'escape'
op|'('
name|'s'
op|')'
comment|'# Escape <, >, and &'
newline|'\n'
comment|'# Remove characters that cannot appear in an XML 1.0 document'
nl|'\n'
comment|'# (http://www.w3.org/TR/REC-xml/#charsets).'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# NOTE: if there are problems with current solution, one may move to'
nl|'\n'
comment|"# XML 1.1, which allows such chars, if they're entity-escaped (&#xHH;)."
nl|'\n'
name|'s'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"r'[\\x00-\\x08\\x0b\\x0c\\x0e-\\x1f]'"
op|','
string|"''"
op|','
name|'s'
op|')'
newline|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_WriteSimpleXMLElement
dedent|''
name|'def'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
name|'name'
op|','
name|'value'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Writes a simple XML element.\n\n  Args:\n    outfile: File object we write the XML element to.\n    name: A string, the name of XML element.\n    value: A Python object, whose string representation will be used\n      as the value of the XML element.\n    indent: A string, prepended to each line of generated output.\n  """'
newline|'\n'
name|'value_str'
op|'='
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'bool'
op|')'
op|':'
newline|'\n'
comment|'# Display boolean values as the C++ flag library does: no caps.'
nl|'\n'
indent|'    '
name|'value_str'
op|'='
name|'value_str'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
name|'outfile'
op|'.'
name|'write'
op|'('
string|"'%s<%s>%s</%s>\\n'"
op|'%'
nl|'\n'
op|'('
name|'indent'
op|','
name|'name'
op|','
name|'_MakeXMLSafe'
op|'('
name|'value_str'
op|')'
op|','
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Flag
dedent|''
name|'class'
name|'Flag'
op|':'
newline|'\n'
indent|'  '
string|'"""Information about a command-line flag.\n\n  \'Flag\' objects define the following fields:\n    .name  - the name for this flag\n    .default - the default value for this flag\n    .default_as_str - default value as repr\'d string, e.g., "\'true\'" (or None)\n    .value  - the most recent parsed value of this flag; set by Parse()\n    .help  - a help string or None if no help is available\n    .short_name  - the single letter alias for this flag (or None)\n    .boolean  - if \'true\', this flag does not accept arguments\n    .present  - true if this flag was parsed from command line flags.\n    .parser  - an ArgumentParser object\n    .serializer - an ArgumentSerializer object\n    .allow_override - the flag may be redefined without raising an error\n\n  The only public method of a \'Flag\' object is Parse(), but it is\n  typically only called by a \'FlagValues\' object.  The Parse() method is\n  a thin wrapper around the \'ArgumentParser\' Parse() method.  The parsed\n  value is saved in .value, and the .present attribute is updated.  If\n  this flag was already present, a FlagsError is raised.\n\n  Parse() is also called during __init__ to parse the default value and\n  initialize the .value attribute.  This enables other python modules to\n  safely use flags even if the __main__ module neglects to parse the\n  command line arguments.  The .present attribute is cleared after\n  __init__ parsing.  If the default value is set to None, then the\n  __init__ parsing step is skipped and the .value attribute is\n  initialized to None.\n\n  Note: The default value is also presented to the user in the help\n  string, so it is important that it be a legal value for this flag.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help_string'
op|','
nl|'\n'
name|'short_name'
op|'='
name|'None'
op|','
name|'boolean'
op|'='
number|'0'
op|','
name|'allow_override'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'help_string'
op|':'
newline|'\n'
indent|'      '
name|'help_string'
op|'='
string|"'(no help available)'"
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'help'
op|'='
name|'help_string'
newline|'\n'
name|'self'
op|'.'
name|'short_name'
op|'='
name|'short_name'
newline|'\n'
name|'self'
op|'.'
name|'boolean'
op|'='
name|'boolean'
newline|'\n'
name|'self'
op|'.'
name|'present'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'parser'
newline|'\n'
name|'self'
op|'.'
name|'serializer'
op|'='
name|'serializer'
newline|'\n'
name|'self'
op|'.'
name|'allow_override'
op|'='
name|'allow_override'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'SetDefault'
op|'('
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__GetParsedValueAsString
dedent|''
name|'def'
name|'__GetParsedValueAsString'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'serializer'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'repr'
op|'('
name|'self'
op|'.'
name|'serializer'
op|'.'
name|'Serialize'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
string|"'true'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repr'
op|'('
string|"'false'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'repr'
op|'('
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'value'
op|'='
name|'self'
op|'.'
name|'parser'
op|'.'
name|'Parse'
op|'('
name|'argument'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|','
name|'e'
op|':'
comment|'# recast ValueError as IllegalFlagValue'
newline|'\n'
indent|'      '
name|'raise'
name|'IllegalFlagValue'
op|'('
string|'"flag --%s=%s: %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'argument'
op|','
name|'e'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'present'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|Unparse
dedent|''
name|'def'
name|'Unparse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'default'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'value'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'self'
op|'.'
name|'Parse'
op|'('
name|'self'
op|'.'
name|'default'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'present'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|Serialize
dedent|''
name|'def'
name|'Serialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'return'
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'boolean'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'self'
op|'.'
name|'value'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"--%s"'
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"--no%s"'
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'not'
name|'self'
op|'.'
name|'serializer'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'FlagsError'
op|'('
string|'"Serializer not present for flag %s"'
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
string|'"--%s=%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'serializer'
op|'.'
name|'Serialize'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|SetDefault
dedent|''
dedent|''
name|'def'
name|'SetDefault'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Changes the default value (and current value too) for this Flag."""'
newline|'\n'
comment|"# We can't allow a None override because it may end up not being"
nl|'\n'
comment|"# passed to C++ code when we're overriding C++ flags.  So we"
nl|'\n'
comment|'# cowardly bail out until someone fixes the semantics of trying to'
nl|'\n'
comment|'# pass None to a C++ flag.  See swig_flags.Init() for details on'
nl|'\n'
comment|'# this behavior.'
nl|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
name|'and'
name|'self'
op|'.'
name|'allow_override'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'DuplicateFlag'
op|'('
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'default'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'Unparse'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'default_as_str'
op|'='
name|'self'
op|'.'
name|'__GetParsedValueAsString'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns: a string that describes the type of this Flag."""'
newline|'\n'
comment|'# NOTE: we use strings, and not the types.*Type constants because'
nl|'\n'
comment|"# our flags can have more exotic types, e.g., 'comma separated list"
nl|'\n'
comment|"# of strings', 'whitespace separated list of strings', etc."
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'Type'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|WriteInfoInXMLFormat
dedent|''
name|'def'
name|'WriteInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'module_name'
op|','
name|'is_key'
op|'='
name|'False'
op|','
name|'indent'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Writes common info about this flag, in XML format.\n\n    This is information that is relevant to all flags (e.g., name,\n    meaning, etc.).  If you defined a flag that has some other pieces of\n    info, then please override _WriteCustomInfoInXMLFormat.\n\n    Please do NOT override this method.\n\n    Args:\n      outfile: File object we write to.\n      module_name: A string, the name of the module that defines this flag.\n      is_key: A boolean, True iff this flag is key for main module.\n      indent: A string that is prepended to each generated line.\n    """'
newline|'\n'
name|'outfile'
op|'.'
name|'write'
op|'('
name|'indent'
op|'+'
string|"'<flag>\\n'"
op|')'
newline|'\n'
name|'inner_indent'
op|'='
name|'indent'
op|'+'
string|"'  '"
newline|'\n'
name|'if'
name|'is_key'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'key'"
op|','
string|"'yes'"
op|','
name|'inner_indent'
op|')'
newline|'\n'
dedent|''
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'file'"
op|','
name|'module_name'
op|','
name|'inner_indent'
op|')'
newline|'\n'
comment|'# Print flag features that are relevant for all flags.'
nl|'\n'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'name'"
op|','
name|'self'
op|'.'
name|'name'
op|','
name|'inner_indent'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'short_name'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'short_name'"
op|','
name|'self'
op|'.'
name|'short_name'
op|','
nl|'\n'
name|'inner_indent'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'help'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'meaning'"
op|','
name|'self'
op|'.'
name|'help'
op|','
name|'inner_indent'
op|')'
newline|'\n'
dedent|''
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'default'"
op|','
name|'self'
op|'.'
name|'default'
op|','
name|'inner_indent'
op|')'
newline|'\n'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'current'"
op|','
name|'self'
op|'.'
name|'value'
op|','
name|'inner_indent'
op|')'
newline|'\n'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'type'"
op|','
name|'self'
op|'.'
name|'Type'
op|'('
op|')'
op|','
name|'inner_indent'
op|')'
newline|'\n'
comment|'# Print extra flag features this flag may have.'
nl|'\n'
name|'self'
op|'.'
name|'_WriteCustomInfoInXMLFormat'
op|'('
name|'outfile'
op|','
name|'inner_indent'
op|')'
newline|'\n'
name|'outfile'
op|'.'
name|'write'
op|'('
name|'indent'
op|'+'
string|"'</flag>\\n'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'_WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Writes extra info about this flag, in XML format.\n\n    "Extra" means "not already printed by WriteInfoInXMLFormat above."\n\n    Args:\n      outfile: File object we write to.\n      indent: A string that is prepended to each generated line.\n    """'
newline|'\n'
comment|'# Usually, the parser knows the extra details about the flag, so'
nl|'\n'
comment|'# we just forward the call to it.'
nl|'\n'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'outfile'
op|','
name|'indent'
op|')'
newline|'\n'
comment|'# End of Flag definition'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ArgumentParser
dedent|''
dedent|''
name|'class'
name|'ArgumentParser'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class used to parse and convert arguments.\n\n  The Parse() method checks to make sure that the string argument is a\n  legal value and convert it to a native type.  If the value cannot be\n  converted, it should throw a \'ValueError\' exception with a human\n  readable explanation of why the value is illegal.\n\n  Subclasses should also define a syntactic_help string which may be\n  presented to the user to describe the form of the legal values.\n  """'
newline|'\n'
DECL|variable|syntactic_help
name|'syntactic_help'
op|'='
string|'""'
newline|'\n'
nl|'\n'
DECL|member|Parse
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Default implementation: always returns its argument unmodified."""'
newline|'\n'
name|'return'
name|'argument'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'string'"
newline|'\n'
nl|'\n'
DECL|member|WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ArgumentSerializer
dedent|''
dedent|''
name|'class'
name|'ArgumentSerializer'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class for generating string representations of a flag value."""'
newline|'\n'
nl|'\n'
DECL|member|Serialize
name|'def'
name|'Serialize'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListSerializer
dedent|''
dedent|''
name|'class'
name|'ListSerializer'
op|'('
name|'ArgumentSerializer'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'  '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'list_sep'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'list_sep'
op|'='
name|'list_sep'
newline|'\n'
nl|'\n'
DECL|member|Serialize
dedent|''
name|'def'
name|'Serialize'
op|'('
name|'self'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'self'
op|'.'
name|'list_sep'
op|'.'
name|'join'
op|'('
op|'['
name|'str'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'value'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# The DEFINE functions are explained in mode details in the module doc string.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE
dedent|''
dedent|''
name|'def'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
name|'serializer'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a generic Flag object.\n\n  NOTE: in the docstrings of all DEFINE* functions, "registers" is short\n  for "creates a new flag and registers it".\n\n  Auxiliary function: clients should use the specialized DEFINE_<type>\n  function instead.\n\n  Args:\n    parser: ArgumentParser that is used to parse the flag arguments.\n    name: A string, the flag name.\n    default: The default value of the flag.\n    help: A help string.\n    flag_values: FlagValues object the flag will be registered with.\n    serializer: ArgumentSerializer that serializes the flag value.\n    args: Dictionary with extra keyword args that are passes to the\n      Flag __init__.\n  """'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'Flag'
op|'('
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
op|'**'
name|'args'
op|')'
op|','
nl|'\n'
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_flag
dedent|''
name|'def'
name|'DEFINE_flag'
op|'('
name|'flag'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a \'Flag\' object with a \'FlagValues\' object.\n\n  By default, the global FLAGS \'FlagValue\' object is used.\n\n  Typical users will use one of the more specialized DEFINE_xxx\n  functions, such as DEFINE_string or DEFINE_integer.  But developers\n  who need to create Flag objects themselves should use this function\n  to register their flags.\n  """'
newline|'\n'
comment|'# copying the reference to flag_values prevents pychecker warnings'
nl|'\n'
name|'fv'
op|'='
name|'flag_values'
newline|'\n'
name|'fv'
op|'['
name|'flag'
op|'.'
name|'name'
op|']'
op|'='
name|'flag'
newline|'\n'
comment|"# Tell flag_values who's defining the flag."
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'flag_values'
op|','
name|'FlagValues'
op|')'
op|':'
newline|'\n'
comment|'# Regarding the above isinstance test: some users pass funny'
nl|'\n'
comment|'# values of flag_values (e.g., {}) in order to avoid the flag'
nl|'\n'
comment|'# registration (in the past, there used to be a flag_values =='
nl|'\n'
comment|'# FLAGS test here) and redefine flags with the same name (e.g.,'
nl|'\n'
comment|'# debug).  To avoid breaking their code, we perform the'
nl|'\n'
comment|'# registration only if flag_values is a real FlagValues object.'
nl|'\n'
indent|'    '
name|'flag_values'
op|'.'
name|'_RegisterFlagByModule'
op|'('
name|'_GetCallingModule'
op|'('
op|')'
op|','
name|'flag'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_InternalDeclareKeyFlags
dedent|''
dedent|''
name|'def'
name|'_InternalDeclareKeyFlags'
op|'('
name|'flag_names'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Declares a flag as key for the calling module.\n\n  Internal function.  User code should call DECLARE_key_flag or\n  ADOPT_module_key_flags instead.\n\n  Args:\n    flag_names: A list of strings that are names of already-registered\n      Flag objects.\n    flag_values: A FlagValues object.  This should almost never need\n      to be overridden.\n\n  Raises:\n    UnrecognizedFlagError: when we refer to a flag that was not\n      defined yet.\n  """'
newline|'\n'
name|'module'
op|'='
name|'_GetCallingModule'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'flag_name'
name|'in'
name|'flag_names'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'flag_name'
name|'not'
name|'in'
name|'flag_values'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'UnrecognizedFlagError'
op|'('
name|'flag_name'
op|')'
newline|'\n'
dedent|''
name|'flag'
op|'='
name|'flag_values'
op|'.'
name|'FlagDict'
op|'('
op|')'
op|'['
name|'flag_name'
op|']'
newline|'\n'
name|'flag_values'
op|'.'
name|'_RegisterKeyFlagForModule'
op|'('
name|'module'
op|','
name|'flag'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DECLARE_key_flag
dedent|''
dedent|''
name|'def'
name|'DECLARE_key_flag'
op|'('
name|'flag_name'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Declares one flag as key to the current module.\n\n  Key flags are flags that are deemed really important for a module.\n  They are important when listing help messages; e.g., if the\n  --helpshort command-line flag is used, then only the key flags of the\n  main module are listed (instead of all flags, as in the case of\n  --help).\n\n  Sample usage:\n\n    flags.DECLARED_key_flag(\'flag_1\')\n\n  Args:\n    flag_name: A string, the name of an already declared flag.\n      (Redeclaring flags as key, including flags implicitly key\n      because they were declared in this module, is a no-op.)\n    flag_values: A FlagValues object.  This should almost never\n      need to be overridden.\n  """'
newline|'\n'
name|'_InternalDeclareKeyFlags'
op|'('
op|'['
name|'flag_name'
op|']'
op|','
name|'flag_values'
op|'='
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ADOPT_module_key_flags
dedent|''
name|'def'
name|'ADOPT_module_key_flags'
op|'('
name|'module'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Declares that all flags key to a module are key to the current module.\n\n  Args:\n    module: A module object.\n    flag_values: A FlagValues object.  This should almost never need\n      to be overridden.\n\n  Raises:\n    FlagsError: When given an argument that is a module name (a\n    string), instead of a module object.\n  """'
newline|'\n'
comment|'# NOTE(salcianu): an even better test would be if not'
nl|'\n'
comment|"# isinstance(module, types.ModuleType) but I didn't want to import"
nl|'\n'
comment|'# types for such a tiny use.'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'module'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'FlagsError'
op|'('
string|"'Received module name %s; expected a module object.'"
nl|'\n'
op|'%'
name|'module'
op|')'
newline|'\n'
dedent|''
name|'_InternalDeclareKeyFlags'
op|'('
nl|'\n'
op|'['
name|'f'
op|'.'
name|'name'
name|'for'
name|'f'
name|'in'
name|'flag_values'
op|'.'
name|'_GetKeyFlagsForModule'
op|'('
name|'module'
op|'.'
name|'__name__'
op|')'
op|']'
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# STRING FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_string
dedent|''
name|'def'
name|'DEFINE_string'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value can be any string."""'
newline|'\n'
name|'parser'
op|'='
name|'ArgumentParser'
op|'('
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
name|'serializer'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# BOOLEAN FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# and the special HELP flags.'
nl|'\n'
nl|'\n'
DECL|class|BooleanParser
dedent|''
name|'class'
name|'BooleanParser'
op|'('
name|'ArgumentParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser of boolean values."""'
newline|'\n'
nl|'\n'
DECL|member|Convert
name|'def'
name|'Convert'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Converts the argument to a boolean; raise ValueError on errors."""'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'argument'
op|')'
op|'=='
name|'str'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'argument'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'['
string|"'true'"
op|','
string|"'t'"
op|','
string|"'1'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'argument'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'['
string|"'false'"
op|','
string|"'f'"
op|','
string|"'0'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'bool_argument'
op|'='
name|'bool'
op|'('
name|'argument'
op|')'
newline|'\n'
name|'if'
name|'argument'
op|'=='
name|'bool_argument'
op|':'
newline|'\n'
comment|'# The argument is a valid boolean (True, False, 0, or 1), and not just'
nl|'\n'
comment|'# something that always converts to bool (list, string, int, etc.).'
nl|'\n'
indent|'      '
name|'return'
name|'bool_argument'
newline|'\n'
nl|'\n'
dedent|''
name|'raise'
name|'ValueError'
op|'('
string|"'Non-boolean argument to boolean flag'"
op|','
name|'argument'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'val'
op|'='
name|'self'
op|'.'
name|'Convert'
op|'('
name|'argument'
op|')'
newline|'\n'
name|'return'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'bool'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BooleanFlag
dedent|''
dedent|''
name|'class'
name|'BooleanFlag'
op|'('
name|'Flag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Basic boolean flag.\n\n  Boolean flags do not take any arguments, and their value is either\n  True (1) or False (0).  The false value is specified on the command\n  line by prepending the word \'no\' to either the long or the short flag\n  name.\n\n  For example, if a Boolean flag was created whose long name was\n  \'update\' and whose short name was \'x\', then this flag could be\n  explicitly unset through either --noupdate or --nox.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'short_name'
op|'='
name|'None'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'p'
op|'='
name|'BooleanParser'
op|'('
op|')'
newline|'\n'
name|'Flag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|','
name|'None'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'short_name'
op|','
number|'1'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'help'
op|':'
name|'self'
op|'.'
name|'help'
op|'='
string|'"a boolean value"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_boolean
dedent|''
dedent|''
name|'def'
name|'DEFINE_boolean'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a boolean flag.\n\n  Such a boolean flag does not take an argument.  If a user wants to\n  specify a false value explicitly, the long option beginning with \'no\'\n  must be used: i.e. --noflag\n\n  This flag will have a value of None, True or False.  None is possible\n  if default=None and the user does not specify the flag on the command\n  line.\n  """'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'BooleanFlag'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
op|'**'
name|'args'
op|')'
op|','
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
comment|'# Match C++ API to unconfuse C++ people.'
nl|'\n'
DECL|variable|DEFINE_bool
dedent|''
name|'DEFINE_bool'
op|'='
name|'DEFINE_boolean'
newline|'\n'
nl|'\n'
DECL|class|HelpFlag
name|'class'
name|'HelpFlag'
op|'('
name|'BooleanFlag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""\n  HelpFlag is a special boolean flag that prints usage information and\n  raises a SystemExit exception if it is ever found in the command\n  line arguments.  Note this is called with allow_override=1, so other\n  apps can define their own --help flag, replacing this one, if they want.\n  """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BooleanFlag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|'"help"'
op|','
number|'0'
op|','
string|'"show this help"'
op|','
nl|'\n'
name|'short_name'
op|'='
string|'"?"'
op|','
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'arg'
op|':'
newline|'\n'
indent|'      '
name|'doc'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"__main__"'
op|']'
op|'.'
name|'__doc__'
newline|'\n'
name|'flags'
op|'='
name|'str'
op|'('
name|'FLAGS'
op|')'
newline|'\n'
name|'print'
name|'doc'
name|'or'
op|'('
string|'"\\nUSAGE: %s [flags]\\n"'
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'flags'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"flags:"'
newline|'\n'
name|'print'
name|'flags'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HelpXMLFlag
dedent|''
dedent|''
dedent|''
name|'class'
name|'HelpXMLFlag'
op|'('
name|'BooleanFlag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Similar to HelpFlag, but generates output in XML format."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BooleanFlag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|"'helpxml'"
op|','
name|'False'
op|','
nl|'\n'
string|"'like --help, but generates XML output'"
op|','
nl|'\n'
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'arg'
op|':'
newline|'\n'
indent|'      '
name|'FLAGS'
op|'.'
name|'WriteHelpInXMLFormat'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HelpshortFlag
dedent|''
dedent|''
dedent|''
name|'class'
name|'HelpshortFlag'
op|'('
name|'BooleanFlag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""\n  HelpshortFlag is a special boolean flag that prints usage\n  information for the "main" module, and rasies a SystemExit exception\n  if it is ever found in the command line arguments.  Note this is\n  called with allow_override=1, so other apps can define their own\n  --helpshort flag, replacing this one, if they want.\n  """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BooleanFlag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|'"helpshort"'
op|','
number|'0'
op|','
nl|'\n'
string|'"show usage only for this module"'
op|','
name|'allow_override'
op|'='
number|'1'
op|')'
newline|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'arg'
op|':'
newline|'\n'
indent|'      '
name|'doc'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
string|'"__main__"'
op|']'
op|'.'
name|'__doc__'
newline|'\n'
name|'flags'
op|'='
name|'FLAGS'
op|'.'
name|'MainModuleHelp'
op|'('
op|')'
newline|'\n'
name|'print'
name|'doc'
name|'or'
op|'('
string|'"\\nUSAGE: %s [flags]\\n"'
op|'%'
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'flags'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"flags:"'
newline|'\n'
name|'print'
name|'flags'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# FLOAT FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
DECL|class|FloatParser
dedent|''
dedent|''
dedent|''
name|'class'
name|'FloatParser'
op|'('
name|'ArgumentParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser of floating point values.\n\n  Parsed value may be bounded to a given upper and lower bound.\n  """'
newline|'\n'
DECL|variable|number_article
name|'number_article'
op|'='
string|'"a"'
newline|'\n'
DECL|variable|number_name
name|'number_name'
op|'='
string|'"number"'
newline|'\n'
DECL|variable|syntactic_help
name|'syntactic_help'
op|'='
string|'" "'
op|'.'
name|'join'
op|'('
op|'('
name|'number_article'
op|','
name|'number_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'lower_bound'
op|'='
name|'None'
op|','
name|'upper_bound'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'lower_bound'
op|'='
name|'lower_bound'
newline|'\n'
name|'self'
op|'.'
name|'upper_bound'
op|'='
name|'upper_bound'
newline|'\n'
name|'sh'
op|'='
name|'self'
op|'.'
name|'syntactic_help'
newline|'\n'
name|'if'
name|'lower_bound'
op|'!='
name|'None'
name|'and'
name|'upper_bound'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
op|'('
string|'"%s in the range [%s, %s]"'
op|'%'
op|'('
name|'sh'
op|','
name|'lower_bound'
op|','
name|'upper_bound'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'lower_bound'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
string|'"a positive %s"'
op|'%'
name|'self'
op|'.'
name|'number_name'
newline|'\n'
dedent|''
name|'elif'
name|'upper_bound'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
string|'"a negative %s"'
op|'%'
name|'self'
op|'.'
name|'number_name'
newline|'\n'
dedent|''
name|'elif'
name|'lower_bound'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
string|'"a non-negative %s"'
op|'%'
name|'self'
op|'.'
name|'number_name'
newline|'\n'
dedent|''
name|'elif'
name|'upper_bound'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
string|'"%s <= %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'number_name'
op|','
name|'upper_bound'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'lower_bound'
op|'!='
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'sh'
op|'='
string|'"%s >= %s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'number_name'
op|','
name|'lower_bound'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'syntactic_help'
op|'='
name|'sh'
newline|'\n'
nl|'\n'
DECL|member|Convert
dedent|''
name|'def'
name|'Convert'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Converts argument to a float; raises ValueError on errors."""'
newline|'\n'
name|'return'
name|'float'
op|'('
name|'argument'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'val'
op|'='
name|'self'
op|'.'
name|'Convert'
op|'('
name|'argument'
op|')'
newline|'\n'
name|'if'
op|'('
op|'('
name|'self'
op|'.'
name|'lower_bound'
op|'!='
name|'None'
name|'and'
name|'val'
op|'<'
name|'self'
op|'.'
name|'lower_bound'
op|')'
name|'or'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'upper_bound'
op|'!='
name|'None'
name|'and'
name|'val'
op|'>'
name|'self'
op|'.'
name|'upper_bound'
op|')'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'ValueError'
op|'('
string|'"%s is not %s"'
op|'%'
op|'('
name|'val'
op|','
name|'self'
op|'.'
name|'syntactic_help'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'val'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'float'"
newline|'\n'
nl|'\n'
DECL|member|WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'lower_bound'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'lower_bound'"
op|','
name|'self'
op|'.'
name|'lower_bound'
op|','
name|'indent'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'upper_bound'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'upper_bound'"
op|','
name|'self'
op|'.'
name|'upper_bound'
op|','
name|'indent'
op|')'
newline|'\n'
comment|'# End of FloatParser'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_float
dedent|''
dedent|''
dedent|''
name|'def'
name|'DEFINE_float'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'lower_bound'
op|'='
name|'None'
op|','
name|'upper_bound'
op|'='
name|'None'
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value must be a float.\n\n  If lower_bound or upper_bound are set, then this flag must be\n  within the given range.\n  """'
newline|'\n'
name|'parser'
op|'='
name|'FloatParser'
op|'('
name|'lower_bound'
op|','
name|'upper_bound'
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
name|'serializer'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# INTEGER FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|IntegerParser
dedent|''
name|'class'
name|'IntegerParser'
op|'('
name|'FloatParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser of an integer value.\n\n  Parsed value may be bounded to a given upper and lower bound.\n  """'
newline|'\n'
DECL|variable|number_article
name|'number_article'
op|'='
string|'"an"'
newline|'\n'
DECL|variable|number_name
name|'number_name'
op|'='
string|'"integer"'
newline|'\n'
DECL|variable|syntactic_help
name|'syntactic_help'
op|'='
string|'" "'
op|'.'
name|'join'
op|'('
op|'('
name|'number_article'
op|','
name|'number_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Convert
name|'def'
name|'Convert'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'__pychecker__'
op|'='
string|"'no-returnvalues'"
newline|'\n'
name|'if'
name|'type'
op|'('
name|'argument'
op|')'
op|'=='
name|'str'
op|':'
newline|'\n'
indent|'      '
name|'base'
op|'='
number|'10'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'argument'
op|')'
op|'>'
number|'2'
name|'and'
name|'argument'
op|'['
number|'0'
op|']'
op|'=='
string|'"0"'
name|'and'
name|'argument'
op|'['
number|'1'
op|']'
op|'=='
string|'"x"'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'='
number|'16'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'argument'
op|','
name|'base'
op|')'
newline|'\n'
comment|'# ValueError is thrown when argument is a string, and overflows an int.'
nl|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'long'
op|'('
name|'argument'
op|','
name|'base'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'int'
op|'('
name|'argument'
op|')'
newline|'\n'
comment|'# OverflowError is thrown when argument is numeric, and overflows an int.'
nl|'\n'
dedent|''
name|'except'
name|'OverflowError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'long'
op|'('
name|'argument'
op|')'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
dedent|''
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'int'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_integer
dedent|''
dedent|''
name|'def'
name|'DEFINE_integer'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'lower_bound'
op|'='
name|'None'
op|','
name|'upper_bound'
op|'='
name|'None'
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value must be an integer.\n\n  If lower_bound, or upper_bound are set, then this flag must be\n  within the given range.\n  """'
newline|'\n'
name|'parser'
op|'='
name|'IntegerParser'
op|'('
name|'lower_bound'
op|','
name|'upper_bound'
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
name|'serializer'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# ENUM FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|EnumParser
dedent|''
name|'class'
name|'EnumParser'
op|'('
name|'ArgumentParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser of a string enum value (a string value from a given set).\n\n  If enum_values (see below) is not specified, any string is allowed.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'enum_values'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'self'
op|'.'
name|'enum_values'
op|'='
name|'enum_values'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'self'
op|'.'
name|'enum_values'
name|'and'
name|'argument'
name|'not'
name|'in'
name|'self'
op|'.'
name|'enum_values'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'ValueError'
op|'('
string|'"value should be one of <%s>"'
op|'%'
nl|'\n'
string|'"|"'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'enum_values'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'argument'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'string enum'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EnumFlag
dedent|''
dedent|''
name|'class'
name|'EnumFlag'
op|'('
name|'Flag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Basic enum flag; its value can be any string from list of enum_values."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'enum_values'
op|'='
name|'None'
op|','
nl|'\n'
name|'short_name'
op|'='
name|'None'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'enum_values'
op|'='
name|'enum_values'
name|'or'
op|'['
op|']'
newline|'\n'
name|'p'
op|'='
name|'EnumParser'
op|'('
name|'enum_values'
op|')'
newline|'\n'
name|'g'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'Flag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'p'
op|','
name|'g'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'short_name'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'help'
op|':'
name|'self'
op|'.'
name|'help'
op|'='
string|'"an enum string"'
newline|'\n'
name|'self'
op|'.'
name|'help'
op|'='
string|'"<%s>: %s"'
op|'%'
op|'('
string|'"|"'
op|'.'
name|'join'
op|'('
name|'enum_values'
op|')'
op|','
name|'self'
op|'.'
name|'help'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'_WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'enum_value'
name|'in'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'enum_values'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'enum_value'"
op|','
name|'enum_value'
op|','
name|'indent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_enum
dedent|''
dedent|''
dedent|''
name|'def'
name|'DEFINE_enum'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'enum_values'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value can be any string from enum_values."""'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'EnumFlag'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'enum_values'
op|','
op|'**'
name|'args'
op|')'
op|','
nl|'\n'
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# LIST FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseListParser
dedent|''
name|'class'
name|'BaseListParser'
op|'('
name|'ArgumentParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Base class for a parser of lists of strings.\n\n  To extend, inherit from this class; from the subclass __init__, call\n\n    BaseListParser.__init__(self, token, name)\n\n  where token is a character used to tokenize, and name is a description\n  of the separator.\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'token'
op|'='
name|'None'
op|','
name|'name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'assert'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_token'
op|'='
name|'token'
newline|'\n'
name|'self'
op|'.'
name|'_name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'syntactic_help'
op|'='
string|'"a %s separated list"'
op|'%'
name|'self'
op|'.'
name|'_name'
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'argument'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'argument'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'      '
name|'return'
name|'argument'
newline|'\n'
dedent|''
name|'elif'
name|'argument'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'      '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'      '
name|'return'
op|'['
name|'s'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'s'
name|'in'
name|'argument'
op|'.'
name|'split'
op|'('
name|'self'
op|'.'
name|'_token'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'%s separated list of strings'"
op|'%'
name|'self'
op|'.'
name|'_name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListParser
dedent|''
dedent|''
name|'class'
name|'ListParser'
op|'('
name|'BaseListParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser for a comma-separated list of strings."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BaseListParser'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
string|"','"
op|','
string|"'comma'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BaseListParser'
op|'.'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
newline|'\n'
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'list_separator'"
op|','
name|'repr'
op|'('
string|"','"
op|')'
op|','
name|'indent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WhitespaceSeparatedListParser
dedent|''
dedent|''
name|'class'
name|'WhitespaceSeparatedListParser'
op|'('
name|'BaseListParser'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Parser for a whitespace-separated list of strings."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BaseListParser'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
name|'None'
op|','
string|"'whitespace'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|WriteCustomInfoInXMLFormat
dedent|''
name|'def'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'BaseListParser'
op|'.'
name|'WriteCustomInfoInXMLFormat'
op|'('
name|'self'
op|','
name|'outfile'
op|','
name|'indent'
op|')'
newline|'\n'
name|'separators'
op|'='
name|'list'
op|'('
name|'string'
op|'.'
name|'whitespace'
op|')'
newline|'\n'
name|'separators'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'for'
name|'ws_char'
name|'in'
name|'string'
op|'.'
name|'whitespace'
op|':'
newline|'\n'
indent|'      '
name|'_WriteSimpleXMLElement'
op|'('
name|'outfile'
op|','
string|"'list_separator'"
op|','
name|'repr'
op|'('
name|'ws_char'
op|')'
op|','
name|'indent'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_list
dedent|''
dedent|''
dedent|''
name|'def'
name|'DEFINE_list'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value is a comma-separated list of strings."""'
newline|'\n'
name|'parser'
op|'='
name|'ListParser'
op|'('
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ListSerializer'
op|'('
string|"','"
op|')'
newline|'\n'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
name|'serializer'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_spaceseplist
dedent|''
name|'def'
name|'DEFINE_spaceseplist'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value is a whitespace-separated list of strings.\n\n  Any whitespace can be used as a separator.\n  """'
newline|'\n'
name|'parser'
op|'='
name|'WhitespaceSeparatedListParser'
op|'('
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ListSerializer'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'DEFINE'
op|'('
name|'parser'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
name|'serializer'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# MULTI FLAGS'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiFlag
dedent|''
name|'class'
name|'MultiFlag'
op|'('
name|'Flag'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""A flag that can appear multiple time on the command-line.\n\n  The value of such a flag is a list that contains the individual values\n  from all the appearances of that flag on the command-line.\n\n  See the __doc__ for Flag for most behavior of this class.  Only\n  differences in behavior are described here:\n\n    * The default value may be either a single value or a list of values.\n      A single value is interpreted as the [value] singleton list.\n\n    * The value of the flag is always a list, even if the option was\n      only supplied once, and even if the default value is a single\n      value\n  """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'Flag'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'help'
op|'+='
string|"';\\n    repeat this option to specify a list of values'"
newline|'\n'
nl|'\n'
DECL|member|Parse
dedent|''
name|'def'
name|'Parse'
op|'('
name|'self'
op|','
name|'arguments'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parses one or more arguments with the installed parser.\n\n    Args:\n      arguments: a single argument or a list of arguments (typically a\n        list of default values); a single argument is converted\n        internally into a list containing one item.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'arguments'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
comment|'# Default value may be a list of values.  Most other arguments'
nl|'\n'
comment|'# will not be, so convert them into a single-item list to make'
nl|'\n'
comment|'# processing simpler below.'
nl|'\n'
indent|'      '
name|'arguments'
op|'='
op|'['
name|'arguments'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'present'
op|':'
newline|'\n'
comment|'# keep a backup reference to list of previously supplied option values'
nl|'\n'
indent|'      '
name|'values'
op|'='
name|'self'
op|'.'
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# "erase" the defaults with an empty list'
nl|'\n'
indent|'      '
name|'values'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'arguments'
op|':'
newline|'\n'
comment|'# have Flag superclass parse argument, overwriting self.value reference'
nl|'\n'
indent|'      '
name|'Flag'
op|'.'
name|'Parse'
op|'('
name|'self'
op|','
name|'item'
op|')'
comment|'# also increments self.present'
newline|'\n'
name|'values'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|"# put list of option values back in the 'value' attribute"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'value'
op|'='
name|'values'
newline|'\n'
nl|'\n'
DECL|member|Serialize
dedent|''
name|'def'
name|'Serialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'self'
op|'.'
name|'serializer'
op|':'
newline|'\n'
indent|'      '
name|'raise'
name|'FlagsError'
op|'('
string|'"Serializer not present for flag %s"'
op|'%'
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'      '
name|'return'
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'s'
op|'='
string|"''"
newline|'\n'
nl|'\n'
name|'multi_value'
op|'='
name|'self'
op|'.'
name|'value'
newline|'\n'
nl|'\n'
name|'for'
name|'self'
op|'.'
name|'value'
name|'in'
name|'multi_value'
op|':'
newline|'\n'
indent|'      '
name|'if'
name|'s'
op|':'
name|'s'
op|'+='
string|"' '"
newline|'\n'
name|'s'
op|'+='
name|'Flag'
op|'.'
name|'Serialize'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'value'
op|'='
name|'multi_value'
newline|'\n'
nl|'\n'
name|'return'
name|'s'
newline|'\n'
nl|'\n'
DECL|member|Type
dedent|''
name|'def'
name|'Type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|"'multi '"
op|'+'
name|'self'
op|'.'
name|'parser'
op|'.'
name|'Type'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_multi
dedent|''
dedent|''
name|'def'
name|'DEFINE_multi'
op|'('
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
nl|'\n'
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a generic MultiFlag that parses its args with a given parser.\n\n  Auxiliary function.  Normal users should NOT use it directly.\n\n  Developers who need to create their own \'Parser\' classes for options\n  which can appear multiple times can call this module function to\n  register their flags.\n  """'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'MultiFlag'
op|'('
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
op|'**'
name|'args'
op|')'
op|','
nl|'\n'
name|'flag_values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_multistring
dedent|''
name|'def'
name|'DEFINE_multistring'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value can be a list of any strings.\n\n  Use the flag on the command line multiple times to place multiple\n  string values into the list.  The \'default\' may be a single string\n  (which will be converted into a single-element list) or a list of\n  strings.\n  """'
newline|'\n'
name|'parser'
op|'='
name|'ArgumentParser'
op|'('
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'DEFINE_multi'
op|'('
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|DEFINE_multi_int
dedent|''
name|'def'
name|'DEFINE_multi_int'
op|'('
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'lower_bound'
op|'='
name|'None'
op|','
name|'upper_bound'
op|'='
name|'None'
op|','
nl|'\n'
name|'flag_values'
op|'='
name|'FLAGS'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'  '
string|'"""Registers a flag whose value can be a list of arbitrary integers.\n\n  Use the flag on the command line multiple times to place multiple\n  integer values into the list.  The \'default\' may be a single integer\n  (which will be converted into a single-element list) or a list of\n  integers.\n  """'
newline|'\n'
name|'parser'
op|'='
name|'IntegerParser'
op|'('
name|'lower_bound'
op|','
name|'upper_bound'
op|')'
newline|'\n'
name|'serializer'
op|'='
name|'ArgumentSerializer'
op|'('
op|')'
newline|'\n'
name|'DEFINE_multi'
op|'('
name|'parser'
op|','
name|'serializer'
op|','
name|'name'
op|','
name|'default'
op|','
name|'help'
op|','
name|'flag_values'
op|','
op|'**'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Now register the flags that we want to exist in all applications.'
nl|'\n'
comment|'# These are all defined with allow_override=1, so user-apps can use'
nl|'\n'
comment|'# these flagnames for their own purposes, if they want.'
nl|'\n'
dedent|''
name|'DEFINE_flag'
op|'('
name|'HelpFlag'
op|'('
op|')'
op|')'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'HelpshortFlag'
op|'('
op|')'
op|')'
newline|'\n'
name|'DEFINE_flag'
op|'('
name|'HelpXMLFlag'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Define special flags here so that help may be generated for them.'
nl|'\n'
DECL|variable|_SPECIAL_FLAGS
name|'_SPECIAL_FLAGS'
op|'='
name|'FlagValues'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'DEFINE_string'
op|'('
nl|'\n'
string|"'flagfile'"
op|','
string|'""'
op|','
nl|'\n'
string|'"Insert flag definitions from the given file into the command line."'
op|','
nl|'\n'
name|'_SPECIAL_FLAGS'
op|')'
newline|'\n'
nl|'\n'
name|'DEFINE_string'
op|'('
nl|'\n'
string|"'undefok'"
op|','
string|'""'
op|','
nl|'\n'
string|'"comma-separated list of flag names that it is okay to specify "'
nl|'\n'
string|'"on the command line even if the program does not define a flag "'
nl|'\n'
string|'"with that name.  IMPORTANT: flags in this list that have "'
nl|'\n'
string|'"arguments MUST use the --flag=value format."'
op|','
name|'_SPECIAL_FLAGS'
op|')'
newline|'\n'
endmarker|''
end_unit

begin_unit
string|'"""\n\n    Backend for unit-tests, using the Python :mod:`Queue` module.\n\n"""'
newline|'\n'
name|'from'
name|'Queue'
name|'import'
name|'Queue'
newline|'\n'
name|'from'
name|'carrot'
op|'.'
name|'backends'
op|'.'
name|'base'
name|'import'
name|'BaseMessage'
op|','
name|'BaseBackend'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
nl|'\n'
DECL|variable|mqueue
name|'mqueue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
name|'class'
name|'Message'
op|'('
name|'BaseMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Message received from the backend.\n\n    See :class:`carrot.backends.base.BaseMessage`.\n\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Backend
dedent|''
name|'class'
name|'Backend'
op|'('
name|'BaseBackend'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Backend using the Python :mod:`Queue` library. Usually only\n    used while executing unit tests.\n\n    Please not that this backend does not support queues, exchanges\n    or routing keys, so *all messages will be sent to all consumers*.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|Message
name|'Message'
op|'='
name|'Message'
newline|'\n'
nl|'\n'
DECL|member|get
name|'def'
name|'get'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the next waiting message from the queue.\n\n        :returns: A :class:`Message` instance, or ``None`` if there is\n            no messages waiting.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'mqueue'
op|'.'
name|'qsize'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'message_data'
op|','
name|'content_type'
op|','
name|'content_encoding'
op|'='
name|'mqueue'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'Message'
op|'('
name|'backend'
op|'='
name|'self'
op|','
name|'body'
op|'='
name|'message_data'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'content_type'
op|','
nl|'\n'
name|'content_encoding'
op|'='
name|'content_encoding'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'no_ack'
op|','
name|'callback'
op|','
name|'consumer_tag'
op|','
nl|'\n'
name|'nowait'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a consumer."""'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Go into consume mode."""'
newline|'\n'
name|'for'
name|'total_message_count'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'limit'
name|'and'
name|'total_message_count'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
newline|'\n'
nl|'\n'
dedent|''
name|'message'
op|'='
name|'self'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'if'
name|'message'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'callback'
op|'('
name|'message'
op|'.'
name|'decode'
op|'('
op|')'
op|','
name|'message'
op|')'
newline|'\n'
name|'yield'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|purge
dedent|''
dedent|''
dedent|''
name|'def'
name|'purge'
op|'('
name|'self'
op|','
name|'queue'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discard all messages in the queue."""'
newline|'\n'
name|'mqueue'
op|'='
name|'Queue'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_message
dedent|''
name|'def'
name|'prepare_message'
op|'('
name|'self'
op|','
name|'message_data'
op|','
name|'delivery_mode'
op|','
nl|'\n'
name|'content_type'
op|','
name|'content_encoding'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepare message for sending."""'
newline|'\n'
name|'return'
op|'('
name|'message_data'
op|','
name|'content_type'
op|','
name|'content_encoding'
op|')'
newline|'\n'
nl|'\n'
DECL|member|publish
dedent|''
name|'def'
name|'publish'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Publish a message to the queue."""'
newline|'\n'
name|'mqueue'
op|'.'
name|'put'
op|'('
name|'message'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

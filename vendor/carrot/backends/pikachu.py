begin_unit
name|'import'
name|'asyncore'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
nl|'\n'
name|'import'
name|'pika'
newline|'\n'
nl|'\n'
name|'from'
name|'carrot'
op|'.'
name|'backends'
op|'.'
name|'base'
name|'import'
name|'BaseMessage'
op|','
name|'BaseBackend'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_PORT
name|'DEFAULT_PORT'
op|'='
number|'5672'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
name|'class'
name|'Message'
op|'('
name|'BaseMessage'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'backend'
op|','
name|'amqp_message'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'channel'
op|','
name|'method'
op|','
name|'header'
op|','
name|'body'
op|'='
name|'amqp_message'
newline|'\n'
name|'self'
op|'.'
name|'_channel'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'_method'
op|'='
name|'method'
newline|'\n'
name|'self'
op|'.'
name|'_header'
op|'='
name|'header'
newline|'\n'
name|'self'
op|'.'
name|'backend'
op|'='
name|'backend'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'.'
name|'update'
op|'('
op|'{'
string|'"body"'
op|':'
name|'body'
op|','
nl|'\n'
string|'"delivery_tag"'
op|':'
name|'method'
op|'.'
name|'delivery_tag'
op|','
nl|'\n'
string|'"content_type"'
op|':'
name|'header'
op|'.'
name|'content_type'
op|','
nl|'\n'
string|'"content_encoding"'
op|':'
name|'header'
op|'.'
name|'content_encoding'
op|','
nl|'\n'
string|'"delivery_info"'
op|':'
name|'dict'
op|'('
nl|'\n'
name|'consumer_tag'
op|'='
name|'method'
op|'.'
name|'consumer_tag'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'method'
op|'.'
name|'routing_key'
op|','
nl|'\n'
name|'delivery_tag'
op|'='
name|'method'
op|'.'
name|'delivery_tag'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'method'
op|'.'
name|'exchange'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'super'
op|'('
name|'Message'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'backend'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SyncBackend
dedent|''
dedent|''
name|'class'
name|'SyncBackend'
op|'('
name|'BaseBackend'
op|')'
op|':'
newline|'\n'
DECL|variable|default_port
indent|'    '
name|'default_port'
op|'='
name|'DEFAULT_PORT'
newline|'\n'
DECL|variable|_connection_cls
name|'_connection_cls'
op|'='
name|'pika'
op|'.'
name|'BlockingConnection'
newline|'\n'
nl|'\n'
DECL|variable|Message
name|'Message'
op|'='
name|'Message'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'default_port'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"default_port"'
op|','
name|'self'
op|'.'
name|'default_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_channel
name|'def'
name|'_channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'callable'
op|'('
name|'self'
op|'.'
name|'_channel_ref'
op|')'
name|'and'
name|'self'
op|'.'
name|'_channel_ref'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|channel
name|'def'
name|'channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If no channel exists, a new one is requested."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_channel'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_channel'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_channel'
newline|'\n'
nl|'\n'
DECL|member|establish_connection
dedent|''
name|'def'
name|'establish_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Establish connection to the AMQP broker."""'
newline|'\n'
name|'conninfo'
op|'='
name|'self'
op|'.'
name|'connection'
newline|'\n'
name|'if'
name|'not'
name|'conninfo'
op|'.'
name|'port'
op|':'
newline|'\n'
indent|'            '
name|'conninfo'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'default_port'
newline|'\n'
dedent|''
name|'credentials'
op|'='
name|'pika'
op|'.'
name|'PlainCredentials'
op|'('
name|'conninfo'
op|'.'
name|'userid'
op|','
nl|'\n'
name|'conninfo'
op|'.'
name|'password'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_connection_cls'
op|'('
name|'pika'
op|'.'
name|'ConnectionParameters'
op|'('
nl|'\n'
name|'conninfo'
op|'.'
name|'hostname'
op|','
nl|'\n'
name|'port'
op|'='
name|'conninfo'
op|'.'
name|'port'
op|','
nl|'\n'
name|'virtual_host'
op|'='
name|'conninfo'
op|'.'
name|'virtual_host'
op|','
nl|'\n'
name|'credentials'
op|'='
name|'credentials'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close_connection
dedent|''
name|'def'
name|'close_connection'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the AMQP broker connection."""'
newline|'\n'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_exists
dedent|''
name|'def'
name|'queue_exists'
op|'('
name|'self'
op|','
name|'queue'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
comment|'# FIXME'
newline|'\n'
nl|'\n'
DECL|member|queue_delete
dedent|''
name|'def'
name|'queue_delete'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'if_unused'
op|'='
name|'False'
op|','
name|'if_empty'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete queue by name."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_delete'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
name|'if_unused'
op|'='
name|'if_unused'
op|','
nl|'\n'
name|'if_empty'
op|'='
name|'if_empty'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_purge
dedent|''
name|'def'
name|'queue_purge'
op|'('
name|'self'
op|','
name|'queue'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discard all messages in the queue. This will delete the messages\n        and results in an empty queue."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_purge'
op|'('
name|'queue'
op|'='
name|'queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_declare
dedent|''
name|'def'
name|'queue_declare'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'durable'
op|','
name|'exclusive'
op|','
name|'auto_delete'
op|','
nl|'\n'
name|'warn_if_exists'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a named queue."""'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_declare'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'durable'
op|'='
name|'durable'
op|','
nl|'\n'
name|'exclusive'
op|'='
name|'exclusive'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'auto_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exchange_declare
dedent|''
name|'def'
name|'exchange_declare'
op|'('
name|'self'
op|','
name|'exchange'
op|','
name|'type'
op|','
name|'durable'
op|','
name|'auto_delete'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare an named exchange."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'exchange_declare'
op|'('
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'type'
op|'='
name|'type'
op|','
nl|'\n'
name|'durable'
op|'='
name|'durable'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'auto_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_bind
dedent|''
name|'def'
name|'queue_bind'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
name|'arguments'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Bind queue to an exchange using a routing key."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_bind'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'routing_key'
op|','
nl|'\n'
name|'arguments'
op|'='
name|'arguments'
op|')'
newline|'\n'
nl|'\n'
DECL|member|message_to_python
dedent|''
name|'def'
name|'message_to_python'
op|'('
name|'self'
op|','
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert encoded message body back to a Python value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'Message'
op|'('
name|'backend'
op|'='
name|'self'
op|','
name|'amqp_message'
op|'='
name|'raw_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'no_ack'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receive a message from a declared queue by name.\n\n        :returns: A :class:`Message` object if a message was received,\n            ``None`` otherwise. If ``None`` was returned, it probably means\n            there was no messages waiting on the queue.\n\n        """'
newline|'\n'
name|'raw_message'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_get'
op|'('
name|'queue'
op|','
name|'no_ack'
op|'='
name|'no_ack'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'raw_message'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'message_to_python'
op|'('
name|'raw_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'no_ack'
op|','
name|'callback'
op|','
name|'consumer_tag'
op|','
nl|'\n'
name|'nowait'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a consumer."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'callback'
op|')'
newline|'\n'
DECL|function|_callback_decode
name|'def'
name|'_callback_decode'
op|'('
name|'channel'
op|','
name|'method'
op|','
name|'header'
op|','
name|'body'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'callback'
op|'('
op|'('
name|'channel'
op|','
name|'method'
op|','
name|'header'
op|','
name|'body'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_consume'
op|'('
name|'_callback_decode'
op|','
nl|'\n'
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'no_ack'
op|'='
name|'no_ack'
op|','
nl|'\n'
name|'consumer_tag'
op|'='
name|'consumer_tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an iterator that waits for one message at a time."""'
newline|'\n'
name|'for'
name|'total_message_count'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'limit'
name|'and'
name|'total_message_count'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection'
op|'.'
name|'drain_events'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|','
name|'consumer_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel a channel by consumer tag."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_channel'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_cancel'
op|'('
name|'consumer_tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the channel if open."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_channel'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_channel'
op|'.'
name|'handler'
op|'.'
name|'channel_close'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_channel'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|ack
dedent|''
name|'def'
name|'ack'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge a message by delivery tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_ack'
op|'('
name|'delivery_tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reject
dedent|''
name|'def'
name|'reject'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject a message by deliver tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_reject'
op|'('
name|'delivery_tag'
op|','
name|'requeue'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requeue
dedent|''
name|'def'
name|'requeue'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject and requeue a message by delivery tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_reject'
op|'('
name|'delivery_tag'
op|','
name|'requeue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_message
dedent|''
name|'def'
name|'prepare_message'
op|'('
name|'self'
op|','
name|'message_data'
op|','
name|'delivery_mode'
op|','
name|'priority'
op|'='
name|'None'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'None'
op|','
name|'content_encoding'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Encapsulate data into a AMQP message."""'
newline|'\n'
name|'properties'
op|'='
name|'pika'
op|'.'
name|'BasicProperties'
op|'('
name|'priority'
op|'='
name|'priority'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'content_type'
op|','
nl|'\n'
name|'content_encoding'
op|'='
name|'content_encoding'
op|','
nl|'\n'
name|'delivery_mode'
op|'='
name|'delivery_mode'
op|')'
newline|'\n'
name|'return'
name|'message_data'
op|','
name|'properties'
newline|'\n'
nl|'\n'
DECL|member|publish
dedent|''
name|'def'
name|'publish'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
name|'mandatory'
op|'='
name|'None'
op|','
nl|'\n'
name|'immediate'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Publish a message to a named exchange."""'
newline|'\n'
name|'body'
op|','
name|'properties'
op|'='
name|'message'
newline|'\n'
nl|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
nl|'\n'
dedent|''
name|'ret'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_publish'
op|'('
name|'body'
op|'='
name|'body'
op|','
nl|'\n'
name|'properties'
op|'='
name|'properties'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'routing_key'
op|','
nl|'\n'
name|'mandatory'
op|'='
name|'mandatory'
op|','
nl|'\n'
name|'immediate'
op|'='
name|'immediate'
op|')'
newline|'\n'
name|'if'
name|'mandatory'
name|'or'
name|'immediate'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|qos
dedent|''
dedent|''
name|'def'
name|'qos'
op|'('
name|'self'
op|','
name|'prefetch_size'
op|','
name|'prefetch_count'
op|','
name|'apply_global'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request specific Quality of Service."""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_qos'
op|'('
name|'prefetch_size'
op|','
name|'prefetch_count'
op|','
nl|'\n'
name|'apply_global'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flow
dedent|''
name|'def'
name|'flow'
op|'('
name|'self'
op|','
name|'active'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enable/disable flow from peer."""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'flow'
op|'('
name|'active'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AsyncoreBackend
dedent|''
dedent|''
name|'class'
name|'AsyncoreBackend'
op|'('
name|'SyncBackend'
op|')'
op|':'
newline|'\n'
DECL|variable|_connection_cls
indent|'    '
name|'_connection_cls'
op|'='
name|'pika'
op|'.'
name|'AsyncoreConnection'
newline|'\n'
dedent|''
endmarker|''
end_unit

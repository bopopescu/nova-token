begin_unit
string|'"""\n\nBackend base classes.\n\n"""'
newline|'\n'
name|'from'
name|'carrot'
name|'import'
name|'serialization'
newline|'\n'
nl|'\n'
DECL|variable|ACKNOWLEDGED_STATES
name|'ACKNOWLEDGED_STATES'
op|'='
name|'frozenset'
op|'('
op|'['
string|'"ACK"'
op|','
string|'"REJECTED"'
op|','
string|'"REQUEUED"'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessageStateError
name|'class'
name|'MessageStateError'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The message has already been acknowledged."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseMessage
dedent|''
name|'class'
name|'BaseMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for received messages."""'
newline|'\n'
DECL|variable|_state
name|'_state'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|MessageStateError
name|'MessageStateError'
op|'='
name|'MessageStateError'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'backend'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'backend'
op|'='
name|'backend'
newline|'\n'
name|'self'
op|'.'
name|'body'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"body"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delivery_tag'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"delivery_tag"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content_type'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"content_type"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'content_encoding'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"content_encoding"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'delivery_info'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"delivery_info"'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_decoded_cache'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
string|'"RECEIVED"'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize the message body, returning the original\n        python structure sent by the publisher."""'
newline|'\n'
name|'return'
name|'serialization'
op|'.'
name|'decode'
op|'('
name|'self'
op|'.'
name|'body'
op|','
name|'self'
op|'.'
name|'content_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'content_encoding'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|payload
name|'def'
name|'payload'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The decoded message."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_decoded_cache'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_decoded_cache'
op|'='
name|'self'
op|'.'
name|'decode'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_decoded_cache'
newline|'\n'
nl|'\n'
DECL|member|ack
dedent|''
name|'def'
name|'ack'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge this message as being processed.,\n        This will remove the message from the queue.\n\n        :raises MessageStateError: If the message has already been\n            acknowledged/requeued/rejected.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'acknowledged'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'MessageStateError'
op|'('
nl|'\n'
string|'"Message already acknowledged with state: %s"'
op|'%'
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'backend'
op|'.'
name|'ack'
op|'('
name|'self'
op|'.'
name|'delivery_tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
string|'"ACK"'
newline|'\n'
nl|'\n'
DECL|member|reject
dedent|''
name|'def'
name|'reject'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject this message.\n\n        The message will be discarded by the server.\n\n        :raises MessageStateError: If the message has already been\n            acknowledged/requeued/rejected.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'acknowledged'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'MessageStateError'
op|'('
nl|'\n'
string|'"Message already acknowledged with state: %s"'
op|'%'
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'backend'
op|'.'
name|'reject'
op|'('
name|'self'
op|'.'
name|'delivery_tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
string|'"REJECTED"'
newline|'\n'
nl|'\n'
DECL|member|requeue
dedent|''
name|'def'
name|'requeue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject this message and put it back on the queue.\n\n        You must not use this method as a means of selecting messages\n        to process.\n\n        :raises MessageStateError: If the message has already been\n            acknowledged/requeued/rejected.\n\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'acknowledged'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'self'
op|'.'
name|'MessageStateError'
op|'('
nl|'\n'
string|'"Message already acknowledged with state: %s"'
op|'%'
name|'self'
op|'.'
name|'_state'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'backend'
op|'.'
name|'requeue'
op|'('
name|'self'
op|'.'
name|'delivery_tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
string|'"REQUEUED"'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|acknowledged
name|'def'
name|'acknowledged'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_state'
name|'in'
name|'ACKNOWLEDGED_STATES'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseBackend
dedent|''
dedent|''
name|'class'
name|'BaseBackend'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for backends."""'
newline|'\n'
DECL|variable|default_port
name|'default_port'
op|'='
name|'None'
newline|'\n'
DECL|variable|extra_options
name|'extra_options'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'extra_options'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"extra_options"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_declare
dedent|''
name|'def'
name|'queue_declare'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a queue by name."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|queue_delete
dedent|''
name|'def'
name|'queue_delete'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete a queue by name."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|exchange_declare
dedent|''
name|'def'
name|'exchange_declare'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare an exchange by name."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|queue_bind
dedent|''
name|'def'
name|'queue_bind'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Bind a queue to an exchange."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Pop a message off the queue."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Iterate over the declared consumers."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the consumer."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|ack
dedent|''
name|'def'
name|'ack'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge the message."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|queue_purge
dedent|''
name|'def'
name|'queue_purge'
op|'('
name|'self'
op|','
name|'queue'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discard all messages in the queue. This will delete the messages\n        and results in an empty queue."""'
newline|'\n'
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|reject
dedent|''
name|'def'
name|'reject'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject the message."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|requeue
dedent|''
name|'def'
name|'requeue'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Requeue the message."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|purge
dedent|''
name|'def'
name|'purge'
op|'('
name|'self'
op|','
name|'queue'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discard all messages in the queue."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|message_to_python
dedent|''
name|'def'
name|'message_to_python'
op|'('
name|'self'
op|','
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert received message body to a python datastructure."""'
newline|'\n'
name|'return'
name|'raw_message'
newline|'\n'
nl|'\n'
DECL|member|prepare_message
dedent|''
name|'def'
name|'prepare_message'
op|'('
name|'self'
op|','
name|'message_data'
op|','
name|'delivery_mode'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Prepare message for sending."""'
newline|'\n'
name|'return'
name|'message_data'
newline|'\n'
nl|'\n'
DECL|member|publish
dedent|''
name|'def'
name|'publish'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Publish a message."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the backend."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|establish_connection
dedent|''
name|'def'
name|'establish_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Establish a connection to the backend."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|close_connection
dedent|''
name|'def'
name|'close_connection'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the connection."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|flow
dedent|''
name|'def'
name|'flow'
op|'('
name|'self'
op|','
name|'active'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enable/disable flow from peer."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|qos
dedent|''
name|'def'
name|'qos'
op|'('
name|'self'
op|','
name|'prefetch_size'
op|','
name|'prefetch_count'
op|','
name|'apply_global'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request specific Quality of Service."""'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

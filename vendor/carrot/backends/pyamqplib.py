begin_unit
string|'"""\n\n`amqplib`_ backend for carrot.\n\n.. _`amqplib`: http://barryp.org/software/py-amqplib/\n\n"""'
newline|'\n'
name|'from'
name|'amqplib'
name|'import'
name|'client_0_8'
name|'as'
name|'amqp'
newline|'\n'
name|'from'
name|'amqplib'
op|'.'
name|'client_0_8'
op|'.'
name|'exceptions'
name|'import'
name|'AMQPChannelException'
newline|'\n'
name|'from'
name|'amqplib'
op|'.'
name|'client_0_8'
op|'.'
name|'serialization'
name|'import'
name|'AMQPReader'
op|','
name|'AMQPWriter'
newline|'\n'
name|'from'
name|'carrot'
op|'.'
name|'backends'
op|'.'
name|'base'
name|'import'
name|'BaseMessage'
op|','
name|'BaseBackend'
newline|'\n'
name|'from'
name|'itertools'
name|'import'
name|'count'
newline|'\n'
name|'import'
name|'warnings'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
nl|'\n'
DECL|variable|DEFAULT_PORT
name|'DEFAULT_PORT'
op|'='
number|'5672'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
name|'class'
name|'Connection'
op|'('
name|'amqp'
op|'.'
name|'Connection'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|drain_events
indent|'    '
name|'def'
name|'drain_events'
op|'('
name|'self'
op|','
name|'allowed_methods'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wait for an event on any channel."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'wait_multi'
op|'('
name|'self'
op|'.'
name|'channels'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wait_multi
dedent|''
name|'def'
name|'wait_multi'
op|'('
name|'self'
op|','
name|'channels'
op|','
name|'allowed_methods'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wait for an event on a channel."""'
newline|'\n'
name|'chanmap'
op|'='
name|'dict'
op|'('
op|'('
name|'chan'
op|'.'
name|'channel_id'
op|','
name|'chan'
op|')'
name|'for'
name|'chan'
name|'in'
name|'channels'
op|')'
newline|'\n'
name|'chanid'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|'='
name|'self'
op|'.'
name|'_wait_multiple'
op|'('
nl|'\n'
name|'chanmap'
op|'.'
name|'keys'
op|'('
op|')'
op|','
name|'allowed_methods'
op|')'
newline|'\n'
nl|'\n'
name|'channel'
op|'='
name|'chanmap'
op|'['
name|'chanid'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'content'
name|'and'
name|'channel'
op|'.'
name|'auto_decode'
name|'and'
name|'hasattr'
op|'('
name|'content'
op|','
string|"'content_encoding'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'content'
op|'.'
name|'body'
op|'='
name|'content'
op|'.'
name|'body'
op|'.'
name|'decode'
op|'('
name|'content'
op|'.'
name|'content_encoding'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'amqp_method'
op|'='
name|'channel'
op|'.'
name|'_METHOD_MAP'
op|'.'
name|'get'
op|'('
name|'method_sig'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'amqp_method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'Unknown AMQP method (%d, %d)'"
op|'%'
name|'method_sig'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'content'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'amqp_method'
op|'('
name|'channel'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'amqp_method'
op|'('
name|'channel'
op|','
name|'args'
op|','
name|'content'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_multiple
dedent|''
dedent|''
name|'def'
name|'_wait_multiple'
op|'('
name|'self'
op|','
name|'channel_ids'
op|','
name|'allowed_methods'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'channel_id'
name|'in'
name|'channel_ids'
op|':'
newline|'\n'
indent|'            '
name|'method_queue'
op|'='
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel_id'
op|']'
op|'.'
name|'method_queue'
newline|'\n'
name|'for'
name|'queued_method'
name|'in'
name|'method_queue'
op|':'
newline|'\n'
indent|'                '
name|'method_sig'
op|'='
name|'queued_method'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
op|'('
name|'allowed_methods'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'method_sig'
name|'in'
name|'allowed_methods'
op|')'
name|'or'
op|'('
name|'method_sig'
op|'=='
op|'('
number|'20'
op|','
number|'40'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'method_queue'
op|'.'
name|'remove'
op|'('
name|'queued_method'
op|')'
newline|'\n'
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|'='
name|'queued_method'
newline|'\n'
name|'return'
name|'channel_id'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
newline|'\n'
nl|'\n'
comment|'# Nothing queued, need to wait for a method from the peer'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'channel'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
op|'='
name|'self'
op|'.'
name|'method_reader'
op|'.'
name|'read_method'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'channel'
name|'in'
name|'channel_ids'
op|')'
name|'and'
op|'('
op|'('
name|'allowed_methods'
name|'is'
name|'None'
op|')'
name|'or'
op|'('
name|'method_sig'
name|'in'
name|'allowed_methods'
op|')'
name|'or'
op|'('
name|'method_sig'
op|'=='
op|'('
number|'20'
op|','
number|'40'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'channel'
op|','
name|'method_sig'
op|','
name|'args'
op|','
name|'content'
newline|'\n'
nl|'\n'
comment|'# Not the channel and/or method we were looking for. Queue'
nl|'\n'
comment|'# this method for later'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'channels'
op|'['
name|'channel'
op|']'
op|'.'
name|'method_queue'
op|'.'
name|'append'
op|'('
op|'('
name|'method_sig'
op|','
nl|'\n'
name|'args'
op|','
nl|'\n'
name|'content'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# If we just queued up a method for channel 0 (the Connection'
nl|'\n'
comment|"# itself) it's probably a close method in reaction to some"
nl|'\n'
comment|'# error, so deal with it right away.'
nl|'\n'
comment|'#'
nl|'\n'
name|'if'
name|'channel'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QueueAlreadyExistsWarning
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'QueueAlreadyExistsWarning'
op|'('
name|'UserWarning'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A queue with that name already exists, so a recently changed\n    ``routing_key`` or other settings might be ignored unless you\n    rename the queue or restart the broker."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Message
dedent|''
name|'class'
name|'Message'
op|'('
name|'BaseMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A message received by the broker.\n\n    Usually you don\'t insantiate message objects yourself, but receive\n    them using a :class:`carrot.messaging.Consumer`.\n\n    :param backend: see :attr:`backend`.\n    :param amqp_message: see :attr:`_amqp_message`.\n\n\n    .. attribute:: body\n\n        The message body.\n\n    .. attribute:: delivery_tag\n\n        The message delivery tag, uniquely identifying this message.\n\n    .. attribute:: backend\n\n        The message backend used.\n        A subclass of :class:`carrot.backends.base.BaseBackend`.\n\n    .. attribute:: _amqp_message\n\n        A :class:`amqplib.client_0_8.basic_message.Message` instance.\n        This is a private attribute and should not be accessed by\n        production code.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'backend'
op|','
name|'amqp_message'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_amqp_message'
op|'='
name|'amqp_message'
newline|'\n'
name|'self'
op|'.'
name|'backend'
op|'='
name|'backend'
newline|'\n'
nl|'\n'
name|'for'
name|'attr_name'
name|'in'
op|'('
string|'"body"'
op|','
nl|'\n'
string|'"delivery_tag"'
op|','
nl|'\n'
string|'"content_type"'
op|','
nl|'\n'
string|'"content_encoding"'
op|','
nl|'\n'
string|'"delivery_info"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
name|'attr_name'
op|']'
op|'='
name|'getattr'
op|'('
name|'amqp_message'
op|','
name|'attr_name'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'Message'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'backend'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Backend
dedent|''
dedent|''
name|'class'
name|'Backend'
op|'('
name|'BaseBackend'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""amqplib backend\n\n    :param connection: see :attr:`connection`.\n\n\n    .. attribute:: connection\n\n    A :class:`carrot.connection.BrokerConnection` instance. An established\n    connection to the broker.\n\n    """'
newline|'\n'
DECL|variable|default_port
name|'default_port'
op|'='
name|'DEFAULT_PORT'
newline|'\n'
nl|'\n'
DECL|variable|Message
name|'Message'
op|'='
name|'Message'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'default_port'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"default_port"'
op|','
name|'self'
op|'.'
name|'default_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|_channel
name|'def'
name|'_channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'callable'
op|'('
name|'self'
op|'.'
name|'_channel_ref'
op|')'
name|'and'
name|'self'
op|'.'
name|'_channel_ref'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|channel
name|'def'
name|'channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If no channel exists, a new one is requested."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_channel'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'weakref'
op|'.'
name|'ref'
op|'('
name|'self'
op|'.'
name|'connection'
op|'.'
name|'get_channel'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_channel'
newline|'\n'
nl|'\n'
DECL|member|establish_connection
dedent|''
name|'def'
name|'establish_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Establish connection to the AMQP broker."""'
newline|'\n'
name|'conninfo'
op|'='
name|'self'
op|'.'
name|'connection'
newline|'\n'
name|'if'
name|'not'
name|'conninfo'
op|'.'
name|'port'
op|':'
newline|'\n'
indent|'            '
name|'conninfo'
op|'.'
name|'port'
op|'='
name|'self'
op|'.'
name|'default_port'
newline|'\n'
dedent|''
name|'return'
name|'Connection'
op|'('
name|'host'
op|'='
name|'conninfo'
op|'.'
name|'host'
op|','
nl|'\n'
name|'userid'
op|'='
name|'conninfo'
op|'.'
name|'userid'
op|','
nl|'\n'
name|'password'
op|'='
name|'conninfo'
op|'.'
name|'password'
op|','
nl|'\n'
name|'virtual_host'
op|'='
name|'conninfo'
op|'.'
name|'virtual_host'
op|','
nl|'\n'
name|'insist'
op|'='
name|'conninfo'
op|'.'
name|'insist'
op|','
nl|'\n'
name|'ssl'
op|'='
name|'conninfo'
op|'.'
name|'ssl'
op|','
nl|'\n'
name|'connect_timeout'
op|'='
name|'conninfo'
op|'.'
name|'connect_timeout'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close_connection
dedent|''
name|'def'
name|'close_connection'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the AMQP broker connection."""'
newline|'\n'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_exists
dedent|''
name|'def'
name|'queue_exists'
op|'('
name|'self'
op|','
name|'queue'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if a queue has been declared.\n\n        :rtype bool:\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_declare'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
name|'passive'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AMQPChannelException'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'amqp_reply_code'
op|'=='
number|'404'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'raise'
name|'e'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|queue_delete
dedent|''
dedent|''
name|'def'
name|'queue_delete'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'if_unused'
op|'='
name|'False'
op|','
name|'if_empty'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete queue by name."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_delete'
op|'('
name|'queue'
op|','
name|'if_unused'
op|','
name|'if_empty'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_purge
dedent|''
name|'def'
name|'queue_purge'
op|'('
name|'self'
op|','
name|'queue'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Discard all messages in the queue. This will delete the messages\n        and results in an empty queue."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_purge'
op|'('
name|'queue'
op|'='
name|'queue'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_declare
dedent|''
name|'def'
name|'queue_declare'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'durable'
op|','
name|'exclusive'
op|','
name|'auto_delete'
op|','
nl|'\n'
name|'warn_if_exists'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a named queue."""'
newline|'\n'
nl|'\n'
name|'if'
name|'warn_if_exists'
name|'and'
name|'self'
op|'.'
name|'queue_exists'
op|'('
name|'queue'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'warnings'
op|'.'
name|'warn'
op|'('
name|'QueueAlreadyExistsWarning'
op|'('
nl|'\n'
name|'QueueAlreadyExistsWarning'
op|'.'
name|'__doc__'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_declare'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'durable'
op|'='
name|'durable'
op|','
nl|'\n'
name|'exclusive'
op|'='
name|'exclusive'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'auto_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|exchange_declare
dedent|''
name|'def'
name|'exchange_declare'
op|'('
name|'self'
op|','
name|'exchange'
op|','
name|'type'
op|','
name|'durable'
op|','
name|'auto_delete'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare an named exchange."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'exchange_declare'
op|'('
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'type'
op|'='
name|'type'
op|','
nl|'\n'
name|'durable'
op|'='
name|'durable'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'auto_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|member|queue_bind
dedent|''
name|'def'
name|'queue_bind'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
name|'arguments'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Bind queue to an exchange using a routing key."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'queue_bind'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'routing_key'
op|','
nl|'\n'
name|'arguments'
op|'='
name|'arguments'
op|')'
newline|'\n'
nl|'\n'
DECL|member|message_to_python
dedent|''
name|'def'
name|'message_to_python'
op|'('
name|'self'
op|','
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert encoded message body back to a Python value."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'Message'
op|'('
name|'backend'
op|'='
name|'self'
op|','
name|'amqp_message'
op|'='
name|'raw_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'no_ack'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receive a message from a declared queue by name.\n\n        :returns: A :class:`Message` object if a message was received,\n            ``None`` otherwise. If ``None`` was returned, it probably means\n            there was no messages waiting on the queue.\n\n        """'
newline|'\n'
name|'raw_message'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_get'
op|'('
name|'queue'
op|','
name|'no_ack'
op|'='
name|'no_ack'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'raw_message'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'message_to_python'
op|'('
name|'raw_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
name|'queue'
op|','
name|'no_ack'
op|','
name|'callback'
op|','
name|'consumer_tag'
op|','
nl|'\n'
name|'nowait'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a consumer."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_consume'
op|'('
name|'queue'
op|'='
name|'queue'
op|','
nl|'\n'
name|'no_ack'
op|'='
name|'no_ack'
op|','
nl|'\n'
name|'callback'
op|'='
name|'callback'
op|','
nl|'\n'
name|'consumer_tag'
op|'='
name|'consumer_tag'
op|','
nl|'\n'
name|'nowait'
op|'='
name|'nowait'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns an iterator that waits for one message at a time."""'
newline|'\n'
name|'for'
name|'total_message_count'
name|'in'
name|'count'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'limit'
name|'and'
name|'total_message_count'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|','
name|'consumer_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel a channel by consumer tag."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_cancel'
op|'('
name|'consumer_tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the channel if open."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_channel'
name|'and'
name|'self'
op|'.'
name|'_channel'
op|'.'
name|'is_open'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_channel'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_channel_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|ack
dedent|''
name|'def'
name|'ack'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Acknowledge a message by delivery tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_ack'
op|'('
name|'delivery_tag'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reject
dedent|''
name|'def'
name|'reject'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject a message by deliver tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_reject'
op|'('
name|'delivery_tag'
op|','
name|'requeue'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|requeue
dedent|''
name|'def'
name|'requeue'
op|'('
name|'self'
op|','
name|'delivery_tag'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reject and requeue a message by delivery tag."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_reject'
op|'('
name|'delivery_tag'
op|','
name|'requeue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|prepare_message
dedent|''
name|'def'
name|'prepare_message'
op|'('
name|'self'
op|','
name|'message_data'
op|','
name|'delivery_mode'
op|','
name|'priority'
op|'='
name|'None'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'None'
op|','
name|'content_encoding'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Encapsulate data into a AMQP message."""'
newline|'\n'
name|'message'
op|'='
name|'amqp'
op|'.'
name|'Message'
op|'('
name|'message_data'
op|','
name|'priority'
op|'='
name|'priority'
op|','
nl|'\n'
name|'content_type'
op|'='
name|'content_type'
op|','
nl|'\n'
name|'content_encoding'
op|'='
name|'content_encoding'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'properties'
op|'['
string|'"delivery_mode"'
op|']'
op|'='
name|'delivery_mode'
newline|'\n'
name|'return'
name|'message'
newline|'\n'
nl|'\n'
DECL|member|publish
dedent|''
name|'def'
name|'publish'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'exchange'
op|','
name|'routing_key'
op|','
name|'mandatory'
op|'='
name|'None'
op|','
nl|'\n'
name|'immediate'
op|'='
name|'None'
op|','
name|'headers'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Publish a message to a named exchange."""'
newline|'\n'
nl|'\n'
name|'if'
name|'headers'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'.'
name|'properties'
op|'['
string|'"headers"'
op|']'
op|'='
name|'headers'
newline|'\n'
nl|'\n'
dedent|''
name|'ret'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_publish'
op|'('
name|'message'
op|','
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'routing_key'
op|','
nl|'\n'
name|'mandatory'
op|'='
name|'mandatory'
op|','
nl|'\n'
name|'immediate'
op|'='
name|'immediate'
op|')'
newline|'\n'
name|'if'
name|'mandatory'
name|'or'
name|'immediate'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|qos
dedent|''
dedent|''
name|'def'
name|'qos'
op|'('
name|'self'
op|','
name|'prefetch_size'
op|','
name|'prefetch_count'
op|','
name|'apply_global'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Request specific Quality of Service."""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'basic_qos'
op|'('
name|'prefetch_size'
op|','
name|'prefetch_count'
op|','
nl|'\n'
name|'apply_global'
op|')'
newline|'\n'
nl|'\n'
DECL|member|flow
dedent|''
name|'def'
name|'flow'
op|'('
name|'self'
op|','
name|'active'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Enable/disable flow from peer."""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'flow'
op|'('
name|'active'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

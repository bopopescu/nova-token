begin_unit
string|'"""\nCentralized support for encoding/decoding of data structures.\nRequires a json library (`cjson`_, `simplejson`_, or `Python 2.6+`_).\n\nOptionally installs support for ``YAML`` if the necessary\nPyYAML is installed.\n\n.. _`cjson`: http://pypi.python.org/pypi/python-cjson/\n.. _`simplejson`: http://code.google.com/p/simplejson/\n.. _`Python 2.6+`: http://docs.python.org/library/json.html\n.. _`PyYAML`: http://pyyaml.org/\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'codecs'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'SerializerNotInstalled'"
op|','
string|"'registry'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SerializerNotInstalled
name|'class'
name|'SerializerNotInstalled'
op|'('
name|'StandardError'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Support for the requested serialization type is not installed"""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SerializerRegistry
dedent|''
name|'class'
name|'SerializerRegistry'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The registry keeps track of serialization methods."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_encoders'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_decoders'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_default_encode'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_default_content_type'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_default_content_encoding'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'encoder'
op|','
name|'decoder'
op|','
name|'content_type'
op|','
nl|'\n'
name|'content_encoding'
op|'='
string|"'utf-8'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Register a new encoder/decoder.\n\n        :param name: A convenience name for the serialization method.\n\n        :param encoder: A method that will be passed a python data structure\n            and should return a string representing the serialized data.\n            If ``None``, then only a decoder will be registered. Encoding\n            will not be possible.\n\n        :param decoder: A method that will be passed a string representing\n            serialized data and should return a python data structure.\n            If ``None``, then only an encoder will be registered.\n            Decoding will not be possible.\n\n        :param content_type: The mime-type describing the serialized\n            structure.\n\n        :param content_encoding: The content encoding (character set) that\n            the :param:`decoder` method will be returning. Will usually be\n            ``utf-8``, ``us-ascii``, or ``binary``.\n\n        """'
newline|'\n'
name|'if'
name|'encoder'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_encoders'
op|'['
name|'name'
op|']'
op|'='
op|'('
name|'content_type'
op|','
name|'content_encoding'
op|','
name|'encoder'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'decoder'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_decoders'
op|'['
name|'content_type'
op|']'
op|'='
name|'decoder'
newline|'\n'
nl|'\n'
DECL|member|_set_default_serializer
dedent|''
dedent|''
name|'def'
name|'_set_default_serializer'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Set the default serialization method used by this library.\n\n        :param name: The name of the registered serialization method.\n            For example, ``json`` (default), ``pickle``, ``yaml``,\n            or any custom methods registered using :meth:`register`.\n\n        :raises SerializerNotInstalled: If the serialization method\n            requested is not available.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'self'
op|'.'
name|'_default_content_type'
op|','
name|'self'
op|'.'
name|'_default_content_encoding'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_default_encode'
op|')'
op|'='
name|'self'
op|'.'
name|'_encoders'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SerializerNotInstalled'
op|'('
nl|'\n'
string|'"No encoder installed for %s"'
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|encode
dedent|''
dedent|''
name|'def'
name|'encode'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'serializer'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Serialize a data structure into a string suitable for sending\n        as an AMQP message body.\n\n        :param data: The message data to send. Can be a list,\n            dictionary or a string.\n\n        :keyword serializer: An optional string representing\n            the serialization method you want the data marshalled\n            into. (For example, ``json``, ``raw``, or ``pickle``).\n\n            If ``None`` (default), then `JSON`_ will be used, unless\n            ``data`` is a ``str`` or ``unicode`` object. In this\n            latter case, no serialization occurs as it would be\n            unnecessary.\n\n            Note that if ``serializer`` is specified, then that\n            serialization method will be used even if a ``str``\n            or ``unicode`` object is passed in.\n\n        :returns: A three-item tuple containing the content type\n            (e.g., ``application/json``), content encoding, (e.g.,\n            ``utf-8``) and a string containing the serialized\n            data.\n\n        :raises SerializerNotInstalled: If the serialization method\n              requested is not available.\n        """'
newline|'\n'
name|'if'
name|'serializer'
op|'=='
string|'"raw"'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'raw_encode'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'serializer'
name|'and'
name|'not'
name|'self'
op|'.'
name|'_encoders'
op|'.'
name|'get'
op|'('
name|'serializer'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'SerializerNotInstalled'
op|'('
nl|'\n'
string|'"No encoder installed for %s"'
op|'%'
name|'serializer'
op|')'
newline|'\n'
nl|'\n'
comment|'# If a raw string was sent, assume binary encoding'
nl|'\n'
comment|"# (it's likely either ASCII or a raw binary file, but 'binary'"
nl|'\n'
comment|'# charset will encompass both, even if not ideal.'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'serializer'
name|'and'
name|'isinstance'
op|'('
name|'data'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
comment|'# In Python 3+, this would be "bytes"; allow binary data to be'
nl|'\n'
comment|'# sent as a message without getting encoder errors'
nl|'\n'
indent|'            '
name|'return'
string|'"application/data"'
op|','
string|'"binary"'
op|','
name|'data'
newline|'\n'
nl|'\n'
comment|'# For unicode objects, force it into a string'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'serializer'
name|'and'
name|'isinstance'
op|'('
name|'data'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'payload'
op|'='
name|'data'
op|'.'
name|'encode'
op|'('
string|'"utf-8"'
op|')'
newline|'\n'
name|'return'
string|'"text/plain"'
op|','
string|'"utf-8"'
op|','
name|'payload'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'serializer'
op|':'
newline|'\n'
indent|'            '
name|'content_type'
op|','
name|'content_encoding'
op|','
name|'encoder'
op|'='
name|'self'
op|'.'
name|'_encoders'
op|'['
name|'serializer'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'encoder'
op|'='
name|'self'
op|'.'
name|'_default_encode'
newline|'\n'
name|'content_type'
op|'='
name|'self'
op|'.'
name|'_default_content_type'
newline|'\n'
name|'content_encoding'
op|'='
name|'self'
op|'.'
name|'_default_content_encoding'
newline|'\n'
nl|'\n'
dedent|''
name|'payload'
op|'='
name|'encoder'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
name|'content_type'
op|','
name|'content_encoding'
op|','
name|'payload'
newline|'\n'
nl|'\n'
DECL|member|decode
dedent|''
name|'def'
name|'decode'
op|'('
name|'self'
op|','
name|'data'
op|','
name|'content_type'
op|','
name|'content_encoding'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deserialize a data stream as serialized using ``encode``\n        based on :param:`content_type`.\n\n        :param data: The message data to deserialize.\n\n        :param content_type: The content-type of the data.\n            (e.g., ``application/json``).\n\n        :param content_encoding: The content-encoding of the data.\n            (e.g., ``utf-8``, ``binary``, or ``us-ascii``).\n\n        :returns: The unserialized data.\n        """'
newline|'\n'
name|'content_type'
op|'='
name|'content_type'
name|'or'
string|"'application/data'"
newline|'\n'
name|'content_encoding'
op|'='
op|'('
name|'content_encoding'
name|'or'
string|"'utf-8'"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Don't decode 8-bit strings or unicode objects"
nl|'\n'
name|'if'
name|'content_encoding'
name|'not'
name|'in'
op|'('
string|"'binary'"
op|','
string|"'ascii-8bit'"
op|')'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'data'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'codecs'
op|'.'
name|'decode'
op|'('
name|'data'
op|','
name|'content_encoding'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'decoder'
op|'='
name|'self'
op|'.'
name|'_decoders'
op|'['
name|'content_type'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'data'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'decoder'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
string|'"""\n.. data:: registry\n\nGlobal registry of serializers/deserializers.\n\n"""'
newline|'\n'
DECL|variable|registry
name|'registry'
op|'='
name|'SerializerRegistry'
op|'('
op|')'
newline|'\n'
nl|'\n'
string|'"""\n.. function:: encode(data, serializer=default_serializer)\n\nEncode data using the registry\'s default encoder.\n\n"""'
newline|'\n'
DECL|variable|encode
name|'encode'
op|'='
name|'registry'
op|'.'
name|'encode'
newline|'\n'
nl|'\n'
string|'"""\n.. function:: decode(data, content_type, content_encoding):\n\nDecode data using the registry\'s default decoder.\n\n"""'
newline|'\n'
DECL|variable|decode
name|'decode'
op|'='
name|'registry'
op|'.'
name|'decode'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|raw_encode
name|'def'
name|'raw_encode'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Special case serializer."""'
newline|'\n'
name|'content_type'
op|'='
string|"'application/data'"
newline|'\n'
name|'payload'
op|'='
name|'data'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'payload'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'content_encoding'
op|'='
string|"'utf-8'"
newline|'\n'
name|'payload'
op|'='
name|'payload'
op|'.'
name|'encode'
op|'('
name|'content_encoding'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'content_encoding'
op|'='
string|"'binary'"
newline|'\n'
dedent|''
name|'return'
name|'content_type'
op|','
name|'content_encoding'
op|','
name|'payload'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_json
dedent|''
name|'def'
name|'register_json'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Register a encoder/decoder for JSON serialization."""'
newline|'\n'
name|'from'
name|'anyjson'
name|'import'
name|'serialize'
name|'as'
name|'json_serialize'
newline|'\n'
name|'from'
name|'anyjson'
name|'import'
name|'deserialize'
name|'as'
name|'json_deserialize'
newline|'\n'
nl|'\n'
name|'registry'
op|'.'
name|'register'
op|'('
string|"'json'"
op|','
name|'json_serialize'
op|','
name|'json_deserialize'
op|','
nl|'\n'
name|'content_type'
op|'='
string|"'application/json'"
op|','
nl|'\n'
name|'content_encoding'
op|'='
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_yaml
dedent|''
name|'def'
name|'register_yaml'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Register a encoder/decoder for YAML serialization.\n\n    It is slower than JSON, but allows for more data types\n    to be serialized. Useful if you need to send data such as dates"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'yaml'
newline|'\n'
name|'registry'
op|'.'
name|'register'
op|'('
string|"'yaml'"
op|','
name|'yaml'
op|'.'
name|'safe_dump'
op|','
name|'yaml'
op|'.'
name|'safe_load'
op|','
nl|'\n'
name|'content_type'
op|'='
string|"'application/x-yaml'"
op|','
nl|'\n'
name|'content_encoding'
op|'='
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
nl|'\n'
DECL|function|not_available
indent|'        '
name|'def'
name|'not_available'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""In case a client receives a yaml message, but yaml\n            isn\'t installed."""'
newline|'\n'
name|'raise'
name|'SerializerNotInstalled'
op|'('
nl|'\n'
string|'"No decoder installed for YAML. Install the PyYAML library"'
op|')'
newline|'\n'
dedent|''
name|'registry'
op|'.'
name|'register'
op|'('
string|"'yaml'"
op|','
name|'None'
op|','
name|'not_available'
op|','
string|"'application/x-yaml'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_pickle
dedent|''
dedent|''
name|'def'
name|'register_pickle'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The fastest serialization method, but restricts\n    you to python clients."""'
newline|'\n'
name|'import'
name|'cPickle'
newline|'\n'
name|'registry'
op|'.'
name|'register'
op|'('
string|"'pickle'"
op|','
name|'cPickle'
op|'.'
name|'dumps'
op|','
name|'cPickle'
op|'.'
name|'loads'
op|','
nl|'\n'
name|'content_type'
op|'='
string|"'application/x-python-serialize'"
op|','
nl|'\n'
name|'content_encoding'
op|'='
string|"'binary'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Register the base serialization methods.'
nl|'\n'
dedent|''
name|'register_json'
op|'('
op|')'
newline|'\n'
name|'register_pickle'
op|'('
op|')'
newline|'\n'
name|'register_yaml'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# JSON is assumed to always be available, so is the default.'
nl|'\n'
comment|'# (this matches the historical use of carrot.)'
nl|'\n'
name|'registry'
op|'.'
name|'_set_default_serializer'
op|'('
string|"'json'"
op|')'
newline|'\n'
endmarker|''
end_unit

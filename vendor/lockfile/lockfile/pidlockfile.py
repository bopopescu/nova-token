begin_unit
comment|'# -*- coding: utf-8 -*-'
nl|'\n'
nl|'\n'
comment|'# pidlockfile.py'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright \xc2\xa9 2008\xe2\x80\x932009 Ben Finney <ben+python@benfinney.id.au>'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This is free software: you may copy, modify, and/or distribute this work'
nl|'\n'
comment|'# under the terms of the Python Software Foundation License, version 2 or'
nl|'\n'
comment|'# later as published by the Python Software Foundation.'
nl|'\n'
comment|'# No warranty expressed or implied. See the file LICENSE.PSF-2 for details.'
nl|'\n'
nl|'\n'
string|'""" Lockfile behaviour implemented via Unix PID files.\n    """'
newline|'\n'
nl|'\n'
name|'from'
name|'__future__'
name|'import'
name|'absolute_import'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
op|'.'
name|'import'
op|'('
name|'LockBase'
op|','
name|'AlreadyLocked'
op|','
name|'LockFailed'
op|','
name|'NotLocked'
op|','
name|'NotMyLock'
op|','
nl|'\n'
name|'LockTimeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PIDLockFile
name|'class'
name|'PIDLockFile'
op|'('
name|'LockBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Lockfile implemented as a Unix PID file.\n\n    The lock file is a normal file named by the attribute `path`.\n    A lock\'s PID file contains a single line of text, containing\n    the process ID (PID) of the process that acquired the lock.\n\n    >>> lock = PIDLockFile(\'somefile\')\n    >>> lock = PIDLockFile(\'somefile\', threaded=False)\n    """'
newline|'\n'
nl|'\n'
DECL|member|read_pid
name|'def'
name|'read_pid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Get the PID from the lock file.\n            """'
newline|'\n'
name|'return'
name|'read_pid_from_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|is_locked
dedent|''
name|'def'
name|'is_locked'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Test if the lock is currently held.\n\n            The lock is held if the PID file for this lock exists.\n\n            """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|i_am_locking
dedent|''
name|'def'
name|'i_am_locking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Test if the lock is held by the current process.\n\n        Returns ``True`` if the current process ID matches the\n        number stored in the PID file.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'is_locked'
op|'('
op|')'
name|'and'
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
op|'=='
name|'self'
op|'.'
name|'read_pid'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|acquire
dedent|''
name|'def'
name|'acquire'
op|'('
name|'self'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Acquire the lock.\n\n        Creates the PID file for this lock, or raises an error if\n        the lock could not be acquired.\n        """'
newline|'\n'
nl|'\n'
name|'end_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'if'
name|'timeout'
name|'is'
name|'not'
name|'None'
name|'and'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'end_time'
op|'+='
name|'timeout'
newline|'\n'
nl|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'write_pid_to_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EEXIST'
op|':'
newline|'\n'
comment|'# The lock creation failed.  Maybe sleep a bit.'
nl|'\n'
indent|'                    '
name|'if'
name|'timeout'
name|'is'
name|'not'
name|'None'
name|'and'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'>'
name|'end_time'
op|':'
newline|'\n'
indent|'                        '
name|'if'
name|'timeout'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'LockTimeout'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                            '
name|'raise'
name|'AlreadyLocked'
newline|'\n'
dedent|''
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
name|'timeout'
name|'is'
name|'not'
name|'None'
name|'and'
name|'timeout'
op|'/'
number|'10'
name|'or'
number|'0.1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'LockFailed'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|release
dedent|''
dedent|''
dedent|''
name|'def'
name|'release'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Release the lock.\n\n            Removes the PID file to release the lock, or raises an\n            error if the current process does not hold the lock.\n\n            """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'is_locked'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotLocked'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'i_am_locking'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotMyLock'
newline|'\n'
dedent|''
name|'remove_existing_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|break_lock
dedent|''
name|'def'
name|'break_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Break an existing lock.\n\n            Removes the PID file if it already exists, otherwise does\n            nothing.\n\n            """'
newline|'\n'
name|'remove_existing_pidfile'
op|'('
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|read_pid_from_pidfile
dedent|''
dedent|''
name|'def'
name|'read_pid_from_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Read the PID recorded in the named PID file.\n\n        Read and return the numeric PID recorded as text in the named\n        PID file. If the PID file cannot be read, or if the content is\n        not a valid PID, return ``None``.\n\n        """'
newline|'\n'
name|'pid'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'pidfile'
op|'='
name|'open'
op|'('
name|'pidfile_path'
op|','
string|"'r'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# According to the FHS 2.3 section on PID files in /var/run:'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#   The file must consist of the process identifier in'
nl|'\n'
comment|'#   ASCII-encoded decimal, followed by a newline character.'
nl|'\n'
comment|'# '
nl|'\n'
comment|'#   Programs that read PID files should be somewhat flexible'
nl|'\n'
comment|'#   in what they accept; i.e., they should ignore extra'
nl|'\n'
comment|'#   whitespace, leading zeroes, absence of the trailing'
nl|'\n'
comment|'#   newline, or additional lines in the PID file.'
nl|'\n'
nl|'\n'
indent|'        '
name|'line'
op|'='
name|'pidfile'
op|'.'
name|'readline'
op|'('
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pid'
op|'='
name|'int'
op|'('
name|'line'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'pidfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'pid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|write_pid_to_pidfile
dedent|''
name|'def'
name|'write_pid_to_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Write the PID in the named PID file.\n\n        Get the numeric process ID (\xe2\x80\x9cPID\xe2\x80\x9d) of the current process\n        and write it to the named file as a line of text.\n\n        """'
newline|'\n'
name|'open_flags'
op|'='
op|'('
name|'os'
op|'.'
name|'O_CREAT'
op|'|'
name|'os'
op|'.'
name|'O_EXCL'
op|'|'
name|'os'
op|'.'
name|'O_WRONLY'
op|')'
newline|'\n'
name|'open_mode'
op|'='
number|'0x644'
newline|'\n'
name|'pidfile_fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'pidfile_path'
op|','
name|'open_flags'
op|','
name|'open_mode'
op|')'
newline|'\n'
name|'pidfile'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'pidfile_fd'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
comment|'# According to the FHS 2.3 section on PID files in /var/run:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#   The file must consist of the process identifier in'
nl|'\n'
comment|'#   ASCII-encoded decimal, followed by a newline character. For'
nl|'\n'
comment|'#   example, if crond was process number 25, /var/run/crond.pid'
nl|'\n'
comment|'#   would contain three characters: two, five, and newline.'
nl|'\n'
nl|'\n'
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'line'
op|'='
string|'"%(pid)d\\n"'
op|'%'
name|'vars'
op|'('
op|')'
newline|'\n'
name|'pidfile'
op|'.'
name|'write'
op|'('
name|'line'
op|')'
newline|'\n'
name|'pidfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|remove_existing_pidfile
dedent|''
name|'def'
name|'remove_existing_pidfile'
op|'('
name|'pidfile_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'""" Remove the named PID file if it exists.\n\n        Removing a PID file that doesn\'t already exist puts us in the\n        desired state, so we ignore the condition if the file does not\n        exist.\n\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'remove'
op|'('
name|'pidfile_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

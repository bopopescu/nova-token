begin_unit
string|'"""Wraps the best available JSON implementation available in a common\ninterface"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
DECL|variable|__version__
name|'__version__'
op|'='
string|'"0.2.2"'
newline|'\n'
DECL|variable|__author__
name|'__author__'
op|'='
string|'"Rune Halvorsen <runefh@gmail.com>"'
newline|'\n'
DECL|variable|__homepage__
name|'__homepage__'
op|'='
string|'"http://bitbucket.org/runeh/anyjson/"'
newline|'\n'
DECL|variable|__docformat__
name|'__docformat__'
op|'='
string|'"restructuredtext"'
newline|'\n'
nl|'\n'
DECL|variable|implementation
name|'implementation'
op|'='
name|'None'
newline|'\n'
nl|'\n'
string|'"""\n.. function:: serialize(obj)\n\n    Serialize the object to JSON.\n\n.. function:: deserialize(str)\n\n    Deserialize JSON-encoded object to a Python object.\n\n.. function:: force_implementation(name)\n\n    Load a specific json module. This is useful for testing and not much else\n\n.. attribute:: implementation\n\n    The json implementation object. This is probably not useful to you,\n    except to get the name of the implementation in use. The name is\n    available through `implementation.name`.\n\n.. data:: _modules\n\n    List of known json modules, and the names of their serialize/unserialize\n    methods, as well as the exception they throw. Exception can be either\n    an exception class or a string.\n"""'
newline|'\n'
DECL|variable|_modules
name|'_modules'
op|'='
op|'['
op|'('
string|'"cjson"'
op|','
string|'"encode"'
op|','
string|'"EncodeError"'
op|','
string|'"decode"'
op|','
string|'"DecodeError"'
op|')'
op|','
nl|'\n'
op|'('
string|'"jsonlib2"'
op|','
string|'"write"'
op|','
string|'"WriteError"'
op|','
string|'"read"'
op|','
string|'"ReadError"'
op|')'
op|','
nl|'\n'
op|'('
string|'"jsonlib"'
op|','
string|'"write"'
op|','
string|'"WriteError"'
op|','
string|'"read"'
op|','
string|'"ReadError"'
op|')'
op|','
nl|'\n'
op|'('
string|'"simplejson"'
op|','
string|'"dumps"'
op|','
name|'TypeError'
op|','
string|'"loads"'
op|','
name|'ValueError'
op|')'
op|','
nl|'\n'
op|'('
string|'"json"'
op|','
string|'"dumps"'
op|','
name|'TypeError'
op|','
string|'"loads"'
op|','
name|'ValueError'
op|')'
op|','
nl|'\n'
op|'('
string|'"django.utils.simplejson"'
op|','
string|'"dumps"'
op|','
name|'TypeError'
op|','
string|'"loads"'
op|','
nl|'\n'
name|'ValueError'
op|')'
op|']'
newline|'\n'
DECL|variable|_fields
name|'_fields'
op|'='
op|'('
string|'"modname"'
op|','
string|'"encoder"'
op|','
string|'"encerror"'
op|','
string|'"decoder"'
op|','
string|'"decerror"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_JsonImplementation
name|'class'
name|'_JsonImplementation'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Incapsulates a JSON implementation"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'modspec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'modinfo'
op|'='
name|'dict'
op|'('
name|'zip'
op|'('
name|'_fields'
op|','
name|'modspec'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# No try block. We want importerror to end up at caller'
nl|'\n'
name|'module'
op|'='
name|'self'
op|'.'
name|'_attempt_load'
op|'('
name|'modinfo'
op|'['
string|'"modname"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'implementation'
op|'='
name|'modinfo'
op|'['
string|'"modname"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_encode'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'modinfo'
op|'['
string|'"encoder"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_decode'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'modinfo'
op|'['
string|'"decoder"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_encode_error'
op|'='
name|'modinfo'
op|'['
string|'"encerror"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_decode_error'
op|'='
name|'modinfo'
op|'['
string|'"decerror"'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'modinfo'
op|'['
string|'"encerror"'
op|']'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_encode_error'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'modinfo'
op|'['
string|'"encerror"'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'modinfo'
op|'['
string|'"decerror"'
op|']'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_decode_error'
op|'='
name|'getattr'
op|'('
name|'module'
op|','
name|'modinfo'
op|'['
string|'"decerror"'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'name'
op|'='
name|'modinfo'
op|'['
string|'"modname"'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"<_JsonImplementation instance using %s>"'
op|'%'
name|'self'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|_attempt_load
dedent|''
name|'def'
name|'_attempt_load'
op|'('
name|'self'
op|','
name|'modname'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Attempt to load module name modname, returning it on success,\n        throwing ImportError if module couldn\'t be imported"""'
newline|'\n'
name|'__import__'
op|'('
name|'modname'
op|')'
newline|'\n'
name|'return'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'modname'
op|']'
newline|'\n'
nl|'\n'
DECL|member|serialize
dedent|''
name|'def'
name|'serialize'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize the datastructure to json. Returns a string. Raises\n        TypeError if the object could not be serialized."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_encode'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_encode_error'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
op|'*'
name|'exc'
op|'.'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deserialize
dedent|''
dedent|''
name|'def'
name|'deserialize'
op|'('
name|'self'
op|','
name|'s'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""deserialize the string to python data types. Raises\n        ValueError if the string vould not be parsed."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_decode'
op|'('
name|'s'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'_decode_error'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
op|'*'
name|'exc'
op|'.'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|force_implementation
dedent|''
dedent|''
dedent|''
name|'def'
name|'force_implementation'
op|'('
name|'modname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Forces anyjson to use a specific json module if it\'s available"""'
newline|'\n'
name|'global'
name|'implementation'
newline|'\n'
name|'for'
name|'name'
op|','
name|'spec'
name|'in'
op|'['
op|'('
name|'e'
op|'['
number|'0'
op|']'
op|','
name|'e'
op|')'
name|'for'
name|'e'
name|'in'
name|'_modules'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
op|'=='
name|'modname'
op|':'
newline|'\n'
indent|'            '
name|'implementation'
op|'='
name|'_JsonImplementation'
op|'('
name|'spec'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'ImportError'
op|'('
string|'"No module named: %s"'
op|'%'
name|'modname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
comment|'# If run as a script, we do nothing but print an error message.'
nl|'\n'
comment|'# We do NOT try to load a compatible module because that may throw an'
nl|'\n'
comment|'# exception, which renders the package uninstallable with easy_install'
nl|'\n'
comment|'# (It trys to execfile the script when installing, to make sure it works)'
nl|'\n'
indent|'    '
name|'print'
string|'"Running anyjson as a stand alone script is not supported"'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'modspec'
name|'in'
name|'_modules'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
DECL|variable|implementation
indent|'            '
name|'implementation'
op|'='
name|'_JsonImplementation'
op|'('
name|'modspec'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ImportError'
op|'('
string|'"No supported JSON module found"'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|serialize
dedent|''
name|'serialize'
op|'='
name|'lambda'
name|'value'
op|':'
name|'implementation'
op|'.'
name|'serialize'
op|'('
name|'value'
op|')'
newline|'\n'
DECL|variable|deserialize
name|'deserialize'
op|'='
name|'lambda'
name|'value'
op|':'
name|'implementation'
op|'.'
name|'deserialize'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

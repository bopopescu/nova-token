begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# Copyright (c) 2013, Nebula, Inc.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Colorizer Code is borrowed from Twisted:'
nl|'\n'
comment|'# Copyright (c) 2001-2010 Twisted Matrix Laboratories.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Permission is hereby granted, free of charge, to any person obtaining'
nl|'\n'
comment|'#    a copy of this software and associated documentation files (the'
nl|'\n'
comment|'#    "Software"), to deal in the Software without restriction, including'
nl|'\n'
comment|'#    without limitation the rights to use, copy, modify, merge, publish,'
nl|'\n'
comment|'#    distribute, sublicense, and/or sell copies of the Software, and to'
nl|'\n'
comment|'#    permit persons to whom the Software is furnished to do so, subject to'
nl|'\n'
comment|'#    the following conditions:'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    The above copyright notice and this permission notice shall be'
nl|'\n'
comment|'#    included in all copies or substantial portions of the Software.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,'
nl|'\n'
comment|'#    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF'
nl|'\n'
comment|'#    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND'
nl|'\n'
comment|'#    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE'
nl|'\n'
comment|'#    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION'
nl|'\n'
comment|'#    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION'
nl|'\n'
comment|'#    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
nl|'\n'
nl|'\n'
string|'"""Display a subunit stream through a colorized unittest test runner."""'
newline|'\n'
nl|'\n'
name|'import'
name|'heapq'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
nl|'\n'
name|'import'
name|'subunit'
newline|'\n'
name|'import'
name|'testtools'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_AnsiColorizer
name|'class'
name|'_AnsiColorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A colorizer is an object that loosely wraps around a stream, allowing\n    callers to write text to the stream in a particular color.\n\n    Colorizer classes must implement C{supported()} and C{write(text, color)}.\n    """'
newline|'\n'
DECL|variable|_colors
name|'_colors'
op|'='
name|'dict'
op|'('
name|'black'
op|'='
number|'30'
op|','
name|'red'
op|'='
number|'31'
op|','
name|'green'
op|'='
number|'32'
op|','
name|'yellow'
op|'='
number|'33'
op|','
nl|'\n'
name|'blue'
op|'='
number|'34'
op|','
name|'magenta'
op|'='
number|'35'
op|','
name|'cyan'
op|'='
number|'36'
op|','
name|'white'
op|'='
number|'37'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A class method that returns True if the current platform supports\n        coloring terminal output using this method. Returns False otherwise.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'stream'
op|'.'
name|'isatty'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
comment|'# auto color only on TTYs'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'curses'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'curses'
op|'.'
name|'tigetnum'
op|'('
string|'"colors"'
op|')'
op|'>'
number|'2'
newline|'\n'
dedent|''
name|'except'
name|'curses'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'                    '
name|'curses'
op|'.'
name|'setupterm'
op|'('
op|')'
newline|'\n'
name|'return'
name|'curses'
op|'.'
name|'tigetnum'
op|'('
string|'"colors"'
op|')'
op|'>'
number|'2'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# guess false in case of error'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
DECL|variable|supported
dedent|''
dedent|''
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write the given text to the stream in the given color.\n\n        @param text: Text to be written to the stream.\n\n        @param color: A string label for a color. e.g. \'red\', \'white\'.\n        """'
newline|'\n'
name|'color'
op|'='
name|'self'
op|'.'
name|'_colors'
op|'['
name|'color'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|"'\\x1b[%s;1m%s\\x1b[0m'"
op|'%'
op|'('
name|'color'
op|','
name|'text'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Win32Colorizer
dedent|''
dedent|''
name|'class'
name|'_Win32Colorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""See _AnsiColorizer docstring."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'win32console'
newline|'\n'
name|'red'
op|','
name|'green'
op|','
name|'blue'
op|','
name|'bold'
op|'='
op|'('
name|'win32console'
op|'.'
name|'FOREGROUND_RED'
op|','
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_GREEN'
op|','
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_BLUE'
op|','
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_INTENSITY'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'='
name|'win32console'
op|'.'
name|'GetStdHandle'
op|'('
nl|'\n'
name|'win32console'
op|'.'
name|'STD_OUT_HANDLE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_colors'
op|'='
op|'{'
nl|'\n'
string|"'normal'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'blue'
op|','
nl|'\n'
string|"'red'"
op|':'
name|'red'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'green'"
op|':'
name|'green'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'blue'"
op|':'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'yellow'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'magenta'"
op|':'
name|'red'
op|'|'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'cyan'"
op|':'
name|'green'
op|'|'
name|'blue'
op|'|'
name|'bold'
op|','
nl|'\n'
string|"'white'"
op|':'
name|'red'
op|'|'
name|'green'
op|'|'
name|'blue'
op|'|'
name|'bold'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'win32console'
newline|'\n'
name|'screenBuffer'
op|'='
name|'win32console'
op|'.'
name|'GetStdHandle'
op|'('
nl|'\n'
name|'win32console'
op|'.'
name|'STD_OUT_HANDLE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'import'
name|'pywintypes'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_RED'
op|'|'
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_GREEN'
op|'|'
nl|'\n'
name|'win32console'
op|'.'
name|'FOREGROUND_BLUE'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pywintypes'
op|'.'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
DECL|variable|supported
dedent|''
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'color'
op|'='
name|'self'
op|'.'
name|'_colors'
op|'['
name|'color'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
name|'color'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'screenBuffer'
op|'.'
name|'SetConsoleTextAttribute'
op|'('
name|'self'
op|'.'
name|'_colors'
op|'['
string|"'normal'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NullColorizer
dedent|''
dedent|''
name|'class'
name|'_NullColorizer'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""See _AnsiColorizer docstring."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
nl|'\n'
DECL|member|supported
dedent|''
name|'def'
name|'supported'
op|'('
name|'cls'
op|','
name|'stream'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
DECL|variable|supported
dedent|''
name|'supported'
op|'='
name|'classmethod'
op|'('
name|'supported'
op|')'
newline|'\n'
nl|'\n'
DECL|member|write
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'text'
op|','
name|'color'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_elapsed_time_color
dedent|''
dedent|''
name|'def'
name|'get_elapsed_time_color'
op|'('
name|'elapsed_time'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'elapsed_time'
op|'>'
number|'1.0'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'red'"
newline|'\n'
dedent|''
name|'elif'
name|'elapsed_time'
op|'>'
number|'0.25'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'yellow'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'green'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaTestResult
dedent|''
dedent|''
name|'class'
name|'NovaTestResult'
op|'('
name|'testtools'
op|'.'
name|'TestResult'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'stream'
op|','
name|'descriptions'
op|','
name|'verbosity'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'='
name|'stream'
newline|'\n'
name|'self'
op|'.'
name|'showAll'
op|'='
name|'verbosity'
op|'>'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'num_slow_tests'
op|'='
number|'10'
newline|'\n'
name|'self'
op|'.'
name|'slow_tests'
op|'='
op|'['
op|']'
comment|'# this is a fixed-sized heap'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'='
name|'None'
newline|'\n'
comment|'# NOTE(vish): reset stdout for the terminal check'
nl|'\n'
name|'stdout'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'sys'
op|'.'
name|'__stdout__'
newline|'\n'
name|'for'
name|'colorizer'
name|'in'
op|'['
name|'_Win32Colorizer'
op|','
name|'_AnsiColorizer'
op|','
name|'_NullColorizer'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'colorizer'
op|'.'
name|'supported'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'colorizer'
op|'='
name|'colorizer'
op|'('
name|'self'
op|'.'
name|'stream'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'stdout'
newline|'\n'
name|'self'
op|'.'
name|'start_time'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'last_time'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'results'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'last_written'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_writeElapsedTime
dedent|''
name|'def'
name|'_writeElapsedTime'
op|'('
name|'self'
op|','
name|'elapsed'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'color'
op|'='
name|'get_elapsed_time_color'
op|'('
name|'elapsed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
string|'"  %.2f"'
op|'%'
name|'elapsed'
op|','
name|'color'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_addResult
dedent|''
name|'def'
name|'_addResult'
op|'('
name|'self'
op|','
name|'test'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
name|'test'
op|'.'
name|'id'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'name'
op|'='
string|"'Unknown.unknown'"
newline|'\n'
dedent|''
name|'test_class'
op|','
name|'test_name'
op|'='
name|'name'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'elapsed'
op|'='
op|'('
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'start_time'
op|')'
op|'.'
name|'total_seconds'
op|'('
op|')'
newline|'\n'
name|'item'
op|'='
op|'('
name|'elapsed'
op|','
name|'test_class'
op|','
name|'test_name'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'slow_tests'
op|')'
op|'>='
name|'self'
op|'.'
name|'num_slow_tests'
op|':'
newline|'\n'
indent|'            '
name|'heapq'
op|'.'
name|'heappushpop'
op|'('
name|'self'
op|'.'
name|'slow_tests'
op|','
name|'item'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'heapq'
op|'.'
name|'heappush'
op|'('
name|'self'
op|'.'
name|'slow_tests'
op|','
name|'item'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'results'
op|'.'
name|'setdefault'
op|'('
name|'test_class'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'results'
op|'['
name|'test_class'
op|']'
op|'.'
name|'append'
op|'('
op|'('
name|'test_name'
op|','
name|'elapsed'
op|')'
op|'+'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_time'
op|'['
name|'test_class'
op|']'
op|'='
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeTests'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_writeResult
dedent|''
name|'def'
name|'_writeResult'
op|'('
name|'self'
op|','
name|'test_name'
op|','
name|'elapsed'
op|','
name|'long_result'
op|','
name|'color'
op|','
nl|'\n'
name|'short_result'
op|','
name|'success'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'showAll'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|"'    %s'"
op|'%'
name|'str'
op|'('
name|'test_name'
op|')'
op|'.'
name|'ljust'
op|'('
number|'66'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'long_result'
op|','
name|'color'
op|')'
newline|'\n'
name|'if'
name|'success'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_writeElapsedTime'
op|'('
name|'elapsed'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'short_result'
op|','
name|'color'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSuccess
dedent|''
dedent|''
name|'def'
name|'addSuccess'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'addSuccess'
op|'('
name|'test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_addResult'
op|'('
name|'test'
op|','
string|"'OK'"
op|','
string|"'green'"
op|','
string|"'.'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addFailure
dedent|''
name|'def'
name|'addFailure'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|'=='
string|"'process-returncode'"
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
name|'test'
op|','
name|'err'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_addResult'
op|'('
name|'test'
op|','
string|"'FAIL'"
op|','
string|"'red'"
op|','
string|"'F'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addError
dedent|''
name|'def'
name|'addError'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'err'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'addFailure'
op|'('
name|'test'
op|','
name|'err'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_addResult'
op|'('
name|'test'
op|','
string|"'ERROR'"
op|','
string|"'red'"
op|','
string|"'E'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|addSkip
dedent|''
name|'def'
name|'addSkip'
op|'('
name|'self'
op|','
name|'test'
op|','
name|'reason'
op|'='
name|'None'
op|','
name|'details'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'addSkip'
op|'('
name|'test'
op|','
name|'reason'
op|','
name|'details'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_addResult'
op|'('
name|'test'
op|','
string|"'SKIP'"
op|','
string|"'blue'"
op|','
string|"'S'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|startTest
dedent|''
name|'def'
name|'startTest'
op|'('
name|'self'
op|','
name|'test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'start_time'
op|'='
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'NovaTestResult'
op|','
name|'self'
op|')'
op|'.'
name|'startTest'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeTestCase
dedent|''
name|'def'
name|'writeTestCase'
op|'('
name|'self'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'results'
op|'.'
name|'get'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'cls'
op|'!='
name|'self'
op|'.'
name|'last_written'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'cls'
op|','
string|"'white'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
dedent|''
name|'for'
name|'result'
name|'in'
name|'self'
op|'.'
name|'results'
op|'['
name|'cls'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_writeResult'
op|'('
op|'*'
name|'result'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'results'
op|'['
name|'cls'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_written'
op|'='
name|'cls'
newline|'\n'
nl|'\n'
DECL|member|writeTests
dedent|''
name|'def'
name|'writeTests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'time'
op|'='
name|'self'
op|'.'
name|'last_time'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'last_written'
op|','
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'last_written'
name|'or'
op|'('
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
op|'-'
name|'time'
op|')'
op|'.'
name|'total_seconds'
op|'('
op|')'
op|'>'
number|'2.0'
op|':'
newline|'\n'
indent|'            '
name|'diff'
op|'='
number|'3.0'
newline|'\n'
name|'while'
name|'diff'
op|'>'
number|'2.0'
op|':'
newline|'\n'
indent|'                '
name|'classes'
op|'='
name|'self'
op|'.'
name|'results'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'oldest'
op|'='
name|'min'
op|'('
name|'classes'
op|','
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'self'
op|'.'
name|'last_time'
op|'['
name|'x'
op|']'
op|')'
newline|'\n'
name|'diff'
op|'='
op|'('
name|'self'
op|'.'
name|'_now'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'last_time'
op|'['
name|'oldest'
op|']'
op|')'
op|'.'
name|'total_seconds'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeTestCase'
op|'('
name|'oldest'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeTestCase'
op|'('
name|'self'
op|'.'
name|'last_written'
op|')'
newline|'\n'
nl|'\n'
DECL|member|done
dedent|''
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stopTestRun'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|stopTestRun
dedent|''
name|'def'
name|'stopTestRun'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'cls'
name|'in'
name|'list'
op|'('
name|'self'
op|'.'
name|'results'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'writeTestCase'
op|'('
name|'cls'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'writeSlowTests'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|writeSlowTests
dedent|''
name|'def'
name|'writeSlowTests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Pare out 'fast' tests"
nl|'\n'
indent|'        '
name|'slow_tests'
op|'='
op|'['
name|'item'
name|'for'
name|'item'
name|'in'
name|'self'
op|'.'
name|'slow_tests'
nl|'\n'
name|'if'
name|'get_elapsed_time_color'
op|'('
name|'item'
op|'['
number|'0'
op|']'
op|')'
op|'!='
string|"'green'"
op|']'
newline|'\n'
name|'if'
name|'slow_tests'
op|':'
newline|'\n'
indent|'            '
name|'slow_total_time'
op|'='
name|'sum'
op|'('
name|'item'
op|'['
number|'0'
op|']'
name|'for'
name|'item'
name|'in'
name|'slow_tests'
op|')'
newline|'\n'
name|'slow'
op|'='
op|'('
string|'"Slowest %i tests took %.2f secs:"'
nl|'\n'
op|'%'
op|'('
name|'len'
op|'('
name|'slow_tests'
op|')'
op|','
name|'slow_total_time'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'slow'
op|','
string|"'yellow'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
name|'last_cls'
op|'='
name|'None'
newline|'\n'
comment|'# sort by name'
nl|'\n'
name|'for'
name|'elapsed'
op|','
name|'cls'
op|','
name|'name'
name|'in'
name|'sorted'
op|'('
name|'slow_tests'
op|','
nl|'\n'
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
number|'1'
op|']'
op|'+'
name|'x'
op|'['
number|'2'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'cls'
op|'!='
name|'last_cls'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'cls'
op|','
string|"'white'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
dedent|''
name|'last_cls'
op|'='
name|'cls'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'write'
op|'('
string|"'    %s'"
op|'%'
name|'str'
op|'('
name|'name'
op|')'
op|'.'
name|'ljust'
op|'('
number|'68'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_writeElapsedTime'
op|'('
name|'elapsed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|printErrors
dedent|''
dedent|''
dedent|''
name|'def'
name|'printErrors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'showAll'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'printErrorList'
op|'('
string|"'ERROR'"
op|','
name|'self'
op|'.'
name|'errors'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'printErrorList'
op|'('
string|"'FAIL'"
op|','
name|'self'
op|'.'
name|'failures'
op|')'
newline|'\n'
nl|'\n'
DECL|member|printErrorList
dedent|''
name|'def'
name|'printErrorList'
op|'('
name|'self'
op|','
name|'flavor'
op|','
name|'errors'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'test'
op|','
name|'err'
name|'in'
name|'errors'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
string|'"="'
op|'*'
number|'70'
op|','
string|"'red'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
name|'flavor'
op|','
string|"'red'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
string|'": %s"'
op|'%'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'colorizer'
op|'.'
name|'write'
op|'('
string|'"-"'
op|'*'
number|'70'
op|','
string|"'red'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stream'
op|'.'
name|'writeln'
op|'('
string|'"%s"'
op|'%'
name|'err'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|test
dedent|''
dedent|''
dedent|''
name|'test'
op|'='
name|'subunit'
op|'.'
name|'ProtocolTestCase'
op|'('
name|'sys'
op|'.'
name|'stdin'
op|','
name|'passthrough'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'version_info'
op|'['
number|'0'
op|':'
number|'2'
op|']'
op|'<='
op|'('
number|'2'
op|','
number|'6'
op|')'
op|':'
newline|'\n'
DECL|variable|runner
indent|'    '
name|'runner'
op|'='
name|'unittest'
op|'.'
name|'TextTestRunner'
op|'('
name|'verbosity'
op|'='
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|runner
indent|'    '
name|'runner'
op|'='
name|'unittest'
op|'.'
name|'TextTestRunner'
op|'('
name|'verbosity'
op|'='
number|'2'
op|','
name|'resultclass'
op|'='
name|'NovaTestResult'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'runner'
op|'.'
name|'run'
op|'('
name|'test'
op|')'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
op|':'
newline|'\n'
DECL|variable|exit_code
indent|'    '
name|'exit_code'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|exit_code
indent|'    '
name|'exit_code'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'exit'
op|'('
name|'exit_code'
op|')'
newline|'\n'
endmarker|''
end_unit

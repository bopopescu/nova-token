begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
comment|'# Copyright 2014 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'# Copyright 2014 Samsung Electronics'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""Trace a subunit stream in reasonable detail and high accuracy."""'
newline|'\n'
nl|'\n'
name|'import'
name|'argparse'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'import'
name|'mimeparse'
newline|'\n'
name|'import'
name|'subunit'
newline|'\n'
name|'import'
name|'testtools'
newline|'\n'
nl|'\n'
DECL|variable|DAY_SECONDS
name|'DAY_SECONDS'
op|'='
number|'60'
op|'*'
number|'60'
op|'*'
number|'24'
newline|'\n'
DECL|variable|FAILS
name|'FAILS'
op|'='
op|'['
op|']'
newline|'\n'
DECL|variable|RESULTS
name|'RESULTS'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Starts
name|'class'
name|'Starts'
op|'('
name|'testtools'
op|'.'
name|'StreamResult'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Starts'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_output'
op|'='
name|'output'
newline|'\n'
nl|'\n'
DECL|member|startTestRun
dedent|''
name|'def'
name|'startTestRun'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_neednewline'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_emitted'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|status
dedent|''
name|'def'
name|'status'
op|'('
name|'self'
op|','
name|'test_id'
op|'='
name|'None'
op|','
name|'test_status'
op|'='
name|'None'
op|','
name|'test_tags'
op|'='
name|'None'
op|','
nl|'\n'
name|'runnable'
op|'='
name|'True'
op|','
name|'file_name'
op|'='
name|'None'
op|','
name|'file_bytes'
op|'='
name|'None'
op|','
name|'eof'
op|'='
name|'False'
op|','
nl|'\n'
name|'mime_type'
op|'='
name|'None'
op|','
name|'route_code'
op|'='
name|'None'
op|','
name|'timestamp'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'Starts'
op|','
name|'self'
op|')'
op|'.'
name|'status'
op|'('
nl|'\n'
name|'test_id'
op|','
name|'test_status'
op|','
nl|'\n'
name|'test_tags'
op|'='
name|'test_tags'
op|','
name|'runnable'
op|'='
name|'runnable'
op|','
name|'file_name'
op|'='
name|'file_name'
op|','
nl|'\n'
name|'file_bytes'
op|'='
name|'file_bytes'
op|','
name|'eof'
op|'='
name|'eof'
op|','
name|'mime_type'
op|'='
name|'mime_type'
op|','
nl|'\n'
name|'route_code'
op|'='
name|'route_code'
op|','
name|'timestamp'
op|'='
name|'timestamp'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'test_id'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'file_bytes'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'mime_type'
name|'or'
name|'mime_type'
op|'=='
string|"'test/plain;charset=utf8'"
op|':'
newline|'\n'
indent|'                '
name|'mime_type'
op|'='
string|"'text/plain; charset=utf-8'"
newline|'\n'
dedent|''
name|'primary'
op|','
name|'sub'
op|','
name|'parameters'
op|'='
name|'mimeparse'
op|'.'
name|'parse_mime_type'
op|'('
name|'mime_type'
op|')'
newline|'\n'
name|'content_type'
op|'='
name|'testtools'
op|'.'
name|'content_type'
op|'.'
name|'ContentType'
op|'('
nl|'\n'
name|'primary'
op|','
name|'sub'
op|','
name|'parameters'
op|')'
newline|'\n'
name|'content'
op|'='
name|'testtools'
op|'.'
name|'content'
op|'.'
name|'Content'
op|'('
nl|'\n'
name|'content_type'
op|','
name|'lambda'
op|':'
op|'['
name|'file_bytes'
op|']'
op|')'
newline|'\n'
name|'text'
op|'='
name|'content'
op|'.'
name|'as_text'
op|'('
op|')'
newline|'\n'
name|'if'
name|'text'
name|'and'
name|'text'
op|'['
op|'-'
number|'1'
op|']'
name|'not'
name|'in'
string|"'\\r\\n'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_neednewline'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_output'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'test_status'
op|'=='
string|"'inprogress'"
name|'and'
name|'test_id'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_emitted'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'_neednewline'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_neednewline'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_output'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'worker'
op|'='
string|"''"
newline|'\n'
name|'for'
name|'tag'
name|'in'
name|'test_tags'
name|'or'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'tag'
op|'.'
name|'startswith'
op|'('
string|"'worker-'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'worker'
op|'='
string|"'('"
op|'+'
name|'tag'
op|'['
number|'7'
op|':'
op|']'
op|'+'
string|"') '"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'timestamp'
op|':'
newline|'\n'
indent|'                '
name|'timestr'
op|'='
name|'timestamp'
op|'.'
name|'isoformat'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'timestr'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'_output'
op|'.'
name|'write'
op|'('
string|"'%s: %s%s [start]\\n'"
op|'%'
nl|'\n'
op|'('
name|'timestr'
op|','
name|'worker'
op|','
name|'test_id'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_emitted'
op|'.'
name|'add'
op|'('
name|'test_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cleanup_test_name
dedent|''
dedent|''
dedent|''
name|'def'
name|'cleanup_test_name'
op|'('
name|'name'
op|','
name|'strip_tags'
op|'='
name|'True'
op|','
name|'strip_scenarios'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clean up the test name for display.\n\n    By default we strip out the tags in the test because they don\'t help us\n    in identifying the test that is run to it\'s result.\n\n    Make it possible to strip out the testscenarios information (not to\n    be confused with tempest scenarios) however that\'s often needed to\n    indentify generated negative tests.\n    """'
newline|'\n'
name|'if'
name|'strip_tags'
op|':'
newline|'\n'
indent|'        '
name|'tags_start'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
string|"'['"
op|')'
newline|'\n'
name|'tags_end'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
string|"']'"
op|')'
newline|'\n'
name|'if'
name|'tags_start'
op|'>'
number|'0'
name|'and'
name|'tags_end'
op|'>'
name|'tags_start'
op|':'
newline|'\n'
indent|'            '
name|'newname'
op|'='
name|'name'
op|'['
op|':'
name|'tags_start'
op|']'
newline|'\n'
name|'newname'
op|'+='
name|'name'
op|'['
name|'tags_end'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'name'
op|'='
name|'newname'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'strip_scenarios'
op|':'
newline|'\n'
indent|'        '
name|'tags_start'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
string|"'('"
op|')'
newline|'\n'
name|'tags_end'
op|'='
name|'name'
op|'.'
name|'find'
op|'('
string|"')'"
op|')'
newline|'\n'
name|'if'
name|'tags_start'
op|'>'
number|'0'
name|'and'
name|'tags_end'
op|'>'
name|'tags_start'
op|':'
newline|'\n'
indent|'            '
name|'newname'
op|'='
name|'name'
op|'['
op|':'
name|'tags_start'
op|']'
newline|'\n'
name|'newname'
op|'+='
name|'name'
op|'['
name|'tags_end'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
name|'name'
op|'='
name|'newname'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_duration
dedent|''
name|'def'
name|'get_duration'
op|'('
name|'timestamps'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'start'
op|','
name|'end'
op|'='
name|'timestamps'
newline|'\n'
name|'if'
name|'not'
name|'start'
name|'or'
name|'not'
name|'end'
op|':'
newline|'\n'
indent|'        '
name|'duration'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'delta'
op|'='
name|'end'
op|'-'
name|'start'
newline|'\n'
name|'duration'
op|'='
string|"'%d.%06ds'"
op|'%'
op|'('
nl|'\n'
name|'delta'
op|'.'
name|'days'
op|'*'
name|'DAY_SECONDS'
op|'+'
name|'delta'
op|'.'
name|'seconds'
op|','
name|'delta'
op|'.'
name|'microseconds'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'duration'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_worker
dedent|''
name|'def'
name|'find_worker'
op|'('
name|'test'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'tag'
name|'in'
name|'test'
op|'['
string|"'tags'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'tag'
op|'.'
name|'startswith'
op|'('
string|"'worker-'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'int'
op|'('
name|'tag'
op|'['
number|'7'
op|':'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
string|"'NaN'"
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Print out stdout/stderr if it exists, always'
nl|'\n'
DECL|function|print_attachments
dedent|''
name|'def'
name|'print_attachments'
op|'('
name|'stream'
op|','
name|'test'
op|','
name|'all_channels'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print out subunit attachments.\n\n    Print out subunit attachments that contain content. This\n    runs in 2 modes, one for successes where we print out just stdout\n    and stderr, and an override that dumps all the attachments.\n    """'
newline|'\n'
name|'channels'
op|'='
op|'('
string|"'stdout'"
op|','
string|"'stderr'"
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'detail'
name|'in'
name|'test'
op|'['
string|"'details'"
op|']'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sdague): the subunit names are a little crazy, and actually'
nl|'\n'
comment|"# are in the form pythonlogging:'' (with the colon and quotes)"
nl|'\n'
indent|'        '
name|'name'
op|'='
name|'name'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'detail'
op|'.'
name|'content_type'
op|'.'
name|'type'
op|'=='
string|"'test'"
op|':'
newline|'\n'
indent|'            '
name|'detail'
op|'.'
name|'content_type'
op|'.'
name|'type'
op|'='
string|"'text'"
newline|'\n'
dedent|''
name|'if'
op|'('
name|'all_channels'
name|'or'
name|'name'
name|'in'
name|'channels'
op|')'
name|'and'
name|'detail'
op|'.'
name|'as_text'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'title'
op|'='
string|'"Captured %s:"'
op|'%'
name|'name'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n%s\\n%s\\n"'
op|'%'
op|'('
name|'title'
op|','
op|'('
string|"'~'"
op|'*'
name|'len'
op|'('
name|'title'
op|')'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# indent attachment lines 4 spaces to make them visually'
nl|'\n'
comment|'# offset'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'detail'
op|'.'
name|'as_text'
op|'('
op|')'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"    %s\\n"'
op|'%'
name|'line'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|show_outcome
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'show_outcome'
op|'('
name|'stream'
op|','
name|'test'
op|','
name|'print_failures'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'RESULTS'
newline|'\n'
name|'status'
op|'='
name|'test'
op|'['
string|"'status'"
op|']'
newline|'\n'
comment|'# TODO(sdague): ask lifeless why on this?'
nl|'\n'
name|'if'
name|'status'
op|'=='
string|"'exists'"
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'worker'
op|'='
name|'find_worker'
op|'('
name|'test'
op|')'
newline|'\n'
name|'name'
op|'='
name|'cleanup_test_name'
op|'('
name|'test'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'duration'
op|'='
name|'get_duration'
op|'('
name|'test'
op|'['
string|"'timestamps'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'worker'
name|'not'
name|'in'
name|'RESULTS'
op|':'
newline|'\n'
indent|'        '
name|'RESULTS'
op|'['
name|'worker'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'RESULTS'
op|'['
name|'worker'
op|']'
op|'.'
name|'append'
op|'('
name|'test'
op|')'
newline|'\n'
nl|'\n'
comment|"# don't count the end of the return code as a fail"
nl|'\n'
name|'if'
name|'name'
op|'=='
string|"'process-returncode'"
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'status'
op|'=='
string|"'success'"
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|"'{%s} %s [%s] ... ok\\n'"
op|'%'
op|'('
nl|'\n'
name|'worker'
op|','
name|'name'
op|','
name|'duration'
op|')'
op|')'
newline|'\n'
name|'print_attachments'
op|'('
name|'stream'
op|','
name|'test'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'status'
op|'=='
string|"'fail'"
op|':'
newline|'\n'
indent|'        '
name|'FAILS'
op|'.'
name|'append'
op|'('
name|'test'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|"'{%s} %s [%s] ... FAILED\\n'"
op|'%'
op|'('
nl|'\n'
name|'worker'
op|','
name|'name'
op|','
name|'duration'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'print_failures'
op|':'
newline|'\n'
indent|'            '
name|'print_attachments'
op|'('
name|'stream'
op|','
name|'test'
op|','
name|'all_channels'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'status'
op|'=='
string|"'skip'"
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|"'{%s} %s ... SKIPPED: %s\\n'"
op|'%'
op|'('
nl|'\n'
name|'worker'
op|','
name|'name'
op|','
name|'test'
op|'['
string|"'details'"
op|']'
op|'['
string|"'reason'"
op|']'
op|'.'
name|'as_text'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|"'{%s} %s [%s] ... %s\\n'"
op|'%'
op|'('
nl|'\n'
name|'worker'
op|','
name|'name'
op|','
name|'duration'
op|','
name|'test'
op|'['
string|"'status'"
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'print_failures'
op|':'
newline|'\n'
indent|'            '
name|'print_attachments'
op|'('
name|'stream'
op|','
name|'test'
op|','
name|'all_channels'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'stream'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|print_fails
dedent|''
name|'def'
name|'print_fails'
op|'('
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Print summary failure report.\n\n    Currently unused, however there remains debate on inline vs. at end\n    reporting, so leave the utility function for later use.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'FAILS'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n==============================\\n"'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"Failed %s tests - output below:"'
op|'%'
name|'len'
op|'('
name|'FAILS'
op|')'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n==============================\\n"'
op|')'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'FAILS'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n%s\\n"'
op|'%'
name|'f'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"%s\\n"'
op|'%'
op|'('
string|"'-'"
op|'*'
name|'len'
op|'('
name|'f'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
op|')'
newline|'\n'
name|'print_attachments'
op|'('
name|'stream'
op|','
name|'f'
op|','
name|'all_channels'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'stream'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|count_tests
dedent|''
name|'def'
name|'count_tests'
op|'('
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'count'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'RESULTS'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'item'
name|'in'
name|'v'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'in'
name|'item'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'re'
op|'.'
name|'search'
op|'('
name|'value'
op|','
name|'item'
op|'['
name|'key'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'count'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'count'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_time
dedent|''
name|'def'
name|'run_time'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'runtime'
op|'='
number|'0.0'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'RESULTS'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'test'
name|'in'
name|'v'
op|':'
newline|'\n'
indent|'            '
name|'runtime'
op|'+='
name|'float'
op|'('
name|'get_duration'
op|'('
name|'test'
op|'['
string|"'timestamps'"
op|']'
op|')'
op|'.'
name|'strip'
op|'('
string|"'s'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'runtime'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|worker_stats
dedent|''
name|'def'
name|'worker_stats'
op|'('
name|'worker'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'tests'
op|'='
name|'RESULTS'
op|'['
name|'worker'
op|']'
newline|'\n'
name|'num_tests'
op|'='
name|'len'
op|'('
name|'tests'
op|')'
newline|'\n'
name|'delta'
op|'='
name|'tests'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'timestamps'"
op|']'
op|'['
number|'1'
op|']'
op|'-'
name|'tests'
op|'['
number|'0'
op|']'
op|'['
string|"'timestamps'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'num_tests'
op|','
name|'delta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|print_summary
dedent|''
name|'def'
name|'print_summary'
op|'('
name|'stream'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n======\\nTotals\\n======\\n"'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'"Run: %s in %s sec.\\n"'
op|'%'
op|'('
name|'count_tests'
op|'('
string|"'status'"
op|','
string|"'.*'"
op|')'
op|','
nl|'\n'
name|'run_time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'" - Passed: %s\\n"'
op|'%'
name|'count_tests'
op|'('
string|"'status'"
op|','
string|"'success'"
op|')'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'" - Skipped: %s\\n"'
op|'%'
name|'count_tests'
op|'('
string|"'status'"
op|','
string|"'skip'"
op|')'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'" - Failed: %s\\n"'
op|'%'
name|'count_tests'
op|'('
string|"'status'"
op|','
string|"'fail'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# we could have no results, especially as we filter out the process-codes'
nl|'\n'
name|'if'
name|'RESULTS'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'write'
op|'('
string|'"\\n==============\\nWorker Balance\\n==============\\n"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'w'
name|'in'
name|'range'
op|'('
name|'max'
op|'('
name|'RESULTS'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'w'
name|'not'
name|'in'
name|'RESULTS'
op|':'
newline|'\n'
indent|'                '
name|'stream'
op|'.'
name|'write'
op|'('
nl|'\n'
string|'" - WARNING: missing Worker %s! "'
nl|'\n'
string|'"Race in testr accounting.\\n"'
op|'%'
name|'w'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'num'
op|','
name|'time'
op|'='
name|'worker_stats'
op|'('
name|'w'
op|')'
newline|'\n'
name|'stream'
op|'.'
name|'write'
op|'('
string|'" - Worker %s (%s tests) => %ss\\n"'
op|'%'
nl|'\n'
op|'('
name|'w'
op|','
name|'num'
op|','
name|'time'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_args
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'parse_args'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'='
name|'argparse'
op|'.'
name|'ArgumentParser'
op|'('
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'--no-failure-debug'"
op|','
string|"'-n'"
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
name|'dest'
op|'='
string|"'print_failures'"
op|','
name|'help'
op|'='
string|"'Disable printing failure '"
nl|'\n'
string|"'debug information in realtime'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'--fails'"
op|','
string|"'-f'"
op|','
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
name|'dest'
op|'='
string|"'post_fails'"
op|','
name|'help'
op|'='
string|"'Print failure debug '"
nl|'\n'
string|"'information after the stream is proccesed'"
op|')'
newline|'\n'
name|'return'
name|'parser'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'args'
op|'='
name|'parse_args'
op|'('
op|')'
newline|'\n'
name|'stream'
op|'='
name|'subunit'
op|'.'
name|'ByteStreamToStreamResult'
op|'('
nl|'\n'
name|'sys'
op|'.'
name|'stdin'
op|','
name|'non_subunit_name'
op|'='
string|"'stdout'"
op|')'
newline|'\n'
name|'starts'
op|'='
name|'Starts'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'outcomes'
op|'='
name|'testtools'
op|'.'
name|'StreamToDict'
op|'('
nl|'\n'
name|'functools'
op|'.'
name|'partial'
op|'('
name|'show_outcome'
op|','
name|'sys'
op|'.'
name|'stdout'
op|','
nl|'\n'
name|'print_failures'
op|'='
name|'args'
op|'.'
name|'print_failures'
op|')'
op|')'
newline|'\n'
name|'summary'
op|'='
name|'testtools'
op|'.'
name|'StreamSummary'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'testtools'
op|'.'
name|'CopyStreamResult'
op|'('
op|'['
name|'starts'
op|','
name|'outcomes'
op|','
name|'summary'
op|']'
op|')'
newline|'\n'
name|'result'
op|'.'
name|'startTestRun'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'stream'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'stopTestRun'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'args'
op|'.'
name|'post_fails'
op|':'
newline|'\n'
indent|'        '
name|'print_fails'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
dedent|''
name|'print_summary'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|')'
newline|'\n'
name|'return'
op|'('
number|'0'
name|'if'
name|'summary'
op|'.'
name|'wasSuccessful'
op|'('
op|')'
name|'else'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'sys'
op|'.'
name|'exit'
op|'('
name|'main'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

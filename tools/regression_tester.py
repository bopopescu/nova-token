begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
string|'"""Tool for checking if patch contains a regression test.\n\nBy default runs against current patch but can be set to use any gerrit review\nas specified by change number (uses \'git review -d\').\n\nIdea: take tests from patch to check, and run against code from previous patch.\nIf new tests pass, then no regression test, if new tests fails against old code\nthen either\n* new tests depend on new code and cannot confirm regression test is valid\n  (false positive)\n* new tests detects the bug being fixed (detect valid regression test)\nDue to the risk of false positives, the results from this need some human\ninterpretation.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'optparse'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run
name|'def'
name|'run'
op|'('
name|'cmd'
op|','
name|'fail_ok'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"running: %s"'
op|'%'
name|'cmd'
newline|'\n'
name|'obj'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
name|'stderr'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
nl|'\n'
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'if'
name|'obj'
op|'.'
name|'returncode'
op|'!='
number|'0'
name|'and'
name|'not'
name|'fail_ok'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"The above command terminated with an error."'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
name|'obj'
op|'.'
name|'returncode'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'obj'
op|'.'
name|'stdout'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'usage'
op|'='
string|'"""\n    Tool for checking if a patch includes a regression test.\n\n    Usage: %prog [options]"""'
newline|'\n'
name|'parser'
op|'='
name|'optparse'
op|'.'
name|'OptionParser'
op|'('
name|'usage'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
string|'"-r"'
op|','
string|'"--review"'
op|','
name|'dest'
op|'='
string|'"review"'
op|','
nl|'\n'
name|'help'
op|'='
string|'"gerrit review number to test"'
op|')'
newline|'\n'
op|'('
name|'options'
op|','
name|'args'
op|')'
op|'='
name|'parser'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
name|'if'
name|'options'
op|'.'
name|'review'
op|':'
newline|'\n'
indent|'        '
name|'original_branch'
op|'='
name|'run'
op|'('
string|'"git rev-parse --abbrev-ref HEAD"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git review -d %s"'
op|'%'
name|'options'
op|'.'
name|'review'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"no gerrit review number specified, running on latest commit"'
nl|'\n'
string|'"on current branch."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_works'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# run new tests with old code'
nl|'\n'
name|'run'
op|'('
string|'"git checkout HEAD^ nova"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git checkout HEAD nova/tests"'
op|')'
newline|'\n'
nl|'\n'
comment|'# identify which tests have changed'
nl|'\n'
name|'tests'
op|'='
name|'run'
op|'('
string|'"git whatchanged --format=oneline -1 | grep \\"nova/tests\\" "'
nl|'\n'
string|'"| cut -f2"'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
name|'test_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'tests'
op|':'
newline|'\n'
indent|'        '
name|'test_list'
op|'.'
name|'append'
op|'('
name|'string'
op|'.'
name|'replace'
op|'('
name|'test'
op|'['
number|'0'
op|':'
op|'-'
number|'3'
op|']'
op|','
string|"'/'"
op|','
string|"'.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'test_list'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
indent|'        '
name|'test_works'
op|'='
name|'False'
newline|'\n'
name|'expect_failure'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# run new tests, expect them to fail'
nl|'\n'
indent|'        '
name|'expect_failure'
op|'='
name|'run'
op|'('
op|'('
string|'"tox -epy27 %s 2>&1"'
op|'%'
name|'string'
op|'.'
name|'join'
op|'('
name|'test_list'
op|')'
op|')'
op|','
nl|'\n'
name|'fail_ok'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
string|'"FAILED (id="'
name|'in'
name|'expect_failure'
op|':'
newline|'\n'
indent|'            '
name|'test_works'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
dedent|''
dedent|''
name|'run'
op|'('
string|'"git checkout HEAD nova"'
op|')'
newline|'\n'
name|'if'
name|'options'
op|'.'
name|'review'
op|':'
newline|'\n'
indent|'        '
name|'new_branch'
op|'='
name|'run'
op|'('
string|'"git status | head -1 | cut -d \' \' -f 4"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git checkout %s"'
op|'%'
name|'original_branch'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git branch -D %s"'
op|'%'
name|'new_branch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'print'
name|'expect_failure'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"*******************************"'
newline|'\n'
name|'if'
name|'test_works'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"FOUND a regression test"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"NO regression test"'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

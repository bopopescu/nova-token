begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
nl|'\n'
string|'"""Tool for checking if patch contains a regression test.\n\nPass in gerrit review number as parameter, tool will download branch and run\nmodified tests without bug fix.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
DECL|variable|gerrit_number
name|'gerrit_number'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'#TODO(jogo) use proper optParser'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'=='
number|'2'
op|':'
newline|'\n'
DECL|variable|gerrit_number
indent|'    '
name|'gerrit_number'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|gerrit_number
indent|'    '
name|'gerrit_number'
op|'='
name|'None'
newline|'\n'
name|'print'
op|'('
string|'"no gerrit review number specified, running on latest commit"'
nl|'\n'
string|'"on current branch."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run
dedent|''
name|'def'
name|'run'
op|'('
name|'cmd'
op|','
name|'fail_ok'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"running: %s"'
op|'%'
name|'cmd'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'rval'
op|'='
name|'subprocess'
op|'.'
name|'check_output'
op|'('
name|'cmd'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'subprocess'
op|'.'
name|'CalledProcessError'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'fail_ok'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"The command above terminated with an error."'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'rval'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|test_works
dedent|''
name|'test_works'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'gerrit_number'
op|':'
newline|'\n'
DECL|variable|original_branch
indent|'    '
name|'original_branch'
op|'='
name|'run'
op|'('
string|'"git rev-parse --abbrev-ref HEAD"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git review -d %s"'
op|'%'
name|'gerrit_number'
op|')'
newline|'\n'
nl|'\n'
comment|'# run new tests with old code'
nl|'\n'
dedent|''
name|'run'
op|'('
string|'"git checkout HEAD^ nova"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git checkout HEAD nova/tests"'
op|')'
newline|'\n'
nl|'\n'
comment|'# identify which tests have changed'
nl|'\n'
DECL|variable|tests
name|'tests'
op|'='
name|'run'
op|'('
string|'"git whatchanged --format=oneline -1 | grep \\"nova/tests\\" "'
nl|'\n'
string|'"| cut -f2"'
op|')'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
DECL|variable|test_list
name|'test_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'tests'
op|':'
newline|'\n'
indent|'    '
name|'test_list'
op|'.'
name|'append'
op|'('
name|'string'
op|'.'
name|'replace'
op|'('
name|'test'
op|'['
number|'0'
op|':'
op|'-'
number|'3'
op|']'
op|','
string|"'/'"
op|','
string|"'.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'test_list'
op|'=='
op|'['
op|']'
op|':'
newline|'\n'
DECL|variable|test_works
indent|'    '
name|'test_works'
op|'='
name|'False'
newline|'\n'
DECL|variable|expect_failure
name|'expect_failure'
op|'='
string|'""'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# run new tests, expect them to fail'
nl|'\n'
DECL|variable|expect_failure
indent|'    '
name|'expect_failure'
op|'='
name|'run'
op|'('
op|'('
string|'"tox -epy27 %s 2>&1"'
op|'%'
name|'string'
op|'.'
name|'join'
op|'('
name|'test_list'
op|')'
op|')'
op|','
nl|'\n'
DECL|variable|fail_ok
name|'fail_ok'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
string|'"FAILED (id="'
name|'in'
name|'expect_failure'
op|':'
newline|'\n'
DECL|variable|test_works
indent|'        '
name|'test_works'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
dedent|''
dedent|''
name|'run'
op|'('
string|'"git checkout HEAD nova"'
op|')'
newline|'\n'
name|'if'
name|'gerrit_number'
op|':'
newline|'\n'
DECL|variable|new_branch
indent|'    '
name|'new_branch'
op|'='
name|'run'
op|'('
string|'"git status | head -1 | cut -d \' \' -f 4"'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git checkout %s"'
op|'%'
name|'original_branch'
op|')'
newline|'\n'
name|'run'
op|'('
string|'"git branch -D %s"'
op|'%'
name|'new_branch'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'test_works'
op|':'
newline|'\n'
indent|'    '
name|'print'
name|'expect_failure'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"*******************************"'
newline|'\n'
name|'print'
string|'"FOUND a regression test"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'print'
name|'expect_failure'
newline|'\n'
name|'print'
string|'""'
newline|'\n'
name|'print'
string|'"*******************************"'
newline|'\n'
name|'print'
string|'"NO regression test"'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

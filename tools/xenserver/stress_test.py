begin_unit
string|'"""\nThis script concurrently builds and migrates instances. This can be useful when\ntroubleshooting race-conditions in virt-layer code.\n\nExpects:\n\n    novarc to be sourced in the environment\n\nHelper Script for Xen Dom0:\n\n    # cat /tmp/destroy_cache_vdis\n    #!/bin/bash\n    xe vdi-list | grep "Glance Image" -C1 | grep "^uuid" | awk \'{print $5}\' |\n        xargs -n1 -I{} xe vdi-destroy uuid={}\n"""'
newline|'\n'
name|'import'
name|'argparse'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'multiprocessing'
newline|'\n'
name|'import'
name|'subprocess'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
DECL|variable|DOM0_CLEANUP_SCRIPT
name|'DOM0_CLEANUP_SCRIPT'
op|'='
string|'"/tmp/destroy_cache_vdis"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run
name|'def'
name|'run'
op|'('
name|'cmd'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'ret'
op|'='
name|'subprocess'
op|'.'
name|'call'
op|'('
name|'cmd'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'ret'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"Command exited non-zero: %s"'
op|'%'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|server_built
name|'def'
name|'server_built'
op|'('
name|'server_name'
op|','
name|'image_name'
op|','
name|'flavor'
op|'='
number|'1'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'run'
op|'('
string|'"nova boot --image=%(image_name)s --flavor=%(flavor)s"'
nl|'\n'
string|'" --poll %(server_name)s"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'run'
op|'('
string|'"nova delete %(server_name)s"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|snapshot_taken
name|'def'
name|'snapshot_taken'
op|'('
name|'server_name'
op|','
name|'snapshot_name'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'run'
op|'('
string|'"nova image-create %(server_name)s %(snapshot_name)s"'
nl|'\n'
string|'" --poll"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'cleanup'
op|':'
newline|'\n'
indent|'            '
name|'run'
op|'('
string|'"nova image-delete %(snapshot_name)s"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|migrate_server
dedent|''
dedent|''
dedent|''
name|'def'
name|'migrate_server'
op|'('
name|'server_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'run'
op|'('
string|'"nova migrate %(server_name)s --poll"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|'"nova list | grep %(server_name)s | awk \'{print $6}\'"'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'proc'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'proc'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
name|'status'
op|'='
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status'
op|'.'
name|'upper'
op|'('
op|')'
op|'!='
string|"'VERIFY_RESIZE'"
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"Server %(server_name)s failed to rebuild"'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Confirm the resize'
nl|'\n'
dedent|''
name|'run'
op|'('
string|'"nova resize-confirm %(server_name)s"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_migrate
dedent|''
name|'def'
name|'test_migrate'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'count'
op|','
name|'args'
op|'='
name|'context'
newline|'\n'
name|'server_name'
op|'='
string|'"server%d"'
op|'%'
name|'count'
newline|'\n'
name|'cleanup'
op|'='
name|'args'
op|'.'
name|'cleanup'
newline|'\n'
name|'with'
name|'server_built'
op|'('
name|'server_name'
op|','
name|'args'
op|'.'
name|'image'
op|','
name|'cleanup'
op|'='
name|'cleanup'
op|')'
op|':'
newline|'\n'
comment|'# Migrate A -> B'
nl|'\n'
indent|'        '
name|'result'
op|'='
name|'migrate_server'
op|'('
name|'server_name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Migrate B -> A'
nl|'\n'
dedent|''
name|'return'
name|'migrate_server'
op|'('
name|'server_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rebuild_server
dedent|''
dedent|''
name|'def'
name|'rebuild_server'
op|'('
name|'server_name'
op|','
name|'snapshot_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'run'
op|'('
string|'"nova rebuild %(server_name)s %(snapshot_name)s --poll"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'cmd'
op|'='
string|'"nova list | grep %(server_name)s | awk \'{print $6}\'"'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'proc'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
name|'stdout'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
op|','
name|'shell'
op|'='
name|'True'
op|')'
newline|'\n'
name|'stdout'
op|','
name|'stderr'
op|'='
name|'proc'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
name|'status'
op|'='
name|'stdout'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'status'
op|'!='
string|"'ACTIVE'"
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"Server %(server_name)s failed to rebuild"'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'count'
op|','
name|'args'
op|'='
name|'context'
newline|'\n'
name|'server_name'
op|'='
string|'"server%d"'
op|'%'
name|'count'
newline|'\n'
name|'snapshot_name'
op|'='
string|'"snap%d"'
op|'%'
name|'count'
newline|'\n'
name|'cleanup'
op|'='
name|'args'
op|'.'
name|'cleanup'
newline|'\n'
name|'with'
name|'server_built'
op|'('
name|'server_name'
op|','
name|'args'
op|'.'
name|'image'
op|','
name|'cleanup'
op|'='
name|'cleanup'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'snapshot_taken'
op|'('
name|'server_name'
op|','
name|'snapshot_name'
op|','
name|'cleanup'
op|'='
name|'cleanup'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rebuild_server'
op|'('
name|'server_name'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_parse_args
dedent|''
dedent|''
dedent|''
name|'def'
name|'_parse_args'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'parser'
op|'='
name|'argparse'
op|'.'
name|'ArgumentParser'
op|'('
nl|'\n'
name|'description'
op|'='
string|"'Test Nova for Race Conditions.'"
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'tests'"
op|','
name|'metavar'
op|'='
string|"'TESTS'"
op|','
name|'type'
op|'='
name|'str'
op|','
name|'nargs'
op|'='
string|"'*'"
op|','
nl|'\n'
name|'default'
op|'='
op|'['
string|"'rebuild'"
op|','
string|"'migrate'"
op|']'
op|','
nl|'\n'
name|'help'
op|'='
string|"'tests to run: [rebuilt|migrate]'"
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'-i'"
op|','
string|"'--image'"
op|','
name|'help'
op|'='
string|'"image to build from"'
op|','
nl|'\n'
name|'required'
op|'='
name|'True'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'-n'"
op|','
string|"'--num-runs'"
op|','
name|'type'
op|'='
name|'int'
op|','
name|'help'
op|'='
string|'"number of runs"'
op|','
nl|'\n'
name|'default'
op|'='
number|'1'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'-c'"
op|','
string|"'--concurrency'"
op|','
name|'type'
op|'='
name|'int'
op|','
name|'default'
op|'='
number|'5'
op|','
nl|'\n'
name|'help'
op|'='
string|'"number of concurrent processes"'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'--no-cleanup'"
op|','
name|'action'
op|'='
string|"'store_false'"
op|','
name|'dest'
op|'='
string|'"cleanup"'
op|','
nl|'\n'
name|'default'
op|'='
name|'True'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_argument'
op|'('
string|"'-d'"
op|','
string|"'--dom0-ips'"
op|','
nl|'\n'
name|'help'
op|'='
string|'"IP of dom0\'s to run cleanup script"'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'parser'
op|'.'
name|'parse_args'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'dom0_cleanup_script'
op|'='
name|'DOM0_CLEANUP_SCRIPT'
newline|'\n'
name|'args'
op|'='
name|'_parse_args'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'args'
op|'.'
name|'dom0_ips'
op|':'
newline|'\n'
indent|'        '
name|'dom0_ips'
op|'='
name|'args'
op|'.'
name|'dom0_ips'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'dom0_ips'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'batch_size'
op|'='
name|'min'
op|'('
name|'args'
op|'.'
name|'num_runs'
op|','
name|'args'
op|'.'
name|'concurrency'
op|')'
newline|'\n'
name|'pool'
op|'='
name|'multiprocessing'
op|'.'
name|'Pool'
op|'('
name|'processes'
op|'='
name|'args'
op|'.'
name|'concurrency'
op|')'
newline|'\n'
nl|'\n'
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'args'
op|'.'
name|'tests'
op|':'
newline|'\n'
indent|'        '
name|'test_func'
op|'='
name|'globals'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|'"test_%s"'
op|'%'
name|'test'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'test_func'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'>>'
name|'sys'
op|'.'
name|'stderr'
op|','
string|'"test \'%s\' not found"'
op|'%'
name|'test'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'contexts'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'args'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'args'
op|'.'
name|'num_runs'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'+='
name|'pool'
op|'.'
name|'map'
op|'('
name|'test_func'
op|','
name|'contexts'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'.'
name|'cleanup'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'dom0_ip'
name|'in'
name|'dom0_ips'
op|':'
newline|'\n'
indent|'                    '
name|'run'
op|'('
string|'"ssh root@%(dom0_ip)s %(dom0_cleanup_script)s"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'success'
op|'='
name|'all'
op|'('
name|'results'
op|')'
newline|'\n'
name|'result'
op|'='
string|'"SUCCESS"'
name|'if'
name|'success'
name|'else'
string|'"FAILED"'
newline|'\n'
nl|'\n'
name|'duration'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'print'
string|'"%s, finished in %.2f secs"'
op|'%'
op|'('
name|'result'
op|','
name|'duration'
op|')'
newline|'\n'
nl|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'0'
name|'if'
name|'success'
name|'else'
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

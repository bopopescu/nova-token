begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012, AT&T Labs, Yun Mao <yunmao@gmail.com>'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""pylint error checking"""'
newline|'\n'
nl|'\n'
name|'import'
name|'cStringIO'
name|'as'
name|'StringIO'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'pylint'
name|'import'
name|'lint'
newline|'\n'
name|'from'
name|'pylint'
op|'.'
name|'reporters'
name|'import'
name|'text'
newline|'\n'
nl|'\n'
comment|'# Note(maoy): E1103 is error code related to partial type inference'
nl|'\n'
DECL|variable|ignore_codes
name|'ignore_codes'
op|'='
op|'['
string|'"E1103"'
op|']'
newline|'\n'
comment|'# Note(maoy): the error message is the pattern of E0202. It should be ignored'
nl|'\n'
comment|'# for nova.tests modules'
nl|'\n'
DECL|variable|ignore_messages
name|'ignore_messages'
op|'='
op|'['
string|'"An attribute affected in nova.tests"'
op|']'
newline|'\n'
comment|'# Note(maoy): we ignore all errors in openstack.common because it should be'
nl|'\n'
comment|'# checked elsewhere. We also ignore nova.tests for now due to high false'
nl|'\n'
comment|'# positive rate.'
nl|'\n'
DECL|variable|ignore_modules
name|'ignore_modules'
op|'='
op|'['
string|'"nova/openstack/common/"'
op|','
string|'"nova/tests/"'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|KNOWN_PYLINT_EXCEPTIONS_FILE
name|'KNOWN_PYLINT_EXCEPTIONS_FILE'
op|'='
string|'"tools/pylint_exceptions"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LintOutput
name|'class'
name|'LintOutput'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|_cached_filename
indent|'    '
name|'_cached_filename'
op|'='
name|'None'
newline|'\n'
DECL|variable|_cached_content
name|'_cached_content'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'filename'
op|','
name|'lineno'
op|','
name|'line_content'
op|','
name|'code'
op|','
name|'message'
op|','
nl|'\n'
name|'lintoutput'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filename'
op|'='
name|'filename'
newline|'\n'
name|'self'
op|'.'
name|'lineno'
op|'='
name|'lineno'
newline|'\n'
name|'self'
op|'.'
name|'line_content'
op|'='
name|'line_content'
newline|'\n'
name|'self'
op|'.'
name|'code'
op|'='
name|'code'
newline|'\n'
name|'self'
op|'.'
name|'message'
op|'='
name|'message'
newline|'\n'
name|'self'
op|'.'
name|'lintoutput'
op|'='
name|'lintoutput'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_line
name|'def'
name|'from_line'
op|'('
name|'cls'
op|','
name|'line'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'re'
op|'.'
name|'search'
op|'('
string|'r"(\\S+):(\\d+): \\[(\\S+)(, \\S+)?] (.*)"'
op|','
name|'line'
op|')'
newline|'\n'
name|'matched'
op|'='
name|'m'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
name|'filename'
op|','
name|'lineno'
op|','
name|'code'
op|','
name|'message'
op|'='
op|'('
name|'matched'
op|'['
number|'0'
op|']'
op|','
name|'int'
op|'('
name|'matched'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'matched'
op|'['
number|'2'
op|']'
op|','
name|'matched'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'if'
name|'cls'
op|'.'
name|'_cached_filename'
op|'!='
name|'filename'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'open'
op|'('
name|'filename'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'cls'
op|'.'
name|'_cached_content'
op|'='
name|'list'
op|'('
name|'f'
op|'.'
name|'readlines'
op|'('
op|')'
op|')'
newline|'\n'
name|'cls'
op|'.'
name|'_cached_filename'
op|'='
name|'filename'
newline|'\n'
dedent|''
dedent|''
name|'line_content'
op|'='
name|'cls'
op|'.'
name|'_cached_content'
op|'['
name|'lineno'
op|'-'
number|'1'
op|']'
op|'.'
name|'rstrip'
op|'('
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'('
name|'filename'
op|','
name|'lineno'
op|','
name|'line_content'
op|','
name|'code'
op|','
name|'message'
op|','
nl|'\n'
name|'line'
op|'.'
name|'rstrip'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_msg_to_dict
name|'def'
name|'from_msg_to_dict'
op|'('
name|'cls'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""From the output of pylint msg, to a dict, where each key\n        is a unique error identifier, value is a list of LintOutput\n        """'
newline|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'msg'
op|'.'
name|'splitlines'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'cls'
op|'.'
name|'from_line'
op|'('
name|'line'
op|')'
newline|'\n'
name|'if'
name|'obj'
op|'.'
name|'is_ignored'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'key'
op|'='
name|'obj'
op|'.'
name|'key'
op|'('
op|')'
newline|'\n'
name|'if'
name|'key'
name|'not'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'['
name|'key'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'result'
op|'['
name|'key'
op|']'
op|'.'
name|'append'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
DECL|member|is_ignored
dedent|''
name|'def'
name|'is_ignored'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'code'
name|'in'
name|'ignore_codes'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'any'
op|'('
name|'self'
op|'.'
name|'filename'
op|'.'
name|'startswith'
op|'('
name|'name'
op|')'
name|'for'
name|'name'
name|'in'
name|'ignore_modules'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'any'
op|'('
name|'msg'
name|'in'
name|'self'
op|'.'
name|'message'
name|'for'
name|'msg'
name|'in'
name|'ignore_messages'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|key
dedent|''
name|'def'
name|'key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'code'
name|'in'
op|'['
string|'"E1101"'
op|','
string|'"E1103"'
op|']'
op|':'
newline|'\n'
comment|'# These two types of errors are like Foo class has no member bar.'
nl|'\n'
comment|'# We discard the source code so that the error will be ignored'
nl|'\n'
comment|'# next time another Foo.bar is encountered.'
nl|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'message'
op|','
string|'""'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'message'
op|','
name|'self'
op|'.'
name|'line_content'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|json
dedent|''
name|'def'
name|'json'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|review_str
dedent|''
name|'def'
name|'review_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"File %(filename)s\\nLine %(lineno)d:%(line_content)s\\n"'
nl|'\n'
string|'"%(code)s: %(message)s"'
op|'%'
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ErrorKeys
dedent|''
dedent|''
name|'class'
name|'ErrorKeys'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|print_json
name|'def'
name|'print_json'
op|'('
name|'cls'
op|','
name|'errors'
op|','
name|'output'
op|'='
name|'sys'
op|'.'
name|'stdout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'output'
op|','
string|'"# automatically generated by tools/lintstack.py"'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'sorted'
op|'('
name|'errors'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'print'
op|'>>'
name|'output'
op|','
name|'json'
op|'.'
name|'dumps'
op|'('
name|'i'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_file
name|'def'
name|'from_file'
op|'('
name|'cls'
op|','
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keys'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'line'
name|'in'
name|'open'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'line'
name|'and'
name|'line'
op|'['
number|'0'
op|']'
op|'!='
string|'"#"'
op|':'
newline|'\n'
indent|'                '
name|'d'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'line'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'add'
op|'('
name|'tuple'
op|'('
name|'d'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'keys'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|run_pylint
dedent|''
dedent|''
name|'def'
name|'run_pylint'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'buff'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'reporter'
op|'='
name|'text'
op|'.'
name|'ParseableTextReporter'
op|'('
name|'output'
op|'='
name|'buff'
op|')'
newline|'\n'
name|'args'
op|'='
op|'['
string|'"--include-ids=y"'
op|','
string|'"-E"'
op|','
string|'"nova"'
op|']'
newline|'\n'
name|'lint'
op|'.'
name|'Run'
op|'('
name|'args'
op|','
name|'reporter'
op|'='
name|'reporter'
op|','
name|'exit'
op|'='
name|'False'
op|')'
newline|'\n'
name|'val'
op|'='
name|'buff'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
name|'buff'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'val'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_error_keys
dedent|''
name|'def'
name|'generate_error_keys'
op|'('
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Generating"'
op|','
name|'KNOWN_PYLINT_EXCEPTIONS_FILE'
newline|'\n'
name|'if'
name|'msg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'run_pylint'
op|'('
op|')'
newline|'\n'
dedent|''
name|'errors'
op|'='
name|'LintOutput'
op|'.'
name|'from_msg_to_dict'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'KNOWN_PYLINT_EXCEPTIONS_FILE'
op|','
string|'"w"'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'ErrorKeys'
op|'.'
name|'print_json'
op|'('
name|'errors'
op|','
name|'output'
op|'='
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate
dedent|''
dedent|''
name|'def'
name|'validate'
op|'('
name|'newmsg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"Loading"'
op|','
name|'KNOWN_PYLINT_EXCEPTIONS_FILE'
newline|'\n'
name|'known'
op|'='
name|'ErrorKeys'
op|'.'
name|'from_file'
op|'('
name|'KNOWN_PYLINT_EXCEPTIONS_FILE'
op|')'
newline|'\n'
name|'if'
name|'newmsg'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"Running pylint. Be patient..."'
newline|'\n'
name|'newmsg'
op|'='
name|'run_pylint'
op|'('
op|')'
newline|'\n'
dedent|''
name|'errors'
op|'='
name|'LintOutput'
op|'.'
name|'from_msg_to_dict'
op|'('
name|'newmsg'
op|')'
newline|'\n'
nl|'\n'
name|'print'
string|'"Unique errors reported by pylint: was %d, now %d."'
op|'%'
op|'('
name|'len'
op|'('
name|'known'
op|')'
op|','
name|'len'
op|'('
name|'errors'
op|')'
op|')'
newline|'\n'
name|'passed'
op|'='
name|'True'
newline|'\n'
name|'for'
name|'err_key'
op|','
name|'err_list'
name|'in'
name|'errors'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'err'
name|'in'
name|'err_list'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'err_key'
name|'not'
name|'in'
name|'known'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'err'
op|'.'
name|'lintoutput'
newline|'\n'
name|'print'
newline|'\n'
name|'passed'
op|'='
name|'False'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'passed'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|'"Congrats! pylint check passed."'
newline|'\n'
name|'redundant'
op|'='
name|'known'
op|'-'
name|'set'
op|'('
name|'errors'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'redundant'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|'"Extra credit: some known pylint exceptions disappeared."'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'sorted'
op|'('
name|'redundant'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'print'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'i'
op|')'
newline|'\n'
dedent|''
name|'print'
string|'"Consider regenerating the exception file if you will."'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'('
string|'"Please fix the errors above. If you believe they are false"'
nl|'\n'
string|'" positives, run \'tools/lintstack.py generate\' to overwrite."'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|usage
dedent|''
dedent|''
name|'def'
name|'usage'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|'"""Usage: tools/lintstack.py [generate|validate]\n    To generate pylint_exceptions file: tools/lintstack.py generate\n    To validate the current commit: tools/lintstack.py\n    """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|main
dedent|''
name|'def'
name|'main'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'option'
op|'='
string|'"validate"'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'sys'
op|'.'
name|'argv'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'option'
op|'='
name|'sys'
op|'.'
name|'argv'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'option'
op|'=='
string|'"generate"'
op|':'
newline|'\n'
indent|'        '
name|'generate_error_keys'
op|'('
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'option'
op|'=='
string|'"validate"'
op|':'
newline|'\n'
indent|'        '
name|'validate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'usage'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|'"__main__"'
op|':'
newline|'\n'
indent|'    '
name|'main'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

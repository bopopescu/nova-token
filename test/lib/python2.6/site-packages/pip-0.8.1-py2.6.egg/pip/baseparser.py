begin_unit
string|'"""Base option parser setup"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'optparse'
newline|'\n'
name|'import'
name|'pkg_resources'
newline|'\n'
name|'import'
name|'ConfigParser'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'from'
name|'distutils'
op|'.'
name|'util'
name|'import'
name|'strtobool'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'locations'
name|'import'
name|'default_config_file'
op|','
name|'default_log_file'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UpdatingDefaultsHelpFormatter
name|'class'
name|'UpdatingDefaultsHelpFormatter'
op|'('
name|'optparse'
op|'.'
name|'IndentedHelpFormatter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Custom help formatter for use in ConfigOptionParser that updates\n    the defaults before expanding them, allowing them to show up correctly\n    in the help listing"""'
newline|'\n'
nl|'\n'
DECL|member|expand_default
name|'def'
name|'expand_default'
op|'('
name|'self'
op|','
name|'option'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'parser'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'parser'
op|'.'
name|'update_defaults'
op|'('
name|'self'
op|'.'
name|'parser'
op|'.'
name|'defaults'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'optparse'
op|'.'
name|'IndentedHelpFormatter'
op|'.'
name|'expand_default'
op|'('
name|'self'
op|','
name|'option'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfigOptionParser
dedent|''
dedent|''
name|'class'
name|'ConfigOptionParser'
op|'('
name|'optparse'
op|'.'
name|'OptionParser'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Custom option parser which updates its defaults by by checking the\n    configuration files and environmental variables"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'='
name|'ConfigParser'
op|'.'
name|'RawConfigParser'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'files'
op|'='
name|'self'
op|'.'
name|'get_config_files'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'files'
op|')'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'optparse'
op|'.'
name|'OptionParser'
op|'.'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_config_files
dedent|''
name|'def'
name|'get_config_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'config_file'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PIP_CONFIG_FILE'"
op|','
name|'False'
op|')'
newline|'\n'
name|'if'
name|'config_file'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'config_file'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'config_file'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'default_config_file'
op|']'
newline|'\n'
nl|'\n'
DECL|member|update_defaults
dedent|''
name|'def'
name|'update_defaults'
op|'('
name|'self'
op|','
name|'defaults'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates the given defaults with values from the config files and\n        the environ. Does a little special handling for certain types of\n        options (lists)."""'
newline|'\n'
comment|'# Then go and look for the other sources of configuration:'
nl|'\n'
name|'config'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# 1. config files'
nl|'\n'
name|'for'
name|'section'
name|'in'
op|'('
string|"'global'"
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'config'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'self'
op|'.'
name|'get_config_section'
op|'('
name|'section'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# 2. environmental variables'
nl|'\n'
dedent|''
name|'config'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'self'
op|'.'
name|'get_environ_vars'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# Then set the options with those values'
nl|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'config'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'key'
op|'.'
name|'replace'
op|'('
string|"'_'"
op|','
string|"'-'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'key'
op|'='
string|"'--%s'"
op|'%'
name|'key'
comment|'# only prefer long opts'
newline|'\n'
dedent|''
name|'option'
op|'='
name|'self'
op|'.'
name|'get_option'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'option'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
comment|'# ignore empty values'
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'val'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
comment|'# handle multiline configs'
nl|'\n'
dedent|''
name|'if'
name|'option'
op|'.'
name|'action'
op|'=='
string|"'append'"
op|':'
newline|'\n'
indent|'                    '
name|'val'
op|'='
name|'val'
op|'.'
name|'split'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'option'
op|'.'
name|'nargs'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'if'
name|'option'
op|'.'
name|'action'
name|'in'
op|'('
string|"'store_true'"
op|','
string|"'store_false'"
op|','
string|"'count'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'val'
op|'='
name|'strtobool'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'val'
op|'='
name|'option'
op|'.'
name|'convert_value'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'optparse'
op|'.'
name|'OptionValueError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'print'
op|'('
string|'"An error occured during configuration: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'3'
op|')'
newline|'\n'
dedent|''
name|'defaults'
op|'['
name|'option'
op|'.'
name|'dest'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'defaults'
newline|'\n'
nl|'\n'
DECL|member|get_config_section
dedent|''
name|'def'
name|'get_config_section'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get a section of a configuration"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'config'
op|'.'
name|'has_section'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'config'
op|'.'
name|'items'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_environ_vars
dedent|''
name|'def'
name|'get_environ_vars'
op|'('
name|'self'
op|','
name|'prefix'
op|'='
string|"'PIP_'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a generator with all environmental vars with prefix PIP_"""'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
op|'('
name|'key'
op|'.'
name|'replace'
op|'('
name|'prefix'
op|','
string|"''"
op|')'
op|'.'
name|'lower'
op|'('
op|')'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_default_values
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_default_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Overridding to make updating the defaults after instantiation of\n        the option parser possible, update_defaults() does the dirty work."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'process_default_values'
op|':'
newline|'\n'
comment|'# Old, pre-Optik 1.5 behaviour.'
nl|'\n'
indent|'            '
name|'return'
name|'optparse'
op|'.'
name|'Values'
op|'('
name|'self'
op|'.'
name|'defaults'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'defaults'
op|'='
name|'self'
op|'.'
name|'update_defaults'
op|'('
name|'self'
op|'.'
name|'defaults'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
comment|'# ours'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'self'
op|'.'
name|'_get_all_options'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'default'
op|'='
name|'defaults'
op|'.'
name|'get'
op|'('
name|'option'
op|'.'
name|'dest'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'default'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'opt_str'
op|'='
name|'option'
op|'.'
name|'get_opt_string'
op|'('
op|')'
newline|'\n'
name|'defaults'
op|'['
name|'option'
op|'.'
name|'dest'
op|']'
op|'='
name|'option'
op|'.'
name|'check_value'
op|'('
name|'opt_str'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'optparse'
op|'.'
name|'Values'
op|'('
name|'defaults'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'try'
op|':'
newline|'\n'
DECL|variable|pip_dist
indent|'    '
name|'pip_dist'
op|'='
name|'pkg_resources'
op|'.'
name|'get_distribution'
op|'('
string|"'pip'"
op|')'
newline|'\n'
DECL|variable|version
name|'version'
op|'='
string|"'%s from %s (python %s)'"
op|'%'
op|'('
nl|'\n'
name|'pip_dist'
op|','
name|'pip_dist'
op|'.'
name|'location'
op|','
name|'sys'
op|'.'
name|'version'
op|'['
op|':'
number|'3'
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'pkg_resources'
op|'.'
name|'DistributionNotFound'
op|':'
newline|'\n'
comment|'# when running pip.py without installing'
nl|'\n'
DECL|variable|version
indent|'    '
name|'version'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|parser
dedent|''
name|'parser'
op|'='
name|'ConfigOptionParser'
op|'('
nl|'\n'
DECL|variable|usage
name|'usage'
op|'='
string|"'%prog COMMAND [OPTIONS]'"
op|','
nl|'\n'
DECL|variable|version
name|'version'
op|'='
name|'version'
op|','
nl|'\n'
DECL|variable|add_help_option
name|'add_help_option'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|formatter
name|'formatter'
op|'='
name|'UpdatingDefaultsHelpFormatter'
op|'('
op|')'
op|','
nl|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'global'"
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'-h'"
op|','
string|"'--help'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'help'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Show help'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'-E'"
op|','
string|"'--environment'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'venv'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'DIR'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'virtualenv environment to run pip in (either give the '"
nl|'\n'
string|"'interpreter or the environment base directory)'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'-s'"
op|','
string|"'--enable-site-packages'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'site_packages'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Include site-packages in virtualenv if one is to be '"
nl|'\n'
string|"'created. Ignored if --environment is not used or '"
nl|'\n'
string|"'the virtualenv already exists.'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|'# Defines a default root directory for virtualenvs, relative'
nl|'\n'
comment|'# virtualenvs names/paths are considered relative to it.'
nl|'\n'
string|"'--virtualenv-base'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'venv_base'"
op|','
nl|'\n'
DECL|variable|type
name|'type'
op|'='
string|"'str'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|'# Run only if inside a virtualenv, bail if not.'
nl|'\n'
string|"'--require-virtualenv'"
op|','
string|"'--require-venv'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'require_venv'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|'# Use automatically an activated virtualenv instead of installing'
nl|'\n'
comment|'# globally. -E will be ignored if used.'
nl|'\n'
string|"'--respect-virtualenv'"
op|','
string|"'--respect-venv'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'respect_venv'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'-v'"
op|','
string|"'--verbose'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'verbose'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Give more output'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'-q'"
op|','
string|"'--quiet'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'quiet'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Give less output'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--log'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'log'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'FILENAME'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Log file where a complete (maximum verbosity) record will be kept'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|"# Writes the log levels explicitely to the log'"
nl|'\n'
string|"'--log-explicit-levels'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'log_explicit_levels'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|'# The default log file'
nl|'\n'
string|"'--local-log'"
op|','
string|"'--log-file'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'log_file'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'FILENAME'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'default_log_file'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|"# Don't ask for input"
nl|'\n'
string|"'--no-input'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'no_input'"
op|','
nl|'\n'
DECL|variable|action
name|'action'
op|'='
string|"'store_true'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--proxy'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'proxy'"
op|','
nl|'\n'
DECL|variable|type
name|'type'
op|'='
string|"'str'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Specify a proxy in the form user:passwd@proxy.server:port. "'
nl|'\n'
string|'"Note that the user:password@ is optional and required only if you "'
nl|'\n'
string|'"are behind an authenticated proxy.  If you provide "'
nl|'\n'
string|'"user@proxy.server:port then you will be prompted for a password."'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
string|"'--timeout'"
op|','
string|"'--default-timeout'"
op|','
nl|'\n'
DECL|variable|metavar
name|'metavar'
op|'='
string|"'SECONDS'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'timeout'"
op|','
nl|'\n'
DECL|variable|type
name|'type'
op|'='
string|"'float'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'15'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Set the socket timeout (default %default seconds)'"
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|"# The default version control system for editables, e.g. 'svn'"
nl|'\n'
string|"'--default-vcs'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'default_vcs'"
op|','
nl|'\n'
DECL|variable|type
name|'type'
op|'='
string|"'str'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
name|'parser'
op|'.'
name|'add_option'
op|'('
nl|'\n'
comment|'# A regex to be used to skip requirements'
nl|'\n'
string|"'--skip-requirements-regex'"
op|','
nl|'\n'
DECL|variable|dest
name|'dest'
op|'='
string|"'skip_requirements_regex'"
op|','
nl|'\n'
DECL|variable|type
name|'type'
op|'='
string|"'str'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
name|'optparse'
op|'.'
name|'SUPPRESS_HELP'
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'.'
name|'disable_interspersed_args'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

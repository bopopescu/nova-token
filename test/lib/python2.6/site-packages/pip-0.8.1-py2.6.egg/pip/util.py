begin_unit
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'stat'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'posixpath'
newline|'\n'
name|'import'
name|'pkg_resources'
newline|'\n'
name|'import'
name|'zipfile'
newline|'\n'
name|'import'
name|'tarfile'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'exceptions'
name|'import'
name|'InstallationError'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'backwardcompat'
name|'import'
name|'WindowsError'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'locations'
name|'import'
name|'site_packages'
op|','
name|'running_under_virtualenv'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'log'
name|'import'
name|'logger'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'rmtree'"
op|','
string|"'display_path'"
op|','
string|"'backup_dir'"
op|','
nl|'\n'
string|"'find_command'"
op|','
string|"'ask'"
op|','
string|"'Inf'"
op|','
nl|'\n'
string|"'normalize_name'"
op|','
string|"'splitext'"
op|','
nl|'\n'
string|"'format_size'"
op|','
string|"'is_installable_dir'"
op|','
nl|'\n'
string|"'is_svn_page'"
op|','
string|"'file_contents'"
op|','
nl|'\n'
string|"'split_leading_dir'"
op|','
string|"'has_leading_dir'"
op|','
nl|'\n'
string|"'make_path_relative'"
op|','
string|"'normalize_path'"
op|','
nl|'\n'
string|"'renames'"
op|','
string|"'get_terminal_size'"
op|','
nl|'\n'
string|"'unzip_file'"
op|','
string|"'untar_file'"
op|','
string|"'create_download_cache_folder'"
op|','
nl|'\n'
string|"'cache_download'"
op|','
string|"'unpack_file'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rmtree
name|'def'
name|'rmtree'
op|'('
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'dir'
op|','
name|'ignore_errors'
op|'='
name|'True'
op|','
nl|'\n'
name|'onerror'
op|'='
name|'rmtree_errorhandler'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rmtree_errorhandler
dedent|''
name|'def'
name|'rmtree_errorhandler'
op|'('
name|'func'
op|','
name|'path'
op|','
name|'exc_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""On Windows, the files in .svn are read-only, so when rmtree() tries to\n    remove them, an exception is thrown.  We catch that here, remove the\n    read-only attribute, and hopefully continue without problems."""'
newline|'\n'
name|'exctype'
op|','
name|'value'
op|'='
name|'exc_info'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
comment|'# lookin for a windows error'
nl|'\n'
name|'if'
name|'exctype'
name|'is'
name|'not'
name|'WindowsError'
name|'or'
string|"'Access is denied'"
name|'not'
name|'in'
name|'str'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
comment|'# file type should currently be read only'
nl|'\n'
dedent|''
name|'if'
op|'('
op|'('
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
op|'.'
name|'st_mode'
op|'&'
name|'stat'
op|'.'
name|'S_IREAD'
op|')'
op|'!='
name|'stat'
op|'.'
name|'S_IREAD'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
comment|'# convert to read/write'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'chmod'
op|'('
name|'path'
op|','
name|'stat'
op|'.'
name|'S_IWRITE'
op|')'
newline|'\n'
comment|'# use the original function to repeat the operation'
nl|'\n'
name|'func'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|display_path
dedent|''
name|'def'
name|'display_path'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gives the display value for a given path, making it relative to cwd\n    if possible."""'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normcase'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
name|'if'
name|'path'
op|'.'
name|'startswith'
op|'('
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
string|"'.'"
op|'+'
name|'path'
op|'['
name|'len'
op|'('
name|'os'
op|'.'
name|'getcwd'
op|'('
op|')'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|backup_dir
dedent|''
name|'def'
name|'backup_dir'
op|'('
name|'dir'
op|','
name|'ext'
op|'='
string|"'.bak'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Figure out the name of a directory to back up the given dir to\n    (adding .bak, .bak2, etc)"""'
newline|'\n'
name|'n'
op|'='
number|'1'
newline|'\n'
name|'extension'
op|'='
name|'ext'
newline|'\n'
name|'while'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dir'
op|'+'
name|'extension'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'n'
op|'+='
number|'1'
newline|'\n'
name|'extension'
op|'='
name|'ext'
op|'+'
name|'str'
op|'('
name|'n'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'dir'
op|'+'
name|'extension'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_command
dedent|''
name|'def'
name|'find_command'
op|'('
name|'cmd'
op|','
name|'paths'
op|'='
name|'None'
op|','
name|'pathext'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Searches the PATH for the given command and returns its path"""'
newline|'\n'
name|'if'
name|'paths'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PATH'"
op|','
op|'['
op|']'
op|')'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'pathsep'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'paths'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'paths'
op|'='
op|'['
name|'paths'
op|']'
newline|'\n'
comment|'# check if there are funny path extensions for executables, e.g. Windows'
nl|'\n'
dedent|''
name|'if'
name|'pathext'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'pathext'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PATHEXT'"
op|','
string|"'.COM;.EXE;.BAT;.CMD'"
op|')'
newline|'\n'
dedent|''
name|'pathext'
op|'='
op|'['
name|'ext'
name|'for'
name|'ext'
name|'in'
name|'pathext'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'pathsep'
op|')'
op|']'
newline|'\n'
comment|"# don't use extensions if the command ends with one of them"
nl|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'splitext'
op|'('
name|'cmd'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
name|'pathext'
op|':'
newline|'\n'
indent|'        '
name|'pathext'
op|'='
op|'['
string|"''"
op|']'
newline|'\n'
comment|'# check if we find the command on PATH'
nl|'\n'
dedent|''
name|'for'
name|'path'
name|'in'
name|'paths'
op|':'
newline|'\n'
comment|'# try without extension first'
nl|'\n'
indent|'        '
name|'cmd_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'for'
name|'ext'
name|'in'
name|'pathext'
op|':'
newline|'\n'
comment|'# then including the extension'
nl|'\n'
indent|'            '
name|'cmd_path_ext'
op|'='
name|'cmd_path'
op|'+'
name|'ext'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'cmd_path_ext'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cmd_path_ext'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'cmd_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cmd_path'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ask
dedent|''
name|'def'
name|'ask'
op|'('
name|'message'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ask the message interactively, with the given possible responses"""'
newline|'\n'
name|'while'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'PIP_NO_INPUT'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'No input was expected ($PIP_NO_INPUT set); question: %s'"
op|'%'
name|'message'
op|')'
newline|'\n'
dedent|''
name|'response'
op|'='
name|'raw_input'
op|'('
name|'message'
op|')'
newline|'\n'
name|'response'
op|'='
name|'response'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'response'
name|'not'
name|'in'
name|'options'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'Your response (%r) was not one of the expected responses: %s'"
op|'%'
op|'('
nl|'\n'
name|'response'
op|','
string|"', '"
op|'.'
name|'join'
op|'('
name|'options'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'response'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_Inf
dedent|''
dedent|''
dedent|''
name|'class'
name|'_Inf'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""I am bigger than everything!"""'
newline|'\n'
DECL|member|__cmp__
name|'def'
name|'__cmp__'
op|'('
name|'self'
op|','
name|'a'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
name|'is'
name|'a'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'Inf'"
newline|'\n'
nl|'\n'
DECL|variable|Inf
dedent|''
dedent|''
name|'Inf'
op|'='
name|'_Inf'
op|'('
op|')'
newline|'\n'
name|'del'
name|'_Inf'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_normalize_re
name|'_normalize_re'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"r'[^a-z]'"
op|','
name|'re'
op|'.'
name|'I'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize_name
name|'def'
name|'normalize_name'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'_normalize_re'
op|'.'
name|'sub'
op|'('
string|"'-'"
op|','
name|'name'
op|'.'
name|'lower'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|format_size
dedent|''
name|'def'
name|'format_size'
op|'('
name|'bytes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'bytes'
op|'>'
number|'1000'
op|'*'
number|'1000'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%.1fMb'"
op|'%'
op|'('
name|'bytes'
op|'/'
number|'1000.0'
op|'/'
number|'1000'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'bytes'
op|'>'
number|'10'
op|'*'
number|'1000'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%iKb'"
op|'%'
op|'('
name|'bytes'
op|'/'
number|'1000'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'bytes'
op|'>'
number|'1000'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%.1fKb'"
op|'%'
op|'('
name|'bytes'
op|'/'
number|'1000.0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%ibytes'"
op|'%'
name|'bytes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_installable_dir
dedent|''
dedent|''
name|'def'
name|'is_installable_dir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return True if `path` is a directory containing a setup.py file."""'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'setup_py'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
string|"'setup.py'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isfile'
op|'('
name|'setup_py'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_svn_page
dedent|''
name|'def'
name|'is_svn_page'
op|'('
name|'html'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns true if the page appears to be the index page of an svn repository"""'
newline|'\n'
name|'return'
op|'('
name|'re'
op|'.'
name|'search'
op|'('
string|"r'<title>[^<]*Revision \\d+:'"
op|','
name|'html'
op|')'
nl|'\n'
name|'and'
name|'re'
op|'.'
name|'search'
op|'('
string|"r'Powered by (?:<a[^>]*?>)?Subversion'"
op|','
name|'html'
op|','
name|'re'
op|'.'
name|'I'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|file_contents
dedent|''
name|'def'
name|'file_contents'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fp'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'rb'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|split_leading_dir
dedent|''
dedent|''
name|'def'
name|'split_leading_dir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'path'
op|'='
name|'str'
op|'('
name|'path'
op|')'
newline|'\n'
name|'path'
op|'='
name|'path'
op|'.'
name|'lstrip'
op|'('
string|"'/'"
op|')'
op|'.'
name|'lstrip'
op|'('
string|"'\\\\'"
op|')'
newline|'\n'
name|'if'
string|"'/'"
name|'in'
name|'path'
name|'and'
op|'('
op|'('
string|"'\\\\'"
name|'in'
name|'path'
name|'and'
name|'path'
op|'.'
name|'find'
op|'('
string|"'/'"
op|')'
op|'<'
name|'path'
op|'.'
name|'find'
op|'('
string|"'\\\\'"
op|')'
op|')'
nl|'\n'
name|'or'
string|"'\\\\'"
name|'not'
name|'in'
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'path'
op|'.'
name|'split'
op|'('
string|"'/'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'elif'
string|"'\\\\'"
name|'in'
name|'path'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'path'
op|'.'
name|'split'
op|'('
string|"'\\\\'"
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'path'
op|','
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|has_leading_dir
dedent|''
dedent|''
name|'def'
name|'has_leading_dir'
op|'('
name|'paths'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns true if all the paths have the same leading path name\n    (i.e., everything is in one subdirectory in an archive)"""'
newline|'\n'
name|'common_prefix'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'paths'
op|':'
newline|'\n'
indent|'        '
name|'prefix'
op|','
name|'rest'
op|'='
name|'split_leading_dir'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'prefix'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'elif'
name|'common_prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'common_prefix'
op|'='
name|'prefix'
newline|'\n'
dedent|''
name|'elif'
name|'prefix'
op|'!='
name|'common_prefix'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_path_relative
dedent|''
name|'def'
name|'make_path_relative'
op|'('
name|'path'
op|','
name|'rel_to'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Make a filename relative, where the filename path, and it is\n    relative to rel_to\n\n        >>> make_relative_path(\'/usr/share/something/a-file.pth\',\n        ...                    \'/usr/share/another-place/src/Directory\')\n        \'../../../something/a-file.pth\'\n        >>> make_relative_path(\'/usr/share/something/a-file.pth\',\n        ...                    \'/home/user/src/Directory\')\n        \'../../../usr/share/something/a-file.pth\'\n        >>> make_relative_path(\'/usr/share/a-file.pth\', \'/usr/share/\')\n        \'a-file.pth\'\n    """'
newline|'\n'
name|'path_filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'path'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'path'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
name|'rel_to'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'rel_to'
op|')'
op|')'
newline|'\n'
name|'path_parts'
op|'='
name|'path'
op|'.'
name|'strip'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'rel_to_parts'
op|'='
name|'rel_to'
op|'.'
name|'strip'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
op|'.'
name|'split'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|')'
newline|'\n'
name|'while'
name|'path_parts'
name|'and'
name|'rel_to_parts'
name|'and'
name|'path_parts'
op|'['
number|'0'
op|']'
op|'=='
name|'rel_to_parts'
op|'['
number|'0'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'path_parts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'rel_to_parts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'full_parts'
op|'='
op|'['
string|"'..'"
op|']'
op|'*'
name|'len'
op|'('
name|'rel_to_parts'
op|')'
op|'+'
name|'path_parts'
op|'+'
op|'['
name|'path_filename'
op|']'
newline|'\n'
name|'if'
name|'full_parts'
op|'=='
op|'['
string|"''"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'.'"
op|'+'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
newline|'\n'
dedent|''
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'sep'
op|'.'
name|'join'
op|'('
name|'full_parts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|normalize_path
dedent|''
name|'def'
name|'normalize_path'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Convert a path to its canonical, case-normalized, absolute version.\n\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'normcase'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|splitext
dedent|''
name|'def'
name|'splitext'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Like os.path.splitext, but take off .tar too"""'
newline|'\n'
name|'base'
op|','
name|'ext'
op|'='
name|'posixpath'
op|'.'
name|'splitext'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'base'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.tar'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ext'
op|'='
name|'base'
op|'['
op|'-'
number|'4'
op|':'
op|']'
op|'+'
name|'ext'
newline|'\n'
name|'base'
op|'='
name|'base'
op|'['
op|':'
op|'-'
number|'4'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'base'
op|','
name|'ext'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|renames
dedent|''
name|'def'
name|'renames'
op|'('
name|'old'
op|','
name|'new'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Like os.renames(), but handles renaming across devices."""'
newline|'\n'
comment|'# Implementation borrowed from os.renames().'
nl|'\n'
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'new'
op|')'
newline|'\n'
name|'if'
name|'head'
name|'and'
name|'tail'
name|'and'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'head'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'head'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'shutil'
op|'.'
name|'move'
op|'('
name|'old'
op|','
name|'new'
op|')'
newline|'\n'
nl|'\n'
name|'head'
op|','
name|'tail'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'split'
op|'('
name|'old'
op|')'
newline|'\n'
name|'if'
name|'head'
name|'and'
name|'tail'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'removedirs'
op|'('
name|'head'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_local
dedent|''
dedent|''
dedent|''
name|'def'
name|'is_local'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return True if path is within sys.prefix, if we\'re running in a virtualenv.\n\n    If we\'re not in a virtualenv, all paths are considered "local."\n\n    """'
newline|'\n'
name|'if'
name|'not'
name|'running_under_virtualenv'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'normalize_path'
op|'('
name|'path'
op|')'
op|'.'
name|'startswith'
op|'('
name|'normalize_path'
op|'('
name|'sys'
op|'.'
name|'prefix'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dist_is_local
dedent|''
name|'def'
name|'dist_is_local'
op|'('
name|'dist'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return True if given Distribution object is installed locally\n    (i.e. within current virtualenv).\n\n    Always True if we\'re not in a virtualenv.\n\n    """'
newline|'\n'
name|'return'
name|'is_local'
op|'('
name|'dist_location'
op|'('
name|'dist'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_installed_distributions
dedent|''
name|'def'
name|'get_installed_distributions'
op|'('
name|'local_only'
op|'='
name|'True'
op|','
name|'skip'
op|'='
op|'('
string|"'setuptools'"
op|','
string|"'pip'"
op|','
string|"'python'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a list of installed Distribution objects.\n\n    If ``local_only`` is True (default), only return installations\n    local to the current virtualenv, if in a virtualenv.\n\n    ``skip`` argument is an iterable of lower-case project names to\n    ignore; defaults to (\'setuptools\', \'pip\', \'python\'). [FIXME also\n    skip virtualenv?]\n\n    """'
newline|'\n'
name|'if'
name|'local_only'
op|':'
newline|'\n'
indent|'        '
name|'local_test'
op|'='
name|'dist_is_local'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'local_test'
op|'='
name|'lambda'
name|'d'
op|':'
name|'True'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'d'
name|'for'
name|'d'
name|'in'
name|'pkg_resources'
op|'.'
name|'working_set'
name|'if'
name|'local_test'
op|'('
name|'d'
op|')'
name|'and'
name|'d'
op|'.'
name|'key'
name|'not'
name|'in'
name|'skip'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|egg_link_path
dedent|''
name|'def'
name|'egg_link_path'
op|'('
name|'dist'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return the path where we\'d expect to find a .egg-link file for\n    this distribution. (There doesn\'t seem to be any metadata in the\n    Distribution object for a develop egg that points back to its\n    .egg-link and easy-install.pth files).\n\n    This won\'t find a globally-installed develop egg if we\'re in a\n    virtualenv.\n\n    """'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'site_packages'
op|','
name|'dist'
op|'.'
name|'project_name'
op|')'
op|'+'
string|"'.egg-link'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dist_location
dedent|''
name|'def'
name|'dist_location'
op|'('
name|'dist'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Get the site-packages location of this distribution. Generally\n    this is dist.location, except in the case of develop-installed\n    packages, where dist.location is the source code location, and we\n    want to know where the egg-link file is.\n\n    """'
newline|'\n'
name|'egg_link'
op|'='
name|'egg_link_path'
op|'('
name|'dist'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'egg_link'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'egg_link'
newline|'\n'
dedent|''
name|'return'
name|'dist'
op|'.'
name|'location'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_terminal_size
dedent|''
name|'def'
name|'get_terminal_size'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a tuple (x, y) representing the width(x) and the height(x)\n    in characters of the terminal window."""'
newline|'\n'
DECL|function|ioctl_GWINSZ
name|'def'
name|'ioctl_GWINSZ'
op|'('
name|'fd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'fcntl'
newline|'\n'
name|'import'
name|'termios'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'cr'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
string|"'hh'"
op|','
name|'fcntl'
op|'.'
name|'ioctl'
op|'('
name|'fd'
op|','
name|'termios'
op|'.'
name|'TIOCGWINSZ'
op|','
nl|'\n'
string|"'1234'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cr'
op|'=='
op|'('
number|'0'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cr'
op|'=='
op|'('
number|'0'
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'cr'
newline|'\n'
dedent|''
name|'cr'
op|'='
name|'ioctl_GWINSZ'
op|'('
number|'0'
op|')'
name|'or'
name|'ioctl_GWINSZ'
op|'('
number|'1'
op|')'
name|'or'
name|'ioctl_GWINSZ'
op|'('
number|'2'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cr'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fd'
op|'='
name|'os'
op|'.'
name|'open'
op|'('
name|'os'
op|'.'
name|'ctermid'
op|'('
op|')'
op|','
name|'os'
op|'.'
name|'O_RDONLY'
op|')'
newline|'\n'
name|'cr'
op|'='
name|'ioctl_GWINSZ'
op|'('
name|'fd'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'cr'
op|':'
newline|'\n'
indent|'        '
name|'cr'
op|'='
op|'('
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'LINES'"
op|','
number|'25'
op|')'
op|','
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'COLUMNS'"
op|','
number|'80'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'int'
op|'('
name|'cr'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'int'
op|'('
name|'cr'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unzip_file
dedent|''
name|'def'
name|'unzip_file'
op|'('
name|'filename'
op|','
name|'location'
op|','
name|'flatten'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unzip the file (zip file located at filename) to the destination\n    location"""'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'location'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'location'
op|')'
newline|'\n'
dedent|''
name|'zipfp'
op|'='
name|'open'
op|'('
name|'filename'
op|','
string|"'rb'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'zip'
op|'='
name|'zipfile'
op|'.'
name|'ZipFile'
op|'('
name|'zipfp'
op|')'
newline|'\n'
name|'leading'
op|'='
name|'has_leading_dir'
op|'('
name|'zip'
op|'.'
name|'namelist'
op|'('
op|')'
op|')'
name|'and'
name|'flatten'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'zip'
op|'.'
name|'namelist'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'data'
op|'='
name|'zip'
op|'.'
name|'read'
op|'('
name|'name'
op|')'
newline|'\n'
name|'fn'
op|'='
name|'name'
newline|'\n'
name|'if'
name|'leading'
op|':'
newline|'\n'
indent|'                '
name|'fn'
op|'='
name|'split_leading_dir'
op|'('
name|'name'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'fn'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'location'
op|','
name|'fn'
op|')'
newline|'\n'
name|'dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'fn'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dir'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'dir'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'fn'
op|'.'
name|'endswith'
op|'('
string|"'/'"
op|')'
name|'or'
name|'fn'
op|'.'
name|'endswith'
op|'('
string|"'\\\\'"
op|')'
op|':'
newline|'\n'
comment|'# A directory'
nl|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'fn'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'fn'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fp'
op|'='
name|'open'
op|'('
name|'fn'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fp'
op|'.'
name|'write'
op|'('
name|'data'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'zipfp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|untar_file
dedent|''
dedent|''
name|'def'
name|'untar_file'
op|'('
name|'filename'
op|','
name|'location'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Untar the file (tar file located at filename) to the destination location"""'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'location'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'location'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'filename'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.gz'"
op|')'
name|'or'
name|'filename'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.tgz'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
string|"'r:gz'"
newline|'\n'
dedent|''
name|'elif'
name|'filename'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.bz2'"
op|')'
name|'or'
name|'filename'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.tbz'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
string|"'r:bz2'"
newline|'\n'
dedent|''
name|'elif'
name|'filename'
op|'.'
name|'lower'
op|'('
op|')'
op|'.'
name|'endswith'
op|'('
string|"'.tar'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mode'
op|'='
string|"'r'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'logger'
op|'.'
name|'warn'
op|'('
string|"'Cannot determine compression type for file %s'"
op|'%'
name|'filename'
op|')'
newline|'\n'
name|'mode'
op|'='
string|"'r:*'"
newline|'\n'
dedent|''
name|'tar'
op|'='
name|'tarfile'
op|'.'
name|'open'
op|'('
name|'filename'
op|','
name|'mode'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# note: python<=2.5 doesnt seem to know about pax headers, filter them'
nl|'\n'
indent|'        '
name|'leading'
op|'='
name|'has_leading_dir'
op|'('
op|'['
nl|'\n'
name|'member'
op|'.'
name|'name'
name|'for'
name|'member'
name|'in'
name|'tar'
op|'.'
name|'getmembers'
op|'('
op|')'
nl|'\n'
name|'if'
name|'member'
op|'.'
name|'name'
op|'!='
string|"'pax_global_header'"
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'for'
name|'member'
name|'in'
name|'tar'
op|'.'
name|'getmembers'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fn'
op|'='
name|'member'
op|'.'
name|'name'
newline|'\n'
name|'if'
name|'fn'
op|'=='
string|"'pax_global_header'"
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'leading'
op|':'
newline|'\n'
indent|'                '
name|'fn'
op|'='
name|'split_leading_dir'
op|'('
name|'fn'
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'location'
op|','
name|'fn'
op|')'
newline|'\n'
name|'if'
name|'member'
op|'.'
name|'isdir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'fp'
op|'='
name|'tar'
op|'.'
name|'extractfile'
op|'('
name|'member'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'KeyError'
op|','
name|'AttributeError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Some corrupt tar files seem to produce this'
nl|'\n'
comment|'# (specifically bad symlinks)'
nl|'\n'
indent|'                    '
name|'logger'
op|'.'
name|'warn'
op|'('
nl|'\n'
string|"'In the tar file %s the member %s is invalid: %s'"
nl|'\n'
op|'%'
op|'('
name|'filename'
op|','
name|'member'
op|'.'
name|'name'
op|','
name|'e'
op|')'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'path'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'path'
op|')'
op|')'
newline|'\n'
dedent|''
name|'destfp'
op|'='
name|'open'
op|'('
name|'path'
op|','
string|"'wb'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'shutil'
op|'.'
name|'copyfileobj'
op|'('
name|'fp'
op|','
name|'destfp'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                    '
name|'destfp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'tar'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_download_cache_folder
dedent|''
dedent|''
name|'def'
name|'create_download_cache_folder'
op|'('
name|'folder'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'logger'
op|'.'
name|'indent'
op|'-='
number|'2'
newline|'\n'
name|'logger'
op|'.'
name|'notify'
op|'('
string|"'Creating supposed download cache at %s'"
op|'%'
name|'folder'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'indent'
op|'+='
number|'2'
newline|'\n'
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'folder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cache_download
dedent|''
name|'def'
name|'cache_download'
op|'('
name|'target_file'
op|','
name|'temp_location'
op|','
name|'content_type'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'logger'
op|'.'
name|'notify'
op|'('
string|"'Storing download in cache at %s'"
op|'%'
name|'display_path'
op|'('
name|'target_file'
op|')'
op|')'
newline|'\n'
name|'shutil'
op|'.'
name|'copyfile'
op|'('
name|'temp_location'
op|','
name|'target_file'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'target_file'
op|'+'
string|"'.content-type'"
op|','
string|"'w'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
name|'content_type'
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'temp_location'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unpack_file
dedent|''
name|'def'
name|'unpack_file'
op|'('
name|'filename'
op|','
name|'location'
op|','
name|'content_type'
op|','
name|'link'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
op|'('
name|'content_type'
op|'=='
string|"'application/zip'"
nl|'\n'
name|'or'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.zip'"
op|')'
nl|'\n'
name|'or'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.pybundle'"
op|')'
nl|'\n'
name|'or'
name|'zipfile'
op|'.'
name|'is_zipfile'
op|'('
name|'filename'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'unzip_file'
op|'('
name|'filename'
op|','
name|'location'
op|','
name|'flatten'
op|'='
name|'not'
name|'filename'
op|'.'
name|'endswith'
op|'('
string|"'.pybundle'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'content_type'
op|'=='
string|"'application/x-gzip'"
nl|'\n'
name|'or'
name|'tarfile'
op|'.'
name|'is_tarfile'
op|'('
name|'filename'
op|')'
nl|'\n'
name|'or'
name|'splitext'
op|'('
name|'filename'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"'.tar'"
op|','
string|"'.tar.gz'"
op|','
string|"'.tar.bz2'"
op|','
string|"'.tgz'"
op|','
string|"'.tbz'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'untar_file'
op|'('
name|'filename'
op|','
name|'location'
op|')'
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'content_type'
name|'and'
name|'content_type'
op|'.'
name|'startswith'
op|'('
string|"'text/html'"
op|')'
nl|'\n'
name|'and'
name|'is_svn_page'
op|'('
name|'file_contents'
op|'('
name|'filename'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# We don't really care about this"
nl|'\n'
indent|'        '
name|'from'
name|'pip'
op|'.'
name|'vcs'
op|'.'
name|'subversion'
name|'import'
name|'Subversion'
newline|'\n'
name|'Subversion'
op|'('
string|"'svn+'"
op|'+'
name|'link'
op|'.'
name|'url'
op|')'
op|'.'
name|'unpack'
op|'('
name|'location'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'## FIXME: handle?'
nl|'\n'
comment|'## FIXME: magic signatures?'
nl|'\n'
indent|'        '
name|'logger'
op|'.'
name|'fatal'
op|'('
string|"'Cannot unpack file %s (downloaded from %s, content-type: %s); cannot detect archive format'"
nl|'\n'
op|'%'
op|'('
name|'filename'
op|','
name|'location'
op|','
name|'content_type'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'InstallationError'
op|'('
string|"'Cannot determine archive format of %s'"
op|'%'
name|'location'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

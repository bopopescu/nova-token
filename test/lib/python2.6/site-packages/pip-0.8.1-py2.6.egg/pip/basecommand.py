begin_unit
string|'"""Base Command class, and related routines"""'
newline|'\n'
nl|'\n'
name|'from'
name|'cStringIO'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'getpass'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'urllib'
newline|'\n'
name|'import'
name|'urllib2'
newline|'\n'
nl|'\n'
name|'from'
name|'pip'
name|'import'
name|'commands'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'log'
name|'import'
name|'logger'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'baseparser'
name|'import'
name|'parser'
op|','
name|'ConfigOptionParser'
op|','
name|'UpdatingDefaultsHelpFormatter'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'download'
name|'import'
name|'urlopen'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'exceptions'
name|'import'
name|'BadCommand'
op|','
name|'InstallationError'
op|','
name|'UninstallationError'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'venv'
name|'import'
name|'restart_in_venv'
newline|'\n'
name|'from'
name|'pip'
op|'.'
name|'backwardcompat'
name|'import'
name|'walk_packages'
newline|'\n'
nl|'\n'
DECL|variable|__all__
name|'__all__'
op|'='
op|'['
string|"'command_dict'"
op|','
string|"'Command'"
op|','
string|"'load_all_commands'"
op|','
nl|'\n'
string|"'load_command'"
op|','
string|"'command_names'"
op|']'
newline|'\n'
nl|'\n'
DECL|variable|command_dict
name|'command_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# for backwards compatibiliy'
nl|'\n'
DECL|variable|get_proxy
name|'get_proxy'
op|'='
name|'urlopen'
op|'.'
name|'get_proxy'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Command
name|'class'
name|'Command'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|name
indent|'    '
name|'name'
op|'='
name|'None'
newline|'\n'
DECL|variable|usage
name|'usage'
op|'='
name|'None'
newline|'\n'
DECL|variable|hidden
name|'hidden'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'parser'
op|'='
name|'ConfigOptionParser'
op|'('
nl|'\n'
name|'usage'
op|'='
name|'self'
op|'.'
name|'usage'
op|','
nl|'\n'
name|'prog'
op|'='
string|"'%s %s'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
name|'version'
op|'='
name|'parser'
op|'.'
name|'version'
op|','
nl|'\n'
name|'formatter'
op|'='
name|'UpdatingDefaultsHelpFormatter'
op|'('
op|')'
op|','
nl|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'for'
name|'option'
name|'in'
name|'parser'
op|'.'
name|'option_list'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'option'
op|'.'
name|'dest'
name|'or'
name|'option'
op|'.'
name|'dest'
op|'=='
string|"'help'"
op|':'
newline|'\n'
comment|'# -h, --version, etc'
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'parser'
op|'.'
name|'add_option'
op|'('
name|'option'
op|')'
newline|'\n'
dedent|''
name|'command_dict'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|merge_options
dedent|''
name|'def'
name|'merge_options'
op|'('
name|'self'
op|','
name|'initial_options'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we have all global options carried over'
nl|'\n'
indent|'        '
name|'for'
name|'attr'
name|'in'
op|'['
string|"'log'"
op|','
string|"'venv'"
op|','
string|"'proxy'"
op|','
string|"'venv_base'"
op|','
string|"'require_venv'"
op|','
nl|'\n'
string|"'respect_venv'"
op|','
string|"'log_explicit_levels'"
op|','
string|"'log_file'"
op|','
nl|'\n'
string|"'timeout'"
op|','
string|"'default_vcs'"
op|','
string|"'skip_requirements_regex'"
op|','
nl|'\n'
string|"'no_input'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'options'
op|','
name|'attr'
op|','
name|'getattr'
op|'('
name|'initial_options'
op|','
name|'attr'
op|')'
name|'or'
name|'getattr'
op|'('
name|'options'
op|','
name|'attr'
op|')'
op|')'
newline|'\n'
dedent|''
name|'options'
op|'.'
name|'quiet'
op|'+='
name|'initial_options'
op|'.'
name|'quiet'
newline|'\n'
name|'options'
op|'.'
name|'verbose'
op|'+='
name|'initial_options'
op|'.'
name|'verbose'
newline|'\n'
nl|'\n'
DECL|member|setup_logging
dedent|''
name|'def'
name|'setup_logging'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|main
dedent|''
name|'def'
name|'main'
op|'('
name|'self'
op|','
name|'complete_args'
op|','
name|'args'
op|','
name|'initial_options'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'options'
op|','
name|'args'
op|'='
name|'self'
op|'.'
name|'parser'
op|'.'
name|'parse_args'
op|'('
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'merge_options'
op|'('
name|'initial_options'
op|','
name|'options'
op|')'
newline|'\n'
nl|'\n'
name|'level'
op|'='
number|'1'
comment|'# Notify'
newline|'\n'
name|'level'
op|'+='
name|'options'
op|'.'
name|'verbose'
newline|'\n'
name|'level'
op|'-='
name|'options'
op|'.'
name|'quiet'
newline|'\n'
name|'level'
op|'='
name|'logger'
op|'.'
name|'level_for_integer'
op|'('
number|'4'
op|'-'
name|'level'
op|')'
newline|'\n'
name|'complete_log'
op|'='
op|'['
op|']'
newline|'\n'
name|'logger'
op|'.'
name|'consumers'
op|'.'
name|'extend'
op|'('
nl|'\n'
op|'['
op|'('
name|'level'
op|','
name|'sys'
op|'.'
name|'stdout'
op|')'
op|','
nl|'\n'
op|'('
name|'logger'
op|'.'
name|'DEBUG'
op|','
name|'complete_log'
op|'.'
name|'append'
op|')'
op|']'
op|')'
newline|'\n'
name|'if'
name|'options'
op|'.'
name|'log_explicit_levels'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'explicit_levels'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'setup_logging'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'options'
op|'.'
name|'require_venv'
name|'and'
name|'not'
name|'options'
op|'.'
name|'venv'
op|':'
newline|'\n'
comment|'# If a venv is required check if it can really be found'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'logger'
op|'.'
name|'fatal'
op|'('
string|"'Could not find an activated virtualenv (required).'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'3'
op|')'
newline|'\n'
comment|'# Automatically install in currently activated venv if required'
nl|'\n'
dedent|''
name|'options'
op|'.'
name|'respect_venv'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'args'
name|'and'
name|'args'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
string|"'___VENV_RESTART___'"
op|':'
newline|'\n'
comment|"## FIXME: We don't do anything this this value yet:"
nl|'\n'
indent|'            '
name|'args'
op|'='
name|'args'
op|'['
op|':'
op|'-'
number|'2'
op|']'
newline|'\n'
name|'options'
op|'.'
name|'venv'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# If given the option to respect the activated environment'
nl|'\n'
comment|'# check if no venv is given as a command line parameter'
nl|'\n'
indent|'            '
name|'if'
name|'options'
op|'.'
name|'respect_venv'
name|'and'
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'options'
op|'.'
name|'venv'
name|'and'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'options'
op|'.'
name|'venv'
op|')'
op|':'
newline|'\n'
comment|'# Make sure command line venv and environmental are the same'
nl|'\n'
indent|'                    '
name|'if'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'options'
op|'.'
name|'venv'
op|')'
op|')'
op|'!='
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'realpath'
op|'('
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'logger'
op|'.'
name|'fatal'
op|'('
string|'"Given virtualenv (%s) doesn\'t match "'
nl|'\n'
string|'"currently activated virtualenv (%s)."'
nl|'\n'
op|'%'
op|'('
name|'options'
op|'.'
name|'venv'
op|','
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|')'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'3'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'options'
op|'.'
name|'venv'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'VIRTUAL_ENV'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'Using already activated environment %s'"
op|'%'
name|'options'
op|'.'
name|'venv'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'options'
op|'.'
name|'venv'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'info'
op|'('
string|"'Running in environment %s'"
op|'%'
name|'options'
op|'.'
name|'venv'
op|')'
newline|'\n'
name|'site_packages'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'options'
op|'.'
name|'site_packages'
op|':'
newline|'\n'
indent|'                '
name|'site_packages'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'restart_in_venv'
op|'('
name|'options'
op|'.'
name|'venv'
op|','
name|'options'
op|'.'
name|'venv_base'
op|','
name|'site_packages'
op|','
nl|'\n'
name|'complete_args'
op|')'
newline|'\n'
comment|'# restart_in_venv should actually never return, but for clarity...'
nl|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|'## FIXME: not sure if this sure come before or after venv restart'
nl|'\n'
dedent|''
name|'if'
name|'options'
op|'.'
name|'log'
op|':'
newline|'\n'
indent|'            '
name|'log_fp'
op|'='
name|'open_logfile'
op|'('
name|'options'
op|'.'
name|'log'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'consumers'
op|'.'
name|'append'
op|'('
op|'('
name|'logger'
op|'.'
name|'DEBUG'
op|','
name|'log_fp'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'log_fp'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'socket'
op|'.'
name|'setdefaulttimeout'
op|'('
name|'options'
op|'.'
name|'timeout'
name|'or'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'urlopen'
op|'.'
name|'setup'
op|'('
name|'proxystr'
op|'='
name|'options'
op|'.'
name|'proxy'
op|','
name|'prompting'
op|'='
name|'not'
name|'options'
op|'.'
name|'no_input'
op|')'
newline|'\n'
nl|'\n'
name|'exit'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'run'
op|'('
name|'options'
op|','
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'InstallationError'
op|','
name|'UninstallationError'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'fatal'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'Exception information:\\n%s'"
op|'%'
name|'format_exc'
op|'('
op|')'
op|')'
newline|'\n'
name|'exit'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'except'
name|'BadCommand'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'fatal'
op|'('
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'info'
op|'('
string|"'Exception information:\\n%s'"
op|'%'
name|'format_exc'
op|'('
op|')'
op|')'
newline|'\n'
name|'exit'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'logger'
op|'.'
name|'fatal'
op|'('
string|"'Exception:\\n%s'"
op|'%'
name|'format_exc'
op|'('
op|')'
op|')'
newline|'\n'
name|'exit'
op|'='
number|'2'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'log_fp'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'log_fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'exit'
op|':'
newline|'\n'
indent|'            '
name|'log_fn'
op|'='
name|'options'
op|'.'
name|'log_file'
newline|'\n'
name|'text'
op|'='
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'complete_log'
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'fatal'
op|'('
string|"'Storing complete log in %s'"
op|'%'
name|'log_fn'
op|')'
newline|'\n'
name|'log_fp'
op|'='
name|'open_logfile'
op|'('
name|'log_fn'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'log_fp'
op|'.'
name|'write'
op|'('
name|'text'
op|')'
newline|'\n'
name|'log_fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'exit'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|format_exc
dedent|''
dedent|''
name|'def'
name|'format_exc'
op|'('
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'exc_info'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'out'
op|'='
name|'StringIO'
op|'('
op|')'
newline|'\n'
name|'traceback'
op|'.'
name|'print_exception'
op|'('
op|'*'
name|'exc_info'
op|','
op|'**'
name|'dict'
op|'('
name|'file'
op|'='
name|'out'
op|')'
op|')'
newline|'\n'
name|'return'
name|'out'
op|'.'
name|'getvalue'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|open_logfile
dedent|''
name|'def'
name|'open_logfile'
op|'('
name|'filename'
op|','
name|'mode'
op|'='
string|"'a'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Open the named log file in append mode.\n\n    If the file already exists, a separator will also be printed to\n    the file to separate past activity from current activity.\n    """'
newline|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'expanduser'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'dirname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'dirname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'dirname'
op|')'
newline|'\n'
dedent|''
name|'exists'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
name|'log_fp'
op|'='
name|'open'
op|'('
name|'filename'
op|','
name|'mode'
op|')'
newline|'\n'
name|'if'
name|'exists'
op|':'
newline|'\n'
indent|'        '
name|'print'
op|'>>'
name|'log_fp'
op|','
string|"'-'"
op|'*'
number|'60'
newline|'\n'
name|'print'
op|'>>'
name|'log_fp'
op|','
string|"'%s run on %s'"
op|'%'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|','
name|'time'
op|'.'
name|'strftime'
op|'('
string|"'%c'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'log_fp'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_command
dedent|''
name|'def'
name|'load_command'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'full_name'
op|'='
string|"'pip.commands.%s'"
op|'%'
name|'name'
newline|'\n'
name|'if'
name|'full_name'
name|'in'
name|'sys'
op|'.'
name|'modules'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'__import__'
op|'('
name|'full_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|load_all_commands
dedent|''
dedent|''
name|'def'
name|'load_all_commands'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'name'
name|'in'
name|'command_names'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'load_command'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|command_names
dedent|''
dedent|''
name|'def'
name|'command_names'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'names'
op|'='
name|'set'
op|'('
op|'('
name|'pkg'
op|'['
number|'1'
op|']'
name|'for'
name|'pkg'
name|'in'
name|'walk_packages'
op|'('
name|'path'
op|'='
name|'commands'
op|'.'
name|'__path__'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'list'
op|'('
name|'names'
op|')'
newline|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
string|'"""Logging\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Logger
name|'class'
name|'Logger'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""\n    Logging object for use in command-line script.  Allows ranges of\n    levels, to avoid some redundancy of displayed information.\n    """'
newline|'\n'
nl|'\n'
DECL|variable|VERBOSE_DEBUG
name|'VERBOSE_DEBUG'
op|'='
name|'logging'
op|'.'
name|'DEBUG'
op|'-'
number|'1'
newline|'\n'
DECL|variable|DEBUG
name|'DEBUG'
op|'='
name|'logging'
op|'.'
name|'DEBUG'
newline|'\n'
DECL|variable|INFO
name|'INFO'
op|'='
name|'logging'
op|'.'
name|'INFO'
newline|'\n'
DECL|variable|NOTIFY
name|'NOTIFY'
op|'='
op|'('
name|'logging'
op|'.'
name|'INFO'
op|'+'
name|'logging'
op|'.'
name|'WARN'
op|')'
op|'/'
number|'2'
newline|'\n'
name|'WARN'
op|'='
name|'WARNING'
op|'='
name|'logging'
op|'.'
name|'WARN'
newline|'\n'
DECL|variable|ERROR
name|'ERROR'
op|'='
name|'logging'
op|'.'
name|'ERROR'
newline|'\n'
DECL|variable|FATAL
name|'FATAL'
op|'='
name|'logging'
op|'.'
name|'FATAL'
newline|'\n'
nl|'\n'
DECL|variable|LEVELS
name|'LEVELS'
op|'='
op|'['
name|'VERBOSE_DEBUG'
op|','
name|'DEBUG'
op|','
name|'INFO'
op|','
name|'NOTIFY'
op|','
name|'WARN'
op|','
name|'ERROR'
op|','
name|'FATAL'
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'indent'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'explicit_levels'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'in_progress'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'in_progress_hanging'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|debug
dedent|''
name|'def'
name|'debug'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'DEBUG'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|info
dedent|''
name|'def'
name|'info'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'INFO'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notify
dedent|''
name|'def'
name|'notify'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'NOTIFY'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|warn
dedent|''
name|'def'
name|'warn'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'WARN'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|error
dedent|''
name|'def'
name|'error'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'WARN'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fatal
dedent|''
name|'def'
name|'fatal'
op|'('
name|'self'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'log'
op|'('
name|'self'
op|'.'
name|'FATAL'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
newline|'\n'
nl|'\n'
DECL|member|log
dedent|''
name|'def'
name|'log'
op|'('
name|'self'
op|','
name|'level'
op|','
name|'msg'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kw'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
nl|'\n'
string|'"You may give positional or keyword arguments, not both"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'args'
op|'='
name|'args'
name|'or'
name|'kw'
newline|'\n'
name|'rendered'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'consumer_level'
op|','
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'level_matches'
op|'('
name|'level'
op|','
name|'consumer_level'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'self'
op|'.'
name|'in_progress_hanging'
nl|'\n'
name|'and'
name|'consumer'
name|'in'
op|'('
name|'sys'
op|'.'
name|'stdout'
op|','
name|'sys'
op|'.'
name|'stderr'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'in_progress_hanging'
op|'='
name|'False'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'rendered'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'args'
op|':'
newline|'\n'
indent|'                        '
name|'rendered'
op|'='
name|'msg'
op|'%'
name|'args'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'rendered'
op|'='
name|'msg'
newline|'\n'
dedent|''
name|'rendered'
op|'='
string|"' '"
op|'*'
name|'self'
op|'.'
name|'indent'
op|'+'
name|'rendered'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'explicit_levels'
op|':'
newline|'\n'
comment|'## FIXME: should this be a name, not a level number?'
nl|'\n'
indent|'                        '
name|'rendered'
op|'='
string|"'%02i %s'"
op|'%'
op|'('
name|'level'
op|','
name|'rendered'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'consumer'
op|','
string|"'write'"
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'consumer'
op|'.'
name|'write'
op|'('
name|'rendered'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'consumer'
op|'('
name|'rendered'
op|')'
newline|'\n'
nl|'\n'
DECL|member|start_progress
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'start_progress'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'not'
name|'self'
op|'.'
name|'in_progress'
op|','
op|'('
nl|'\n'
string|'"Tried to start_progress(%r) while in_progress %r"'
nl|'\n'
op|'%'
op|'('
name|'msg'
op|','
name|'self'
op|'.'
name|'in_progress'
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'level_matches'
op|'('
name|'self'
op|'.'
name|'NOTIFY'
op|','
name|'self'
op|'.'
name|'_stdout_level'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"' '"
op|'*'
name|'self'
op|'.'
name|'indent'
op|'+'
name|'msg'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'in_progress_hanging'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'in_progress_hanging'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'in_progress'
op|'='
name|'msg'
newline|'\n'
name|'self'
op|'.'
name|'last_message'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|end_progress
dedent|''
name|'def'
name|'end_progress'
op|'('
name|'self'
op|','
name|'msg'
op|'='
string|"'done.'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'assert'
name|'self'
op|'.'
name|'in_progress'
op|','
op|'('
nl|'\n'
string|'"Tried to end_progress without start_progress"'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'stdout_level_matches'
op|'('
name|'self'
op|'.'
name|'NOTIFY'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'self'
op|'.'
name|'in_progress_hanging'
op|':'
newline|'\n'
comment|'# Some message has been printed out since start_progress'
nl|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"'...'"
op|'+'
name|'self'
op|'.'
name|'in_progress'
op|'+'
name|'msg'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# These erase any messages shown with show_progress (besides .'s)"
nl|'\n'
indent|'                '
name|'logger'
op|'.'
name|'show_progress'
op|'('
string|"''"
op|')'
newline|'\n'
name|'logger'
op|'.'
name|'show_progress'
op|'('
string|"''"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
name|'msg'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'in_progress'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'in_progress_hanging'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|show_progress
dedent|''
name|'def'
name|'show_progress'
op|'('
name|'self'
op|','
name|'message'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If we are in a progress scope, and no log messages have been\n        shown, write out another \'.\'"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'in_progress_hanging'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'message'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'last_message'
op|':'
newline|'\n'
indent|'                    '
name|'padding'
op|'='
string|"' '"
op|'*'
name|'max'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'last_message'
op|')'
op|'-'
name|'len'
op|'('
name|'message'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'padding'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'write'
op|'('
string|"'\\r%s%s%s%s'"
op|'%'
op|'('
string|"' '"
op|'*'
name|'self'
op|'.'
name|'indent'
op|','
name|'self'
op|'.'
name|'in_progress'
op|','
name|'message'
op|','
name|'padding'
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_message'
op|'='
name|'message'
newline|'\n'
nl|'\n'
DECL|member|stdout_level_matches
dedent|''
dedent|''
dedent|''
name|'def'
name|'stdout_level_matches'
op|'('
name|'self'
op|','
name|'level'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns true if a message at this level will go to stdout"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'level_matches'
op|'('
name|'level'
op|','
name|'self'
op|'.'
name|'_stdout_level'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stdout_level
dedent|''
name|'def'
name|'_stdout_level'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the level that stdout runs at"""'
newline|'\n'
name|'for'
name|'level'
op|','
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'consumer'
name|'is'
name|'sys'
op|'.'
name|'stdout'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'level'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'FATAL'
newline|'\n'
nl|'\n'
DECL|member|level_matches
dedent|''
name|'def'
name|'level_matches'
op|'('
name|'self'
op|','
name|'level'
op|','
name|'consumer_level'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        >>> l = Logger()\n        >>> l.level_matches(3, 4)\n        False\n        >>> l.level_matches(3, 2)\n        True\n        >>> l.level_matches(slice(None, 3), 3)\n        False\n        >>> l.level_matches(slice(None, 3), 2)\n        True\n        >>> l.level_matches(slice(1, 3), 1)\n        True\n        >>> l.level_matches(slice(2, 3), 1)\n        False\n        """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'level'
op|','
name|'slice'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'start'
op|','
name|'stop'
op|'='
name|'level'
op|'.'
name|'start'
op|','
name|'level'
op|'.'
name|'stop'
newline|'\n'
name|'if'
name|'start'
name|'is'
name|'not'
name|'None'
name|'and'
name|'start'
op|'>'
name|'consumer_level'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'stop'
name|'is'
name|'not'
name|'None'
name|'or'
name|'stop'
op|'<='
name|'consumer_level'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'level'
op|'>='
name|'consumer_level'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|level_for_integer
name|'def'
name|'level_for_integer'
op|'('
name|'cls'
op|','
name|'level'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'levels'
op|'='
name|'cls'
op|'.'
name|'LEVELS'
newline|'\n'
name|'if'
name|'level'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'levels'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'level'
op|'>='
name|'len'
op|'('
name|'levels'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'levels'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'levels'
op|'['
name|'level'
op|']'
newline|'\n'
nl|'\n'
DECL|member|move_stdout_to_stderr
dedent|''
name|'def'
name|'move_stdout_to_stderr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'to_remove'
op|'='
op|'['
op|']'
newline|'\n'
name|'to_add'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'consumer_level'
op|','
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'consumer'
op|'=='
name|'sys'
op|'.'
name|'stdout'
op|':'
newline|'\n'
indent|'                '
name|'to_remove'
op|'.'
name|'append'
op|'('
op|'('
name|'consumer_level'
op|','
name|'consumer'
op|')'
op|')'
newline|'\n'
name|'to_add'
op|'.'
name|'append'
op|'('
op|'('
name|'consumer_level'
op|','
name|'sys'
op|'.'
name|'stderr'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'item'
name|'in'
name|'to_remove'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumers'
op|'.'
name|'remove'
op|'('
name|'item'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumers'
op|'.'
name|'extend'
op|'('
name|'to_add'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|logger
dedent|''
dedent|''
name|'logger'
op|'='
name|'Logger'
op|'('
op|')'
newline|'\n'
endmarker|''
end_unit

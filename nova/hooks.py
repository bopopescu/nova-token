begin_unit
comment|'# Copyright (c) 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Decorator and config option definitions for adding custom code (hooks)\naround callables.\n\nAny method may have the \'add_hook\' decorator applied, which yields the\nability to invoke Hook objects before or after the method. (i.e. pre and\npost)\n\nHook objects are loaded by HookLoaders.  Each named hook may invoke multiple\nHooks.\n\nExample Hook object::\n\n    | class MyHook(object):\n    |    def pre(self, *args, **kwargs):\n    |       # do stuff before wrapped callable runs\n    |\n    |   def post(self, rv, *args, **kwargs):\n    |       # do stuff after wrapped callable runs\n\nExample Hook object with function parameters::\n\n    | class MyHookWithFunction(object):\n    |   def pre(self, f, *args, **kwargs):\n    |       # do stuff with wrapped function info\n    |   def post(self, f, *args, **kwargs):\n    |       # do stuff with wrapped function info\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'stevedore'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|NS
name|'NS'
op|'='
string|"'nova.hooks'"
newline|'\n'
nl|'\n'
DECL|variable|_HOOKS
name|'_HOOKS'
op|'='
op|'{'
op|'}'
comment|'# hook name => hook manager'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FatalHookException
name|'class'
name|'FatalHookException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exception which should be raised by hooks to indicate that normal\n    execution of the hooked function should be terminated. Raised exception\n    will be logged and reraised.\n    """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HookManager
dedent|''
name|'class'
name|'HookManager'
op|'('
name|'stevedore'
op|'.'
name|'hook'
op|'.'
name|'HookManager'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Invoke_on_load creates an instance of the Hook class\n\n        :param name: The name of the hooks to load.\n        :type name: str\n        """'
newline|'\n'
name|'super'
op|'('
name|'HookManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'NS'
op|','
name|'name'
op|','
name|'invoke_on_load'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_run
dedent|''
name|'def'
name|'_run'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'method_type'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'func'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'method_type'
name|'not'
name|'in'
op|'('
string|"'pre'"
op|','
string|"'post'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Wrong type of hook method. "'
nl|'\n'
string|'"Only \'pre\' and \'post\' type allowed"'
op|')'
newline|'\n'
name|'raise'
name|'ValueError'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'e'
name|'in'
name|'self'
op|'.'
name|'extensions'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'e'
op|'.'
name|'obj'
newline|'\n'
name|'hook_method'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'method_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'hook_method'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Running %(name)s %(type)s-hook: %(obj)s"'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'type'"
op|':'
name|'method_type'
op|','
string|"'obj'"
op|':'
name|'obj'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'func'
op|':'
newline|'\n'
indent|'                        '
name|'hook_method'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'hook_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'FatalHookException'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_LE'
op|'('
string|'"Fatal Exception running %(name)s "'
nl|'\n'
string|'"%(type)s-hook: %(obj)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'type'"
op|':'
name|'method_type'
op|','
nl|'\n'
string|"'obj'"
op|':'
name|'obj'
op|'}'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_LE'
op|'('
string|'"Exception running %(name)s "'
nl|'\n'
string|'"%(type)s-hook: %(obj)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'type'"
op|':'
name|'method_type'
op|','
nl|'\n'
string|"'obj'"
op|':'
name|'obj'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_pre
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'run_pre'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Execute optional pre methods of loaded hooks.\n\n        :param name: The name of the loaded hooks.\n        :param args: Positional arguments which would be transmitted into\n                     all pre methods of loaded hooks.\n        :param kwargs: Keyword args which would be transmitted into all pre\n                       methods of loaded hooks.\n        :param f: Target function.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_run'
op|'('
name|'name'
op|'='
name|'name'
op|','
name|'method_type'
op|'='
string|"'pre'"
op|','
name|'args'
op|'='
name|'args'
op|','
name|'kwargs'
op|'='
name|'kwargs'
op|','
nl|'\n'
name|'func'
op|'='
name|'f'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_post
dedent|''
name|'def'
name|'run_post'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'rv'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'f'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Execute optional post methods of loaded hooks.\n\n        :param name: The name of the loaded hooks.\n        :param rv: Return values of target method call.\n        :param args: Positional arguments which would be transmitted into\n                     all post methods of loaded hooks.\n        :param kwargs: Keyword args which would be transmitted into all post\n                       methods of loaded hooks.\n        :param f: Target function.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_run'
op|'('
name|'name'
op|'='
name|'name'
op|','
name|'method_type'
op|'='
string|"'post'"
op|','
name|'args'
op|'='
op|'('
name|'rv'
op|','
op|')'
op|'+'
name|'args'
op|','
nl|'\n'
name|'kwargs'
op|'='
name|'kwargs'
op|','
name|'func'
op|'='
name|'f'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|add_hook
dedent|''
dedent|''
name|'def'
name|'add_hook'
op|'('
name|'name'
op|','
name|'pass_function'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Execute optional pre and post methods around the decorated\n    function.  This is useful for customization around callables.\n    """'
newline|'\n'
nl|'\n'
DECL|function|outer
name|'def'
name|'outer'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'__hook_name__'
op|'='
name|'name'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'manager'
op|'='
name|'_HOOKS'
op|'.'
name|'setdefault'
op|'('
name|'name'
op|','
name|'HookManager'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'function'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'pass_function'
op|':'
newline|'\n'
indent|'                '
name|'function'
op|'='
name|'f'
newline|'\n'
nl|'\n'
dedent|''
name|'manager'
op|'.'
name|'run_pre'
op|'('
name|'name'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'f'
op|'='
name|'function'
op|')'
newline|'\n'
name|'rv'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'manager'
op|'.'
name|'run_post'
op|'('
name|'name'
op|','
name|'rv'
op|','
name|'args'
op|','
name|'kwargs'
op|','
name|'f'
op|'='
name|'function'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'outer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reset
dedent|''
name|'def'
name|'reset'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clear loaded hooks."""'
newline|'\n'
name|'_HOOKS'
op|'.'
name|'clear'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nManage hosts in the current zone.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'collections'
name|'import'
name|'UserDict'
name|'as'
name|'IterableUserDict'
comment|'# Python 3'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'UserDict'
name|'import'
name|'IterableUserDict'
comment|'# Python 2'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'import'
name|'iso8601'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'context_module'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'pci'
name|'import'
name|'stats'
name|'as'
name|'pci_stats'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'weights'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
nl|'\n'
DECL|variable|host_manager_opts
name|'host_manager_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'scheduler_available_filters'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'nova.scheduler.filters.all_filters'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Filter classes available to the scheduler which may '"
nl|'\n'
string|"'be specified more than once.  An entry of '"
nl|'\n'
string|'\'"nova.scheduler.filters.all_filters" \''
nl|'\n'
string|"'maps to all filters included with nova.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'scheduler_default_filters'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
nl|'\n'
string|"'RetryFilter'"
op|','
nl|'\n'
string|"'AvailabilityZoneFilter'"
op|','
nl|'\n'
string|"'RamFilter'"
op|','
nl|'\n'
string|"'DiskFilter'"
op|','
nl|'\n'
string|"'ComputeFilter'"
op|','
nl|'\n'
string|"'ComputeCapabilitiesFilter'"
op|','
nl|'\n'
string|"'ImagePropertiesFilter'"
op|','
nl|'\n'
string|"'ServerGroupAntiAffinityFilter'"
op|','
nl|'\n'
string|"'ServerGroupAffinityFilter'"
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Which filter class names to use for filtering hosts '"
nl|'\n'
string|"'when not specified in the request.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'scheduler_weight_classes'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
string|"'nova.scheduler.weights.all_weighers'"
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Which weight class names to use for weighing hosts'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'scheduler_tracks_instance_changes'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Determines if the Scheduler tracks changes to instances '"
nl|'\n'
string|"'to help with its filtering decisions.'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'host_manager_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|HOST_INSTANCE_SEMAPHORE
name|'HOST_INSTANCE_SEMAPHORE'
op|'='
string|'"host_instance"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ReadOnlyDict
name|'class'
name|'ReadOnlyDict'
op|'('
name|'IterableUserDict'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A read-only dict."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'source'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'source'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'update'
op|'('
name|'source'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__setitem__
dedent|''
dedent|''
name|'def'
name|'__setitem__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__delitem__
dedent|''
name|'def'
name|'__delitem__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|clear
dedent|''
name|'def'
name|'clear'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|pop
dedent|''
name|'def'
name|'pop'
op|'('
name|'self'
op|','
name|'key'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|popitem
dedent|''
name|'def'
name|'popitem'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'TypeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'self'"
op|','
string|"'spec_obj'"
op|')'
newline|'\n'
DECL|function|set_update_time_on_success
name|'def'
name|'set_update_time_on_success'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set updated time of HostState when consuming succeed."""'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return_value'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return_value'
op|'='
name|'function'
op|'('
name|'self'
op|','
name|'spec_obj'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# Ignores exception raised from consume_from_request() so that'
nl|'\n'
comment|'# booting instance would fail in the resource claim of compute'
nl|'\n'
comment|'# node, other suitable node may be chosen during scheduling retry.'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Selected host: %(host)s failed to consume from "'
nl|'\n'
string|'"instance. Error: %(error)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'host'
op|','
string|"'error'"
op|':'
name|'e'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(sbauza): Objects are UTC tz-aware by default'
nl|'\n'
name|'self'
op|'.'
name|'updated'
op|'='
name|'now'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'return_value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostState
dedent|''
name|'class'
name|'HostState'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Mutable and immutable information tracked for a host.\n    This is an attempt to remove the ad-hoc data structures\n    previously used and lock down access.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'node'
op|','
name|'compute'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
name|'self'
op|'.'
name|'nodename'
op|'='
name|'node'
newline|'\n'
nl|'\n'
comment|'# Mutable available resources.'
nl|'\n'
comment|'# These will change as resources are virtually "consumed".'
nl|'\n'
name|'self'
op|'.'
name|'total_usable_ram_mb'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'total_usable_disk_gb'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'disk_mb_used'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'free_ram_mb'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'free_disk_mb'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'vcpus_total'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'vcpus_used'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'pci_stats'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Additional host information from the compute node stats:'
nl|'\n'
name|'self'
op|'.'
name|'num_instances'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'num_io_ops'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# Other information'
nl|'\n'
name|'self'
op|'.'
name|'host_ip'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_type'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_version'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_hostname'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'cpu_info'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'supported_instances'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Resource oversubscription values for the compute host:'
nl|'\n'
name|'self'
op|'.'
name|'limits'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Generic metrics from compute nodes'
nl|'\n'
name|'self'
op|'.'
name|'metrics'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# List of aggregates the host belongs to'
nl|'\n'
name|'self'
op|'.'
name|'aggregates'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Instances on this host'
nl|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Allocation ratios for this host'
nl|'\n'
name|'self'
op|'.'
name|'ram_allocation_ratio'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'cpu_allocation_ratio'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'updated'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'compute'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'update_from_compute_node'
op|'('
name|'compute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_service
dedent|''
dedent|''
name|'def'
name|'update_service'
op|'('
name|'self'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'service'
op|'='
name|'ReadOnlyDict'
op|'('
name|'service'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_from_compute_node
dedent|''
name|'def'
name|'update_from_compute_node'
op|'('
name|'self'
op|','
name|'compute'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update information about a host from a ComputeNode object."""'
newline|'\n'
name|'if'
op|'('
name|'self'
op|'.'
name|'updated'
name|'and'
name|'compute'
op|'.'
name|'updated_at'
nl|'\n'
name|'and'
name|'self'
op|'.'
name|'updated'
op|'>'
name|'compute'
op|'.'
name|'updated_at'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'all_ram_mb'
op|'='
name|'compute'
op|'.'
name|'memory_mb'
newline|'\n'
nl|'\n'
comment|'# Assume virtual size is all consumed by instances if use qcow2 disk.'
nl|'\n'
name|'free_gb'
op|'='
name|'compute'
op|'.'
name|'free_disk_gb'
newline|'\n'
name|'least_gb'
op|'='
name|'compute'
op|'.'
name|'disk_available_least'
newline|'\n'
name|'if'
name|'least_gb'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'least_gb'
op|'>'
name|'free_gb'
op|':'
newline|'\n'
comment|'# can occur when an instance in database is not on host'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Host %(hostname)s has more disk space than "'
nl|'\n'
string|'"database expected "'
nl|'\n'
string|'"(%(physical)s GB > %(database)s GB)"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'physical'"
op|':'
name|'least_gb'
op|','
string|"'database'"
op|':'
name|'free_gb'
op|','
nl|'\n'
string|"'hostname'"
op|':'
name|'compute'
op|'.'
name|'hypervisor_hostname'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'free_gb'
op|'='
name|'min'
op|'('
name|'least_gb'
op|','
name|'free_gb'
op|')'
newline|'\n'
dedent|''
name|'free_disk_mb'
op|'='
name|'free_gb'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'disk_mb_used'
op|'='
name|'compute'
op|'.'
name|'local_gb_used'
op|'*'
number|'1024'
newline|'\n'
nl|'\n'
comment|'# NOTE(jogo) free_ram_mb can be negative'
nl|'\n'
name|'self'
op|'.'
name|'free_ram_mb'
op|'='
name|'compute'
op|'.'
name|'free_ram_mb'
newline|'\n'
name|'self'
op|'.'
name|'total_usable_ram_mb'
op|'='
name|'all_ram_mb'
newline|'\n'
name|'self'
op|'.'
name|'total_usable_disk_gb'
op|'='
name|'compute'
op|'.'
name|'local_gb'
newline|'\n'
name|'self'
op|'.'
name|'free_disk_mb'
op|'='
name|'free_disk_mb'
newline|'\n'
name|'self'
op|'.'
name|'vcpus_total'
op|'='
name|'compute'
op|'.'
name|'vcpus'
newline|'\n'
name|'self'
op|'.'
name|'vcpus_used'
op|'='
name|'compute'
op|'.'
name|'vcpus_used'
newline|'\n'
name|'self'
op|'.'
name|'updated'
op|'='
name|'compute'
op|'.'
name|'updated_at'
newline|'\n'
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'compute'
op|'.'
name|'numa_topology'
newline|'\n'
name|'self'
op|'.'
name|'pci_stats'
op|'='
name|'pci_stats'
op|'.'
name|'PciDeviceStats'
op|'('
nl|'\n'
name|'compute'
op|'.'
name|'pci_device_pools'
op|')'
newline|'\n'
nl|'\n'
comment|'# All virt drivers report host_ip'
nl|'\n'
name|'self'
op|'.'
name|'host_ip'
op|'='
name|'compute'
op|'.'
name|'host_ip'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_type'
op|'='
name|'compute'
op|'.'
name|'hypervisor_type'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_version'
op|'='
name|'compute'
op|'.'
name|'hypervisor_version'
newline|'\n'
name|'self'
op|'.'
name|'hypervisor_hostname'
op|'='
name|'compute'
op|'.'
name|'hypervisor_hostname'
newline|'\n'
name|'self'
op|'.'
name|'cpu_info'
op|'='
name|'compute'
op|'.'
name|'cpu_info'
newline|'\n'
name|'if'
name|'compute'
op|'.'
name|'supported_hv_specs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'supported_instances'
op|'='
op|'['
name|'spec'
op|'.'
name|'to_list'
op|'('
op|')'
name|'for'
name|'spec'
nl|'\n'
name|'in'
name|'compute'
op|'.'
name|'supported_hv_specs'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'supported_instances'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|"# Don't store stats directly in host_state to make sure these don't"
nl|'\n'
comment|'# overwrite any values, or get overwritten themselves. Store in self so'
nl|'\n'
comment|'# filters can schedule with them.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stats'
op|'='
name|'compute'
op|'.'
name|'stats'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Track number of instances on host'
nl|'\n'
name|'self'
op|'.'
name|'num_instances'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'stats'
op|'.'
name|'get'
op|'('
string|"'num_instances'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'num_io_ops'
op|'='
name|'int'
op|'('
name|'self'
op|'.'
name|'stats'
op|'.'
name|'get'
op|'('
string|"'io_workload'"
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# update metrics'
nl|'\n'
name|'self'
op|'.'
name|'metrics'
op|'='
name|'objects'
op|'.'
name|'MonitorMetricList'
op|'.'
name|'from_json'
op|'('
name|'compute'
op|'.'
name|'metrics'
op|')'
newline|'\n'
nl|'\n'
comment|'# update allocation ratios given by the ComputeNode object'
nl|'\n'
name|'self'
op|'.'
name|'cpu_allocation_ratio'
op|'='
name|'compute'
op|'.'
name|'cpu_allocation_ratio'
newline|'\n'
name|'self'
op|'.'
name|'ram_allocation_ratio'
op|'='
name|'compute'
op|'.'
name|'ram_allocation_ratio'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'set_update_time_on_success'
newline|'\n'
DECL|member|consume_from_request
name|'def'
name|'consume_from_request'
op|'('
name|'self'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Incrementally update host state from an RequestSpec object."""'
newline|'\n'
name|'disk_mb'
op|'='
op|'('
name|'spec_obj'
op|'.'
name|'root_gb'
op|'+'
nl|'\n'
name|'spec_obj'
op|'.'
name|'ephemeral_gb'
op|')'
op|'*'
number|'1024'
newline|'\n'
name|'ram_mb'
op|'='
name|'spec_obj'
op|'.'
name|'memory_mb'
newline|'\n'
name|'vcpus'
op|'='
name|'spec_obj'
op|'.'
name|'vcpus'
newline|'\n'
name|'self'
op|'.'
name|'free_ram_mb'
op|'-='
name|'ram_mb'
newline|'\n'
name|'self'
op|'.'
name|'free_disk_mb'
op|'-='
name|'disk_mb'
newline|'\n'
name|'self'
op|'.'
name|'vcpus_used'
op|'+='
name|'vcpus'
newline|'\n'
nl|'\n'
comment|'# Track number of instances on host'
nl|'\n'
name|'self'
op|'.'
name|'num_instances'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
name|'pci_requests'
op|'='
name|'spec_obj'
op|'.'
name|'pci_requests'
newline|'\n'
name|'if'
name|'pci_requests'
name|'and'
name|'self'
op|'.'
name|'pci_stats'
op|':'
newline|'\n'
indent|'            '
name|'pci_requests'
op|'='
name|'pci_requests'
op|'.'
name|'requests'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'pci_requests'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Calculate the numa usage'
nl|'\n'
dedent|''
name|'host_numa_topology'
op|','
name|'_fmt'
op|'='
name|'hardware'
op|'.'
name|'host_topology_and_format_from_host'
op|'('
nl|'\n'
name|'self'
op|')'
newline|'\n'
name|'instance_numa_topology'
op|'='
name|'spec_obj'
op|'.'
name|'numa_topology'
newline|'\n'
nl|'\n'
name|'spec_obj'
op|'.'
name|'numa_topology'
op|'='
name|'hardware'
op|'.'
name|'numa_fit_instance_to_host'
op|'('
nl|'\n'
name|'host_numa_topology'
op|','
name|'instance_numa_topology'
op|','
nl|'\n'
name|'limits'
op|'='
name|'self'
op|'.'
name|'limits'
op|'.'
name|'get'
op|'('
string|"'numa_topology'"
op|')'
op|','
nl|'\n'
name|'pci_requests'
op|'='
name|'pci_requests'
op|','
name|'pci_stats'
op|'='
name|'self'
op|'.'
name|'pci_stats'
op|')'
newline|'\n'
name|'if'
name|'pci_requests'
op|':'
newline|'\n'
indent|'            '
name|'instance_cells'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'spec_obj'
op|'.'
name|'numa_topology'
op|':'
newline|'\n'
indent|'                '
name|'instance_cells'
op|'='
name|'spec_obj'
op|'.'
name|'numa_topology'
op|'.'
name|'cells'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pci_stats'
op|'.'
name|'apply_requests'
op|'('
name|'pci_requests'
op|','
name|'instance_cells'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sbauza): Yeah, that's crap. We should get rid of all of those"
nl|'\n'
comment|"# NUMA helpers because now we're 100% sure that spec_obj.numa_topology"
nl|'\n'
comment|'# is an InstanceNUMATopology object. Unfortunately, since'
nl|'\n'
comment|'# HostState.host_numa_topology is still limbo between an NUMATopology'
nl|'\n'
comment|'# object (when updated by consume_from_request), a ComputeNode object'
nl|'\n'
comment|'# (when updated by update_from_compute_node), we need to keep the call'
nl|'\n'
comment|"# to get_host_numa_usage_from_instance until it's fixed (and use a"
nl|'\n'
comment|'# temporary orphaned Instance object as a proxy)'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'numa_topology'
op|'='
name|'spec_obj'
op|'.'
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'numa_topology'
op|'='
name|'hardware'
op|'.'
name|'get_host_numa_usage_from_instance'
op|'('
nl|'\n'
name|'self'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sbauza): By considering all cases when the scheduler is called'
nl|'\n'
comment|'# and when consume_from_request() is run, we can safely say that there'
nl|'\n'
comment|'# is always an IO operation because we want to move the instance'
nl|'\n'
name|'self'
op|'.'
name|'num_io_ops'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"(%s, %s) ram:%s disk:%s io_ops:%s instances:%s"'
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'host'
op|','
name|'self'
op|'.'
name|'nodename'
op|','
name|'self'
op|'.'
name|'free_ram_mb'
op|','
name|'self'
op|'.'
name|'free_disk_mb'
op|','
nl|'\n'
name|'self'
op|'.'
name|'num_io_ops'
op|','
name|'self'
op|'.'
name|'num_instances'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostManager
dedent|''
dedent|''
name|'class'
name|'HostManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base HostManager class."""'
newline|'\n'
nl|'\n'
comment|'# Can be overridden in a subclass'
nl|'\n'
DECL|member|host_state_cls
name|'def'
name|'host_state_cls'
op|'('
name|'self'
op|','
name|'host'
op|','
name|'node'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'HostState'
op|'('
name|'host'
op|','
name|'node'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'host_state_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'filter_handler'
op|'='
name|'filters'
op|'.'
name|'HostFilterHandler'
op|'('
op|')'
newline|'\n'
name|'filter_classes'
op|'='
name|'self'
op|'.'
name|'filter_handler'
op|'.'
name|'get_matching_classes'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'scheduler_available_filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'filter_cls_map'
op|'='
op|'{'
name|'cls'
op|'.'
name|'__name__'
op|':'
name|'cls'
name|'for'
name|'cls'
name|'in'
name|'filter_classes'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'filter_obj_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'default_filters'
op|'='
name|'self'
op|'.'
name|'_choose_host_filters'
op|'('
name|'self'
op|'.'
name|'_load_filters'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weight_handler'
op|'='
name|'weights'
op|'.'
name|'HostWeightHandler'
op|'('
op|')'
newline|'\n'
name|'weigher_classes'
op|'='
name|'self'
op|'.'
name|'weight_handler'
op|'.'
name|'get_matching_classes'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'scheduler_weight_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weighers'
op|'='
op|'['
name|'cls'
op|'('
op|')'
name|'for'
name|'cls'
name|'in'
name|'weigher_classes'
op|']'
newline|'\n'
comment|'# Dict of aggregates keyed by their ID'
nl|'\n'
name|'self'
op|'.'
name|'aggs_by_id'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dict of set of aggregate IDs keyed by the name of the host belonging'
nl|'\n'
comment|'# to those aggregates'
nl|'\n'
name|'self'
op|'.'
name|'host_aggregates_map'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregates'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tracks_instance_changes'
op|'='
name|'CONF'
op|'.'
name|'scheduler_tracks_instance_changes'
newline|'\n'
comment|'# Dict of instances and status, keyed by host'
nl|'\n'
name|'self'
op|'.'
name|'_instance_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'tracks_instance_changes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_init_instance_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_filters
dedent|''
dedent|''
name|'def'
name|'_load_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CONF'
op|'.'
name|'scheduler_default_filters'
newline|'\n'
nl|'\n'
DECL|member|_init_aggregates
dedent|''
name|'def'
name|'_init_aggregates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elevated'
op|'='
name|'context_module'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'aggs'
op|'='
name|'objects'
op|'.'
name|'AggregateList'
op|'.'
name|'get_all'
op|'('
name|'elevated'
op|')'
newline|'\n'
name|'for'
name|'agg'
name|'in'
name|'aggs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'aggs_by_id'
op|'['
name|'agg'
op|'.'
name|'id'
op|']'
op|'='
name|'agg'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'agg'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
op|'.'
name|'add'
op|'('
name|'agg'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_aggregates
dedent|''
dedent|''
dedent|''
name|'def'
name|'update_aggregates'
op|'('
name|'self'
op|','
name|'aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Updates internal HostManager information about aggregates."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'aggregates'
op|','
op|'('
name|'list'
op|','
name|'objects'
op|'.'
name|'AggregateList'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'agg'
name|'in'
name|'aggregates'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_update_aggregate'
op|'('
name|'agg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_update_aggregate'
op|'('
name|'aggregates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_aggregate
dedent|''
dedent|''
name|'def'
name|'_update_aggregate'
op|'('
name|'self'
op|','
name|'aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'aggs_by_id'
op|'['
name|'aggregate'
op|'.'
name|'id'
op|']'
op|'='
name|'aggregate'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'aggregate'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
op|'.'
name|'add'
op|'('
name|'aggregate'
op|'.'
name|'id'
op|')'
newline|'\n'
comment|'# Refreshing the mapping dict to remove all hosts that are no longer'
nl|'\n'
comment|'# part of the aggregate'
nl|'\n'
dedent|''
name|'for'
name|'host'
name|'in'
name|'self'
op|'.'
name|'host_aggregates_map'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'aggregate'
op|'.'
name|'id'
name|'in'
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
nl|'\n'
name|'and'
name|'host'
name|'not'
name|'in'
name|'aggregate'
op|'.'
name|'hosts'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
op|'.'
name|'remove'
op|'('
name|'aggregate'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_aggregate
dedent|''
dedent|''
dedent|''
name|'def'
name|'delete_aggregate'
op|'('
name|'self'
op|','
name|'aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Deletes internal HostManager information about a specific aggregate.\n        """'
newline|'\n'
name|'if'
name|'aggregate'
op|'.'
name|'id'
name|'in'
name|'self'
op|'.'
name|'aggs_by_id'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'aggs_by_id'
op|'['
name|'aggregate'
op|'.'
name|'id'
op|']'
newline|'\n'
dedent|''
name|'for'
name|'host'
name|'in'
name|'aggregate'
op|'.'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'aggregate'
op|'.'
name|'id'
name|'in'
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
name|'host'
op|']'
op|'.'
name|'remove'
op|'('
name|'aggregate'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_instance_info
dedent|''
dedent|''
dedent|''
name|'def'
name|'_init_instance_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates the initial view of instances for all hosts.\n\n        As this initial population of instance information may take some time,\n        we don\'t wish to block the scheduler\'s startup while this completes.\n        The async method allows us to simply mock out the _init_instance_info()\n        method in tests.\n        """'
newline|'\n'
nl|'\n'
DECL|function|_async_init_instance_info
name|'def'
name|'_async_init_instance_info'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'='
name|'context_module'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"START:_async_init_instance_info"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'compute_nodes'
op|'='
name|'objects'
op|'.'
name|'ComputeNodeList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
op|'.'
name|'objects'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Total number of compute nodes: %s"'
op|','
name|'len'
op|'('
name|'compute_nodes'
op|')'
op|')'
newline|'\n'
comment|'# Break the queries into batches of 10 to reduce the total number'
nl|'\n'
comment|'# of calls to the DB.'
nl|'\n'
name|'batch_size'
op|'='
number|'10'
newline|'\n'
name|'start_node'
op|'='
number|'0'
newline|'\n'
name|'end_node'
op|'='
name|'batch_size'
newline|'\n'
name|'while'
name|'start_node'
op|'<='
name|'len'
op|'('
name|'compute_nodes'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'curr_nodes'
op|'='
name|'compute_nodes'
op|'['
name|'start_node'
op|':'
name|'end_node'
op|']'
newline|'\n'
name|'start_node'
op|'+='
name|'batch_size'
newline|'\n'
name|'end_node'
op|'+='
name|'batch_size'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|'"host"'
op|':'
op|'['
name|'curr_node'
op|'.'
name|'host'
nl|'\n'
name|'for'
name|'curr_node'
name|'in'
name|'curr_nodes'
op|']'
op|'}'
newline|'\n'
name|'result'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'result'
op|'.'
name|'objects'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Adding %s instances for hosts %s-%s"'
op|','
nl|'\n'
name|'len'
op|'('
name|'instances'
op|')'
op|','
name|'start_node'
op|','
name|'end_node'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                    '
name|'host'
op|'='
name|'instance'
op|'.'
name|'host'
newline|'\n'
name|'if'
name|'host'
name|'not'
name|'in'
name|'self'
op|'.'
name|'_instance_info'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'_instance_info'
op|'['
name|'host'
op|']'
op|'='
op|'{'
string|'"instances"'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|'"updated"'
op|':'
name|'False'
op|'}'
newline|'\n'
dedent|''
name|'inst_dict'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'['
name|'host'
op|']'
newline|'\n'
name|'inst_dict'
op|'['
string|'"instances"'
op|']'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
op|'='
name|'instance'
newline|'\n'
comment|'# Call sleep() to cooperatively yield'
nl|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"END:_async_init_instance_info"'
op|')'
newline|'\n'
nl|'\n'
comment|"# Run this async so that we don't block the scheduler start-up"
nl|'\n'
dedent|''
name|'utils'
op|'.'
name|'spawn_n'
op|'('
name|'_async_init_instance_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_choose_host_filters
dedent|''
name|'def'
name|'_choose_host_filters'
op|'('
name|'self'
op|','
name|'filter_cls_names'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Since the caller may specify which filters to use we need\n        to have an authoritative list of what is permissible. This\n        function checks the filter names against a predefined set\n        of acceptable filters.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'filter_cls_names'
op|','
op|'('
name|'list'
op|','
name|'tuple'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filter_cls_names'
op|'='
op|'['
name|'filter_cls_names'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'good_filters'
op|'='
op|'['
op|']'
newline|'\n'
name|'bad_filters'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'filter_name'
name|'in'
name|'filter_cls_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'filter_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'filter_obj_map'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'filter_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'filter_cls_map'
op|':'
newline|'\n'
indent|'                    '
name|'bad_filters'
op|'.'
name|'append'
op|'('
name|'filter_name'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'filter_cls'
op|'='
name|'self'
op|'.'
name|'filter_cls_map'
op|'['
name|'filter_name'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'filter_obj_map'
op|'['
name|'filter_name'
op|']'
op|'='
name|'filter_cls'
op|'('
op|')'
newline|'\n'
dedent|''
name|'good_filters'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'filter_obj_map'
op|'['
name|'filter_name'
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'bad_filters'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
string|'", "'
op|'.'
name|'join'
op|'('
name|'bad_filters'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'SchedulerHostFilterNotFound'
op|'('
name|'filter_name'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'good_filters'
newline|'\n'
nl|'\n'
DECL|member|get_filtered_hosts
dedent|''
name|'def'
name|'get_filtered_hosts'
op|'('
name|'self'
op|','
name|'hosts'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'filter_class_names'
op|'='
name|'None'
op|','
name|'index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Filter hosts and return only ones passing all filters."""'
newline|'\n'
nl|'\n'
DECL|function|_strip_ignore_hosts
name|'def'
name|'_strip_ignore_hosts'
op|'('
name|'host_map'
op|','
name|'hosts_to_ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ignored_hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'hosts_to_ignore'
op|':'
newline|'\n'
indent|'                '
name|'for'
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
name|'in'
name|'list'
op|'('
name|'host_map'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'host'
op|'=='
name|'hostname'
op|':'
newline|'\n'
indent|'                        '
name|'del'
name|'host_map'
op|'['
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
op|']'
newline|'\n'
name|'ignored_hosts'
op|'.'
name|'append'
op|'('
name|'host'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'ignored_hosts_str'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'ignored_hosts'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Host filter ignoring hosts: %s'"
op|')'
op|','
name|'ignored_hosts_str'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_match_forced_hosts
dedent|''
name|'def'
name|'_match_forced_hosts'
op|'('
name|'host_map'
op|','
name|'hosts_to_force'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'forced_hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
name|'in'
name|'list'
op|'('
name|'host_map'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'hostname'
name|'not'
name|'in'
name|'hosts_to_force'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'host_map'
op|'['
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'forced_hosts'
op|'.'
name|'append'
op|'('
name|'hostname'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'host_map'
op|':'
newline|'\n'
indent|'                '
name|'forced_hosts_str'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'forced_hosts'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_LI'
op|'('
string|"'Host filter forcing available hosts to %s'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'forced_hosts_str'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'hosts_to_force'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_LI'
op|'('
string|'"No hosts matched due to not matching "'
nl|'\n'
string|'"\'force_hosts\' value of \'%s\'"'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|'%'
name|'forced_hosts_str'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_match_forced_nodes
dedent|''
name|'def'
name|'_match_forced_nodes'
op|'('
name|'host_map'
op|','
name|'nodes_to_force'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'forced_nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
name|'in'
name|'list'
op|'('
name|'host_map'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'nodename'
name|'not'
name|'in'
name|'nodes_to_force'
op|':'
newline|'\n'
indent|'                    '
name|'del'
name|'host_map'
op|'['
op|'('
name|'hostname'
op|','
name|'nodename'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'forced_nodes'
op|'.'
name|'append'
op|'('
name|'nodename'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'host_map'
op|':'
newline|'\n'
indent|'                '
name|'forced_nodes_str'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'forced_nodes'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_LI'
op|'('
string|"'Host filter forcing available nodes to %s'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'forced_nodes_str'
op|'='
string|"', '"
op|'.'
name|'join'
op|'('
name|'nodes_to_force'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'_LI'
op|'('
string|'"No nodes matched due to not matching "'
nl|'\n'
string|'"\'force_nodes\' value of \'%s\'"'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'msg'
op|'%'
name|'forced_nodes_str'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'filter_class_names'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
name|'self'
op|'.'
name|'default_filters'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
name|'self'
op|'.'
name|'_choose_host_filters'
op|'('
name|'filter_class_names'
op|')'
newline|'\n'
dedent|''
name|'ignore_hosts'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'ignore_hosts'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'force_hosts'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'force_hosts'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'force_nodes'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'force_nodes'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ignore_hosts'
name|'or'
name|'force_hosts'
name|'or'
name|'force_nodes'
op|':'
newline|'\n'
comment|'# NOTE(deva): we can\'t assume "host" is unique because'
nl|'\n'
comment|'#             one host may have many nodes.'
nl|'\n'
indent|'            '
name|'name_to_cls_map'
op|'='
op|'{'
op|'('
name|'x'
op|'.'
name|'host'
op|','
name|'x'
op|'.'
name|'nodename'
op|')'
op|':'
name|'x'
name|'for'
name|'x'
name|'in'
name|'hosts'
op|'}'
newline|'\n'
name|'if'
name|'ignore_hosts'
op|':'
newline|'\n'
indent|'                '
name|'_strip_ignore_hosts'
op|'('
name|'name_to_cls_map'
op|','
name|'ignore_hosts'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'name_to_cls_map'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'['
op|']'
newline|'\n'
comment|'# NOTE(deva): allow force_hosts and force_nodes independently'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'force_hosts'
op|':'
newline|'\n'
indent|'                '
name|'_match_forced_hosts'
op|'('
name|'name_to_cls_map'
op|','
name|'force_hosts'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'force_nodes'
op|':'
newline|'\n'
indent|'                '
name|'_match_forced_nodes'
op|'('
name|'name_to_cls_map'
op|','
name|'force_nodes'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'force_hosts'
name|'or'
name|'force_nodes'
op|':'
newline|'\n'
comment|'# NOTE(deva): Skip filters when forcing host or node'
nl|'\n'
indent|'                '
name|'if'
name|'name_to_cls_map'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'name_to_cls_map'
op|'.'
name|'values'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'hosts'
op|'='
name|'six'
op|'.'
name|'itervalues'
op|'('
name|'name_to_cls_map'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'filter_handler'
op|'.'
name|'get_filtered_objects'
op|'('
name|'filters'
op|','
nl|'\n'
name|'hosts'
op|','
name|'filter_properties'
op|','
name|'index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_weighed_hosts
dedent|''
name|'def'
name|'get_weighed_hosts'
op|'('
name|'self'
op|','
name|'hosts'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Weigh the hosts."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'weight_handler'
op|'.'
name|'get_weighed_objects'
op|'('
name|'self'
op|'.'
name|'weighers'
op|','
nl|'\n'
name|'hosts'
op|','
name|'weight_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all_host_states
dedent|''
name|'def'
name|'get_all_host_states'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of HostStates that represents all the hosts\n        the HostManager knows about. Also, each of the consumable resources\n        in HostState are pre-populated and adjusted based on data in the db.\n        """'
newline|'\n'
nl|'\n'
name|'service_refs'
op|'='
op|'{'
name|'service'
op|'.'
name|'host'
op|':'
name|'service'
nl|'\n'
name|'for'
name|'service'
name|'in'
name|'objects'
op|'.'
name|'ServiceList'
op|'.'
name|'get_by_binary'
op|'('
nl|'\n'
name|'context'
op|','
string|"'nova-compute'"
op|')'
op|'}'
newline|'\n'
comment|'# Get resource usage across the available compute nodes:'
nl|'\n'
name|'compute_nodes'
op|'='
name|'objects'
op|'.'
name|'ComputeNodeList'
op|'.'
name|'get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'seen_nodes'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'for'
name|'compute'
name|'in'
name|'compute_nodes'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'='
name|'service_refs'
op|'.'
name|'get'
op|'('
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'service'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
nl|'\n'
string|'"No compute service record found for host %(host)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'host'
op|'='
name|'compute'
op|'.'
name|'host'
newline|'\n'
name|'node'
op|'='
name|'compute'
op|'.'
name|'hypervisor_hostname'
newline|'\n'
name|'state_key'
op|'='
op|'('
name|'host'
op|','
name|'node'
op|')'
newline|'\n'
name|'host_state'
op|'='
name|'self'
op|'.'
name|'host_state_map'
op|'.'
name|'get'
op|'('
name|'state_key'
op|')'
newline|'\n'
name|'if'
name|'host_state'
op|':'
newline|'\n'
indent|'                '
name|'host_state'
op|'.'
name|'update_from_compute_node'
op|'('
name|'compute'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'host_state'
op|'='
name|'self'
op|'.'
name|'host_state_cls'
op|'('
name|'host'
op|','
name|'node'
op|','
name|'compute'
op|'='
name|'compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_state_map'
op|'['
name|'state_key'
op|']'
op|'='
name|'host_state'
newline|'\n'
comment|'# We force to update the aggregates info each time a new request'
nl|'\n'
comment|'# comes in, because some changes on the aggregates could have been'
nl|'\n'
comment|'# happening after setting this field for the first time'
nl|'\n'
dedent|''
name|'host_state'
op|'.'
name|'aggregates'
op|'='
op|'['
name|'self'
op|'.'
name|'aggs_by_id'
op|'['
name|'agg_id'
op|']'
name|'for'
name|'agg_id'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'host_aggregates_map'
op|'['
nl|'\n'
name|'host_state'
op|'.'
name|'host'
op|']'
op|']'
newline|'\n'
name|'host_state'
op|'.'
name|'update_service'
op|'('
name|'dict'
op|'('
name|'service'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_add_instance_info'
op|'('
name|'context'
op|','
name|'compute'
op|','
name|'host_state'
op|')'
newline|'\n'
name|'seen_nodes'
op|'.'
name|'add'
op|'('
name|'state_key'
op|')'
newline|'\n'
nl|'\n'
comment|'# remove compute nodes from host_state_map if they are not active'
nl|'\n'
dedent|''
name|'dead_nodes'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'host_state_map'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'-'
name|'seen_nodes'
newline|'\n'
name|'for'
name|'state_key'
name|'in'
name|'dead_nodes'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|','
name|'node'
op|'='
name|'state_key'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Removing dead compute node %(host)s:%(node)s "'
nl|'\n'
string|'"from scheduler"'
op|')'
op|','
op|'{'
string|"'host'"
op|':'
name|'host'
op|','
string|"'node'"
op|':'
name|'node'
op|'}'
op|')'
newline|'\n'
name|'del'
name|'self'
op|'.'
name|'host_state_map'
op|'['
name|'state_key'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'six'
op|'.'
name|'itervalues'
op|'('
name|'self'
op|'.'
name|'host_state_map'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_add_instance_info
dedent|''
name|'def'
name|'_add_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'compute'
op|','
name|'host_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Adds the host instance info to the host_state object.\n\n        Some older compute nodes may not be sending instance change updates to\n        the Scheduler; other sites may disable this feature for performance\n        reasons. In either of these cases, there will either be no information\n        for the host, or the \'updated\' value for that host dict will be False.\n        In those cases, we need to grab the current InstanceList instead of\n        relying on the version in _instance_info.\n        """'
newline|'\n'
name|'host_name'
op|'='
name|'compute'
op|'.'
name|'host'
newline|'\n'
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'.'
name|'get'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'host_info'
name|'and'
name|'host_info'
op|'.'
name|'get'
op|'('
string|'"updated"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'inst_dict'
op|'='
name|'host_info'
op|'['
string|'"instances"'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|"# Host is running old version, or updates aren't flowing."
nl|'\n'
indent|'            '
name|'inst_list'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'inst_dict'
op|'='
op|'{'
name|'instance'
op|'.'
name|'uuid'
op|':'
name|'instance'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'inst_list'
op|'.'
name|'objects'
op|'}'
newline|'\n'
dedent|''
name|'host_state'
op|'.'
name|'instances'
op|'='
name|'inst_dict'
newline|'\n'
nl|'\n'
DECL|member|_recreate_instance_info
dedent|''
name|'def'
name|'_recreate_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get the InstanceList for the specified host, and store it in the\n        _instance_info dict.\n        """'
newline|'\n'
name|'instances'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'inst_dict'
op|'='
op|'{'
name|'instance'
op|'.'
name|'uuid'
op|':'
name|'instance'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|'}'
newline|'\n'
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'['
name|'host_name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'host_info'
op|'['
string|'"instances"'
op|']'
op|'='
name|'inst_dict'
newline|'\n'
name|'host_info'
op|'['
string|'"updated"'
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'HOST_INSTANCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|update_instance_info
name|'def'
name|'update_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'instance_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receives an InstanceList object from a compute node.\n\n        This method receives information from a compute node when it starts up,\n        or when its instances have changed, and updates its view of hosts and\n        instances with it.\n        """'
newline|'\n'
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'.'
name|'get'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'host_info'
op|':'
newline|'\n'
indent|'            '
name|'inst_dict'
op|'='
name|'host_info'
op|'.'
name|'get'
op|'('
string|'"instances"'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instance_info'
op|'.'
name|'objects'
op|':'
newline|'\n'
comment|'# Overwrite the entry (if any) with the new info.'
nl|'\n'
indent|'                '
name|'inst_dict'
op|'['
name|'instance'
op|'.'
name|'uuid'
op|']'
op|'='
name|'instance'
newline|'\n'
dedent|''
name|'host_info'
op|'['
string|'"updated"'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instances'
op|'='
name|'instance_info'
op|'.'
name|'objects'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'instances'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
comment|'# This is a host sending its full instance list, so use it.'
nl|'\n'
indent|'                '
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'['
name|'host_name'
op|']'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'host_info'
op|'['
string|'"instances"'
op|']'
op|'='
op|'{'
name|'instance'
op|'.'
name|'uuid'
op|':'
name|'instance'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|'}'
newline|'\n'
name|'host_info'
op|'['
string|'"updated"'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_recreate_instance_info'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Received an update from an unknown host \'%s\'. "'
nl|'\n'
string|'"Re-created its InstanceList."'
op|')'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'HOST_INSTANCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|delete_instance_info
name|'def'
name|'delete_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receives the UUID from a compute node when one of its instances is\n        terminated.\n\n        The instance in the local view of the host\'s instances is removed.\n        """'
newline|'\n'
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'.'
name|'get'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'host_info'
op|':'
newline|'\n'
indent|'            '
name|'inst_dict'
op|'='
name|'host_info'
op|'['
string|'"instances"'
op|']'
newline|'\n'
comment|'# Remove the existing Instance object, if any'
nl|'\n'
name|'inst_dict'
op|'.'
name|'pop'
op|'('
name|'instance_uuid'
op|','
name|'None'
op|')'
newline|'\n'
name|'host_info'
op|'['
string|'"updated"'
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_recreate_instance_info'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Received a delete update from an unknown host \'%s\'. "'
nl|'\n'
string|'"Re-created its InstanceList."'
op|')'
op|','
name|'host_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
name|'HOST_INSTANCE_SEMAPHORE'
op|')'
newline|'\n'
DECL|member|sync_instance_info
name|'def'
name|'sync_instance_info'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'host_name'
op|','
name|'instance_uuids'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Receives the uuids of the instances on a host.\n\n        This method is periodically called by the compute nodes, which send a\n        list of all the UUID values for the instances on that node. This is\n        used by the scheduler\'s HostManager to detect when its view of the\n        compute node\'s instances is out of sync.\n        """'
newline|'\n'
name|'host_info'
op|'='
name|'self'
op|'.'
name|'_instance_info'
op|'.'
name|'get'
op|'('
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'host_info'
op|':'
newline|'\n'
indent|'            '
name|'local_set'
op|'='
name|'set'
op|'('
name|'host_info'
op|'['
string|'"instances"'
op|']'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'compute_set'
op|'='
name|'set'
op|'('
name|'instance_uuids'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'local_set'
op|'=='
name|'compute_set'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_recreate_instance_info'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"The instance sync for host \'%s\' did not match. "'
nl|'\n'
string|'"Re-created its InstanceList."'
op|')'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'host_info'
op|'['
string|'"updated"'
op|']'
op|'='
name|'True'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Successfully synced instances from host \'%s\'."'
op|')'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_recreate_instance_info'
op|'('
name|'context'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Received a sync request from an unknown host \'%s\'. "'
nl|'\n'
string|'"Re-created its InstanceList."'
op|')'
op|','
name|'host_name'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

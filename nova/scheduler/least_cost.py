begin_unit
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nLeast Cost is an algorithm for choosing which host machines to\nprovision a set of resources to. The input is a WeightedHost object which\nis decided upon by a set of objective-functions, called the \'cost-functions\'.\nThe WeightedHost contains a combined weight for each cost-function.\n\nThe cost-function and weights are tabulated, and the host with the least cost\nis then selected for provisioning.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.least_cost'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|least_cost_opts
name|'least_cost_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'least_cost_functions'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
nl|'\n'
string|"'nova.scheduler.least_cost.compute_fill_first_cost_fn'"
nl|'\n'
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Which cost functions the LeastCostScheduler should use'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'noop_cost_fn_weight'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1.0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How much weight to give the noop cost function'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'compute_fill_first_cost_fn_weight'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1.0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How much weight to give the fill-first cost function'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'add_options'
op|'('
name|'least_cost_opts'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(sirp): Once we have enough of these rules, we can break them out into a'
nl|'\n'
comment|'# cost_functions.py file (perhaps in a least_cost_scheduler directory)'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|WeightedHost
name|'class'
name|'WeightedHost'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Reduced set of information about a host that has been weighed.\n    This is an attempt to remove some of the ad-hoc dict structures\n    previously used."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'weight'
op|','
name|'host_state'
op|'='
name|'None'
op|','
name|'blob'
op|'='
name|'None'
op|','
name|'zone'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'weight'
op|'='
name|'weight'
newline|'\n'
name|'self'
op|'.'
name|'blob'
op|'='
name|'blob'
newline|'\n'
name|'self'
op|'.'
name|'zone'
op|'='
name|'zone'
newline|'\n'
nl|'\n'
comment|'# Local members. These are not returned outside of the Zone.'
nl|'\n'
name|'self'
op|'.'
name|'host_state'
op|'='
name|'host_state'
newline|'\n'
nl|'\n'
DECL|member|to_dict
dedent|''
name|'def'
name|'to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'x'
op|'='
name|'dict'
op|'('
name|'weight'
op|'='
name|'self'
op|'.'
name|'weight'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'blob'
op|':'
newline|'\n'
indent|'            '
name|'x'
op|'['
string|"'blob'"
op|']'
op|'='
name|'self'
op|'.'
name|'blob'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'host_state'
op|':'
newline|'\n'
indent|'            '
name|'x'
op|'['
string|"'host'"
op|']'
op|'='
name|'self'
op|'.'
name|'host_state'
op|'.'
name|'host'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'zone'
op|':'
newline|'\n'
indent|'            '
name|'x'
op|'['
string|"'zone'"
op|']'
op|'='
name|'self'
op|'.'
name|'zone'
newline|'\n'
dedent|''
name|'return'
name|'x'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|noop_cost_fn
dedent|''
dedent|''
name|'def'
name|'noop_cost_fn'
op|'('
name|'host_state'
op|','
name|'weighing_properties'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a pre-weight cost of 1 for each host"""'
newline|'\n'
name|'return'
number|'1'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compute_fill_first_cost_fn
dedent|''
name|'def'
name|'compute_fill_first_cost_fn'
op|'('
name|'host_state'
op|','
name|'weighing_properties'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""More free ram = higher weight. So servers will less free\n    ram will be preferred."""'
newline|'\n'
name|'return'
name|'host_state'
op|'.'
name|'free_ram_mb'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|weighted_sum
dedent|''
name|'def'
name|'weighted_sum'
op|'('
name|'weighted_fns'
op|','
name|'host_states'
op|','
name|'weighing_properties'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Use the weighted-sum method to compute a score for an array of objects.\n    Normalize the results of the objective-functions so that the weights are\n    meaningful regardless of objective-function\'s range.\n\n    host_list - [(host, HostInfo()), ...]\n    weighted_fns - list of weights and functions like:\n        [(weight, objective-functions), ...]\n    weighing_properties is an arbitrary dict of values that can influence\n        weights.\n\n    Returns a single WeightedHost object which represents the best\n    candidate.\n    """'
newline|'\n'
nl|'\n'
comment|'# Make a grid of functions results.'
nl|'\n'
comment|'# One row per host. One column per function.'
nl|'\n'
name|'scores'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'weight'
op|','
name|'fn'
name|'in'
name|'weighted_fns'
op|':'
newline|'\n'
indent|'        '
name|'scores'
op|'.'
name|'append'
op|'('
op|'['
name|'fn'
op|'('
name|'host_state'
op|','
name|'weighing_properties'
op|')'
nl|'\n'
name|'for'
name|'host_state'
name|'in'
name|'host_states'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Adjust the weights in the grid by the functions weight adjustment'
nl|'\n'
comment|'# and sum them up to get a final list of weights.'
nl|'\n'
dedent|''
name|'adjusted_scores'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
op|'('
name|'weight'
op|','
name|'fn'
op|')'
op|','
name|'row'
name|'in'
name|'zip'
op|'('
name|'weighted_fns'
op|','
name|'scores'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'adjusted_scores'
op|'.'
name|'append'
op|'('
op|'['
name|'weight'
op|'*'
name|'score'
name|'for'
name|'score'
name|'in'
name|'row'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, sum down the columns to get the final score. Column per host.'
nl|'\n'
dedent|''
name|'final_scores'
op|'='
op|'['
number|'0.0'
op|']'
op|'*'
name|'len'
op|'('
name|'host_states'
op|')'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'adjusted_scores'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'idx'
op|','
name|'col'
name|'in'
name|'enumerate'
op|'('
name|'row'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'final_scores'
op|'['
name|'idx'
op|']'
op|'+='
name|'col'
newline|'\n'
nl|'\n'
comment|'# Super-impose the host_state into the scores so'
nl|'\n'
comment|"# we don't lose it when we sort."
nl|'\n'
dedent|''
dedent|''
name|'final_scores'
op|'='
op|'['
op|'('
name|'final_scores'
op|'['
name|'idx'
op|']'
op|','
name|'host_state'
op|')'
nl|'\n'
name|'for'
name|'idx'
op|','
name|'host_state'
name|'in'
name|'enumerate'
op|'('
name|'host_states'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'final_scores'
op|'='
name|'sorted'
op|'('
name|'final_scores'
op|')'
newline|'\n'
name|'weight'
op|','
name|'host_state'
op|'='
name|'final_scores'
op|'['
number|'0'
op|']'
comment|'# Lowest score is the winner!'
newline|'\n'
name|'return'
name|'WeightedHost'
op|'('
name|'weight'
op|','
name|'host_state'
op|'='
name|'host_state'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

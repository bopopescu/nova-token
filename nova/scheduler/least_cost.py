begin_unit
name|'import'
name|'collections'
newline|'\n'
nl|'\n'
comment|'# TODO(sirp): this should be just `zone_aware` to match naming scheme'
nl|'\n'
comment|'# TODO(sirp): perhaps all zone-aware stuff should go under a `zone_aware`'
nl|'\n'
comment|'# module'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'zone_aware_scheduler'
newline|'\n'
nl|'\n'
DECL|class|LeastCostScheduler
name|'class'
name|'LeastCostScheduler'
op|'('
name|'zone_aware_scheduler'
op|'.'
name|'ZoneAwareScheduler'
op|')'
op|':'
newline|'\n'
DECL|member|get_cost_fns
indent|'    '
name|'def'
name|'get_cost_fns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of tuples containing weights and cost functions to\n        use for weighing hosts\n        """'
newline|'\n'
name|'cost_fns'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'return'
name|'cost_fns'
newline|'\n'
nl|'\n'
DECL|member|weigh_hosts
dedent|''
name|'def'
name|'weigh_hosts'
op|'('
name|'self'
op|','
name|'num'
op|','
name|'specs'
op|','
name|'hosts'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of dictionaries of form:\n            [ {weight: weight, hostname: hostname} ]\n        """'
newline|'\n'
comment|'# FIXME(sirp): weigh_hosts should handle more than just instances'
nl|'\n'
name|'cost_fns'
op|'='
op|'['
op|']'
newline|'\n'
name|'hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'cost_hosts'
op|'='
name|'weighted_sum'
op|'('
name|'domain'
op|'='
name|'hosts'
op|','
name|'weighted_fns'
op|'='
name|'self'
op|'.'
name|'get_cost_fns'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO convert hosts back to hostnames'
nl|'\n'
name|'weight_hostnames'
op|'='
op|'['
op|']'
newline|'\n'
name|'return'
name|'weight_hostnames'
newline|'\n'
nl|'\n'
DECL|function|normalize_list
dedent|''
dedent|''
name|'def'
name|'normalize_list'
op|'('
name|'L'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Normalize an array of numbers such that each element satisfies:\n        0 <= e <= 1\n    """'
newline|'\n'
name|'if'
name|'not'
name|'L'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'L'
newline|'\n'
dedent|''
name|'max_'
op|'='
name|'max'
op|'('
name|'L'
op|')'
newline|'\n'
name|'if'
name|'max_'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'('
name|'float'
op|'('
name|'e'
op|')'
op|'/'
name|'max_'
op|')'
name|'for'
name|'e'
name|'in'
name|'L'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'L'
newline|'\n'
nl|'\n'
DECL|function|weighted_sum
dedent|''
name|'def'
name|'weighted_sum'
op|'('
name|'domain'
op|','
name|'weighted_fns'
op|','
name|'normalize'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Use the weighted-sum method to compute a score for an array of objects.\n    Normalize the results of the objective-functions so that the weights are\n    meaningful regardless of objective-function\'s range.\n    \n    domain - input to be scored\n    weighted_fns - list of weights and functions like:\n        [(weight, objective-functions)]\n\n    Returns an unsorted list like: [(score, elem)]\n    """'
newline|'\n'
comment|'# Table of form:'
nl|'\n'
comment|'#   { domain1: [score1, score2, ..., scoreM]'
nl|'\n'
comment|'#     ...'
nl|'\n'
comment|'#     domainN: [score1, score2, ..., scoreM] }'
nl|'\n'
name|'score_table'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'list'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'weight'
op|','
name|'fn'
name|'in'
name|'weighted_fns'
op|':'
newline|'\n'
indent|'        '
name|'scores'
op|'='
op|'['
name|'fn'
op|'('
name|'elem'
op|')'
name|'for'
name|'elem'
name|'in'
name|'domain'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'normalize'
op|':'
newline|'\n'
indent|'            '
name|'norm_scores'
op|'='
name|'normalize_list'
op|'('
name|'scores'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'norm_scores'
op|'='
name|'scores'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'idx'
op|','
name|'score'
name|'in'
name|'enumerate'
op|'('
name|'norm_scores'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'weighted_score'
op|'='
name|'score'
op|'*'
name|'weight'
newline|'\n'
name|'score_table'
op|'['
name|'idx'
op|']'
op|'.'
name|'append'
op|'('
name|'weighted_score'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sum rows in table to compute score for each element in domain'
nl|'\n'
dedent|''
dedent|''
name|'domain_scores'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'sorted'
op|'('
name|'score_table'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elem_score'
op|'='
name|'sum'
op|'('
name|'score_table'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'elem'
op|'='
name|'domain'
op|'['
name|'idx'
op|']'
newline|'\n'
name|'domain_scores'
op|'.'
name|'append'
op|'('
name|'elem_score'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'domain_scores'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nScheduler host filters\n"""'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseHostFilter
name|'class'
name|'BaseHostFilter'
op|'('
name|'filters'
op|'.'
name|'BaseFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for host filters."""'
newline|'\n'
DECL|member|_filter_one
name|'def'
name|'_filter_one'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True if the object passes the filter, otherwise False."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'host_passes'
op|'('
name|'obj'
op|','
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|host_passes
dedent|''
name|'def'
name|'host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return True if the HostState passes the filter, otherwise False.\n        Override this in a subclass.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostFilterHandler
dedent|''
dedent|''
name|'class'
name|'HostFilterHandler'
op|'('
name|'filters'
op|'.'
name|'BaseFilterHandler'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostFilterHandler'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'BaseHostFilter'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|all_filters
dedent|''
dedent|''
name|'def'
name|'all_filters'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a list of filter classes found in this directory.\n\n    This method is used as the default for available scheduler filters\n    and should return a list of all filter classes available.\n    """'
newline|'\n'
name|'return'
name|'HostFilterHandler'
op|'('
op|')'
op|'.'
name|'get_all_classes'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(sbauza): Remove that decorator once all filters are using RequestSpec'
nl|'\n'
comment|'# object directly.'
nl|'\n'
DECL|function|compat_legacy_props
dedent|''
name|'def'
name|'compat_legacy_props'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator for returning a legacy filter_properties dictionary.\n\n    This is used for keeping unchanged the existing filters without yet using\n    the RequestSpec fields by returning a legacy dictionary.\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_host_passes
name|'def'
name|'decorated_host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'filter_properties'
op|','
name|'objects'
op|'.'
name|'RequestSpec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'legacy_props'
op|'='
name|'filter_properties'
op|'.'
name|'to_legacy_filter_properties_dict'
op|'('
op|')'
newline|'\n'
name|'legacy_props'
op|'.'
name|'update'
op|'('
op|'{'
string|"'request_spec'"
op|':'
op|'('
nl|'\n'
name|'filter_properties'
op|'.'
name|'to_legacy_request_spec_dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'filter_properties'
op|'.'
name|'flavor'
op|'}'
op|')'
newline|'\n'
comment|'# TODO(sbauza): Adding two keys not used in-tree but which will be'
nl|'\n'
comment|'# provided as non-fields for the RequestSpec once we provide it to'
nl|'\n'
comment|'# the filters'
nl|'\n'
name|'legacy_props'
op|'.'
name|'update'
op|'('
nl|'\n'
op|'{'
string|"'context'"
op|':'
name|'filter_properties'
op|'.'
name|'_context'
op|','
nl|'\n'
string|"'config_options'"
op|':'
name|'filter_properties'
op|'.'
name|'config_options'
op|'}'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'legacy_props'
newline|'\n'
dedent|''
name|'return'
name|'function'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'decorated_host_passes'
newline|'\n'
dedent|''
endmarker|''
end_unit

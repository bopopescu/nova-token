begin_unit
comment|'# Copyright (c) 2012 The Cloudscaling Group, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
op|'.'
name|'filters'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TypeAffinityFilter
name|'class'
name|'TypeAffinityFilter'
op|'('
name|'filters'
op|'.'
name|'BaseHostFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""TypeAffinityFilter doesn\'t allow more than one VM type per host.\n\n    Note: this works best with ram_weight_multiplier\n    (spread) set to 1 (default).\n    """'
newline|'\n'
nl|'\n'
DECL|member|host_passes
name|'def'
name|'host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Dynamically limits hosts to one instance type\n\n        Return False if host has any instance types other than the requested\n        type. Return True if all instance types match or if host is empty.\n        """'
newline|'\n'
name|'instance_type'
op|'='
name|'spec_obj'
op|'.'
name|'flavor'
newline|'\n'
name|'instance_type_id'
op|'='
name|'instance_type'
op|'.'
name|'id'
newline|'\n'
name|'other_types_on_host'
op|'='
name|'utils'
op|'.'
name|'other_types_on_host'
op|'('
name|'host_state'
op|','
nl|'\n'
name|'instance_type_id'
op|')'
newline|'\n'
name|'return'
name|'not'
name|'other_types_on_host'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AggregateTypeAffinityFilter
dedent|''
dedent|''
name|'class'
name|'AggregateTypeAffinityFilter'
op|'('
name|'filters'
op|'.'
name|'BaseHostFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""AggregateTypeAffinityFilter limits instance_type by aggregate\n\n    return True if no instance_type key is set or if the aggregate metadata\n    key \'instance_type\' has the instance_type name as a value\n    """'
newline|'\n'
nl|'\n'
comment|'# Aggregate data does not change within a request'
nl|'\n'
DECL|variable|run_filter_once_per_request
name|'run_filter_once_per_request'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|host_passes
name|'def'
name|'host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'spec_obj'
op|'.'
name|'flavor'
newline|'\n'
nl|'\n'
name|'aggregate_vals'
op|'='
name|'utils'
op|'.'
name|'aggregate_values_from_key'
op|'('
nl|'\n'
name|'host_state'
op|','
string|"'instance_type'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'val'
name|'in'
name|'aggregate_vals'
op|':'
newline|'\n'
indent|'            '
name|'if'
op|'('
name|'instance_type'
op|'.'
name|'name'
name|'in'
nl|'\n'
op|'['
name|'x'
op|'.'
name|'strip'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'val'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'not'
name|'aggregate_vals'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AggregateTypeExtraSpecsAffinityFilter
dedent|''
dedent|''
name|'class'
name|'AggregateTypeExtraSpecsAffinityFilter'
op|'('
name|'filters'
op|'.'
name|'BaseHostFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""AggregateTypeExtraSpecsAffinityFilter filters only hosts aggregated\n    inside host aggregates containing "flavor_extra_spec" metadata. Keys inside\n    this variable must match with the instance extra specs.\n\n    To use this filter, the name of this class should be added to the variable\n    ``scheduler_default_filters``, in ``nova.conf``:\n\n    |   [DEFAULT]\n    |   scheduler_default_filters=<list of other filters>, \\\n                                  AggregateTypeExtraSpecsAffinityFilter\n\n    The content of the list will be formatted as follows. The entries in the\n    list will be separated by commas without white space. Each entry will\n    comprise of an instance type extra spec key followed by and equals "="\n    followed by a value: <key>=<value>.\n\n    Eg.\n        Host Aggregate metadata:\n            \'flavor_extra_spec=hw:mem_page_size=any,hw:mem_page_size=~,\' \\\n            \'hw:mem_page_size=small\'\n        Flavor extra specs:\n            \'hw:mem_page_size=small\'\n\n    Valid sentinel values are:\n\n    | * (asterisk): may be used to specify that any value is valid.\n    | ~ (tilde): may be used to specify that a key may optionally be omitted.\n    | ! (exclamation): may be used to specify that the key must not be present.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_parse_extra_spec_key_pairs
name|'def'
name|'_parse_extra_spec_key_pairs'
op|'('
name|'self'
op|','
name|'aggregate_extra_spec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parse and group all key/data from aggregate_extra_spec.\n\n        :param aggregate_extra_spec: string containing a list of required\n                                     instance flavor extra specs, separated by\n                                     commas, with format "key=value"\n        :type aggregate_extra_spec: unicode.\n        :return: dictionary with the values parsed and grouped by keys.\n        :type: dict.\n        """'
newline|'\n'
name|'extra_specs'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'set'
op|')'
newline|'\n'
name|'kv_list'
op|'='
name|'str'
op|'('
name|'aggregate_extra_spec'
op|')'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a new set entry in a dict for every new key, update the key'
nl|'\n'
comment|'# value (set object) for every other value.'
nl|'\n'
name|'for'
name|'kv_element'
name|'in'
name|'kv_list'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|','
name|'value'
op|'='
name|'kv_element'
op|'.'
name|'split'
op|'('
string|"'='"
op|','
number|'1'
op|')'
newline|'\n'
name|'extra_specs'
op|'['
name|'key'
op|']'
op|'.'
name|'add'
op|'('
name|'value'
op|')'
newline|'\n'
name|'if'
string|"'='"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Value string has an \'=\' char: key = \'%(key)s\', "'
nl|'\n'
string|'"value = \'%(value)s\'. Check if it\'s malformed"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'value'"
op|':'
name|'value'
op|','
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'extra_specs'
newline|'\n'
nl|'\n'
DECL|member|_instance_is_allowed_in_aggregate
dedent|''
name|'def'
name|'_instance_is_allowed_in_aggregate'
op|'('
name|'self'
op|','
nl|'\n'
name|'aggregate_extra_spec'
op|','
nl|'\n'
name|'instance_extra_specs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Loop over all aggregate_extra_spec elements parsed and execute the\n        appropriate filter action.\n\n        :param aggregate_extra_spec: dictionary with the values parsed and\n                                     grouped by keys.\n        :type aggregate_extra_spec: dict.\n        :param instance_extra_specs: dictionary containing the extra specs of\n                                     the instance to be filtered.\n        :type instance_extra_specs: dict.\n        :return: True if all parameters executed correctly; False is there\n                 is any error.\n        :type: boolean.\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'aggregate_extra_spec'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'*'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
name|'not'
name|'in'
name|'instance_extra_specs'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"\'flavor_extra_spec\' key: %(key)s "'
nl|'\n'
string|'"is not present"'
op|','
op|'{'
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'!'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
name|'in'
name|'instance_extra_specs'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"\'flavor_extra_spec\' key: %(key)s "'
nl|'\n'
string|'"is present"'
op|','
op|'{'
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
string|"'~'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'key'
name|'not'
name|'in'
name|'instance_extra_specs'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'value'
op|'.'
name|'discard'
op|'('
string|"'~'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'element'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'match'
op|'='
op|'['
name|'char'
name|'for'
name|'char'
name|'in'
op|'['
string|'"*"'
op|','
string|'"!"'
op|','
string|'"~"'
op|']'
name|'if'
name|'char'
name|'in'
name|'element'
op|']'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|'"Value string has \'%(chars)s\' char(s): "'
nl|'\n'
string|'"key = \'%(key)s\', value = \'%(value)s\'. "'
nl|'\n'
string|'"Check if it\'s malformed"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'value'"
op|':'
name|'element'
op|','
string|"'chars'"
op|':'
name|'match'
op|','
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'key'
name|'not'
name|'in'
name|'instance_extra_specs'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"\'flavor_extra_spec\' key: %(key)s "'
nl|'\n'
string|'"is not present"'
op|','
op|'{'
string|"'key'"
op|':'
name|'key'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'instance_extra_specs'
op|'['
name|'key'
op|']'
name|'not'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"The following \'flavor_extra_spec\' "'
nl|'\n'
string|'"key=value: %(key)s=%(value)s doesn\'t "'
nl|'\n'
string|'"match"'
op|','
op|'{'
string|"'key'"
op|':'
name|'key'
op|','
string|"'value'"
op|':'
name|'value'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|host_passes
dedent|''
name|'def'
name|'host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'spec_obj'
op|'.'
name|'flavor'
newline|'\n'
comment|"# If 'extra_specs' is not present or extra_specs are empty then we"
nl|'\n'
comment|'# need not proceed further'
nl|'\n'
name|'if'
op|'('
name|'not'
name|'instance_type'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'extra_specs'"
op|')'
nl|'\n'
name|'or'
name|'not'
name|'instance_type'
op|'.'
name|'extra_specs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'aggregate_extra_spec_list'
op|'='
name|'utils'
op|'.'
name|'aggregate_values_from_key'
op|'('
name|'host_state'
op|','
nl|'\n'
string|"'flavor_extra_spec'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'aggregate_extra_spec'
name|'in'
name|'aggregate_extra_spec_list'
op|':'
newline|'\n'
indent|'            '
name|'aggregate_extra_spec'
op|'='
name|'self'
op|'.'
name|'_parse_extra_spec_key_pairs'
op|'('
nl|'\n'
name|'aggregate_extra_spec'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_instance_is_allowed_in_aggregate'
op|'('
name|'aggregate_extra_spec'
op|','
nl|'\n'
name|'instance_type'
op|'.'
name|'extra_specs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

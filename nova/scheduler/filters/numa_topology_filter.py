begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NUMATopologyFilter
name|'class'
name|'NUMATopologyFilter'
op|'('
name|'filters'
op|'.'
name|'BaseHostFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Filter on requested NUMA topology."""'
newline|'\n'
nl|'\n'
DECL|member|_satisfies_cpu_policy
name|'def'
name|'_satisfies_cpu_policy'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'extra_specs'
op|','
name|'image_props'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check that the host_state provided satisfies any available\n        CPU policy requirements.\n        """'
newline|'\n'
name|'host_topology'
op|','
name|'_'
op|'='
name|'hardware'
op|'.'
name|'host_topology_and_format_from_host'
op|'('
nl|'\n'
name|'host_state'
op|')'
newline|'\n'
comment|'# NOTE(stephenfin): There can be conflicts between the policy'
nl|'\n'
comment|'# specified by the image and that specified by the instance, but this'
nl|'\n'
comment|'# is not the place to resolve these. We do this during scheduling.'
nl|'\n'
name|'cpu_policy'
op|'='
op|'['
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'hw:cpu_policy'"
op|')'
op|','
nl|'\n'
name|'image_props'
op|'.'
name|'get'
op|'('
string|"'hw_cpu_policy'"
op|')'
op|']'
newline|'\n'
name|'cpu_thread_policy'
op|'='
op|'['
name|'extra_specs'
op|'.'
name|'get'
op|'('
string|"'hw:cpu_thread_policy'"
op|')'
op|','
nl|'\n'
name|'image_props'
op|'.'
name|'get'
op|'('
string|"'hw_cpu_thread_policy'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'host_topology'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'fields'
op|'.'
name|'CPUAllocationPolicy'
op|'.'
name|'DEDICATED'
name|'not'
name|'in'
name|'cpu_policy'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'fields'
op|'.'
name|'CPUThreadAllocationPolicy'
op|'.'
name|'REQUIRE'
name|'not'
name|'in'
name|'cpu_thread_policy'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'cell'
name|'in'
name|'host_topology'
op|'.'
name|'cells'
op|':'
newline|'\n'
comment|'# the presence of siblings indicates hyperthreading (HT)'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'cell'
op|'.'
name|'siblings'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"%(host_state)s fails CPU policy requirements. "'
nl|'\n'
string|'"Host does not have hyperthreading or "'
nl|'\n'
string|'"hyperthreading is disabled, but \'require\' threads "'
nl|'\n'
string|'"policy was requested."'
op|','
op|'{'
string|"'host_state'"
op|':'
name|'host_state'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|host_passes
dedent|''
name|'def'
name|'host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'spec_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ram_ratio'
op|'='
name|'host_state'
op|'.'
name|'ram_allocation_ratio'
newline|'\n'
name|'cpu_ratio'
op|'='
name|'host_state'
op|'.'
name|'cpu_allocation_ratio'
newline|'\n'
name|'extra_specs'
op|'='
name|'spec_obj'
op|'.'
name|'flavor'
op|'.'
name|'extra_specs'
newline|'\n'
name|'image_props'
op|'='
name|'spec_obj'
op|'.'
name|'image'
op|'.'
name|'properties'
newline|'\n'
name|'requested_topology'
op|'='
name|'spec_obj'
op|'.'
name|'numa_topology'
newline|'\n'
name|'host_topology'
op|','
name|'_fmt'
op|'='
name|'hardware'
op|'.'
name|'host_topology_and_format_from_host'
op|'('
nl|'\n'
name|'host_state'
op|')'
newline|'\n'
name|'pci_requests'
op|'='
name|'spec_obj'
op|'.'
name|'pci_requests'
newline|'\n'
nl|'\n'
name|'if'
name|'pci_requests'
op|':'
newline|'\n'
indent|'            '
name|'pci_requests'
op|'='
name|'pci_requests'
op|'.'
name|'requests'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'_satisfies_cpu_policy'
op|'('
name|'host_state'
op|','
name|'extra_specs'
op|','
nl|'\n'
name|'image_props'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'requested_topology'
name|'and'
name|'host_topology'
op|':'
newline|'\n'
indent|'            '
name|'limits'
op|'='
name|'objects'
op|'.'
name|'NUMATopologyLimits'
op|'('
nl|'\n'
name|'cpu_allocation_ratio'
op|'='
name|'cpu_ratio'
op|','
nl|'\n'
name|'ram_allocation_ratio'
op|'='
name|'ram_ratio'
op|')'
newline|'\n'
name|'instance_topology'
op|'='
op|'('
name|'hardware'
op|'.'
name|'numa_fit_instance_to_host'
op|'('
nl|'\n'
name|'host_topology'
op|','
name|'requested_topology'
op|','
nl|'\n'
name|'limits'
op|'='
name|'limits'
op|','
nl|'\n'
name|'pci_requests'
op|'='
name|'pci_requests'
op|','
nl|'\n'
name|'pci_stats'
op|'='
name|'host_state'
op|'.'
name|'pci_stats'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'instance_topology'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"%(host)s, %(node)s fails NUMA topology "'
nl|'\n'
string|'"requirements. The instance does not fit on this "'
nl|'\n'
string|'"host."'
op|','
op|'{'
string|"'host'"
op|':'
name|'host_state'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'node'"
op|':'
name|'host_state'
op|'.'
name|'nodename'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'spec_obj'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'host_state'
op|'.'
name|'limits'
op|'['
string|"'numa_topology'"
op|']'
op|'='
name|'limits'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'elif'
name|'requested_topology'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"%(host)s, %(node)s fails NUMA topology requirements. "'
nl|'\n'
string|'"No host NUMA topology while the instance specified "'
nl|'\n'
string|'"one."'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'host_state'
op|'.'
name|'host'
op|','
string|"'node'"
op|':'
name|'host_state'
op|'.'
name|'nodename'
op|'}'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'spec_obj'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nMetrics Weigher.  Weigh hosts by their metrics.\n\nThis weigher can compute the weight based on the compute node host\'s various\nmetrics. The to-be weighed metrics and their weighing ratio are specified\nin the configuration file as the followings:\n\n    [metrics]\n    weight_setting = name1=1.0, name2=-1.0\n\n    The final weight would be name1.value * 1.0 + name2.value * -1.0.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'conf'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'weights'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'nova'
op|'.'
name|'conf'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetricsWeigher
name|'class'
name|'MetricsWeigher'
op|'('
name|'weights'
op|'.'
name|'BaseHostWeigher'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_parse_setting'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_parse_setting
dedent|''
name|'def'
name|'_parse_setting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setting'
op|'='
name|'utils'
op|'.'
name|'parse_options'
op|'('
name|'CONF'
op|'.'
name|'metrics'
op|'.'
name|'weight_setting'
op|','
nl|'\n'
name|'sep'
op|'='
string|"'='"
op|','
nl|'\n'
name|'converter'
op|'='
name|'float'
op|','
nl|'\n'
name|'name'
op|'='
string|'"metrics.weight_setting"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|weight_multiplier
dedent|''
name|'def'
name|'weight_multiplier'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Override the weight multiplier."""'
newline|'\n'
name|'return'
name|'CONF'
op|'.'
name|'metrics'
op|'.'
name|'weight_multiplier'
newline|'\n'
nl|'\n'
DECL|member|_weigh_object
dedent|''
name|'def'
name|'_weigh_object'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
number|'0.0'
newline|'\n'
nl|'\n'
comment|'# NOTE(sbauza): Keying a dict of Metrics per metric name given that we'
nl|'\n'
comment|'# have a MonitorMetricList object'
nl|'\n'
name|'metrics_dict'
op|'='
op|'{'
name|'m'
op|'.'
name|'name'
op|':'
name|'m'
name|'for'
name|'m'
name|'in'
name|'host_state'
op|'.'
name|'metrics'
name|'or'
op|'['
op|']'
op|'}'
newline|'\n'
name|'for'
op|'('
name|'name'
op|','
name|'ratio'
op|')'
name|'in'
name|'self'
op|'.'
name|'setting'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'+='
name|'metrics_dict'
op|'['
name|'name'
op|']'
op|'.'
name|'value'
op|'*'
name|'ratio'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'CONF'
op|'.'
name|'metrics'
op|'.'
name|'required'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'ComputeHostMetricNotFound'
op|'('
nl|'\n'
name|'host'
op|'='
name|'host_state'
op|'.'
name|'host'
op|','
nl|'\n'
name|'node'
op|'='
name|'host_state'
op|'.'
name|'nodename'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# We treat the unavailable metric as the most negative'
nl|'\n'
comment|'# factor, i.e. set the value to make this obj would be'
nl|'\n'
comment|'# at the end of the ordered weighed obj list'
nl|'\n'
comment|'# Do nothing if ratio or weight_multiplier is 0.'
nl|'\n'
indent|'                    '
name|'if'
name|'ratio'
op|'*'
name|'self'
op|'.'
name|'weight_multiplier'
op|'('
op|')'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'CONF'
op|'.'
name|'metrics'
op|'.'
name|'weight_of_unavailable'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

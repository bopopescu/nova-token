begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Openstack, LLC.'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nScheduler Service\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'novatools'
newline|'\n'
name|'import'
name|'thread'
newline|'\n'
nl|'\n'
name|'from'
name|'datetime'
name|'import'
name|'datetime'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'greenpool'
name|'import'
name|'GreenPool'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.manager'"
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'scheduler_driver'"
op|','
nl|'\n'
string|"'nova.scheduler.chance.ChanceScheduler'"
op|','
nl|'\n'
string|"'Driver to use for the scheduler'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'zone_db_check_interval'"
op|','
nl|'\n'
number|'60'
op|','
nl|'\n'
string|"'Seconds between getting fresh zone info from db.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZoneState
name|'class'
name|'ZoneState'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Holds the state of all connected child zones."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'is_active'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'capabilities'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'retry'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'last_seen'
op|'='
name|'datetime'
op|'.'
name|'min'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'zone'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update zone credentials from db"""'
newline|'\n'
name|'self'
op|'.'
name|'zone_id'
op|'='
name|'zone'
op|'.'
name|'id'
newline|'\n'
name|'self'
op|'.'
name|'api_url'
op|'='
name|'zone'
op|'.'
name|'api_url'
newline|'\n'
name|'self'
op|'.'
name|'username'
op|'='
name|'zone'
op|'.'
name|'username'
newline|'\n'
name|'self'
op|'.'
name|'password'
op|'='
name|'zone'
op|'.'
name|'password'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_poll_zone
dedent|''
dedent|''
name|'def'
name|'_poll_zone'
op|'('
name|'zone'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Eventlet worker to poll a zone."""'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"_POLL_ZONE: STARTING"'
op|')'
newline|'\n'
name|'os'
op|'='
name|'novatools'
op|'.'
name|'OpenStack'
op|'('
name|'zone'
op|'.'
name|'username'
op|','
name|'zone'
op|'.'
name|'password'
op|','
name|'zone'
op|'.'
name|'api_url'
op|')'
newline|'\n'
name|'zone_metadata'
op|'='
name|'os'
op|'.'
name|'zones'
op|'.'
name|'info'
op|'('
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"_POLL_ZONE: GOT %s"'
op|'%'
name|'zone_metadata'
op|'.'
name|'_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stuff this in our cache.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZoneManager
dedent|''
name|'class'
name|'ZoneManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Keeps the zone states updated."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'last_zone_db_check'
op|'='
name|'datetime'
op|'.'
name|'min'
newline|'\n'
name|'self'
op|'.'
name|'zone_states'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_refresh_from_db
dedent|''
name|'def'
name|'_refresh_from_db'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make our zone state map match the db."""'
newline|'\n'
comment|'# Add/update existing zones ...'
nl|'\n'
name|'zones'
op|'='
name|'db'
op|'.'
name|'zone_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
name|'existing'
op|'='
name|'self'
op|'.'
name|'zone_states'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'db_keys'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'zone'
name|'in'
name|'zones'
op|':'
newline|'\n'
indent|'            '
name|'db_keys'
op|'.'
name|'append'
op|'('
name|'zone'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'if'
name|'zone'
op|'.'
name|'id'
name|'not'
name|'in'
name|'existing'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'zone_states'
op|'['
name|'zone'
op|'.'
name|'id'
op|']'
op|'='
name|'ZoneState'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'zone_states'
op|'['
name|'zone'
op|'.'
name|'id'
op|']'
op|'.'
name|'update'
op|'('
name|'zone'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup zones removed from db ...'
nl|'\n'
dedent|''
name|'for'
name|'zone_id'
name|'in'
name|'self'
op|'.'
name|'zone_states'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'zone_id'
name|'not'
name|'in'
name|'db_keys'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'zone_states'
op|'['
name|'zone_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_poll_zones
dedent|''
dedent|''
dedent|''
name|'def'
name|'_poll_zones'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Try to connect to each child zone and get update."""'
newline|'\n'
nl|'\n'
name|'green_pool'
op|'='
name|'GreenPool'
op|'('
op|')'
newline|'\n'
name|'green_pool'
op|'.'
name|'imap'
op|'('
name|'_poll_zone'
op|','
name|'self'
op|'.'
name|'zone_states'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ping
dedent|''
name|'def'
name|'ping'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ping should be called periodically to update zone status."""'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"ZoneManager PING"'
op|')'
newline|'\n'
name|'diff'
op|'='
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
op|'-'
name|'self'
op|'.'
name|'last_zone_db_check'
newline|'\n'
name|'if'
name|'diff'
op|'.'
name|'seconds'
op|'>='
name|'FLAGS'
op|'.'
name|'zone_db_check_interval'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"ZoneManager RECHECKING DB "'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'last_zone_db_check'
op|'='
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_refresh_from_db'
op|'('
name|'context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_poll_zones'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SchedulerManager
dedent|''
dedent|''
name|'class'
name|'SchedulerManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Chooses a host to run instances on."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'scheduler_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'scheduler_driver'
op|':'
newline|'\n'
indent|'            '
name|'scheduler_driver'
op|'='
name|'FLAGS'
op|'.'
name|'scheduler_driver'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'scheduler_driver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'zone_manager'
op|'='
name|'ZoneManager'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'SchedulerManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Converts all method calls to use the schedule method"""'
newline|'\n'
name|'return'
name|'functools'
op|'.'
name|'partial'
op|'('
name|'self'
op|'.'
name|'_schedule'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|periodic_tasks
dedent|''
name|'def'
name|'periodic_tasks'
op|'('
name|'self'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Poll child zones periodically to get status."""'
newline|'\n'
name|'self'
op|'.'
name|'zone_manager'
op|'.'
name|'ping'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_schedule
dedent|''
name|'def'
name|'_schedule'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'context'
op|','
name|'topic'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tries to call schedule_* method on the driver to retrieve host.\n\n        Falls back to schedule(context, topic) if method doesn\'t exist.\n        """'
newline|'\n'
name|'driver_method'
op|'='
string|"'schedule_%s'"
op|'%'
name|'method'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
name|'driver_method'
op|')'
op|'('
name|'elevated'
op|','
op|'*'
name|'args'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'schedule'
op|'('
name|'elevated'
op|','
name|'topic'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
name|'method'
op|','
nl|'\n'
string|'"args"'
op|':'
name|'kwargs'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Casting to %(topic)s %(host)s for %(method)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

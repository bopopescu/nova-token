begin_unit
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nThe BaseScheduler is the base class Scheduler for creating instances\nacross zones. There are two expansion points to this class for:\n1. Assigning Weights to hosts for requested instances\n2. Filtering Hosts based on required instance capabilities\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'abstract_scheduler'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'host_filter'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.base_scheduler'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseScheduler
name|'class'
name|'BaseScheduler'
op|'('
name|'abstract_scheduler'
op|'.'
name|'AbstractScheduler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for creating Schedulers that can work across any nova\n    deployment, from simple designs to multiply-nested zones.\n    """'
newline|'\n'
DECL|member|filter_hosts
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'request_spec'
op|','
name|'hosts'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Filter the full host list (from the ZoneManager)"""'
newline|'\n'
name|'filter_name'
op|'='
name|'request_spec'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Make sure that the requested filter is legitimate.'
nl|'\n'
name|'selected_filter'
op|'='
name|'host_filter'
op|'.'
name|'choose_host_filter'
op|'('
name|'filter_name'
op|')'
newline|'\n'
nl|'\n'
comment|"# TODO(sandy): We're only using InstanceType-based specs"
nl|'\n'
comment|"# currently. Later we'll need to snoop for more detailed"
nl|'\n'
comment|'# host filter requests.'
nl|'\n'
name|'instance_type'
op|'='
name|'request_spec'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'name'
op|','
name|'query'
op|'='
name|'selected_filter'
op|'.'
name|'instance_type_to_filter'
op|'('
name|'instance_type'
op|')'
newline|'\n'
name|'return'
name|'selected_filter'
op|'.'
name|'filter_hosts'
op|'('
name|'self'
op|'.'
name|'zone_manager'
op|','
name|'query'
op|')'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'request_spec'
op|','
name|'host_list'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of hosts which are acceptable for scheduling.\n        Return value should be a list of (hostname, capability_dict)s.\n        Derived classes may override this, but may find the\n        \'<topic>_filter\' function more appropriate.\n        """'
newline|'\n'
DECL|function|_default_filter
name|'def'
name|'_default_filter'
op|'('
name|'self'
op|','
name|'hostname'
op|','
name|'capabilities'
op|','
name|'request_spec'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Default filter function if there\'s no <topic>_filter"""'
newline|'\n'
comment|'# NOTE(sirp): The default logic is the equivalent to'
nl|'\n'
comment|'# AllHostsFilter'
nl|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'filter_func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'%s_filter'"
op|'%'
name|'topic'
op|','
name|'_default_filter'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'host_list'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'first_run'
op|'='
name|'True'
newline|'\n'
name|'host_list'
op|'='
name|'self'
op|'.'
name|'zone_manager'
op|'.'
name|'service_states'
op|'.'
name|'iteritems'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'first_run'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'filtered_hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'host'
op|','
name|'services'
name|'in'
name|'host_list'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'first_run'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'topic'
name|'not'
name|'in'
name|'services'
op|':'
newline|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'services'
op|'='
name|'services'
op|'['
name|'topic'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'filter_func'
op|'('
name|'host'
op|','
name|'services'
op|','
name|'request_spec'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'filtered_hosts'
op|'.'
name|'append'
op|'('
op|'('
name|'host'
op|','
name|'services'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'filtered_hosts'
newline|'\n'
nl|'\n'
DECL|member|weigh_hosts
dedent|''
name|'def'
name|'weigh_hosts'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'request_spec'
op|','
name|'hosts'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Derived classes may override this to provide more sophisticated\n        scheduling objectives\n        """'
newline|'\n'
comment|'# NOTE(sirp): The default logic is the same as the NoopCostFunction'
nl|'\n'
name|'return'
op|'['
name|'dict'
op|'('
name|'weight'
op|'='
number|'1'
op|','
name|'hostname'
op|'='
name|'hostname'
op|','
name|'capabilities'
op|'='
name|'capabilities'
op|')'
nl|'\n'
name|'for'
name|'hostname'
op|','
name|'capabilities'
name|'in'
name|'hosts'
op|']'
newline|'\n'
nl|'\n'
DECL|member|compute_consume
dedent|''
name|'def'
name|'compute_consume'
op|'('
name|'self'
op|','
name|'capabilities'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume compute resources for selected host"""'
newline|'\n'
nl|'\n'
name|'requested_mem'
op|'='
name|'max'
op|'('
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|','
number|'0'
op|')'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'capabilities'
op|'['
string|"'host_memory_free'"
op|']'
op|'-='
name|'requested_mem'
newline|'\n'
nl|'\n'
DECL|member|consume_resources
dedent|''
name|'def'
name|'consume_resources'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'capabilities'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume resources for a specific host.  \'host\' is a tuple\n        of the hostname and the services"""'
newline|'\n'
nl|'\n'
name|'consume_func'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'%s_consume'"
op|'%'
name|'topic'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'consume_func'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'consume_func'
op|'('
name|'capabilities'
op|','
name|'instance_type'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

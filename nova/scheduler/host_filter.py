begin_unit
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nThe Host Filter classes are a way to ensure that only hosts that are\nappropriate are considered when creating a new instance. Hosts that are\neither incompatible or insufficient to accept a newly-requested instance\nare removed by Host Filter classes from consideration. Those that pass\nthe filter are then passed on for weighting or other process for ordering.\n\nThree filters are included: AllHosts, Flavor & JSON. AllHosts just\nreturns the full, unfiltered list of hosts. Flavor is a hard coded\nmatching mechanism based on flavor criteria and JSON is an ad-hoc\nfilter grammar.\n\nWhy JSON? The requests for instances may come in through the\nREST interface from a user or a parent Zone.\nCurrently Flavors and/or InstanceTypes are used for\nspecifing the type of instance desired. Specific Nova users have\nnoted a need for a more expressive way of specifying instances.\nSince we don\'t want to get into building full DSL this is a simple\nform as an example of how this could be done. In reality, most\nconsumers will use the more rigid filters such as FlavorFilter.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'scheduler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.host_filter'"
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_filters
name|'def'
name|'_get_filters'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filters'
newline|'\n'
DECL|function|get_itm
name|'def'
name|'get_itm'
op|'('
name|'nm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'filters'
op|','
name|'nm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'['
name|'get_itm'
op|'('
name|'itm'
op|')'
name|'for'
name|'itm'
name|'in'
name|'dir'
op|'('
name|'filters'
op|')'
nl|'\n'
name|'if'
op|'('
name|'type'
op|'('
name|'get_itm'
op|'('
name|'itm'
op|')'
op|')'
name|'is'
name|'types'
op|'.'
name|'TypeType'
op|')'
nl|'\n'
name|'and'
name|'issubclass'
op|'('
name|'get_itm'
op|'('
name|'itm'
op|')'
op|','
name|'filters'
op|'.'
name|'AbstractHostFilter'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|choose_host_filter
dedent|''
name|'def'
name|'choose_host_filter'
op|'('
name|'filter_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Since the caller may specify which filter to use we need\n    to have an authoritative list of what is permissible. This\n    function checks the filter name against a predefined set\n    of acceptable filters.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'filter_name'
op|':'
newline|'\n'
indent|'        '
name|'filter_name'
op|'='
name|'FLAGS'
op|'.'
name|'default_host_filter'
newline|'\n'
dedent|''
name|'for'
name|'filter_class'
name|'in'
name|'_get_filters'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host_match'
op|'='
string|'"%s.%s"'
op|'%'
op|'('
name|'filter_class'
op|'.'
name|'__module__'
op|','
name|'filter_class'
op|'.'
name|'__name__'
op|')'
newline|'\n'
name|'if'
op|'('
name|'host_match'
op|'.'
name|'startswith'
op|'('
string|'"nova.scheduler.filters"'
op|')'
name|'and'
nl|'\n'
op|'('
name|'host_match'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'=='
name|'filter_name'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'filter_class'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'SchedulerHostFilterNotFound'
op|'('
name|'filter_name'
op|'='
name|'filter_name'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

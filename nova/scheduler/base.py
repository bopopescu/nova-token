begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2010 Openstack, LLC.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nScheduler base class that all Schedulers should inherit from\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'datastore'
name|'import'
name|'Redis'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'node_down_time'"
op|','
nl|'\n'
number|'60'
op|','
nl|'\n'
string|"'seconds without heartbeat that determines a '"
nl|'\n'
string|"'compute node to be down'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Scheduler
name|'class'
name|'Scheduler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    The base class that all Scheduler clases should inherit from\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|compute_nodes
name|'def'
name|'compute_nodes'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a list of compute nodes\n        """'
newline|'\n'
nl|'\n'
name|'return'
op|'['
name|'identifier'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
nl|'\n'
name|'for'
name|'identifier'
name|'in'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
string|'"daemons"'
op|')'
nl|'\n'
name|'if'
op|'('
name|'identifier'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'1'
op|']'
op|'=='
string|'"nova-compute"'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|compute_node_is_up
name|'def'
name|'compute_node_is_up'
op|'('
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Given a node name, return whether the node is considered \'up\' by\n        if it\'s sent a heartbeat recently\n        """'
newline|'\n'
nl|'\n'
name|'time_str'
op|'='
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hget'
op|'('
string|"'%s:%s:%s'"
op|'%'
nl|'\n'
op|'('
string|"'daemon'"
op|','
name|'node'
op|','
string|"'nova-compute'"
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|')'
newline|'\n'
name|'if'
name|'not'
name|'time_str'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Would be a lot easier if we stored heartbeat time in epoch :)'
nl|'\n'
nl|'\n'
comment|"# The 'str()' here is to get rid of a pylint error"
nl|'\n'
dedent|''
name|'time_str'
op|'='
name|'str'
op|'('
name|'time_str'
op|')'
op|'.'
name|'replace'
op|'('
string|"'Z'"
op|','
string|"'UTC'"
op|')'
newline|'\n'
name|'time_split'
op|'='
name|'time'
op|'.'
name|'strptime'
op|'('
name|'time_str'
op|','
string|"'%Y-%m-%dT%H:%M:%S%Z'"
op|')'
newline|'\n'
name|'epoch_time'
op|'='
name|'int'
op|'('
name|'time'
op|'.'
name|'mktime'
op|'('
name|'time_split'
op|')'
op|')'
op|'-'
name|'time'
op|'.'
name|'timezone'
newline|'\n'
name|'return'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'epoch_time'
op|')'
op|'<'
name|'FLAGS'
op|'.'
name|'node_down_time'
newline|'\n'
nl|'\n'
DECL|member|compute_nodes_up
dedent|''
name|'def'
name|'compute_nodes_up'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return the list of compute nodes that are considered \'up\'\n        """'
newline|'\n'
nl|'\n'
name|'return'
op|'['
name|'node'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'compute_nodes'
op|'('
op|')'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'compute_node_is_up'
op|'('
name|'node'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|pick_node
dedent|''
name|'def'
name|'pick_node'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You DEFINITELY want to define this in your subclass"""'
newline|'\n'
nl|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Your subclass should define pick_node"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nThe Zone Aware Scheduler is a base class Scheduler for creating instances\nacross zones. There are two expansion points to this class for:\n1. Assigning Weights to hosts for requested instances\n2. Filtering Hosts based on required instance capabilities\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'operator'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.zone_aware_scheduler'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZoneAwareScheduler
name|'class'
name|'ZoneAwareScheduler'
op|'('
name|'driver'
op|'.'
name|'Scheduler'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for creating Zone Aware Schedulers."""'
newline|'\n'
nl|'\n'
DECL|member|_call_zone_method
name|'def'
name|'_call_zone_method'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'method'
op|','
name|'specs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call novaclient zone method. Broken out for testing."""'
newline|'\n'
name|'return'
name|'api'
op|'.'
name|'call_zone_method'
op|'('
name|'context'
op|','
name|'method'
op|','
name|'specs'
op|'='
name|'specs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|schedule_run_instance
dedent|''
name|'def'
name|'schedule_run_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_id'
op|','
name|'request_spec'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This method is called from nova.compute.api to provision\n        an instance. However we need to look at the parameters being\n        passed in to see if this is a request to:\n        1. Create a Build Plan and then provision, or\n        2. Use the Build Plan information in the request parameters\n           to simply create the instance (either in this zone or\n           a child zone).\n        """'
newline|'\n'
nl|'\n'
comment|"# TODO(sandy): We'll have to look for richer specs at some point."
nl|'\n'
nl|'\n'
name|'if'
string|"'blob'"
name|'in'
name|'request_spec'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'provision_resource'
op|'('
name|'context'
op|','
name|'request_spec'
op|','
name|'instance_id'
op|','
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Create build plan and provision ...'
nl|'\n'
dedent|''
name|'build_plan'
op|'='
name|'self'
op|'.'
name|'select'
op|'('
name|'context'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'build_plan'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'driver'
op|'.'
name|'NoValidHost'
op|'('
name|'_'
op|'('
string|"'No hosts were available'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'build_plan'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'provision_resource'
op|'('
name|'context'
op|','
name|'item'
op|','
name|'instance_id'
op|','
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Returning None short-circuits the routing to Compute (since'
nl|'\n'
comment|"# we've already done it here)"
nl|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|provision_resource
dedent|''
name|'def'
name|'provision_resource'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'item'
op|','
name|'instance_id'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create the requested resource in this Zone or a child zone."""'
newline|'\n'
name|'if'
string|'"hostname"'
name|'in'
name|'item'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'='
name|'item'
op|'['
string|"'hostname'"
op|']'
newline|'\n'
name|'kwargs'
op|'['
string|"'instance_id'"
op|']'
op|'='
name|'instance_id'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
nl|'\n'
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
string|'"compute"'
op|','
name|'host'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"run_instance"'
op|','
nl|'\n'
string|'"args"'
op|':'
name|'kwargs'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Casted to compute %(host)s for run_instance"'
op|')'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# TODO(sandy) Provision in child zone ...'
nl|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_'
op|'('
string|'"Provision to Child Zone not supported (yet)"'
op|')'
op|')'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|select
dedent|''
dedent|''
name|'def'
name|'select'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'request_spec'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Select returns a list of weights and zone/host information\n        corresponding to the best hosts to service the request. Any\n        child zone information has been encrypted so as not to reveal\n        anything about the children.\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_schedule'
op|'('
name|'context'
op|','
string|'"compute"'
op|','
name|'request_spec'
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|"# TODO(sandy): We're only focused on compute instances right now,"
nl|'\n'
comment|'# so we don\'t implement the default "schedule()" method required'
nl|'\n'
comment|'# of Schedulers.'
nl|'\n'
DECL|member|schedule
dedent|''
name|'def'
name|'schedule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'request_spec'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The schedule() contract requires we return the one\n        best-suited host for this request.\n        """'
newline|'\n'
name|'raise'
name|'driver'
op|'.'
name|'NoValidHost'
op|'('
name|'_'
op|'('
string|"'No hosts were available'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_schedule
dedent|''
name|'def'
name|'_schedule'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'request_spec'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a list of hosts that meet the required specs,\n        ordered by their fitness.\n        """'
newline|'\n'
nl|'\n'
name|'if'
name|'topic'
op|'!='
string|'"compute"'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplemented'
op|'('
name|'_'
op|'('
string|'"Zone Aware Scheduler only understands "'
nl|'\n'
string|'"Compute nodes (for now)"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'#TODO(sandy): how to infer this from OS API params?'
nl|'\n'
dedent|''
name|'num_instances'
op|'='
number|'1'
newline|'\n'
nl|'\n'
comment|'# Filter local hosts based on requirements ...'
nl|'\n'
name|'host_list'
op|'='
name|'self'
op|'.'
name|'filter_hosts'
op|'('
name|'num_instances'
op|','
name|'request_spec'
op|')'
newline|'\n'
nl|'\n'
comment|'# then weigh the selected hosts.'
nl|'\n'
comment|'# weighted = [{weight=weight, name=hostname}, ...]'
nl|'\n'
name|'weighted'
op|'='
name|'self'
op|'.'
name|'weigh_hosts'
op|'('
name|'num_instances'
op|','
name|'request_spec'
op|','
name|'host_list'
op|')'
newline|'\n'
nl|'\n'
comment|'# Next, tack on the best weights from the child zones ...'
nl|'\n'
name|'child_results'
op|'='
name|'self'
op|'.'
name|'_call_zone_method'
op|'('
name|'context'
op|','
string|'"select"'
op|','
nl|'\n'
name|'specs'
op|'='
name|'request_spec'
op|')'
newline|'\n'
name|'for'
name|'child_zone'
op|','
name|'result'
name|'in'
name|'child_results'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'weighting'
name|'in'
name|'result'
op|':'
newline|'\n'
comment|'# Remember the child_zone so we can get back to'
nl|'\n'
comment|'# it later if needed. This implicitly builds a zone'
nl|'\n'
comment|'# path structure.'
nl|'\n'
indent|'                '
name|'host_dict'
op|'='
op|'{'
nl|'\n'
string|'"weight"'
op|':'
name|'weighting'
op|'['
string|'"weight"'
op|']'
op|','
nl|'\n'
string|'"child_zone"'
op|':'
name|'child_zone'
op|','
nl|'\n'
string|'"child_blob"'
op|':'
name|'weighting'
op|'['
string|'"blob"'
op|']'
op|'}'
newline|'\n'
name|'weighted'
op|'.'
name|'append'
op|'('
name|'host_dict'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'weighted'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'itemgetter'
op|'('
string|"'weight'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'weighted'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'num'
op|','
name|'request_spec'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Derived classes must override this method and return\n        a list of hosts in [(hostname, capability_dict)] format.\n        """'
newline|'\n'
name|'raise'
name|'NotImplemented'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|weigh_hosts
dedent|''
name|'def'
name|'weigh_hosts'
op|'('
name|'self'
op|','
name|'num'
op|','
name|'request_spec'
op|','
name|'hosts'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Derived classes must override this method and return\n        a lists of hosts in [{weight, hostname}] format.\n        """'
newline|'\n'
name|'raise'
name|'NotImplemented'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nScheduler Service\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'task'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'process'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'datastore'
name|'import'
name|'Redis'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'node_down_time'"
op|','
number|'60'
op|','
nl|'\n'
string|"'seconds without heartbeat that determines a compute node to be down'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|SchedulerService
name|'class'
name|'SchedulerService'
op|'('
name|'service'
op|'.'
name|'Service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Manages the running instances.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SchedulerService'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instdir'
op|'='
name|'model'
op|'.'
name|'InstanceDirectory'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|noop
dedent|''
name|'def'
name|'noop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" simple test of an AMQP message call """'
newline|'\n'
name|'return'
name|'defer'
op|'.'
name|'succeed'
op|'('
string|"'PONG'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|report_state
name|'def'
name|'report_state'
op|'('
name|'self'
op|','
name|'nodename'
op|','
name|'daemon'
op|')'
op|':'
newline|'\n'
comment|'# TODO(termie): make this pattern be more elegant. -todd'
nl|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'record'
op|'='
name|'model'
op|'.'
name|'Daemon'
op|'('
name|'nodename'
op|','
name|'daemon'
op|')'
newline|'\n'
name|'record'
op|'.'
name|'heartbeat'
op|'('
op|')'
newline|'\n'
name|'if'
name|'getattr'
op|'('
name|'self'
op|','
string|'"model_disconnected"'
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'model_disconnected'
op|'='
name|'False'
newline|'\n'
name|'logging'
op|'.'
name|'error'
op|'('
string|'"Recovered model server connection!"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'except'
name|'model'
op|'.'
name|'ConnectionError'
op|','
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'getattr'
op|'('
name|'self'
op|','
string|'"model_disconnected"'
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'model_disconnected'
op|'='
name|'True'
newline|'\n'
name|'logging'
op|'.'
name|'exception'
op|'('
string|'"model server went away"'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'yield'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|compute_nodes
name|'def'
name|'compute_nodes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'identifier'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'0'
op|']'
name|'for'
name|'identifier'
name|'in'
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'smembers'
op|'('
string|'"daemons"'
op|')'
name|'if'
op|'('
name|'identifier'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
op|'['
number|'1'
op|']'
op|'=='
string|'"nova-compute"'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|compute_node_is_up
dedent|''
name|'def'
name|'compute_node_is_up'
op|'('
name|'self'
op|','
name|'node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'time_str'
op|'='
name|'Redis'
op|'.'
name|'instance'
op|'('
op|')'
op|'.'
name|'hget'
op|'('
string|"'%s:%s:%s'"
op|'%'
op|'('
string|"'daemon'"
op|','
name|'node'
op|','
string|"'nova-compute'"
op|')'
op|','
string|"'updated_at'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'time_str'
name|'and'
nl|'\n'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'mktime'
op|'('
name|'time'
op|'.'
name|'strptime'
op|'('
name|'time_str'
op|'.'
name|'replace'
op|'('
string|"'Z'"
op|','
string|"'UTC'"
op|')'
op|','
string|"'%Y-%m-%dT%H:%M:%S%Z'"
op|')'
op|')'
op|')'
op|'-'
name|'time'
op|'.'
name|'timezone'
op|')'
op|'<'
name|'FLAGS'
op|'.'
name|'node_down_time'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_nodes_up
dedent|''
name|'def'
name|'compute_nodes_up'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'node'
name|'for'
name|'node'
name|'in'
name|'self'
op|'.'
name|'compute_nodes'
name|'if'
name|'self'
op|'.'
name|'compute_node_is_up'
op|'('
name|'node'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|pick_node
dedent|''
name|'def'
name|'pick_node'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""You DEFINITELY want to define this in your subclass"""'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
string|'"Your subclass should define pick_node"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
newline|'\n'
DECL|member|run_instance
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'self'
op|'.'
name|'pick_node'
op|'('
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
string|"'%s.%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'node'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"run_instance"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|'"instance_id"'
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'logging'
op|'.'
name|'debug'
op|'('
string|'"Casting to node %s for instance %s"'
op|'%'
nl|'\n'
op|'('
name|'node'
op|','
name|'instance_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|class|RandomService
dedent|''
dedent|''
name|'class'
name|'RandomService'
op|'('
name|'SchedulerService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Implements SchedulerService as a random node selector\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RandomService'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|pick_node
dedent|''
name|'def'
name|'pick_node'
op|'('
name|'self'
op|','
name|'instance_id'
op|','
op|'**'
name|'_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nodes'
op|'='
name|'self'
op|'.'
name|'compute_nodes_up'
op|'('
op|')'
newline|'\n'
name|'return'
name|'nodes'
op|'['
name|'int'
op|'('
name|'random'
op|'.'
name|'random'
op|'('
op|')'
op|'*'
name|'len'
op|'('
name|'nodes'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

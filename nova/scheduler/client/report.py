begin_unit
comment|'# Copyright (c) 2014 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_LI'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SchedulerReportClient
name|'class'
name|'SchedulerReportClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Client class for updating the scheduler."""'
newline|'\n'
nl|'\n'
DECL|member|update_resource_stats
name|'def'
name|'update_resource_stats'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'name'
op|','
name|'stats'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates or updates stats for the desired service.\n\n        :param context: local context\n        :param name: name of resource to update\n        :type name: immutable (str or tuple)\n        :param stats: updated stats to send to scheduler\n        :type stats: dict\n        """'
newline|'\n'
nl|'\n'
name|'if'
string|"'id'"
name|'in'
name|'stats'
op|':'
newline|'\n'
indent|'            '
name|'compute_node_id'
op|'='
name|'stats'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'updates'
op|'='
name|'stats'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'del'
name|'updates'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ComputeHostNotCreated'
op|'('
name|'name'
op|'='
name|'str'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
string|"'stats'"
name|'in'
name|'updates'
op|':'
newline|'\n'
comment|'# NOTE(danms): This is currently pre-serialized for us,'
nl|'\n'
comment|"# which we don't want if we're using the object. So,"
nl|'\n'
comment|'# fix it here, and follow up with removing this when the'
nl|'\n'
comment|'# RT is converted to proper objects.'
nl|'\n'
indent|'            '
name|'updates'
op|'['
string|"'stats'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'updates'
op|'['
string|"'stats'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'compute_node'
op|'='
name|'objects'
op|'.'
name|'ComputeNode'
op|'('
name|'context'
op|'='
name|'context'
op|','
nl|'\n'
name|'id'
op|'='
name|'compute_node_id'
op|')'
newline|'\n'
name|'compute_node'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'updates'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'=='
string|"'pci_device_pools'"
op|':'
newline|'\n'
comment|'# NOTE(danms): Since the updates are actually the result of'
nl|'\n'
comment|'# a obj_to_primitive() on some real objects, we need to convert'
nl|'\n'
comment|'# back to a real object (not from_dict() or _from_db_object(),'
nl|'\n'
comment|'# which expect a db-formatted object) but just an attr-based'
nl|'\n'
comment|'# reconstruction. When we start getting a ComputeNode from'
nl|'\n'
comment|'# scheduler this "bandage" can go away.'
nl|'\n'
indent|'                '
name|'if'
name|'v'
op|':'
newline|'\n'
indent|'                    '
name|'devpools'
op|'='
op|'['
name|'objects'
op|'.'
name|'PciDevicePool'
op|'.'
name|'from_dict'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'v'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'devpools'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'compute_node'
op|'.'
name|'pci_device_pools'
op|'='
name|'objects'
op|'.'
name|'PciDevicePoolList'
op|'('
nl|'\n'
name|'objects'
op|'='
name|'devpools'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'compute_node'
op|','
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'compute_node'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Compute_service record updated for '"
nl|'\n'
string|"'%s'"
op|')'
op|'%'
name|'str'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

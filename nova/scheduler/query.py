begin_unit
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nQuery is a plug-in mechanism for requesting instance resources.\nThree plug-ins are included: AllHosts, Flavor & JSON. AllHosts just\nreturns the full, unfiltered list of hosts. Flavor is a hard coded\nmatching mechanism based on flavor criteria and JSON is an ad-hoc\nquery grammar.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.scheduler.query'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'default_query_engine'"
op|','
nl|'\n'
string|"'nova.scheduler.query.AllHostsQuery'"
op|','
nl|'\n'
string|"'Which query engine to use for filtering hosts.'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Query
name|'class'
name|'Query'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for query plug-ins."""'
newline|'\n'
nl|'\n'
DECL|member|instance_type_to_query
name|'def'
name|'instance_type_to_query'
op|'('
name|'self'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert instance_type into a query for most common use-case."""'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BadSchedulerQueryDriver'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'zone_manager'
op|','
name|'query'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of hosts that fulfill the query."""'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'BadSchedulerQueryDriver'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AllHostsQuery
dedent|''
dedent|''
name|'class'
name|'AllHostsQuery'
op|':'
newline|'\n'
indent|'    '
string|'"""NOP query plug-in. Returns all hosts in ZoneManager.\n    This essentially does what the old Scheduler+Chance used\n    to give us."""'
newline|'\n'
nl|'\n'
DECL|member|instance_type_to_query
name|'def'
name|'instance_type_to_query'
op|'('
name|'self'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return anything to prevent base-class from raising\n        exception."""'
newline|'\n'
name|'return'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'zone_manager'
op|','
name|'query'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of hosts from ZoneManager list."""'
newline|'\n'
name|'hosts'
op|'='
name|'zone_manager'
op|'.'
name|'service_states'
op|'.'
name|'get'
op|'('
string|"'compute'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'['
op|'('
name|'host'
op|','
name|'capabilities'
op|')'
nl|'\n'
name|'for'
name|'host'
op|','
name|'capabilities'
name|'in'
name|'hosts'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlavorQuery
dedent|''
dedent|''
name|'class'
name|'FlavorQuery'
op|':'
newline|'\n'
indent|'    '
string|'"""Query plug-in hard-coded to work with flavors."""'
newline|'\n'
nl|'\n'
DECL|member|instance_type_to_query
name|'def'
name|'instance_type_to_query'
op|'('
name|'self'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Use instance_type to filter hosts."""'
newline|'\n'
name|'return'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'zone_manager'
op|','
name|'query'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of hosts that can create instance_type."""'
newline|'\n'
name|'hosts'
op|'='
name|'zone_manager'
op|'.'
name|'service_states'
op|'.'
name|'get'
op|'('
string|"'compute'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'selected_hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'query_type'
op|','
name|'instance_type'
op|'='
name|'query'
newline|'\n'
name|'for'
name|'host'
op|','
name|'capabilities'
name|'in'
name|'hosts'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_ram_mb'
op|'='
name|'capabilities'
op|'['
string|"'host_memory'"
op|']'
op|'['
string|"'free'"
op|']'
newline|'\n'
name|'disk_bytes'
op|'='
name|'capabilities'
op|'['
string|"'disk'"
op|']'
op|'['
string|"'available'"
op|']'
newline|'\n'
name|'if'
name|'host_ram_mb'
op|'>='
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
name|'and'
name|'disk_bytes'
op|'>='
name|'instance_type'
op|'['
string|"'local_gb'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'selected_hosts'
op|'.'
name|'append'
op|'('
op|'('
name|'host'
op|','
name|'capabilities'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'selected_hosts'
newline|'\n'
nl|'\n'
comment|'#host entries (currently) are like:'
nl|'\n'
comment|"#    {'host_name-description': 'Default install of XenServer',"
nl|'\n'
comment|"#    'host_hostname': 'xs-mini',"
nl|'\n'
comment|"#    'host_memory': {'total': 8244539392,"
nl|'\n'
comment|"#        'overhead': 184225792,"
nl|'\n'
comment|"#        'free': 3868327936,"
nl|'\n'
comment|"#        'free-computed': 3840843776},"
nl|'\n'
comment|"#    'host_other-config': {},"
nl|'\n'
comment|"#    'host_ip_address': '192.168.1.109',"
nl|'\n'
comment|"#    'host_cpu_info': {},"
nl|'\n'
comment|"#    'disk': {'available': 32954957824,"
nl|'\n'
comment|"#        'total': 50394562560,"
nl|'\n'
comment|"#        'used': 17439604736},"
nl|'\n'
comment|"#    'host_uuid': 'cedb9b39-9388-41df-8891-c5c9a0c0fe5f',"
nl|'\n'
comment|"#    'host_name-label': 'xs-mini'}"
nl|'\n'
nl|'\n'
comment|'# instance_type table has:'
nl|'\n'
comment|'#name = Column(String(255), unique=True)'
nl|'\n'
comment|'#memory_mb = Column(Integer)'
nl|'\n'
comment|'#vcpus = Column(Integer)'
nl|'\n'
comment|'#local_gb = Column(Integer)'
nl|'\n'
comment|'#flavorid = Column(Integer, unique=True)'
nl|'\n'
comment|'#swap = Column(Integer, nullable=False, default=0)'
nl|'\n'
comment|'#rxtx_quota = Column(Integer, nullable=False, default=0)'
nl|'\n'
comment|'#rxtx_cap = Column(Integer, nullable=False, default=0)'
nl|'\n'
nl|'\n'
DECL|class|JsonQuery
dedent|''
dedent|''
name|'class'
name|'JsonQuery'
op|':'
newline|'\n'
indent|'    '
string|'"""Query plug-in to allow simple JSON-based grammar for selecting hosts."""'
newline|'\n'
nl|'\n'
DECL|member|_equals
name|'def'
name|'_equals'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_less_than
dedent|''
name|'def'
name|'_less_than'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_greater_than
dedent|''
name|'def'
name|'_greater_than'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_in
dedent|''
name|'def'
name|'_in'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_less_than_equal
dedent|''
name|'def'
name|'_less_than_equal'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_greater_than_equal
dedent|''
name|'def'
name|'_greater_than_equal'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_not
dedent|''
name|'def'
name|'_not'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_must
dedent|''
name|'def'
name|'_must'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_or
dedent|''
name|'def'
name|'_or'
op|'('
name|'self'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|variable|commands
dedent|''
name|'commands'
op|'='
op|'{'
nl|'\n'
string|"'='"
op|':'
name|'_equals'
op|','
nl|'\n'
string|"'<'"
op|':'
name|'_less_than'
op|','
nl|'\n'
string|"'>'"
op|':'
name|'_greater_than'
op|','
nl|'\n'
string|"'in'"
op|':'
name|'_in'
op|','
nl|'\n'
string|"'<='"
op|':'
name|'_less_than_equal'
op|','
nl|'\n'
string|"'>='"
op|':'
name|'_greater_than_equal'
op|','
nl|'\n'
string|"'not'"
op|':'
name|'_not'
op|','
nl|'\n'
string|"'must'"
op|':'
name|'_must'
op|','
nl|'\n'
string|"'or'"
op|':'
name|'_or'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|instance_type_to_query
name|'def'
name|'instance_type_to_query'
op|'('
name|'self'
op|','
name|'instance_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert instance_type into JSON query object."""'
newline|'\n'
name|'return'
op|'('
name|'str'
op|'('
name|'self'
op|'.'
name|'__class__'
op|')'
op|','
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|filter_hosts
dedent|''
name|'def'
name|'filter_hosts'
op|'('
name|'self'
op|','
name|'zone_manager'
op|','
name|'query'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a list of hosts that can fulfill query."""'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Since the caller may specify which driver to use we need'
nl|'\n'
comment|'# to have an authoritative list of what is permissible. '
nl|'\n'
DECL|variable|DRIVERS
dedent|''
dedent|''
name|'DRIVERS'
op|'='
op|'['
name|'AllHostsQuery'
op|','
name|'FlavorQuery'
op|','
name|'JsonQuery'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|choose_driver
name|'def'
name|'choose_driver'
op|'('
name|'driver_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'driver_name'
op|':'
newline|'\n'
indent|'        '
name|'driver_name'
op|'='
name|'FLAGS'
op|'.'
name|'default_query_engine'
newline|'\n'
dedent|''
name|'for'
name|'driver'
name|'in'
name|'DRIVERS'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'str'
op|'('
name|'driver'
op|')'
op|'=='
name|'driver_name'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'driver'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'SchedulerQueryDriverNotFound'
op|'('
name|'driver_name'
op|'='
name|'driver_name'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

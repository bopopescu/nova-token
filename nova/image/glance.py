begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Implementation of an image service that uses Glance as the backend"""'
newline|'\n'
nl|'\n'
name|'import'
name|'httplib'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'service'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.image.glance'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'glance_teller_address'"
op|','
string|"'http://127.0.0.1'"
op|','
nl|'\n'
string|"'IP address or URL where Glance\\'s Teller service resides'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'glance_teller_port'"
op|','
string|"'9191'"
op|','
nl|'\n'
string|"'Port for Glance\\'s Teller service'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'glance_parallax_address'"
op|','
string|"'http://127.0.0.1'"
op|','
nl|'\n'
string|"'IP address or URL where Glance\\'s Parallax service '"
nl|'\n'
string|"'resides'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'glance_parallax_port'"
op|','
string|"'9292'"
op|','
nl|'\n'
string|"'Port for Glance\\'s Parallax service'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TellerClient
name|'class'
name|'TellerClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'glance_teller_address'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'glance_teller_port'
newline|'\n'
name|'url'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'netloc'
op|'='
name|'url'
op|'.'
name|'netloc'
newline|'\n'
name|'self'
op|'.'
name|'connection_type'
op|'='
op|'{'
string|"'http'"
op|':'
name|'httplib'
op|'.'
name|'HTTPConnection'
op|','
nl|'\n'
string|"'https'"
op|':'
name|'httplib'
op|'.'
name|'HTTPSConnection'
op|'}'
op|'['
name|'url'
op|'.'
name|'scheme'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ParallaxClient
dedent|''
dedent|''
name|'class'
name|'ParallaxClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'address'
op|'='
name|'FLAGS'
op|'.'
name|'glance_parallax_address'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'glance_parallax_port'
newline|'\n'
name|'url'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'netloc'
op|'='
name|'url'
op|'.'
name|'netloc'
newline|'\n'
name|'self'
op|'.'
name|'connection_type'
op|'='
op|'{'
string|"'http'"
op|':'
name|'httplib'
op|'.'
name|'HTTPConnection'
op|','
nl|'\n'
string|"'https'"
op|':'
name|'httplib'
op|'.'
name|'HTTPSConnection'
op|'}'
op|'['
name|'url'
op|'.'
name|'scheme'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_image_index
dedent|''
name|'def'
name|'get_image_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of image id/name mappings from Parallax\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"GET"'
op|','
string|'"images"'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
op|':'
newline|'\n'
comment|'# Parallax returns a JSONified dict(images=image_list)'
nl|'\n'
indent|'                '
name|'data'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'res'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|'['
string|"'images'"
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Parallax returned HTTP error %d from "'
nl|'\n'
string|'"request for /images"'
op|')'
op|','
name|'res'
op|'.'
name|'status_int'
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_image_details
dedent|''
dedent|''
name|'def'
name|'get_image_details'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a list of detailed image data mappings from Parallax\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"GET"'
op|','
string|'"/images/detail"'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
op|':'
newline|'\n'
comment|'# Parallax returns a JSONified dict(images=image_list)'
nl|'\n'
indent|'                '
name|'data'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'res'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|'['
string|"'images'"
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"Parallax returned HTTP error %d from "'
nl|'\n'
string|'"request for /images/detail"'
op|')'
op|','
name|'res'
op|'.'
name|'status_int'
op|')'
newline|'\n'
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_image_metadata
dedent|''
dedent|''
name|'def'
name|'get_image_metadata'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a mapping of image metadata from Parallax\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"HEAD"'
op|','
string|'"/images/%s"'
op|'%'
name|'image_id'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
op|':'
newline|'\n'
comment|'# TODO(ewanmellor): Temporary hack!  We should be parsing'
nl|'\n'
comment|'# the response from Glance properly.'
nl|'\n'
indent|'                '
name|'return'
op|'{'
string|"'url'"
op|':'
string|"'/images/%s'"
op|'%'
name|'image_id'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# TODO(jaypipes): log the error?'
nl|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_image_metadata
dedent|''
dedent|''
name|'def'
name|'add_image_metadata'
op|'('
name|'self'
op|','
name|'image_metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Tells parallax about an image\'s metadata\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'body'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'image_metadata'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"POST"'
op|','
string|'"images"'
op|','
name|'body'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'if'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
op|':'
newline|'\n'
comment|'# Parallax returns a JSONified dict(image=image_info)'
nl|'\n'
indent|'                '
name|'data'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'res'
op|'.'
name|'read'
op|'('
op|')'
op|')'
op|'['
string|"'image'"
op|']'
newline|'\n'
name|'return'
name|'data'
op|'['
string|"'id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# TODO(jaypipes): log the error?'
nl|'\n'
indent|'                '
name|'return'
name|'None'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_image_metadata
dedent|''
dedent|''
name|'def'
name|'update_image_metadata'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'image_metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Updates Parallax\'s information about an image\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'body'
op|'='
name|'json'
op|'.'
name|'dumps'
op|'('
name|'image_metadata'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"PUT"'
op|','
string|'"/images/%s"'
op|'%'
name|'image_id'
op|','
name|'body'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_image_metadata
dedent|''
dedent|''
name|'def'
name|'delete_image_metadata'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Deletes Parallax\'s information about an image\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'='
name|'self'
op|'.'
name|'connection_type'
op|'('
name|'self'
op|'.'
name|'netloc'
op|','
name|'self'
op|'.'
name|'port'
op|')'
newline|'\n'
name|'c'
op|'.'
name|'request'
op|'('
string|'"DELETE"'
op|','
string|'"/images/%s"'
op|'%'
name|'image_id'
op|')'
newline|'\n'
name|'res'
op|'='
name|'c'
op|'.'
name|'getresponse'
op|'('
op|')'
newline|'\n'
name|'return'
name|'res'
op|'.'
name|'status'
op|'=='
number|'200'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'c'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GlanceImageService
dedent|''
dedent|''
dedent|''
name|'class'
name|'GlanceImageService'
op|'('
name|'service'
op|'.'
name|'BaseImageService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides storage and retrieval of disk image objects within Glance."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'teller'
op|'='
name|'TellerClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'parallax'
op|'='
name|'ParallaxClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calls out to Parallax for a list of images available\n        """'
newline|'\n'
name|'images'
op|'='
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'get_image_index'
op|'('
op|')'
newline|'\n'
name|'return'
name|'images'
newline|'\n'
nl|'\n'
DECL|member|detail
dedent|''
name|'def'
name|'detail'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Calls out to Parallax for a list of detailed image information\n        """'
newline|'\n'
name|'images'
op|'='
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'get_image_details'
op|'('
op|')'
newline|'\n'
name|'return'
name|'images'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a dict containing image data for the given opaque image id.\n        """'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'get_image_metadata'
op|'('
name|'id'
op|')'
newline|'\n'
name|'if'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'image'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the image data and return the new image id.\n\n        :raises AlreadyExists if the image already exist.\n\n        """'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'add_image_metadata'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Replace the contents of the given image with the new data.\n\n        :raises NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'update_image_metadata'
op|'('
name|'image_id'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete the given image.\n\n        :raises NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'self'
op|'.'
name|'parallax'
op|'.'
name|'delete_image_metadata'
op|'('
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete_all
dedent|''
name|'def'
name|'delete_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Clears out all images\n        """'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

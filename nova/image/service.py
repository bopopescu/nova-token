begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseImageService
name|'class'
name|'BaseImageService'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for providing image search and retrieval services.\n\n    ImageService exposes two concepts of metadata:\n\n        1. First-class attributes: This is metadata that is common to all\n           ImageService subclasses and is shared across all hypervisors. These\n           attributes are defined by IMAGE_ATTRS.\n\n        2. Properties: This is metdata that is specific to an ImageService,\n           and Image, or a particular hypervisor. Any attribute not present in\n           BASE_IMAGE_ATTRS should be considered an image property.\n\n    This means that ImageServices will return BASE_IMAGE_ATTRS as keys in the\n    metadata dict, all other attributes will be returned as keys in the nested\n    \'properties\' dict.\n\n    """'
newline|'\n'
nl|'\n'
DECL|variable|BASE_IMAGE_ATTRS
name|'BASE_IMAGE_ATTRS'
op|'='
op|'['
string|"'id'"
op|','
string|"'name'"
op|','
string|"'created_at'"
op|','
string|"'updated_at'"
op|','
nl|'\n'
string|"'deleted_at'"
op|','
string|"'deleted'"
op|','
string|"'status'"
op|','
string|"'is_public'"
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): ImageService subclasses may override this to aid translation'
nl|'\n'
comment|'# between BaseImageService attributes and additional metadata stored by'
nl|'\n'
comment|'# the ImageService subclass'
nl|'\n'
DECL|variable|SERVICE_IMAGE_ATTRS
name|'SERVICE_IMAGE_ATTRS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|index
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""List images.\n\n        :returns: a sequence of mappings with the following signature\n                  {\'id\': opaque id of image, \'name\': name of image}\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|detail
dedent|''
name|'def'
name|'detail'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detailed information about an images.\n\n        :returns: a sequence of mappings with the following signature\n                    {\'id\': opaque id of image,\n                     \'name\': name of image,\n                     \'created_at\': creation datetime object,\n                     \'updated_at\': modification datetime object,\n                     \'deleted_at\': deletion datetime object or None,\n                     \'deleted\': boolean indicating if image has been deleted,\n                     \'status\': string description of image status,\n                     \'is_public\': boolean indicating if image is public\n                     }\n\n        If the service does not implement a method that provides a detailed\n        set of information about images, then the method should raise\n        NotImplementedError, in which case Nova will emulate this method\n        with repeated calls to show() for each image received from the\n        index() method.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detailed information about an image.\n\n        :returns: a mapping with the following signature:\n            {\'id\': opaque id of image,\n             \'name\': name of image,\n             \'created_at\': creation datetime object,\n             \'updated_at\': modification datetime object,\n             \'deleted_at\': deletion datetime object or None,\n             \'deleted\': boolean indicating if image has been deleted,\n             \'status\': string description of image status,\n             \'is_public\': boolean indicating if image is public\n             }, ...\n\n        :raises: NotFound if the image does not exist\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get an image.\n\n        :param data: a file-like object to hold binary image data\n        :returns: a dict containing image metadata, writes image data to data.\n        :raises: NotFound if the image does not exist\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'metadata'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Store the image metadata and data.\n\n        :returns: the new image metadata.\n        :raises: AlreadyExists if the image already exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'metadata'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the given image metadata and data and return the metadata.\n\n        :raises: NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the given image.\n\n        :raises: NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_is_image_available
name|'def'
name|'_is_image_available'
op|'('
name|'context'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check image availability.\n\n        Images are always available if they are public or if the user is an\n        admin.\n\n        Otherwise, we filter by project_id (if present) and then fall-back to\n        images owned by user.\n\n        """'
newline|'\n'
comment|'# FIXME(sirp): We should be filtering by user_id on the Glance side'
nl|'\n'
comment|"# for security; however, we can't do that until we get authn/authz"
nl|'\n'
comment|'# sorted out. Until then, filtering in Nova.'
nl|'\n'
name|'if'
name|'image_meta'
op|'['
string|"'is_public'"
op|']'
name|'or'
name|'context'
op|'.'
name|'is_admin'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'properties'
op|'='
name|'image_meta'
op|'['
string|"'properties'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'context'
op|'.'
name|'project_id'
name|'and'
op|'('
string|"'project_id'"
name|'in'
name|'properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'str'
op|'('
name|'properties'
op|'['
string|"'project_id'"
op|']'
op|')'
op|'=='
name|'str'
op|'('
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'user_id'
op|'='
name|'properties'
op|'['
string|"'user_id'"
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'str'
op|'('
name|'user_id'
op|')'
op|'=='
name|'str'
op|'('
name|'context'
op|'.'
name|'user_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_translate_to_base
name|'def'
name|'_translate_to_base'
op|'('
name|'cls'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a metadata dictionary that is BaseImageService compliant.\n\n        This is used by subclasses to expose only a metadata dictionary that\n        is the same across ImageService implementations.\n\n        """'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_propertify_metadata'
op|'('
name|'metadata'
op|','
name|'cls'
op|'.'
name|'BASE_IMAGE_ATTRS'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|_translate_to_service
name|'def'
name|'_translate_to_service'
op|'('
name|'cls'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a metadata dict that is usable by the ImageService subclass.\n\n        As an example, Glance has additional attributes (like \'location\'); the\n        BaseImageService considers these properties, but we need to translate\n        these back to first-class attrs for sending to Glance. This method\n        handles this by allowing you to specify the attributes an ImageService\n        considers first-class.\n\n        """'
newline|'\n'
name|'if'
name|'not'
name|'cls'
op|'.'
name|'SERVICE_IMAGE_ATTRS'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
name|'_'
op|'('
string|"'Cannot use this without specifying '"
nl|'\n'
string|"'SERVICE_IMAGE_ATTRS for subclass'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'.'
name|'_propertify_metadata'
op|'('
name|'metadata'
op|','
name|'cls'
op|'.'
name|'SERVICE_IMAGE_ATTRS'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_propertify_metadata
name|'def'
name|'_propertify_metadata'
op|'('
name|'metadata'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Move unknown keys to a nested \'properties\' dict.\n\n        :returns: a new dict with the keys moved.\n\n        """'
newline|'\n'
name|'flattened'
op|'='
name|'utils'
op|'.'
name|'flatten_dict'
op|'('
name|'metadata'
op|')'
newline|'\n'
name|'attributes'
op|','
name|'properties'
op|'='
name|'utils'
op|'.'
name|'partition_dict'
op|'('
name|'flattened'
op|','
name|'keys'
op|')'
newline|'\n'
name|'attributes'
op|'['
string|"'properties'"
op|']'
op|'='
name|'properties'
newline|'\n'
name|'return'
name|'attributes'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

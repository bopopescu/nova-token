begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'cPickle'
name|'as'
name|'pickle'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
nl|'\n'
DECL|class|ImageService
name|'class'
name|'ImageService'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides storage and retrieval of disk image objects."""'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|load
name|'def'
name|'load'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Factory method to return image service."""'
newline|'\n'
comment|'#TODO(gundlach): read from config.'
nl|'\n'
name|'class_'
op|'='
name|'LocalImageService'
newline|'\n'
name|'return'
name|'class_'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Return a dict from opaque image id to image data.\n        """'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a dict containing image data for the given opaque image id.\n\n        Returns None if the id does not exist.\n        """'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GlanceImageService
dedent|''
dedent|''
name|'class'
name|'GlanceImageService'
op|'('
name|'ImageService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides storage and retrieval of disk image objects within Glance."""'
newline|'\n'
comment|'# TODO(gundlach): once Glance has an API, build this.'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LocalImageService
dedent|''
name|'class'
name|'LocalImageService'
op|'('
name|'ImageService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Image service storing images to local disk."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_path'
op|'='
string|'"/tmp/nova/images"'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'self'
op|'.'
name|'_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|':'
comment|'# exists'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_path_to
dedent|''
dedent|''
name|'def'
name|'_path_to'
op|'('
name|'self'
op|','
name|'image_id'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'_path'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ids
dedent|''
name|'def'
name|'_ids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The list of all image ids."""'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'listdir'
op|'('
name|'self'
op|'.'
name|'_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'show'
op|'('
name|'id'
op|')'
name|'for'
name|'id'
name|'in'
name|'self'
op|'.'
name|'_ids'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'pickle'
op|'.'
name|'load'
op|'('
name|'open'
op|'('
name|'self'
op|'.'
name|'_path_to'
op|'('
name|'id'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the image data and return the new image id.\n        """'
newline|'\n'
name|'id'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
name|'string'
op|'.'
name|'letters'
op|')'
name|'for'
name|'_'
name|'in'
name|'range'
op|'('
number|'20'
op|')'
op|')'
newline|'\n'
name|'data'
op|'['
string|"'id'"
op|']'
op|'='
name|'id'
newline|'\n'
name|'self'
op|'.'
name|'update'
op|'('
name|'id'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'id'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'image_id'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Replace the contents of the given image with the new data."""'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
name|'data'
op|','
name|'open'
op|'('
name|'self'
op|'.'
name|'_path_to'
op|'('
name|'image_id'
op|')'
op|','
string|"'w'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete the given image.  Raises OSError if the image does not exist.\n        """'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'_path_to'
op|'('
name|'image_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# TODO(gundlach): before this can be loaded dynamically in ImageService.load(),'
nl|'\n'
comment|"# we'll have to make __init__() not require a context.  Right now it"
nl|'\n'
comment|"# is only used by the AWS API, which hard-codes it, so that's OK."
nl|'\n'
DECL|class|S3ImageService
dedent|''
dedent|''
name|'class'
name|'S3ImageService'
op|'('
name|'ImageService'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Service that stores images in an S3 provider."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
nl|'\n'
DECL|member|index
dedent|''
name|'def'
name|'index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'('
op|')'
op|'.'
name|'make_request'
op|'('
nl|'\n'
name|'method'
op|'='
string|"'GET'"
op|','
nl|'\n'
name|'bucket'
op|'='
string|"'_images'"
op|')'
newline|'\n'
name|'items'
op|'='
name|'json'
op|'.'
name|'loads'
op|'('
name|'response'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
op|'('
name|'item'
op|'['
string|"'imageId'"
op|']'
op|','
name|'item'
op|')'
name|'for'
name|'item'
name|'in'
name|'items'
op|')'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'self'
op|'.'
name|'_conn'
op|'('
op|')'
op|'.'
name|'make_request'
op|'('
nl|'\n'
name|'method'
op|'='
string|"'GET'"
op|','
nl|'\n'
name|'bucket'
op|'='
string|"'_images'"
op|','
nl|'\n'
name|'query_args'
op|'='
name|'qs'
op|'('
op|'{'
string|"'image_id'"
op|':'
name|'image_id'
op|'}'
op|')'
op|')'
newline|'\n'
name|'return'
name|'json'
op|'.'
name|'loads'
op|'('
name|'response'
op|'.'
name|'read'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_conn'
op|'('
op|')'
op|'.'
name|'make_request'
op|'('
nl|'\n'
name|'method'
op|'='
string|"'DELETE'"
op|','
nl|'\n'
name|'bucket'
op|'='
string|"'_images'"
op|','
nl|'\n'
name|'query_args'
op|'='
name|'qs'
op|'('
op|'{'
string|"'image_id'"
op|':'
name|'image_id'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_conn
dedent|''
name|'def'
name|'_conn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a boto S3Connection to the S3 store."""'
newline|'\n'
name|'access'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
op|'.'
name|'get_access_key'
op|'('
name|'self'
op|'.'
name|'_context'
op|'.'
name|'user'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_context'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'secret'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'_context'
op|'.'
name|'user'
op|'.'
name|'secret'
op|')'
newline|'\n'
name|'calling'
op|'='
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'connection'
op|'.'
name|'OrdinaryCallingFormat'
op|'('
op|')'
newline|'\n'
name|'return'
name|'boto'
op|'.'
name|'s3'
op|'.'
name|'connection'
op|'.'
name|'S3Connection'
op|'('
name|'aws_access_key_id'
op|'='
name|'access'
op|','
nl|'\n'
name|'aws_secret_access_key'
op|'='
name|'secret'
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'False'
op|','
nl|'\n'
name|'calling_format'
op|'='
name|'calling'
op|','
nl|'\n'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'s3_port'
op|','
nl|'\n'
name|'host'
op|'='
name|'FLAGS'
op|'.'
name|'s3_host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|qs
dedent|''
dedent|''
name|'def'
name|'qs'
op|'('
name|'params'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pairs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'params'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pairs'
op|'.'
name|'append'
op|'('
name|'key'
op|'+'
string|"'='"
op|'+'
name|'urllib'
op|'.'
name|'quote'
op|'('
name|'params'
op|'['
name|'key'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'&'"
op|'.'
name|'join'
op|'('
name|'pairs'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

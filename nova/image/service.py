begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseImageService
name|'class'
name|'BaseImageService'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Base class for providing image search and retrieval services"""'
newline|'\n'
nl|'\n'
DECL|member|index
name|'def'
name|'index'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a sequence of mappings of id and name information about\n        images.\n\n        :rtype: array\n        :retval: a sequence of mappings with the following signature\n                    {\'id\': opaque id of image, \'name\': name of image}\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|detail
dedent|''
name|'def'
name|'detail'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a sequence of mappings of detailed information about images.\n\n        :rtype: array\n        :retval: a sequence of mappings with the following signature\n                    {\'id\': opaque id of image,\n                     \'name\': name of image,\n                     \'created_at\': creation datetime object,\n                     \'updated_at\': modification datetime object,\n                     \'deleted_at\': deletion datetime object or None,\n                     \'deleted\': boolean indicating if image has been deleted,\n                     \'status\': string description of image status,\n                     \'is_public\': boolean indicating if image is public\n                     }\n\n        If the service does not implement a method that provides a detailed\n        set of information about images, then the method should raise\n        NotImplementedError, in which case Nova will emulate this method\n        with repeated calls to show() for each image received from the\n        index() method.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|show
dedent|''
name|'def'
name|'show'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a dict containing image metadata for the given opaque image id.\n\n        :retval a mapping with the following signature:\n\n            {\'id\': opaque id of image,\n             \'name\': name of image,\n             \'created_at\': creation datetime object,\n             \'updated_at\': modification datetime object,\n             \'deleted_at\': deletion datetime object or None,\n             \'deleted\': boolean indicating if image has been deleted,\n             \'status\': string description of image status,\n             \'is_public\': boolean indicating if image is public\n             }, ...\n\n        :raises NotFound if the image does not exist\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Returns a dict containing image metadata and writes image data to data.\n\n        :param data: a file-like object to hold binary image data\n\n        :raises NotFound if the image does not exist\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'metadata'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Store the image metadata and data and return the new image id.\n\n        :raises AlreadyExists if the image already exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|','
name|'metadata'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the given image with the new metadata and data.\n\n        :raises NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Delete the given image.\n\n        :raises NotFound if the image does not exist.\n\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

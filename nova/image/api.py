begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nMain abstraction layer for retrieving and storing information about disk\nimages used by the compute layer.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|API
name|'class'
name|'API'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Responsible for exposing a relatively stable internal API for other\n    modules in Nova to retrieve information about disk images. This API\n    attempts to match the nova.volume.api and nova.network.api calling\n    interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|_get_session_and_image_id
name|'def'
name|'_get_session_and_image_id'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id_or_uri'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a tuple of (session, image_id). If the supplied `id_or_uri`\n        is an image ID, then the default client session will be returned\n        for the context\'s user, along with the image ID. If the supplied\n        `id_or_uri` parameter is a URI, then a client session connecting to\n        the URI\'s image service endpoint will be returned along with a\n        parsed image ID from that URI.\n\n        :param context: The `nova.context.Context` object for the request\n        :param id_or_uri: A UUID identifier or an image URI to look up image\n                          information for.\n        """'
newline|'\n'
name|'return'
name|'glance'
op|'.'
name|'get_remote_image_service'
op|'('
name|'context'
op|','
name|'id_or_uri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_session
dedent|''
name|'def'
name|'_get_session'
op|'('
name|'self'
op|','
name|'_context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a client session that can be used to query for image\n        information.\n\n        :param context: The `nova.context.Context` object for the request\n        """'
newline|'\n'
comment|'#TODO(jaypipes): Refactor glance.get_remote_image_service and'
nl|'\n'
comment|'#                glance.get_default_image_service into a single'
nl|'\n'
comment|'#                method that takes a context and actually respects'
nl|'\n'
comment|'#                it, returning a real session object that keeps'
nl|'\n'
comment|'#                the context alive...'
nl|'\n'
name|'return'
name|'glance'
op|'.'
name|'get_default_image_service'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_all
dedent|''
name|'def'
name|'get_all'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves all information records about all disk images available\n        to show to the requesting user. If the requesting user is an admin,\n        all images in an ACTIVE status are returned. If the requesting user\n        is not an admin, the all public images and all private images that\n        are owned by the requesting user in the ACTIVE status are returned.\n\n        :param context: The `nova.context.Context` object for the request\n        :param **kwargs: A dictionary of filter and pagination values that\n                         may be passed to the underlying image info driver.\n        """'
newline|'\n'
name|'session'
op|'='
name|'self'
op|'.'
name|'_get_session'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'detail'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id_or_uri'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Retrieves the information record for a single disk image. If the\n        supplied identifier parameter is a UUID, the default driver will\n        be used to return information about the image. If the supplied\n        identifier is a URI, then the driver that matches that URI endpoint\n        will be used to query for image information.\n\n        :param context: The `nova.context.Context` object for the request\n        :param id_or_uri: A UUID identifier or an image URI to look up image\n                          information for.\n        """'
newline|'\n'
name|'session'
op|','
name|'image_id'
op|'='
name|'self'
op|'.'
name|'_get_session_and_image_id'
op|'('
name|'context'
op|','
name|'id_or_uri'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create
dedent|''
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'image_info'
op|','
name|'data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Creates a new image record, optionally passing the image bits to\n        backend storage.\n\n        :param context: The `nova.context.Context` object for the request\n        :param image_info: A dict of information about the image that is\n                           passed to the image registry.\n        :param data: Optional file handle or bytestream iterator that is\n                     passed to backend storage.\n        """'
newline|'\n'
name|'session'
op|'='
name|'self'
op|'.'
name|'_get_session'
op|'('
name|'context'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'image_info'
op|','
name|'data'
op|'='
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update
dedent|''
name|'def'
name|'update'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id_or_uri'
op|','
name|'image_info'
op|','
nl|'\n'
name|'data'
op|'='
name|'None'
op|','
name|'purge_props'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update the information about an image, optionally along with a file\n        handle or bytestream iterator for image bits. If the optional file\n        handle for updated image bits is supplied, the image may not have\n        already uploaded bits for the image.\n\n        :param context: The `nova.context.Context` object for the request\n        :param id_or_uri: A UUID identifier or an image URI to look up image\n                          information for.\n        :param image_info: A dict of information about the image that is\n                           passed to the image registry.\n        :param data: Optional file handle or bytestream iterator that is\n                     passed to backend storage.\n        :param purge_props: Optional, defaults to False. If set, the backend\n                            image registry will clear all image properties\n                            and replace them the image properties supplied\n                            in the image_info dictionary\'s \'properties\'\n                            collection.\n        """'
newline|'\n'
name|'session'
op|','
name|'image_id'
op|'='
name|'self'
op|'.'
name|'_get_session_and_image_id'
op|'('
name|'context'
op|','
name|'id_or_uri'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'update'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'image_info'
op|','
name|'data'
op|'='
name|'data'
op|','
nl|'\n'
name|'purge_props'
op|'='
name|'purge_props'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id_or_uri'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete the information about an image and mark the image bits for\n        deletion.\n\n        :param context: The `nova.context.Context` object for the request\n        :param id_or_uri: A UUID identifier or an image URI to look up image\n                          information for.\n        """'
newline|'\n'
name|'session'
op|','
name|'image_id'
op|'='
name|'self'
op|'.'
name|'_get_session_and_image_id'
op|'('
name|'context'
op|','
name|'id_or_uri'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'delete'
op|'('
name|'context'
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|download
dedent|''
name|'def'
name|'download'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'id_or_uri'
op|','
name|'data'
op|'='
name|'None'
op|','
name|'dest_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Transfer image bits from Glance or a known source location to the\n        supplied destination filepath.\n\n        :param context: The `nova.context.RequestContext` object for the\n                        request\n        :param id_or_uri: A UUID identifier or an image URI to look up image\n                          information for.\n        :param data: A file object to use in downloading image data.\n        :param dest_path: Filepath to transfer image bits to.\n\n        Note that because of the poor design of the\n        `glance.ImageService.download` method, the function returns different\n        things depending on what arguments are passed to it. If a data argument\n        is supplied but no dest_path is specified (only done in the XenAPI virt\n        driver\'s image.utils module) then None is returned from the method. If\n        the data argument is not specified but a destination path *is*\n        specified, then a writeable file handle to the destination path is\n        constructed in the method and the image bits written to that file, and\n        again, None is returned from the method. If no data argument is\n        supplied and no dest_path argument is supplied (VMWare and XenAPI virt\n        drivers), then the method returns an iterator to the image bits that\n        the caller uses to write to wherever location it wants. Finally, if the\n        allow_direct_url_schemes CONF option is set to something, then the\n        nova.image.download modules are used to attempt to do an SCP copy of\n        the image bits from a file location to the dest_path and None is\n        returned after retrying one or more download locations (libvirt and\n        Hyper-V virt drivers through nova.virt.images.fetch).\n\n        I think the above points to just how hacky/wacky all of this code is,\n        and the reason it needs to be cleaned up and standardized across the\n        virt driver callers.\n        """'
newline|'\n'
comment|'# TODO(jaypipes): Deprecate and remove this method entirely when we'
nl|'\n'
comment|'#                 move to a system that simply returns a file handle'
nl|'\n'
comment|'#                 to a bytestream iterator and allows the caller to'
nl|'\n'
comment|'#                 handle streaming/copying/zero-copy as they see fit.'
nl|'\n'
name|'session'
op|','
name|'image_id'
op|'='
name|'self'
op|'.'
name|'_get_session_and_image_id'
op|'('
name|'context'
op|','
name|'id_or_uri'
op|')'
newline|'\n'
name|'return'
name|'session'
op|'.'
name|'download'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'data'
op|'='
name|'data'
op|','
nl|'\n'
name|'dst_path'
op|'='
name|'dest_path'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

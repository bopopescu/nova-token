begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'db_backend'"
op|','
string|"'sqlalchemy'"
op|','
nl|'\n'
string|"'The backend to use for db'"
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(vish): where should these flags go'
nl|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'network_type'"
op|','
nl|'\n'
string|"'vlan'"
op|','
nl|'\n'
string|"'Service Class for Networking'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vlan_start'"
op|','
number|'100'
op|','
string|"'First VLAN for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'num_networks'"
op|','
number|'1000'
op|','
string|"'Number of networks to support'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'vpn_ip'"
op|','
name|'utils'
op|'.'
name|'get_my_ip'
op|'('
op|')'
op|','
nl|'\n'
string|"'Public IP for the cloudpipe VPN servers'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'vpn_start'"
op|','
number|'1000'
op|','
string|"'First Vpn port for private networks'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'network_size'"
op|','
number|'256'
op|','
nl|'\n'
string|"'Number of addresses in each private subnet'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'public_range'"
op|','
string|"'4.4.4.0/24'"
op|','
string|"'Public IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_string'
op|'('
string|"'private_range'"
op|','
string|"'10.0.0.0/8'"
op|','
string|"'Private IP address block'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DEFINE_integer'
op|'('
string|"'cnt_vpn_clients'"
op|','
number|'5'
op|','
nl|'\n'
string|"'Number of addresses reserved for vpn clients'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_impl
name|'_impl'
op|'='
name|'utils'
op|'.'
name|'LazyPluggable'
op|'('
name|'FLAGS'
op|'['
string|"'db_backend'"
op|']'
op|','
nl|'\n'
DECL|variable|sqlalchemy
name|'sqlalchemy'
op|'='
string|"'nova.db.sqlalchemy.api'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddressNotAllocated
name|'class'
name|'AddressNotAllocated'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoMoreAddresses
dedent|''
name|'class'
name|'NoMoreAddresses'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoMoreBlades
dedent|''
name|'class'
name|'NoMoreBlades'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NoMoreNetworks
dedent|''
name|'class'
name|'NoMoreNetworks'
op|'('
name|'exception'
op|'.'
name|'Error'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'###################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|daemon_get
dedent|''
name|'def'
name|'daemon_get'
op|'('
name|'context'
op|','
name|'daemon_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get an daemon or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'daemon_get'
op|'('
name|'context'
op|','
name|'daemon_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|daemon_get_by_args
dedent|''
name|'def'
name|'daemon_get_by_args'
op|'('
name|'context'
op|','
name|'node_name'
op|','
name|'binary'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the state of an daemon by node name and binary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'daemon_get_by_args'
op|'('
name|'context'
op|','
name|'node_name'
op|','
name|'binary'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|daemon_create
dedent|''
name|'def'
name|'daemon_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a daemon from the values dictionary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'daemon_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|daemon_update
dedent|''
name|'def'
name|'daemon_update'
op|'('
name|'context'
op|','
name|'daemon_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the given properties on an daemon and update it.\n\n    Raises NotFound if daemon does not exist.\n\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'daemon_update'
op|'('
name|'context'
op|','
name|'daemon_id'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'###################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_ip_allocate_address
dedent|''
name|'def'
name|'floating_ip_allocate_address'
op|'('
name|'context'
op|','
name|'node_name'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allocate free floating ip and return the address.\n\n    Raises if one is not available.\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'floating_ip_allocate_address'
op|'('
name|'context'
op|','
name|'node_name'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_ip_fixed_ip_associate
dedent|''
name|'def'
name|'floating_ip_fixed_ip_associate'
op|'('
name|'context'
op|','
name|'floating_address'
op|','
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Associate an floating ip to a fixed_ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'floating_ip_fixed_ip_associate'
op|'('
name|'context'
op|','
nl|'\n'
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_ip_disassociate
dedent|''
name|'def'
name|'floating_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Disassociate an floating ip from a fixed ip by address.\n\n    Returns the address of the existing fixed ip.\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'floating_ip_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|floating_ip_deallocate
dedent|''
name|'def'
name|'floating_ip_deallocate'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Deallocate an floating ip by address"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'floating_ip_deallocate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'####################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_allocate
dedent|''
name|'def'
name|'fixed_ip_allocate'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allocate free fixed ip and return the address.\n\n    Raises if one is not available.\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_allocate'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_get_by_address
dedent|''
name|'def'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a fixed ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_get_network
dedent|''
name|'def'
name|'fixed_ip_get_network'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a network for a fixed ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fixed_ip_lease
dedent|''
name|'def'
name|'fixed_ip_lease'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lease a fixed ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_lease'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_release
dedent|''
name|'def'
name|'fixed_ip_release'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Un-Lease a fixed ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_release'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_deallocate
dedent|''
name|'def'
name|'fixed_ip_deallocate'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Deallocate a fixed ip by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_deallocate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_instance_associate
dedent|''
name|'def'
name|'fixed_ip_instance_associate'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Associate a fixed ip to an instance by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_instance_associate'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fixed_ip_instance_disassociate
dedent|''
name|'def'
name|'fixed_ip_instance_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Disassociate a fixed ip from an instance by address."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'fixed_ip_instance_disassociate'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'####################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_create
dedent|''
name|'def'
name|'instance_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create an instance from the values dictionary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_destroy
dedent|''
name|'def'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Destroy the instance or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get
dedent|''
name|'def'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get an instance or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_all
dedent|''
name|'def'
name|'instance_get_all'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all instances."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_by_address
dedent|''
name|'def'
name|'instance_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets an instance by fixed ip address or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_by_project
dedent|''
name|'def'
name|'instance_get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all instance belonging to a project."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_by_reservation
dedent|''
name|'def'
name|'instance_get_by_reservation'
op|'('
name|'context'
op|','
name|'reservation_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all instance belonging to a reservation."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_by_reservation'
op|'('
name|'context'
op|','
name|'reservation_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_fixed_address
dedent|''
name|'def'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the fixed ip address of an instance."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_floating_address
dedent|''
name|'def'
name|'instance_get_floating_address'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the first floating ip address of an instance."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_by_str
dedent|''
name|'def'
name|'instance_get_by_str'
op|'('
name|'context'
op|','
name|'str_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get an instance by string id."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_by_str'
op|'('
name|'context'
op|','
name|'str_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_get_host
dedent|''
name|'def'
name|'instance_get_host'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the host that the instance is running on."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_get_host'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_is_vpn
dedent|''
name|'def'
name|'instance_is_vpn'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""True if instance is a vpn."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_is_vpn'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_state
dedent|''
name|'def'
name|'instance_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'state'
op|','
name|'description'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the state of an instance."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_state'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'state'
op|','
name|'description'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_update
dedent|''
name|'def'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the given properties on an instance and update it.\n\n    Raises NotFound if instance does not exist.\n\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'instance_update'
op|'('
name|'context'
op|','
name|'instance_id'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'####################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_allocate
dedent|''
name|'def'
name|'network_allocate'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Allocate a network for a project."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_allocate'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_create
dedent|''
name|'def'
name|'network_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a network from the values dictionary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_create_fixed_ips
dedent|''
name|'def'
name|'network_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'num_vpn_clients'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create the ips for the network, reserving sepecified ips."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_create_fixed_ips'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'num_vpn_clients'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_destroy
dedent|''
name|'def'
name|'network_destroy'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Destroy the network or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_destroy'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_ensure_indexes
dedent|''
name|'def'
name|'network_ensure_indexes'
op|'('
name|'context'
op|','
name|'num_networks'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure that network indexes exist, creating them if necessary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_ensure_indexes'
op|'('
name|'context'
op|','
name|'num_networks'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get
dedent|''
name|'def'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get an network or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get_associated_fixed_ips
dedent|''
name|'def'
name|'network_get_associated_fixed_ips'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all network\'s ips that have been associated."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get_associated_fixed_ips'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get_by_bridge
dedent|''
name|'def'
name|'network_get_by_bridge'
op|'('
name|'context'
op|','
name|'bridge'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get an network or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get_by_bridge'
op|'('
name|'context'
op|','
name|'bridge'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get_host
dedent|''
name|'def'
name|'network_get_host'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get host assigned to network or raise"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get_host'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get_index
dedent|''
name|'def'
name|'network_get_index'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets non-conflicting index for network"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get_index'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_get_vpn_ip
dedent|''
name|'def'
name|'network_get_vpn_ip'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Gets non-conflicting index for network"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_get_vpn_ip'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_set_cidr
dedent|''
name|'def'
name|'network_set_cidr'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'cidr'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the Classless Inner Domain Routing for the network"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_set_cidr'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_set_host
dedent|''
name|'def'
name|'network_set_host'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'host_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Safely set the host for network"""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_set_host'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'host_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|network_update
dedent|''
name|'def'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the given properties on an network and update it.\n\n    Raises NotFound if network does not exist.\n\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'network_update'
op|'('
name|'context'
op|','
name|'network_id'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'###################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|project_get_network
dedent|''
name|'def'
name|'project_get_network'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the network associated with the project."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'###################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|queue_get_for
dedent|''
name|'def'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'physical_node_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a channel to send a message to a node with a topic."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'queue_get_for'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'physical_node_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'###################'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_allocate_shelf_and_blade
dedent|''
name|'def'
name|'volume_allocate_shelf_and_blade'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Atomically allocate a free shelf and blade from the pool."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_allocate_shelf_and_blade'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_attached
dedent|''
name|'def'
name|'volume_attached'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure that a volume is set as attached."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_attached'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_id'
op|','
name|'mountpoint'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_create
dedent|''
name|'def'
name|'volume_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a volume from the values dictionary."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_create'
op|'('
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_destroy
dedent|''
name|'def'
name|'volume_destroy'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Destroy the volume or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_destroy'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_detached
dedent|''
name|'def'
name|'volume_detached'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Ensure that a volume is set as detached."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_detached'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get
dedent|''
name|'def'
name|'volume_get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a volume or raise if it does not exist."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get_all
dedent|''
name|'def'
name|'volume_get_all'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all volumes."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get_all'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get_by_project
dedent|''
name|'def'
name|'volume_get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all volumes belonging to a project."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get_by_project'
op|'('
name|'context'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get_by_str
dedent|''
name|'def'
name|'volume_get_by_str'
op|'('
name|'context'
op|','
name|'str_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get a volume by string id."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get_by_str'
op|'('
name|'context'
op|','
name|'str_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get_host
dedent|''
name|'def'
name|'volume_get_host'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the host that the volume is running on."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get_host'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_get_shelf_and_blade
dedent|''
name|'def'
name|'volume_get_shelf_and_blade'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the shelf and blade allocated to the volume."""'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_get_shelf_and_blade'
op|'('
name|'context'
op|','
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|volume_update
dedent|''
name|'def'
name|'volume_update'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the given properties on an volume and update it.\n\n    Raises NotFound if volume does not exist.\n\n    """'
newline|'\n'
name|'return'
name|'_impl'
op|'.'
name|'volume_update'
op|'('
name|'context'
op|','
name|'volume_id'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2013 Boris Pavlovic (boris@pavlovic.me).'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'changeset'
name|'import'
name|'UniqueConstraint'
op|','
name|'ForeignKeyConstraint'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Boolean'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'CheckConstraint'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Column'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'engine'
name|'import'
name|'reflection'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'exc'
name|'import'
name|'OperationalError'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'exc'
name|'import'
name|'ProgrammingError'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'ext'
op|'.'
name|'compiler'
name|'import'
name|'compiles'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'func'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Index'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Integer'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'schema'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'expression'
name|'import'
name|'literal_column'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'expression'
name|'import'
name|'UpdateBase'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
name|'import'
name|'select'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'String'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Table'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'types'
name|'import'
name|'NullType'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'api'
name|'as'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_table
name|'def'
name|'get_table'
op|'('
name|'engine'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns an sqlalchemy table dynamically from db.\n\n    Needed because the models don\'t work for us in migrations\n    as models will be far out of sync with the current data.\n    """'
newline|'\n'
name|'metadata'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'return'
name|'Table'
op|'('
name|'name'
op|','
name|'metadata'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InsertFromSelect
dedent|''
name|'class'
name|'InsertFromSelect'
op|'('
name|'UpdateBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table'
op|','
name|'select'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'table'
op|'='
name|'table'
newline|'\n'
name|'self'
op|'.'
name|'select'
op|'='
name|'select'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'compiles'
op|'('
name|'InsertFromSelect'
op|')'
newline|'\n'
DECL|function|visit_insert_from_select
name|'def'
name|'visit_insert_from_select'
op|'('
name|'element'
op|','
name|'compiler'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
string|'"INSERT INTO %s %s"'
op|'%'
op|'('
nl|'\n'
name|'compiler'
op|'.'
name|'process'
op|'('
name|'element'
op|'.'
name|'table'
op|','
name|'asfrom'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'compiler'
op|'.'
name|'process'
op|'('
name|'element'
op|'.'
name|'select'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_not_supported_column
dedent|''
name|'def'
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
name|'column_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'column'
op|'='
name|'col_name_col_instance'
op|'['
name|'column_name'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Please specify column %s in col_name_col_instance "'
nl|'\n'
string|'"param. It is required because column has unsupported "'
nl|'\n'
string|'"type by sqlite)."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'column_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'column'
op|','
name|'Column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"col_name_col_instance param has wrong type of "'
nl|'\n'
string|'"column instance for column %s It should be instance "'
nl|'\n'
string|'"of sqlalchemy.Column."'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|'%'
name|'column_name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'column'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_unique_constraints_in_sqlite
dedent|''
name|'def'
name|'_get_unique_constraints_in_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'regexp'
op|'='
string|'"CONSTRAINT (\\w+) UNIQUE \\(([^\\)]+)\\)"'
newline|'\n'
nl|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'sql_data'
op|'='
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
nl|'\n'
string|'"""\n            SELECT sql\n            FROM\n                sqlite_master\n            WHERE\n                type = \'table\' AND\n                name = :table_name;\n        """'
op|','
nl|'\n'
name|'table_name'
op|'='
name|'table_name'
nl|'\n'
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'uniques'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
name|'schema'
op|'.'
name|'UniqueConstraint'
op|'('
nl|'\n'
op|'*'
op|'['
name|'getattr'
op|'('
name|'table'
op|'.'
name|'c'
op|','
name|'c'
op|'.'
name|'strip'
op|'('
string|'\' "\''
op|')'
op|')'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'cols'
op|'.'
name|'split'
op|'('
string|'","'
op|')'
op|']'
op|','
name|'name'
op|'='
name|'name'
nl|'\n'
op|')'
nl|'\n'
name|'for'
name|'name'
op|','
name|'cols'
name|'in'
name|'re'
op|'.'
name|'findall'
op|'('
name|'regexp'
op|','
name|'sql_data'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'uniques'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_drop_unique_constraint_in_sqlite
dedent|''
name|'def'
name|'_drop_unique_constraint_in_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_column'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'columns'
op|'.'
name|'append'
op|'('
name|'new_column'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'columns'
op|'.'
name|'append'
op|'('
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'uniques'
op|'='
name|'_get_unique_constraints_in_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'table'
op|'.'
name|'constraints'
op|'.'
name|'update'
op|'('
name|'uniques'
op|')'
newline|'\n'
nl|'\n'
name|'constraints'
op|'='
op|'['
name|'constraint'
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
nl|'\n'
name|'if'
name|'not'
name|'constraint'
op|'.'
name|'name'
op|'=='
name|'uc_name'
name|'and'
nl|'\n'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
name|'schema'
op|'.'
name|'ForeignKeyConstraint'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'new_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|'+'
string|'"__tmp__"'
op|','
name|'meta'
op|','
op|'*'
op|'('
name|'columns'
op|'+'
name|'constraints'
op|')'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'indexes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column_names'
op|'='
op|'['
name|'new_table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'indexes'
op|'.'
name|'append'
op|'('
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
nl|'\n'
op|'*'
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'f_keys'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'fk'
name|'in'
name|'insp'
op|'.'
name|'get_foreign_keys'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'refcolumns'
op|'='
op|'['
name|'fk'
op|'['
string|"'referred_table'"
op|']'
op|'+'
string|"'.'"
op|'+'
name|'col'
nl|'\n'
name|'for'
name|'col'
name|'in'
name|'fk'
op|'['
string|"'referred_columns'"
op|']'
op|']'
newline|'\n'
name|'f_keys'
op|'.'
name|'append'
op|'('
name|'ForeignKeyConstraint'
op|'('
name|'fk'
op|'['
string|"'constrained_columns'"
op|']'
op|','
nl|'\n'
name|'refcolumns'
op|','
name|'table'
op|'='
name|'new_table'
op|','
name|'name'
op|'='
name|'fk'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ins'
op|'='
name|'InsertFromSelect'
op|'('
name|'new_table'
op|','
name|'table'
op|'.'
name|'select'
op|'('
op|')'
op|')'
newline|'\n'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'ins'
op|')'
newline|'\n'
name|'table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'['
name|'index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|']'
newline|'\n'
name|'for'
name|'fkey'
name|'in'
name|'f_keys'
op|':'
newline|'\n'
indent|'        '
name|'fkey'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
dedent|''
name|'new_table'
op|'.'
name|'rename'
op|'('
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_unique_constraint
dedent|''
name|'def'
name|'drop_unique_constraint'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
op|'*'
name|'columns'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This method drops UC from table and works for mysql, postgresql and sqlite.\n    In mysql and postgresql we are able to use "alter table" constuction. In\n    sqlite is only one way to drop UC:\n        1) Create new table with same columns, indexes and constraints\n           (except one that we want to drop).\n        2) Copy data from old table to new.\n        3) Drop old table.\n        4) Rename new table to the name of old table.\n\n    :param migrate_engine: sqlalchemy engine\n    :param table_name:     name of table that contains uniq constarint.\n    :param uc_name:        name of uniq constraint that will be dropped.\n    :param columns:        columns that are in uniq constarint.\n    :param col_name_col_instance:   contains pair column_name=column_instance.\n                            column_instance is instance of Column. These params\n                            are required only for columns that have unsupported\n                            types by sqlite. For example BigInteger.\n    """'
newline|'\n'
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'_drop_unique_constraint_in_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
name|'t'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'uc'
op|'='
name|'UniqueConstraint'
op|'('
op|'*'
name|'columns'
op|','
name|'table'
op|'='
name|'t'
op|','
name|'name'
op|'='
name|'uc_name'
op|')'
newline|'\n'
name|'uc'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|drop_old_duplicate_entries_from_table
dedent|''
dedent|''
name|'def'
name|'drop_old_duplicate_entries_from_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
name|'use_soft_delete'
op|','
op|'*'
name|'uc_column_names'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This method is used to drop all old rows that have the same values for\n    columns in uc_columns.\n    """'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'columns_for_group_by'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'name'
op|']'
name|'for'
name|'name'
name|'in'
name|'uc_column_names'
op|']'
newline|'\n'
nl|'\n'
name|'columns_for_select'
op|'='
op|'['
name|'func'
op|'.'
name|'max'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|']'
newline|'\n'
name|'columns_for_select'
op|'.'
name|'extend'
op|'('
name|'list'
op|'('
name|'columns_for_group_by'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'duplicated_rows_select'
op|'='
name|'select'
op|'('
name|'columns_for_select'
op|','
nl|'\n'
name|'group_by'
op|'='
name|'columns_for_group_by'
op|','
nl|'\n'
name|'having'
op|'='
name|'func'
op|'.'
name|'count'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'>'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'row'
name|'in'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'duplicated_rows_select'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(boris-42): Do not remove row that has the biggest ID.'
nl|'\n'
indent|'        '
name|'delete_condition'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'!='
name|'row'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'uc_column_names'
op|':'
newline|'\n'
indent|'            '
name|'delete_condition'
op|'&='
name|'table'
op|'.'
name|'c'
op|'['
name|'name'
op|']'
op|'=='
name|'row'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'rows_to_delete_select'
op|'='
name|'select'
op|'('
op|'['
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|']'
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
newline|'\n'
name|'for'
name|'row'
name|'in'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'rows_to_delete_select'
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Deleted duplicated row with id: %(id)s from table: "'
nl|'\n'
string|'"%(table)s"'
op|')'
op|'%'
name|'dict'
op|'('
name|'id'
op|'='
name|'row'
op|'['
number|'0'
op|']'
op|','
name|'table'
op|'='
name|'table_name'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'use_soft_delete'
op|':'
newline|'\n'
indent|'            '
name|'delete_statement'
op|'='
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
op|'.'
name|'values'
op|'('
op|'{'
nl|'\n'
string|"'deleted'"
op|':'
name|'literal_column'
op|'('
string|"'id'"
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'literal_column'
op|'('
string|"'updated_at'"
op|')'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
nl|'\n'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delete_statement'
op|'='
name|'table'
op|'.'
name|'delete'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'delete_condition'
op|')'
newline|'\n'
dedent|''
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'delete_statement'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_shadow_table
dedent|''
dedent|''
name|'def'
name|'check_shadow_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This method checks that table with ``table_name`` and corresponding shadow\n    table have same columns.\n    """'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'shadow_table'
op|'='
name|'Table'
op|'('
name|'db'
op|'.'
name|'_SHADOW_TABLE_PREFIX'
op|'+'
name|'table_name'
op|','
name|'meta'
op|','
nl|'\n'
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'columns'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'c'
op|'.'
name|'name'
op|','
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'columns'
op|']'
op|')'
newline|'\n'
name|'shadow_columns'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'c'
op|'.'
name|'name'
op|','
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'shadow_table'
op|'.'
name|'columns'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'name'
op|','
name|'column'
name|'in'
name|'columns'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'not'
name|'in'
name|'shadow_columns'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Missing column %(table)s.%(column)s in shadow table"'
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'column'"
op|':'
name|'name'
op|','
string|"'table'"
op|':'
name|'shadow_table'
op|'.'
name|'name'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'shadow_column'
op|'='
name|'shadow_columns'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'shadow_column'
op|'.'
name|'type'
op|','
name|'type'
op|'('
name|'column'
op|'.'
name|'type'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Different types in %(table)s.%(column)s and shadow table: "'
nl|'\n'
string|'"%(c_type)s %(shadow_c_type)s"'
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'column'"
op|':'
name|'name'
op|','
string|"'table'"
op|':'
name|'table'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'c_type'"
op|':'
name|'column'
op|'.'
name|'type'
op|','
nl|'\n'
string|"'shadow_c_type'"
op|':'
name|'shadow_column'
op|'.'
name|'type'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'name'
op|','
name|'column'
name|'in'
name|'shadow_columns'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'not'
name|'in'
name|'columns'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Extra column %(table)%.%(column)s in shadow table"'
op|')'
nl|'\n'
op|'%'
op|'{'
string|"'column'"
op|':'
name|'name'
op|','
string|"'table'"
op|':'
name|'shadow_table'
op|'.'
name|'name'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_shadow_table
dedent|''
name|'def'
name|'create_shadow_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|'='
name|'None'
op|','
name|'table'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This method create shadow table for table with name ``table_name`` or table\n    instance ``table``.\n    :param table_name: Autoload table with this name and create shadow table\n    :param table: Autoloaded table, so just create corresponding shadow table.\n    :param col_name_col_instance:   contains pair column_name=column_instance.\n                            column_instance is instance of Column. These params\n                            are required only for columns that have unsupported\n                            types by sqlite. For example BigInteger.\n    """'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'table_name'
name|'is'
name|'None'
name|'and'
name|'table'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Specify `table_name` or `table` "'
nl|'\n'
string|'"param"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
op|'('
name|'table_name'
name|'is'
name|'None'
name|'or'
name|'table'
name|'is'
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Specify only one param `table_name` "'
nl|'\n'
string|'"`table`"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'table'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'new_column'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'columns'
op|'.'
name|'append'
op|'('
name|'new_column'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'columns'
op|'.'
name|'append'
op|'('
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'shadow_table_name'
op|'='
name|'db'
op|'.'
name|'_SHADOW_TABLE_PREFIX'
op|'+'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'shadow_table'
op|'='
name|'Table'
op|'('
name|'shadow_table_name'
op|','
name|'meta'
op|','
op|'*'
name|'columns'
op|','
nl|'\n'
name|'mysql_engine'
op|'='
string|"'InnoDB'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'shadow_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'OperationalError'
op|','
name|'ProgrammingError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'repr'
op|'('
name|'shadow_table'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Exception while creating table.'"
op|')'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ShadowTableExists'
op|'('
name|'name'
op|'='
name|'shadow_table_name'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'repr'
op|'('
name|'shadow_table'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Exception while creating table.'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_default_deleted_value
dedent|''
dedent|''
name|'def'
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
name|'Integer'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'0'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
name|'String'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'""'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"Unsupported id columns type"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_restore_indexes_on_deleted_columns
dedent|''
name|'def'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'real_indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'existing_index_names'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'index'
op|'['
string|"'name'"
op|']'
op|','
name|'index'
op|'['
string|"'column_names'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'real_indexes'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Restore indexes on `deleted` column'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'deleted'"
name|'not'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'name'
op|'='
name|'index'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'if'
name|'name'
name|'in'
name|'existing_index_names'
op|':'
newline|'\n'
indent|'            '
name|'column_names'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'existing_index_names'
op|'['
name|'name'
op|']'
op|']'
newline|'\n'
name|'old_index'
op|'='
name|'Index'
op|'('
name|'name'
op|','
op|'*'
name|'column_names'
op|','
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
newline|'\n'
name|'old_index'
op|'.'
name|'drop'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'column_names'
op|'='
op|'['
name|'table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'new_index'
op|'='
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
newline|'\n'
name|'new_index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|change_deleted_column_type_to_boolean
dedent|''
dedent|''
name|'def'
name|'change_deleted_column_type_to_boolean'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_change_deleted_column_type_to_boolean_sqlite'
op|'('
name|'migrate_engine'
op|','
nl|'\n'
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
newline|'\n'
dedent|''
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'old_deleted'
op|'='
name|'Column'
op|'('
string|"'old_deleted'"
op|','
name|'Boolean'
op|','
name|'default'
op|'='
name|'False'
op|')'
newline|'\n'
name|'old_deleted'
op|'.'
name|'create'
op|'('
name|'table'
op|','
name|'populate_default'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'old_deleted'
op|'='
name|'True'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'old_deleted'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_change_deleted_column_type_to_boolean_sqlite
dedent|''
name|'def'
name|'_change_deleted_column_type_to_boolean_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'column_copy'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'column'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column_copy'
op|'='
name|'Column'
op|'('
string|"'deleted'"
op|','
name|'Boolean'
op|','
name|'default'
op|'='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'columns'
op|'.'
name|'append'
op|'('
name|'column_copy'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'constraints'
op|'='
op|'['
name|'constraint'
op|'.'
name|'copy'
op|'('
op|')'
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|']'
newline|'\n'
nl|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
name|'new_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|'+'
string|'"__tmp__"'
op|','
name|'meta'
op|','
nl|'\n'
op|'*'
op|'('
name|'columns'
op|'+'
name|'constraints'
op|')'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'indexes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column_names'
op|'='
op|'['
name|'new_table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'indexes'
op|'.'
name|'append'
op|'('
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'c_select'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'c'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'c'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'c_select'
op|'.'
name|'append'
op|'('
name|'c'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'c_select'
op|'.'
name|'append'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'ins'
op|'='
name|'InsertFromSelect'
op|'('
name|'new_table'
op|','
name|'select'
op|'('
name|'c_select'
op|')'
op|')'
newline|'\n'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'ins'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
op|'['
name|'index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|']'
newline|'\n'
nl|'\n'
name|'new_table'
op|'.'
name|'rename'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'True'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|change_deleted_column_type_to_id_type
dedent|''
name|'def'
name|'change_deleted_column_type_to_id_type'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_change_deleted_column_type_to_id_type_sqlite'
op|'('
name|'migrate_engine'
op|','
nl|'\n'
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
newline|'\n'
dedent|''
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'indexes'
op|'='
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
nl|'\n'
name|'new_deleted'
op|'='
name|'Column'
op|'('
string|"'new_deleted'"
op|','
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
nl|'\n'
name|'default'
op|'='
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
op|')'
newline|'\n'
name|'new_deleted'
op|'.'
name|'create'
op|'('
name|'table'
op|','
name|'populate_default'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'True'
op|')'
op|'.'
name|'values'
op|'('
name|'new_deleted'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'table'
op|'.'
name|'c'
op|'.'
name|'new_deleted'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
name|'_restore_indexes_on_deleted_columns'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
name|'indexes'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_change_deleted_column_type_to_id_type_sqlite
dedent|''
name|'def'
name|'_change_deleted_column_type_to_id_type_sqlite'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|','
nl|'\n'
op|'**'
name|'col_name_col_instance'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(boris-42): sqlaclhemy-migrate can't drop column with check"
nl|'\n'
comment|'#                 constraints in sqlite DB and our `deleted` column has'
nl|'\n'
comment|'#                 2 check constraints. So there is only one way to remove'
nl|'\n'
comment|'#                 these constraints:'
nl|'\n'
comment|'#                 1) Create new table with the same columns, constraints'
nl|'\n'
comment|'#                 and indexes. (except deleted column).'
nl|'\n'
comment|'#                 2) Copy all data from old to new table.'
nl|'\n'
comment|'#                 3) Drop old table.'
nl|'\n'
comment|'#                 4) Rename new table to old table name.'
nl|'\n'
indent|'    '
name|'insp'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'migrate_engine'
op|')'
newline|'\n'
name|'table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'default_deleted_value'
op|'='
name|'_get_default_deleted_value'
op|'('
name|'table'
op|')'
newline|'\n'
nl|'\n'
name|'columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'        '
name|'column_copy'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'column'
op|'.'
name|'name'
op|'!='
string|'"deleted"'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'column'
op|'.'
name|'type'
op|','
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'_get_not_supported_column'
op|'('
name|'col_name_col_instance'
op|','
nl|'\n'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'column_copy'
op|'='
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'column_copy'
op|'='
name|'Column'
op|'('
string|"'deleted'"
op|','
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'type'
op|','
nl|'\n'
name|'default'
op|'='
name|'default_deleted_value'
op|')'
newline|'\n'
dedent|''
name|'columns'
op|'.'
name|'append'
op|'('
name|'column_copy'
op|')'
newline|'\n'
nl|'\n'
DECL|function|is_deleted_column_constraint
dedent|''
name|'def'
name|'is_deleted_column_constraint'
op|'('
name|'constraint'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(boris-42): There is no other way to check is CheckConstraint'
nl|'\n'
comment|'#                 associated with deleted column.'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
name|'CheckConstraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'sqltext'
op|'='
name|'str'
op|'('
name|'constraint'
op|'.'
name|'sqltext'
op|')'
newline|'\n'
name|'return'
op|'('
name|'sqltext'
op|'.'
name|'endswith'
op|'('
string|'"deleted in (0, 1)"'
op|')'
name|'or'
nl|'\n'
name|'sqltext'
op|'.'
name|'endswith'
op|'('
string|'"deleted IN (:deleted_1, :deleted_2)"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'constraints'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'is_deleted_column_constraint'
op|'('
name|'constraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'constraints'
op|'.'
name|'append'
op|'('
name|'constraint'
op|'.'
name|'copy'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'new_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|'+'
string|'"__tmp__"'
op|','
name|'meta'
op|','
nl|'\n'
op|'*'
op|'('
name|'columns'
op|'+'
name|'constraints'
op|')'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'indexes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'index'
name|'in'
name|'insp'
op|'.'
name|'get_indexes'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column_names'
op|'='
op|'['
name|'new_table'
op|'.'
name|'c'
op|'['
name|'c'
op|']'
name|'for'
name|'c'
name|'in'
name|'index'
op|'['
string|"'column_names'"
op|']'
op|']'
newline|'\n'
name|'indexes'
op|'.'
name|'append'
op|'('
name|'Index'
op|'('
name|'index'
op|'['
string|'"name"'
op|']'
op|','
op|'*'
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'index'
op|'['
string|'"unique"'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ins'
op|'='
name|'InsertFromSelect'
op|'('
name|'new_table'
op|','
name|'table'
op|'.'
name|'select'
op|'('
op|')'
op|')'
newline|'\n'
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'ins'
op|')'
newline|'\n'
nl|'\n'
name|'table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
op|'['
name|'index'
op|'.'
name|'create'
op|'('
name|'migrate_engine'
op|')'
name|'for'
name|'index'
name|'in'
name|'indexes'
op|']'
newline|'\n'
nl|'\n'
name|'new_table'
op|'.'
name|'rename'
op|'('
name|'table_name'
op|')'
newline|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'True'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Fix value of deleted column: False -> "" or 0.'
nl|'\n'
name|'new_table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'new_table'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'=='
name|'False'
op|')'
op|'.'
name|'values'
op|'('
name|'deleted'
op|'='
name|'default_deleted_value'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

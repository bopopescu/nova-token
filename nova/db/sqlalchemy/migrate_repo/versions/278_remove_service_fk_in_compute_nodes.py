begin_unit
comment|'# Copyright (c) 2015 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'migrate'
name|'import'
name|'ForeignKeyConstraint'
op|','
name|'UniqueConstraint'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
op|','
name|'Table'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'engine'
name|'import'
name|'reflection'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_correct_sqlite_unique_constraints
name|'def'
name|'_correct_sqlite_unique_constraints'
op|'('
name|'migrate_engine'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(sbauza): SQLAlchemy<1.0 doesn't provide the unique keys in the"
nl|'\n'
comment|'# constraints field of the Table object, so it would drop them if we change'
nl|'\n'
comment|'# either the scheme or the constraints. Adding them back to the Table'
nl|'\n'
comment|'# object before changing the model makes sure that they are not dropped.'
nl|'\n'
indent|'    '
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'!='
string|"'sqlite'"
op|':'
newline|'\n'
comment|"# other engines don't have this problem"
nl|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'inspector'
op|'='
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'constraints'
op|'='
name|'inspector'
op|'.'
name|'get_unique_constraints'
op|'('
name|'table'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'constraint_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|']'
newline|'\n'
name|'for'
name|'constraint'
name|'in'
name|'constraints'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'constraint'
op|'['
string|"'name'"
op|']'
name|'in'
name|'constraint_names'
op|':'
newline|'\n'
comment|'# the constraint is already in the table'
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'table'
op|'.'
name|'constraints'
op|'.'
name|'add'
op|'('
nl|'\n'
name|'UniqueConstraint'
op|'('
op|'*'
name|'constraint'
op|'['
string|"'column_names'"
op|']'
op|','
nl|'\n'
name|'table'
op|'='
name|'table'
op|','
name|'name'
op|'='
name|'constraint'
op|'['
string|"'name'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade
dedent|''
dedent|''
name|'def'
name|'upgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'compute_nodes'
op|'='
name|'Table'
op|'('
string|"'compute_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'shadow_compute_nodes'
op|'='
name|'Table'
op|'('
string|"'shadow_compute_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'services'
op|'='
name|'Table'
op|'('
string|"'services'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'_correct_sqlite_unique_constraints'
op|'('
name|'migrate_engine'
op|','
name|'compute_nodes'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make the service_id column nullable'
nl|'\n'
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
newline|'\n'
name|'shadow_compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fk'
name|'in'
name|'compute_nodes'
op|'.'
name|'foreign_keys'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fk'
op|'.'
name|'column'
op|'=='
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|':'
newline|'\n'
comment|'# Delete the FK'
nl|'\n'
indent|'            '
name|'fkey'
op|'='
name|'ForeignKeyConstraint'
op|'('
name|'columns'
op|'='
op|'['
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|']'
op|','
nl|'\n'
name|'refcolumns'
op|'='
op|'['
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|']'
op|','
nl|'\n'
name|'name'
op|'='
name|'fk'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'fkey'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'index'
name|'in'
name|'compute_nodes'
op|'.'
name|'indexes'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'service_id'"
name|'in'
name|'index'
op|'.'
name|'columns'
op|':'
newline|'\n'
comment|'# Delete the nested index which was created by the FK'
nl|'\n'
indent|'            '
name|'index'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|downgrade
dedent|''
dedent|''
dedent|''
name|'def'
name|'downgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'compute_nodes'
op|'='
name|'Table'
op|'('
string|"'compute_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'shadow_compute_nodes'
op|'='
name|'Table'
op|'('
string|"'shadow_compute_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'services'
op|'='
name|'Table'
op|'('
string|"'services'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'_correct_sqlite_unique_constraints'
op|'('
name|'migrate_engine'
op|','
name|'compute_nodes'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make the service_id field not nullable'
nl|'\n'
comment|'# NOTE(sbauza): Beyond the point of this commit, service_id will not be'
nl|'\n'
comment|'# updated, but previous commits still do. We can tho safely go back to'
nl|'\n'
comment|'# a state where all the compute nodes are providing this field.'
nl|'\n'
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
newline|'\n'
name|'shadow_compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Adding only FK if not existing yet'
nl|'\n'
name|'fkeys'
op|'='
op|'{'
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|':'
name|'fk'
op|'.'
name|'column'
nl|'\n'
name|'for'
name|'fk'
name|'in'
name|'compute_nodes'
op|'.'
name|'foreign_keys'
op|'}'
newline|'\n'
name|'if'
string|"'service_id'"
name|'in'
name|'fkeys'
name|'and'
name|'fkeys'
op|'['
string|"'service_id'"
op|']'
op|'=='
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
nl|'\n'
comment|'# NOTE(sbauza): See 216_havana.py for the whole logic'
nl|'\n'
dedent|''
name|'if'
name|'migrate_engine'
op|'.'
name|'name'
op|'=='
string|"'postgresql'"
op|':'
newline|'\n'
comment|'# PostgreSQL names things like it wants (correct and compatible!)'
nl|'\n'
indent|'        '
name|'fkey'
op|'='
name|'ForeignKeyConstraint'
op|'('
name|'columns'
op|'='
op|'['
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|']'
op|','
nl|'\n'
name|'refcolumns'
op|'='
op|'['
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|']'
op|')'
newline|'\n'
name|'fkey'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# For MySQL we name our fkeys explicitly so they match Havana'
nl|'\n'
indent|'        '
name|'fkey'
op|'='
name|'ForeignKeyConstraint'
op|'('
name|'columns'
op|'='
op|'['
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|']'
op|','
nl|'\n'
name|'refcolumns'
op|'='
op|'['
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|']'
op|','
nl|'\n'
name|'name'
op|'='
string|"'fk_compute_nodes_service_id'"
op|')'
newline|'\n'
name|'fkey'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

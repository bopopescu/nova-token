begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'select'
op|','
name|'Column'
op|','
name|'Integer'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
DECL|variable|meta
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_table
name|'def'
name|'_get_table'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'sqlalchemy'
op|'.'
name|'Table'
op|'('
name|'name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade_libvirt
dedent|''
name|'def'
name|'upgrade_libvirt'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
comment|'# Update instance_types first'
nl|'\n'
indent|'    '
name|'tiny'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'inst_type'
name|'in'
name|'instance_types'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'inst_type'
op|'['
string|"'name'"
op|']'
op|'=='
string|"'m1.tiny'"
op|':'
newline|'\n'
indent|'            '
name|'tiny'
op|'='
name|'inst_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'root_gb'
op|'='
number|'0'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'root_gb'
op|'='
number|'10'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_types'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'root_gb'
op|'='
name|'root_gb'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|')'
op|'.'
name|'where'
op|'('
name|'instance_types'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'inst_type'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# then update instances following same pattern'
nl|'\n'
dedent|''
name|'instances'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'root_gb'
op|'='
number|'10'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instances'
op|'.'
name|'c'
op|'.'
name|'local_gb'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'tiny'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'root_gb'
op|'='
number|'0'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
name|'instances'
op|'.'
name|'c'
op|'.'
name|'local_gb'
op|')'
op|'.'
name|'where'
op|'('
name|'instances'
op|'.'
name|'c'
op|'.'
name|'instance_type_id'
op|'=='
name|'tiny'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade_other
dedent|''
dedent|''
name|'def'
name|'upgrade_other'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'root_gb'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'local_gb'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
number|'0'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_instance_presence
dedent|''
dedent|''
name|'def'
name|'check_instance_presence'
op|'('
name|'migrate_engine'
op|','
name|'instances_table'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
name|'migrate_engine'
op|'.'
name|'execute'
op|'('
name|'instances_table'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'limit'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'return'
name|'result'
op|'.'
name|'fetchone'
op|'('
op|')'
name|'is'
name|'not'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade
dedent|''
name|'def'
name|'upgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
name|'instances'
op|'='
name|'_get_table'
op|'('
string|"'instances'"
op|')'
newline|'\n'
nl|'\n'
name|'data_present'
op|'='
name|'check_instance_presence'
op|'('
name|'migrate_engine'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'data_present'
name|'and'
name|'not'
name|'FLAGS'
op|'.'
name|'connection_type'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
op|'('
string|'"Found instance records in database. You must specify "'
nl|'\n'
string|'"connection_type to run migration migration"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_types'
op|'='
name|'_get_table'
op|'('
string|"'instance_types'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root_gb'
op|'='
name|'Column'
op|'('
string|"'root_gb'"
op|','
name|'Integer'
op|')'
newline|'\n'
name|'root_gb'
op|'.'
name|'create'
op|'('
name|'table'
op|')'
newline|'\n'
name|'ephemeral_gb'
op|'='
name|'Column'
op|'('
string|"'ephemeral_gb'"
op|','
name|'Integer'
op|')'
newline|'\n'
name|'ephemeral_gb'
op|'.'
name|'create'
op|'('
name|'table'
op|')'
newline|'\n'
nl|'\n'
comment|'# Since this migration is part of the work to get all drivers'
nl|'\n'
comment|'# working the same way, we need to treat the new root_gb and'
nl|'\n'
comment|'# ephemeral_gb columns differently depending on what the'
nl|'\n'
comment|'# driver implementation used to behave like.'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'connection_type'
op|'=='
string|"'libvirt'"
op|':'
newline|'\n'
indent|'        '
name|'upgrade_libvirt'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'upgrade_other'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'default_local_device'
op|'='
name|'instances'
op|'.'
name|'c'
op|'.'
name|'default_local_device'
newline|'\n'
name|'default_local_device'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|"'default_ephemeral_device'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'.'
name|'drop_column'
op|'('
string|"'local_gb'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|downgrade
dedent|''
dedent|''
name|'def'
name|'downgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
name|'instances'
op|'='
name|'_get_table'
op|'('
string|"'instances'"
op|')'
newline|'\n'
name|'instance_types'
op|'='
name|'_get_table'
op|'('
string|"'instance_types'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'local_gb'
op|'='
name|'Column'
op|'('
string|"'root_gb'"
op|','
name|'Integer'
op|')'
newline|'\n'
name|'local_gb'
op|'.'
name|'create'
op|'('
name|'table'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'FLAGS'
op|'.'
name|'connection_type'
op|'=='
string|"'libvirt'"
op|':'
newline|'\n'
indent|'                '
name|'column'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'ephemeral_gb'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'column'
op|'='
name|'table'
op|'.'
name|'c'
op|'.'
name|'root_gb'
newline|'\n'
dedent|''
name|'table'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'local_gb'
op|'='
name|'column'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'table'
op|'.'
name|'drop_column'
op|'('
string|"'local_gb'"
op|')'
newline|'\n'
dedent|''
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'default_ephemeral_device'
op|'='
name|'instances'
op|'.'
name|'c'
op|'.'
name|'default_ephemeral_device'
newline|'\n'
name|'default_ephemeral_device'
op|'.'
name|'alter'
op|'('
name|'name'
op|'='
string|"'default_local_device'"
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'table'
name|'in'
op|'('
name|'instances'
op|','
name|'instance_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'.'
name|'drop_column'
op|'('
string|"'root_gb'"
op|')'
newline|'\n'
name|'table'
op|'.'
name|'drop_column'
op|'('
string|"'ephemeral_gb'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2014 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'migrate'
name|'import'
name|'UniqueConstraint'
newline|'\n'
name|'from'
name|'oslo_db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
name|'import'
name|'null'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|UC_NAME
name|'UC_NAME'
op|'='
string|"'uniq_instances0uuid'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|scan_for_null_records
name|'def'
name|'scan_for_null_records'
op|'('
name|'table'
op|','
name|'col_name'
op|','
name|'check_fkeys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queries the table looking for NULL instances of the given column.\n\n    :param col_name: The name of the column to look for in the table.\n    :param check_fkeys: If True, check the table for foreign keys back to the\n        instances table and if not found, return.\n    :raises: exception.ValidationError: If any records are found.\n    """'
newline|'\n'
name|'if'
name|'col_name'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
comment|"# NOTE(mriedem): filter out tables that don't have a foreign key back"
nl|'\n'
comment|'# to the instances table since they could have stale data even if'
nl|'\n'
comment|"# instances.uuid wasn't NULL."
nl|'\n'
indent|'        '
name|'if'
name|'check_fkeys'
op|':'
newline|'\n'
indent|'            '
name|'fkey_found'
op|'='
name|'False'
newline|'\n'
name|'fkeys'
op|'='
name|'table'
op|'.'
name|'c'
op|'['
name|'col_name'
op|']'
op|'.'
name|'foreign_keys'
name|'or'
op|'['
op|']'
newline|'\n'
name|'for'
name|'fkey'
name|'in'
name|'fkeys'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'fkey'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
op|'=='
string|"'instances'"
op|':'
newline|'\n'
indent|'                    '
name|'fkey_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'fkey_found'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'records'
op|'='
name|'len'
op|'('
name|'list'
op|'('
nl|'\n'
name|'table'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'['
name|'col_name'
op|']'
op|'=='
name|'null'
op|'('
op|')'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
name|'if'
name|'records'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"There are %(records)d records in the "'
nl|'\n'
string|'"\'%(table_name)s\' table where the uuid or "'
nl|'\n'
string|'"instance_uuid column is NULL. These must be "'
nl|'\n'
string|'"manually cleaned up before the migration will pass. "'
nl|'\n'
string|'"Consider running the "'
nl|'\n'
string|'"\'nova-manage db null_instance_uuid_scan\' command."'
op|')'
op|'%'
op|'('
nl|'\n'
op|'{'
string|"'records'"
op|':'
name|'records'
op|','
string|"'table_name'"
op|':'
name|'table'
op|'.'
name|'name'
op|'}'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ValidationError'
op|'('
name|'detail'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|process_null_records
dedent|''
dedent|''
dedent|''
name|'def'
name|'process_null_records'
op|'('
name|'meta'
op|','
name|'scan'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Scans the database for null instance_uuid records for processing.\n\n    :param meta: sqlalchemy.MetaData object, assumes tables are reflected.\n    :param scan: If True, does a query and fails the migration if NULL instance\n                 uuid entries found. If False, makes instances.uuid\n                 non-nullable.\n    """'
newline|'\n'
name|'if'
name|'scan'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table'
name|'in'
name|'reversed'
op|'('
name|'meta'
op|'.'
name|'sorted_tables'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(mriedem): There is a periodic task in the network manager'
nl|'\n'
comment|'# that calls nova.db.api.fixed_ip_disassociate_all_by_timeout which'
nl|'\n'
comment|'# will set fixed_ips.instance_uuid to None by design, so we have to'
nl|'\n'
comment|"# skip the fixed_ips table otherwise we'll wipeout the pool of"
nl|'\n'
comment|'# fixed IPs.'
nl|'\n'
indent|'            '
name|'if'
name|'table'
op|'.'
name|'name'
name|'not'
name|'in'
op|'('
string|"'fixed_ips'"
op|','
string|"'shadow_fixed_ips'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'scan_for_null_records'
op|'('
name|'table'
op|','
string|"'instance_uuid'"
op|','
name|'check_fkeys'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'instances'"
op|','
string|"'shadow_instances'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'meta'
op|'.'
name|'tables'
op|'['
name|'table_name'
op|']'
newline|'\n'
name|'if'
name|'scan'
op|':'
newline|'\n'
indent|'            '
name|'scan_for_null_records'
op|'('
name|'table'
op|','
string|"'uuid'"
op|','
name|'check_fkeys'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# The record is gone so make the uuid column non-nullable.'
nl|'\n'
indent|'            '
name|'table'
op|'.'
name|'columns'
op|'.'
name|'uuid'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade
dedent|''
dedent|''
dedent|''
name|'def'
name|'upgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(mriedem): We're going to load up all of the tables so we can find"
nl|'\n'
comment|'# any with an instance_uuid column since those may be foreign keys back'
nl|'\n'
comment|'# to the instances table and we want to cleanup those records first. We'
nl|'\n'
comment|"# have to do this explicitly because the foreign keys in nova aren't"
nl|'\n'
comment|'# defined with cascading deletes.'
nl|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'migrate_engine'
op|')'
newline|'\n'
comment|'# Scan the database first and fail if any NULL records found.'
nl|'\n'
name|'process_null_records'
op|'('
name|'meta'
op|','
name|'scan'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# Now run the alter statements.'
nl|'\n'
name|'process_null_records'
op|'('
name|'meta'
op|','
name|'scan'
op|'='
name|'False'
op|')'
newline|'\n'
comment|'# Create a unique constraint on instances.uuid for foreign keys.'
nl|'\n'
name|'instances'
op|'='
name|'meta'
op|'.'
name|'tables'
op|'['
string|"'instances'"
op|']'
newline|'\n'
name|'UniqueConstraint'
op|'('
string|"'uuid'"
op|','
name|'table'
op|'='
name|'instances'
op|','
name|'name'
op|'='
name|'UC_NAME'
op|')'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): We now have a unique index on instances.uuid from the'
nl|'\n'
comment|'# 216_havana migration and a unique constraint on the same column, which'
nl|'\n'
comment|'# is redundant but should not be a big performance penalty. We should'
nl|'\n'
comment|'# clean this up in a later (separate) migration since it involves dropping'
nl|'\n'
comment|'# any ForeignKeys on the instances.uuid column due to some index rename'
nl|'\n'
comment|'# issues in older versions of MySQL. That is beyond the scope of this'
nl|'\n'
comment|'# migration.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|downgrade
dedent|''
name|'def'
name|'downgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
comment|'# drop the unique constraint on instances.uuid'
nl|'\n'
indent|'    '
name|'UniqueConstraint'
op|'('
string|"'uuid'"
op|','
nl|'\n'
name|'table'
op|'='
name|'utils'
op|'.'
name|'get_table'
op|'('
name|'migrate_engine'
op|','
string|"'instances'"
op|')'
op|','
nl|'\n'
name|'name'
op|'='
name|'UC_NAME'
op|')'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
comment|"# We can't bring the deleted records back but we can make uuid nullable."
nl|'\n'
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'instances'"
op|','
string|"'shadow_instances'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'utils'
op|'.'
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'table'
op|'.'
name|'columns'
op|'.'
name|'uuid'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'and_'
op|','
name|'String'
op|','
name|'Column'
op|','
name|'MetaData'
op|','
name|'select'
op|','
name|'Table'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|upgrade
name|'def'
name|'upgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'Table'
op|'('
string|"'instances'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'node'
op|'='
name|'Column'
op|'('
string|"'node'"
op|','
name|'String'
op|'('
name|'length'
op|'='
number|'255'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'create_column'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'c_nodes'
op|'='
name|'Table'
op|'('
string|"'compute_nodes'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'services'
op|'='
name|'Table'
op|'('
string|"'services'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# set instances.node = compute_nodes.hypervisor_hostname'
nl|'\n'
name|'q'
op|'='
name|'select'
op|'('
nl|'\n'
op|'['
name|'instances'
op|'.'
name|'c'
op|'.'
name|'id'
op|','
name|'c_nodes'
op|'.'
name|'c'
op|'.'
name|'hypervisor_hostname'
op|']'
op|','
nl|'\n'
name|'whereclause'
op|'='
name|'and_'
op|'('
nl|'\n'
name|'instances'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'True'
op|','
nl|'\n'
name|'services'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'True'
op|','
nl|'\n'
name|'services'
op|'.'
name|'c'
op|'.'
name|'binary'
op|'=='
string|"'nova-compute'"
op|','
nl|'\n'
name|'c_nodes'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'True'
op|')'
op|','
nl|'\n'
name|'from_obj'
op|'='
name|'instances'
op|'.'
name|'join'
op|'('
name|'services'
op|','
nl|'\n'
name|'instances'
op|'.'
name|'c'
op|'.'
name|'host'
op|'=='
name|'services'
op|'.'
name|'c'
op|'.'
name|'host'
op|')'
nl|'\n'
op|'.'
name|'join'
op|'('
name|'c_nodes'
op|','
nl|'\n'
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'c_nodes'
op|'.'
name|'c'
op|'.'
name|'service_id'
op|')'
op|')'
newline|'\n'
name|'for'
op|'('
name|'instance_id'
op|','
name|'hypervisor_hostname'
op|')'
name|'in'
name|'q'
op|'.'
name|'execute'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'instances'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'instance_id'
op|')'
op|'.'
name|'values'
op|'('
name|'node'
op|'='
name|'hypervisor_hostname'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|downgrade
dedent|''
dedent|''
name|'def'
name|'downgrade'
op|'('
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'migrate_engine'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'Table'
op|'('
string|"'instances'"
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'drop_column'
op|'('
string|"'node'"
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

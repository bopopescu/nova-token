begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
nl|'\n'
name|'import'
name|'alembic'
op|'.'
name|'autogenerate'
newline|'\n'
name|'import'
name|'alembic'
op|'.'
name|'migration'
newline|'\n'
name|'import'
name|'alembic'
op|'.'
name|'operations'
newline|'\n'
name|'from'
name|'migrate'
name|'import'
name|'exceptions'
name|'as'
name|'versioning_exceptions'
newline|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
name|'import'
name|'api'
name|'as'
name|'versioning_api'
newline|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
op|'.'
name|'repository'
name|'import'
name|'Repository'
newline|'\n'
name|'from'
name|'oslo_db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
name|'as'
name|'db_utils'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'sql'
name|'import'
name|'null'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'api'
name|'as'
name|'db_session'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
nl|'\n'
DECL|variable|INIT_VERSION
name|'INIT_VERSION'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'INIT_VERSION'
op|'['
string|"'main'"
op|']'
op|'='
number|'215'
newline|'\n'
name|'INIT_VERSION'
op|'['
string|"'api'"
op|']'
op|'='
number|'0'
newline|'\n'
DECL|variable|_REPOSITORY
name|'_REPOSITORY'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_engine
name|'def'
name|'get_engine'
op|'('
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'database'
op|'=='
string|"'main'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db_session'
op|'.'
name|'get_engine'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'database'
op|'=='
string|"'api'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db_session'
op|'.'
name|'get_api_engine'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_db_sync_locked
dedent|''
dedent|''
name|'def'
name|'_db_sync_locked'
op|'('
name|'repository'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'migrate_version'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'repository'
op|'.'
name|'version_table'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'sqlalchemy'
op|'.'
name|'exc'
op|'.'
name|'NoSuchTableError'
op|':'
newline|'\n'
comment|"# Table doesn't exist yet, cannot be locked"
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'row'
op|'='
name|'sqlalchemy'
op|'.'
name|'sql'
op|'.'
name|'select'
op|'('
op|'['
name|'migrate_version'
op|']'
op|')'
op|'.'
name|'where'
op|'('
name|'migrate_version'
op|'.'
name|'c'
op|'.'
name|'repository_id'
op|'=='
name|'repository'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchone'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'row'
name|'or'
string|"'locked'"
name|'not'
name|'in'
name|'row'
op|':'
newline|'\n'
comment|"# 'db expand' will create row if missing and it will add locked"
nl|'\n'
comment|"# column if missing. If 'db expand' hasn't been run, then the"
nl|'\n'
comment|"# repo can't be locked"
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'row'
op|'['
string|"'locked'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_db_sync_lock
dedent|''
name|'def'
name|'_set_db_sync_lock'
op|'('
name|'repository'
op|','
name|'locked'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'locked'
op|'='
name|'locked'
name|'and'
number|'1'
name|'or'
number|'0'
newline|'\n'
nl|'\n'
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'migrate_version'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'repository'
op|'.'
name|'version_table'
op|')'
newline|'\n'
name|'return'
name|'migrate_version'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'migrate_version'
op|'.'
name|'c'
op|'.'
name|'repository_id'
op|'=='
name|'repository'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'locked'
op|'='
name|'locked'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'rowcount'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_set_db_sync_version
dedent|''
name|'def'
name|'_set_db_sync_version'
op|'('
name|'repository'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'migrate_version'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'repository'
op|'.'
name|'version_table'
op|')'
newline|'\n'
name|'migrate_version'
op|'.'
name|'update'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'migrate_version'
op|'.'
name|'c'
op|'.'
name|'repository_id'
op|'=='
name|'repository'
op|'.'
name|'id'
op|')'
op|'.'
name|'values'
op|'('
name|'version'
op|'='
name|'version'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_sync
dedent|''
name|'def'
name|'db_sync'
op|'('
name|'version'
op|'='
name|'None'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'version'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
name|'int'
op|'('
name|'version'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|'"version should be an integer"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'current_version'
op|'='
name|'db_version'
op|'('
name|'database'
op|')'
newline|'\n'
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'_db_sync_locked'
op|'('
name|'repository'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Cannot run \'db sync\' until \'db contract\' is run"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'version'
name|'is'
name|'None'
name|'or'
name|'version'
op|'>'
name|'current_version'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'upgrade'
op|'('
name|'get_engine'
op|'('
name|'database'
op|')'
op|','
name|'repository'
op|','
nl|'\n'
name|'version'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'downgrade'
op|'('
name|'get_engine'
op|'('
name|'database'
op|')'
op|','
name|'repository'
op|','
nl|'\n'
name|'version'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_version
dedent|''
dedent|''
name|'def'
name|'db_version'
op|'('
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'versioning_api'
op|'.'
name|'db_version'
op|'('
name|'get_engine'
op|'('
name|'database'
op|')'
op|','
name|'repository'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'versioning_exceptions'
op|'.'
name|'DatabaseNotControlledError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'engine'
op|'='
name|'get_engine'
op|'('
name|'database'
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'bind'
op|'='
name|'engine'
op|')'
newline|'\n'
name|'tables'
op|'='
name|'meta'
op|'.'
name|'tables'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'tables'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'db_version_control'
op|'('
name|'INIT_VERSION'
op|'['
name|'database'
op|']'
op|','
name|'database'
op|')'
newline|'\n'
name|'return'
name|'versioning_api'
op|'.'
name|'db_version'
op|'('
name|'get_engine'
op|'('
name|'database'
op|')'
op|','
name|'repository'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'exc'
op|')'
newline|'\n'
comment|"# Some pre-Essex DB's may not be version controlled."
nl|'\n'
comment|'# Require them to upgrade using Essex first.'
nl|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"Upgrade DB using Essex release first."'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_initial_version
dedent|''
dedent|''
dedent|''
name|'def'
name|'db_initial_version'
op|'('
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'INIT_VERSION'
op|'['
name|'database'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_ignore_table
dedent|''
name|'def'
name|'_ignore_table'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
comment|'# Anything starting with dump_ is a backup from previous'
nl|'\n'
comment|'# migration scripts.'
nl|'\n'
indent|'    '
name|'return'
name|'name'
op|'.'
name|'startswith'
op|'('
string|"'dump_'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_include_object
dedent|''
name|'def'
name|'_include_object'
op|'('
name|'object_'
op|','
name|'name'
op|','
name|'type_'
op|','
name|'reflected'
op|','
name|'compare_to'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'type_'
op|'=='
string|"'table'"
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'not'
name|'_ignore_table'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_REFLECT_CACHE
dedent|''
name|'_REFLECT_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_compare_type
name|'def'
name|'_compare_type'
op|'('
name|'context'
op|','
name|'inspector_column'
op|','
name|'metadata_column'
op|','
nl|'\n'
name|'inspector_type'
op|','
name|'metadata_type'
op|')'
op|':'
newline|'\n'
comment|'# Types can be silently modified on the server side. For instance,'
nl|'\n'
comment|'# under MySQL, the "BOOL" type is an alias to "TINYINT". As a result,'
nl|'\n'
comment|'# creating a column with "BOOL" will reflect as "TINYINT". Instead of'
nl|'\n'
comment|"# manually maintaining a mapping of types per database engine, let's"
nl|'\n'
comment|'# create a temporary table with metadata_type, reflect that, then'
nl|'\n'
comment|'# compare the two reflected values to see if they match.'
nl|'\n'
nl|'\n'
comment|"# Check with the alembic implementation first. I haven't seen a false"
nl|'\n'
comment|'# negative yet (where it considers the types the same when they really'
nl|'\n'
comment|"# aren't), but there are some false positives dealing with aliasing"
nl|'\n'
comment|'# of types and some metadata.'
nl|'\n'
indent|'    '
name|'if'
name|'not'
name|'context'
op|'.'
name|'impl'
op|'.'
name|'compare_type'
op|'('
name|'inspector_column'
op|','
name|'metadata_column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'key'
op|'='
name|'str'
op|'('
name|'metadata_type'
op|')'
newline|'\n'
name|'reflected_type'
op|'='
name|'_REFLECT_CACHE'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'reflected_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'context'
op|'.'
name|'bind'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'tmp_meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
name|'conn'
op|')'
newline|'\n'
nl|'\n'
name|'randchars'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'chr'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'255'
op|')'
op|')'
name|'for'
name|'_'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|')'
newline|'\n'
name|'tmp_table_name'
op|'='
string|"'reflect_'"
op|'+'
name|'base64'
op|'.'
name|'b32encode'
op|'('
name|'randchars'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'tmp_table'
op|'='
name|'sqlalchemy'
op|'.'
name|'Table'
op|'('
name|'tmp_table_name'
op|','
name|'tmp_meta'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'Column'
op|'('
string|"'a'"
op|','
name|'metadata_type'
op|')'
op|','
nl|'\n'
name|'prefixes'
op|'='
op|'['
string|"'TEMPORARY'"
op|']'
op|')'
newline|'\n'
name|'tmp_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inspect'
op|'='
name|'sqlalchemy'
op|'.'
name|'inspect'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'columns'
op|'='
name|'inspect'
op|'.'
name|'get_columns'
op|'('
name|'tmp_table_name'
op|')'
newline|'\n'
nl|'\n'
name|'tmp_table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'column_types'
op|'='
op|'{'
name|'c'
op|'['
string|"'name'"
op|']'
op|':'
name|'c'
op|'['
string|"'type'"
op|']'
name|'for'
name|'c'
name|'in'
name|'columns'
op|'}'
newline|'\n'
name|'reflected_type'
op|'='
name|'column_types'
op|'['
string|"'a'"
op|']'
newline|'\n'
name|'_REFLECT_CACHE'
op|'['
name|'key'
op|']'
op|'='
name|'reflected_type'
newline|'\n'
nl|'\n'
comment|'# Now compare the types'
nl|'\n'
dedent|''
name|'if'
name|'inspector_type'
op|'.'
name|'__class__'
name|'is'
name|'not'
name|'reflected_type'
op|'.'
name|'__class__'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# And compare any specific attributes about this type'
nl|'\n'
comment|'# TODO(johannes): This should handle dialect specific attributes'
nl|'\n'
comment|'# (eg charset, collation, etc on MySQL VARCHAR type). This is'
nl|'\n'
comment|'# probably best done in alembic correctly'
nl|'\n'
dedent|''
name|'for'
name|'attr'
name|'in'
op|'('
string|"'length'"
op|','
string|"'display_width'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'hasattr'
op|'('
name|'inspector_type'
op|','
name|'attr'
op|')'
name|'and'
nl|'\n'
name|'getattr'
op|'('
name|'inspector_type'
op|','
name|'attr'
op|')'
op|'!='
name|'getattr'
op|'('
name|'reflected_type'
op|','
name|'attr'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_migration_context
dedent|''
name|'def'
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'opts'
op|'='
op|'{'
nl|'\n'
string|"'include_object'"
op|':'
name|'_include_object'
op|','
nl|'\n'
string|"'compare_type'"
op|':'
name|'_compare_type'
op|','
nl|'\n'
string|"'as_sql'"
op|':'
name|'as_sql'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'alembic'
op|'.'
name|'migration'
op|'.'
name|'MigrationContext'
op|'.'
name|'configure'
op|'('
name|'engine'
op|','
name|'opts'
op|'='
name|'opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|OperationBase
dedent|''
name|'class'
name|'OperationBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|'# Be conservative by default'
nl|'\n'
DECL|variable|desired_phase
indent|'    '
name|'desired_phase'
op|'='
string|"'migrate'"
newline|'\n'
DECL|variable|removes
name|'removes'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conflicts'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddTable
dedent|''
dedent|''
name|'class'
name|'AddTable'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
comment|'# Always safe since no old code should be using this table'
nl|'\n'
DECL|variable|desired_phase
indent|'    '
name|'desired_phase'
op|'='
string|"'expand'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AddTable'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'table'
op|'='
name|'table'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'('
string|"'column'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'c'
op|'.'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
comment|'# Need to copy columns so they are unlinked from metadata table'
nl|'\n'
indent|'        '
name|'columns'
op|'='
op|'['
name|'c'
op|'.'
name|'copy'
op|'('
op|')'
name|'for'
name|'c'
name|'in'
name|'self'
op|'.'
name|'table'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'ddlop'
op|'.'
name|'create_table'
op|'('
name|'self'
op|'.'
name|'table'
op|'.'
name|'name'
op|','
op|'*'
name|'columns'
op|','
nl|'\n'
name|'mysql_engine'
op|'='
string|"'InnoDB'"
op|','
nl|'\n'
name|'mysql_charset'
op|'='
string|"'utf8'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<AddTable table_name=%s>'"
op|'%'
name|'self'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DropTable
dedent|''
dedent|''
name|'class'
name|'DropTable'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
comment|'# Always safe since no new code should be using this table'
nl|'\n'
DECL|variable|desired_phase
indent|'    '
name|'desired_phase'
op|'='
string|"'contract'"
newline|'\n'
DECL|variable|removes
name|'removes'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DropTable'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'table'
op|'='
name|'table'
newline|'\n'
nl|'\n'
name|'provides'
op|'='
name|'set'
op|'('
op|'('
string|"'column'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'c'
op|'.'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
comment|'# Indexes and constraints are implicitly dropped for a DROP TABLE.'
nl|'\n'
comment|'# Add the indexcol so foreign keys get ordered correctly'
nl|'\n'
name|'for'
name|'index'
name|'in'
name|'table'
op|'.'
name|'indexes'
op|':'
newline|'\n'
indent|'            '
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'index'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'provides'
op|'.'
name|'add'
op|'('
op|'('
string|"'indexcol'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'column_names'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'constraint'
name|'in'
name|'table'
op|'.'
name|'constraints'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
op|'('
name|'sqlalchemy'
op|'.'
name|'UniqueConstraint'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'PrimaryKeyConstraint'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'constraint'
op|'.'
name|'columns'
op|']'
newline|'\n'
comment|'# SQLAlchemy can add a PrimaryKeyConstraint even if one'
nl|'\n'
comment|"# doesn't exist. In that case, column_names will be empty"
nl|'\n'
name|'if'
name|'column_names'
op|':'
newline|'\n'
indent|'                '
name|'provides'
op|'.'
name|'add'
op|'('
op|'('
string|"'indexcol'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'column_names'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'provides'
op|'='
name|'provides'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ddlop'
op|'.'
name|'drop_table'
op|'('
name|'self'
op|'.'
name|'table'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'<DropTable table_name=%r>'"
op|'%'
name|'self'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddColumn
dedent|''
dedent|''
name|'class'
name|'AddColumn'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table_name'
op|','
name|'column'
op|','
name|'desired_phase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AddColumn'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'table_name'
op|'='
name|'table_name'
newline|'\n'
name|'self'
op|'.'
name|'column'
op|'='
name|'column'
newline|'\n'
nl|'\n'
name|'if'
name|'desired_phase'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'desired_phase'
op|'='
name|'desired_phase'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
op|'('
string|"'column'"
op|','
name|'table_name'
op|','
name|'column'
op|'.'
name|'name'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'column'
op|'='
name|'self'
op|'.'
name|'column'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'ddlop'
op|'.'
name|'add_column'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'column'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'<AddColumn column={table_name=%s column_name=%s type=%r}>'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'self'
op|'.'
name|'column'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'column'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AlterColumn
dedent|''
dedent|''
name|'class'
name|'AlterColumn'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table_name'
op|','
name|'column_name'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AlterColumn'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'table_name'
op|'='
name|'table_name'
newline|'\n'
name|'self'
op|'.'
name|'column_name'
op|'='
name|'column_name'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
op|'['
op|'('
string|"'column'"
op|','
name|'table_name'
op|','
name|'column_name'
op|')'
op|']'
newline|'\n'
comment|'# Cannot alter column with foreign key'
nl|'\n'
name|'self'
op|'.'
name|'conflicts'
op|'='
op|'['
op|'('
string|"'fkcol'"
op|','
name|'table_name'
op|','
name|'column_name'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ddlop'
op|'.'
name|'alter_column'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'self'
op|'.'
name|'column_name'
op|','
op|'**'
name|'self'
op|'.'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'<AlterColumn table_name=%s column_name=%s args=%r>'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'self'
op|'.'
name|'column_name'
op|','
name|'self'
op|'.'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DropColumn
dedent|''
dedent|''
name|'class'
name|'DropColumn'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
comment|'# Always online safe since no new code should be using this column'
nl|'\n'
DECL|variable|desired_phase
indent|'    '
name|'desired_phase'
op|'='
string|"'contract'"
newline|'\n'
DECL|variable|removes
name|'removes'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'table_name'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DropColumn'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'table_name'
op|'='
name|'table_name'
newline|'\n'
name|'self'
op|'.'
name|'column'
op|'='
name|'column'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
op|'('
string|"'column'"
op|','
name|'table_name'
op|','
name|'column'
op|'.'
name|'name'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ddlop'
op|'.'
name|'drop_column'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'self'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'<DropColumn column={table_name=%s column_name=%s}>'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'table_name'
op|','
name|'self'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddIndex
dedent|''
dedent|''
name|'class'
name|'AddIndex'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'index'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AddIndex'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'table_name'
op|'='
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'index'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'index'
op|'='
name|'index'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
comment|"# Adding a unique index isn't semantically safe since code may"
nl|'\n'
comment|'# not be aware of the new constraint on the column(s).'
nl|'\n'
name|'self'
op|'.'
name|'desired_phase'
op|'='
string|"'migrate'"
name|'if'
name|'index'
op|'.'
name|'unique'
name|'else'
string|"'expand'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'index'"
op|','
name|'table_name'
op|','
name|'index'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'table_name'
op|','
name|'column_names'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
comment|'# Columns need to exist before index is created'
nl|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'set'
op|'('
op|'('
string|"'column'"
op|','
name|'table_name'
op|','
name|'name'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'column_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'index'
op|'.'
name|'name'
newline|'\n'
name|'table_name'
op|'='
name|'self'
op|'.'
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'self'
op|'.'
name|'index'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'ddlop'
op|'.'
name|'create_index'
op|'('
name|'name'
op|','
name|'table_name'
op|','
name|'column_names'
op|','
nl|'\n'
name|'unique'
op|'='
name|'self'
op|'.'
name|'index'
op|'.'
name|'unique'
op|','
op|'**'
name|'self'
op|'.'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'index'
op|'='
name|'self'
op|'.'
name|'index'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'index'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'return'
op|'('
string|"'<AddIndex index={table_name=%s name=%s column_names=(%s)} '"
nl|'\n'
string|"'args=%r>'"
op|'%'
op|'('
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
op|','
name|'index'
op|'.'
name|'name'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'column_names'
op|')'
op|','
name|'self'
op|'.'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DropIndex
dedent|''
dedent|''
name|'class'
name|'DropIndex'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|variable|removes
indent|'    '
name|'removes'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DropIndex'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'index'
op|'='
name|'index'
newline|'\n'
comment|'# This is used for conflicts'
nl|'\n'
name|'self'
op|'.'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'index'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
comment|'# Removing a unique index should happen in migrate since'
nl|'\n'
comment|"# new code may assume there isn't any restriction anymore."
nl|'\n'
name|'self'
op|'.'
name|'desired_phase'
op|'='
string|"'migrate'"
name|'if'
name|'index'
op|'.'
name|'unique'
name|'else'
string|"'contract'"
newline|'\n'
nl|'\n'
name|'table_name'
op|'='
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'index'"
op|','
name|'table_name'
op|','
name|'index'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'table_name'
op|','
name|'self'
op|'.'
name|'column_names'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
comment|"# Can't remove an index if there is a FK potentially using it"
nl|'\n'
name|'self'
op|'.'
name|'conflicts'
op|'='
name|'set'
op|'('
op|'('
string|"'fkcol'"
op|','
name|'table_name'
op|','
name|'name'
op|')'
nl|'\n'
name|'for'
name|'name'
name|'in'
name|'self'
op|'.'
name|'column_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ddlop'
op|'.'
name|'drop_index'
op|'('
name|'self'
op|'.'
name|'index'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'index'
op|'='
name|'self'
op|'.'
name|'index'
newline|'\n'
name|'return'
op|'('
string|"'<DropIndex index={table_name=%s name=%s}>'"
op|'%'
nl|'\n'
op|'('
name|'index'
op|'.'
name|'table'
op|'.'
name|'name'
op|','
name|'index'
op|'.'
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddUniqueConstraint
dedent|''
dedent|''
name|'class'
name|'AddUniqueConstraint'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'uc'
op|','
name|'desired_phase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AddUniqueConstraint'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'uc'
op|'='
name|'uc'
newline|'\n'
name|'if'
name|'desired_phase'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'desired_phase'
op|'='
name|'desired_phase'
newline|'\n'
nl|'\n'
dedent|''
name|'table'
op|'='
name|'uc'
op|'.'
name|'table'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
comment|'# So drop_constraint is ordered before against add_uc'
nl|'\n'
op|'('
string|"'uc'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'uc'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'column_names'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
comment|'# Columns need to exist before constraint is created'
nl|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'set'
op|'('
op|'('
string|"'column'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'c'
op|'.'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'uc'
op|'='
name|'self'
op|'.'
name|'uc'
newline|'\n'
name|'table'
op|'='
name|'uc'
op|'.'
name|'table'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
name|'ddlop'
op|'.'
name|'create_unique_constraint'
op|'('
name|'uc'
op|'.'
name|'name'
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'column_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'uc'
op|'='
name|'self'
op|'.'
name|'uc'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|"'<AddUniqueConstraint uc={name=%s table_name=%s '"
nl|'\n'
string|"'column_names=(%s)}>'"
op|'%'
op|'('
name|'uc'
op|'.'
name|'name'
op|','
name|'uc'
op|'.'
name|'table'
op|'.'
name|'name'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'column_names'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DropUniqueConstraint
dedent|''
dedent|''
name|'class'
name|'DropUniqueConstraint'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|variable|removes
indent|'    '
name|'removes'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'uc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DropUniqueConstraint'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'uc'
op|'='
name|'uc'
newline|'\n'
nl|'\n'
name|'table'
op|'='
name|'uc'
op|'.'
name|'table'
newline|'\n'
nl|'\n'
comment|'# So this gets ordered against Add correctly'
nl|'\n'
name|'self'
op|'.'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
op|'('
string|"'uc'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'uc'
op|'.'
name|'name'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Should be scheduled before any columns dropped'
nl|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'set'
op|'('
op|'('
string|"'column'"
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'c'
op|'.'
name|'name'
op|')'
nl|'\n'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'uc'
op|'='
name|'self'
op|'.'
name|'uc'
newline|'\n'
name|'table'
op|'='
name|'uc'
op|'.'
name|'table'
newline|'\n'
nl|'\n'
name|'ddlop'
op|'.'
name|'drop_constraint'
op|'('
name|'uc'
op|'.'
name|'name'
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'type_'
op|'='
string|"'unique'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'uc'
op|'='
name|'self'
op|'.'
name|'uc'
newline|'\n'
name|'column_names'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'uc'
op|'.'
name|'columns'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|"'<DropUniqueConstraint uc={name=%s table_name=%s '"
nl|'\n'
string|"'column_names=(%s)}>'"
op|'%'
op|'('
name|'uc'
op|'.'
name|'name'
op|','
name|'uc'
op|'.'
name|'table'
op|'.'
name|'name'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'column_names'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AddForeignKey
dedent|''
dedent|''
name|'class'
name|'AddForeignKey'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fkc'
op|','
name|'desired_phase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AddForeignKey'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fkc'
op|'='
name|'fkc'
newline|'\n'
name|'if'
name|'desired_phase'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'desired_phase'
op|'='
name|'desired_phase'
newline|'\n'
nl|'\n'
dedent|''
name|'fk'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
newline|'\n'
name|'src_table_name'
op|'='
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fk'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
op|'('
string|"'fk'"
op|','
name|'src_table_name'
op|','
name|'fkc'
op|'.'
name|'name'
op|')'
op|']'
op|')'
newline|'\n'
name|'depends'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|':'
newline|'\n'
indent|'            '
name|'provides'
op|'.'
name|'update'
op|'('
op|'['
nl|'\n'
op|'('
string|"'fkcol'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'fkcol'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'depends'
op|'.'
name|'update'
op|'('
op|'['
nl|'\n'
op|'('
string|"'column'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'column'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'provides'
op|'='
name|'provides'
newline|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'depends'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fkc'
op|'='
name|'self'
op|'.'
name|'fkc'
newline|'\n'
nl|'\n'
name|'src_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'src_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
nl|'\n'
name|'ddlop'
op|'.'
name|'create_foreign_key'
op|'('
name|'fkc'
op|'.'
name|'name'
op|','
nl|'\n'
name|'src_table_name'
op|','
name|'ref_table_name'
op|','
nl|'\n'
name|'src_column_names'
op|','
name|'ref_column_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fkc'
op|'='
name|'self'
op|'.'
name|'fkc'
newline|'\n'
name|'src_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'src_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|"'<AddForeignKey fk={name=%r src_columns=%s.(%s) '"
nl|'\n'
string|"'ref_columns=%s.(%s)}>'"
op|'%'
op|'('
name|'fkc'
op|'.'
name|'name'
op|','
name|'src_table_name'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'src_column_names'
op|')'
op|','
name|'ref_table_name'
op|','
nl|'\n'
string|"', '"
op|'.'
name|'join'
op|'('
name|'ref_column_names'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DropForeignKey
dedent|''
dedent|''
name|'class'
name|'DropForeignKey'
op|'('
name|'OperationBase'
op|')'
op|':'
newline|'\n'
DECL|variable|removes
indent|'    '
name|'removes'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fkc'
op|','
name|'desired_phase'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DropForeignKey'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fkc'
op|'='
name|'fkc'
newline|'\n'
name|'if'
name|'desired_phase'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'desired_phase'
op|'='
name|'desired_phase'
newline|'\n'
nl|'\n'
dedent|''
name|'fk'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
newline|'\n'
name|'src_table_name'
op|'='
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fk'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
name|'provides'
op|'='
name|'set'
op|'('
op|'['
op|'('
string|"'fk'"
op|','
name|'src_table_name'
op|','
name|'fkc'
op|'.'
name|'name'
op|')'
op|']'
op|')'
newline|'\n'
name|'depends'
op|'='
name|'set'
op|'('
op|'['
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'indexcol'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|':'
newline|'\n'
indent|'            '
name|'provides'
op|'.'
name|'update'
op|'('
op|'['
nl|'\n'
op|'('
string|"'fkcol'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'fkcol'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'provides'
op|'='
name|'provides'
newline|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
name|'depends'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
name|'ddlop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fkc'
op|'='
name|'self'
op|'.'
name|'fkc'
newline|'\n'
name|'table'
op|'='
name|'fkc'
op|'.'
name|'table'
newline|'\n'
nl|'\n'
name|'ddlop'
op|'.'
name|'drop_constraint'
op|'('
name|'fkc'
op|'.'
name|'name'
op|','
name|'table'
op|'.'
name|'name'
op|','
name|'type_'
op|'='
string|"'foreignkey'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fkc'
op|'='
name|'self'
op|'.'
name|'fkc'
newline|'\n'
name|'src_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'src_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_column_names'
op|'='
op|'['
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
nl|'\n'
name|'return'
op|'('
string|"'<DropForeignKey fkc={name=%s src_columns=%s.(%s) '"
nl|'\n'
string|"'ref_columns=%s.(%s)}>'"
op|'%'
nl|'\n'
op|'('
name|'fkc'
op|'.'
name|'name'
op|','
name|'src_table_name'
op|','
string|"', '"
op|'.'
name|'join'
op|'('
name|'src_column_names'
op|')'
op|','
nl|'\n'
name|'ref_table_name'
op|','
string|"', '"
op|'.'
name|'join'
op|'('
name|'ref_column_names'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_table_fk_constraints
dedent|''
dedent|''
name|'def'
name|'_table_fk_constraints'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'constraints'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'c'
op|','
name|'sqlalchemy'
op|'.'
name|'ForeignKeyConstraint'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_fkc_matches_key
dedent|''
name|'def'
name|'_fkc_matches_key'
op|'('
name|'metadata'
op|','
name|'ckey'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'table'
name|'in'
name|'metadata'
op|'.'
name|'tables'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'fkc'
name|'in'
name|'_table_fk_constraints'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fk'
op|'='
name|'fkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
newline|'\n'
name|'src_table_name'
op|'='
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
name|'ref_table_name'
op|'='
name|'fk'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
newline|'\n'
nl|'\n'
name|'for'
name|'fk'
name|'in'
name|'fkc'
op|'.'
name|'elements'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'key'
name|'in'
op|'['
op|'('
string|"'fkcol'"
op|','
name|'src_table_name'
op|','
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|')'
op|','
nl|'\n'
op|'('
string|"'fkcol'"
op|','
name|'ref_table_name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'key'
op|'=='
name|'ckey'
op|':'
newline|'\n'
indent|'                        '
name|'yield'
name|'fkc'
newline|'\n'
dedent|''
name|'break'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_compare_fkc
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_compare_fkc'
op|'('
name|'afkc'
op|','
name|'bfkc'
op|')'
op|':'
newline|'\n'
comment|'# Comparing name is best, but new foreign key constraints might not'
nl|'\n'
comment|'# have a name set yet'
nl|'\n'
indent|'    '
name|'if'
name|'afkc'
op|'.'
name|'name'
op|'!='
name|'bfkc'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'afk'
op|'='
name|'afkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
newline|'\n'
name|'bfk'
op|'='
name|'bfkc'
op|'.'
name|'elements'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
name|'afk'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
op|'!='
name|'bfk'
op|'.'
name|'parent'
op|'.'
name|'table'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'acolumns'
op|'='
op|'['
op|'('
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
name|'for'
name|'fk'
name|'in'
name|'afkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
name|'bcolumns'
op|'='
op|'['
op|'('
name|'fk'
op|'.'
name|'parent'
op|'.'
name|'name'
op|','
name|'fk'
op|'.'
name|'column'
op|'.'
name|'name'
op|')'
name|'for'
name|'fk'
name|'in'
name|'bfkc'
op|'.'
name|'elements'
op|']'
newline|'\n'
name|'if'
name|'acolumns'
op|'!='
name|'bcolumns'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Converter
dedent|''
name|'class'
name|'Converter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|_handle_add_table
indent|'    '
name|'def'
name|'_handle_add_table'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
comment|"# ('add_table', Table)"
nl|'\n'
nl|'\n'
comment|'# alembic can take some operations as part of op.create_table()'
nl|'\n'
comment|'# but not all. We also want to separate foreign keys since they'
nl|'\n'
comment|"# can potentially create a dependency on another op we haven't"
nl|'\n'
comment|'# seen yet. As a result, this one diff from alembic might be'
nl|'\n'
comment|'# split up into multiple ops we track and apply in different'
nl|'\n'
comment|'# phases.'
nl|'\n'
indent|'        '
name|'tblop'
op|'='
name|'AddTable'
op|'('
name|'table'
op|')'
newline|'\n'
name|'yield'
name|'tblop'
newline|'\n'
nl|'\n'
name|'for'
name|'uc'
name|'in'
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'constraints'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'c'
op|','
name|'sqlalchemy'
op|'.'
name|'UniqueConstraint'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'AddUniqueConstraint'
op|'('
name|'uc'
op|','
name|'desired_phase'
op|'='
name|'tblop'
op|'.'
name|'desired_phase'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'fkc'
name|'in'
name|'_table_fk_constraints'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'AddForeignKey'
op|'('
name|'fkc'
op|','
name|'desired_phase'
op|'='
name|'tblop'
op|'.'
name|'desired_phase'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_remove_table
dedent|''
dedent|''
name|'def'
name|'_handle_remove_table'
op|'('
name|'self'
op|','
name|'table'
op|')'
op|':'
newline|'\n'
comment|"# ('remove_table', Table)"
nl|'\n'
indent|'        '
name|'tblop'
op|'='
name|'DropTable'
op|'('
name|'table'
op|')'
newline|'\n'
name|'yield'
name|'tblop'
newline|'\n'
nl|'\n'
name|'for'
name|'fkc'
name|'in'
name|'_table_fk_constraints'
op|'('
name|'table'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'yield'
name|'DropForeignKey'
op|'('
name|'fkc'
op|','
name|'desired_phase'
op|'='
name|'tblop'
op|'.'
name|'desired_phase'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_add_column
dedent|''
dedent|''
name|'def'
name|'_handle_add_column'
op|'('
name|'self'
op|','
name|'schema'
op|','
name|'table_name'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
comment|"# ('add_column', schema, table_name, Column)"
nl|'\n'
nl|'\n'
indent|'        '
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'table_name'
op|'=='
string|"'migrate_version'"
op|':'
newline|'\n'
comment|'# The column added to migrate_version needs to exist after the'
nl|'\n'
comment|"# expand phase runs so locking out 'db sync' can happen."
nl|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'desired_phase'"
op|']'
op|'='
string|"'expand'"
newline|'\n'
nl|'\n'
dedent|''
name|'yield'
name|'AddColumn'
op|'('
name|'table_name'
op|','
name|'column'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_remove_column
dedent|''
name|'def'
name|'_handle_remove_column'
op|'('
name|'self'
op|','
name|'schema'
op|','
name|'table_name'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
comment|"# ('remove_column', schema, table_name, Column)"
nl|'\n'
indent|'        '
name|'yield'
name|'DropColumn'
op|'('
name|'table_name'
op|','
name|'column'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_add_constraint
dedent|''
name|'def'
name|'_handle_add_constraint'
op|'('
name|'self'
op|','
name|'constraint'
op|')'
op|':'
newline|'\n'
comment|"# ('add_constraint', UniqueConstraint)"
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
name|'sqlalchemy'
op|'.'
name|'UniqueConstraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Unknown constraint type %r'"
op|'%'
name|'constraint'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'yield'
name|'AddUniqueConstraint'
op|'('
name|'constraint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_remove_constraint
dedent|''
name|'def'
name|'_handle_remove_constraint'
op|'('
name|'self'
op|','
name|'constraint'
op|')'
op|':'
newline|'\n'
comment|"# ('remove_constraint', Constraint)"
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'constraint'
op|','
name|'sqlalchemy'
op|'.'
name|'UniqueConstraint'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|"'Unknown constraint type %r'"
op|'%'
name|'constraint'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'yield'
name|'DropUniqueConstraint'
op|'('
name|'constraint'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_add_index
dedent|''
name|'def'
name|'_handle_add_index'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
comment|"# ('add_index', Index)"
nl|'\n'
nl|'\n'
comment|'# Include any dialect specific options (mysql_length, etc)'
nl|'\n'
indent|'        '
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'dialect'
op|','
name|'options'
name|'in'
name|'index'
op|'.'
name|'dialect_options'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'options'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'args'
op|'['
string|"'%s_%s'"
op|'%'
op|'('
name|'dialect'
op|','
name|'k'
op|')'
op|']'
op|'='
name|'v'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'yield'
name|'AddIndex'
op|'('
name|'index'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_remove_index
dedent|''
name|'def'
name|'_handle_remove_index'
op|'('
name|'self'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
comment|"# ('remove_index', Index)"
nl|'\n'
indent|'        '
name|'yield'
name|'DropIndex'
op|'('
name|'index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_add_fk
dedent|''
name|'def'
name|'_handle_add_fk'
op|'('
name|'self'
op|','
name|'fkc'
op|')'
op|':'
newline|'\n'
comment|"# ('add_fk', ForeignKeyConstraint)"
nl|'\n'
indent|'        '
name|'yield'
name|'AddForeignKey'
op|'('
name|'fkc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_handle_remove_fk
dedent|''
name|'def'
name|'_handle_remove_fk'
op|'('
name|'self'
op|','
name|'fkc'
op|')'
op|':'
newline|'\n'
comment|"# ('remove_fk', ForeignKeyConstraint)"
nl|'\n'
indent|'        '
name|'yield'
name|'DropForeignKey'
op|'('
name|'fkc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_column_changes
dedent|''
name|'def'
name|'_column_changes'
op|'('
name|'self'
op|','
name|'diffs'
op|')'
op|':'
newline|'\n'
comment|'# Column change (type, nullable, etc)'
nl|'\n'
indent|'        '
name|'table_name'
op|'='
name|'diffs'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
newline|'\n'
name|'column_name'
op|'='
name|'diffs'
op|'['
number|'0'
op|']'
op|'['
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'diff'
name|'in'
name|'diffs'
op|':'
newline|'\n'
indent|'            '
name|'cmd'
op|'='
name|'diff'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'cmd'
op|'=='
string|"'modify_nullable'"
op|':'
newline|'\n'
comment|"# ('modify_nullable', None, table_name, column_name,"
nl|'\n'
comment|"#  {'existing_server_default': None,"
nl|'\n'
comment|"#   'existing_type': VARCHAR(length=36)},"
nl|'\n'
comment|'#  conn_nullable, metadata_nullable)'
nl|'\n'
indent|'                '
name|'existing_type'
op|'='
name|'diff'
op|'['
number|'4'
op|']'
op|'['
string|"'existing_type'"
op|']'
newline|'\n'
name|'nullable'
op|'='
name|'diff'
op|'['
number|'6'
op|']'
newline|'\n'
nl|'\n'
name|'args'
op|'['
string|"'existing_type'"
op|']'
op|'='
name|'existing_type'
newline|'\n'
name|'args'
op|'['
string|"'nullable'"
op|']'
op|'='
name|'nullable'
newline|'\n'
dedent|''
name|'elif'
name|'cmd'
op|'=='
string|"'modify_type'"
op|':'
newline|'\n'
comment|"# ('modify_type', None, table_name, column_name,"
nl|'\n'
comment|"#  {'existing_nullable': True,"
nl|'\n'
comment|"#   'existing_server_default': None},"
nl|'\n'
comment|'#  TINYINT(display_width=1), Boolean())'
nl|'\n'
indent|'                '
name|'existing_nullable'
op|'='
name|'diff'
op|'['
number|'4'
op|']'
op|'['
string|"'existing_nullable'"
op|']'
newline|'\n'
name|'new_type'
op|'='
name|'diff'
op|'['
number|'6'
op|']'
newline|'\n'
nl|'\n'
name|'if'
string|"'nullable'"
name|'not'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'                    '
name|'args'
op|'['
string|"'nullable'"
op|']'
op|'='
name|'existing_nullable'
newline|'\n'
dedent|''
name|'args'
op|'['
string|"'type_'"
op|']'
op|'='
name|'new_type'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Unknown alembic cmd %s'"
op|')'
op|'%'
name|'cmd'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'yield'
name|'AlterColumn'
op|'('
name|'table_name'
op|','
name|'column_name'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|convert_alembic
dedent|''
name|'def'
name|'convert_alembic'
op|'('
name|'self'
op|','
name|'diffs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'diff'
name|'in'
name|'diffs'
op|':'
newline|'\n'
comment|'# Parse out the format into something easier to use than the'
nl|'\n'
comment|'# tuple/list format that alembic returns'
nl|'\n'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'diff'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ret'
op|'='
name|'self'
op|'.'
name|'_column_changes'
op|'('
name|'diff'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'cmd'
op|'='
name|'diff'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'handler'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|"'_handle_%s'"
op|'%'
name|'cmd'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'handler'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Unknown alembic cmd %s'"
op|')'
op|'%'
name|'cmd'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ret'
op|'='
name|'handler'
op|'('
op|'*'
name|'diff'
op|'['
number|'1'
op|':'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ops'
op|'.'
name|'extend'
op|'('
name|'list'
op|'('
name|'ret'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'ops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Scheduler
dedent|''
dedent|''
name|'class'
name|'Scheduler'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'ops'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Set of operations (vertexes)'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'ops'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
comment|'# Operations that have conflicts to process'
nl|'\n'
name|'self'
op|'.'
name|'conflictops'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Indirect mapping of operations'
nl|'\n'
name|'self'
op|'.'
name|'exists'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nonexists'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Dependencies and conflicts per op (resolve via mapping)'
nl|'\n'
name|'self'
op|'.'
name|'depends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conflicts'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Edges per op'
nl|'\n'
name|'self'
op|'.'
name|'outbound'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'inbound'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'ops'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'op'
name|'in'
name|'ops'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'add'
op|'('
name|'op'
op|')'
newline|'\n'
nl|'\n'
DECL|member|handle_conflicts
dedent|''
dedent|''
dedent|''
name|'def'
name|'handle_conflicts'
op|'('
name|'self'
op|','
name|'metadata'
op|')'
op|':'
newline|'\n'
comment|'# Foreign keys can make certain operations fail. The foreign key'
nl|'\n'
comment|'# needs to be removed before the operation and then recreated'
nl|'\n'
comment|'# after the operation.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# This finds all foreign keys that currently exist and determines'
nl|'\n'
comment|'# if they could conflict, then it finds any operations that are'
nl|'\n'
comment|"# already in the schedule. If appropriate operations don't exist,"
nl|'\n'
comment|'# then they are created.'
nl|'\n'
indent|'        '
name|'for'
name|'op'
name|'in'
name|'self'
op|'.'
name|'conflictops'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'conflicts'
op|'['
name|'op'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'fkc'
name|'in'
name|'_fkc_matches_key'
op|'('
name|'metadata'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
comment|'# Find any ops that match this key'
nl|'\n'
indent|'                    '
name|'dropops'
op|'='
name|'self'
op|'.'
name|'nonexists'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'dropops'
op|'='
op|'['
name|'op'
name|'for'
name|'op'
name|'in'
name|'dropops'
nl|'\n'
name|'if'
name|'_compare_fkc'
op|'('
name|'fkc'
op|','
name|'op'
op|'.'
name|'fkc'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'addops'
op|'='
name|'self'
op|'.'
name|'exists'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'addops'
op|'='
op|'['
name|'op'
name|'for'
name|'op'
name|'in'
name|'addops'
nl|'\n'
name|'if'
name|'_compare_fkc'
op|'('
name|'fkc'
op|','
name|'op'
op|'.'
name|'fkc'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'dropops'
name|'and'
name|'not'
name|'addops'
op|':'
newline|'\n'
comment|'# No drop or add operations for this FK,'
nl|'\n'
comment|'# so create some'
nl|'\n'
indent|'                        '
name|'self'
op|'.'
name|'add'
op|'('
name|'DropForeignKey'
op|'('
name|'fkc'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'add'
op|'('
name|'AddForeignKey'
op|'('
name|'fkc'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure operation gets scheduled between the drop and add operations'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'for'
name|'op'
name|'in'
name|'self'
op|'.'
name|'conflictops'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'conflicts'
op|'['
name|'op'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'dropops'
op|'='
name|'self'
op|'.'
name|'nonexists'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'addops'
op|'='
name|'self'
op|'.'
name|'exists'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'dropop'
name|'in'
name|'dropops'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'add_edge'
op|'('
name|'op'
op|','
name|'dropop'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'addop'
name|'in'
name|'addops'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'add_edge'
op|'('
name|'addop'
op|','
name|'op'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'op'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ops'
op|'.'
name|'add'
op|'('
name|'op'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inbound'
op|'['
name|'op'
op|']'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outbound'
op|'['
name|'op'
op|']'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'op'
op|'.'
name|'removes'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'nonexists'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'exists'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'op'
op|'.'
name|'provides'
op|':'
newline|'\n'
indent|'            '
name|'mapping'
op|'.'
name|'setdefault'
op|'('
name|'key'
op|','
name|'set'
op|'('
op|')'
op|')'
op|'.'
name|'add'
op|'('
name|'op'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'depends'
op|'['
name|'op'
op|']'
op|'='
name|'op'
op|'.'
name|'depends'
newline|'\n'
nl|'\n'
name|'if'
name|'op'
op|'.'
name|'conflicts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conflicts'
op|'['
name|'op'
op|']'
op|'='
name|'op'
op|'.'
name|'conflicts'
newline|'\n'
name|'self'
op|'.'
name|'conflictops'
op|'.'
name|'add'
op|'('
name|'op'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add_edge
dedent|''
dedent|''
name|'def'
name|'add_edge'
op|'('
name|'self'
op|','
name|'f'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'inbound'
op|'['
name|'t'
op|']'
op|'.'
name|'add'
op|'('
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'outbound'
op|'['
name|'f'
op|']'
op|'.'
name|'add'
op|'('
name|'t'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sort
dedent|''
name|'def'
name|'sort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# The topological sort modifies inbound, but we can't do a deepcopy"
nl|'\n'
comment|'# since that would deepcopy the key too.'
nl|'\n'
indent|'        '
name|'inbound'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'depends'
name|'in'
name|'self'
op|'.'
name|'inbound'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'inbound'
op|'['
name|'key'
op|']'
op|'='
name|'set'
op|'('
name|'depends'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'toprocess'
op|'='
op|'['
name|'v'
name|'for'
name|'v'
name|'in'
name|'self'
op|'.'
name|'ops'
name|'if'
name|'not'
name|'inbound'
op|'['
name|'v'
op|']'
op|']'
newline|'\n'
name|'inorder'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
name|'toprocess'
op|':'
newline|'\n'
indent|'            '
name|'op'
op|'='
name|'toprocess'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'inorder'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'op'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'depop'
name|'in'
name|'self'
op|'.'
name|'outbound'
op|'['
name|'op'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'inbound'
op|'['
name|'depop'
op|']'
op|'.'
name|'remove'
op|'('
name|'op'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'inbound'
op|'['
name|'depop'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'toprocess'
op|'.'
name|'insert'
op|'('
number|'0'
op|','
name|'depop'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'del'
name|'inbound'
op|'['
name|'op'
op|']'
newline|'\n'
nl|'\n'
comment|'# Anything remaining in inbound is a dependency loop'
nl|'\n'
dedent|''
name|'if'
name|'inbound'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Dependency loop exists in database migrations'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'inorder'
newline|'\n'
nl|'\n'
DECL|member|order_drop_add
dedent|''
name|'def'
name|'order_drop_add'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Alembic will emit drop/add for indexes if the covered columns change.'
nl|'\n'
comment|'# Ensure that the add is scheduled after the drop.'
nl|'\n'
indent|'        '
name|'keys'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'exists'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'&'
name|'set'
op|'('
name|'self'
op|'.'
name|'nonexists'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'dropops'
op|'='
name|'self'
op|'.'
name|'nonexists'
op|'['
name|'key'
op|']'
newline|'\n'
name|'addops'
op|'='
name|'self'
op|'.'
name|'exists'
op|'['
name|'key'
op|']'
newline|'\n'
name|'for'
name|'dropop'
name|'in'
name|'dropops'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'addop'
name|'in'
name|'addops'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'add_edge'
op|'('
name|'addop'
op|','
name|'dropop'
op|')'
newline|'\n'
nl|'\n'
DECL|member|schedule
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'schedule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Scheduling tries to move as much of the schema changes to be run'
nl|'\n'
comment|'# while services are still running without affecting the services.'
nl|'\n'
comment|'# Otherwise known as running the schema changes online.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# There are two major factors used:'
nl|'\n'
comment|'# 1) Is the schema change compatible with running code? Adding a new'
nl|'\n'
comment|'#    table is since no code knows about it, but changing a column type'
nl|'\n'
comment|'#    may not be.'
nl|'\n'
comment|'# 2) Does the DDL statement cause the database engine to block access'
nl|'\n'
comment|'#    to the table and affect running services? This can vary greatly'
nl|'\n'
comment|'#    depending on the database software (MySQL, PostgreSQL, etc),'
nl|'\n'
comment|'#    version (5.1, 5.5, 5.6, etc) and the storage engine (MyISAM,'
nl|'\n'
comment|'#    InnoDB, etc)'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Also, dependencies between operations might keep an operation that'
nl|'\n'
comment|'# would otherwise be safe to be run online from being run online.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'order_drop_add'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Use mapping to create edges between operations'
nl|'\n'
name|'for'
name|'op'
op|','
name|'depends'
name|'in'
name|'self'
op|'.'
name|'depends'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'op'
op|'.'
name|'removes'
op|':'
newline|'\n'
indent|'                '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'nonexists'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'mapping'
op|'='
name|'self'
op|'.'
name|'exists'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'depends'
op|':'
newline|'\n'
indent|'                '
name|'refops'
op|'='
name|'mapping'
op|'.'
name|'get'
op|'('
name|'key'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'refop'
name|'in'
name|'refops'
op|':'
newline|'\n'
comment|'# Dependency is reversed for drop operations'
nl|'\n'
indent|'                    '
name|'if'
name|'op'
op|'.'
name|'removes'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'add_edge'
op|'('
name|'refop'
op|','
name|'op'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                        '
name|'self'
op|'.'
name|'add_edge'
op|'('
name|'op'
op|','
name|'refop'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'phases'
op|'='
op|'{'
nl|'\n'
string|"'expand'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'migrate'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'contract'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# TODO(johannes): Schedule operations that are safe to run online'
nl|'\n'
comment|'# depending on the capabilities of the database engine'
nl|'\n'
nl|'\n'
name|'for'
name|'op'
name|'in'
name|'self'
op|'.'
name|'sort'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'phase'
op|'='
name|'op'
op|'.'
name|'desired_phase'
newline|'\n'
nl|'\n'
name|'if'
name|'phase'
op|'=='
string|"'expand'"
op|':'
newline|'\n'
indent|'                '
name|'depphases'
op|'='
name|'set'
op|'('
name|'o'
op|'.'
name|'phase'
name|'for'
name|'o'
name|'in'
name|'self'
op|'.'
name|'outbound'
op|'['
name|'op'
op|']'
op|')'
newline|'\n'
name|'depphases'
op|'.'
name|'discard'
op|'('
name|'phase'
op|')'
newline|'\n'
name|'if'
name|'depphases'
op|':'
newline|'\n'
comment|"# Can't safely move this operation to expand because"
nl|'\n'
comment|"# a dependency isn't in expand."
nl|'\n'
indent|'                    '
name|'phase'
op|'='
string|"'migrate'"
newline|'\n'
dedent|''
dedent|''
name|'elif'
name|'phase'
op|'=='
string|"'contract'"
op|':'
newline|'\n'
comment|"# Since anything that depends on this hasn't had the"
nl|'\n'
comment|'# phase determined yet, this has to be naive for now'
nl|'\n'
indent|'                '
name|'if'
name|'self'
op|'.'
name|'inbound'
op|'['
name|'op'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'phase'
op|'='
string|"'migrate'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'op'
op|'.'
name|'phase'
op|'='
name|'phase'
newline|'\n'
name|'phases'
op|'['
name|'op'
op|'.'
name|'phase'
op|']'
op|'.'
name|'append'
op|'('
name|'op'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'phases'
op|'['
string|"'expand'"
op|']'
op|','
name|'phases'
op|'['
string|"'migrate'"
op|']'
op|','
name|'phases'
op|'['
string|"'contract'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_add_generated_tables_to_model
dedent|''
dedent|''
name|'def'
name|'_add_generated_tables_to_model'
op|'('
name|'metadata'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'tables'
op|'='
name|'dict'
op|'('
name|'metadata'
op|'.'
name|'tables'
op|')'
newline|'\n'
name|'for'
name|'table_name'
op|','
name|'table'
name|'in'
name|'tables'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'table_name'
op|'.'
name|'startswith'
op|'('
string|"'shadow_'"
op|')'
name|'or'
name|'_ignore_table'
op|'('
name|'table_name'
op|')'
op|':'
newline|'\n'
comment|"# Don't make a shadow of a shadow table or a table we"
nl|'\n'
comment|'# explicitly ignore'
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'shadow_table_name'
op|'='
string|"'shadow_'"
op|'+'
name|'table_name'
newline|'\n'
name|'if'
name|'shadow_table_name'
name|'in'
name|'tables'
op|':'
newline|'\n'
comment|'# Shadow table already exists in model'
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'columns'
op|'='
op|'['
name|'c'
op|'.'
name|'copy'
op|'('
op|')'
name|'for'
name|'c'
name|'in'
name|'table'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'sqlalchemy'
op|'.'
name|'Table'
op|'('
name|'shadow_table_name'
op|','
name|'metadata'
op|','
op|'*'
name|'columns'
op|','
nl|'\n'
name|'mysql_engine'
op|'='
string|"'InnoDB'"
op|')'
newline|'\n'
comment|'# Table is added to metadata as a side-effect of creating the object'
nl|'\n'
nl|'\n'
dedent|''
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
name|'if'
name|'repository'
op|'.'
name|'version_table'
name|'not'
name|'in'
name|'tables'
op|':'
newline|'\n'
comment|'# The existing migrate_version table is expanded with a locked'
nl|'\n'
comment|"# column so the 'db sync' command can be locked out between"
nl|'\n'
comment|"# running 'db expand' and 'db contract'."
nl|'\n'
nl|'\n'
comment|'# locked is probably more appropriate a Boolean, but there is no'
nl|'\n'
comment|'# portable way of using server_default in that case. SQLAlchemy'
nl|'\n'
comment|'# issue #1204'
nl|'\n'
indent|'        '
name|'sqlalchemy'
op|'.'
name|'Table'
op|'('
name|'repository'
op|'.'
name|'version_table'
op|','
name|'metadata'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'Column'
op|'('
string|"'repository_id'"
op|','
name|'sqlalchemy'
op|'.'
name|'String'
op|'('
number|'250'
op|')'
op|','
nl|'\n'
name|'primary_key'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'Column'
op|'('
string|"'repository_path'"
op|','
name|'sqlalchemy'
op|'.'
name|'Text'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'Column'
op|'('
string|"'version'"
op|','
name|'sqlalchemy'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'Column'
op|'('
string|"'locked'"
op|','
name|'sqlalchemy'
op|'.'
name|'Integer'
op|'('
op|')'
op|','
nl|'\n'
name|'nullable'
op|'='
name|'False'
op|','
name|'server_default'
op|'='
string|"'0'"
op|')'
op|')'
newline|'\n'
comment|'# Table is added to metadata as a side-effect of creating the object'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|_schedule_schema_changes
dedent|''
dedent|''
name|'def'
name|'_schedule_schema_changes'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Split the list of diffs into expand, migrate and contract phases."""'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'models'
op|'.'
name|'BASE'
op|'.'
name|'metadata'
newline|'\n'
name|'_add_generated_tables_to_model'
op|'('
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
comment|'# Take all of the diffs generated by Alembic and convert them into an'
nl|'\n'
comment|'# easier to use format along with some dependency information.'
nl|'\n'
name|'diffs'
op|'='
name|'alembic'
op|'.'
name|'autogenerate'
op|'.'
name|'compare_metadata'
op|'('
name|'context'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'converter'
op|'='
name|'Converter'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'='
name|'converter'
op|'.'
name|'convert_alembic'
op|'('
name|'diffs'
op|')'
newline|'\n'
nl|'\n'
name|'scheduler'
op|'='
name|'Scheduler'
op|'('
name|'ops'
op|')'
newline|'\n'
nl|'\n'
name|'reflected_metadata'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'reflected_metadata'
op|'.'
name|'reflect'
op|'('
name|'context'
op|'.'
name|'bind'
op|')'
newline|'\n'
nl|'\n'
name|'scheduler'
op|'.'
name|'handle_conflicts'
op|'('
name|'reflected_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'scheduler'
op|'.'
name|'schedule'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_expand
dedent|''
name|'def'
name|'db_expand'
op|'('
name|'dryrun'
op|'='
name|'False'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'False'
op|')'
newline|'\n'
name|'expand'
op|','
name|'migrate'
op|','
name|'contract'
op|'='
name|'_schedule_schema_changes'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'dryrun'
op|')'
newline|'\n'
name|'ddlop'
op|'='
name|'alembic'
op|'.'
name|'operations'
op|'.'
name|'Operations'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'op'
name|'in'
name|'expand'
op|':'
newline|'\n'
indent|'        '
name|'op'
op|'.'
name|'execute'
op|'('
name|'ddlop'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'dryrun'
op|':'
newline|'\n'
indent|'        '
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'_set_db_sync_lock'
op|'('
name|'repository'
op|','
name|'locked'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|"# No rows exist yet. Might be 'db sync' was never run"
nl|'\n'
indent|'            '
name|'db_version_control'
op|'('
name|'INIT_VERSION'
op|')'
newline|'\n'
name|'_set_db_sync_lock'
op|'('
name|'repository'
op|','
name|'locked'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_migrate
dedent|''
dedent|''
dedent|''
name|'def'
name|'db_migrate'
op|'('
name|'dryrun'
op|'='
name|'False'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'False'
op|')'
newline|'\n'
name|'expand'
op|','
name|'migrate'
op|','
name|'contract'
op|'='
name|'_schedule_schema_changes'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expand'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'expand phase still has operations that need to be executed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'dryrun'
op|')'
newline|'\n'
name|'ddlop'
op|'='
name|'alembic'
op|'.'
name|'operations'
op|'.'
name|'Operations'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'op'
name|'in'
name|'migrate'
op|':'
newline|'\n'
indent|'        '
name|'op'
op|'.'
name|'execute'
op|'('
name|'ddlop'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_contract
dedent|''
dedent|''
name|'def'
name|'db_contract'
op|'('
name|'dryrun'
op|'='
name|'False'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'False'
op|')'
newline|'\n'
name|'expand'
op|','
name|'migrate'
op|','
name|'contract'
op|'='
name|'_schedule_schema_changes'
op|'('
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expand'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'expand phase still has operations that need to be executed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'migrate'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'migrate phase still has operations that need to be executed'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'DatabaseMigrationError'
op|'('
name|'reason'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'_create_migration_context'
op|'('
name|'as_sql'
op|'='
name|'dryrun'
op|')'
newline|'\n'
name|'ddlop'
op|'='
name|'alembic'
op|'.'
name|'operations'
op|'.'
name|'Operations'
op|'('
name|'context'
op|')'
newline|'\n'
name|'for'
name|'op'
name|'in'
name|'contract'
op|':'
newline|'\n'
indent|'        '
name|'op'
op|'.'
name|'execute'
op|'('
name|'ddlop'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
name|'_set_db_sync_lock'
op|'('
name|'repository'
op|','
name|'locked'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_set_db_sync_version'
op|'('
name|'repository'
op|','
name|'repository'
op|'.'
name|'latest'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_process_null_records
dedent|''
name|'def'
name|'_process_null_records'
op|'('
name|'table'
op|','
name|'col_name'
op|','
name|'check_fkeys'
op|','
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queries the database and optionally deletes the NULL records.\n\n    :param table: sqlalchemy.Table object.\n    :param col_name: The name of the column to check in the table.\n    :param check_fkeys: If True, check the table for foreign keys back to the\n        instances table and if not found, return.\n    :param delete: If true, run a delete operation on the table, else just\n        query for number of records that match the NULL column.\n    :returns: The number of records processed for the table and column.\n    """'
newline|'\n'
name|'records'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'col_name'
name|'in'
name|'table'
op|'.'
name|'columns'
op|':'
newline|'\n'
comment|"# NOTE(mriedem): filter out tables that don't have a foreign key back"
nl|'\n'
comment|'# to the instances table since they could have stale data even if'
nl|'\n'
comment|"# instances.uuid wasn't NULL."
nl|'\n'
indent|'        '
name|'if'
name|'check_fkeys'
op|':'
newline|'\n'
indent|'            '
name|'fkey_found'
op|'='
name|'False'
newline|'\n'
name|'fkeys'
op|'='
name|'table'
op|'.'
name|'c'
op|'['
name|'col_name'
op|']'
op|'.'
name|'foreign_keys'
name|'or'
op|'['
op|']'
newline|'\n'
name|'for'
name|'fkey'
name|'in'
name|'fkeys'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'fkey'
op|'.'
name|'column'
op|'.'
name|'table'
op|'.'
name|'name'
op|'=='
string|"'instances'"
op|':'
newline|'\n'
indent|'                    '
name|'fkey_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'fkey_found'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'delete'
op|':'
newline|'\n'
indent|'            '
name|'records'
op|'='
name|'table'
op|'.'
name|'delete'
op|'('
op|')'
op|'.'
name|'where'
op|'('
nl|'\n'
name|'table'
op|'.'
name|'c'
op|'['
name|'col_name'
op|']'
op|'=='
name|'null'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'rowcount'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'records'
op|'='
name|'len'
op|'('
name|'list'
op|'('
nl|'\n'
name|'table'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'table'
op|'.'
name|'c'
op|'['
name|'col_name'
op|']'
op|'=='
name|'null'
op|'('
op|')'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
nl|'\n'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'records'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_null_instance_uuid_scan
dedent|''
name|'def'
name|'db_null_instance_uuid_scan'
op|'('
name|'delete'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Scans the database for NULL instance_uuid records.\n\n    :param delete: If true, delete NULL instance_uuid records found, else\n                   just query to see if they exist for reporting.\n    :returns: dict of table name to number of hits for NULL instance_uuid rows.\n    """'
newline|'\n'
name|'engine'
op|'='
name|'get_engine'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'MetaData'
op|'('
name|'bind'
op|'='
name|'engine'
op|')'
newline|'\n'
comment|"# NOTE(mriedem): We're going to load up all of the tables so we can find"
nl|'\n'
comment|'# any with an instance_uuid column since those may be foreign keys back'
nl|'\n'
comment|'# to the instances table and we want to cleanup those records first. We'
nl|'\n'
comment|"# have to do this explicitly because the foreign keys in nova aren't"
nl|'\n'
comment|'# defined with cascading deletes.'
nl|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'engine'
op|')'
newline|'\n'
comment|'# Keep track of all of the tables that had hits in the query.'
nl|'\n'
name|'processed'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'table'
name|'in'
name|'reversed'
op|'('
name|'meta'
op|'.'
name|'sorted_tables'
op|')'
op|':'
newline|'\n'
comment|'# Ignore the fixed_ips table by design.'
nl|'\n'
indent|'        '
name|'if'
name|'table'
op|'.'
name|'name'
name|'not'
name|'in'
op|'('
string|"'fixed_ips'"
op|','
string|"'shadow_fixed_ips'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'processed'
op|'['
name|'table'
op|'.'
name|'name'
op|']'
op|'='
name|'_process_null_records'
op|'('
nl|'\n'
name|'table'
op|','
string|"'instance_uuid'"
op|','
name|'check_fkeys'
op|'='
name|'True'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now process the *instances tables.'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'instances'"
op|','
string|"'shadow_instances'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'processed'
op|'['
name|'table'
op|'.'
name|'name'
op|']'
op|'='
name|'_process_null_records'
op|'('
nl|'\n'
name|'table'
op|','
string|"'uuid'"
op|','
name|'check_fkeys'
op|'='
name|'False'
op|','
name|'delete'
op|'='
name|'delete'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'processed'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|db_version_control
dedent|''
name|'def'
name|'db_version_control'
op|'('
name|'version'
op|'='
name|'None'
op|','
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'repository'
op|'='
name|'_find_migrate_repo'
op|'('
name|'database'
op|')'
newline|'\n'
name|'versioning_api'
op|'.'
name|'version_control'
op|'('
name|'get_engine'
op|'('
name|'database'
op|')'
op|','
name|'repository'
op|','
name|'version'
op|')'
newline|'\n'
name|'return'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_find_migrate_repo
dedent|''
name|'def'
name|'_find_migrate_repo'
op|'('
name|'database'
op|'='
string|"'main'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the path for the migrate repository."""'
newline|'\n'
name|'global'
name|'_REPOSITORY'
newline|'\n'
name|'rel_path'
op|'='
string|"'migrate_repo'"
newline|'\n'
name|'if'
name|'database'
op|'=='
string|"'api'"
op|':'
newline|'\n'
indent|'        '
name|'rel_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'api_migrations'"
op|','
string|"'migrate_repo'"
op|')'
newline|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|')'
op|','
nl|'\n'
name|'rel_path'
op|')'
newline|'\n'
name|'assert'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
newline|'\n'
name|'if'
name|'_REPOSITORY'
op|'.'
name|'get'
op|'('
name|'database'
op|')'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'_REPOSITORY'
op|'['
name|'database'
op|']'
op|'='
name|'Repository'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_REPOSITORY'
op|'['
name|'database'
op|']'
newline|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Utilities and helper functions."""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'hmac'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'logging'
name|'as'
name|'std_logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pyclbr'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
name|'import'
name|'saxutils'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_context'
name|'import'
name|'context'
name|'as'
name|'common_context'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'oslo_messaging'
name|'as'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'encodeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'strutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'six'
op|'.'
name|'moves'
name|'import'
name|'range'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LE'
op|','
name|'_LI'
op|','
name|'_LW'
newline|'\n'
nl|'\n'
DECL|variable|notify_decorator
name|'notify_decorator'
op|'='
string|"'nova.notifications.notify_decorator'"
newline|'\n'
nl|'\n'
DECL|variable|monkey_patch_opts
name|'monkey_patch_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'monkey_patch'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to apply monkey patching'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'monkey_patch_modules'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
nl|'\n'
string|"'nova.api.ec2.cloud:%s'"
op|'%'
op|'('
name|'notify_decorator'
op|')'
op|','
nl|'\n'
string|"'nova.compute.api:%s'"
op|'%'
op|'('
name|'notify_decorator'
op|')'
nl|'\n'
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'List of modules/decorators to monkey patch'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|utils_opts
name|'utils_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'password_length'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'12'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Length of generated instance admin passwords'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instance_usage_audit_period'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'month'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Time period to generate instance usages for.  '"
nl|'\n'
string|"'Time period must be hour, day, month or year'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'use_rootwrap_daemon'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Start and use a daemon that can run the commands that "'
nl|'\n'
string|'"need to be run with root privileges. This option is "'
nl|'\n'
string|'"usually enabled on nodes that run nova compute "'
nl|'\n'
string|'"processes"'
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rootwrap_config'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"/etc/nova/rootwrap.conf"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path to the rootwrap configuration file to use for '"
nl|'\n'
string|"'running commands as root'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'tempdir'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Explicitly specify the temporary working directory'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|workarounds_opts
name|'workarounds_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'disable_rootwrap'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'This option allows a fallback to sudo for performance '"
nl|'\n'
string|"'reasons. For example see '"
nl|'\n'
string|"'https://bugs.launchpad.net/nova/+bug/1415106'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'disable_libvirt_livesnapshot'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'When using libvirt 1.2.2 live snapshots fail '"
nl|'\n'
string|"'intermittently under load.  This config option provides '"
nl|'\n'
string|"'a mechanism to enable live snapshot while this is '"
nl|'\n'
string|"'resolved.  See '"
nl|'\n'
string|"'https://bugs.launchpad.net/nova/+bug/1334398'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'destroy_after_evacuate'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|deprecated_for_removal
name|'deprecated_for_removal'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'DEPRECATED: Whether to destroy '"
nl|'\n'
string|"'instances on startup when we suspect '"
nl|'\n'
string|"'they have previously been evacuated. This can result in '"
nl|'\n'
string|"'data loss if undesired. See '"
nl|'\n'
string|"'https://launchpad.net/bugs/1419785'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'handle_virt_lifecycle_events'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'True'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|'"Whether or not to handle events raised from the compute "'
nl|'\n'
string|'"driver\'s \'emit_event\' method. These are lifecycle "'
nl|'\n'
string|'"events raised from compute drivers that implement the "'
nl|'\n'
string|'"method. An example of a lifecycle event is an instance "'
nl|'\n'
string|'"starting or stopping. If the instance is going through "'
nl|'\n'
string|'"task state changes due to an API operation, like "'
nl|'\n'
string|'"resize, the events are ignored. However, this is an "'
nl|'\n'
string|'"advanced feature which allows the hypervisor to signal "'
nl|'\n'
string|'"to the compute service that an unexpected state change "'
nl|'\n'
string|'"has occurred in an instance and the instance can be "'
nl|'\n'
string|'"shutdown automatically - which can inherently race in "'
nl|'\n'
string|'"reboot operations or when the compute service or host "'
nl|'\n'
string|'"is rebooted, either planned or due to an unexpected "'
nl|'\n'
string|'"outage. Care should be taken when using this and "'
nl|'\n'
string|'"sync_power_state_interval is negative since then if any "'
nl|'\n'
string|'"instances are out of sync between the hypervisor and "'
nl|'\n'
string|'"the Nova database they will have to be synchronized "'
nl|'\n'
string|'"manually. See https://bugs.launchpad.net/bugs/1444630"'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
string|'""" The workarounds_opts group is for very specific reasons.\n\nIf you\'re:\n\n - Working around an issue in a system tool (e.g. libvirt or qemu) where the\n   fix is in flight/discussed in that community.\n - The tool can be/is fixed in some distributions and rather than patch the\n   code those distributions can trivially set a config option to get the\n   "correct" behavior.\n\nThen this is a good place for your workaround.\n\n.. warning::\n\n  Please use with care! Document the BugID that your workaround is paired with.\n"""'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'monkey_patch_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'utils_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_api_class'"
op|','
string|"'nova.network'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'workarounds_opts'
op|','
name|'group'
op|'='
string|"'workarounds'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
comment|'# used in limits'
nl|'\n'
DECL|variable|TIME_UNITS
name|'TIME_UNITS'
op|'='
op|'{'
nl|'\n'
string|"'SECOND'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'MINUTE'"
op|':'
number|'60'
op|','
nl|'\n'
string|"'HOUR'"
op|':'
number|'3600'
op|','
nl|'\n'
string|"'DAY'"
op|':'
number|'86400'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_IS_NEUTRON
name|'_IS_NEUTRON'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|synchronized
name|'synchronized'
op|'='
name|'lockutils'
op|'.'
name|'synchronized_with_prefix'
op|'('
string|"'nova-'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SM_IMAGE_PROP_PREFIX
name|'SM_IMAGE_PROP_PREFIX'
op|'='
string|'"image_"'
newline|'\n'
DECL|variable|SM_INHERITABLE_KEYS
name|'SM_INHERITABLE_KEYS'
op|'='
op|'('
nl|'\n'
string|"'min_ram'"
op|','
string|"'min_disk'"
op|','
string|"'disk_format'"
op|','
string|"'container_format'"
op|','
nl|'\n'
op|')'
newline|'\n'
comment|"# Keys which hold large structured data that won't fit in the"
nl|'\n'
comment|'# size constraints of the system_metadata table, so we avoid'
nl|'\n'
comment|'# storing and/or loading them.'
nl|'\n'
DECL|variable|SM_SKIP_KEYS
name|'SM_SKIP_KEYS'
op|'='
op|'('
nl|'\n'
comment|'# Legacy names'
nl|'\n'
string|"'mappings'"
op|','
string|"'block_device_mapping'"
op|','
nl|'\n'
comment|'# Modern names'
nl|'\n'
string|"'img_mappings'"
op|','
string|"'img_block_device_mapping'"
op|','
nl|'\n'
op|')'
newline|'\n'
comment|'# Image attributes which Cinder stores in volume image metadata'
nl|'\n'
comment|'# as regular properties'
nl|'\n'
DECL|variable|VIM_IMAGE_ATTRIBUTES
name|'VIM_IMAGE_ATTRIBUTES'
op|'='
op|'('
nl|'\n'
string|"'image_id'"
op|','
string|"'image_name'"
op|','
string|"'size'"
op|','
string|"'checksum'"
op|','
nl|'\n'
string|"'container_format'"
op|','
string|"'disk_format'"
op|','
string|"'min_ram'"
op|','
string|"'min_disk'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_FILE_CACHE
name|'_FILE_CACHE'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vpn_ping
name|'def'
name|'vpn_ping'
op|'('
name|'address'
op|','
name|'port'
op|','
name|'timeout'
op|'='
number|'0.05'
op|','
name|'session_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a vpn negotiation packet and returns the server session.\n\n    Returns Boolean indicating whether the vpn_server is listening.\n    Basic packet structure is below.\n\n    Client packet (14 bytes)::\n\n         0 1      8 9  13\n        +-+--------+-----+\n        |x| cli_id |?????|\n        +-+--------+-----+\n        x = packet identifier 0x38\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n\n    Server packet (26 bytes)::\n\n         0 1      8 9  13 14    21 2225\n        +-+--------+-----+--------+----+\n        |x| srv_id |?????| cli_id |????|\n        +-+--------+-----+--------+----+\n        x = packet identifier 0x40\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n        bit 9 was 1 and the rest were 0 in testing\n\n    """'
newline|'\n'
comment|"# NOTE(tonyb) session_id isn't used for a real VPN connection so using a"
nl|'\n'
comment|'#             cryptographically weak value is fine.'
nl|'\n'
name|'if'
name|'session_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'session_id'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'0xffffffffffffffff'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
name|'data'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BQxxxxx'"
op|','
number|'0x38'
op|','
name|'session_id'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'sendto'
op|'('
name|'data'
op|','
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'settimeout'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'received'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
number|'2048'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'timeout'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'fmt'
op|'='
string|"'!BQxxxxxQxxxx'"
newline|'\n'
name|'if'
name|'len'
op|'('
name|'received'
op|')'
op|'!='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|"'Expected to receive %(exp)s bytes, '"
nl|'\n'
string|"'but actually %(act)s'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'exp'
op|'='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|','
name|'act'
op|'='
name|'len'
op|'('
name|'received'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
op|'('
name|'identifier'
op|','
name|'server_sess'
op|','
name|'client_sess'
op|')'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'fmt'
op|','
name|'received'
op|')'
newline|'\n'
name|'return'
op|'('
name|'identifier'
op|'=='
number|'0x40'
name|'and'
name|'client_sess'
op|'=='
name|'session_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_root_helper
dedent|''
name|'def'
name|'get_root_helper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'CONF'
op|'.'
name|'workarounds'
op|'.'
name|'disable_rootwrap'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
string|"'sudo'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
string|"'sudo nova-rootwrap %s'"
op|'%'
name|'CONF'
op|'.'
name|'rootwrap_config'
newline|'\n'
dedent|''
name|'return'
name|'cmd'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_rootwrap_helper
dedent|''
name|'def'
name|'_get_rootwrap_helper'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'CONF'
op|'.'
name|'use_rootwrap_daemon'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RootwrapDaemonHelper'
op|'('
name|'CONF'
op|'.'
name|'rootwrap_config'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RootwrapProcessHelper'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RootwrapProcessHelper
dedent|''
dedent|''
name|'class'
name|'RootwrapProcessHelper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|trycmd
indent|'    '
name|'def'
name|'trycmd'
op|'('
name|'self'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'root_helper'"
op|']'
op|'='
name|'get_root_helper'
op|'('
op|')'
newline|'\n'
name|'return'
name|'processutils'
op|'.'
name|'trycmd'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'root_helper'"
op|']'
op|'='
name|'get_root_helper'
op|'('
op|')'
newline|'\n'
name|'return'
name|'processutils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RootwrapDaemonHelper
dedent|''
dedent|''
name|'class'
name|'RootwrapDaemonHelper'
op|'('
name|'RootwrapProcessHelper'
op|')'
op|':'
newline|'\n'
DECL|variable|_clients
indent|'    '
name|'_clients'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'synchronized'
op|'('
string|"'daemon-client-lock'"
op|')'
newline|'\n'
DECL|member|_get_client
name|'def'
name|'_get_client'
op|'('
name|'cls'
op|','
name|'rootwrap_config'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'cls'
op|'.'
name|'_clients'
op|'['
name|'rootwrap_config'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'from'
name|'oslo_rootwrap'
name|'import'
name|'client'
newline|'\n'
name|'new_client'
op|'='
name|'client'
op|'.'
name|'Client'
op|'('
op|'['
nl|'\n'
string|'"sudo"'
op|','
string|'"nova-rootwrap-daemon"'
op|','
name|'rootwrap_config'
op|']'
op|')'
newline|'\n'
name|'cls'
op|'.'
name|'_clients'
op|'['
name|'rootwrap_config'
op|']'
op|'='
name|'new_client'
newline|'\n'
name|'return'
name|'new_client'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'rootwrap_config'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'client'
op|'='
name|'self'
op|'.'
name|'_get_client'
op|'('
name|'rootwrap_config'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trycmd
dedent|''
name|'def'
name|'trycmd'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'discard_warnings'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'discard_warnings'"
op|','
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
name|'self'
op|'.'
name|'execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'failed'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'exn'
op|':'
newline|'\n'
indent|'            '
name|'out'
op|','
name|'err'
op|'='
string|"''"
op|','
name|'six'
op|'.'
name|'text_type'
op|'('
name|'exn'
op|')'
newline|'\n'
name|'failed'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'failed'
name|'and'
name|'discard_warnings'
name|'and'
name|'err'
op|':'
newline|'\n'
comment|'# Handle commands that output to stderr but otherwise succeed'
nl|'\n'
indent|'            '
name|'err'
op|'='
string|"''"
newline|'\n'
dedent|''
name|'return'
name|'out'
op|','
name|'err'
newline|'\n'
nl|'\n'
DECL|member|execute
dedent|''
name|'def'
name|'execute'
op|'('
name|'self'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(dims): This method is to provide compatibility with the'
nl|'\n'
comment|'# processutils.execute interface. So that calling daemon or direct'
nl|'\n'
comment|'# rootwrap to honor the same set of flags in kwargs and to ensure'
nl|'\n'
comment|"# that we don't regress any current behavior."
nl|'\n'
indent|'        '
name|'cmd'
op|'='
op|'['
name|'str'
op|'('
name|'c'
op|')'
name|'for'
name|'c'
name|'in'
name|'cmd'
op|']'
newline|'\n'
name|'loglevel'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'loglevel'"
op|','
name|'std_logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
name|'log_errors'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'log_errors'"
op|','
name|'None'
op|')'
newline|'\n'
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'delay_on_retry'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'delay_on_retry'"
op|','
name|'True'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'attempts'"
op|','
number|'1'
op|')'
newline|'\n'
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'ignore_exit_code'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'check_exit_code'
op|','
name|'bool'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ignore_exit_code'
op|'='
name|'not'
name|'check_exit_code'
newline|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'check_exit_code'
op|','
name|'int'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'check_exit_code'
op|'='
op|'['
name|'check_exit_code'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sanitized_cmd'
op|'='
name|'strutils'
op|'.'
name|'mask_password'
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_LI'
op|'('
string|"'Executing RootwrapDaemonHelper.execute '"
nl|'\n'
string|"'cmd=[%(cmd)r] kwargs=[%(kwargs)r]'"
op|')'
op|','
nl|'\n'
op|'{'
string|"'cmd'"
op|':'
name|'sanitized_cmd'
op|','
string|"'kwargs'"
op|':'
name|'kwargs'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'attempts'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'attempts'
op|'-='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'log'
op|'('
name|'loglevel'
op|','
name|'_'
op|'('
string|"'Running cmd (subprocess): %s'"
op|')'
op|','
nl|'\n'
name|'sanitized_cmd'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'returncode'
op|','
name|'out'
op|','
name|'err'
op|')'
op|'='
name|'self'
op|'.'
name|'client'
op|'.'
name|'execute'
op|'('
nl|'\n'
name|'cmd'
op|','
name|'process_input'
op|')'
newline|'\n'
nl|'\n'
name|'end_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'LOG'
op|'.'
name|'log'
op|'('
name|'loglevel'
op|','
nl|'\n'
string|'\'CMD "%(sanitized_cmd)s" returned: %(return_code)s \''
nl|'\n'
string|"'in %(end_time)0.3fs'"
op|','
nl|'\n'
op|'{'
string|"'sanitized_cmd'"
op|':'
name|'sanitized_cmd'
op|','
nl|'\n'
string|"'return_code'"
op|':'
name|'returncode'
op|','
nl|'\n'
string|"'end_time'"
op|':'
name|'end_time'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'ignore_exit_code'
name|'and'
name|'returncode'
name|'not'
name|'in'
name|'check_exit_code'
op|':'
newline|'\n'
indent|'                    '
name|'out'
op|'='
name|'strutils'
op|'.'
name|'mask_password'
op|'('
name|'out'
op|')'
newline|'\n'
name|'err'
op|'='
name|'strutils'
op|'.'
name|'mask_password'
op|'('
name|'err'
op|')'
newline|'\n'
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
nl|'\n'
name|'exit_code'
op|'='
name|'returncode'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'out'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'err'
op|','
nl|'\n'
name|'cmd'
op|'='
name|'sanitized_cmd'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'out'
op|','
name|'err'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|'# if we want to always log the errors or if this is'
nl|'\n'
comment|'# the final attempt that failed and we want to log that.'
nl|'\n'
indent|'                '
name|'if'
name|'log_errors'
op|'=='
name|'processutils'
op|'.'
name|'LOG_ALL_ERRORS'
name|'or'
op|'('
nl|'\n'
name|'log_errors'
op|'=='
name|'processutils'
op|'.'
name|'LOG_FINAL_ERROR'
name|'and'
nl|'\n'
name|'not'
name|'attempts'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'format'
op|'='
name|'_'
op|'('
string|"'%(desc)r\\ncommand: %(cmd)r\\n'"
nl|'\n'
string|"'exit code: %(code)r\\nstdout: %(stdout)r\\n'"
nl|'\n'
string|"'stderr: %(stderr)r'"
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'log'
op|'('
name|'loglevel'
op|','
name|'format'
op|','
op|'{'
string|'"desc"'
op|':'
name|'err'
op|'.'
name|'description'
op|','
nl|'\n'
string|'"cmd"'
op|':'
name|'err'
op|'.'
name|'cmd'
op|','
nl|'\n'
string|'"code"'
op|':'
name|'err'
op|'.'
name|'exit_code'
op|','
nl|'\n'
string|'"stdout"'
op|':'
name|'err'
op|'.'
name|'stdout'
op|','
nl|'\n'
string|'"stderr"'
op|':'
name|'err'
op|'.'
name|'stderr'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'attempts'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'log'
op|'('
name|'loglevel'
op|','
name|'_'
op|'('
string|"'%r failed. Not Retrying.'"
op|')'
op|','
nl|'\n'
name|'sanitized_cmd'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'log'
op|'('
name|'loglevel'
op|','
name|'_'
op|'('
string|"'%r failed. Retrying.'"
op|')'
op|','
nl|'\n'
name|'sanitized_cmd'
op|')'
newline|'\n'
name|'if'
name|'delay_on_retry'
op|':'
newline|'\n'
indent|'                        '
name|'time'
op|'.'
name|'sleep'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'20'
op|','
number|'200'
op|')'
op|'/'
number|'100.0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|execute
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience wrapper around oslo\'s execute() method."""'
newline|'\n'
name|'if'
string|"'run_as_root'"
name|'in'
name|'kwargs'
name|'and'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'run_as_root'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'use_rootwrap_daemon'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'RootwrapDaemonHelper'
op|'('
name|'CONF'
op|'.'
name|'rootwrap_config'
op|')'
op|'.'
name|'execute'
op|'('
nl|'\n'
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'RootwrapProcessHelper'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'processutils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_execute
dedent|''
name|'def'
name|'ssh_execute'
op|'('
name|'dest'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience wrapper to execute ssh command."""'
newline|'\n'
name|'ssh_cmd'
op|'='
op|'['
string|"'ssh'"
op|','
string|"'-o'"
op|','
string|"'BatchMode=yes'"
op|']'
newline|'\n'
name|'ssh_cmd'
op|'.'
name|'append'
op|'('
name|'dest'
op|')'
newline|'\n'
name|'ssh_cmd'
op|'.'
name|'extend'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'execute'
op|'('
op|'*'
name|'ssh_cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|trycmd
dedent|''
name|'def'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience wrapper around oslo\'s trycmd() method."""'
newline|'\n'
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'run_as_root'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'CONF'
op|'.'
name|'use_rootwrap_daemon'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'RootwrapDaemonHelper'
op|'('
name|'CONF'
op|'.'
name|'rootwrap_config'
op|')'
op|'.'
name|'trycmd'
op|'('
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'RootwrapProcessHelper'
op|'('
op|')'
op|'.'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'processutils'
op|'.'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|novadir
dedent|''
name|'def'
name|'novadir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'nova'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'nova'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'split'
op|'('
string|"'nova/__init__.py'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_uid
dedent|''
name|'def'
name|'generate_uid'
op|'('
name|'topic'
op|','
name|'size'
op|'='
number|'8'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'characters'
op|'='
string|"'01234567890abcdefghijklmnopqrstuvwxyz'"
newline|'\n'
name|'choices'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'characters'
op|')'
name|'for'
name|'_x'
name|'in'
name|'range'
op|'('
name|'size'
op|')'
op|']'
newline|'\n'
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'topic'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'choices'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Default symbols to use for passwords. Avoids visually confusing characters.'
nl|'\n'
comment|'# ~6 bits per symbol'
nl|'\n'
DECL|variable|DEFAULT_PASSWORD_SYMBOLS
dedent|''
name|'DEFAULT_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0,1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|','
comment|'# Removed: I, O'
nl|'\n'
string|"'abcdefghijkmnopqrstuvwxyz'"
op|')'
comment|'# Removed: l'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ~5 bits per symbol'
nl|'\n'
DECL|variable|EASIER_PASSWORD_SYMBOLS
name|'EASIER_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0, 1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|')'
comment|'# Removed: I, O'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_completed_audit_period
name|'def'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
name|'None'
op|','
name|'before'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This method gives you the most recently *completed* audit period.\n\n    arguments:\n            units: string, one of \'hour\', \'day\', \'month\', \'year\'\n                    Periods normally begin at the beginning (UTC) of the\n                    period unit (So a \'day\' period begins at midnight UTC,\n                    a \'month\' unit on the 1st, a \'year\' on Jan, 1)\n                    unit string may be appended with an optional offset\n                    like so:  \'day@18\'  This will begin the period at 18:00\n                    UTC.  \'month@15\' starts a monthly period on the 15th,\n                    and year@3 begins a yearly one on March 1st.\n            before: Give the audit period most recently completed before\n                    <timestamp>. Defaults to now.\n\n\n    returns:  2 tuple of datetimes (begin, end)\n              The begin timestamp of this audit period is the same as the\n              end of the previous.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|'='
name|'CONF'
op|'.'
name|'instance_usage_audit_period'
newline|'\n'
nl|'\n'
dedent|''
name|'offset'
op|'='
number|'0'
newline|'\n'
name|'if'
string|"'@'"
name|'in'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|','
name|'offset'
op|'='
name|'unit'
op|'.'
name|'split'
op|'('
string|'"@"'
op|','
number|'1'
op|')'
newline|'\n'
name|'offset'
op|'='
name|'int'
op|'('
name|'offset'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'before'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'before'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
name|'not'
name|'in'
op|'('
string|"'month'"
op|','
string|"'day'"
op|','
string|"'year'"
op|','
string|"'hour'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Time period must be hour, day, month or year'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
op|'=='
string|"'month'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'rightnow'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'                '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
dedent|''
name|'year'
op|'='
name|'end'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'end'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'month'
op|'='
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
name|'month'
op|'='
name|'month'
op|','
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'year'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
name|'offset'
op|','
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'day'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'hour'
op|'='
name|'offset'
op|','
nl|'\n'
name|'day'
op|'='
name|'rightnow'
op|'.'
name|'day'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'hour'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'rightnow'
op|'.'
name|'replace'
op|'('
name|'minute'
op|'='
name|'offset'
op|','
name|'second'
op|'='
number|'0'
op|','
name|'microsecond'
op|'='
number|'0'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'begin'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_password
dedent|''
name|'def'
name|'generate_password'
op|'('
name|'length'
op|'='
name|'None'
op|','
name|'symbolgroups'
op|'='
name|'DEFAULT_PASSWORD_SYMBOLS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a random password from the supplied symbol groups.\n\n    At least one symbol from each group will be included. Unpredictable\n    results if length is less than the number of symbol groups.\n\n    Believed to be reasonably secure (with a reasonable password length!)\n\n    """'
newline|'\n'
name|'if'
name|'length'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'length'
op|'='
name|'CONF'
op|'.'
name|'password_length'
newline|'\n'
nl|'\n'
dedent|''
name|'r'
op|'='
name|'random'
op|'.'
name|'SystemRandom'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): Some password policies require at least one character'
nl|'\n'
comment|'# from each group of symbols, so start off with one random character'
nl|'\n'
comment|'# from each symbol group'
nl|'\n'
name|'password'
op|'='
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'symbolgroups'
op|']'
newline|'\n'
comment|'# If length < len(symbolgroups), the leading characters will only'
nl|'\n'
comment|'# be from the first length groups. Try our best to not be predictable'
nl|'\n'
comment|'# by shuffling and then truncating.'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
name|'password'
op|'='
name|'password'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
name|'length'
op|'-='
name|'len'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
comment|'# then fill with random characters from all symbol groups'
nl|'\n'
name|'symbols'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'symbolgroups'
op|')'
newline|'\n'
name|'password'
op|'.'
name|'extend'
op|'('
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'symbols'
op|')'
name|'for'
name|'_i'
name|'in'
name|'range'
op|'('
name|'length'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# finally shuffle to ensure first x characters aren't from a"
nl|'\n'
comment|'# predictable group'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_my_linklocal
dedent|''
name|'def'
name|'get_my_linklocal'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if_str'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'-o'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'condition'
op|'='
string|"'\\s+inet6\\s+([0-9a-f:]+)/\\d+\\s+scope\\s+link'"
newline|'\n'
name|'links'
op|'='
op|'['
name|'re'
op|'.'
name|'search'
op|'('
name|'condition'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'if_str'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
name|'address'
op|'='
op|'['
name|'w'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
name|'for'
name|'w'
name|'in'
name|'links'
name|'if'
name|'w'
name|'is'
name|'not'
name|'None'
op|']'
newline|'\n'
name|'if'
name|'address'
op|'['
number|'0'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Link Local address is not found.:%s'"
op|')'
op|'%'
name|'if_str'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Couldn\'t get Link Local IP of %(interface)s"'
nl|'\n'
string|'" :%(ex)s"'
op|')'
op|'%'
op|'{'
string|"'interface'"
op|':'
name|'interface'
op|','
string|"'ex'"
op|':'
name|'ex'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_escape
dedent|''
dedent|''
name|'def'
name|'xhtml_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Escapes a string so it is valid within XML or XHTML.\n\n    """'
newline|'\n'
name|'return'
name|'saxutils'
op|'.'
name|'escape'
op|'('
name|'value'
op|','
op|'{'
string|'\'"\''
op|':'
string|"'&quot;'"
op|','
string|'"\'"'
op|':'
string|"'&apos;'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8
dedent|''
name|'def'
name|'utf8'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Try to turn a string into utf-8 if possible.\n\n    The original code was copied from the utf8 function in\n    http://github.com/facebook/tornado/blob/master/tornado/escape.py\n\n    """'
newline|'\n'
name|'if'
name|'value'
name|'is'
name|'None'
name|'or'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'binary_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_isinstance
dedent|''
name|'def'
name|'check_isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks that obj is of type cls, and lets PyLint infer types."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Expected object of type: %s'"
op|')'
op|'%'
op|'('
name|'str'
op|'('
name|'cls'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_server_string
dedent|''
name|'def'
name|'parse_server_string'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parses the given server_string and returns a tuple of host and port.\n    If it\'s not a combination of host part and port, the port element\n    is an empty string. If the input is invalid expression, return a tuple of\n    two empty strings.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# First of all, exclude pure IPv6 address (w/o port).'
nl|'\n'
indent|'        '
name|'if'
name|'netaddr'
op|'.'
name|'valid_ipv6'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# Next, check if this is IPv6 address with a port number combination.'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|'"]:"'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'replace'
op|'('
string|"'['"
op|','
string|"''"
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|"']:'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# Third, check if this is a combination of an address and a port'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# This must be a combination of an address and a port'
nl|'\n'
dedent|''
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Invalid server_string: %s'"
op|')'
op|','
name|'server_str'
op|')'
newline|'\n'
name|'return'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv6_cidr
dedent|''
dedent|''
name|'def'
name|'is_valid_ipv6_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
op|'.'
name|'cidr'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_shortened_ipv6
dedent|''
dedent|''
name|'def'
name|'get_shortened_ipv6'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'addr'
op|'='
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'addr'
op|'.'
name|'ipv6'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_shortened_ipv6_cidr
dedent|''
name|'def'
name|'get_shortened_ipv6_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_cidr
dedent|''
name|'def'
name|'is_valid_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if address is valid\n\n    The provided address can be a IPv6 or a IPv4\n    CIDR address.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Validate the correct CIDR Address'
nl|'\n'
indent|'        '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Prior validation partially verify /xx part'
nl|'\n'
comment|'# Verify it here'
nl|'\n'
dedent|''
name|'ip_segment'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'ip_segment'
op|')'
op|'<='
number|'1'
name|'or'
nl|'\n'
name|'ip_segment'
op|'['
number|'1'
op|']'
op|'=='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_ip_version
dedent|''
name|'def'
name|'get_ip_version'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the IP version of a network (IPv4 or IPv6).\n\n    Raises AddrFormatError if invalid network.\n    """'
newline|'\n'
name|'if'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|')'
op|'.'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"IPv6"'
newline|'\n'
dedent|''
name|'elif'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|')'
op|'.'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"IPv4"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_ip_format
dedent|''
dedent|''
name|'def'
name|'safe_ip_format'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Transform ip string to "safe" format.\n\n    Will return ipv4 addresses unchanged, but will nest ipv6 addresses\n    inside square brackets.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'ip'
op|')'
op|'.'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'[%s]'"
op|'%'
name|'ip'
newline|'\n'
dedent|''
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|')'
op|':'
comment|'# hostname'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
comment|"# it's IPv4 or hostname"
nl|'\n'
dedent|''
name|'return'
name|'ip'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|monkey_patch
dedent|''
name|'def'
name|'monkey_patch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""If the CONF.monkey_patch set as True,\n    this function patches a decorator\n    for all functions in specified modules.\n    You can set decorators for each modules\n    using CONF.monkey_patch_modules.\n    The format is "Module path:Decorator function".\n    Example:\n    \'nova.api.ec2.cloud:nova.notifications.notify_decorator\'\n\n    Parameters of the decorator is as follows.\n    (See nova.notifications.notify_decorator)\n\n    name - name of the function\n    function - object of the function\n    """'
newline|'\n'
comment|'# If CONF.monkey_patch is not True, this function do nothing.'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'monkey_patch'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
DECL|function|is_method
indent|'        '
name|'def'
name|'is_method'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
comment|'# Unbound methods became regular functions on Python 3'
nl|'\n'
indent|'            '
name|'return'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'obj'
op|')'
name|'or'
name|'inspect'
op|'.'
name|'isfunction'
op|'('
name|'obj'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'is_method'
op|'='
name|'inspect'
op|'.'
name|'ismethod'
newline|'\n'
comment|'# Get list of modules and decorators'
nl|'\n'
dedent|''
name|'for'
name|'module_and_decorator'
name|'in'
name|'CONF'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|','
name|'decorator_name'
op|'='
name|'module_and_decorator'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
comment|'# import decorator function'
nl|'\n'
name|'decorator'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'decorator_name'
op|')'
newline|'\n'
name|'__import__'
op|'('
name|'module'
op|')'
newline|'\n'
comment|'# Retrieve module information using pyclbr'
nl|'\n'
name|'module_data'
op|'='
name|'pyclbr'
op|'.'
name|'readmodule_ex'
op|'('
name|'module'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'module_data'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# set the decorator for the class methods'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'pyclbr'
op|'.'
name|'Class'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'clz'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'for'
name|'method'
op|','
name|'func'
name|'in'
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'clz'
op|','
name|'is_method'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'clz'
op|','
name|'method'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|','
name|'method'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
comment|'# set the decorator for the function'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'pyclbr'
op|'.'
name|'Function'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|','
name|'key'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_to_list_dict
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'convert_to_list_dict'
op|'('
name|'lst'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a value or list into a list of dicts."""'
newline|'\n'
name|'if'
name|'not'
name|'lst'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'lst'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst'
op|'='
op|'['
name|'lst'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'{'
name|'label'
op|':'
name|'x'
op|'}'
name|'for'
name|'x'
name|'in'
name|'lst'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_dev_path
dedent|''
name|'def'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'base'
op|'='
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a path to a particular device.\n\n    >>> make_dev_path(\'xvdc\')\n    /dev/xvdc\n\n    >>> make_dev_path(\'xvdc\', 1)\n    /dev/xvdc1\n    """'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'partition'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'+='
name|'str'
op|'('
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_hostname
dedent|''
name|'def'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|','
name|'default_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a hostname which conforms to RFC-952 and RFC-1123 specs except\n       the length of hostname.\n\n       Window, Linux, and Dnsmasq has different limitation:\n\n       Windows: 255 (net_bios limits to 15, but window will truncate it)\n       Linux: 64\n       Dnsmasq: 63\n\n       Due to nova-network will leverage dnsmasq to set hostname, so we chose\n       63.\n\n       """'
newline|'\n'
nl|'\n'
DECL|function|truncate_hostname
name|'def'
name|'truncate_hostname'
op|'('
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'name'
op|')'
op|'>'
number|'63'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Hostname %(hostname)s is longer than 63, "'
nl|'\n'
string|'"truncate it to %(truncated_name)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'hostname'"
op|':'
name|'name'
op|','
string|"'truncated_name'"
op|':'
name|'name'
op|'['
op|':'
number|'63'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'name'
op|'['
op|':'
number|'63'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'hostname'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
comment|'# Remove characters outside the Unicode range U+0000-U+00FF'
nl|'\n'
indent|'        '
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'encode'
op|'('
string|"'latin-1'"
op|','
string|"'ignore'"
op|')'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'decode'
op|'('
string|"'latin-1'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[ _]'"
op|','
string|"'-'"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[^\\w.-]+'"
op|','
string|"''"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'strip'
op|'('
string|"'.-'"
op|')'
newline|'\n'
comment|'# NOTE(eliqiao): set hostname to default_display_name to avoid'
nl|'\n'
comment|'# empty hostname'
nl|'\n'
name|'if'
name|'hostname'
op|'=='
string|'""'
name|'and'
name|'default_name'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'truncate_hostname'
op|'('
name|'default_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'truncate_hostname'
op|'('
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_mutation
name|'def'
name|'temporary_mutation'
op|'('
name|'obj'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily set the attr on a particular object to a given value then\n    revert when finished.\n\n    One use of this is to temporarily set the read_deleted flag on a context\n    object:\n\n        with temporary_mutation(context, read_deleted="yes"):\n            do_something_that_needed_deleted_objects()\n    """'
newline|'\n'
DECL|function|is_dict_like
name|'def'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hasattr'
op|'('
name|'thing'
op|','
string|"'has_key'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|get
dedent|''
name|'def'
name|'get'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'thing'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|function|set_value
dedent|''
dedent|''
name|'def'
name|'set_value'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|function|delete
dedent|''
dedent|''
name|'def'
name|'delete'
op|'('
name|'thing'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'thing'
op|'['
name|'attr'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delattr'
op|'('
name|'thing'
op|','
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'NOT_PRESENT'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'old_values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'new_value'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_values'
op|'['
name|'attr'
op|']'
op|'='
name|'get'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'NOT_PRESENT'
op|')'
newline|'\n'
name|'set_value'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'new_value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'attr'
op|','
name|'old_value'
name|'in'
name|'old_values'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'old_value'
name|'is'
name|'NOT_PRESENT'
op|':'
newline|'\n'
indent|'                '
name|'delete'
op|'('
name|'obj'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'set_value'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'old_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_mac_address
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_mac_address'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate an Ethernet MAC address."""'
newline|'\n'
comment|'# NOTE(vish): We would prefer to use 0xfe here to ensure that linux'
nl|'\n'
comment|"#             bridge mac addresses don't change, but it appears to"
nl|'\n'
comment|'#             conflict with libvirt, so we use the next highest octet'
nl|'\n'
comment|'#             that has the unicast and locally administered bits set'
nl|'\n'
comment|'#             properly: 0xfa.'
nl|'\n'
comment|'#             Discussion: https://bugs.launchpad.net/nova/+bug/921838'
nl|'\n'
name|'mac'
op|'='
op|'['
number|'0xfa'
op|','
number|'0x16'
op|','
number|'0x3e'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|']'
newline|'\n'
name|'return'
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_file_as_root
dedent|''
name|'def'
name|'read_file_as_root'
op|'('
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Secure helper to read file as root."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'execute'
op|'('
string|"'cat'"
op|','
name|'file_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'FileNotFound'
op|'('
name|'file_path'
op|'='
name|'file_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_chown
name|'def'
name|'temporary_chown'
op|'('
name|'path'
op|','
name|'owner_uid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily chown a path.\n\n    :param owner_uid: UID of temporary owner (defaults to current user)\n    """'
newline|'\n'
name|'if'
name|'owner_uid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'owner_uid'
op|'='
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_uid'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
op|'.'
name|'st_uid'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'        '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'owner_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'            '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'orig_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|tempdir
name|'def'
name|'tempdir'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'argdict'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'dir'"
name|'not'
name|'in'
name|'argdict'
op|':'
newline|'\n'
indent|'        '
name|'argdict'
op|'['
string|"'dir'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'tempdir'
newline|'\n'
dedent|''
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|'**'
name|'argdict'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'tmpdir'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_LE'
op|'('
string|"'Could not remove tmpdir: %s'"
op|')'
op|','
name|'e'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|walk_class_hierarchy
dedent|''
dedent|''
dedent|''
name|'def'
name|'walk_class_hierarchy'
op|'('
name|'clazz'
op|','
name|'encountered'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Walk class hierarchy, yielding most derived classes first."""'
newline|'\n'
name|'if'
name|'not'
name|'encountered'
op|':'
newline|'\n'
indent|'        '
name|'encountered'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'for'
name|'subclass'
name|'in'
name|'clazz'
op|'.'
name|'__subclasses__'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'subclass'
name|'not'
name|'in'
name|'encountered'
op|':'
newline|'\n'
indent|'            '
name|'encountered'
op|'.'
name|'append'
op|'('
name|'subclass'
op|')'
newline|'\n'
comment|'# drill down to leaves first'
nl|'\n'
name|'for'
name|'subsubclass'
name|'in'
name|'walk_class_hierarchy'
op|'('
name|'subclass'
op|','
name|'encountered'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'subsubclass'
newline|'\n'
dedent|''
name|'yield'
name|'subclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UndoManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'UndoManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides a mechanism to facilitate rolling back a series of actions\n    when an exception is raised.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|undo_with
dedent|''
name|'def'
name|'undo_with'
op|'('
name|'self'
op|','
name|'undo_func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'.'
name|'append'
op|'('
name|'undo_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rollback
dedent|''
name|'def'
name|'_rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'undo_func'
name|'in'
name|'reversed'
op|'('
name|'self'
op|'.'
name|'undo_stack'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'undo_func'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_and_reraise
dedent|''
dedent|''
name|'def'
name|'rollback_and_reraise'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rollback a series of actions then re-raise the exception.\n\n        .. note:: (sirp) This should only be called within an\n                  exception handler.\n        """'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_rollback'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mkfs
dedent|''
dedent|''
dedent|''
name|'def'
name|'mkfs'
op|'('
name|'fs'
op|','
name|'path'
op|','
name|'label'
op|'='
name|'None'
op|','
name|'run_as_root'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format a file or block device\n\n    :param fs: Filesystem type (examples include \'swap\', \'ext3\', \'ext4\'\n               \'btrfs\', etc.)\n    :param path: Path to file or block device to format\n    :param label: Volume label to use\n    """'
newline|'\n'
name|'if'
name|'fs'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|"'mkswap'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|"'mkfs'"
op|','
string|"'-t'"
op|','
name|'fs'
op|']'
newline|'\n'
comment|'# add -F to force no interactive execute on non-block device.'
nl|'\n'
dedent|''
name|'if'
name|'fs'
name|'in'
op|'('
string|"'ext3'"
op|','
string|"'ext4'"
op|','
string|"'ntfs'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-F'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'label'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fs'
name|'in'
op|'('
string|"'msdos'"
op|','
string|"'vfat'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'label_opt'
op|'='
string|"'-n'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'label_opt'
op|'='
string|"'-L'"
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
name|'label_opt'
op|','
name|'label'
op|']'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'execute'
op|'('
op|'*'
name|'args'
op|','
name|'run_as_root'
op|'='
name|'run_as_root'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_bytes
dedent|''
name|'def'
name|'last_bytes'
op|'('
name|'file_like_object'
op|','
name|'num'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return num bytes from the end of the file, and remaining byte count.\n\n    :param file_like_object: The file to read\n    :param num: The number of bytes to return\n\n    :returns (data, remaining)\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'file_like_object'
op|'.'
name|'seek'
op|'('
op|'-'
name|'num'
op|','
name|'os'
op|'.'
name|'SEEK_END'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# seek() fails with EINVAL when trying to go before the start of the'
nl|'\n'
comment|'# file. It means that num is larger than the file size, so just'
nl|'\n'
comment|'# go to the start.'
nl|'\n'
indent|'        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EINVAL'
op|':'
newline|'\n'
indent|'            '
name|'file_like_object'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'remaining'
op|'='
name|'file_like_object'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'file_like_object'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'remaining'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_to_dict
dedent|''
name|'def'
name|'metadata_to_dict'
op|'('
name|'metadata'
op|','
name|'include_deleted'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'include_deleted'
name|'and'
name|'item'
op|'.'
name|'get'
op|'('
string|"'deleted'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'result'
op|'['
name|'item'
op|'['
string|"'key'"
op|']'
op|']'
op|'='
name|'item'
op|'['
string|"'value'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict_to_metadata
dedent|''
name|'def'
name|'dict_to_metadata'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'key'
op|'='
name|'key'
op|','
name|'value'
op|'='
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_meta
dedent|''
name|'def'
name|'instance_meta'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_sys_meta
dedent|''
dedent|''
name|'def'
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'system_metadata'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'include_deleted'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_wrapped_function
dedent|''
dedent|''
name|'def'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the method at the bottom of a stack of decorators."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'__closure__'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'function'
newline|'\n'
nl|'\n'
DECL|function|_get_wrapped_function
dedent|''
name|'def'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'__closure__'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'closure'
name|'in'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'='
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
name|'deeper_func'
op|'='
name|'_get_wrapped_function'
op|'('
name|'func'
op|')'
newline|'\n'
name|'if'
name|'deeper_func'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'deeper_func'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'closure'
op|'.'
name|'cell_contents'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|expects_func_args
dedent|''
name|'def'
name|'expects_func_args'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
DECL|function|_decorator_checker
indent|'    '
name|'def'
name|'_decorator_checker'
op|'('
name|'dec'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'dec'
op|')'
newline|'\n'
DECL|function|_decorator
name|'def'
name|'_decorator'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_f'
op|'='
name|'get_wrapped_function'
op|'('
name|'f'
op|')'
newline|'\n'
name|'arg_names'
op|','
name|'a'
op|','
name|'kw'
op|','
name|'_default'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'base_f'
op|')'
newline|'\n'
name|'if'
name|'a'
name|'or'
name|'kw'
name|'or'
name|'set'
op|'('
name|'args'
op|')'
op|'<='
name|'set'
op|'('
name|'arg_names'
op|')'
op|':'
newline|'\n'
comment|"# NOTE (ndipanov): We can't really tell if correct stuff will"
nl|'\n'
comment|"# be passed if it's a function with *args or **kwargs so"
nl|'\n'
comment|'# we still carry on and hope for the best'
nl|'\n'
indent|'                '
name|'return'
name|'dec'
op|'('
name|'f'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'TypeError'
op|'('
string|'"Decorated function %(f_name)s does not "'
nl|'\n'
string|'"have the arguments expected by the "'
nl|'\n'
string|'"decorator %(d_name)s"'
op|'%'
nl|'\n'
op|'{'
string|"'f_name'"
op|':'
name|'base_f'
op|'.'
name|'__name__'
op|','
nl|'\n'
string|"'d_name'"
op|':'
name|'dec'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'_decorator'
newline|'\n'
dedent|''
name|'return'
name|'_decorator_checker'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExceptionHelper
dedent|''
name|'class'
name|'ExceptionHelper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class to wrap another and translate the ClientExceptions raised by its\n    function calls to the actual ones.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_target'
op|'='
name|'target'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_target'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'messaging'
op|'.'
name|'ExpectedException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'six'
op|'.'
name|'reraise'
op|'('
op|'*'
name|'e'
op|'.'
name|'exc_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_string_length
dedent|''
dedent|''
name|'def'
name|'check_string_length'
op|'('
name|'value'
op|','
name|'name'
op|'='
name|'None'
op|','
name|'min_length'
op|'='
number|'0'
op|','
name|'max_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check the length of specified string\n    :param value: the value of the string\n    :param name: the name of the string\n    :param min_length: the min_length of the string\n    :param max_length: the max_length of the string\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"The input is not a string or unicode"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%s is not a string or unicode"'
op|')'
op|'%'
name|'name'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'name'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'<'
name|'min_length'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%(name)s has a minimum character requirement of "'
nl|'\n'
string|'"%(min_length)s."'
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'min_length'"
op|':'
name|'min_length'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'max_length'
name|'and'
name|'len'
op|'('
name|'value'
op|')'
op|'>'
name|'max_length'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%(name)s has more than %(max_length)s "'
nl|'\n'
string|'"characters."'
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'max_length'"
op|':'
name|'max_length'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_integer
dedent|''
dedent|''
name|'def'
name|'validate_integer'
op|'('
name|'value'
op|','
name|'name'
op|','
name|'min_value'
op|'='
name|'None'
op|','
name|'max_value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make sure that value is a valid integer, potentially within range."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'int'
op|'('
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'UnicodeEncodeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be an integer'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
op|'('
nl|'\n'
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'min_value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'<'
name|'min_value'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be >= %(min_value)d'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
op|'('
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'min_value'"
op|':'
name|'min_value'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'max_value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'>'
name|'max_value'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be <= %(max_value)d'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
op|'('
nl|'\n'
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'max_value'"
op|':'
name|'max_value'
op|'}'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|spawn
dedent|''
name|'def'
name|'spawn'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Passthrough method for eventlet.spawn.\n\n    This utility exists so that it can be stubbed for testing without\n    interfering with the service spawns.\n\n    It will also grab the context from the threadlocal store and add it to\n    the store on the new thread.  This allows for continuity in logging the\n    context when using this method to spawn a new thread.\n    """'
newline|'\n'
name|'_context'
op|'='
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|context_wrapper
name|'def'
name|'context_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|"# NOTE: If update_store is not called after spawn it won't be"
nl|'\n'
comment|'# available for the logger to pull from threadlocal storage.'
nl|'\n'
indent|'        '
name|'if'
name|'_context'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_context'
op|'.'
name|'update_store'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'context_wrapper'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|spawn_n
dedent|''
name|'def'
name|'spawn_n'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Passthrough method for eventlet.spawn_n.\n\n    This utility exists so that it can be stubbed for testing without\n    interfering with the service spawns.\n\n    It will also grab the context from the threadlocal store and add it to\n    the store on the new thread.  This allows for continuity in logging the\n    context when using this method to spawn a new thread.\n    """'
newline|'\n'
name|'_context'
op|'='
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|context_wrapper
name|'def'
name|'context_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|"# NOTE: If update_store is not called after spawn_n it won't be"
nl|'\n'
comment|'# available for the logger to pull from threadlocal storage.'
nl|'\n'
indent|'        '
name|'if'
name|'_context'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'_context'
op|'.'
name|'update_store'
op|'('
op|')'
newline|'\n'
dedent|''
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'eventlet'
op|'.'
name|'spawn_n'
op|'('
name|'context_wrapper'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_none_string
dedent|''
name|'def'
name|'is_none_string'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if a string represents a None value.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'val'
op|','
name|'six'
op|'.'
name|'string_types'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'none'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_neutron
dedent|''
name|'def'
name|'is_neutron'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
name|'if'
name|'_IS_NEUTRON'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# compatibility with Folsom/Grizzly configs'
nl|'\n'
indent|'        '
name|'cls_name'
op|'='
name|'CONF'
op|'.'
name|'network_api_class'
newline|'\n'
name|'if'
name|'cls_name'
op|'=='
string|"'nova.network.quantumv2.api.API'"
op|':'
newline|'\n'
indent|'            '
name|'cls_name'
op|'='
string|"'nova.network.neutronv2.api.API'"
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'neutronv2'
name|'import'
name|'api'
name|'as'
name|'neutron_api'
newline|'\n'
name|'_IS_NEUTRON'
op|'='
name|'issubclass'
op|'('
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'cls_name'
op|')'
op|','
nl|'\n'
name|'neutron_api'
op|'.'
name|'API'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'_IS_NEUTRON'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_auto_disk_config_disabled
dedent|''
name|'def'
name|'is_auto_disk_config_disabled'
op|'('
name|'auto_disk_config_raw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'auto_disk_config_disabled'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'auto_disk_config_raw'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'adc_lowered'
op|'='
name|'auto_disk_config_raw'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'adc_lowered'
op|'=='
string|'"disabled"'
op|':'
newline|'\n'
indent|'            '
name|'auto_disk_config_disabled'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'auto_disk_config_disabled'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_auto_disk_config_from_instance
dedent|''
name|'def'
name|'get_auto_disk_config_from_instance'
op|'('
name|'instance'
op|'='
name|'None'
op|','
name|'sys_meta'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'sys_meta'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sys_meta'
op|'.'
name|'get'
op|'('
string|'"image_auto_disk_config"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_auto_disk_config_from_image_props
dedent|''
name|'def'
name|'get_auto_disk_config_from_image_props'
op|'('
name|'image_properties'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"auto_disk_config"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_system_metadata_from_image
dedent|''
name|'def'
name|'get_system_metadata_from_image'
op|'('
name|'image_meta'
op|','
name|'flavor'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'system_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'prefix_format'
op|'='
name|'SM_IMAGE_PROP_PREFIX'
op|'+'
string|"'%s'"
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'SM_SKIP_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'new_value'
op|'='
name|'safe_truncate'
op|'('
name|'six'
op|'.'
name|'text_type'
op|'('
name|'value'
op|')'
op|','
number|'255'
op|')'
newline|'\n'
name|'system_meta'
op|'['
name|'prefix_format'
op|'%'
name|'key'
op|']'
op|'='
name|'new_value'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'image_meta'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'key'
op|'=='
string|"'min_disk'"
name|'and'
name|'flavor'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'vhd'"
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'max'
op|'('
name|'value'
name|'or'
number|'0'
op|','
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'system_meta'
op|'['
name|'prefix_format'
op|'%'
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'system_meta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_image_from_system_metadata
dedent|''
name|'def'
name|'get_image_from_system_metadata'
op|'('
name|'system_meta'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'system_meta'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'system_meta'
op|'='
name|'metadata_to_dict'
op|'('
name|'system_meta'
op|','
name|'include_deleted'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'system_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
comment|'# NOTE(xqueralt): Not sure this has to inherit all the properties or'
nl|'\n'
comment|'# just the ones we need. Leaving it for now to keep the old behaviour.'
nl|'\n'
dedent|''
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
name|'SM_IMAGE_PROP_PREFIX'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'key'
op|'='
name|'key'
op|'['
name|'len'
op|'('
name|'SM_IMAGE_PROP_PREFIX'
op|')'
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
name|'SM_SKIP_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'properties'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'='
name|'properties'
newline|'\n'
nl|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_image_metadata_from_volume
dedent|''
name|'def'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'properties'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'volume'
op|'.'
name|'get'
op|'('
string|"'volume_image_metadata'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
comment|'# Volume size is no longer related to the original image size,'
nl|'\n'
comment|'# so we take it from the volume directly. Cinder creates'
nl|'\n'
comment|'# volumes in Gb increments, and stores size in Gb, whereas'
nl|'\n'
comment|"# glance reports size in bytes. As we're returning glance"
nl|'\n'
comment|'# metadata here, we need to convert it.'
nl|'\n'
name|'image_meta'
op|'['
string|"'size'"
op|']'
op|'='
name|'volume'
op|'.'
name|'get'
op|'('
string|"'size'"
op|','
number|'0'
op|')'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
comment|'# NOTE(yjiang5): restore the basic attributes'
nl|'\n'
comment|'# NOTE(mdbooth): These values come from volume_glance_metadata'
nl|'\n'
comment|'# in cinder. This is a simple key/value table, and all values'
nl|'\n'
comment|'# are strings. We need to convert them to ints to avoid'
nl|'\n'
comment|'# unexpected type errors.'
nl|'\n'
name|'for'
name|'attr'
name|'in'
name|'VIM_IMAGE_ATTRIBUTES'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
name|'properties'
op|'.'
name|'pop'
op|'('
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'attr'
name|'in'
op|'('
string|"'min_ram'"
op|','
string|"'min_disk'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'['
name|'attr'
op|']'
op|'='
name|'int'
op|'('
name|'val'
name|'or'
number|'0'
op|')'
newline|'\n'
comment|"# NOTE(yjiang5): Always set the image status as 'active'"
nl|'\n'
comment|'# and depends on followed volume_api.check_attach() to'
nl|'\n'
comment|'# verify it. This hack should be harmless with that check.'
nl|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'['
string|"'status'"
op|']'
op|'='
string|"'active'"
newline|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_hash_str
dedent|''
name|'def'
name|'get_hash_str'
op|'('
name|'base_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns string that represents MD5 hash of base_str (in hex format).\n\n    If base_str is a Unicode string, encode it to UTF-8.\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'base_str'
op|','
name|'six'
op|'.'
name|'text_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_str'
op|'='
name|'base_str'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'base_str'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'hmac'
op|','
string|"'compare_digest'"
op|')'
op|':'
newline|'\n'
DECL|variable|constant_time_compare
indent|'    '
name|'constant_time_compare'
op|'='
name|'hmac'
op|'.'
name|'compare_digest'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|constant_time_compare
indent|'    '
name|'def'
name|'constant_time_compare'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns True if both string inputs are equal, otherwise False.\n\n        This function should take a constant amount of time regardless of\n        how many characters in the strings match.\n\n        """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'first'
op|')'
op|'!='
name|'len'
op|'('
name|'second'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'result'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'zip'
op|'('
name|'first'
op|','
name|'second'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'|='
name|'ord'
op|'('
name|'x'
op|')'
op|'^'
name|'ord'
op|'('
name|'y'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|filter_and_format_resource_metadata
dedent|''
dedent|''
name|'def'
name|'filter_and_format_resource_metadata'
op|'('
name|'resource_type'
op|','
name|'resource_list'
op|','
nl|'\n'
name|'search_filts'
op|','
name|'metadata_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get all metadata for a list of resources after filtering.\n\n    Search_filts is a list of dictionaries, where the values in the dictionary\n    can be string or regex string, or a list of strings/regex strings.\n\n    Let\'s call a dict a \'filter block\' and an item in the dict\n    a \'filter\'. A tag is returned if it matches ALL the filters in\n    a filter block. If more than one values are specified for a\n    filter, a tag is returned if it matches ATLEAST ONE value of the filter. If\n    more than one filter blocks are specified, the tag should match ALL the\n    filter blocks.\n\n    For example:\n\n        search_filts = [{\'key\': [\'key1\', \'key2\'], \'value\': \'val1\'},\n                        {\'value\': \'val2\'}]\n\n    The filter translates to \'match any tag for which\':\n        ((key=key1 AND value=val1) OR (key=key2 AND value=val1)) AND\n            (value=val2)\n\n    This example filter will never match a tag.\n\n        :param resource_type: The resource type as a string, e.g. \'instance\'\n        :param resource_list: List of resource objects\n        :param search_filts: Filters to filter metadata to be returned. Can be\n            dict (e.g. {\'key\': \'env\', \'value\': \'prod\'}, or a list of dicts\n            (e.g. [{\'key\': \'env\'}, {\'value\': \'beta\'}]. Note that the values\n            of the dict can be regular expressions.\n        :param metadata_type: Provided to search for a specific metadata type\n            (e.g. \'system_metadata\')\n\n        :returns: List of dicts where each dict is of the form {\'key\':\n            \'somekey\', \'value\': \'somevalue\', \'instance_id\':\n            \'some-instance-uuid-aaa\'} if resource_type is \'instance\'.\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'search_filts'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'search_filts'
op|'='
op|'['
name|'search_filts'
op|']'
newline|'\n'
nl|'\n'
DECL|function|_get_id
dedent|''
name|'def'
name|'_get_id'
op|'('
name|'resource'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'resource_type'
op|'=='
string|"'instance'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'resource'
op|'.'
name|'get'
op|'('
string|"'uuid'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_match_any
dedent|''
dedent|''
name|'def'
name|'_match_any'
op|'('
name|'pattern_list'
op|','
name|'string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'pattern_list'
op|','
name|'str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pattern_list'
op|'='
op|'['
name|'pattern_list'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'any'
op|'('
op|'['
name|'re'
op|'.'
name|'match'
op|'('
name|'pattern'
op|','
name|'string'
op|')'
nl|'\n'
name|'for'
name|'pattern'
name|'in'
name|'pattern_list'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_filter_metadata
dedent|''
name|'def'
name|'_filter_metadata'
op|'('
name|'resource'
op|','
name|'search_filt'
op|','
name|'input_metadata'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ids'
op|'='
name|'search_filt'
op|'.'
name|'get'
op|'('
string|"'resource_id'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'keys_filter'
op|'='
name|'search_filt'
op|'.'
name|'get'
op|'('
string|"'key'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'values_filter'
op|'='
name|'search_filt'
op|'.'
name|'get'
op|'('
string|"'value'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'output_metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'ids'
name|'and'
name|'_get_id'
op|'('
name|'resource'
op|')'
name|'not'
name|'in'
name|'ids'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'input_metadata'
op|')'
op|':'
newline|'\n'
comment|'# Both keys and value defined -- AND'
nl|'\n'
indent|'            '
name|'if'
op|'('
name|'keys_filter'
name|'and'
name|'values_filter'
name|'and'
nl|'\n'
name|'not'
name|'_match_any'
op|'('
name|'keys_filter'
op|','
name|'k'
op|')'
name|'and'
nl|'\n'
name|'not'
name|'_match_any'
op|'('
name|'values_filter'
op|','
name|'v'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
comment|'# Only keys or value is defined'
nl|'\n'
dedent|''
name|'elif'
op|'('
op|'('
name|'keys_filter'
name|'and'
name|'not'
name|'_match_any'
op|'('
name|'keys_filter'
op|','
name|'k'
op|')'
op|')'
name|'or'
nl|'\n'
op|'('
name|'values_filter'
name|'and'
name|'not'
name|'_match_any'
op|'('
name|'values_filter'
op|','
name|'v'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'output_metadata'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'return'
name|'output_metadata'
newline|'\n'
nl|'\n'
dedent|''
name|'formatted_metadata_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'res'
name|'in'
name|'resource_list'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'if'
name|'resource_type'
op|'=='
string|"'instance'"
op|':'
newline|'\n'
comment|"# NOTE(rushiagr): metadata_type should be 'metadata' or"
nl|'\n'
comment|"# 'system_metadata' if resource_type is instance. Defaulting to"
nl|'\n'
comment|"# 'metadata' if not specified."
nl|'\n'
indent|'            '
name|'if'
name|'metadata_type'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'metadata_type'
op|'='
string|"'metadata'"
newline|'\n'
dedent|''
name|'metadata'
op|'='
name|'res'
op|'.'
name|'get'
op|'('
name|'metadata_type'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'filt'
name|'in'
name|'search_filts'
op|':'
newline|'\n'
comment|'# By chaining the input to the output, the filters are'
nl|'\n'
comment|'# ANDed together'
nl|'\n'
indent|'            '
name|'metadata'
op|'='
name|'_filter_metadata'
op|'('
name|'res'
op|','
name|'filt'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'k'
op|','
name|'v'
op|')'
name|'in'
name|'metadata'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'formatted_metadata_list'
op|'.'
name|'append'
op|'('
op|'{'
string|"'key'"
op|':'
name|'k'
op|','
string|"'value'"
op|':'
name|'v'
op|','
nl|'\n'
string|"'%s_id'"
op|'%'
name|'resource_type'
op|':'
name|'_get_id'
op|'('
name|'res'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'formatted_metadata_list'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|safe_truncate
dedent|''
name|'def'
name|'safe_truncate'
op|'('
name|'value'
op|','
name|'length'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Safely truncates unicode strings such that their encoded length is\n    no greater than the length provided.\n    """'
newline|'\n'
name|'b_value'
op|'='
name|'encodeutils'
op|'.'
name|'safe_encode'
op|'('
name|'value'
op|')'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(chaochin) UTF-8 character byte size varies from 1 to 6. If'
nl|'\n'
comment|'# truncating a long byte string to 255, the last character may be'
nl|'\n'
comment|'# cut in the middle, so that UnicodeDecodeError will occur when'
nl|'\n'
comment|'# converting it back to unicode.'
nl|'\n'
name|'decode_ok'
op|'='
name|'False'
newline|'\n'
name|'while'
name|'not'
name|'decode_ok'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'u_value'
op|'='
name|'encodeutils'
op|'.'
name|'safe_decode'
op|'('
name|'b_value'
op|')'
newline|'\n'
name|'decode_ok'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'UnicodeDecodeError'
op|':'
newline|'\n'
indent|'            '
name|'b_value'
op|'='
name|'b_value'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'u_value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_cached_file
dedent|''
name|'def'
name|'read_cached_file'
op|'('
name|'filename'
op|','
name|'force_reload'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read from a file if it has been modified.\n\n    :param force_reload: Whether to reload the file.\n    :returns: A tuple with a boolean specifying if the data is fresh\n              or not.\n    """'
newline|'\n'
name|'global'
name|'_FILE_CACHE'
newline|'\n'
nl|'\n'
name|'if'
name|'force_reload'
op|':'
newline|'\n'
indent|'        '
name|'delete_cached_file'
op|'('
name|'filename'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'reloaded'
op|'='
name|'False'
newline|'\n'
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'cache_info'
op|'='
name|'_FILE_CACHE'
op|'.'
name|'setdefault'
op|'('
name|'filename'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'cache_info'
name|'or'
name|'mtime'
op|'>'
name|'cache_info'
op|'.'
name|'get'
op|'('
string|"'mtime'"
op|','
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Reloading cached file %s"'
op|','
name|'filename'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'filename'
op|')'
name|'as'
name|'fap'
op|':'
newline|'\n'
indent|'            '
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'fap'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'cache_info'
op|'['
string|"'mtime'"
op|']'
op|'='
name|'mtime'
newline|'\n'
name|'reloaded'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'reloaded'
op|','
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_cached_file
dedent|''
name|'def'
name|'delete_cached_file'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Delete cached file if present.\n\n    :param filename: filename to delete\n    """'
newline|'\n'
name|'global'
name|'_FILE_CACHE'
newline|'\n'
nl|'\n'
name|'if'
name|'filename'
name|'in'
name|'_FILE_CACHE'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'_FILE_CACHE'
op|'['
name|'filename'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isotime
dedent|''
dedent|''
name|'def'
name|'isotime'
op|'('
name|'at'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Current time as ISO string,\n    as timeutils.isotime() is deprecated\n\n    :returns: Current time in ISO format\n    """'
newline|'\n'
name|'if'
name|'not'
name|'at'
op|':'
newline|'\n'
indent|'        '
name|'at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
dedent|''
name|'date_string'
op|'='
name|'at'
op|'.'
name|'strftime'
op|'('
string|'"%Y-%m-%dT%H:%M:%S"'
op|')'
newline|'\n'
name|'tz'
op|'='
name|'at'
op|'.'
name|'tzinfo'
op|'.'
name|'tzname'
op|'('
name|'None'
op|')'
name|'if'
name|'at'
op|'.'
name|'tzinfo'
name|'else'
string|"'UTC'"
newline|'\n'
name|'date_string'
op|'+='
op|'('
string|"'Z'"
name|'if'
name|'tz'
op|'=='
string|"'UTC'"
name|'else'
name|'tz'
op|')'
newline|'\n'
name|'return'
name|'date_string'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|strtime
dedent|''
name|'def'
name|'strtime'
op|'('
name|'at'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'at'
op|'.'
name|'strftime'
op|'('
string|'"%Y-%m-%dT%H:%M:%S.%f"'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

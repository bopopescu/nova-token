begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Utilities and helper functions."""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'json'
newline|'\n'
name|'import'
name|'lockfile'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shlex'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'import'
name|'pyclbr'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
name|'import'
name|'saxutils'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'subprocess'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'version'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|'"nova.utils"'
op|')'
newline|'\n'
DECL|variable|ISO_TIME_FORMAT
name|'ISO_TIME_FORMAT'
op|'='
string|'"%Y-%m-%dT%H:%M:%SZ"'
newline|'\n'
DECL|variable|PERFECT_TIME_FORMAT
name|'PERFECT_TIME_FORMAT'
op|'='
string|'"%Y-%m-%dT%H:%M:%S.%f"'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|import_class
name|'def'
name|'import_class'
op|'('
name|'import_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a class from a string including module and class."""'
newline|'\n'
name|'mod_str'
op|','
name|'_sep'
op|','
name|'class_str'
op|'='
name|'import_str'
op|'.'
name|'rpartition'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'__import__'
op|'('
name|'mod_str'
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
name|'mod_str'
op|']'
op|','
name|'class_str'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ImportError'
op|','
name|'ValueError'
op|','
name|'AttributeError'
op|')'
op|','
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Inner Exception: %s'"
op|')'
op|','
name|'exc'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ClassNotFound'
op|'('
name|'class_name'
op|'='
name|'class_str'
op|','
name|'exception'
op|'='
name|'exc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|import_object
dedent|''
dedent|''
name|'def'
name|'import_object'
op|'('
name|'import_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns an object including a module or module and class."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'__import__'
op|'('
name|'import_str'
op|')'
newline|'\n'
name|'return'
name|'sys'
op|'.'
name|'modules'
op|'['
name|'import_str'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'cls'
op|'='
name|'import_class'
op|'('
name|'import_str'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|find_config
dedent|''
dedent|''
name|'def'
name|'find_config'
op|'('
name|'config_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Find a configuration file using the given hint.\n\n    :param config_path: Full or relative path to the config.\n    :returns: Full path of the config, if it exists.\n    :raises: `nova.exception.ConfigNotFound`\n\n    """'
newline|'\n'
name|'possible_locations'
op|'='
op|'['
nl|'\n'
name|'config_path'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'state_path'
op|','
string|'"etc"'
op|','
string|'"nova"'
op|','
name|'config_path'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'state_path'
op|','
string|'"etc"'
op|','
name|'config_path'
op|')'
op|','
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'state_path'
op|','
name|'config_path'
op|')'
op|','
nl|'\n'
string|'"/etc/nova/%s"'
op|'%'
name|'config_path'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'path'
name|'in'
name|'possible_locations'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'ConfigNotFound'
op|'('
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'config_path'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vpn_ping
dedent|''
name|'def'
name|'vpn_ping'
op|'('
name|'address'
op|','
name|'port'
op|','
name|'timeout'
op|'='
number|'0.05'
op|','
name|'session_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a vpn negotiation packet and returns the server session.\n\n    Returns False on a failure. Basic packet structure is below.\n\n    Client packet (14 bytes)::\n     0 1      8 9  13\n    +-+--------+-----+\n    |x| cli_id |?????|\n    +-+--------+-----+\n    x = packet identifier 0x38\n    cli_id = 64 bit identifier\n    ? = unknown, probably flags/padding\n\n    Server packet (26 bytes)::\n     0 1      8 9  13 14    21 2225\n    +-+--------+-----+--------+----+\n    |x| srv_id |?????| cli_id |????|\n    +-+--------+-----+--------+----+\n    x = packet identifier 0x40\n    cli_id = 64 bit identifier\n    ? = unknown, probably flags/padding\n    bit 9 was 1 and the rest were 0 in testing\n\n    """'
newline|'\n'
name|'if'
name|'session_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'session_id'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'0xffffffffffffffff'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
name|'data'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BQxxxxxx'"
op|','
number|'0x38'
op|','
name|'session_id'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'sendto'
op|'('
name|'data'
op|','
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'settimeout'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'received'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
number|'2048'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'timeout'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'fmt'
op|'='
string|"'!BQxxxxxQxxxx'"
newline|'\n'
name|'if'
name|'len'
op|'('
name|'received'
op|')'
op|'!='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
op|'('
name|'identifier'
op|','
name|'server_sess'
op|','
name|'client_sess'
op|')'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'fmt'
op|','
name|'received'
op|')'
newline|'\n'
name|'if'
name|'identifier'
op|'=='
number|'0x40'
name|'and'
name|'client_sess'
op|'=='
name|'session_id'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'server_sess'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fetchfile
dedent|''
dedent|''
name|'def'
name|'fetchfile'
op|'('
name|'url'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Fetching %s'"
op|')'
op|'%'
name|'url'
op|')'
newline|'\n'
name|'execute'
op|'('
string|"'curl'"
op|','
string|"'--fail'"
op|','
name|'url'
op|','
string|"'-o'"
op|','
name|'target'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|execute
dedent|''
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Helper method to execute command with optional retry.\n\n    :cmd                Passed to subprocess.Popen.\n    :process_input      Send to opened process.\n    :check_exit_code    Single bool, int, or list of allowed exit codes.\n                        Defaults to [0].  Raise exception.ProcessExecutionError\n                        unless program exits with one of these code.\n    :delay_on_retry     True | False. Defaults to True. If set to True, wait a\n                        short amount of time before retrying.\n    :attempts           How many times to retry cmd.\n    :run_as_root        True | False. Defaults to False. If set to True,\n                        the command is prefixed by the command specified\n                        in the root_helper FLAG.\n\n    :raises exception.Error on receiving unknown arguments\n    :raises exception.ProcessExecutionError\n\n    :returns a tuple, (stdout, stderr) from the spawned process, or None if\n             the command fails.\n    """'
newline|'\n'
nl|'\n'
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'ignore_exit_code'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'check_exit_code'
op|')'
op|'=='
name|'int'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
op|'['
name|'check_exit_code'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'check_exit_code'
op|')'
op|'=='
name|'bool'
op|':'
newline|'\n'
indent|'        '
name|'ignore_exit_code'
op|'='
name|'not'
name|'check_exit_code'
newline|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'delay_on_retry'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'delay_on_retry'"
op|','
name|'True'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'attempts'"
op|','
number|'1'
op|')'
newline|'\n'
name|'run_as_root'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'run_as_root'"
op|','
name|'False'
op|')'
newline|'\n'
name|'shell'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'shell'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Got unknown keyword args '"
nl|'\n'
string|"'to utils.execute: %r'"
op|')'
op|'%'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'run_as_root'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
name|'shlex'
op|'.'
name|'split'
op|'('
name|'FLAGS'
op|'.'
name|'root_helper'
op|')'
op|'+'
name|'list'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'cmd'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'attempts'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'attempts'
op|'-='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running cmd (subprocess): %s'"
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
name|'_PIPE'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'obj'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
nl|'\n'
name|'stdin'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'close_fds'
op|'='
name|'True'
op|','
nl|'\n'
name|'shell'
op|'='
name|'shell'
op|')'
newline|'\n'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'process_input'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'obj'
op|'.'
name|'communicate'
op|'('
name|'process_input'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'obj'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'obj'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'_returncode'
op|'='
name|'obj'
op|'.'
name|'returncode'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'if'
name|'_returncode'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Result was %s'"
op|')'
op|'%'
name|'_returncode'
op|')'
newline|'\n'
name|'if'
name|'ignore_exit_code'
op|'=='
name|'False'
name|'and'
name|'_returncode'
name|'not'
name|'in'
name|'check_exit_code'
op|':'
newline|'\n'
indent|'                    '
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
op|'='
name|'result'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|'('
nl|'\n'
name|'exit_code'
op|'='
name|'_returncode'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'attempts'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'%r failed. Retrying.'"
op|')'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'delay_on_retry'
op|':'
newline|'\n'
indent|'                    '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'20'
op|','
number|'200'
op|')'
op|'/'
number|'100.0'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# NOTE(termie): this appears to be necessary to let the subprocess'
nl|'\n'
comment|'#               call clean something up in between calls, without'
nl|'\n'
comment|'#               it two execute calls in a row hangs the second one'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_execute
dedent|''
dedent|''
dedent|''
name|'def'
name|'ssh_execute'
op|'('
name|'ssh'
op|','
name|'cmd'
op|','
name|'process_input'
op|'='
name|'None'
op|','
nl|'\n'
name|'addl_env'
op|'='
name|'None'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running cmd (SSH): %s'"
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
name|'if'
name|'addl_env'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Environment not supported over SSH'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'process_input'
op|':'
newline|'\n'
comment|'# This is (probably) fixable if we need it...'
nl|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'process_input not supported over SSH'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stdin_stream'
op|','
name|'stdout_stream'
op|','
name|'stderr_stream'
op|'='
name|'ssh'
op|'.'
name|'exec_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'stdout_stream'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
comment|"#stdin.write('process_input would go here')"
nl|'\n'
comment|'#stdin.flush()'
nl|'\n'
nl|'\n'
comment|'# NOTE(justinsb): This seems suspicious...'
nl|'\n'
comment|'# ...other SSH clients have buffering issues with this approach'
nl|'\n'
name|'stdout'
op|'='
name|'stdout_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stderr'
op|'='
name|'stderr_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stdin_stream'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'exit_status'
op|'='
name|'channel'
op|'.'
name|'recv_exit_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# exit_status == -1 if no exit code was returned'
nl|'\n'
name|'if'
name|'exit_status'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Result was %s'"
op|')'
op|'%'
name|'exit_status'
op|')'
newline|'\n'
name|'if'
name|'check_exit_code'
name|'and'
name|'exit_status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|'('
name|'exit_code'
op|'='
name|'exit_status'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|abspath
dedent|''
name|'def'
name|'abspath'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
name|'s'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|novadir
dedent|''
name|'def'
name|'novadir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'nova'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'nova'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'split'
op|'('
string|"'nova/__init__.py'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|default_flagfile
dedent|''
name|'def'
name|'default_flagfile'
op|'('
name|'filename'
op|'='
string|"'nova.conf'"
op|','
name|'args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'args'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'sys'
op|'.'
name|'argv'
newline|'\n'
dedent|''
name|'for'
name|'arg'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'arg'
op|'.'
name|'find'
op|'('
string|"'flagfile'"
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isabs'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
comment|'# turn relative filename into an absolute path'
nl|'\n'
indent|'            '
name|'script_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'inspect'
op|'.'
name|'stack'
op|'('
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'filename'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'script_dir'
op|','
name|'filename'
op|')'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'filename'
op|'='
string|'"./nova.conf"'
newline|'\n'
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'filename'
op|'='
string|"'/etc/nova/nova.conf'"
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'flagfile'
op|'='
string|"'--flagfile=%s'"
op|'%'
name|'filename'
newline|'\n'
name|'args'
op|'.'
name|'insert'
op|'('
number|'1'
op|','
name|'flagfile'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug
dedent|''
dedent|''
dedent|''
name|'def'
name|'debug'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'debug in callback: %s'"
op|')'
op|','
name|'arg'
op|')'
newline|'\n'
name|'return'
name|'arg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|runthis
dedent|''
name|'def'
name|'runthis'
op|'('
name|'prompt'
op|','
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running %s'"
op|')'
op|','
op|'('
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
op|')'
newline|'\n'
name|'rv'
op|','
name|'err'
op|'='
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_uid
dedent|''
name|'def'
name|'generate_uid'
op|'('
name|'topic'
op|','
name|'size'
op|'='
number|'8'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'characters'
op|'='
string|"'01234567890abcdefghijklmnopqrstuvwxyz'"
newline|'\n'
name|'choices'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'characters'
op|')'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'size'
op|')'
op|']'
newline|'\n'
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'topic'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'choices'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Default symbols to use for passwords. Avoids visually confusing characters.'
nl|'\n'
comment|'# ~6 bits per symbol'
nl|'\n'
DECL|variable|DEFAULT_PASSWORD_SYMBOLS
dedent|''
name|'DEFAULT_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
comment|'# Removed: 0,1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
comment|'# Removed: I, O'
nl|'\n'
string|"'abcdefghijkmnopqrstuvwxyz'"
op|')'
comment|'# Removed: l'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ~5 bits per symbol'
nl|'\n'
DECL|variable|EASIER_PASSWORD_SYMBOLS
name|'EASIER_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
comment|'# Removed: 0, 1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|')'
comment|'# Removed: I, O'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|current_audit_period
name|'def'
name|'current_audit_period'
op|'('
name|'unit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|'='
name|'FLAGS'
op|'.'
name|'instance_usage_audit_period'
newline|'\n'
dedent|''
name|'rightnow'
op|'='
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'if'
name|'unit'
name|'not'
name|'in'
op|'('
string|"'month'"
op|','
string|"'day'"
op|','
string|"'year'"
op|','
string|"'hour'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Time period must be hour, day, month or year'"
op|')'
newline|'\n'
dedent|''
name|'n'
op|'='
number|'1'
comment|'# we are currently only using multiples of 1 unit (mdragon)'
newline|'\n'
name|'if'
name|'unit'
op|'=='
string|"'month'"
op|':'
newline|'\n'
indent|'        '
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
op|'('
name|'n'
op|'//'
number|'12'
op|')'
newline|'\n'
name|'n'
op|'='
name|'n'
op|'%'
number|'12'
newline|'\n'
name|'if'
name|'n'
op|'>='
name|'rightnow'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'rightnow'
op|'.'
name|'month'
op|'-'
name|'n'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|'-'
name|'n'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
name|'month'
op|','
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'year'"
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
number|'1'
op|','
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
name|'n'
op|')'
newline|'\n'
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
number|'1'
op|','
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'day'"
op|':'
newline|'\n'
indent|'        '
name|'b'
op|'='
name|'rightnow'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
name|'n'
op|')'
newline|'\n'
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'b'
op|'.'
name|'day'
op|','
name|'month'
op|'='
name|'b'
op|'.'
name|'month'
op|','
name|'year'
op|'='
name|'b'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'rightnow'
op|'.'
name|'day'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'hour'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'rightnow'
op|'.'
name|'replace'
op|'('
name|'minute'
op|'='
number|'0'
op|','
name|'second'
op|'='
number|'0'
op|','
name|'microsecond'
op|'='
number|'0'
op|')'
newline|'\n'
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
name|'n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'begin'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|usage_from_instance
dedent|''
name|'def'
name|'usage_from_instance'
op|'('
name|'instance_ref'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'image_ref_url'
op|'='
string|'"%s/images/%s"'
op|'%'
op|'('
name|'generate_glance_url'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'usage_info'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'instance_ref'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance_ref'
op|'['
string|"'user_id'"
op|']'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_ref'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'instance_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'instance_ref'
op|'['
string|"'display_name'"
op|']'
op|','
nl|'\n'
name|'created_at'
op|'='
name|'str'
op|'('
name|'instance_ref'
op|'['
string|"'created_at'"
op|']'
op|')'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'str'
op|'('
name|'instance_ref'
op|'['
string|"'launched_at'"
op|']'
op|')'
name|'if'
name|'instance_ref'
op|'['
string|"'launched_at'"
op|']'
name|'else'
string|"''"
op|','
nl|'\n'
name|'image_ref_url'
op|'='
name|'image_ref_url'
op|','
nl|'\n'
name|'state'
op|'='
name|'instance_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
nl|'\n'
name|'state_description'
op|'='
name|'instance_ref'
op|'['
string|"'task_state'"
op|']'
name|'if'
name|'instance_ref'
op|'['
string|"'task_state'"
op|']'
name|'else'
string|"''"
op|','
nl|'\n'
name|'fixed_ips'
op|'='
op|'['
name|'a'
op|'.'
name|'address'
name|'for'
name|'a'
name|'in'
name|'instance_ref'
op|'['
string|"'fixed_ips'"
op|']'
op|']'
op|')'
newline|'\n'
name|'usage_info'
op|'.'
name|'update'
op|'('
name|'kw'
op|')'
newline|'\n'
name|'return'
name|'usage_info'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_password
dedent|''
name|'def'
name|'generate_password'
op|'('
name|'length'
op|'='
number|'20'
op|','
name|'symbols'
op|'='
name|'DEFAULT_PASSWORD_SYMBOLS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a random password from the supplied symbols.\n\n    Believed to be reasonably secure (with a reasonable password length!)\n\n    """'
newline|'\n'
name|'r'
op|'='
name|'random'
op|'.'
name|'SystemRandom'
op|'('
op|')'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'symbols'
op|')'
name|'for'
name|'_i'
name|'in'
name|'xrange'
op|'('
name|'length'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_octet
dedent|''
name|'def'
name|'last_octet'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'int'
op|'('
name|'address'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_my_linklocal
dedent|''
name|'def'
name|'get_my_linklocal'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if_str'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'-o'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'condition'
op|'='
string|"'\\s+inet6\\s+([0-9a-f:]+)/\\d+\\s+scope\\s+link'"
newline|'\n'
name|'links'
op|'='
op|'['
name|'re'
op|'.'
name|'search'
op|'('
name|'condition'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'if_str'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
name|'address'
op|'='
op|'['
name|'w'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
name|'for'
name|'w'
name|'in'
name|'links'
name|'if'
name|'w'
name|'is'
name|'not'
name|'None'
op|']'
newline|'\n'
name|'if'
name|'address'
op|'['
number|'0'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Link Local address is not found.:%s'"
op|')'
nl|'\n'
op|'%'
name|'if_str'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|'"Couldn\'t get Link Local IP of %(interface)s"'
nl|'\n'
string|'" :%(ex)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utcnow
dedent|''
dedent|''
name|'def'
name|'utcnow'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Overridable version of utils.utcnow."""'
newline|'\n'
name|'if'
name|'utcnow'
op|'.'
name|'override_time'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'utcnow'
op|'.'
name|'override_time'
newline|'\n'
dedent|''
name|'return'
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'utcnow'
op|'.'
name|'override_time'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_older_than
name|'def'
name|'is_older_than'
op|'('
name|'before'
op|','
name|'seconds'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return True if before is older than seconds."""'
newline|'\n'
name|'return'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'before'
op|'>'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
name|'seconds'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utcnow_ts
dedent|''
name|'def'
name|'utcnow_ts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Timestamp version of our utcnow function."""'
newline|'\n'
name|'return'
name|'time'
op|'.'
name|'mktime'
op|'('
name|'utcnow'
op|'('
op|')'
op|'.'
name|'timetuple'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|set_time_override
dedent|''
name|'def'
name|'set_time_override'
op|'('
name|'override_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Override utils.utcnow to return a constant time."""'
newline|'\n'
name|'utcnow'
op|'.'
name|'override_time'
op|'='
name|'override_time'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|advance_time_delta
dedent|''
name|'def'
name|'advance_time_delta'
op|'('
name|'timedelta'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Advance overriden time using a datetime.timedelta."""'
newline|'\n'
name|'assert'
op|'('
name|'not'
name|'utcnow'
op|'.'
name|'override_time'
name|'is'
name|'None'
op|')'
newline|'\n'
name|'utcnow'
op|'.'
name|'override_time'
op|'+='
name|'timedelta'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|advance_time_seconds
dedent|''
name|'def'
name|'advance_time_seconds'
op|'('
name|'seconds'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Advance overriden time by seconds."""'
newline|'\n'
name|'advance_time_delta'
op|'('
name|'datetime'
op|'.'
name|'timedelta'
op|'('
number|'0'
op|','
name|'seconds'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|clear_time_override
dedent|''
name|'def'
name|'clear_time_override'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Remove the overridden time."""'
newline|'\n'
name|'utcnow'
op|'.'
name|'override_time'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|strtime
dedent|''
name|'def'
name|'strtime'
op|'('
name|'at'
op|'='
name|'None'
op|','
name|'fmt'
op|'='
name|'PERFECT_TIME_FORMAT'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns formatted utcnow."""'
newline|'\n'
name|'if'
name|'not'
name|'at'
op|':'
newline|'\n'
indent|'        '
name|'at'
op|'='
name|'utcnow'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'at'
op|'.'
name|'strftime'
op|'('
name|'fmt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_strtime
dedent|''
name|'def'
name|'parse_strtime'
op|'('
name|'timestr'
op|','
name|'fmt'
op|'='
name|'PERFECT_TIME_FORMAT'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn a formatted time back into a datetime."""'
newline|'\n'
name|'return'
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'strptime'
op|'('
name|'timestr'
op|','
name|'fmt'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|isotime
dedent|''
name|'def'
name|'isotime'
op|'('
name|'at'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns iso formatted utcnow."""'
newline|'\n'
name|'return'
name|'strtime'
op|'('
name|'at'
op|','
name|'ISO_TIME_FORMAT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_isotime
dedent|''
name|'def'
name|'parse_isotime'
op|'('
name|'timestr'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Turn an iso formatted time back into a datetime."""'
newline|'\n'
name|'return'
name|'parse_strtime'
op|'('
name|'timestr'
op|','
name|'ISO_TIME_FORMAT'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_mailmap
dedent|''
name|'def'
name|'parse_mailmap'
op|'('
name|'mailmap'
op|'='
string|"'.mailmap'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'mailmap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'mailmap'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'and'
string|"' '"
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'                '
name|'canonical_email'
op|','
name|'alias'
op|'='
name|'l'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'mapping'
op|'['
name|'alias'
op|']'
op|'='
name|'canonical_email'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|str_dict_replace
dedent|''
name|'def'
name|'str_dict_replace'
op|'('
name|'s'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'s1'
op|','
name|'s2'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'s'
op|'.'
name|'replace'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LazyPluggable
dedent|''
name|'class'
name|'LazyPluggable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A pluggable backend loaded lazily based on some value."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pivot'
op|','
op|'**'
name|'backends'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__backends'
op|'='
name|'backends'
newline|'\n'
name|'self'
op|'.'
name|'__pivot'
op|'='
name|'pivot'
newline|'\n'
name|'self'
op|'.'
name|'__backend'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__get_backend
dedent|''
name|'def'
name|'__get_backend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'__backend'
op|':'
newline|'\n'
indent|'            '
name|'backend_name'
op|'='
name|'self'
op|'.'
name|'__pivot'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'backend_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'__backends'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
name|'_'
op|'('
string|"'Invalid backend: %s'"
op|')'
op|'%'
name|'backend_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'backend'
op|'='
name|'self'
op|'.'
name|'__backends'
op|'['
name|'backend_name'
op|']'
newline|'\n'
name|'if'
name|'type'
op|'('
name|'backend'
op|')'
op|'=='
name|'type'
op|'('
name|'tuple'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'__backend'
op|'='
name|'__import__'
op|'('
name|'name'
op|','
name|'None'
op|','
name|'None'
op|','
name|'fromlist'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'backend %s'"
op|')'
op|','
name|'self'
op|'.'
name|'__backend'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'__backend'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
name|'self'
op|'.'
name|'__get_backend'
op|'('
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'backend'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCallDone
dedent|''
dedent|''
name|'class'
name|'LoopingCallDone'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exception to break out and stop a LoopingCall.\n\n    The poll-function passed to LoopingCall can raise this exception to\n    break out of the loop normally. This is somewhat analogous to\n    StopIteration.\n\n    An optional return-value can be included as the argument to the exception;\n    this return-value will be returned by LoopingCall.wait()\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'retvalue'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param retvalue: Value that LoopingCall.wait() should return."""'
newline|'\n'
name|'self'
op|'.'
name|'retvalue'
op|'='
name|'retvalue'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCall
dedent|''
dedent|''
name|'class'
name|'LoopingCall'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kw'
op|'='
name|'kw'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'interval'
op|','
name|'now'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
name|'done'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_inner
name|'def'
name|'_inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'now'
op|':'
newline|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'interval'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'f'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'interval'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'LoopingCallDone'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
name|'e'
op|'.'
name|'retvalue'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'logging'
op|'.'
name|'exception'
op|'('
string|"'in looping call'"
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'done'
op|'.'
name|'send'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'done'
op|'='
name|'done'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'_inner'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'done'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'done'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_escape
dedent|''
dedent|''
name|'def'
name|'xhtml_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Escapes a string so it is valid within XML or XHTML.\n\n    Code is directly from the utf8 function in\n    http://github.com/facebook/tornado/blob/master/tornado/escape.py\n\n    """'
newline|'\n'
name|'return'
name|'saxutils'
op|'.'
name|'escape'
op|'('
name|'value'
op|','
op|'{'
string|'\'"\''
op|':'
string|"'&quot;'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8
dedent|''
name|'def'
name|'utf8'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Try to turn a string into utf-8 if possible.\n\n    Code is directly from the utf8 function in\n    http://github.com/facebook/tornado/blob/master/tornado/escape.py\n\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'value'
op|','
name|'convert_instances'
op|'='
name|'False'
op|','
name|'level'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a complex object into primitives.\n\n    Handy for JSON serialization. We can optionally handle instances,\n    but since this is a recursive function, we could have cyclical\n    data structures.\n\n    To handle cyclical data structures we could track the actual objects\n    visited in a set, but not all objects are hashable. Instead we just\n    track the depth of the object inspections and don\'t go too deep.\n\n    Therefore, convert_instances=True is lossy ... be aware.\n\n    """'
newline|'\n'
name|'nasty'
op|'='
op|'['
name|'inspect'
op|'.'
name|'ismodule'
op|','
name|'inspect'
op|'.'
name|'isclass'
op|','
name|'inspect'
op|'.'
name|'ismethod'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'isfunction'
op|','
name|'inspect'
op|'.'
name|'isgeneratorfunction'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'isgenerator'
op|','
name|'inspect'
op|'.'
name|'istraceback'
op|','
name|'inspect'
op|'.'
name|'isframe'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'iscode'
op|','
name|'inspect'
op|'.'
name|'isbuiltin'
op|','
name|'inspect'
op|'.'
name|'isroutine'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'isabstract'
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'nasty'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'test'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'unicode'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'level'
op|'>'
number|'3'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'?'"
newline|'\n'
nl|'\n'
comment|'# The try block may not be necessary after the class check above,'
nl|'\n'
comment|'# but just in case ...'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'type'
op|'('
op|'['
op|']'
op|')'
name|'or'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'type'
op|'('
op|'('
name|'None'
op|','
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                '
name|'o'
op|'.'
name|'append'
op|'('
name|'to_primitive'
op|'('
name|'v'
op|','
name|'convert_instances'
op|'='
name|'convert_instances'
op|','
nl|'\n'
name|'level'
op|'='
name|'level'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'o'
newline|'\n'
dedent|''
name|'elif'
name|'type'
op|'('
name|'value'
op|')'
name|'is'
name|'type'
op|'('
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'o'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'value'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'o'
op|'['
name|'k'
op|']'
op|'='
name|'to_primitive'
op|'('
name|'v'
op|','
name|'convert_instances'
op|'='
name|'convert_instances'
op|','
nl|'\n'
name|'level'
op|'='
name|'level'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'o'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'str'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'iteritems'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'to_primitive'
op|'('
name|'dict'
op|'('
name|'value'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'convert_instances'
op|'='
name|'convert_instances'
op|','
nl|'\n'
name|'level'
op|'='
name|'level'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'__iter__'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'to_primitive'
op|'('
name|'list'
op|'('
name|'value'
op|')'
op|','
name|'level'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'convert_instances'
name|'and'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'__dict__'"
op|')'
op|':'
newline|'\n'
comment|'# Likely an instance of something. Watch for cycles.'
nl|'\n'
comment|'# Ignore class member vars.'
nl|'\n'
indent|'            '
name|'return'
name|'to_primitive'
op|'('
name|'value'
op|'.'
name|'__dict__'
op|','
nl|'\n'
name|'convert_instances'
op|'='
name|'convert_instances'
op|','
nl|'\n'
name|'level'
op|'='
name|'level'
op|'+'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'TypeError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Class objects are tricky since they may define something like'
nl|'\n'
comment|"# __iter__ defined but it isn't callable as list()."
nl|'\n'
indent|'        '
name|'return'
name|'unicode'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dumps
dedent|''
dedent|''
name|'def'
name|'dumps'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
name|'return'
name|'json'
op|'.'
name|'dumps'
op|'('
name|'to_primitive'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|loads
dedent|''
name|'def'
name|'loads'
op|'('
name|'s'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'json'
op|'.'
name|'loads'
op|'('
name|'s'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'anyjson'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'anyjson'
op|'.'
name|'_modules'
op|'.'
name|'append'
op|'('
op|'('
string|'"nova.utils"'
op|','
string|'"dumps"'
op|','
name|'TypeError'
op|','
nl|'\n'
string|'"loads"'
op|','
name|'ValueError'
op|')'
op|')'
newline|'\n'
name|'anyjson'
op|'.'
name|'force_implementation'
op|'('
string|'"nova.utils"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_semaphores
dedent|''
name|'_semaphores'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_NoopContextManager
name|'class'
name|'_NoopContextManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__enter__
indent|'    '
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_val'
op|','
name|'exc_tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|synchronized
dedent|''
dedent|''
name|'def'
name|'synchronized'
op|'('
name|'name'
op|','
name|'external'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Synchronization decorator.\n\n    Decorating a method like so:\n    @synchronized(\'mylock\')\n    def foo(self, *args):\n       ...\n\n    ensures that only one thread will execute the bar method at a time.\n\n    Different methods can share the same lock:\n    @synchronized(\'mylock\')\n    def foo(self, *args):\n       ...\n\n    @synchronized(\'mylock\')\n    def bar(self, *args):\n       ...\n\n    This way only one of either foo or bar can be executing at a time.\n\n    The external keyword argument denotes whether this lock should work across\n    multiple processes. This means that if two different workers both run a\n    a method decorated with @synchronized(\'mylock\', external=True), only one\n    of them will execute at a time.\n\n    """'
newline|'\n'
nl|'\n'
DECL|function|wrap
name|'def'
name|'wrap'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(soren): If we ever go natively threaded, this will be racy.'
nl|'\n'
comment|'#              See http://stackoverflow.com/questions/5390569/dyn\\'
nl|'\n'
comment|'#              amically-allocating-and-destroying-mutexes'
nl|'\n'
indent|'            '
name|'if'
name|'name'
name|'not'
name|'in'
name|'_semaphores'
op|':'
newline|'\n'
indent|'                '
name|'_semaphores'
op|'['
name|'name'
op|']'
op|'='
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
newline|'\n'
dedent|''
name|'sem'
op|'='
name|'_semaphores'
op|'['
name|'name'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Attempting to grab semaphore "%(lock)s" for method \''
nl|'\n'
string|'\'"%(method)s"...\''
op|'%'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
op|')'
newline|'\n'
name|'with'
name|'sem'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got semaphore "%(lock)s" for method \''
nl|'\n'
string|'\'"%(method)s"...\''
op|'%'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
op|')'
newline|'\n'
name|'if'
name|'external'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Attempting to grab file lock "%(lock)s" for \''
nl|'\n'
string|'\'method "%(method)s"...\''
op|'%'
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
op|')'
newline|'\n'
name|'lock_file_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
nl|'\n'
string|"'nova-%s.lock'"
op|'%'
name|'name'
op|')'
newline|'\n'
name|'lock'
op|'='
name|'lockfile'
op|'.'
name|'FileLock'
op|'('
name|'lock_file_path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'lock'
op|'='
name|'_NoopContextManager'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'lock'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'external'
op|':'
newline|'\n'
indent|'                        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got file lock "%(lock)s" for \''
nl|'\n'
string|'\'method "%(method)s"...\''
op|'%'
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'retval'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
comment|'# If no-one else is waiting for it, delete it.'
nl|'\n'
comment|'# See note about possible raciness above.'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'sem'
op|'.'
name|'balance'
op|'<'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'_semaphores'
op|'['
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'retval'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'wrap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_from_path
dedent|''
name|'def'
name|'get_from_path'
op|'('
name|'items'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a list of items matching the specified path.\n\n    Takes an XPath-like expression e.g. prop1/prop2/prop3, and for each item\n    in items, looks up items[prop1][prop2][prop3].  Like XPath, if any of the\n    intermediate results are lists it will treat each list item individually.\n    A \'None\' in items or any child expressions will be ignored, this function\n    will not throw because of None (anywhere) in items.  The returned list\n    will contain no None values.\n\n    """'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'first_token'
op|','
name|'sep'
op|','
name|'remainder'
op|')'
op|'='
name|'path'
op|'.'
name|'partition'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'first_token'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'Error'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'items'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'items'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
op|':'
newline|'\n'
comment|'# Wrap single objects in a list'
nl|'\n'
indent|'        '
name|'items'
op|'='
op|'['
name|'items'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'item'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'get_method'
op|'='
name|'getattr'
op|'('
name|'item'
op|','
string|"'get'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'get_method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'child'
op|'='
name|'get_method'
op|'('
name|'first_token'
op|')'
newline|'\n'
name|'if'
name|'child'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'child'
op|','
name|'types'
op|'.'
name|'ListType'
op|')'
op|':'
newline|'\n'
comment|'# Flatten intermediate lists'
nl|'\n'
indent|'            '
name|'for'
name|'x'
name|'in'
name|'child'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'sep'
op|':'
newline|'\n'
comment|'# No more tokens'
nl|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'get_from_path'
op|'('
name|'results'
op|','
name|'remainder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|flatten_dict
dedent|''
dedent|''
name|'def'
name|'flatten_dict'
op|'('
name|'dict_'
op|','
name|'flattened'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recursively flatten a nested dictionary."""'
newline|'\n'
name|'flattened'
op|'='
name|'flattened'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'iteritems'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'flatten_dict'
op|'('
name|'value'
op|','
name|'flattened'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'flattened'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'flattened'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|partition_dict
dedent|''
name|'def'
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return two dicts, one with `keys` the other with everything else."""'
newline|'\n'
name|'intersection'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'difference'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'intersection'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'difference'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'intersection'
op|','
name|'difference'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|map_dict_keys
dedent|''
name|'def'
name|'map_dict_keys'
op|'('
name|'dict_'
op|','
name|'key_map'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict in which the dictionaries keys are mapped to new keys."""'
newline|'\n'
name|'mapped'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapped_key'
op|'='
name|'key_map'
op|'['
name|'key'
op|']'
name|'if'
name|'key'
name|'in'
name|'key_map'
name|'else'
name|'key'
newline|'\n'
name|'mapped'
op|'['
name|'mapped_key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'mapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|subset_dict
dedent|''
name|'def'
name|'subset_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict that only contains a subset of keys."""'
newline|'\n'
name|'subset'
op|'='
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'subset'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_isinstance
dedent|''
name|'def'
name|'check_isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks that obj is of type cls, and lets PyLint infer types."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Expected object of type: %s'"
op|')'
op|'%'
op|'('
name|'str'
op|'('
name|'cls'
op|')'
op|')'
op|')'
newline|'\n'
comment|'# TODO(justinsb): Can we make this better??'
nl|'\n'
name|'return'
name|'cls'
op|'('
op|')'
comment|'# Ugly PyLint hack'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_server_string
dedent|''
name|'def'
name|'parse_server_string'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parses the given server_string and returns a list of host and port.\n    If it\'s not a combination of host part and port, the port element\n    is a null string. If the input is invalid expression, return a null\n    list.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# First of all, exclude pure IPv6 address (w/o port).'
nl|'\n'
indent|'        '
name|'if'
name|'netaddr'
op|'.'
name|'valid_ipv6'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# Next, check if this is IPv6 address with a port number combination.'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|'"]:"'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'replace'
op|'('
string|"'['"
op|','
string|"''"
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|"']:'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# Third, check if this is a combination of an address and a port'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# This must be a combination of an address and a port'
nl|'\n'
dedent|''
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Invalid server_string: %s'"
op|'%'
name|'server_str'
op|')'
op|')'
newline|'\n'
name|'return'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|gen_uuid
dedent|''
dedent|''
name|'def'
name|'gen_uuid'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_uuid_like
dedent|''
name|'def'
name|'is_uuid_like'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""For our purposes, a UUID is a string in canonical form:\n\n        aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'uuid'
op|'.'
name|'UUID'
op|'('
name|'val'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bool_from_str
dedent|''
dedent|''
name|'def'
name|'bool_from_str'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a string representation of a bool into a bool value"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'val'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
name|'if'
name|'int'
op|'('
name|'val'
op|')'
name|'else'
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'true'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv4
dedent|''
dedent|''
name|'def'
name|'is_valid_ipv4'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""valid the address strictly as per format xxx.xxx.xxx.xxx.\n    where xxx is a value between 0 and 255.\n    """'
newline|'\n'
name|'parts'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
number|'0'
op|'<='
name|'int'
op|'('
name|'item'
op|')'
op|'<='
number|'255'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_cidr
dedent|''
name|'def'
name|'is_valid_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if the provided ipv4 or ipv6 address is a valid\n    CIDR address or not"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Validate the correct CIDR Address'
nl|'\n'
indent|'        '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'core'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Prior validation partially verify /xx part'
nl|'\n'
comment|'# Verify it here'
nl|'\n'
dedent|''
name|'ip_segment'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'ip_segment'
op|')'
op|'<='
number|'1'
name|'or'
nl|'\n'
name|'ip_segment'
op|'['
number|'1'
op|']'
op|'=='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|monkey_patch
dedent|''
name|'def'
name|'monkey_patch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""  If the Flags.monkey_patch set as True,\n    this function patches a decorator\n    for all functions in specified modules.\n    You can set decorators for each modules\n    using FLAGS.monkey_patch_modules.\n    The format is "Module path:Decorator function".\n    Example: \'nova.api.ec2.cloud:nova.notifier.api.notify_decorator\'\n\n    Parameters of the decorator is as follows.\n    (See nova.notifier.api.notify_decorator)\n\n    name - name of the function\n    function - object of the function\n    """'
newline|'\n'
comment|'# If FLAGS.monkey_patch is not True, this function do nothing.'
nl|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'monkey_patch'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
comment|'# Get list of modules and decorators'
nl|'\n'
dedent|''
name|'for'
name|'module_and_decorator'
name|'in'
name|'FLAGS'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|','
name|'decorator_name'
op|'='
name|'module_and_decorator'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
comment|'# import decorator function'
nl|'\n'
name|'decorator'
op|'='
name|'import_class'
op|'('
name|'decorator_name'
op|')'
newline|'\n'
name|'__import__'
op|'('
name|'module'
op|')'
newline|'\n'
comment|'# Retrieve module information using pyclbr'
nl|'\n'
name|'module_data'
op|'='
name|'pyclbr'
op|'.'
name|'readmodule_ex'
op|'('
name|'module'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'module_data'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# set the decorator for the class methods'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Class'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'clz'
op|'='
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'for'
name|'method'
op|','
name|'func'
name|'in'
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'clz'
op|','
name|'inspect'
op|'.'
name|'ismethod'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'clz'
op|','
name|'method'
op|','
name|'decorator'
op|'('
string|'"%s.%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|','
name|'method'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
comment|'# set the decorator for the function'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Function'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|','
name|'key'
op|','
name|'decorator'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_to_list_dict
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'convert_to_list_dict'
op|'('
name|'lst'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a value or list into a list of dicts"""'
newline|'\n'
name|'if'
name|'not'
name|'lst'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'lst'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst'
op|'='
op|'['
name|'lst'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'{'
name|'label'
op|':'
name|'x'
op|'}'
name|'for'
name|'x'
name|'in'
name|'lst'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|timefunc
dedent|''
name|'def'
name|'timefunc'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator that logs how long a particular function took to execute"""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'total_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"timefunc: \'%(name)s\' took %(total_time).2f secs"'
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'name'
op|'='
name|'func'
op|'.'
name|'__name__'
op|','
name|'total_time'
op|'='
name|'total_time'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_glance_url
dedent|''
name|'def'
name|'generate_glance_url'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate the URL to glance."""'
newline|'\n'
comment|'# TODO(jk0): This will eventually need to take SSL into consideration'
nl|'\n'
comment|'# when supported in glance.'
nl|'\n'
name|'return'
string|'"http://%s:%d"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
name|'FLAGS'
op|'.'
name|'glance_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|save_and_reraise_exception
name|'def'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Save current exception, run some code and then re-raise.\n\n    In some cases the exception context can be cleared, resulting in None\n    being attempted to be reraised after an exception handler is run. This\n    can happen when eventlet switches greenthreads or when running an\n    exception handler, code raises and catches and exception. In both\n    cases the exception context will be cleared.\n\n    To work around this, we save the exception state, run handler code, and\n    then re-raise the original exception. If another exception occurs, the\n    saved exception is logged and the new exception is reraised.\n    """'
newline|'\n'
name|'type_'
op|','
name|'value'
op|','
name|'traceback'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Original exception being dropped'"
op|')'
op|','
nl|'\n'
name|'exc_info'
op|'='
op|'('
name|'type_'
op|','
name|'value'
op|','
name|'traceback'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
dedent|''
name|'raise'
name|'type_'
op|','
name|'value'
op|','
name|'traceback'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|logging_error
name|'def'
name|'logging_error'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Catches exception, write message to the log, re-raise.\n    This is a common refinement of save_and_reraise that writes a specific\n    message to the log.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_dev_path
dedent|''
dedent|''
dedent|''
name|'def'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'base'
op|'='
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a path to a particular device.\n\n    >>> make_dev_path(\'xvdc\')\n    /dev/xvdc\n\n    >>> make_dev_path(\'xvdc\', 1)\n    /dev/xvdc1\n    """'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'partition'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'+='
name|'str'
op|'('
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|total_seconds
dedent|''
name|'def'
name|'total_seconds'
op|'('
name|'td'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Local total_seconds implementation for compatibility with python 2.6"""'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'td'
op|','
string|"'total_seconds'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'td'
op|'.'
name|'total_seconds'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'td'
op|'.'
name|'days'
op|'*'
number|'86400'
op|'+'
name|'td'
op|'.'
name|'seconds'
op|')'
op|'*'
number|'10'
op|'**'
number|'6'
op|'+'
nl|'\n'
name|'td'
op|'.'
name|'microseconds'
op|')'
op|'/'
number|'10.0'
op|'**'
number|'6'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_hostname
dedent|''
dedent|''
name|'def'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a hostname which conforms to RFC-952 and RFC-1123 specs."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'hostname'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'encode'
op|'('
string|"'latin-1'"
op|','
string|"'ignore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[ _]'"
op|','
string|"'-'"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[^\\w.-]+'"
op|','
string|"''"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'strip'
op|'('
string|"'.-'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'hostname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_cached_file
dedent|''
name|'def'
name|'read_cached_file'
op|'('
name|'filename'
op|','
name|'cache_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return the contents of a file. If the file hasn\'t changed since the\n    last invocation, a cached version will be returned.\n    """'
newline|'\n'
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'cache_info'
name|'and'
name|'mtime'
op|'=='
name|'cache_info'
op|'.'
name|'get'
op|'('
string|"'mtime'"
op|','
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cache_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'='
name|'open'
op|'('
name|'filename'
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'data'
newline|'\n'
name|'cache_info'
op|'['
string|"'mtime'"
op|']'
op|'='
name|'mtime'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
dedent|''
endmarker|''
end_unit

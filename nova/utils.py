begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Utilities and helper functions."""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pyclbr'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shlex'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'import'
name|'weakref'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
name|'import'
name|'saxutils'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'subprocess'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'semaphore'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'disable_process_locking'"
op|','
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to disable inter-process locks'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vpn_ping
name|'def'
name|'vpn_ping'
op|'('
name|'address'
op|','
name|'port'
op|','
name|'timeout'
op|'='
number|'0.05'
op|','
name|'session_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a vpn negotiation packet and returns the server session.\n\n    Returns False on a failure. Basic packet structure is below.\n\n    Client packet (14 bytes)::\n\n         0 1      8 9  13\n        +-+--------+-----+\n        |x| cli_id |?????|\n        +-+--------+-----+\n        x = packet identifier 0x38\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n\n    Server packet (26 bytes)::\n\n         0 1      8 9  13 14    21 2225\n        +-+--------+-----+--------+----+\n        |x| srv_id |?????| cli_id |????|\n        +-+--------+-----+--------+----+\n        x = packet identifier 0x40\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n        bit 9 was 1 and the rest were 0 in testing\n\n    """'
newline|'\n'
name|'if'
name|'session_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'session_id'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'0xffffffffffffffff'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
name|'data'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BQxxxxx'"
op|','
number|'0x38'
op|','
name|'session_id'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'sendto'
op|'('
name|'data'
op|','
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'settimeout'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'received'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
number|'2048'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'timeout'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'fmt'
op|'='
string|"'!BQxxxxxQxxxx'"
newline|'\n'
name|'if'
name|'len'
op|'('
name|'received'
op|')'
op|'!='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
op|'('
name|'identifier'
op|','
name|'server_sess'
op|','
name|'client_sess'
op|')'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'fmt'
op|','
name|'received'
op|')'
newline|'\n'
name|'if'
name|'identifier'
op|'=='
number|'0x40'
name|'and'
name|'client_sess'
op|'=='
name|'session_id'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'server_sess'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_subprocess_setup
dedent|''
dedent|''
name|'def'
name|'_subprocess_setup'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Python installs a SIGPIPE handler by default. This is usually not what'
nl|'\n'
comment|'# non-Python subprocesses expect.'
nl|'\n'
indent|'    '
name|'signal'
op|'.'
name|'signal'
op|'('
name|'signal'
op|'.'
name|'SIGPIPE'
op|','
name|'signal'
op|'.'
name|'SIG_DFL'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|execute
dedent|''
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper method to execute command with optional retry.\n\n    If you add a run_as_root=True command, don\'t forget to add the\n    corresponding filter to etc/nova/rootwrap.d !\n\n    :param cmd:                Passed to subprocess.Popen.\n    :param process_input:      Send to opened process.\n    :param check_exit_code:    Single bool, int, or list of allowed exit\n                               codes.  Defaults to [0].  Raise\n                               exception.ProcessExecutionError unless\n                               program exits with one of these code.\n    :param delay_on_retry:     True | False. Defaults to True. If set to\n                               True, wait a short amount of time\n                               before retrying.\n    :param attempts:           How many times to retry cmd.\n    :param run_as_root:        True | False. Defaults to False. If set to True,\n                               the command is run with rootwrap.\n\n    :raises exception.NovaException: on receiving unknown arguments\n    :raises exception.ProcessExecutionError:\n\n    :returns: a tuple, (stdout, stderr) from the spawned process, or None if\n             the command fails.\n    """'
newline|'\n'
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'check_exit_code'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'check_exit_code'"
op|','
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'ignore_exit_code'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'check_exit_code'
op|','
name|'bool'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ignore_exit_code'
op|'='
name|'not'
name|'check_exit_code'
newline|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'check_exit_code'
op|','
name|'int'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'check_exit_code'
op|'='
op|'['
name|'check_exit_code'
op|']'
newline|'\n'
dedent|''
name|'delay_on_retry'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'delay_on_retry'"
op|','
name|'True'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'attempts'"
op|','
number|'1'
op|')'
newline|'\n'
name|'run_as_root'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'run_as_root'"
op|','
name|'False'
op|')'
newline|'\n'
name|'shell'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'shell'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'len'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'Got unknown keyword args '"
nl|'\n'
string|"'to utils.execute: %r'"
op|')'
op|'%'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'run_as_root'
op|':'
newline|'\n'
indent|'        '
name|'cmd'
op|'='
op|'['
string|"'sudo'"
op|','
string|"'nova-rootwrap'"
op|','
name|'FLAGS'
op|'.'
name|'rootwrap_config'
op|']'
op|'+'
name|'list'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'cmd'
op|'='
name|'map'
op|'('
name|'str'
op|','
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'attempts'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'attempts'
op|'-='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running cmd (subprocess): %s'"
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
name|'_PIPE'
op|'='
name|'subprocess'
op|'.'
name|'PIPE'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'obj'
op|'='
name|'subprocess'
op|'.'
name|'Popen'
op|'('
name|'cmd'
op|','
nl|'\n'
name|'stdin'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'_PIPE'
op|','
nl|'\n'
name|'close_fds'
op|'='
name|'True'
op|','
nl|'\n'
name|'preexec_fn'
op|'='
name|'_subprocess_setup'
op|','
nl|'\n'
name|'shell'
op|'='
name|'shell'
op|')'
newline|'\n'
name|'result'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'process_input'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'obj'
op|'.'
name|'communicate'
op|'('
name|'process_input'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'obj'
op|'.'
name|'communicate'
op|'('
op|')'
newline|'\n'
dedent|''
name|'obj'
op|'.'
name|'stdin'
op|'.'
name|'close'
op|'('
op|')'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'_returncode'
op|'='
name|'obj'
op|'.'
name|'returncode'
comment|'# pylint: disable=E1101'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Result was %s'"
op|')'
op|'%'
name|'_returncode'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ignore_exit_code'
name|'and'
name|'_returncode'
name|'not'
name|'in'
name|'check_exit_code'
op|':'
newline|'\n'
indent|'                '
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
op|'='
name|'result'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|'('
nl|'\n'
name|'exit_code'
op|'='
name|'_returncode'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
string|"' '"
op|'.'
name|'join'
op|'('
name|'cmd'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'attempts'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'%r failed. Retrying.'"
op|')'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'delay_on_retry'
op|':'
newline|'\n'
indent|'                    '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'20'
op|','
number|'200'
op|')'
op|'/'
number|'100.0'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# NOTE(termie): this appears to be necessary to let the subprocess'
nl|'\n'
comment|'#               call clean something up in between calls, without'
nl|'\n'
comment|'#               it two execute calls in a row hangs the second one'
nl|'\n'
indent|'            '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|trycmd
dedent|''
dedent|''
dedent|''
name|'def'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A wrapper around execute() to more easily handle warnings and errors.\n\n    Returns an (out, err) tuple of strings containing the output of\n    the command\'s stdout and stderr.  If \'err\' is not empty then the\n    command can be considered to have failed.\n\n    :discard_warnings   True | False. Defaults to False. If set to True,\n                        then for succeeding commands, stderr is cleared\n\n    """'
newline|'\n'
name|'discard_warnings'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'discard_warnings'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
name|'execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'failed'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|','
name|'exn'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
string|"''"
op|','
name|'str'
op|'('
name|'exn'
op|')'
newline|'\n'
name|'failed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'failed'
name|'and'
name|'discard_warnings'
name|'and'
name|'err'
op|':'
newline|'\n'
comment|'# Handle commands that output to stderr but otherwise succeed'
nl|'\n'
indent|'        '
name|'err'
op|'='
string|"''"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'out'
op|','
name|'err'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ssh_execute
dedent|''
name|'def'
name|'ssh_execute'
op|'('
name|'ssh'
op|','
name|'cmd'
op|','
name|'process_input'
op|'='
name|'None'
op|','
nl|'\n'
name|'addl_env'
op|'='
name|'None'
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Running cmd (SSH): %s'"
op|')'
op|','
name|'cmd'
op|')'
newline|'\n'
name|'if'
name|'addl_env'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'_'
op|'('
string|"'Environment not supported over SSH'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'process_input'
op|':'
newline|'\n'
comment|'# This is (probably) fixable if we need it...'
nl|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'process_input not supported over SSH'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stdin_stream'
op|','
name|'stdout_stream'
op|','
name|'stderr_stream'
op|'='
name|'ssh'
op|'.'
name|'exec_command'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'channel'
op|'='
name|'stdout_stream'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
comment|"#stdin.write('process_input would go here')"
nl|'\n'
comment|'#stdin.flush()'
nl|'\n'
nl|'\n'
comment|'# NOTE(justinsb): This seems suspicious...'
nl|'\n'
comment|'# ...other SSH clients have buffering issues with this approach'
nl|'\n'
name|'stdout'
op|'='
name|'stdout_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stderr'
op|'='
name|'stderr_stream'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'stdin_stream'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'exit_status'
op|'='
name|'channel'
op|'.'
name|'recv_exit_status'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# exit_status == -1 if no exit code was returned'
nl|'\n'
name|'if'
name|'exit_status'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Result was %s'"
op|')'
op|'%'
name|'exit_status'
op|')'
newline|'\n'
name|'if'
name|'check_exit_code'
name|'and'
name|'exit_status'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|'('
name|'exit_code'
op|'='
name|'exit_status'
op|','
nl|'\n'
name|'stdout'
op|'='
name|'stdout'
op|','
nl|'\n'
name|'stderr'
op|'='
name|'stderr'
op|','
nl|'\n'
name|'cmd'
op|'='
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'stdout'
op|','
name|'stderr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|novadir
dedent|''
name|'def'
name|'novadir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'nova'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'nova'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'split'
op|'('
string|"'nova/__init__.py'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug
dedent|''
name|'def'
name|'debug'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'debug in callback: %s'"
op|')'
op|','
name|'arg'
op|')'
newline|'\n'
name|'return'
name|'arg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_uid
dedent|''
name|'def'
name|'generate_uid'
op|'('
name|'topic'
op|','
name|'size'
op|'='
number|'8'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'characters'
op|'='
string|"'01234567890abcdefghijklmnopqrstuvwxyz'"
newline|'\n'
name|'choices'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'characters'
op|')'
name|'for'
name|'_x'
name|'in'
name|'xrange'
op|'('
name|'size'
op|')'
op|']'
newline|'\n'
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'topic'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'choices'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Default symbols to use for passwords. Avoids visually confusing characters.'
nl|'\n'
comment|'# ~6 bits per symbol'
nl|'\n'
DECL|variable|DEFAULT_PASSWORD_SYMBOLS
dedent|''
name|'DEFAULT_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0,1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|','
comment|'# Removed: I, O'
nl|'\n'
string|"'abcdefghijkmnopqrstuvwxyz'"
op|')'
comment|'# Removed: l'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ~5 bits per symbol'
nl|'\n'
DECL|variable|EASIER_PASSWORD_SYMBOLS
name|'EASIER_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0, 1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|')'
comment|'# Removed: I, O'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_completed_audit_period
name|'def'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
name|'None'
op|','
name|'before'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This method gives you the most recently *completed* audit period.\n\n    arguments:\n            units: string, one of \'hour\', \'day\', \'month\', \'year\'\n                    Periods normally begin at the beginning (UTC) of the\n                    period unit (So a \'day\' period begins at midnight UTC,\n                    a \'month\' unit on the 1st, a \'year\' on Jan, 1)\n                    unit string may be appended with an optional offset\n                    like so:  \'day@18\'  This will begin the period at 18:00\n                    UTC.  \'month@15\' starts a monthly period on the 15th,\n                    and year@3 begins a yearly one on March 1st.\n            before: Give the audit period most recently completed before\n                    <timestamp>. Defaults to now.\n\n\n    returns:  2 tuple of datetimes (begin, end)\n              The begin timestamp of this audit period is the same as the\n              end of the previous."""'
newline|'\n'
name|'if'
name|'not'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|'='
name|'FLAGS'
op|'.'
name|'instance_usage_audit_period'
newline|'\n'
nl|'\n'
dedent|''
name|'offset'
op|'='
number|'0'
newline|'\n'
name|'if'
string|"'@'"
name|'in'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|','
name|'offset'
op|'='
name|'unit'
op|'.'
name|'split'
op|'('
string|'"@"'
op|','
number|'1'
op|')'
newline|'\n'
name|'offset'
op|'='
name|'int'
op|'('
name|'offset'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'before'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'before'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
name|'not'
name|'in'
op|'('
string|"'month'"
op|','
string|"'day'"
op|','
string|"'year'"
op|','
string|"'hour'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Time period must be hour, day, month or year'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
op|'=='
string|"'month'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'rightnow'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'                '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
dedent|''
name|'year'
op|'='
name|'end'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'end'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'month'
op|'='
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
name|'month'
op|'='
name|'month'
op|','
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'year'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
name|'offset'
op|','
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'day'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'hour'
op|'='
name|'offset'
op|','
nl|'\n'
name|'day'
op|'='
name|'rightnow'
op|'.'
name|'day'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'hour'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'rightnow'
op|'.'
name|'replace'
op|'('
name|'minute'
op|'='
name|'offset'
op|','
name|'second'
op|'='
number|'0'
op|','
name|'microsecond'
op|'='
number|'0'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'begin'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_password
dedent|''
name|'def'
name|'generate_password'
op|'('
name|'length'
op|'='
number|'20'
op|','
name|'symbolgroups'
op|'='
name|'DEFAULT_PASSWORD_SYMBOLS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a random password from the supplied symbol groups.\n\n    At least one symbol from each group will be included. Unpredictable\n    results if length is less than the number of symbol groups.\n\n    Believed to be reasonably secure (with a reasonable password length!)\n\n    """'
newline|'\n'
name|'r'
op|'='
name|'random'
op|'.'
name|'SystemRandom'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): Some password policies require at least one character'
nl|'\n'
comment|'# from each group of symbols, so start off with one random character'
nl|'\n'
comment|'# from each symbol group'
nl|'\n'
name|'password'
op|'='
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'symbolgroups'
op|']'
newline|'\n'
comment|'# If length < len(symbolgroups), the leading characters will only'
nl|'\n'
comment|'# be from the first length groups. Try our best to not be predictable'
nl|'\n'
comment|'# by shuffling and then truncating.'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
name|'password'
op|'='
name|'password'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
name|'length'
op|'-='
name|'len'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
comment|'# then fill with random characters from all symbol groups'
nl|'\n'
name|'symbols'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'symbolgroups'
op|')'
newline|'\n'
name|'password'
op|'.'
name|'extend'
op|'('
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'symbols'
op|')'
name|'for'
name|'_i'
name|'in'
name|'xrange'
op|'('
name|'length'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# finally shuffle to ensure first x characters aren't from a"
nl|'\n'
comment|'# predictable group'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_octet
dedent|''
name|'def'
name|'last_octet'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'int'
op|'('
name|'address'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_my_linklocal
dedent|''
name|'def'
name|'get_my_linklocal'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if_str'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'-o'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'condition'
op|'='
string|"'\\s+inet6\\s+([0-9a-f:]+)/\\d+\\s+scope\\s+link'"
newline|'\n'
name|'links'
op|'='
op|'['
name|'re'
op|'.'
name|'search'
op|'('
name|'condition'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'if_str'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
name|'address'
op|'='
op|'['
name|'w'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
name|'for'
name|'w'
name|'in'
name|'links'
name|'if'
name|'w'
name|'is'
name|'not'
name|'None'
op|']'
newline|'\n'
name|'if'
name|'address'
op|'['
number|'0'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Link Local address is not found.:%s'"
op|')'
op|'%'
name|'if_str'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Couldn\'t get Link Local IP of %(interface)s"'
nl|'\n'
string|'" :%(ex)s"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_mailmap
dedent|''
dedent|''
name|'def'
name|'parse_mailmap'
op|'('
name|'mailmap'
op|'='
string|"'.mailmap'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'mailmap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'mailmap'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'and'
string|"' '"
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'                '
name|'canonical_email'
op|','
name|'alias'
op|'='
name|'l'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'mapping'
op|'['
name|'alias'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'canonical_email'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|str_dict_replace
dedent|''
name|'def'
name|'str_dict_replace'
op|'('
name|'s'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'s1'
op|','
name|'s2'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'s'
op|'.'
name|'replace'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LazyPluggable
dedent|''
name|'class'
name|'LazyPluggable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A pluggable backend loaded lazily based on some value."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pivot'
op|','
op|'**'
name|'backends'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__backends'
op|'='
name|'backends'
newline|'\n'
name|'self'
op|'.'
name|'__pivot'
op|'='
name|'pivot'
newline|'\n'
name|'self'
op|'.'
name|'__backend'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__get_backend
dedent|''
name|'def'
name|'__get_backend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'__backend'
op|':'
newline|'\n'
indent|'            '
name|'backend_name'
op|'='
name|'FLAGS'
op|'['
name|'self'
op|'.'
name|'__pivot'
op|']'
newline|'\n'
name|'if'
name|'backend_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'__backends'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid backend: %s'"
op|')'
op|'%'
name|'backend_name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'backend'
op|'='
name|'self'
op|'.'
name|'__backends'
op|'['
name|'backend_name'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'backend'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'__backend'
op|'='
name|'__import__'
op|'('
name|'name'
op|','
name|'None'
op|','
name|'None'
op|','
name|'fromlist'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'__backend'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
name|'self'
op|'.'
name|'__get_backend'
op|'('
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'backend'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCallDone
dedent|''
dedent|''
name|'class'
name|'LoopingCallDone'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Exception to break out and stop a LoopingCall.\n\n    The poll-function passed to LoopingCall can raise this exception to\n    break out of the loop normally. This is somewhat analogous to\n    StopIteration.\n\n    An optional return-value can be included as the argument to the exception;\n    this return-value will be returned by LoopingCall.wait()\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'retvalue'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""":param retvalue: Value that LoopingCall.wait() should return."""'
newline|'\n'
name|'self'
op|'.'
name|'retvalue'
op|'='
name|'retvalue'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LoopingCall
dedent|''
dedent|''
name|'class'
name|'LoopingCall'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'f'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kw'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
name|'self'
op|'.'
name|'kw'
op|'='
name|'kw'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'f'
newline|'\n'
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|start
dedent|''
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'interval'
op|','
name|'initial_delay'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'True'
newline|'\n'
name|'done'
op|'='
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_inner
name|'def'
name|'_inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'initial_delay'
op|':'
newline|'\n'
indent|'                '
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'initial_delay'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'while'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'f'
op|'('
op|'*'
name|'self'
op|'.'
name|'args'
op|','
op|'**'
name|'self'
op|'.'
name|'kw'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_running'
op|':'
newline|'\n'
indent|'                        '
name|'break'
newline|'\n'
dedent|''
name|'greenthread'
op|'.'
name|'sleep'
op|'('
name|'interval'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'LoopingCallDone'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
name|'e'
op|'.'
name|'retvalue'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'in looping call'"
op|')'
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send_exception'
op|'('
op|'*'
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'done'
op|'.'
name|'send'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'done'
op|'='
name|'done'
newline|'\n'
nl|'\n'
name|'greenthread'
op|'.'
name|'spawn'
op|'('
name|'_inner'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'done'
newline|'\n'
nl|'\n'
DECL|member|stop
dedent|''
name|'def'
name|'stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_running'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'done'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_escape
dedent|''
dedent|''
name|'def'
name|'xhtml_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Escapes a string so it is valid within XML or XHTML.\n\n    """'
newline|'\n'
name|'return'
name|'saxutils'
op|'.'
name|'escape'
op|'('
name|'value'
op|','
op|'{'
string|'\'"\''
op|':'
string|"'&quot;'"
op|','
string|'"\'"'
op|':'
string|"'&apos;'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8
dedent|''
name|'def'
name|'utf8'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Try to turn a string into utf-8 if possible.\n\n    Code is directly from the utf8 function in\n    http://github.com/facebook/tornado/blob/master/tornado/escape.py\n\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_InterProcessLock
dedent|''
name|'class'
name|'_InterProcessLock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Lock implementation which allows multiple locks, working around\n    issues like bugs.debian.org/cgi-bin/bugreport.cgi?bug=632857 and does\n    not require any cleanup. Since the lock is always held on a file\n    descriptor rather than outside of the process, the lock gets dropped\n    automatically if the process crashes, even if __exit__ is not executed.\n\n    There are no guarantees regarding usage by multiple green threads in a\n    single process here. This lock works only between processes. Exclusive\n    access between local threads should be achieved using the semaphores\n    in the @synchronized decorator.\n\n    Note these locks are released when the descriptor is closed, so it\'s not\n    safe to close the file descriptor while another green thread holds the\n    lock. Just opening and closing the lock file can break synchronisation,\n    so lock files must be accessed only using this abstraction.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lockfile'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fname'
op|'='
name|'name'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lockfile'
op|'='
name|'open'
op|'('
name|'self'
op|'.'
name|'fname'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
comment|'# Using non-blocking locks since green threads are not'
nl|'\n'
comment|'# patched to deal with blocking locking calls.'
nl|'\n'
comment|'# Also upon reading the MSDN docs for locking(), it seems'
nl|'\n'
comment|'# to have a laughable 10 attempts "blocking" mechanism.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'trylock'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'e'
op|'.'
name|'errno'
name|'in'
op|'('
name|'errno'
op|'.'
name|'EACCES'
op|','
name|'errno'
op|'.'
name|'EAGAIN'
op|')'
op|':'
newline|'\n'
comment|'# external locks synchronise things like iptables'
nl|'\n'
comment|'# updates - give it some time to prevent busy spinning'
nl|'\n'
indent|'                    '
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.01'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'exc_type'
op|','
name|'exc_val'
op|','
name|'exc_tb'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'unlock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lockfile'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Could not release the acquired lock `%s`"'
op|')'
nl|'\n'
op|'%'
name|'self'
op|'.'
name|'fname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|trylock
dedent|''
dedent|''
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_WindowsLock
dedent|''
dedent|''
name|'class'
name|'_WindowsLock'
op|'('
name|'_InterProcessLock'
op|')'
op|':'
newline|'\n'
DECL|member|trylock
indent|'    '
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msvcrt'
op|'.'
name|'locking'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'msvcrt'
op|'.'
name|'LK_NBLCK'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msvcrt'
op|'.'
name|'locking'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'msvcrt'
op|'.'
name|'LK_UNLCK'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_PosixLock
dedent|''
dedent|''
name|'class'
name|'_PosixLock'
op|'('
name|'_InterProcessLock'
op|')'
op|':'
newline|'\n'
DECL|member|trylock
indent|'    '
name|'def'
name|'trylock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fcntl'
op|'.'
name|'lockf'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'fcntl'
op|'.'
name|'LOCK_EX'
op|'|'
name|'fcntl'
op|'.'
name|'LOCK_NB'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unlock
dedent|''
name|'def'
name|'unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fcntl'
op|'.'
name|'lockf'
op|'('
name|'self'
op|'.'
name|'lockfile'
op|','
name|'fcntl'
op|'.'
name|'LOCK_UN'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'os'
op|'.'
name|'name'
op|'=='
string|"'nt'"
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'msvcrt'
newline|'\n'
DECL|variable|InterProcessLock
name|'InterProcessLock'
op|'='
name|'_WindowsLock'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'fcntl'
newline|'\n'
DECL|variable|InterProcessLock
name|'InterProcessLock'
op|'='
name|'_PosixLock'
newline|'\n'
nl|'\n'
DECL|variable|_semaphores
dedent|''
name|'_semaphores'
op|'='
name|'weakref'
op|'.'
name|'WeakValueDictionary'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|synchronized
name|'def'
name|'synchronized'
op|'('
name|'name'
op|','
name|'external'
op|'='
name|'False'
op|','
name|'lock_path'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Synchronization decorator.\n\n    Decorating a method like so::\n\n        @synchronized(\'mylock\')\n        def foo(self, *args):\n           ...\n\n    ensures that only one thread will execute the bar method at a time.\n\n    Different methods can share the same lock::\n\n        @synchronized(\'mylock\')\n        def foo(self, *args):\n           ...\n\n        @synchronized(\'mylock\')\n        def bar(self, *args):\n           ...\n\n    This way only one of either foo or bar can be executing at a time.\n\n    The external keyword argument denotes whether this lock should work across\n    multiple processes. This means that if two different workers both run a\n    a method decorated with @synchronized(\'mylock\', external=True), only one\n    of them will execute at a time.\n\n    The lock_path keyword argument is used to specify a special location for\n    external lock files to live. If nothing is set, then FLAGS.lock_path is\n    used as a default.\n    """'
newline|'\n'
nl|'\n'
DECL|function|wrap
name|'def'
name|'wrap'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(soren): If we ever go natively threaded, this will be racy.'
nl|'\n'
comment|'#              See http://stackoverflow.com/questions/5390569/dyn'
nl|'\n'
comment|'#              amically-allocating-and-destroying-mutexes'
nl|'\n'
indent|'            '
name|'sem'
op|'='
name|'_semaphores'
op|'.'
name|'get'
op|'('
name|'name'
op|','
name|'semaphore'
op|'.'
name|'Semaphore'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'_semaphores'
op|':'
newline|'\n'
comment|"# this check is not racy - we're already holding ref locally"
nl|'\n'
comment|"# so GC won't remove the item and there was no IO switch"
nl|'\n'
comment|'# (only valid in greenthreads)'
nl|'\n'
indent|'                '
name|'_semaphores'
op|'['
name|'name'
op|']'
op|'='
name|'sem'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'sem'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got semaphore "%(lock)s" for method \''
nl|'\n'
string|'\'"%(method)s"...\''
op|')'
op|','
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'external'
name|'and'
name|'not'
name|'FLAGS'
op|'.'
name|'disable_process_locking'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Attempting to grab file lock "%(lock)s" for \''
nl|'\n'
string|'\'method "%(method)s"...\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
name|'cleanup_dir'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# We need a copy of lock_path because it is non-local'
nl|'\n'
name|'local_lock_path'
op|'='
name|'lock_path'
newline|'\n'
name|'if'
name|'not'
name|'local_lock_path'
op|':'
newline|'\n'
indent|'                        '
name|'local_lock_path'
op|'='
name|'FLAGS'
op|'.'
name|'lock_path'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'local_lock_path'
op|':'
newline|'\n'
indent|'                        '
name|'cleanup_dir'
op|'='
name|'True'
newline|'\n'
name|'local_lock_path'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'local_lock_path'
op|')'
op|':'
newline|'\n'
indent|'                        '
name|'cleanup_dir'
op|'='
name|'True'
newline|'\n'
name|'ensure_tree'
op|'('
name|'local_lock_path'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): the lock name cannot contain directory'
nl|'\n'
comment|'# separators'
nl|'\n'
dedent|''
name|'safe_name'
op|'='
name|'name'
op|'.'
name|'replace'
op|'('
name|'os'
op|'.'
name|'sep'
op|','
string|"'_'"
op|')'
newline|'\n'
name|'lock_file_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'local_lock_path'
op|','
nl|'\n'
string|"'nova-%s'"
op|'%'
name|'safe_name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                        '
name|'lock'
op|'='
name|'InterProcessLock'
op|'('
name|'lock_file_path'
op|')'
newline|'\n'
name|'with'
name|'lock'
op|':'
newline|'\n'
indent|'                            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'\'Got file lock "%(lock)s" for \''
nl|'\n'
string|'\'method "%(method)s"...\''
op|')'
op|','
nl|'\n'
op|'{'
string|"'lock'"
op|':'
name|'name'
op|','
string|"'method'"
op|':'
name|'f'
op|'.'
name|'__name__'
op|'}'
op|')'
newline|'\n'
name|'retval'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# NOTE(vish): This removes the tempdir if we needed'
nl|'\n'
comment|'#             to create one. This is used to cleanup'
nl|'\n'
comment|'#             the locks left behind by unit tests.'
nl|'\n'
indent|'                        '
name|'if'
name|'cleanup_dir'
op|':'
newline|'\n'
indent|'                            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'local_lock_path'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'retval'
op|'='
name|'f'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'retval'
newline|'\n'
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'wrap'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_if_exists
dedent|''
name|'def'
name|'delete_if_exists'
op|'('
name|'pathname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""delete a file, but ignore file not found error"""'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'pathname'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ENOENT'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_from_path
dedent|''
dedent|''
dedent|''
name|'def'
name|'get_from_path'
op|'('
name|'items'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a list of items matching the specified path.\n\n    Takes an XPath-like expression e.g. prop1/prop2/prop3, and for each item\n    in items, looks up items[prop1][prop2][prop3].  Like XPath, if any of the\n    intermediate results are lists it will treat each list item individually.\n    A \'None\' in items or any child expressions will be ignored, this function\n    will not throw because of None (anywhere) in items.  The returned list\n    will contain no None values.\n\n    """'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'first_token'
op|','
name|'sep'
op|','
name|'remainder'
op|')'
op|'='
name|'path'
op|'.'
name|'partition'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'first_token'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'items'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'items'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
comment|'# Wrap single objects in a list'
nl|'\n'
indent|'        '
name|'items'
op|'='
op|'['
name|'items'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'item'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'get_method'
op|'='
name|'getattr'
op|'('
name|'item'
op|','
string|"'get'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'get_method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'child'
op|'='
name|'get_method'
op|'('
name|'first_token'
op|')'
newline|'\n'
name|'if'
name|'child'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'child'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
comment|'# Flatten intermediate lists'
nl|'\n'
indent|'            '
name|'for'
name|'x'
name|'in'
name|'child'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'sep'
op|':'
newline|'\n'
comment|'# No more tokens'
nl|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'get_from_path'
op|'('
name|'results'
op|','
name|'remainder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|flatten_dict
dedent|''
dedent|''
name|'def'
name|'flatten_dict'
op|'('
name|'dict_'
op|','
name|'flattened'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recursively flatten a nested dictionary."""'
newline|'\n'
name|'flattened'
op|'='
name|'flattened'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'iteritems'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'flatten_dict'
op|'('
name|'value'
op|','
name|'flattened'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'flattened'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'flattened'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|partition_dict
dedent|''
name|'def'
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return two dicts, one with `keys` the other with everything else."""'
newline|'\n'
name|'intersection'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'difference'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'intersection'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'difference'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'intersection'
op|','
name|'difference'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|map_dict_keys
dedent|''
name|'def'
name|'map_dict_keys'
op|'('
name|'dict_'
op|','
name|'key_map'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict in which the dictionaries keys are mapped to new keys."""'
newline|'\n'
name|'mapped'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapped_key'
op|'='
name|'key_map'
op|'['
name|'key'
op|']'
name|'if'
name|'key'
name|'in'
name|'key_map'
name|'else'
name|'key'
newline|'\n'
name|'mapped'
op|'['
name|'mapped_key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'mapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|subset_dict
dedent|''
name|'def'
name|'subset_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict that only contains a subset of keys."""'
newline|'\n'
name|'subset'
op|'='
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'subset'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|diff_dict
dedent|''
name|'def'
name|'diff_dict'
op|'('
name|'orig'
op|','
name|'new'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a dict describing how to change orig to new.  The keys\n    correspond to values that have changed; the value will be a list\n    of one or two elements.  The first element of the list will be\n    either \'+\' or \'-\', indicating whether the key was updated or\n    deleted; if the key was updated, the list will contain a second\n    element, giving the updated value.\n    """'
newline|'\n'
comment|'# Figure out what keys went away'
nl|'\n'
name|'result'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|','
op|'['
string|"'-'"
op|']'
op|')'
name|'for'
name|'k'
name|'in'
name|'set'
op|'('
name|'orig'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'-'
name|'set'
op|'('
name|'new'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# Compute the updates'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'new'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'not'
name|'in'
name|'orig'
name|'or'
name|'value'
op|'!='
name|'orig'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
name|'key'
op|']'
op|'='
op|'['
string|"'+'"
op|','
name|'value'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_isinstance
dedent|''
name|'def'
name|'check_isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks that obj is of type cls, and lets PyLint infer types."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Expected object of type: %s'"
op|')'
op|'%'
op|'('
name|'str'
op|'('
name|'cls'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_server_string
dedent|''
name|'def'
name|'parse_server_string'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parses the given server_string and returns a list of host and port.\n    If it\'s not a combination of host part and port, the port element\n    is a null string. If the input is invalid expression, return a null\n    list.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# First of all, exclude pure IPv6 address (w/o port).'
nl|'\n'
indent|'        '
name|'if'
name|'netaddr'
op|'.'
name|'valid_ipv6'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# Next, check if this is IPv6 address with a port number combination.'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|'"]:"'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'replace'
op|'('
string|"'['"
op|','
string|"''"
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|"']:'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# Third, check if this is a combination of an address and a port'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# This must be a combination of an address and a port'
nl|'\n'
dedent|''
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Invalid server_string: %s'"
op|')'
op|','
name|'server_str'
op|')'
newline|'\n'
name|'return'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|gen_uuid
dedent|''
dedent|''
name|'def'
name|'gen_uuid'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_uuid_like
dedent|''
name|'def'
name|'is_uuid_like'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""For our purposes, a UUID is a string in canonical form:\n\n        aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'uuid'
op|'.'
name|'UUID'
op|'('
name|'val'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|','
name|'AttributeError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|bool_from_str
dedent|''
dedent|''
name|'def'
name|'bool_from_str'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a string representation of a bool into a bool value"""'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'val'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
name|'if'
name|'int'
op|'('
name|'val'
op|')'
name|'else'
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'true'"
name|'or'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'yes'"
name|'or'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'y'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_boolstr
dedent|''
dedent|''
name|'def'
name|'is_valid_boolstr'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if the provided string is a valid bool string or not. """'
newline|'\n'
name|'val'
op|'='
name|'str'
op|'('
name|'val'
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'return'
name|'val'
op|'=='
string|"'true'"
name|'or'
name|'val'
op|'=='
string|"'false'"
name|'or'
name|'val'
op|'=='
string|"'yes'"
name|'or'
name|'val'
op|'=='
string|"'no'"
name|'or'
name|'val'
op|'=='
string|"'y'"
name|'or'
name|'val'
op|'=='
string|"'n'"
name|'or'
name|'val'
op|'=='
string|"'1'"
name|'or'
name|'val'
op|'=='
string|"'0'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv4
dedent|''
name|'def'
name|'is_valid_ipv4'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""valid the address strictly as per format xxx.xxx.xxx.xxx.\n    where xxx is a value between 0 and 255.\n    """'
newline|'\n'
name|'parts'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'parts'
op|')'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'parts'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
number|'0'
op|'<='
name|'int'
op|'('
name|'item'
op|')'
op|'<='
number|'255'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_cidr
dedent|''
name|'def'
name|'is_valid_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if the provided ipv4 or ipv6 address is a valid\n    CIDR address or not"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Validate the correct CIDR Address'
nl|'\n'
indent|'        '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'core'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'UnboundLocalError'
op|':'
newline|'\n'
comment|'# NOTE(MotoKen): work around bug in netaddr 0.7.5 (see detail in'
nl|'\n'
comment|'# https://github.com/drkjam/netaddr/issues/2)'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Prior validation partially verify /xx part'
nl|'\n'
comment|'# Verify it here'
nl|'\n'
dedent|''
name|'ip_segment'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'ip_segment'
op|')'
op|'<='
number|'1'
name|'or'
nl|'\n'
name|'ip_segment'
op|'['
number|'1'
op|']'
op|'=='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|monkey_patch
dedent|''
name|'def'
name|'monkey_patch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""  If the Flags.monkey_patch set as True,\n    this function patches a decorator\n    for all functions in specified modules.\n    You can set decorators for each modules\n    using FLAGS.monkey_patch_modules.\n    The format is "Module path:Decorator function".\n    Example: \'nova.api.ec2.cloud:nova.notifier.api.notify_decorator\'\n\n    Parameters of the decorator is as follows.\n    (See nova.notifier.api.notify_decorator)\n\n    name - name of the function\n    function - object of the function\n    """'
newline|'\n'
comment|'# If FLAGS.monkey_patch is not True, this function do nothing.'
nl|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|'.'
name|'monkey_patch'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
comment|'# Get list of modules and decorators'
nl|'\n'
dedent|''
name|'for'
name|'module_and_decorator'
name|'in'
name|'FLAGS'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|','
name|'decorator_name'
op|'='
name|'module_and_decorator'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
comment|'# import decorator function'
nl|'\n'
name|'decorator'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'decorator_name'
op|')'
newline|'\n'
name|'__import__'
op|'('
name|'module'
op|')'
newline|'\n'
comment|'# Retrieve module information using pyclbr'
nl|'\n'
name|'module_data'
op|'='
name|'pyclbr'
op|'.'
name|'readmodule_ex'
op|'('
name|'module'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'module_data'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# set the decorator for the class methods'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Class'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'clz'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'for'
name|'method'
op|','
name|'func'
name|'in'
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'clz'
op|','
name|'inspect'
op|'.'
name|'ismethod'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'clz'
op|','
name|'method'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|','
name|'method'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
comment|'# set the decorator for the function'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Function'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|','
name|'key'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_to_list_dict
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'convert_to_list_dict'
op|'('
name|'lst'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a value or list into a list of dicts"""'
newline|'\n'
name|'if'
name|'not'
name|'lst'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'lst'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst'
op|'='
op|'['
name|'lst'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'{'
name|'label'
op|':'
name|'x'
op|'}'
name|'for'
name|'x'
name|'in'
name|'lst'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|timefunc
dedent|''
name|'def'
name|'timefunc'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator that logs how long a particular function took to execute"""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'total_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"timefunc: \'%(name)s\' took %(total_time).2f secs"'
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'name'
op|'='
name|'func'
op|'.'
name|'__name__'
op|','
name|'total_time'
op|'='
name|'total_time'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_glance_url
dedent|''
name|'def'
name|'generate_glance_url'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate the URL to glance."""'
newline|'\n'
comment|'# TODO(jk0): This will eventually need to take SSL into consideration'
nl|'\n'
comment|'# when supported in glance.'
nl|'\n'
name|'return'
string|'"http://%s:%d"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
name|'FLAGS'
op|'.'
name|'glance_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_image_url
dedent|''
name|'def'
name|'generate_image_url'
op|'('
name|'image_ref'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate an image URL from an image_ref."""'
newline|'\n'
name|'return'
string|'"%s/images/%s"'
op|'%'
op|'('
name|'generate_glance_url'
op|'('
op|')'
op|','
name|'image_ref'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|remove_path_on_error
name|'def'
name|'remove_path_on_error'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Protect code that wants to operate on PATH atomically.\n    Any exception will cause PATH to be removed.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'delete_if_exists'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_dev_path
dedent|''
dedent|''
dedent|''
name|'def'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'base'
op|'='
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a path to a particular device.\n\n    >>> make_dev_path(\'xvdc\')\n    /dev/xvdc\n\n    >>> make_dev_path(\'xvdc\', 1)\n    /dev/xvdc1\n    """'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'partition'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'+='
name|'str'
op|'('
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|total_seconds
dedent|''
name|'def'
name|'total_seconds'
op|'('
name|'td'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Local total_seconds implementation for compatibility with python 2.6"""'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'td'
op|','
string|"'total_seconds'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'td'
op|'.'
name|'total_seconds'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'td'
op|'.'
name|'days'
op|'*'
number|'86400'
op|'+'
name|'td'
op|'.'
name|'seconds'
op|')'
op|'*'
number|'10'
op|'**'
number|'6'
op|'+'
nl|'\n'
name|'td'
op|'.'
name|'microseconds'
op|')'
op|'/'
number|'10.0'
op|'**'
number|'6'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_hostname
dedent|''
dedent|''
name|'def'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a hostname which conforms to RFC-952 and RFC-1123 specs."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'hostname'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'encode'
op|'('
string|"'latin-1'"
op|','
string|"'ignore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[ _]'"
op|','
string|"'-'"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[^\\w.-]+'"
op|','
string|"''"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'strip'
op|'('
string|"'.-'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'hostname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_cached_file
dedent|''
name|'def'
name|'read_cached_file'
op|'('
name|'filename'
op|','
name|'cache_info'
op|','
name|'reload_func'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read from a file if it has been modified.\n\n    :param cache_info: dictionary to hold opaque cache.\n    :param reload_func: optional function to be called with data when\n                        file is reloaded due to a modification.\n\n    :returns: data from file\n\n    """'
newline|'\n'
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cache_info'
name|'or'
name|'mtime'
op|'!='
name|'cache_info'
op|'.'
name|'get'
op|'('
string|"'mtime'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reloading cached file %s"'
op|')'
op|'%'
name|'filename'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'filename'
op|')'
name|'as'
name|'fap'
op|':'
newline|'\n'
indent|'            '
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'fap'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'cache_info'
op|'['
string|"'mtime'"
op|']'
op|'='
name|'mtime'
newline|'\n'
name|'if'
name|'reload_func'
op|':'
newline|'\n'
indent|'            '
name|'reload_func'
op|'('
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'cache_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|file_open
dedent|''
name|'def'
name|'file_open'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Open file\n\n    see built-in file() documentation for more details\n\n    Note: The reason this is kept in a separate module is to easily\n          be able to provide a stub module that doesn\'t alter system\n          state at all (for unit tests)\n    """'
newline|'\n'
name|'return'
name|'file'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_file
dedent|''
name|'def'
name|'hash_file'
op|'('
name|'file_like_object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a hash for the contents of a file."""'
newline|'\n'
name|'checksum'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'iter'
op|'('
name|'lambda'
op|':'
name|'file_like_object'
op|'.'
name|'read'
op|'('
number|'32768'
op|')'
op|','
string|"b''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checksum'
op|'.'
name|'update'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'checksum'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_mutation
name|'def'
name|'temporary_mutation'
op|'('
name|'obj'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily set the attr on a particular object to a given value then\n    revert when finished.\n\n    One use of this is to temporarily set the read_deleted flag on a context\n    object:\n\n        with temporary_mutation(context, read_deleted="yes"):\n            do_something_that_needed_deleted_objects()\n    """'
newline|'\n'
name|'NOT_PRESENT'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'old_values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'new_value'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_values'
op|'['
name|'attr'
op|']'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'NOT_PRESENT'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'new_value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'attr'
op|','
name|'old_value'
name|'in'
name|'old_values'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'old_value'
name|'is'
name|'NOT_PRESENT'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'obj'
op|'['
name|'attr'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'old_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|service_is_up
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'service_is_up'
op|'('
name|'service'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check whether a service is up based on last heartbeat."""'
newline|'\n'
name|'last_heartbeat'
op|'='
name|'service'
op|'['
string|"'updated_at'"
op|']'
name|'or'
name|'service'
op|'['
string|"'created_at'"
op|']'
newline|'\n'
comment|'# Timestamps in DB are UTC.'
nl|'\n'
name|'elapsed'
op|'='
name|'total_seconds'
op|'('
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'last_heartbeat'
op|')'
newline|'\n'
name|'return'
name|'abs'
op|'('
name|'elapsed'
op|')'
op|'<='
name|'FLAGS'
op|'.'
name|'service_down_time'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_mac_address
dedent|''
name|'def'
name|'generate_mac_address'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate an Ethernet MAC address."""'
newline|'\n'
comment|'# NOTE(vish): We would prefer to use 0xfe here to ensure that linux'
nl|'\n'
comment|"#             bridge mac addresses don't change, but it appears to"
nl|'\n'
comment|'#             conflict with libvirt, so we use the next highest octet'
nl|'\n'
comment|'#             that has the unicast and locally administered bits set'
nl|'\n'
comment|'#             properly: 0xfa.'
nl|'\n'
comment|'#             Discussion: https://bugs.launchpad.net/nova/+bug/921838'
nl|'\n'
name|'mac'
op|'='
op|'['
number|'0xfa'
op|','
number|'0x16'
op|','
number|'0x3e'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0x7f'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|']'
newline|'\n'
name|'return'
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_file_as_root
dedent|''
name|'def'
name|'read_file_as_root'
op|'('
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Secure helper to read file as root."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'execute'
op|'('
string|"'cat'"
op|','
name|'file_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'FileNotFound'
op|'('
name|'file_path'
op|'='
name|'file_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_chown
name|'def'
name|'temporary_chown'
op|'('
name|'path'
op|','
name|'owner_uid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily chown a path.\n\n    :params owner_uid: UID of temporary owner (defaults to current user)\n    """'
newline|'\n'
name|'if'
name|'owner_uid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'owner_uid'
op|'='
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_uid'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
op|'.'
name|'st_uid'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'        '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'owner_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'            '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'orig_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|tempdir
name|'def'
name|'tempdir'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'tmpdir'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Could not remove tmpdir: %s'"
op|')'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|strcmp_const_time
dedent|''
dedent|''
dedent|''
name|'def'
name|'strcmp_const_time'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Constant-time string comparison.\n\n    :params s1: the first string\n    :params s2: the second string\n\n    :return: True if the strings are equal.\n\n    This function takes two strings and compares them.  It is intended to be\n    used when doing a comparison for authentication purposes to help guard\n    against timing attacks.\n    """'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'s1'
op|')'
op|'!='
name|'len'
op|'('
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'result'
op|'='
number|'0'
newline|'\n'
name|'for'
op|'('
name|'a'
op|','
name|'b'
op|')'
name|'in'
name|'zip'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'|='
name|'ord'
op|'('
name|'a'
op|')'
op|'^'
name|'ord'
op|'('
name|'b'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
op|'=='
number|'0'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|walk_class_hierarchy
dedent|''
name|'def'
name|'walk_class_hierarchy'
op|'('
name|'clazz'
op|','
name|'encountered'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Walk class hierarchy, yielding most derived classes first"""'
newline|'\n'
name|'if'
name|'not'
name|'encountered'
op|':'
newline|'\n'
indent|'        '
name|'encountered'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'for'
name|'subclass'
name|'in'
name|'clazz'
op|'.'
name|'__subclasses__'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'subclass'
name|'not'
name|'in'
name|'encountered'
op|':'
newline|'\n'
indent|'            '
name|'encountered'
op|'.'
name|'append'
op|'('
name|'subclass'
op|')'
newline|'\n'
comment|'# drill down to leaves first'
nl|'\n'
name|'for'
name|'subsubclass'
name|'in'
name|'walk_class_hierarchy'
op|'('
name|'subclass'
op|','
name|'encountered'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'subsubclass'
newline|'\n'
dedent|''
name|'yield'
name|'subclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UndoManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'UndoManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides a mechanism to facilitate rolling back a series of actions\n    when an exception is raised.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|undo_with
dedent|''
name|'def'
name|'undo_with'
op|'('
name|'self'
op|','
name|'undo_func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'.'
name|'append'
op|'('
name|'undo_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rollback
dedent|''
name|'def'
name|'_rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'undo_func'
name|'in'
name|'reversed'
op|'('
name|'self'
op|'.'
name|'undo_stack'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'undo_func'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_and_reraise
dedent|''
dedent|''
name|'def'
name|'rollback_and_reraise'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rollback a series of actions then re-raise the exception.\n\n        .. note:: (sirp) This should only be called within an\n                  exception handler.\n        """'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_rollback'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|ensure_tree
dedent|''
dedent|''
dedent|''
name|'def'
name|'ensure_tree'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a directory (and any ancestor directories required)\n\n    :param path: Directory to create\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'exc'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'EEXIST'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mkfs
dedent|''
dedent|''
dedent|''
name|'def'
name|'mkfs'
op|'('
name|'fs'
op|','
name|'path'
op|','
name|'label'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format a file or block device\n\n    :param fs: Filesystem type (examples include \'swap\', \'ext3\', \'ext4\'\n               \'btrfs\', etc.)\n    :param path: Path to file or block device to format\n    :param label: Volume label to use\n    """'
newline|'\n'
name|'if'
name|'fs'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'        '
name|'execute'
op|'('
string|"'mkswap'"
op|','
name|'path'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|"'mkfs'"
op|','
string|"'-t'"
op|','
name|'fs'
op|']'
newline|'\n'
comment|'#add -F to force no interactive excute on non-block device.'
nl|'\n'
name|'if'
name|'fs'
name|'in'
op|'['
string|"'ext3'"
op|','
string|"'ext4'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-F'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'label'
op|':'
newline|'\n'
indent|'            '
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-n'"
op|','
name|'label'
op|']'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'execute'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Utilities and helper functions."""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pyclbr'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'sax'
name|'import'
name|'saxutils'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'gettextutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
DECL|variable|notify_decorator
name|'notify_decorator'
op|'='
string|"'nova.openstack.common.notifier.api.notify_decorator'"
newline|'\n'
nl|'\n'
DECL|variable|monkey_patch_opts
name|'monkey_patch_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'monkey_patch'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
name|'False'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Whether to log monkey patching'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'ListOpt'
op|'('
string|"'monkey_patch_modules'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
nl|'\n'
string|"'nova.api.ec2.cloud:%s'"
op|'%'
op|'('
name|'notify_decorator'
op|')'
op|','
nl|'\n'
string|"'nova.compute.api:%s'"
op|'%'
op|'('
name|'notify_decorator'
op|')'
nl|'\n'
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'List of modules/decorators to monkey patch'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|utils_opts
name|'utils_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'password_length'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'12'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Length of generated instance admin passwords'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'instance_usage_audit_period'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'month'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'time period to generate instance usages for.  '"
nl|'\n'
string|"'Time period must be hour, day, month or year'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rootwrap_config'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|'"/etc/nova/rootwrap.conf"'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Path to the rootwrap configuration file to use for '"
nl|'\n'
string|"'running commands as root'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'tempdir'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Explicitly specify the temporary working directory'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'monkey_patch_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'utils_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'network_api_class'"
op|','
string|"'nova.network'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
comment|'# Used for looking up extensions of text'
nl|'\n'
comment|"# to their 'multiplied' byte amount"
nl|'\n'
DECL|variable|BYTE_MULTIPLIERS
name|'BYTE_MULTIPLIERS'
op|'='
op|'{'
nl|'\n'
string|"''"
op|':'
number|'1'
op|','
nl|'\n'
string|"'t'"
op|':'
number|'1024'
op|'**'
number|'4'
op|','
nl|'\n'
string|"'g'"
op|':'
number|'1024'
op|'**'
number|'3'
op|','
nl|'\n'
string|"'m'"
op|':'
number|'1024'
op|'**'
number|'2'
op|','
nl|'\n'
string|"'k'"
op|':'
number|'1024'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# used in limits'
nl|'\n'
DECL|variable|TIME_UNITS
name|'TIME_UNITS'
op|'='
op|'{'
nl|'\n'
string|"'SECOND'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'MINUTE'"
op|':'
number|'60'
op|','
nl|'\n'
string|"'HOUR'"
op|':'
number|'3600'
op|','
nl|'\n'
string|"'DAY'"
op|':'
number|'84400'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_IS_NEUTRON_ATTEMPTED
name|'_IS_NEUTRON_ATTEMPTED'
op|'='
name|'False'
newline|'\n'
DECL|variable|_IS_NEUTRON
name|'_IS_NEUTRON'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|synchronized
name|'synchronized'
op|'='
name|'lockutils'
op|'.'
name|'synchronized_with_prefix'
op|'('
string|"'nova-'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|SM_IMAGE_PROP_PREFIX
name|'SM_IMAGE_PROP_PREFIX'
op|'='
string|'"image_"'
newline|'\n'
DECL|variable|SM_INHERITABLE_KEYS
name|'SM_INHERITABLE_KEYS'
op|'='
op|'('
nl|'\n'
string|"'min_ram'"
op|','
string|"'min_disk'"
op|','
string|"'disk_format'"
op|','
string|"'container_format'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|vpn_ping
name|'def'
name|'vpn_ping'
op|'('
name|'address'
op|','
name|'port'
op|','
name|'timeout'
op|'='
number|'0.05'
op|','
name|'session_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a vpn negotiation packet and returns the server session.\n\n    Returns False on a failure. Basic packet structure is below.\n\n    Client packet (14 bytes)::\n\n         0 1      8 9  13\n        +-+--------+-----+\n        |x| cli_id |?????|\n        +-+--------+-----+\n        x = packet identifier 0x38\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n\n    Server packet (26 bytes)::\n\n         0 1      8 9  13 14    21 2225\n        +-+--------+-----+--------+----+\n        |x| srv_id |?????| cli_id |????|\n        +-+--------+-----+--------+----+\n        x = packet identifier 0x40\n        cli_id = 64 bit identifier\n        ? = unknown, probably flags/padding\n        bit 9 was 1 and the rest were 0 in testing\n\n    """'
newline|'\n'
name|'if'
name|'session_id'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'session_id'
op|'='
name|'random'
op|'.'
name|'randint'
op|'('
number|'0'
op|','
number|'0xffffffffffffffff'
op|')'
newline|'\n'
dedent|''
name|'sock'
op|'='
name|'socket'
op|'.'
name|'socket'
op|'('
name|'socket'
op|'.'
name|'AF_INET'
op|','
name|'socket'
op|'.'
name|'SOCK_DGRAM'
op|')'
newline|'\n'
name|'data'
op|'='
name|'struct'
op|'.'
name|'pack'
op|'('
string|"'!BQxxxxx'"
op|','
number|'0x38'
op|','
name|'session_id'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'sendto'
op|'('
name|'data'
op|','
op|'('
name|'address'
op|','
name|'port'
op|')'
op|')'
newline|'\n'
name|'sock'
op|'.'
name|'settimeout'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'received'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
number|'2048'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'socket'
op|'.'
name|'timeout'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'sock'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'fmt'
op|'='
string|"'!BQxxxxxQxxxx'"
newline|'\n'
name|'if'
name|'len'
op|'('
name|'received'
op|')'
op|'!='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'Expected to receive %(exp)s bytes, but actually %(act)s'"
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'exp'
op|'='
name|'struct'
op|'.'
name|'calcsize'
op|'('
name|'fmt'
op|')'
op|','
name|'act'
op|'='
name|'len'
op|'('
name|'received'
op|')'
op|')'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
dedent|''
op|'('
name|'identifier'
op|','
name|'server_sess'
op|','
name|'client_sess'
op|')'
op|'='
name|'struct'
op|'.'
name|'unpack'
op|'('
name|'fmt'
op|','
name|'received'
op|')'
newline|'\n'
name|'if'
name|'identifier'
op|'=='
number|'0x40'
name|'and'
name|'client_sess'
op|'=='
name|'session_id'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'server_sess'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|execute
dedent|''
dedent|''
name|'def'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience wrapper around oslo\'s execute() method."""'
newline|'\n'
name|'if'
string|"'run_as_root'"
name|'in'
name|'kwargs'
name|'and'
name|'not'
string|"'root_helper'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'root_helper'"
op|']'
op|'='
string|"'sudo nova-rootwrap %s'"
op|'%'
name|'CONF'
op|'.'
name|'rootwrap_config'
newline|'\n'
dedent|''
name|'return'
name|'processutils'
op|'.'
name|'execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|trycmd
dedent|''
name|'def'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convenience wrapper around oslo\'s trycmd() method."""'
newline|'\n'
name|'if'
string|"'run_as_root'"
name|'in'
name|'kwargs'
name|'and'
name|'not'
string|"'root_helper'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'['
string|"'root_helper'"
op|']'
op|'='
string|"'sudo nova-rootwrap %s'"
op|'%'
name|'CONF'
op|'.'
name|'rootwrap_config'
newline|'\n'
dedent|''
name|'return'
name|'processutils'
op|'.'
name|'trycmd'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|novadir
dedent|''
name|'def'
name|'novadir'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'nova'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'nova'
op|'.'
name|'__file__'
op|')'
op|'.'
name|'split'
op|'('
string|"'nova/__init__.py'"
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|debug
dedent|''
name|'def'
name|'debug'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'debug in callback: %s'"
op|')'
op|','
name|'arg'
op|')'
newline|'\n'
name|'return'
name|'arg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_uid
dedent|''
name|'def'
name|'generate_uid'
op|'('
name|'topic'
op|','
name|'size'
op|'='
number|'8'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'characters'
op|'='
string|"'01234567890abcdefghijklmnopqrstuvwxyz'"
newline|'\n'
name|'choices'
op|'='
op|'['
name|'random'
op|'.'
name|'choice'
op|'('
name|'characters'
op|')'
name|'for'
name|'_x'
name|'in'
name|'xrange'
op|'('
name|'size'
op|')'
op|']'
newline|'\n'
name|'return'
string|"'%s-%s'"
op|'%'
op|'('
name|'topic'
op|','
string|"''"
op|'.'
name|'join'
op|'('
name|'choices'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Default symbols to use for passwords. Avoids visually confusing characters.'
nl|'\n'
comment|'# ~6 bits per symbol'
nl|'\n'
DECL|variable|DEFAULT_PASSWORD_SYMBOLS
dedent|''
name|'DEFAULT_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0,1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|','
comment|'# Removed: I, O'
nl|'\n'
string|"'abcdefghijkmnopqrstuvwxyz'"
op|')'
comment|'# Removed: l'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ~5 bits per symbol'
nl|'\n'
DECL|variable|EASIER_PASSWORD_SYMBOLS
name|'EASIER_PASSWORD_SYMBOLS'
op|'='
op|'('
string|"'23456789'"
op|','
comment|'# Removed: 0, 1'
nl|'\n'
string|"'ABCDEFGHJKLMNPQRSTUVWXYZ'"
op|')'
comment|'# Removed: I, O'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_completed_audit_period
name|'def'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
name|'None'
op|','
name|'before'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This method gives you the most recently *completed* audit period.\n\n    arguments:\n            units: string, one of \'hour\', \'day\', \'month\', \'year\'\n                    Periods normally begin at the beginning (UTC) of the\n                    period unit (So a \'day\' period begins at midnight UTC,\n                    a \'month\' unit on the 1st, a \'year\' on Jan, 1)\n                    unit string may be appended with an optional offset\n                    like so:  \'day@18\'  This will begin the period at 18:00\n                    UTC.  \'month@15\' starts a monthly period on the 15th,\n                    and year@3 begins a yearly one on March 1st.\n            before: Give the audit period most recently completed before\n                    <timestamp>. Defaults to now.\n\n\n    returns:  2 tuple of datetimes (begin, end)\n              The begin timestamp of this audit period is the same as the\n              end of the previous.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|'='
name|'CONF'
op|'.'
name|'instance_usage_audit_period'
newline|'\n'
nl|'\n'
dedent|''
name|'offset'
op|'='
number|'0'
newline|'\n'
name|'if'
string|"'@'"
name|'in'
name|'unit'
op|':'
newline|'\n'
indent|'        '
name|'unit'
op|','
name|'offset'
op|'='
name|'unit'
op|'.'
name|'split'
op|'('
string|'"@"'
op|','
number|'1'
op|')'
newline|'\n'
name|'offset'
op|'='
name|'int'
op|'('
name|'offset'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'before'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'before'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'rightnow'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
name|'not'
name|'in'
op|'('
string|"'month'"
op|','
string|"'day'"
op|','
string|"'year'"
op|','
string|"'hour'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'ValueError'
op|'('
string|"'Time period must be hour, day, month or year'"
op|')'
newline|'\n'
dedent|''
name|'if'
name|'unit'
op|'=='
string|"'month'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'rightnow'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'                '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
nl|'\n'
name|'month'
op|'='
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
dedent|''
name|'year'
op|'='
name|'end'
op|'.'
name|'year'
newline|'\n'
name|'if'
number|'1'
op|'>='
name|'end'
op|'.'
name|'month'
op|':'
newline|'\n'
indent|'            '
name|'year'
op|'-='
number|'1'
newline|'\n'
name|'month'
op|'='
number|'12'
op|'+'
op|'('
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'month'
op|'='
name|'end'
op|'.'
name|'month'
op|'-'
number|'1'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
name|'offset'
op|','
name|'month'
op|'='
name|'month'
op|','
name|'year'
op|'='
name|'year'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'year'"
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'offset'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'offset'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
name|'month'
op|'='
name|'offset'
op|','
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'begin'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
name|'offset'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'day'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'hour'
op|'='
name|'offset'
op|','
nl|'\n'
name|'day'
op|'='
name|'rightnow'
op|'.'
name|'day'
op|','
nl|'\n'
name|'month'
op|'='
name|'rightnow'
op|'.'
name|'month'
op|','
nl|'\n'
name|'year'
op|'='
name|'rightnow'
op|'.'
name|'year'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'days'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'elif'
name|'unit'
op|'=='
string|"'hour'"
op|':'
newline|'\n'
indent|'        '
name|'end'
op|'='
name|'rightnow'
op|'.'
name|'replace'
op|'('
name|'minute'
op|'='
name|'offset'
op|','
name|'second'
op|'='
number|'0'
op|','
name|'microsecond'
op|'='
number|'0'
op|')'
newline|'\n'
name|'if'
name|'end'
op|'>='
name|'rightnow'
op|':'
newline|'\n'
indent|'            '
name|'end'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'begin'
op|'='
name|'end'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'begin'
op|','
name|'end'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_password
dedent|''
name|'def'
name|'generate_password'
op|'('
name|'length'
op|'='
name|'None'
op|','
name|'symbolgroups'
op|'='
name|'DEFAULT_PASSWORD_SYMBOLS'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a random password from the supplied symbol groups.\n\n    At least one symbol from each group will be included. Unpredictable\n    results if length is less than the number of symbol groups.\n\n    Believed to be reasonably secure (with a reasonable password length!)\n\n    """'
newline|'\n'
name|'if'
name|'length'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'length'
op|'='
name|'CONF'
op|'.'
name|'password_length'
newline|'\n'
nl|'\n'
dedent|''
name|'r'
op|'='
name|'random'
op|'.'
name|'SystemRandom'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): Some password policies require at least one character'
nl|'\n'
comment|'# from each group of symbols, so start off with one random character'
nl|'\n'
comment|'# from each symbol group'
nl|'\n'
name|'password'
op|'='
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'s'
op|')'
name|'for'
name|'s'
name|'in'
name|'symbolgroups'
op|']'
newline|'\n'
comment|'# If length < len(symbolgroups), the leading characters will only'
nl|'\n'
comment|'# be from the first length groups. Try our best to not be predictable'
nl|'\n'
comment|'# by shuffling and then truncating.'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
name|'password'
op|'='
name|'password'
op|'['
op|':'
name|'length'
op|']'
newline|'\n'
name|'length'
op|'-='
name|'len'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
comment|'# then fill with random characters from all symbol groups'
nl|'\n'
name|'symbols'
op|'='
string|"''"
op|'.'
name|'join'
op|'('
name|'symbolgroups'
op|')'
newline|'\n'
name|'password'
op|'.'
name|'extend'
op|'('
op|'['
name|'r'
op|'.'
name|'choice'
op|'('
name|'symbols'
op|')'
name|'for'
name|'_i'
name|'in'
name|'xrange'
op|'('
name|'length'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# finally shuffle to ensure first x characters aren't from a"
nl|'\n'
comment|'# predictable group'
nl|'\n'
name|'r'
op|'.'
name|'shuffle'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'password'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_octet
dedent|''
name|'def'
name|'last_octet'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'int'
op|'('
name|'address'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_my_ipv4_address
dedent|''
name|'def'
name|'get_my_ipv4_address'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run ip route/addr commands to figure out the best ipv4\n    """'
newline|'\n'
name|'LOCALHOST'
op|'='
string|"'127.0.0.1'"
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet'"
op|','
string|"'-o'"
op|','
string|"'route'"
op|','
string|"'show'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Find the default route'
nl|'\n'
name|'regex_default'
op|'='
op|'('
string|"'default\\s*via\\s*'"
nl|'\n'
string|"'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'"
nl|'\n'
string|"'\\s*dev\\s*(\\w*)\\s*'"
op|')'
newline|'\n'
name|'default_routes'
op|'='
name|'re'
op|'.'
name|'findall'
op|'('
name|'regex_default'
op|','
name|'out'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'default_routes'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'LOCALHOST'
newline|'\n'
dedent|''
name|'gateway'
op|','
name|'iface'
op|'='
name|'default_routes'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
comment|'# Find the right subnet for the gateway/interface for'
nl|'\n'
comment|'# the default route'
nl|'\n'
name|'route'
op|'='
op|'('
string|"'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\\/(\\d{1,2})'"
nl|'\n'
string|"'\\s*dev\\s*(\\w*)\\s*'"
op|')'
newline|'\n'
name|'for'
name|'match'
name|'in'
name|'re'
op|'.'
name|'finditer'
op|'('
name|'route'
op|','
name|'out'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'subnet'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|'+'
string|'"/"'
op|'+'
name|'match'
op|'.'
name|'group'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'if'
op|'('
name|'match'
op|'.'
name|'group'
op|'('
number|'3'
op|')'
op|'=='
name|'iface'
name|'and'
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'gateway'
op|')'
name|'in'
name|'subnet'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'_get_ipv4_address_for_interface'
op|'('
name|'iface'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NovaException'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Couldn\'t get IPv4 : %(ex)s"'
op|')'
op|'%'
op|'{'
string|"'ex'"
op|':'
name|'ex'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'LOCALHOST'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_ipv4_address_for_interface
dedent|''
name|'def'
name|'_get_ipv4_address_for_interface'
op|'('
name|'iface'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Run ip addr show for an interface and grab its ipv4 addresses\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet'"
op|','
string|"'-o'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
name|'iface'
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'regexp_address'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'inet\\s*'"
nl|'\n'
string|"'(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'"
op|')'
newline|'\n'
name|'address'
op|'='
op|'['
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
name|'for'
name|'m'
name|'in'
name|'regexp_address'
op|'.'
name|'finditer'
op|'('
name|'out'
op|'['
number|'0'
op|']'
op|')'
nl|'\n'
name|'if'
name|'m'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
op|'!='
string|"'127.0.0.1'"
op|']'
newline|'\n'
name|'if'
name|'address'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'IPv4 address is not found.: %s'"
op|')'
op|'%'
name|'out'
op|'['
number|'0'
op|']'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Couldn\'t get IPv4 of %(interface)s"'
nl|'\n'
string|'" : %(ex)s"'
op|')'
op|'%'
op|'{'
string|"'interface'"
op|':'
name|'iface'
op|','
string|"'ex'"
op|':'
name|'ex'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_my_linklocal
dedent|''
dedent|''
name|'def'
name|'get_my_linklocal'
op|'('
name|'interface'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'if_str'
op|'='
name|'execute'
op|'('
string|"'ip'"
op|','
string|"'-f'"
op|','
string|"'inet6'"
op|','
string|"'-o'"
op|','
string|"'addr'"
op|','
string|"'show'"
op|','
name|'interface'
op|')'
newline|'\n'
name|'condition'
op|'='
string|"'\\s+inet6\\s+([0-9a-f:]+)/\\d+\\s+scope\\s+link'"
newline|'\n'
name|'links'
op|'='
op|'['
name|'re'
op|'.'
name|'search'
op|'('
name|'condition'
op|','
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'if_str'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|']'
newline|'\n'
name|'address'
op|'='
op|'['
name|'w'
op|'.'
name|'group'
op|'('
number|'1'
op|')'
name|'for'
name|'w'
name|'in'
name|'links'
name|'if'
name|'w'
name|'is'
name|'not'
name|'None'
op|']'
newline|'\n'
name|'if'
name|'address'
op|'['
number|'0'
op|']'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
op|'['
number|'0'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Link Local address is not found.:%s'"
op|')'
op|'%'
name|'if_str'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"Couldn\'t get Link Local IP of %(interface)s"'
nl|'\n'
string|'" :%(ex)s"'
op|')'
op|'%'
op|'{'
string|"'interface'"
op|':'
name|'interface'
op|','
string|"'ex'"
op|':'
name|'ex'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_mailmap
dedent|''
dedent|''
name|'def'
name|'parse_mailmap'
op|'('
name|'mailmap'
op|'='
string|"'.mailmap'"
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'mailmap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fp'
op|'='
name|'open'
op|'('
name|'mailmap'
op|','
string|"'r'"
op|')'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'fp'
op|':'
newline|'\n'
indent|'            '
name|'l'
op|'='
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'and'
string|"' '"
name|'in'
name|'l'
op|':'
newline|'\n'
indent|'                '
name|'canonical_email'
op|','
name|'alias'
op|'='
name|'l'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
newline|'\n'
name|'mapping'
op|'['
name|'alias'
op|'.'
name|'lower'
op|'('
op|')'
op|']'
op|'='
name|'canonical_email'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'mapping'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|str_dict_replace
dedent|''
name|'def'
name|'str_dict_replace'
op|'('
name|'s'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'s1'
op|','
name|'s2'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'s'
op|'='
name|'s'
op|'.'
name|'replace'
op|'('
name|'s1'
op|','
name|'s2'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LazyPluggable
dedent|''
name|'class'
name|'LazyPluggable'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A pluggable backend loaded lazily based on some value."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pivot'
op|','
name|'config_group'
op|'='
name|'None'
op|','
op|'**'
name|'backends'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'__backends'
op|'='
name|'backends'
newline|'\n'
name|'self'
op|'.'
name|'__pivot'
op|'='
name|'pivot'
newline|'\n'
name|'self'
op|'.'
name|'__backend'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'__config_group'
op|'='
name|'config_group'
newline|'\n'
nl|'\n'
DECL|member|__get_backend
dedent|''
name|'def'
name|'__get_backend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'__backend'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'__config_group'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'backend_name'
op|'='
name|'CONF'
op|'['
name|'self'
op|'.'
name|'__pivot'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'backend_name'
op|'='
name|'CONF'
op|'['
name|'self'
op|'.'
name|'__config_group'
op|']'
op|'['
name|'self'
op|'.'
name|'__pivot'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'backend_name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'__backends'
op|':'
newline|'\n'
indent|'                '
name|'msg'
op|'='
name|'_'
op|'('
string|"'Invalid backend: %s'"
op|')'
op|'%'
name|'backend_name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'backend'
op|'='
name|'self'
op|'.'
name|'__backends'
op|'['
name|'backend_name'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'backend'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'name'
op|'='
name|'backend'
newline|'\n'
name|'fromlist'
op|'='
name|'backend'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'__backend'
op|'='
name|'__import__'
op|'('
name|'name'
op|','
name|'None'
op|','
name|'None'
op|','
name|'fromlist'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'__backend'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
name|'self'
op|'.'
name|'__get_backend'
op|'('
op|')'
newline|'\n'
name|'return'
name|'getattr'
op|'('
name|'backend'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|xhtml_escape
dedent|''
dedent|''
name|'def'
name|'xhtml_escape'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Escapes a string so it is valid within XML or XHTML.\n\n    """'
newline|'\n'
name|'return'
name|'saxutils'
op|'.'
name|'escape'
op|'('
name|'value'
op|','
op|'{'
string|'\'"\''
op|':'
string|"'&quot;'"
op|','
string|'"\'"'
op|':'
string|"'&apos;'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|utf8
dedent|''
name|'def'
name|'utf8'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Try to turn a string into utf-8 if possible.\n\n    Code is directly from the utf8 function in\n    http://github.com/facebook/tornado/blob/master/tornado/escape.py\n\n    """'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'value'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'value'
op|','
name|'gettextutils'
op|'.'
name|'Message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'unicode'
op|'('
name|'value'
op|')'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'assert'
name|'isinstance'
op|'('
name|'value'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_from_path
dedent|''
name|'def'
name|'get_from_path'
op|'('
name|'items'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns a list of items matching the specified path.\n\n    Takes an XPath-like expression e.g. prop1/prop2/prop3, and for each item\n    in items, looks up items[prop1][prop2][prop3].  Like XPath, if any of the\n    intermediate results are lists it will treat each list item individually.\n    A \'None\' in items or any child expressions will be ignored, this function\n    will not throw because of None (anywhere) in items.  The returned list\n    will contain no None values.\n\n    """'
newline|'\n'
name|'if'
name|'path'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'('
name|'first_token'
op|','
name|'sep'
op|','
name|'remainder'
op|')'
op|'='
name|'path'
op|'.'
name|'partition'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'first_token'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'Invalid mini_xpath'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'results'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'items'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'items'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
comment|'# Wrap single objects in a list'
nl|'\n'
indent|'        '
name|'items'
op|'='
op|'['
name|'items'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'item'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'item'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'get_method'
op|'='
name|'getattr'
op|'('
name|'item'
op|','
string|"'get'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'get_method'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'child'
op|'='
name|'get_method'
op|'('
name|'first_token'
op|')'
newline|'\n'
name|'if'
name|'child'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'child'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
comment|'# Flatten intermediate lists'
nl|'\n'
indent|'            '
name|'for'
name|'x'
name|'in'
name|'child'
op|':'
newline|'\n'
indent|'                '
name|'results'
op|'.'
name|'append'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'results'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'not'
name|'sep'
op|':'
newline|'\n'
comment|'# No more tokens'
nl|'\n'
indent|'        '
name|'return'
name|'results'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'get_from_path'
op|'('
name|'results'
op|','
name|'remainder'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|flatten_dict
dedent|''
dedent|''
name|'def'
name|'flatten_dict'
op|'('
name|'dict_'
op|','
name|'flattened'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Recursively flatten a nested dictionary."""'
newline|'\n'
name|'flattened'
op|'='
name|'flattened'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'hasattr'
op|'('
name|'value'
op|','
string|"'iteritems'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'flatten_dict'
op|'('
name|'value'
op|','
name|'flattened'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'flattened'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'flattened'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|partition_dict
dedent|''
name|'def'
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return two dicts, one with `keys` the other with everything else."""'
newline|'\n'
name|'intersection'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'difference'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'intersection'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'difference'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'intersection'
op|','
name|'difference'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|map_dict_keys
dedent|''
name|'def'
name|'map_dict_keys'
op|'('
name|'dict_'
op|','
name|'key_map'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict in which the dictionaries keys are mapped to new keys."""'
newline|'\n'
name|'mapped'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'dict_'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapped_key'
op|'='
name|'key_map'
op|'['
name|'key'
op|']'
name|'if'
name|'key'
name|'in'
name|'key_map'
name|'else'
name|'key'
newline|'\n'
name|'mapped'
op|'['
name|'mapped_key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'return'
name|'mapped'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|subset_dict
dedent|''
name|'def'
name|'subset_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict that only contains a subset of keys."""'
newline|'\n'
name|'subset'
op|'='
name|'partition_dict'
op|'('
name|'dict_'
op|','
name|'keys'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'subset'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|diff_dict
dedent|''
name|'def'
name|'diff_dict'
op|'('
name|'orig'
op|','
name|'new'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Return a dict describing how to change orig to new.  The keys\n    correspond to values that have changed; the value will be a list\n    of one or two elements.  The first element of the list will be\n    either \'+\' or \'-\', indicating whether the key was updated or\n    deleted; if the key was updated, the list will contain a second\n    element, giving the updated value.\n    """'
newline|'\n'
comment|'# Figure out what keys went away'
nl|'\n'
name|'result'
op|'='
name|'dict'
op|'('
op|'('
name|'k'
op|','
op|'['
string|"'-'"
op|']'
op|')'
name|'for'
name|'k'
name|'in'
name|'set'
op|'('
name|'orig'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'-'
name|'set'
op|'('
name|'new'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
comment|'# Compute the updates'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'new'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'not'
name|'in'
name|'orig'
name|'or'
name|'value'
op|'!='
name|'orig'
op|'['
name|'key'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
name|'key'
op|']'
op|'='
op|'['
string|"'+'"
op|','
name|'value'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_isinstance
dedent|''
name|'def'
name|'check_isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Checks that obj is of type cls, and lets PyLint infer types."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj'
op|','
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'obj'
newline|'\n'
dedent|''
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|"'Expected object of type: %s'"
op|')'
op|'%'
op|'('
name|'str'
op|'('
name|'cls'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_server_string
dedent|''
name|'def'
name|'parse_server_string'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Parses the given server_string and returns a list of host and port.\n    If it\'s not a combination of host part and port, the port element\n    is a null string. If the input is invalid expression, return a null\n    list.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# First of all, exclude pure IPv6 address (w/o port).'
nl|'\n'
indent|'        '
name|'if'
name|'netaddr'
op|'.'
name|'valid_ipv6'
op|'('
name|'server_str'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# Next, check if this is IPv6 address with a port number combination.'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|'"]:"'
op|')'
op|'!='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'replace'
op|'('
string|"'['"
op|','
string|"''"
op|','
number|'1'
op|')'
op|'.'
name|'split'
op|'('
string|"']:'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
comment|'# Third, check if this is a combination of an address and a port'
nl|'\n'
dedent|''
name|'if'
name|'server_str'
op|'.'
name|'find'
op|'('
string|"':'"
op|')'
op|'=='
op|'-'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'server_str'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
comment|'# This must be a combination of an address and a port'
nl|'\n'
dedent|''
op|'('
name|'address'
op|','
name|'port'
op|')'
op|'='
name|'server_str'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'return'
op|'('
name|'address'
op|','
name|'port'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Invalid server_string: %s'"
op|')'
op|','
name|'server_str'
op|')'
newline|'\n'
name|'return'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_int_like
dedent|''
dedent|''
name|'def'
name|'is_int_like'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if a value looks like an int."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'int'
op|'('
name|'val'
op|')'
op|')'
op|'=='
name|'str'
op|'('
name|'val'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv4
dedent|''
dedent|''
name|'def'
name|'is_valid_ipv4'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Verify that address represents a valid IPv4 address."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'netaddr'
op|'.'
name|'valid_ipv4'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv6
dedent|''
dedent|''
name|'def'
name|'is_valid_ipv6'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'netaddr'
op|'.'
name|'valid_ipv6'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_ipv6_cidr
dedent|''
dedent|''
name|'def'
name|'is_valid_ipv6_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
op|'.'
name|'cidr'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_shortened_ipv6
dedent|''
dedent|''
name|'def'
name|'get_shortened_ipv6'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'addr'
op|'='
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'addr'
op|'.'
name|'ipv6'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_shortened_ipv6_cidr
dedent|''
name|'def'
name|'get_shortened_ipv6_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'net'
op|'='
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|','
name|'version'
op|'='
number|'6'
op|')'
newline|'\n'
name|'return'
name|'str'
op|'('
name|'net'
op|'.'
name|'cidr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_valid_cidr
dedent|''
name|'def'
name|'is_valid_cidr'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if address is valid\n\n    The provided address can be a IPv6 or a IPv4\n    CIDR address.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Validate the correct CIDR Address'
nl|'\n'
indent|'        '
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'address'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'netaddr'
op|'.'
name|'core'
op|'.'
name|'AddrFormatError'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'UnboundLocalError'
op|':'
newline|'\n'
comment|'# NOTE(MotoKen): work around bug in netaddr 0.7.5 (see detail in'
nl|'\n'
comment|'# https://github.com/drkjam/netaddr/issues/2)'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# Prior validation partially verify /xx part'
nl|'\n'
comment|'# Verify it here'
nl|'\n'
dedent|''
name|'ip_segment'
op|'='
name|'address'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
newline|'\n'
nl|'\n'
name|'if'
op|'('
name|'len'
op|'('
name|'ip_segment'
op|')'
op|'<='
number|'1'
name|'or'
nl|'\n'
name|'ip_segment'
op|'['
number|'1'
op|']'
op|'=='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_ip_version
dedent|''
name|'def'
name|'get_ip_version'
op|'('
name|'network'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns the IP version of a network (IPv4 or IPv6).\n\n    Raises AddrFormatError if invalid network.\n    """'
newline|'\n'
name|'if'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|')'
op|'.'
name|'version'
op|'=='
number|'6'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"IPv6"'
newline|'\n'
dedent|''
name|'elif'
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'network'
op|')'
op|'.'
name|'version'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"IPv4"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|monkey_patch
dedent|''
dedent|''
name|'def'
name|'monkey_patch'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""If the Flags.monkey_patch set as True,\n    this function patches a decorator\n    for all functions in specified modules.\n    You can set decorators for each modules\n    using CONF.monkey_patch_modules.\n    The format is "Module path:Decorator function".\n    Example:\n      \'nova.api.ec2.cloud:nova.openstack.common.notifier.api.notify_decorator\'\n\n    Parameters of the decorator is as follows.\n    (See nova.openstack.common.notifier.api.notify_decorator)\n\n    name - name of the function\n    function - object of the function\n    """'
newline|'\n'
comment|'# If CONF.monkey_patch is not True, this function do nothing.'
nl|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'monkey_patch'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
comment|'# Get list of modules and decorators'
nl|'\n'
dedent|''
name|'for'
name|'module_and_decorator'
name|'in'
name|'CONF'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'        '
name|'module'
op|','
name|'decorator_name'
op|'='
name|'module_and_decorator'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
comment|'# import decorator function'
nl|'\n'
name|'decorator'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'decorator_name'
op|')'
newline|'\n'
name|'__import__'
op|'('
name|'module'
op|')'
newline|'\n'
comment|'# Retrieve module information using pyclbr'
nl|'\n'
name|'module_data'
op|'='
name|'pyclbr'
op|'.'
name|'readmodule_ex'
op|'('
name|'module'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'module_data'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# set the decorator for the class methods'
nl|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Class'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'clz'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'for'
name|'method'
op|','
name|'func'
name|'in'
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'clz'
op|','
name|'inspect'
op|'.'
name|'ismethod'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'setattr'
op|'('
name|'clz'
op|','
name|'method'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|','
name|'method'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
comment|'# set the decorator for the function'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'module_data'
op|'['
name|'key'
op|']'
op|','
name|'pyclbr'
op|'.'
name|'Function'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'func'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module'
op|']'
op|','
name|'key'
op|','
nl|'\n'
name|'decorator'
op|'('
string|'"%s.%s"'
op|'%'
op|'('
name|'module'
op|','
name|'key'
op|')'
op|','
name|'func'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_to_list_dict
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'convert_to_list_dict'
op|'('
name|'lst'
op|','
name|'label'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Convert a value or list into a list of dicts."""'
newline|'\n'
name|'if'
name|'not'
name|'lst'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'lst'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'lst'
op|'='
op|'['
name|'lst'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'{'
name|'label'
op|':'
name|'x'
op|'}'
name|'for'
name|'x'
name|'in'
name|'lst'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|timefunc
dedent|''
name|'def'
name|'timefunc'
op|'('
name|'func'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator that logs how long a particular function took to execute."""'
newline|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'total_time'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start_time'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"timefunc: \'%(name)s\' took %(total_time).2f secs"'
op|')'
op|'%'
nl|'\n'
name|'dict'
op|'('
name|'name'
op|'='
name|'func'
op|'.'
name|'__name__'
op|','
name|'total_time'
op|'='
name|'total_time'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'inner'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|make_dev_path
dedent|''
name|'def'
name|'make_dev_path'
op|'('
name|'dev'
op|','
name|'partition'
op|'='
name|'None'
op|','
name|'base'
op|'='
string|"'/dev'"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a path to a particular device.\n\n    >>> make_dev_path(\'xvdc\')\n    /dev/xvdc\n\n    >>> make_dev_path(\'xvdc\', 1)\n    /dev/xvdc1\n    """'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'base'
op|','
name|'dev'
op|')'
newline|'\n'
name|'if'
name|'partition'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'+='
name|'str'
op|'('
name|'partition'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'path'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|total_seconds
dedent|''
name|'def'
name|'total_seconds'
op|'('
name|'td'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Local total_seconds implementation for compatibility with python 2.6."""'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'td'
op|','
string|"'total_seconds'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'td'
op|'.'
name|'total_seconds'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
op|'('
name|'td'
op|'.'
name|'days'
op|'*'
number|'86400'
op|'+'
name|'td'
op|'.'
name|'seconds'
op|')'
op|'*'
number|'10'
op|'**'
number|'6'
op|'+'
nl|'\n'
name|'td'
op|'.'
name|'microseconds'
op|')'
op|'/'
number|'10.0'
op|'**'
number|'6'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|sanitize_hostname
dedent|''
dedent|''
name|'def'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a hostname which conforms to RFC-952 and RFC-1123 specs."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'hostname'
op|','
name|'unicode'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'encode'
op|'('
string|"'latin-1'"
op|','
string|"'ignore'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[ _]'"
op|','
string|"'-'"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'re'
op|'.'
name|'sub'
op|'('
string|"'[^\\w.-]+'"
op|','
string|"''"
op|','
name|'hostname'
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'hostname'
op|'='
name|'hostname'
op|'.'
name|'strip'
op|'('
string|"'.-'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'hostname'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_cached_file
dedent|''
name|'def'
name|'read_cached_file'
op|'('
name|'filename'
op|','
name|'cache_info'
op|','
name|'reload_func'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Read from a file if it has been modified.\n\n    :param cache_info: dictionary to hold opaque cache.\n    :param reload_func: optional function to be called with data when\n                        file is reloaded due to a modification.\n\n    :returns: data from file\n\n    """'
newline|'\n'
name|'mtime'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'cache_info'
name|'or'
name|'mtime'
op|'!='
name|'cache_info'
op|'.'
name|'get'
op|'('
string|"'mtime'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Reloading cached file %s"'
op|')'
op|'%'
name|'filename'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'filename'
op|')'
name|'as'
name|'fap'
op|':'
newline|'\n'
indent|'            '
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'fap'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
dedent|''
name|'cache_info'
op|'['
string|"'mtime'"
op|']'
op|'='
name|'mtime'
newline|'\n'
name|'if'
name|'reload_func'
op|':'
newline|'\n'
indent|'            '
name|'reload_func'
op|'('
name|'cache_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'cache_info'
op|'['
string|"'data'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|hash_file
dedent|''
name|'def'
name|'hash_file'
op|'('
name|'file_like_object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a hash for the contents of a file."""'
newline|'\n'
name|'checksum'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
op|')'
newline|'\n'
name|'for'
name|'chunk'
name|'in'
name|'iter'
op|'('
name|'lambda'
op|':'
name|'file_like_object'
op|'.'
name|'read'
op|'('
number|'32768'
op|')'
op|','
string|"b''"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'checksum'
op|'.'
name|'update'
op|'('
name|'chunk'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'checksum'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_mutation
name|'def'
name|'temporary_mutation'
op|'('
name|'obj'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily set the attr on a particular object to a given value then\n    revert when finished.\n\n    One use of this is to temporarily set the read_deleted flag on a context\n    object:\n\n        with temporary_mutation(context, read_deleted="yes"):\n            do_something_that_needed_deleted_objects()\n    """'
newline|'\n'
DECL|function|is_dict_like
name|'def'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'hasattr'
op|'('
name|'thing'
op|','
string|"'has_key'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|get
dedent|''
name|'def'
name|'get'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'default'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'thing'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
name|'default'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'default'
op|')'
newline|'\n'
nl|'\n'
DECL|function|set_value
dedent|''
dedent|''
name|'def'
name|'set_value'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'thing'
op|','
name|'attr'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|function|delete
dedent|''
dedent|''
name|'def'
name|'delete'
op|'('
name|'thing'
op|','
name|'attr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'is_dict_like'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'thing'
op|'['
name|'attr'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'delattr'
op|'('
name|'thing'
op|','
name|'attr'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'NOT_PRESENT'
op|'='
name|'object'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'old_values'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
op|','
name|'new_value'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_values'
op|'['
name|'attr'
op|']'
op|'='
name|'get'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'NOT_PRESENT'
op|')'
newline|'\n'
name|'set_value'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'new_value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'attr'
op|','
name|'old_value'
name|'in'
name|'old_values'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'old_value'
name|'is'
name|'NOT_PRESENT'
op|':'
newline|'\n'
indent|'                '
name|'delete'
op|'('
name|'obj'
op|','
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'set_value'
op|'('
name|'obj'
op|','
name|'attr'
op|','
name|'old_value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_mac_address
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'generate_mac_address'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate an Ethernet MAC address."""'
newline|'\n'
comment|'# NOTE(vish): We would prefer to use 0xfe here to ensure that linux'
nl|'\n'
comment|"#             bridge mac addresses don't change, but it appears to"
nl|'\n'
comment|'#             conflict with libvirt, so we use the next highest octet'
nl|'\n'
comment|'#             that has the unicast and locally administered bits set'
nl|'\n'
comment|'#             properly: 0xfa.'
nl|'\n'
comment|'#             Discussion: https://bugs.launchpad.net/nova/+bug/921838'
nl|'\n'
name|'mac'
op|'='
op|'['
number|'0xfa'
op|','
number|'0x16'
op|','
number|'0x3e'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|','
nl|'\n'
name|'random'
op|'.'
name|'randint'
op|'('
number|'0x00'
op|','
number|'0xff'
op|')'
op|']'
newline|'\n'
name|'return'
string|"':'"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
string|'"%02x"'
op|'%'
name|'x'
op|','
name|'mac'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|read_file_as_root
dedent|''
name|'def'
name|'read_file_as_root'
op|'('
name|'file_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Secure helper to read file as root."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'_err'
op|'='
name|'execute'
op|'('
string|"'cat'"
op|','
name|'file_path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'out'
newline|'\n'
dedent|''
name|'except'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'FileNotFound'
op|'('
name|'file_path'
op|'='
name|'file_path'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|temporary_chown
name|'def'
name|'temporary_chown'
op|'('
name|'path'
op|','
name|'owner_uid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Temporarily chown a path.\n\n    :params owner_uid: UID of temporary owner (defaults to current user)\n    """'
newline|'\n'
name|'if'
name|'owner_uid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'owner_uid'
op|'='
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'orig_uid'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'path'
op|')'
op|'.'
name|'st_uid'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'        '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'owner_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'orig_uid'
op|'!='
name|'owner_uid'
op|':'
newline|'\n'
indent|'            '
name|'execute'
op|'('
string|"'chown'"
op|','
name|'orig_uid'
op|','
name|'path'
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|tempdir
name|'def'
name|'tempdir'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'argdict'
op|'='
name|'kwargs'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'dir'"
name|'not'
name|'in'
name|'argdict'
op|':'
newline|'\n'
indent|'        '
name|'argdict'
op|'['
string|"'dir'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'tempdir'
newline|'\n'
dedent|''
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|'**'
name|'argdict'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'tmpdir'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Could not remove tmpdir: %s'"
op|')'
op|','
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|walk_class_hierarchy
dedent|''
dedent|''
dedent|''
name|'def'
name|'walk_class_hierarchy'
op|'('
name|'clazz'
op|','
name|'encountered'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Walk class hierarchy, yielding most derived classes first."""'
newline|'\n'
name|'if'
name|'not'
name|'encountered'
op|':'
newline|'\n'
indent|'        '
name|'encountered'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'for'
name|'subclass'
name|'in'
name|'clazz'
op|'.'
name|'__subclasses__'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'subclass'
name|'not'
name|'in'
name|'encountered'
op|':'
newline|'\n'
indent|'            '
name|'encountered'
op|'.'
name|'append'
op|'('
name|'subclass'
op|')'
newline|'\n'
comment|'# drill down to leaves first'
nl|'\n'
name|'for'
name|'subsubclass'
name|'in'
name|'walk_class_hierarchy'
op|'('
name|'subclass'
op|','
name|'encountered'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'yield'
name|'subsubclass'
newline|'\n'
dedent|''
name|'yield'
name|'subclass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UndoManager
dedent|''
dedent|''
dedent|''
name|'class'
name|'UndoManager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provides a mechanism to facilitate rolling back a series of actions\n    when an exception is raised.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|undo_with
dedent|''
name|'def'
name|'undo_with'
op|'('
name|'self'
op|','
name|'undo_func'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'undo_stack'
op|'.'
name|'append'
op|'('
name|'undo_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rollback
dedent|''
name|'def'
name|'_rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'undo_func'
name|'in'
name|'reversed'
op|'('
name|'self'
op|'.'
name|'undo_stack'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'undo_func'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|rollback_and_reraise
dedent|''
dedent|''
name|'def'
name|'rollback_and_reraise'
op|'('
name|'self'
op|','
name|'msg'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rollback a series of actions then re-raise the exception.\n\n        .. note:: (sirp) This should only be called within an\n                  exception handler.\n        """'
newline|'\n'
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'msg'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_rollback'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|mkfs
dedent|''
dedent|''
dedent|''
name|'def'
name|'mkfs'
op|'('
name|'fs'
op|','
name|'path'
op|','
name|'label'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Format a file or block device\n\n    :param fs: Filesystem type (examples include \'swap\', \'ext3\', \'ext4\'\n               \'btrfs\', etc.)\n    :param path: Path to file or block device to format\n    :param label: Volume label to use\n    """'
newline|'\n'
name|'if'
name|'fs'
op|'=='
string|"'swap'"
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|"'mkswap'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'['
string|"'mkfs'"
op|','
string|"'-t'"
op|','
name|'fs'
op|']'
newline|'\n'
comment|'#add -F to force no interactive execute on non-block device.'
nl|'\n'
dedent|''
name|'if'
name|'fs'
name|'in'
op|'('
string|"'ext3'"
op|','
string|"'ext4'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-F'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'label'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fs'
name|'in'
op|'('
string|"'msdos'"
op|','
string|"'vfat'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'label_opt'
op|'='
string|"'-n'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'label_opt'
op|'='
string|"'-L'"
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'extend'
op|'('
op|'['
name|'label_opt'
op|','
name|'label'
op|']'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'.'
name|'append'
op|'('
name|'path'
op|')'
newline|'\n'
name|'execute'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|last_bytes
dedent|''
name|'def'
name|'last_bytes'
op|'('
name|'file_like_object'
op|','
name|'num'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return num bytes from the end of the file, and remaining byte count.\n\n    :param file_like_object: The file to read\n    :param num: The number of bytes to return\n\n    :returns (data, remaining)\n    """'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'file_like_object'
op|'.'
name|'seek'
op|'('
op|'-'
name|'num'
op|','
name|'os'
op|'.'
name|'SEEK_END'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'IOError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'e'
op|'.'
name|'errno'
op|'=='
number|'22'
op|':'
newline|'\n'
indent|'            '
name|'file_like_object'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'remaining'
op|'='
name|'file_like_object'
op|'.'
name|'tell'
op|'('
op|')'
newline|'\n'
name|'return'
op|'('
name|'file_like_object'
op|'.'
name|'read'
op|'('
op|')'
op|','
name|'remaining'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|metadata_to_dict
dedent|''
name|'def'
name|'metadata_to_dict'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'item'
op|'.'
name|'get'
op|'('
string|"'deleted'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
name|'item'
op|'['
string|"'key'"
op|']'
op|']'
op|'='
name|'item'
op|'['
string|"'value'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|dict_to_metadata
dedent|''
name|'def'
name|'dict_to_metadata'
op|'('
name|'metadata'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'result'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'metadata'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'.'
name|'append'
op|'('
name|'dict'
op|'('
name|'key'
op|'='
name|'key'
op|','
name|'value'
op|'='
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_meta
dedent|''
name|'def'
name|'instance_meta'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|instance_sys_meta
dedent|''
dedent|''
name|'def'
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'not'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'system_metadata'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'metadata_to_dict'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_wrapped_function
dedent|''
dedent|''
name|'def'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the method at the bottom of a stack of decorators."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'func_closure'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'func_closure'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'function'
newline|'\n'
nl|'\n'
DECL|function|_get_wrapped_function
dedent|''
name|'def'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'func_closure'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'func_closure'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'closure'
name|'in'
name|'function'
op|'.'
name|'func_closure'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'='
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
name|'deeper_func'
op|'='
name|'_get_wrapped_function'
op|'('
name|'func'
op|')'
newline|'\n'
name|'if'
name|'deeper_func'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'deeper_func'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'closure'
op|'.'
name|'cell_contents'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExceptionHelper
dedent|''
name|'class'
name|'ExceptionHelper'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class to wrap another and translate the ClientExceptions raised by its\n    function calls to the actual ones.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_target'
op|'='
name|'target'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'_target'
op|','
name|'name'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'func'
op|')'
newline|'\n'
DECL|function|wrapper
name|'def'
name|'wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'rpc_common'
op|'.'
name|'ClientException'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'raise'
op|'('
name|'e'
op|'.'
name|'_exc_info'
op|'['
number|'1'
op|']'
op|','
name|'None'
op|','
name|'e'
op|'.'
name|'_exc_info'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'wrapper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_string_length
dedent|''
dedent|''
name|'def'
name|'check_string_length'
op|'('
name|'value'
op|','
name|'name'
op|','
name|'min_length'
op|'='
number|'0'
op|','
name|'max_length'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check the length of specified string\n    :param value: the value of the string\n    :param name: the name of the string\n    :param min_length: the min_length of the string\n    :param max_length: the max_length of the string\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'value'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%s is not a string or unicode"'
op|')'
op|'%'
name|'name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'value'
op|')'
op|'<'
name|'min_length'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%(name)s has a minimum character requirement of "'
nl|'\n'
string|'"%(min_length)s."'
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'min_length'"
op|':'
name|'min_length'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'max_length'
name|'and'
name|'len'
op|'('
name|'value'
op|')'
op|'>'
name|'max_length'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|'"%(name)s has more than %(max_length)s "'
nl|'\n'
string|'"characters."'
op|')'
op|'%'
op|'{'
string|"'name'"
op|':'
name|'name'
op|','
string|"'max_length'"
op|':'
name|'max_length'
op|'}'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'message'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|validate_integer
dedent|''
dedent|''
name|'def'
name|'validate_integer'
op|'('
name|'value'
op|','
name|'name'
op|','
name|'min_value'
op|'='
name|'None'
op|','
name|'max_value'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make sure that value is a valid integer, potentially within range."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'int'
op|'('
name|'str'
op|'('
name|'value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ValueError'
op|':'
newline|'\n'
indent|'        '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be an integer'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
name|'reason'
op|'='
op|'('
nl|'\n'
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'min_value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'<'
name|'min_value'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be >= %(min_value)d'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
op|'('
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'min_value'"
op|':'
name|'min_value'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'max_value'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'value'
op|'>'
name|'max_value'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
name|'_'
op|'('
string|"'%(value_name)s must be <= %(max_value)d'"
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'InvalidInput'
op|'('
nl|'\n'
name|'reason'
op|'='
op|'('
nl|'\n'
name|'msg'
op|'%'
op|'{'
string|"'value_name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'max_value'"
op|':'
name|'max_value'
op|'}'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|spawn_n
dedent|''
name|'def'
name|'spawn_n'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Passthrough method for eventlet.spawn_n.\n\n    This utility exists so that it can be stubbed for testing without\n    interfering with the service spawns.\n    """'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn_n'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_none_string
dedent|''
name|'def'
name|'is_none_string'
op|'('
name|'val'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Check if a string represents a None value.\n    """'
newline|'\n'
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'val'
op|','
name|'basestring'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'val'
op|'.'
name|'lower'
op|'('
op|')'
op|'=='
string|"'none'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|convert_version_to_int
dedent|''
name|'def'
name|'convert_version_to_int'
op|'('
name|'version'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'version'
op|'['
number|'0'
op|']'
op|'*'
number|'1000000'
op|'+'
name|'version'
op|'['
number|'1'
op|']'
op|'*'
number|'1000'
op|'+'
name|'version'
op|'['
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_neutron
dedent|''
name|'def'
name|'is_neutron'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_IS_NEUTRON_ATTEMPTED'
newline|'\n'
name|'global'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
name|'if'
name|'_IS_NEUTRON_ATTEMPTED'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# compatibility with Folsom/Grizzly configs'
nl|'\n'
indent|'        '
name|'cls_name'
op|'='
name|'CONF'
op|'.'
name|'network_api_class'
newline|'\n'
name|'if'
name|'cls_name'
op|'=='
string|"'nova.network.quantumv2.api.API'"
op|':'
newline|'\n'
indent|'            '
name|'cls_name'
op|'='
string|"'nova.network.neutronv2.api.API'"
newline|'\n'
dedent|''
name|'_IS_NEUTRON_ATTEMPTED'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'neutronv2'
name|'import'
name|'api'
name|'as'
name|'neutron_api'
newline|'\n'
name|'_IS_NEUTRON'
op|'='
name|'issubclass'
op|'('
name|'importutils'
op|'.'
name|'import_class'
op|'('
name|'cls_name'
op|')'
op|','
nl|'\n'
name|'neutron_api'
op|'.'
name|'API'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'        '
name|'_IS_NEUTRON'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|reset_is_neutron
dedent|''
name|'def'
name|'reset_is_neutron'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'global'
name|'_IS_NEUTRON_ATTEMPTED'
newline|'\n'
name|'global'
name|'_IS_NEUTRON'
newline|'\n'
nl|'\n'
name|'_IS_NEUTRON_ATTEMPTED'
op|'='
name|'False'
newline|'\n'
name|'_IS_NEUTRON'
op|'='
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|is_auto_disk_config_disabled
dedent|''
name|'def'
name|'is_auto_disk_config_disabled'
op|'('
name|'auto_disk_config_raw'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'auto_disk_config_disabled'
op|'='
name|'False'
newline|'\n'
name|'if'
name|'auto_disk_config_raw'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'adc_lowered'
op|'='
name|'auto_disk_config_raw'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'adc_lowered'
op|'=='
string|'"disabled"'
op|':'
newline|'\n'
indent|'            '
name|'auto_disk_config_disabled'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'auto_disk_config_disabled'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_auto_disk_config_from_instance
dedent|''
name|'def'
name|'get_auto_disk_config_from_instance'
op|'('
name|'instance'
op|'='
name|'None'
op|','
name|'sys_meta'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'sys_meta'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'sys_meta'
op|'.'
name|'get'
op|'('
string|'"image_auto_disk_config"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_auto_disk_config_from_image_props
dedent|''
name|'def'
name|'get_auto_disk_config_from_image_props'
op|'('
name|'image_properties'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'image_properties'
op|'.'
name|'get'
op|'('
string|'"auto_disk_config"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_system_metadata_from_image
dedent|''
name|'def'
name|'get_system_metadata_from_image'
op|'('
name|'image_meta'
op|','
name|'instance_type'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'system_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'prefix_format'
op|'='
name|'SM_IMAGE_PROP_PREFIX'
op|'+'
string|"'%s'"
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'properties'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_value'
op|'='
name|'unicode'
op|'('
name|'value'
op|')'
op|'['
op|':'
number|'255'
op|']'
newline|'\n'
name|'system_meta'
op|'['
name|'prefix_format'
op|'%'
name|'key'
op|']'
op|'='
name|'new_value'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'image_meta'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'key'
op|'=='
string|"'min_disk'"
name|'and'
name|'instance_type'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image_meta'
op|'.'
name|'get'
op|'('
string|"'disk_format'"
op|')'
op|'=='
string|"'vhd'"
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'value'
op|'='
name|'max'
op|'('
name|'value'
op|','
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'value'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'system_meta'
op|'['
name|'prefix_format'
op|'%'
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'system_meta'
newline|'\n'
dedent|''
endmarker|''
end_unit

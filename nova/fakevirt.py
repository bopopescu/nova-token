begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration. '
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Copyright 2010 Anso Labs, LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nA fake (in-memory) hypervisor+api. Allows nova testing w/o KVM and libvirt.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
name|'import'
name|'ElementTree'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirtConnection
name|'class'
name|'FakeVirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
comment|"# FIXME: networkCreateXML, listNetworks don't do anything since"
nl|'\n'
comment|"# they aren't exercised in tests yet"
nl|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'next_index'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|instance
name|'def'
name|'instance'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'cls'
op|','
string|"'_instance'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cls'
op|'.'
name|'_instance'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'.'
name|'_instance'
newline|'\n'
nl|'\n'
DECL|member|lookupByID
dedent|''
name|'def'
name|'lookupByID'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'instances'
op|'['
name|'str'
op|'('
name|'i'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|listDomainsID
dedent|''
name|'def'
name|'listDomainsID'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|listNetworks
dedent|''
name|'def'
name|'listNetworks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|lookupByName
dedent|''
name|'def'
name|'lookupByName'
op|'('
name|'self'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'x'
name|'in'
name|'self'
op|'.'
name|'instances'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'name'
op|'('
op|')'
op|'=='
name|'instance_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'x'
newline|'\n'
dedent|''
dedent|''
name|'raise'
name|'Exception'
op|'('
string|"'no instance found for instance_id: %s'"
op|'%'
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|networkCreateXML
dedent|''
name|'def'
name|'networkCreateXML'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|createXML
dedent|''
name|'def'
name|'createXML'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
comment|'# parse the xml :('
nl|'\n'
indent|'        '
name|'xml_stringio'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'my_xml'
op|'='
name|'ElementTree'
op|'.'
name|'parse'
op|'('
name|'xml_stringio'
op|')'
newline|'\n'
name|'name'
op|'='
name|'my_xml'
op|'.'
name|'find'
op|'('
string|"'name'"
op|')'
op|'.'
name|'text'
newline|'\n'
nl|'\n'
name|'fake_instance'
op|'='
name|'FakeVirtInstance'
op|'('
name|'conn'
op|'='
name|'self'
op|','
nl|'\n'
name|'index'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'next_index'
op|')'
op|','
nl|'\n'
name|'name'
op|'='
name|'name'
op|','
nl|'\n'
name|'xml'
op|'='
name|'my_xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'['
name|'str'
op|'('
name|'self'
op|'.'
name|'next_index'
op|')'
op|']'
op|'='
name|'fake_instance'
newline|'\n'
name|'self'
op|'.'
name|'next_index'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_removeInstance
dedent|''
name|'def'
name|'_removeInstance'
op|'('
name|'self'
op|','
name|'i'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instances'
op|'.'
name|'pop'
op|'('
name|'str'
op|'('
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirtInstance
dedent|''
dedent|''
name|'class'
name|'FakeVirtInstance'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|NOSTATE
indent|'    '
name|'NOSTATE'
op|'='
number|'0x00'
newline|'\n'
DECL|variable|RUNNING
name|'RUNNING'
op|'='
number|'0x01'
newline|'\n'
DECL|variable|BLOCKED
name|'BLOCKED'
op|'='
number|'0x02'
newline|'\n'
DECL|variable|PAUSED
name|'PAUSED'
op|'='
number|'0x03'
newline|'\n'
DECL|variable|SHUTDOWN
name|'SHUTDOWN'
op|'='
number|'0x04'
newline|'\n'
DECL|variable|SHUTOFF
name|'SHUTOFF'
op|'='
number|'0x05'
newline|'\n'
DECL|variable|CRASHED
name|'CRASHED'
op|'='
number|'0x06'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conn'
op|','
name|'index'
op|','
name|'name'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_conn'
op|'='
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'_destroyed'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'_index'
op|'='
name|'index'
newline|'\n'
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'RUNNING'
newline|'\n'
nl|'\n'
DECL|member|name
dedent|''
name|'def'
name|'name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_name'
newline|'\n'
nl|'\n'
DECL|member|destroy
dedent|''
name|'def'
name|'destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'_state'
op|'=='
name|'self'
op|'.'
name|'SHUTOFF'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|"'instance already destroyed: %s'"
op|'%'
name|'self'
op|'.'
name|'name'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_state'
op|'='
name|'self'
op|'.'
name|'SHUTDOWN'
newline|'\n'
name|'self'
op|'.'
name|'_conn'
op|'.'
name|'_removeInstance'
op|'('
name|'self'
op|'.'
name|'_index'
op|')'
newline|'\n'
nl|'\n'
DECL|member|info
dedent|''
name|'def'
name|'info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'_state'
op|','
number|'0'
op|','
number|'2'
op|','
number|'0'
op|','
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|XMLDesc
dedent|''
name|'def'
name|'XMLDesc'
op|'('
name|'self'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'open'
op|'('
string|"'fakevirtinstance.xml'"
op|','
string|"'r'"
op|')'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|blockStats
dedent|''
name|'def'
name|'blockStats'
op|'('
name|'self'
op|','
name|'disk'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
name|'null'
op|']'
newline|'\n'
nl|'\n'
DECL|member|interfaceStats
dedent|''
name|'def'
name|'interfaceStats'
op|'('
name|'self'
op|','
name|'iface'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|','
number|'0L'
op|']'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

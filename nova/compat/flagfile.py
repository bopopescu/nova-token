begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
string|"'''\nCompatibility code for handling the deprecated --flagfile option.\n\ngflags style configuration files are deprecated and will be removed in future.\n\nThe code in this module transles --flagfile options into --config-file and can\nbe removed when support for --flagfile is removed.\n'''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_flagfile
name|'def'
name|'_get_flagfile'
op|'('
name|'argp'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Parse the filename from a --flagfile argument.\n\n    The current and next arguments are passed as a 2 item list. If the\n    flagfile filename is in the next argument, the two arguments are\n    joined into the first item while the second item is set to None.\n    '''"
newline|'\n'
name|'i'
op|'='
name|'argp'
op|'['
number|'0'
op|']'
op|'.'
name|'find'
op|'('
string|"'-flagfile'"
op|')'
newline|'\n'
name|'if'
name|'i'
op|'<'
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
comment|'# Accept -flagfile or -flagfile'
nl|'\n'
dedent|''
name|'if'
name|'i'
op|'!='
number|'0'
name|'and'
op|'('
name|'i'
op|'!='
number|'1'
name|'or'
name|'argp'
op|'['
number|'0'
op|']'
op|'['
name|'i'
op|']'
op|'!='
string|"'-'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'i'
op|'+='
name|'len'
op|'('
string|"'-flagfile'"
op|')'
newline|'\n'
name|'if'
name|'i'
op|'=='
name|'len'
op|'('
name|'argp'
op|'['
number|'0'
op|']'
op|')'
op|':'
comment|'# Accept [-]-flagfile foo'
newline|'\n'
indent|'        '
name|'argp'
op|'['
number|'0'
op|']'
op|'+='
string|"'='"
op|'+'
name|'argp'
op|'['
number|'1'
op|']'
newline|'\n'
name|'argp'
op|'['
number|'1'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'argp'
op|'['
number|'0'
op|']'
op|'['
name|'i'
op|']'
op|'!='
string|"'='"
op|':'
comment|'# Accept [-]-flagfile=foo'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'argp'
op|'['
number|'0'
op|']'
op|'['
name|'i'
op|'+'
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_open_file_for_reading
dedent|''
name|'def'
name|'_open_file_for_reading'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Helper method which test code may stub out.'''"
newline|'\n'
name|'return'
name|'open'
op|'('
name|'path'
op|','
string|"'r'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_open_fd_for_writing
dedent|''
name|'def'
name|'_open_fd_for_writing'
op|'('
name|'fd'
op|','
name|'_path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Helper method which test code may stub out.'''"
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'w'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_read_lines
dedent|''
name|'def'
name|'_read_lines'
op|'('
name|'flagfile'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Read a flag file, returning all lines with comments stripped.'''"
newline|'\n'
name|'with'
name|'_open_file_for_reading'
op|'('
name|'flagfile'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'lines'
op|'='
name|'f'
op|'.'
name|'readlines'
op|'('
op|')'
newline|'\n'
dedent|''
name|'ret'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'l'
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'l'
op|'.'
name|'isspace'
op|'('
op|')'
name|'or'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
name|'or'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'//'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'ret'
op|'.'
name|'append'
op|'('
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'ret'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_read_flagfile
dedent|''
name|'def'
name|'_read_flagfile'
op|'('
name|'arg'
op|','
name|'next_arg'
op|','
name|'tempdir'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Convert a --flagfile argument to --config-file.\n\n    If the supplied argument is a --flagfile argument, read the contents\n    of the file and convert it to a .ini format config file. Return a\n    --config-file argument with the converted file.\n\n    If the flag file contains more --flagfile arguments, multiple\n    --config-file arguments will be returned.\n\n    The returned argument list may also contain None values which should\n    be filtered out later.\n    '''"
newline|'\n'
name|'argp'
op|'='
op|'['
name|'arg'
op|','
name|'next_arg'
op|']'
newline|'\n'
name|'flagfile'
op|'='
name|'_get_flagfile'
op|'('
name|'argp'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'flagfile'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'argp'
newline|'\n'
nl|'\n'
dedent|''
name|'args'
op|'='
name|'_read_lines'
op|'('
name|'flagfile'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'args'
name|'and'
name|'not'
name|'args'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'--'"
op|')'
op|':'
newline|'\n'
comment|'# This is a config file, not a flagfile, so return it.'
nl|'\n'
indent|'        '
name|'return'
op|'['
string|"'--config-file='"
op|'+'
name|'flagfile'
op|']'
op|'+'
name|'argp'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# We're recursing here to convert any --flagfile arguments"
nl|'\n'
comment|'# read from this flagfile into --config-file arguments'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# We don't actually include those --config-file arguments"
nl|'\n'
comment|'# in the generated config file; instead we include all those'
nl|'\n'
comment|'# --config-file args in the final command line'
nl|'\n'
comment|'#'
nl|'\n'
dedent|''
name|'args'
op|'='
name|'_iterate_args'
op|'('
name|'args'
op|','
name|'_read_flagfile'
op|','
name|'tempdir'
op|'='
name|'tempdir'
op|')'
newline|'\n'
nl|'\n'
name|'config_file_args'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
op|'('
name|'fd'
op|','
name|'tmpconf'
op|')'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'suffix'
op|'='
string|"'.conf'"
op|','
name|'dir'
op|'='
name|'tempdir'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'_open_fd_for_writing'
op|'('
name|'fd'
op|','
name|'tmpconf'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'.'
name|'write'
op|'('
string|"'[DEFAULT]\\n'"
op|')'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'arg'
op|'.'
name|'startswith'
op|'('
string|"'--config-file='"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'config_file_args'
op|'.'
name|'append'
op|'('
name|'arg'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'if'
string|"'='"
name|'in'
name|'arg'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
name|'arg'
op|'['
number|'2'
op|':'
op|']'
op|'+'
string|"'\\n'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'arg'
op|'['
number|'2'
op|':'
op|']'
op|'.'
name|'startswith'
op|'('
string|"'no'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
name|'arg'
op|'['
number|'4'
op|':'
op|']'
op|'+'
string|"'=false\\n'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'.'
name|'write'
op|'('
name|'arg'
op|'['
number|'2'
op|':'
op|']'
op|'+'
string|"'=true\\n'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
op|'['
string|"'--config-file='"
op|'+'
name|'tmpconf'
op|']'
op|'+'
name|'argp'
op|'['
number|'1'
op|':'
op|']'
op|'+'
name|'config_file_args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_iterate_args
dedent|''
name|'def'
name|'_iterate_args'
op|'('
name|'args'
op|','
name|'iterator'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Run an iterator function on the supplied args list.\n\n    The iterator is passed the current arg and next arg and returns a\n    list of args. The returned args replace the suppied args in the\n    resulting args list.\n\n    The iterator will be passed None for the next arg when processing\n    the last arg.\n    '''"
newline|'\n'
name|'args'
op|'.'
name|'append'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'args'
op|')'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'args'
op|'['
name|'i'
op|']'
name|'is'
name|'None'
op|':'
comment|'# last item, or consumed file name'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
nl|'\n'
dedent|''
name|'modified'
op|'='
name|'iterator'
op|'('
name|'args'
op|'['
name|'i'
op|']'
op|','
name|'args'
op|'['
name|'i'
op|'+'
number|'1'
op|']'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'args'
op|'['
name|'i'
op|']'
op|','
name|'args'
op|'['
name|'i'
op|'+'
number|'1'
op|']'
op|'='
name|'modified'
op|'['
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'ret'
op|'.'
name|'extend'
op|'('
name|'modified'
op|'['
op|':'
number|'1'
op|']'
op|'+'
name|'modified'
op|'['
number|'2'
op|':'
op|']'
op|')'
comment|"# don't append next arg"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'filter'
op|'('
name|'None'
op|','
name|'ret'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|handle_flagfiles
dedent|''
name|'def'
name|'handle_flagfiles'
op|'('
name|'args'
op|','
name|'tempdir'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Replace --flagfile arguments with --config-file arguments.\n\n    Replace any --flagfile argument in the supplied list with a --config-file\n    argument containing a temporary config file with the contents of the flag\n    file translated to .ini format.\n\n    The tempdir argument is a directory which will be used to create temporary\n    files.\n    '''"
newline|'\n'
name|'return'
name|'_iterate_args'
op|'('
name|'args'
op|'['
op|':'
op|']'
op|','
name|'_read_flagfile'
op|','
name|'tempdir'
op|'='
name|'tempdir'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|handle_flagfiles_managed
name|'def'
name|'handle_flagfiles_managed'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''A context manager for handle_flagfiles() which removes temp files.\n\n    For use with the 'with' statement, i.e.::\n\n        with handle_flagfiles_managed(args) as args:\n             # Do stuff\n        # Any temporary fils have been removed\n    '''"
newline|'\n'
comment|'# NOTE(johannes): Would be nice to use utils.tempdir(), but it'
nl|'\n'
comment|'# causes an import loop'
nl|'\n'
name|'tempdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
name|'prefix'
op|'='
string|"'nova-conf-'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'handle_flagfiles'
op|'('
name|'args'
op|','
name|'tempdir'
op|'='
name|'tempdir'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tempdir'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2013 Intel Corporation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'# @author: Yongli He, Intel Corporation.'
nl|'\n'
nl|'\n'
string|'""" Example of a PCI alias:\n    pci_alias = \'{\n        "name": "QuicAssist",\n        "product_id": "0443",\n        "vendor_id": "8086",\n        "device_type": "ACCEL",\n        }\'\n\n    Aliases with the same name and the same device_type are OR operation:\n    pci_alias = \'{\n        "name": "QuicAssist",\n        "product_id": "0442",\n        "vendor_id": "8086",\n        "device_type": "ACCEL",\n        }\'\n    These 2 aliases define a device request meaning: vendor_id is "8086" and\n    product id is "0442" or "0443".\n    """'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'jsonschema'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'pci'
name|'import'
name|'pci_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
DECL|variable|pci_alias_opts
name|'pci_alias_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'pci_alias'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
op|'['
op|']'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'An alias for a PCI passthrough device requirement. '"
nl|'\n'
string|"'This allows users to specify the alias in the '"
nl|'\n'
string|"'extra_spec for a flavor, without needing to repeat '"
nl|'\n'
string|"'all the PCI property requirements. For example: '"
nl|'\n'
string|"'pci_alias = '"
nl|'\n'
string|'\'{ "name": "QuicAssist", \''
nl|'\n'
string|'\'  "product_id": "0443", \''
nl|'\n'
string|'\'  "vendor_id": "8086", \''
nl|'\n'
string|'\'  "device_type": "ACCEL" \''
nl|'\n'
string|"'} '"
nl|'\n'
string|"'defines an alias for the Intel QuickAssist card. '"
nl|'\n'
string|"'(multi valued)'"
nl|'\n'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'pci_alias_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_ALIAS_DEV_TYPE
name|'_ALIAS_DEV_TYPE'
op|'='
op|'['
string|"'NIC'"
op|','
string|"'ACCEL'"
op|','
string|"'GPU'"
op|']'
newline|'\n'
DECL|variable|_ALIAS_CAP_TYPE
name|'_ALIAS_CAP_TYPE'
op|'='
op|'['
string|"'pci'"
op|']'
newline|'\n'
DECL|variable|_ALIAS_SCHEMA
name|'_ALIAS_SCHEMA'
op|'='
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"object"'
op|','
nl|'\n'
string|'"additionalProperties"'
op|':'
name|'False'
op|','
nl|'\n'
string|'"properties"'
op|':'
op|'{'
nl|'\n'
string|'"name"'
op|':'
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"string"'
op|','
nl|'\n'
string|'"minLength"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"maxLength"'
op|':'
number|'256'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"capability_type"'
op|':'
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"string"'
op|','
nl|'\n'
string|'"enum"'
op|':'
name|'_ALIAS_CAP_TYPE'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"product_id"'
op|':'
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"string"'
op|','
nl|'\n'
string|'"pattern"'
op|':'
name|'pci_utils'
op|'.'
name|'PCI_VENDOR_PATTERN'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"vendor_id"'
op|':'
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"string"'
op|','
nl|'\n'
string|'"pattern"'
op|':'
name|'pci_utils'
op|'.'
name|'PCI_VENDOR_PATTERN'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"device_type"'
op|':'
op|'{'
nl|'\n'
string|'"type"'
op|':'
string|'"string"'
op|','
nl|'\n'
string|'"enum"'
op|':'
name|'_ALIAS_DEV_TYPE'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|'"required"'
op|':'
op|'['
string|'"name"'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_alias_from_config
name|'def'
name|'_get_alias_from_config'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Parse and validate PCI aliases from the nova config."""'
newline|'\n'
name|'jaliases'
op|'='
name|'CONF'
op|'.'
name|'pci_alias'
newline|'\n'
name|'aliases'
op|'='
op|'{'
op|'}'
comment|'# map alias name to alias spec list'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'jsonspecs'
name|'in'
name|'jaliases'
op|':'
newline|'\n'
indent|'            '
name|'spec'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'jsonspecs'
op|')'
newline|'\n'
name|'jsonschema'
op|'.'
name|'validate'
op|'('
name|'spec'
op|','
name|'_ALIAS_SCHEMA'
op|')'
newline|'\n'
name|'name'
op|'='
name|'spec'
op|'.'
name|'pop'
op|'('
string|'"name"'
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'aliases'
op|':'
newline|'\n'
indent|'                '
name|'aliases'
op|'['
name|'name'
op|']'
op|'='
op|'['
name|'spec'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'aliases'
op|'['
name|'name'
op|']'
op|'['
number|'0'
op|']'
op|'['
string|'"device_type"'
op|']'
op|'=='
name|'spec'
op|'['
string|'"device_type"'
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'aliases'
op|'['
name|'name'
op|']'
op|'.'
name|'append'
op|'('
name|'spec'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'reason'
op|'='
string|'"Device type mismatch for alias \'%s\'"'
op|'%'
name|'name'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'PciInvalidAlias'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'except'
name|'exception'
op|'.'
name|'PciInvalidAlias'
op|':'
newline|'\n'
indent|'        '
name|'raise'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'PciInvalidAlias'
op|'('
name|'reason'
op|'='
name|'str'
op|'('
name|'e'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'aliases'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_translate_alias_to_requests
dedent|''
name|'def'
name|'_translate_alias_to_requests'
op|'('
name|'alias_spec'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate complete pci requests from pci aliases in extra_spec."""'
newline|'\n'
nl|'\n'
name|'pci_aliases'
op|'='
name|'_get_alias_from_config'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'pci_requests'
op|'='
op|'['
op|']'
comment|'# list of a specs dict'
newline|'\n'
name|'alias_spec'
op|'='
name|'alias_spec'
op|'.'
name|'replace'
op|'('
string|"' '"
op|','
string|"''"
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'count'
name|'in'
op|'['
name|'spec'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
name|'for'
name|'spec'
name|'in'
name|'alias_spec'
op|'.'
name|'split'
op|'('
string|"','"
op|')'
op|']'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'not'
name|'in'
name|'pci_aliases'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PciRequestAliasNotDefined'
op|'('
name|'alias'
op|'='
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'request'
op|'='
op|'{'
string|"'count'"
op|':'
name|'int'
op|'('
name|'count'
op|')'
op|','
nl|'\n'
string|"'spec'"
op|':'
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'pci_aliases'
op|'['
name|'name'
op|']'
op|')'
op|','
nl|'\n'
string|"'alias_name'"
op|':'
name|'name'
op|'}'
newline|'\n'
name|'pci_requests'
op|'.'
name|'append'
op|'('
name|'request'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'pci_requests'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pci_requests_from_flavor
dedent|''
name|'def'
name|'get_pci_requests_from_flavor'
op|'('
name|'flavor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get flavor\'s pci request.\n\n    The pci_passthrough:alias scope in flavor extra_specs\n    describes the flavor\'s pci requests, the key is\n    \'pci_passthrough:alias\' and the value has format\n    \'alias_name_x:count, alias_name_y:count, ... \'. The alias_name is\n    defined in \'pci_alias\' configurations.\n\n    The flavor\'s requirement is translated into pci requests list,\n    each entry in the list is a dictionary. The dictionary has\n    three keys. The \'specs\' gives the pci device properties\n    requirement, the \'count\' gives the number of devices, and the\n    optional \'alias_name\' is the corresponding alias definition name.\n\n    Example:\n    Assume alias configuration is:\n        {\'vendor_id\':\'8086\',\n         \'device_id\':\'1502\',\n         \'name\':\'alias_1\'}\n\n    The flavor extra specs includes: \'pci_passthrough:alias\': \'alias_1:2\'.\n\n    The returned pci_requests are:\n    pci_requests = [{\'count\':2,\n                     \'specs\': [{\'vendor_id\':\'8086\',\n                                \'device_id\':\'1502\'}],\n                     \'alias_name\': \'alias_1\'}]\n\n    :param flavor: the flavor to be checked\n    :returns: a list of pci requests\n    """'
newline|'\n'
name|'if'
string|"'extra_specs'"
name|'not'
name|'in'
name|'flavor'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'pci_requests'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|"'pci_passthrough:alias'"
name|'in'
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
op|':'
newline|'\n'
indent|'        '
name|'pci_requests'
op|'='
name|'_translate_alias_to_requests'
op|'('
nl|'\n'
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
op|'['
string|"'pci_passthrough:alias'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'pci_requests'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_instance_pci_requests
dedent|''
name|'def'
name|'get_instance_pci_requests'
op|'('
name|'instance'
op|','
name|'prefix'
op|'='
string|'""'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get instance\'s pci allocation requirement.\n\n    After a flavor\'s pci requirement is translated into pci requests,\n    the requests are kept in instance\'s system metadata to avoid\n    future flavor access and translation. This function get the\n    pci requests from instance system metadata directly.\n\n    As save_flavor_pci_info(), the prefix can be used to stash\n    information about another flavor for later use, like in resize.\n    """'
newline|'\n'
nl|'\n'
name|'if'
string|"'system_metadata'"
name|'not'
name|'in'
name|'instance'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'system_metadata'
op|'='
name|'utils'
op|'.'
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'pci_requests'
op|'='
name|'system_metadata'
op|'.'
name|'get'
op|'('
string|"'%spci_requests'"
op|'%'
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'pci_requests'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'return'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'pci_requests'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|save_flavor_pci_info
dedent|''
name|'def'
name|'save_flavor_pci_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Save flavor\'s pci information to metadata.\n\n    To reduce flavor access and pci request translation, the\n    translated pci requests are saved into instance\'s system\n    metadata.\n\n    As save_flavor_info(), the prefix can be used to stash information\n    about another flavor for later use, like in resize.\n    """'
newline|'\n'
name|'pci_requests'
op|'='
name|'get_pci_requests_from_flavor'
op|'('
name|'instance_type'
op|')'
newline|'\n'
name|'if'
name|'pci_requests'
op|':'
newline|'\n'
indent|'        '
name|'to_key'
op|'='
string|"'%spci_requests'"
op|'%'
name|'prefix'
newline|'\n'
name|'metadata'
op|'['
name|'to_key'
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'pci_requests'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|delete_flavor_pci_info
dedent|''
dedent|''
name|'def'
name|'delete_flavor_pci_info'
op|'('
name|'metadata'
op|','
op|'*'
name|'prefixes'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Delete pci requests information from instance\'s system_metadata."""'
newline|'\n'
name|'for'
name|'prefix'
name|'in'
name|'prefixes'
op|':'
newline|'\n'
indent|'        '
name|'to_key'
op|'='
string|"'%spci_requests'"
op|'%'
name|'prefix'
newline|'\n'
name|'if'
name|'to_key'
name|'in'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'metadata'
op|'['
name|'to_key'
op|']'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

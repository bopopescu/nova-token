begin_unit
comment|'# Copyright (c) 2013 Intel, Inc.'
nl|'\n'
comment|'# Copyright (c) 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PCI_VENDOR_PATTERN
name|'PCI_VENDOR_PATTERN'
op|'='
string|'"^(hex{4})$"'
op|'.'
name|'replace'
op|'('
string|'"hex"'
op|','
string|'"[\\da-fA-F]"'
op|')'
newline|'\n'
DECL|variable|_PCI_ADDRESS_PATTERN
name|'_PCI_ADDRESS_PATTERN'
op|'='
op|'('
string|'"^(hex{4}):(hex{2}):(hex{2}).(oct{1})$"'
op|'.'
nl|'\n'
name|'replace'
op|'('
string|'"hex"'
op|','
string|'"[\\da-fA-F]"'
op|')'
op|'.'
nl|'\n'
name|'replace'
op|'('
string|'"oct"'
op|','
string|'"[0-7]"'
op|')'
op|')'
newline|'\n'
DECL|variable|_PCI_ADDRESS_REGEX
name|'_PCI_ADDRESS_REGEX'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'_PCI_ADDRESS_PATTERN'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|pci_device_prop_match
name|'def'
name|'pci_device_prop_match'
op|'('
name|'pci_dev'
op|','
name|'specs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Check if the pci_dev meet spec requirement\n\n    Specs is a list of PCI device property requirements.\n    An example of device requirement that the PCI should be either:\n    a) Device with vendor_id as 0x8086 and product_id as 0x8259, or\n    b) Device with vendor_id as 0x10de and product_id as 0x10d8:\n\n    [{"vendor_id":"8086", "product_id":"8259"},\n     {"vendor_id":"10de", "product_id":"10d8"}]\n\n    """'
newline|'\n'
DECL|function|_matching_devices
name|'def'
name|'_matching_devices'
op|'('
name|'spec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'all'
op|'('
name|'pci_dev'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|'=='
name|'v'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'spec'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'any'
op|'('
name|'_matching_devices'
op|'('
name|'spec'
op|')'
name|'for'
name|'spec'
name|'in'
name|'specs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|parse_address
dedent|''
name|'def'
name|'parse_address'
op|'('
name|'address'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Returns (domain, bus, slot, function) from PCI address that is stored in\n    PciDevice DB table.\n    """'
newline|'\n'
name|'m'
op|'='
name|'_PCI_ADDRESS_REGEX'
op|'.'
name|'match'
op|'('
name|'address'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'m'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'exception'
op|'.'
name|'PciDeviceWrongAddressFormat'
op|'('
name|'address'
op|'='
name|'address'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'m'
op|'.'
name|'groups'
op|'('
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

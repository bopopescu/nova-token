begin_unit
comment|'# Copyright (c) 2013 The Johns Hopkins University/Applied Physics Laboratory'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nBase Key and SymmetricKey Classes\n\nThis module defines the Key and SymmetricKey classes. The Key class is the base\nclass to represent all encryption keys. The basis for this class was copied\nfrom Java.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'abc'
newline|'\n'
nl|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'abc'
op|'.'
name|'ABCMeta'
op|')'
newline|'\n'
DECL|class|Key
name|'class'
name|'Key'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class to represent all keys."""'
newline|'\n'
nl|'\n'
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|get_algorithm
name|'def'
name|'get_algorithm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the key\'s algorithm.\n\n        Returns the key\'s algorithm. For example, "DSA" indicates that this key\n        is a DSA key and "AES" indicates that this key is an AES key.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|get_format
name|'def'
name|'get_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the encoding format.\n\n        Returns the key\'s encoding format or None if this key is not encoded.\n        """'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'abc'
op|'.'
name|'abstractmethod'
newline|'\n'
DECL|member|get_encoded
name|'def'
name|'get_encoded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the key in the format specified by its encoding."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SymmetricKey
dedent|''
dedent|''
name|'class'
name|'SymmetricKey'
op|'('
name|'Key'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This class represents symmetric keys\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'alg'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new SymmetricKey object.\n\n        The arguments specify the algorithm for the symmetric encryption and\n        the bytes for the key.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'alg'
op|'='
name|'alg'
newline|'\n'
name|'self'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
nl|'\n'
DECL|member|get_algorithm
dedent|''
name|'def'
name|'get_algorithm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the algorithm for symmetric encryption."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'alg'
newline|'\n'
nl|'\n'
DECL|member|get_format
dedent|''
name|'def'
name|'get_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This method returns \'RAW\'."""'
newline|'\n'
name|'return'
string|'"RAW"'
newline|'\n'
nl|'\n'
DECL|member|get_encoded
dedent|''
name|'def'
name|'get_encoded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the key in its encoded format."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'key'
newline|'\n'
nl|'\n'
DECL|member|__eq__
dedent|''
name|'def'
name|'__eq__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'other'
op|','
name|'SymmetricKey'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
name|'self'
op|'.'
name|'alg'
op|'=='
name|'other'
op|'.'
name|'alg'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'key'
op|'=='
name|'other'
op|'.'
name|'key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'NotImplemented'
newline|'\n'
nl|'\n'
DECL|member|__ne__
dedent|''
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'other'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'__eq__'
op|'('
name|'other'
op|')'
newline|'\n'
name|'if'
name|'result'
name|'is'
name|'NotImplemented'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'return'
name|'not'
name|'result'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright (c) 2013 The Johns Hopkins University/Applied Physics Laboratory'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nAn implementation of a key manager that reads its key from the project\'s\nconfiguration options.\n\nThis key manager implementation provides limited security, assuming that the\nkey remains secret. Using the volume encryption feature as an example,\nencryption provides protection against a lost or stolen disk, assuming that\nthe configuration file that contains the key is not stored on the disk.\nEncryption also protects the confidentiality of data as it is transmitted via\niSCSI from the compute host to the storage host (again assuming that an\nattacker who intercepts the data does not know the secret key).\n\nBecause this implementation uses a single, fixed key, it proffers no\nprotection once that key is compromised. In particular, different volumes\nencrypted with a key provided by this key manager actually share the same\nencryption key so *any* volume can be decrypted once the fixed key is known.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'keymgr'
name|'import'
name|'single_key_mgr'
newline|'\n'
nl|'\n'
DECL|variable|key_mgr_opts
name|'key_mgr_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'fixed_key'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Fixed key returned by key manager, specified in hex'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'key_mgr_opts'
op|','
name|'group'
op|'='
string|"'keymgr'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConfKeyManager
name|'class'
name|'ConfKeyManager'
op|'('
name|'single_key_mgr'
op|'.'
name|'SingleKeyManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    This key manager implementation supports all the methods specified by the\n    key manager interface. This implementation creates a single key in response\n    to all invocations of create_key. Side effects (e.g., raising exceptions)\n    for each method are handled as specified by the key manager interface.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConfKeyManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'keymgr'
op|'.'
name|'fixed_key'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
name|'_'
op|'('
string|"'keymgr.fixed_key not defined'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_hex_key'
op|'='
name|'CONF'
op|'.'
name|'keymgr'
op|'.'
name|'fixed_key'
newline|'\n'
nl|'\n'
DECL|member|_get_hex_key
dedent|''
name|'def'
name|'_get_hex_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_hex_key'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCode for rpc message dispatching.\n\nMessages that come in have a version number associated with them.  RPC API\nversion numbers are in the form:\n\n    Major.Minor\n\nFor a given message with version X.Y, the receiver must be marked as able to\nhandle messages of version A.B, where:\n\n    A = X\n\n    B >= Y\n\nThe Major version number would be incremented for an almost completely new API.\nThe Minor version number would be incremented for backwards compatible changes\nto an existing API.  A backwards compatible change could be something like\nadding a new method, adding an argument to an existing method (but not\nrequiring it), or changing the type for an existing argument (but still\nhandling the old type as well).\n\nThe conversion over to a versioned API must be done on both the client side and\nserver side of the API at the same time.  However, as the code stands today,\nthere can be both versioned and unversioned APIs implemented in the same code\nbase.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcDispatcher
name|'class'
name|'RpcDispatcher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Dispatch rpc messages according to the requested API version.\n\n    This class can be used as the top level \'manager\' for a service.  It\n    contains a list of underlying managers that have an API_VERSION attribute.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'callbacks'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Initialize the rpc dispatcher.\n\n        :param callbacks: List of proxy objects that are an instance\n                          of a class with rpc methods exposed.  Each proxy\n                          object should have an RPC_API_VERSION attribute.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callbacks'
op|'='
name|'callbacks'
newline|'\n'
name|'super'
op|'('
name|'RpcDispatcher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_is_compatible
name|'def'
name|'_is_compatible'
op|'('
name|'mversion'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Determine whether versions are compatible.\n\n        :param mversion: The API version implemented by a callback.\n        :param version: The API version requested by an incoming message.\n        """'
newline|'\n'
name|'version_parts'
op|'='
name|'version'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'mversion_parts'
op|'='
name|'mversion'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'if'
name|'int'
op|'('
name|'version_parts'
op|'['
number|'0'
op|']'
op|')'
op|'!='
name|'int'
op|'('
name|'mversion_parts'
op|'['
number|'0'
op|']'
op|')'
op|':'
comment|'# Major'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'if'
name|'int'
op|'('
name|'version_parts'
op|'['
number|'1'
op|']'
op|')'
op|'>'
name|'int'
op|'('
name|'mversion_parts'
op|'['
number|'1'
op|']'
op|')'
op|':'
comment|'# Minor'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|dispatch
dedent|''
name|'def'
name|'dispatch'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'version'
op|','
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Dispatch a message based on a requested version.\n\n        :param ctxt: The request context\n        :param version: The requested API version from the incoming message\n        :param method: The method requested to be called by the incoming\n                       message.\n        :param kwargs: A dict of keyword arguments to be passed to the method.\n\n        :returns: Whatever is returned by the underlying method that gets\n                  called.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'version'
op|':'
newline|'\n'
indent|'            '
name|'version'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'proxyobj'
name|'in'
name|'self'
op|'.'
name|'callbacks'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'hasattr'
op|'('
name|'proxyobj'
op|','
string|"'RPC_API_VERSION'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rpc_api_version'
op|'='
name|'proxyobj'
op|'.'
name|'RPC_API_VERSION'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'rpc_api_version'
op|'='
string|"'1.0'"
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'proxyobj'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'_is_compatible'
op|'('
name|'rpc_api_version'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'getattr'
op|'('
name|'proxyobj'
op|','
name|'method'
op|')'
op|'('
name|'ctxt'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'raise'
name|'rpc_common'
op|'.'
name|'UnsupportedRpcVersion'
op|'('
name|'version'
op|'='
name|'version'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

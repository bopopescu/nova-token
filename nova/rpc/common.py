begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2011 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'local'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCException
name|'class'
name|'RPCException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
DECL|variable|message
indent|'    '
name|'message'
op|'='
name|'_'
op|'('
string|'"An unknown RPC related exception occurred."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'message'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'message'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'message'
op|'='
name|'self'
op|'.'
name|'message'
op|'%'
name|'kwargs'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|"# kwargs doesn't match a variable in the message"
nl|'\n'
comment|'# log the issue and the kwargs'
nl|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Exception in string format operation'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'value'
name|'in'
name|'kwargs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
string|'"%s: %s"'
op|'%'
op|'('
name|'name'
op|','
name|'value'
op|')'
op|')'
newline|'\n'
comment|'# at least get the core message out if something happened'
nl|'\n'
dedent|''
name|'message'
op|'='
name|'self'
op|'.'
name|'message'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'super'
op|'('
name|'RPCException'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RemoteError
dedent|''
dedent|''
name|'class'
name|'RemoteError'
op|'('
name|'RPCException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Signifies that a remote class has raised an exception.\n\n    Contains a string representation of the type of the original exception,\n    the value of the original exception, and the traceback.  These are\n    sent to the parent as a joined string so printing the exception\n    contains all of the relevant info.\n\n    """'
newline|'\n'
DECL|variable|message
name|'message'
op|'='
name|'_'
op|'('
string|'"Remote error: %(exc_type)s %(value)s\\n%(traceback)s."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exc_type'
op|'='
name|'None'
op|','
name|'value'
op|'='
name|'None'
op|','
name|'traceback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'exc_type'
op|'='
name|'exc_type'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
name|'self'
op|'.'
name|'traceback'
op|'='
name|'traceback'
newline|'\n'
name|'super'
op|'('
name|'RemoteError'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'exc_type'
op|'='
name|'exc_type'
op|','
nl|'\n'
name|'value'
op|'='
name|'value'
op|','
nl|'\n'
name|'traceback'
op|'='
name|'traceback'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Timeout
dedent|''
dedent|''
name|'class'
name|'Timeout'
op|'('
name|'RPCException'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Signifies that a timeout has occurred.\n\n    This exception is raised if the rpc_response_timeout is reached while\n    waiting for a response from the remote side.\n    """'
newline|'\n'
DECL|variable|message
name|'message'
op|'='
name|'_'
op|'('
string|'"Timeout while waiting on RPC response."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InvalidRPCConnectionReuse
dedent|''
name|'class'
name|'InvalidRPCConnectionReuse'
op|'('
name|'RPCException'
op|')'
op|':'
newline|'\n'
DECL|variable|message
indent|'    '
name|'message'
op|'='
name|'_'
op|'('
string|'"Invalid reuse of an RPC connection."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UnsupportedRpcVersion
dedent|''
name|'class'
name|'UnsupportedRpcVersion'
op|'('
name|'RPCException'
op|')'
op|':'
newline|'\n'
DECL|variable|message
indent|'    '
name|'message'
op|'='
name|'_'
op|'('
string|'"Specified RPC version, %(version)s, not supported by "'
nl|'\n'
string|'"this endpoint."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A connection, returned by rpc.create_connection().\n\n    This class represents a connection to the message bus used for rpc.\n    An instance of this class should never be created by users of the rpc API.\n    Use rpc.create_connection() instead.\n    """'
newline|'\n'
DECL|member|close
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close the connection.\n\n        This method must be called when the connection will no longer be used.\n        It will ensure that any resources associated with the connection, such\n        as a network connection, and cleaned up.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_consumer
dedent|''
name|'def'
name|'create_consumer'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a consumer on this connection.\n\n        A consumer is associated with a message queue on the backend message\n        bus.  The consumer will read messages from the queue, unpack them, and\n        dispatch them to the proxy object.  The contents of the message pulled\n        off of the queue will determine which method gets called on the proxy\n        object.\n\n        :param conf:  An openstack.common.cfg configuration object.\n        :param topic: This is a name associated with what to consume from.\n                      Multiple instances of a service may consume from the same\n                      topic. For example, all instances of nova-compute consume\n                      from a queue called "compute".  In that case, the\n                      messages will get distributed amongst the consumers in a\n                      round-robin fashion if fanout=False.  If fanout=True,\n                      every consumer associated with this topic will get a\n                      copy of every message.\n        :param proxy: The object that will handle all incoming messages.\n        :param fanout: Whether or not this is a fanout topic.  See the\n                       documentation for the topic parameter for some\n                       additional comments on this.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_worker
dedent|''
name|'def'
name|'create_worker'
op|'('
name|'self'
op|','
name|'conf'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'pool_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a worker on this connection.\n\n        A worker is like a regular consumer of messages directed to a\n        topic, except that it is part of a set of such consumers (the\n        "pool") which may run in parallel. Every pool of workers will\n        receive a given message, but only one worker in the pool will\n        be asked to process it. Load is distributed across the members\n        of the pool in round-robin fashion.\n\n        :param conf:  An openstack.common.cfg configuration object.\n        :param topic: This is a name associated with what to consume from.\n                      Multiple instances of a service may consume from the same\n                      topic.\n        :param proxy: The object that will handle all incoming messages.\n        :param pool_name: String containing the name of the pool of workers\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Spawn a thread to handle incoming messages.\n\n        Spawn a thread that will be responsible for handling all incoming\n        messages for consumers that were set up on this connection.\n\n        Message dispatching inside of this is expected to be implemented in a\n        non-blocking manner.  An example implementation would be having this\n        thread pull messages in for all of the consumers, but utilize a thread\n        pool for dispatching the messages to the proxy objects.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_safe_log
dedent|''
dedent|''
name|'def'
name|'_safe_log'
op|'('
name|'log_func'
op|','
name|'msg'
op|','
name|'msg_data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sanitizes the msg_data field before logging."""'
newline|'\n'
name|'SANITIZE'
op|'='
op|'{'
nl|'\n'
string|"'set_admin_password'"
op|':'
op|'('
string|"'new_pass'"
op|','
op|')'
op|','
nl|'\n'
string|"'run_instance'"
op|':'
op|'('
string|"'admin_password'"
op|','
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'has_method'
op|'='
string|"'method'"
name|'in'
name|'msg_data'
name|'and'
name|'msg_data'
op|'['
string|"'method'"
op|']'
name|'in'
name|'SANITIZE'
newline|'\n'
name|'has_context_token'
op|'='
string|"'_context_auth_token'"
name|'in'
name|'msg_data'
newline|'\n'
name|'has_token'
op|'='
string|"'auth_token'"
name|'in'
name|'msg_data'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'any'
op|'('
op|'['
name|'has_method'
op|','
name|'has_context_token'
op|','
name|'has_token'
op|']'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'log_func'
op|'('
name|'msg'
op|','
name|'msg_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'msg_data'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'msg_data'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'has_method'
op|':'
newline|'\n'
indent|'        '
name|'method'
op|'='
name|'msg_data'
op|'['
string|"'method'"
op|']'
newline|'\n'
name|'if'
name|'method'
name|'in'
name|'SANITIZE'
op|':'
newline|'\n'
indent|'            '
name|'args_to_sanitize'
op|'='
name|'SANITIZE'
op|'['
name|'method'
op|']'
newline|'\n'
name|'for'
name|'arg'
name|'in'
name|'args_to_sanitize'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'msg_data'
op|'['
string|"'args'"
op|']'
op|'['
name|'arg'
op|']'
op|'='
string|'"<SANITIZED>"'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'if'
name|'has_context_token'
op|':'
newline|'\n'
indent|'        '
name|'msg_data'
op|'['
string|"'_context_auth_token'"
op|']'
op|'='
string|"'<SANITIZED>'"
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'has_token'
op|':'
newline|'\n'
indent|'        '
name|'msg_data'
op|'['
string|"'auth_token'"
op|']'
op|'='
string|"'<SANITIZED>'"
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'log_func'
op|'('
name|'msg'
op|','
name|'msg_data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|serialize_remote_exception
dedent|''
name|'def'
name|'serialize_remote_exception'
op|'('
name|'failure_info'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Prepares exception data to be sent over rpc.\n\n    Failure_info should be a sys.exc_info() tuple.\n\n    """'
newline|'\n'
name|'tb'
op|'='
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'failure_info'
op|')'
newline|'\n'
name|'failure'
op|'='
name|'failure_info'
op|'['
number|'1'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Returning exception %s to caller"'
op|')'
op|','
name|'unicode'
op|'('
name|'failure'
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'tb'
op|')'
newline|'\n'
nl|'\n'
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'hasattr'
op|'('
name|'failure'
op|','
string|"'kwargs'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'kwargs'
op|'='
name|'failure'
op|'.'
name|'kwargs'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'class'"
op|':'
name|'str'
op|'('
name|'failure'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|')'
op|','
nl|'\n'
string|"'module'"
op|':'
name|'str'
op|'('
name|'failure'
op|'.'
name|'__class__'
op|'.'
name|'__module__'
op|')'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'unicode'
op|'('
name|'failure'
op|')'
op|','
nl|'\n'
string|"'tb'"
op|':'
name|'tb'
op|','
nl|'\n'
string|"'args'"
op|':'
name|'failure'
op|'.'
name|'args'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
name|'kwargs'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'json_data'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'json_data'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deserialize_remote_exception
dedent|''
name|'def'
name|'deserialize_remote_exception'
op|'('
name|'conf'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'failure'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'str'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'trace'
op|'='
name|'failure'
op|'.'
name|'get'
op|'('
string|"'tb'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'message'
op|'='
name|'failure'
op|'.'
name|'get'
op|'('
string|"'message'"
op|','
string|'""'
op|')'
op|'+'
string|'"\\n"'
op|'+'
string|'"\\n"'
op|'.'
name|'join'
op|'('
name|'trace'
op|')'
newline|'\n'
name|'name'
op|'='
name|'failure'
op|'.'
name|'get'
op|'('
string|"'class'"
op|')'
newline|'\n'
name|'module'
op|'='
name|'failure'
op|'.'
name|'get'
op|'('
string|"'module'"
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ameade): We DO NOT want to allow just any module to be imported, in'
nl|'\n'
comment|'# order to prevent arbitrary code execution.'
nl|'\n'
name|'if'
name|'not'
name|'module'
name|'in'
name|'conf'
op|'.'
name|'allowed_rpc_exception_modules'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RemoteError'
op|'('
name|'name'
op|','
name|'failure'
op|'.'
name|'get'
op|'('
string|"'message'"
op|')'
op|','
name|'trace'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'mod'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
name|'module'
op|')'
newline|'\n'
name|'klass'
op|'='
name|'getattr'
op|'('
name|'mod'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'issubclass'
op|'('
name|'klass'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'TypeError'
op|'('
string|'"Can only deserialize Exceptions"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'failure'
op|'='
name|'klass'
op|'('
op|'**'
name|'failure'
op|'.'
name|'get'
op|'('
string|"'kwargs'"
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'AttributeError'
op|','
name|'TypeError'
op|','
name|'ImportError'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RemoteError'
op|'('
name|'name'
op|','
name|'failure'
op|'.'
name|'get'
op|'('
string|"'message'"
op|')'
op|','
name|'trace'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ex_type'
op|'='
name|'type'
op|'('
name|'failure'
op|')'
newline|'\n'
name|'str_override'
op|'='
name|'lambda'
name|'self'
op|':'
name|'message'
newline|'\n'
name|'new_ex_type'
op|'='
name|'type'
op|'('
name|'ex_type'
op|'.'
name|'__name__'
op|'+'
string|'"_Remote"'
op|','
op|'('
name|'ex_type'
op|','
op|')'
op|','
nl|'\n'
op|'{'
string|"'__str__'"
op|':'
name|'str_override'
op|','
string|"'__unicode__'"
op|':'
name|'str_override'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# NOTE(ameade): Dynamically create a new exception type and swap it in'
nl|'\n'
comment|'# as the new type for the exception. This only works on user defined'
nl|'\n'
comment|'# Exceptions and not core python exceptions. This is important because'
nl|'\n'
comment|'# we cannot necessarily change an exception message so we must override'
nl|'\n'
comment|'# the __str__ method.'
nl|'\n'
indent|'        '
name|'failure'
op|'.'
name|'__class__'
op|'='
name|'new_ex_type'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
name|'as'
name|'e'
op|':'
newline|'\n'
comment|'# NOTE(ameade): If a core exception then just add the traceback to the'
nl|'\n'
comment|'# first exception argument.'
nl|'\n'
indent|'        '
name|'failure'
op|'.'
name|'args'
op|'='
op|'('
name|'message'
op|','
op|')'
op|'+'
name|'failure'
op|'.'
name|'args'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
name|'failure'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommonRpcContext
dedent|''
name|'class'
name|'CommonRpcContext'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'values'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'values'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'AttributeError'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|to_dict
dedent|''
dedent|''
name|'def'
name|'to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_dict
name|'def'
name|'from_dict'
op|'('
name|'cls'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cls'
op|'('
op|'**'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_store
dedent|''
name|'def'
name|'update_store'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'local'
op|'.'
name|'store'
op|'.'
name|'context'
op|'='
name|'self'
newline|'\n'
nl|'\n'
DECL|member|elevated
dedent|''
name|'def'
name|'elevated'
op|'('
name|'self'
op|','
name|'read_deleted'
op|'='
name|'None'
op|','
name|'overwrite'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a version of this context with admin flag set."""'
newline|'\n'
comment|'# TODO(russellb) This method is a bit of a nova-ism.  It makes'
nl|'\n'
comment|'# some assumptions about the data in the request context sent'
nl|'\n'
comment|'# across rpc, while the rest of this class does not.  We could get'
nl|'\n'
comment|'# rid of this if we changed the nova code that uses this to'
nl|'\n'
comment|'# convert the RpcContext back to its native RequestContext doing'
nl|'\n'
comment|'# something like nova.context.RequestContext.from_dict(ctxt.to_dict())'
nl|'\n'
nl|'\n'
name|'context'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|')'
newline|'\n'
name|'context'
op|'.'
name|'values'
op|'['
string|"'is_admin'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'context'
op|'.'
name|'values'
op|'.'
name|'setdefault'
op|'('
string|"'roles'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'admin'"
name|'not'
name|'in'
name|'context'
op|'.'
name|'values'
op|'['
string|"'roles'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'.'
name|'values'
op|'['
string|"'roles'"
op|']'
op|'.'
name|'append'
op|'('
string|"'admin'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'read_deleted'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'context'
op|'.'
name|'values'
op|'['
string|"'read_deleted'"
op|']'
op|'='
name|'read_deleted'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'context'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 Cloudscaling Group, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'pprint'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'eventlet'
op|'.'
name|'green'
name|'import'
name|'zmq'
newline|'\n'
name|'import'
name|'greenlet'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# for convenience, are not modified.'
nl|'\n'
DECL|variable|pformat
name|'pformat'
op|'='
name|'pprint'
op|'.'
name|'pformat'
newline|'\n'
DECL|variable|Timeout
name|'Timeout'
op|'='
name|'eventlet'
op|'.'
name|'timeout'
op|'.'
name|'Timeout'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'rpc_common'
op|'.'
name|'LOG'
newline|'\n'
DECL|variable|RemoteError
name|'RemoteError'
op|'='
name|'rpc_common'
op|'.'
name|'RemoteError'
newline|'\n'
DECL|variable|RPCException
name|'RPCException'
op|'='
name|'rpc_common'
op|'.'
name|'RPCException'
newline|'\n'
nl|'\n'
DECL|variable|zmq_opts
name|'zmq_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rpc_zmq_bind_address'"
op|','
name|'default'
op|'='
string|"'*'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'ZeroMQ bind address. Should be a wildcard (*), '"
nl|'\n'
string|"'an ethernet interface, or IP. '"
nl|'\n'
string|'\'The "host" option should point or resolve to this address.\''
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# The module.Class to use for matchmaking.'
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rpc_zmq_matchmaker'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.rpc.matchmaker.MatchMakerLocalhost'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'MatchMaker driver'"
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# The following port is unassigned by IANA as of 2012-05-21'
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'rpc_zmq_port'"
op|','
name|'default'
op|'='
number|'9501'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'ZeroMQ receiver listening port'"
op|')'
op|','
nl|'\n'
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'rpc_zmq_contexts'"
op|','
name|'default'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Number of ZeroMQ contexts, defaults to 1'"
op|')'
op|','
nl|'\n'
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'rpc_zmq_ipc_dir'"
op|','
name|'default'
op|'='
string|"'/var/run/nova'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Directory for holding IPC sockets'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# These globals are defined in register_opts(conf),'
nl|'\n'
comment|'# a mandatory initialization call'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'None'
newline|'\n'
DECL|variable|ZMQ_CTX
name|'ZMQ_CTX'
op|'='
name|'None'
comment|'# ZeroMQ Context, must be global.'
newline|'\n'
DECL|variable|matchmaker
name|'matchmaker'
op|'='
name|'None'
comment|'# memoized matchmaker object'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_serialize
name|'def'
name|'_serialize'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Serialization wrapper\n    We prefer using JSON, but it cannot encode all types.\n    Error if a developer passes us bad data.\n    """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'data'
op|','
name|'ensure_ascii'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"JSON serialization failed."'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_deserialize
dedent|''
dedent|''
name|'def'
name|'_deserialize'
op|'('
name|'data'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Deserialization wrapper\n    """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Deserializing: %s"'
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZmqSocket
dedent|''
name|'class'
name|'ZmqSocket'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A tiny wrapper around ZeroMQ to simplify the send/recv protocol\n    and connection management.\n\n    Can be used as a Context (supports the \'with\' statement).\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'zmq_type'
op|','
name|'bind'
op|'='
name|'True'
op|','
name|'subscribe'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'sock'
op|'='
name|'ZMQ_CTX'
op|'.'
name|'socket'
op|'('
name|'zmq_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addr'
op|'='
name|'addr'
newline|'\n'
name|'self'
op|'.'
name|'type'
op|'='
name|'zmq_type'
newline|'\n'
name|'self'
op|'.'
name|'subscriptions'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Support failures on sending/receiving on wrong socket type.'
nl|'\n'
name|'self'
op|'.'
name|'can_recv'
op|'='
name|'zmq_type'
name|'in'
op|'('
name|'zmq'
op|'.'
name|'PULL'
op|','
name|'zmq'
op|'.'
name|'SUB'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'can_send'
op|'='
name|'zmq_type'
name|'in'
op|'('
name|'zmq'
op|'.'
name|'PUSH'
op|','
name|'zmq'
op|'.'
name|'PUB'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'can_sub'
op|'='
name|'zmq_type'
name|'in'
op|'('
name|'zmq'
op|'.'
name|'SUB'
op|','
op|')'
newline|'\n'
nl|'\n'
comment|'# Support list, str, & None for subscribe arg (cast to list)'
nl|'\n'
name|'do_sub'
op|'='
op|'{'
nl|'\n'
name|'list'
op|':'
name|'subscribe'
op|','
nl|'\n'
name|'str'
op|':'
op|'['
name|'subscribe'
op|']'
op|','
nl|'\n'
name|'type'
op|'('
name|'None'
op|')'
op|':'
op|'['
op|']'
nl|'\n'
op|'}'
op|'['
name|'type'
op|'('
name|'subscribe'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'f'
name|'in'
name|'do_sub'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'subscribe'
op|'('
name|'f'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Connecting to %{addr}s with %{type}s"'
nl|'\n'
string|'"\\n-> Subscribed to %{subscribe}s"'
nl|'\n'
string|'"\\n-> bind: %{bind}s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'addr'"
op|':'
name|'addr'
op|','
string|"'type'"
op|':'
name|'self'
op|'.'
name|'socket_s'
op|'('
op|')'
op|','
nl|'\n'
string|"'subscribe'"
op|':'
name|'subscribe'
op|','
string|"'bind'"
op|':'
name|'bind'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'bind'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'bind'
op|'('
name|'addr'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'connect'
op|'('
name|'addr'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
name|'_'
op|'('
string|'"Could not open socket."'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|socket_s
dedent|''
dedent|''
name|'def'
name|'socket_s'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get socket type as string."""'
newline|'\n'
name|'t_enum'
op|'='
op|'('
string|"'PUSH'"
op|','
string|"'PULL'"
op|','
string|"'PUB'"
op|','
string|"'SUB'"
op|','
string|"'REP'"
op|','
string|"'REQ'"
op|','
string|"'ROUTER'"
op|','
nl|'\n'
string|"'DEALER'"
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'map'
op|'('
name|'lambda'
name|'t'
op|':'
op|'('
name|'getattr'
op|'('
name|'zmq'
op|','
name|'t'
op|')'
op|','
name|'t'
op|')'
op|','
name|'t_enum'
op|')'
op|')'
op|'['
name|'self'
op|'.'
name|'type'
op|']'
newline|'\n'
nl|'\n'
DECL|member|subscribe
dedent|''
name|'def'
name|'subscribe'
op|'('
name|'self'
op|','
name|'msg_filter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Subscribe."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'can_sub'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
string|'"Cannot subscribe on this socket."'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Subscribing to %s"'
op|')'
op|','
name|'msg_filter'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'zmq'
op|'.'
name|'SUBSCRIBE'
op|','
name|'msg_filter'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'subscriptions'
op|'.'
name|'append'
op|'('
name|'msg_filter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|unsubscribe
dedent|''
name|'def'
name|'unsubscribe'
op|'('
name|'self'
op|','
name|'msg_filter'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Unsubscribe."""'
newline|'\n'
name|'if'
name|'msg_filter'
name|'not'
name|'in'
name|'self'
op|'.'
name|'subscriptions'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'zmq'
op|'.'
name|'UNSUBSCRIBE'
op|','
name|'msg_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subscriptions'
op|'.'
name|'remove'
op|'('
name|'msg_filter'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'sock'
name|'is'
name|'None'
name|'or'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'closed'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|"# We must unsubscribe, or we'll leak descriptors."
nl|'\n'
dedent|''
name|'if'
name|'len'
op|'('
name|'self'
op|'.'
name|'subscriptions'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'subscriptions'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'setsockopt'
op|'('
name|'zmq'
op|'.'
name|'UNSUBSCRIBE'
op|','
name|'f'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'subscriptions'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Linger -1 prevents lost/dropped messages'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sock'
op|'.'
name|'close'
op|'('
name|'linger'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sock'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|recv
dedent|''
name|'def'
name|'recv'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'can_recv'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
name|'_'
op|'('
string|'"You cannot recv on this socket."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'recv_multipart'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'can_send'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
name|'_'
op|'('
string|'"You cannot send on this socket."'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'sock'
op|'.'
name|'send_multipart'
op|'('
name|'data'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZmqClient
dedent|''
dedent|''
name|'class'
name|'ZmqClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Client for ZMQ sockets."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'addr'
op|','
name|'socket_type'
op|'='
name|'zmq'
op|'.'
name|'PUSH'
op|','
name|'bind'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outq'
op|'='
name|'ZmqSocket'
op|'('
name|'addr'
op|','
name|'socket_type'
op|','
name|'bind'
op|'='
name|'bind'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'self'
op|','
name|'msg_id'
op|','
name|'topic'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outq'
op|'.'
name|'send'
op|'('
op|'['
name|'str'
op|'('
name|'msg_id'
op|')'
op|','
name|'str'
op|'('
name|'topic'
op|')'
op|','
name|'str'
op|'('
string|"'cast'"
op|')'
op|','
nl|'\n'
name|'_serialize'
op|'('
name|'data'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'outq'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcContext
dedent|''
dedent|''
name|'class'
name|'RpcContext'
op|'('
name|'rpc_common'
op|'.'
name|'CommonRpcContext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Context that supports replying to a rpc.call."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'replies'
op|'='
op|'['
op|']'
newline|'\n'
name|'super'
op|'('
name|'RpcContext'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|deepcopy
dedent|''
name|'def'
name|'deepcopy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'self'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'values'
op|'['
string|"'replies'"
op|']'
op|'='
name|'self'
op|'.'
name|'replies'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'__class__'
op|'('
op|'**'
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reply
dedent|''
name|'def'
name|'reply'
op|'('
name|'self'
op|','
name|'reply'
op|'='
name|'None'
op|','
name|'failure'
op|'='
name|'None'
op|','
name|'ending'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'ending'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'replies'
op|'.'
name|'append'
op|'('
name|'reply'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|marshal
name|'def'
name|'marshal'
op|'('
name|'self'
op|','
name|'ctx'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx_data'
op|'='
name|'ctx'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'_serialize'
op|'('
name|'ctx_data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|unmarshal
name|'def'
name|'unmarshal'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'RpcContext'
op|'.'
name|'from_dict'
op|'('
name|'_deserialize'
op|'('
name|'data'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InternalContext
dedent|''
dedent|''
name|'class'
name|'InternalContext'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used by ConsumerBase as a private context for - methods."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proxy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'='
name|'proxy'
newline|'\n'
name|'self'
op|'.'
name|'msg_waiter'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_response
dedent|''
name|'def'
name|'_get_response'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'proxy'
op|','
name|'topic'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a curried message and cast the result to topic."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Running func with context: %s"'
op|')'
op|','
name|'ctx'
op|'.'
name|'to_dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'setdefault'
op|'('
string|"'version'"
op|','
name|'None'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'setdefault'
op|'('
string|"'args'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'proxy'
op|'.'
name|'dispatch'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'data'
op|'['
string|"'version'"
op|']'
op|','
name|'data'
op|'['
string|"'method'"
op|']'
op|','
op|'**'
name|'data'
op|'['
string|"'args'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'ConsumerBase'
op|'.'
name|'normalize_reply'
op|'('
name|'result'
op|','
name|'ctx'
op|'.'
name|'replies'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'greenlet'
op|'.'
name|'GreenletExit'
op|':'
newline|'\n'
comment|'# ignore these since they are just from shutdowns'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'exc'"
op|':'
nl|'\n'
name|'rpc_common'
op|'.'
name|'serialize_remote_exception'
op|'('
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|reply
dedent|''
dedent|''
name|'def'
name|'reply'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'proxy'
op|','
nl|'\n'
name|'msg_id'
op|'='
name|'None'
op|','
name|'context'
op|'='
name|'None'
op|','
name|'topic'
op|'='
name|'None'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reply to a casted call."""'
newline|'\n'
comment|"# Our real method is curried into msg['args']"
nl|'\n'
nl|'\n'
name|'child_ctx'
op|'='
name|'RpcContext'
op|'.'
name|'unmarshal'
op|'('
name|'msg'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'response'
op|'='
name|'ConsumerBase'
op|'.'
name|'normalize_reply'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_get_response'
op|'('
name|'child_ctx'
op|','
name|'proxy'
op|','
name|'topic'
op|','
name|'msg'
op|'['
number|'1'
op|']'
op|')'
op|','
nl|'\n'
name|'ctx'
op|'.'
name|'replies'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Sending reply"'
op|')'
op|')'
newline|'\n'
name|'cast'
op|'('
name|'FLAGS'
op|','
name|'ctx'
op|','
name|'topic'
op|','
op|'{'
nl|'\n'
string|"'method'"
op|':'
string|"'-process_reply'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
nl|'\n'
string|"'msg_id'"
op|':'
name|'msg_id'
op|','
nl|'\n'
string|"'response'"
op|':'
name|'response'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConsumerBase
dedent|''
dedent|''
name|'class'
name|'ConsumerBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base Consumer."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'private_ctx'
op|'='
name|'InternalContext'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|normalize_reply
name|'def'
name|'normalize_reply'
op|'('
name|'self'
op|','
name|'result'
op|','
name|'replies'
op|')'
op|':'
newline|'\n'
comment|'#TODO(ewindisch): re-evaluate and document this method.'
nl|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'types'
op|'.'
name|'GeneratorType'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'list'
op|'('
name|'result'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'replies'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'replies'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
name|'result'
op|']'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|','
name|'style'
op|','
name|'target'
op|','
name|'proxy'
op|','
name|'ctx'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# Method starting with - are'
nl|'\n'
comment|'# processed internally. (non-valid method name)'
nl|'\n'
indent|'        '
name|'method'
op|'='
name|'data'
op|'['
string|"'method'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Internal method'
nl|'\n'
comment|'# uses internal context for safety.'
nl|'\n'
name|'if'
name|'data'
op|'['
string|"'method'"
op|']'
op|'['
number|'0'
op|']'
op|'=='
string|"'-'"
op|':'
newline|'\n'
comment|'# For reply / process_reply'
nl|'\n'
indent|'            '
name|'method'
op|'='
name|'method'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
name|'if'
name|'method'
op|'=='
string|"'reply'"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'private_ctx'
op|'.'
name|'reply'
op|'('
name|'ctx'
op|','
name|'proxy'
op|','
op|'**'
name|'data'
op|'['
string|"'args'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'.'
name|'setdefault'
op|'('
string|"'version'"
op|','
name|'None'
op|')'
newline|'\n'
name|'data'
op|'.'
name|'setdefault'
op|'('
string|"'args'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'proxy'
op|'.'
name|'dispatch'
op|'('
name|'ctx'
op|','
name|'data'
op|'['
string|"'version'"
op|']'
op|','
nl|'\n'
name|'data'
op|'['
string|"'method'"
op|']'
op|','
op|'**'
name|'data'
op|'['
string|"'args'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZmqBaseReactor
dedent|''
dedent|''
name|'class'
name|'ZmqBaseReactor'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A consumer class implementing a\n    centralized casting broker (PULL-PUSH)\n    for RoundRobin requests.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ZmqBaseReactor'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'mapping'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'proxies'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'threads'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'sockets'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subscribe'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'pool'
op|'='
name|'eventlet'
op|'.'
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
name|'conf'
op|'.'
name|'rpc_thread_pool_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|register
dedent|''
name|'def'
name|'register'
op|'('
name|'self'
op|','
name|'proxy'
op|','
name|'in_addr'
op|','
name|'zmq_type_in'
op|','
name|'out_addr'
op|'='
name|'None'
op|','
nl|'\n'
name|'zmq_type_out'
op|'='
name|'None'
op|','
name|'in_bind'
op|'='
name|'True'
op|','
name|'out_bind'
op|'='
name|'True'
op|','
nl|'\n'
name|'subscribe'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Registering reactor"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'zmq_type_in'
name|'not'
name|'in'
op|'('
name|'zmq'
op|'.'
name|'PULL'
op|','
name|'zmq'
op|'.'
name|'SUB'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
string|'"Bad input socktype"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Items push in.'
nl|'\n'
dedent|''
name|'inq'
op|'='
name|'ZmqSocket'
op|'('
name|'in_addr'
op|','
name|'zmq_type_in'
op|','
name|'bind'
op|'='
name|'in_bind'
op|','
nl|'\n'
name|'subscribe'
op|'='
name|'subscribe'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'proxies'
op|'['
name|'inq'
op|']'
op|'='
name|'proxy'
newline|'\n'
name|'self'
op|'.'
name|'sockets'
op|'.'
name|'append'
op|'('
name|'inq'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"In reactor registered"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'out_addr'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'zmq_type_out'
name|'not'
name|'in'
op|'('
name|'zmq'
op|'.'
name|'PUSH'
op|','
name|'zmq'
op|'.'
name|'PUB'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
string|'"Bad output socktype"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Items push out.'
nl|'\n'
dedent|''
name|'outq'
op|'='
name|'ZmqSocket'
op|'('
name|'out_addr'
op|','
name|'zmq_type_out'
op|','
nl|'\n'
name|'bind'
op|'='
name|'out_bind'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mapping'
op|'['
name|'inq'
op|']'
op|'='
name|'outq'
newline|'\n'
name|'self'
op|'.'
name|'mapping'
op|'['
name|'outq'
op|']'
op|'='
name|'inq'
newline|'\n'
name|'self'
op|'.'
name|'sockets'
op|'.'
name|'append'
op|'('
name|'outq'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Out reactor registered"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_consume
indent|'        '
name|'def'
name|'_consume'
op|'('
name|'sock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Consuming socket"'
op|')'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consume'
op|'('
name|'sock'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'proxies'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'threads'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'pool'
op|'.'
name|'spawn'
op|'('
name|'_consume'
op|','
name|'k'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'t'
name|'in'
name|'self'
op|'.'
name|'threads'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'s'
name|'in'
name|'self'
op|'.'
name|'sockets'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'t'
name|'in'
name|'self'
op|'.'
name|'threads'
op|':'
newline|'\n'
indent|'            '
name|'t'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZmqProxy
dedent|''
dedent|''
dedent|''
name|'class'
name|'ZmqProxy'
op|'('
name|'ZmqBaseReactor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A consumer class implementing a\n    topic-based proxy, forwarding to\n    IPC sockets.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ZmqProxy'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'conf'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'topic_proxy'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'ipc_dir'
op|'='
name|'conf'
op|'.'
name|'rpc_zmq_ipc_dir'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'topic_proxy'
op|'['
string|"'zmq_replies'"
op|']'
op|'='
name|'ZmqSocket'
op|'('
string|'"ipc://%s/zmq_topic_zmq_replies"'
op|'%'
op|'('
name|'ipc_dir'
op|','
op|')'
op|','
nl|'\n'
name|'zmq'
op|'.'
name|'PUB'
op|','
name|'bind'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'sockets'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'topic_proxy'
op|'['
string|"'zmq_replies'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'sock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ipc_dir'
op|'='
name|'self'
op|'.'
name|'conf'
op|'.'
name|'rpc_zmq_ipc_dir'
newline|'\n'
nl|'\n'
comment|'#TODO(ewindisch): use zero-copy (i.e. references, not copying)'
nl|'\n'
name|'data'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
op|')'
newline|'\n'
name|'msg_id'
op|','
name|'topic'
op|','
name|'style'
op|','
name|'in_msg'
op|'='
name|'data'
newline|'\n'
name|'topic'
op|'='
name|'topic'
op|'.'
name|'split'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"CONSUMER GOT %s"'
op|')'
op|','
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'pformat'
op|','
name|'data'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Handle zmq_replies magic'
nl|'\n'
name|'if'
name|'topic'
op|'.'
name|'startswith'
op|'('
string|"'fanout~'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sock_type'
op|'='
name|'zmq'
op|'.'
name|'PUB'
newline|'\n'
dedent|''
name|'elif'
name|'topic'
op|'.'
name|'startswith'
op|'('
string|"'zmq_replies'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sock_type'
op|'='
name|'zmq'
op|'.'
name|'PUB'
newline|'\n'
name|'inside'
op|'='
name|'_deserialize'
op|'('
name|'in_msg'
op|')'
newline|'\n'
name|'msg_id'
op|'='
name|'inside'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'args'"
op|']'
op|'['
string|"'msg_id'"
op|']'
newline|'\n'
name|'response'
op|'='
name|'inside'
op|'['
op|'-'
number|'1'
op|']'
op|'['
string|"'args'"
op|']'
op|'['
string|"'response'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"->response->%s"'
op|')'
op|','
name|'response'
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
name|'str'
op|'('
name|'msg_id'
op|')'
op|','
name|'_serialize'
op|'('
name|'response'
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sock_type'
op|'='
name|'zmq'
op|'.'
name|'PUSH'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'topic'
name|'in'
name|'self'
op|'.'
name|'topic_proxy'
op|':'
newline|'\n'
indent|'            '
name|'outq'
op|'='
name|'ZmqSocket'
op|'('
string|'"ipc://%s/zmq_topic_%s"'
op|'%'
op|'('
name|'ipc_dir'
op|','
name|'topic'
op|')'
op|','
nl|'\n'
name|'sock_type'
op|','
name|'bind'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'topic_proxy'
op|'['
name|'topic'
op|']'
op|'='
name|'outq'
newline|'\n'
name|'self'
op|'.'
name|'sockets'
op|'.'
name|'append'
op|'('
name|'outq'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Created topic proxy: %s"'
op|')'
op|','
name|'topic'
op|')'
newline|'\n'
nl|'\n'
comment|'# It takes some time for a pub socket to open,'
nl|'\n'
comment|'# before we can have any faith in doing a send() to it.'
nl|'\n'
name|'if'
name|'sock_type'
op|'=='
name|'zmq'
op|'.'
name|'PUB'
op|':'
newline|'\n'
indent|'                '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'.5'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ROUTER RELAY-OUT START %(data)s"'
op|')'
op|'%'
op|'{'
string|"'data'"
op|':'
name|'data'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'topic_proxy'
op|'['
name|'topic'
op|']'
op|'.'
name|'send'
op|'('
name|'data'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ROUTER RELAY-OUT SUCCEEDED %(data)s"'
op|')'
op|'%'
op|'{'
string|"'data'"
op|':'
name|'data'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ZmqReactor
dedent|''
dedent|''
name|'class'
name|'ZmqReactor'
op|'('
name|'ZmqBaseReactor'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    A consumer class implementing a\n    consumer for messages. Can also be\n    used as a 1:1 proxy\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ZmqReactor'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'conf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'sock'
op|')'
op|':'
newline|'\n'
comment|'#TODO(ewindisch): use zero-copy (i.e. references, not copying)'
nl|'\n'
indent|'        '
name|'data'
op|'='
name|'sock'
op|'.'
name|'recv'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"CONSUMER RECEIVED DATA: %s"'
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'if'
name|'sock'
name|'in'
name|'self'
op|'.'
name|'mapping'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"ROUTER RELAY-OUT %(data)s"'
op|')'
op|'%'
op|'{'
nl|'\n'
string|"'data'"
op|':'
name|'data'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mapping'
op|'['
name|'sock'
op|']'
op|'.'
name|'send'
op|'('
name|'data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'msg_id'
op|','
name|'topic'
op|','
name|'style'
op|','
name|'in_msg'
op|'='
name|'data'
newline|'\n'
nl|'\n'
name|'ctx'
op|','
name|'request'
op|'='
name|'_deserialize'
op|'('
name|'in_msg'
op|')'
newline|'\n'
name|'ctx'
op|'='
name|'RpcContext'
op|'.'
name|'unmarshal'
op|'('
name|'ctx'
op|')'
newline|'\n'
nl|'\n'
name|'proxy'
op|'='
name|'self'
op|'.'
name|'proxies'
op|'['
name|'sock'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'process'
op|','
name|'style'
op|','
name|'topic'
op|','
nl|'\n'
name|'proxy'
op|','
name|'ctx'
op|','
name|'request'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'rpc_common'
op|'.'
name|'Connection'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages connections and threads."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conf'
op|'='
name|'conf'
newline|'\n'
name|'self'
op|'.'
name|'reactor'
op|'='
name|'ZmqReactor'
op|'('
name|'conf'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_consumer
dedent|''
name|'def'
name|'create_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# Only consume on the base topic name.'
nl|'\n'
indent|'        '
name|'topic'
op|'='
name|'topic'
op|'.'
name|'split'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Create Consumer for topic (%(topic)s)"'
op|')'
op|'%'
nl|'\n'
op|'{'
string|"'topic'"
op|':'
name|'topic'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Subscription scenarios'
nl|'\n'
name|'if'
name|'fanout'
op|':'
newline|'\n'
indent|'            '
name|'subscribe'
op|'='
op|'('
string|"''"
op|','
name|'fanout'
op|')'
op|'['
name|'type'
op|'('
name|'fanout'
op|')'
op|'=='
name|'str'
op|']'
newline|'\n'
name|'sock_type'
op|'='
name|'zmq'
op|'.'
name|'SUB'
newline|'\n'
name|'topic'
op|'='
string|"'fanout~'"
op|'+'
name|'topic'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'sock_type'
op|'='
name|'zmq'
op|'.'
name|'PULL'
newline|'\n'
name|'subscribe'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Receive messages from (local) proxy'
nl|'\n'
dedent|''
name|'inaddr'
op|'='
string|'"ipc://%s/zmq_topic_%s"'
op|'%'
op|'('
name|'self'
op|'.'
name|'conf'
op|'.'
name|'rpc_zmq_ipc_dir'
op|','
name|'topic'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Consumer is a zmq.%s"'
op|')'
op|','
nl|'\n'
op|'['
string|"'PULL'"
op|','
string|"'SUB'"
op|']'
op|'['
name|'sock_type'
op|'=='
name|'zmq'
op|'.'
name|'SUB'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'register'
op|'('
name|'proxy'
op|','
name|'inaddr'
op|','
name|'sock_type'
op|','
nl|'\n'
name|'subscribe'
op|'='
name|'subscribe'
op|','
name|'in_bind'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|wait
dedent|''
name|'def'
name|'wait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'reactor'
op|'.'
name|'consume_in_thread'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_cast
dedent|''
dedent|''
name|'def'
name|'_cast'
op|'('
name|'addr'
op|','
name|'context'
op|','
name|'msg_id'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'timeout_cast'
op|'='
name|'timeout'
name|'or'
name|'FLAGS'
op|'.'
name|'rpc_cast_timeout'
newline|'\n'
name|'payload'
op|'='
op|'['
name|'RpcContext'
op|'.'
name|'marshal'
op|'('
name|'context'
op|')'
op|','
name|'msg'
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'Timeout'
op|'('
name|'timeout_cast'
op|','
name|'exception'
op|'='
name|'rpc_common'
op|'.'
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'='
name|'ZmqClient'
op|'('
name|'addr'
op|')'
newline|'\n'
nl|'\n'
comment|"# assumes cast can't return an exception"
nl|'\n'
name|'conn'
op|'.'
name|'cast'
op|'('
name|'msg_id'
op|','
name|'topic'
op|','
name|'payload'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'zmq'
op|'.'
name|'ZMQError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
string|'"Cast failed. ZMQ Socket Exception"'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'conn'"
name|'in'
name|'vars'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_call
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_call'
op|'('
name|'addr'
op|','
name|'context'
op|','
name|'msg_id'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# timeout_response is how long we wait for a response'
nl|'\n'
indent|'    '
name|'timeout'
op|'='
name|'timeout'
name|'or'
name|'FLAGS'
op|'.'
name|'rpc_response_timeout'
newline|'\n'
nl|'\n'
comment|'# The msg_id is used to track replies.'
nl|'\n'
name|'msg_id'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|')'
newline|'\n'
nl|'\n'
comment|'# Replies always come into the reply service.'
nl|'\n'
comment|'# We require that FLAGS.host is a FQDN, IP, or resolvable hostname.'
nl|'\n'
name|'reply_topic'
op|'='
string|'"zmq_replies.%s"'
op|'%'
name|'FLAGS'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating payload"'
op|')'
op|')'
newline|'\n'
comment|'# Curry the original request into a reply method.'
nl|'\n'
name|'mcontext'
op|'='
name|'RpcContext'
op|'.'
name|'marshal'
op|'('
name|'context'
op|')'
newline|'\n'
name|'payload'
op|'='
op|'{'
nl|'\n'
string|"'method'"
op|':'
string|"'-reply'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
nl|'\n'
string|"'msg_id'"
op|':'
name|'msg_id'
op|','
nl|'\n'
string|"'context'"
op|':'
name|'mcontext'
op|','
nl|'\n'
string|"'topic'"
op|':'
name|'reply_topic'
op|','
nl|'\n'
string|"'msg'"
op|':'
op|'['
name|'mcontext'
op|','
name|'msg'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Creating queue socket for reply waiter"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Messages arriving async.'
nl|'\n'
comment|'# TODO(ewindisch): have reply consumer with dynamic subscription mgmt'
nl|'\n'
name|'with'
name|'Timeout'
op|'('
name|'timeout'
op|','
name|'exception'
op|'='
name|'rpc_common'
op|'.'
name|'Timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'msg_waiter'
op|'='
name|'ZmqSocket'
op|'('
nl|'\n'
string|'"ipc://%s/zmq_topic_zmq_replies"'
op|'%'
name|'FLAGS'
op|'.'
name|'rpc_zmq_ipc_dir'
op|','
nl|'\n'
name|'zmq'
op|'.'
name|'SUB'
op|','
name|'subscribe'
op|'='
name|'msg_id'
op|','
name|'bind'
op|'='
name|'False'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Sending cast"'
op|')'
op|')'
newline|'\n'
name|'_cast'
op|'('
name|'addr'
op|','
name|'context'
op|','
name|'msg_id'
op|','
name|'topic'
op|','
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Cast sent; Waiting reply"'
op|')'
op|')'
newline|'\n'
comment|'# Blocks until receives reply'
nl|'\n'
name|'msg'
op|'='
name|'msg_waiter'
op|'.'
name|'recv'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Received message: %s"'
op|')'
op|','
name|'msg'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Unpacking response"'
op|')'
op|')'
newline|'\n'
name|'responses'
op|'='
name|'_deserialize'
op|'('
name|'msg'
op|'['
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
comment|'# ZMQError trumps the Timeout error.'
nl|'\n'
dedent|''
name|'except'
name|'zmq'
op|'.'
name|'ZMQError'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RPCException'
op|'('
string|'"ZMQ Socket Error"'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'msg_waiter'"
name|'in'
name|'vars'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'msg_waiter'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# It seems we don't need to do all of the following,"
nl|'\n'
comment|'# but perhaps it would be useful for multicall?'
nl|'\n'
comment|"# One effect of this is that we're checking all"
nl|'\n'
comment|'# responses for Exceptions.'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'resp'
name|'in'
name|'responses'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'resp'
op|','
name|'types'
op|'.'
name|'DictType'
op|')'
name|'and'
string|"'exc'"
name|'in'
name|'resp'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'rpc_common'
op|'.'
name|'deserialize_remote_exception'
op|'('
name|'FLAGS'
op|','
name|'resp'
op|'['
string|"'exc'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'responses'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_multi_send
dedent|''
name|'def'
name|'_multi_send'
op|'('
name|'method'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Wraps the sending of messages,\n    dispatches to the matchmaker and sends\n    message to all relevant hosts.\n    """'
newline|'\n'
name|'conf'
op|'='
name|'FLAGS'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"%(msg)s"'
op|')'
op|'%'
op|'{'
string|"'msg'"
op|':'
string|"' '"
op|'.'
name|'join'
op|'('
name|'map'
op|'('
name|'pformat'
op|','
op|'('
name|'topic'
op|','
name|'msg'
op|')'
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'queues'
op|'='
name|'matchmaker'
op|'.'
name|'queues'
op|'('
name|'topic'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Sending message(s) to: %s"'
op|')'
op|','
name|'queues'
op|')'
newline|'\n'
nl|'\n'
comment|"# Don't stack if we have no matchmaker results"
nl|'\n'
name|'if'
name|'len'
op|'('
name|'queues'
op|')'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|'"No matchmaker results. Not casting."'
op|')'
op|')'
newline|'\n'
comment|'# While not strictly a timeout, callers know how to handle'
nl|'\n'
comment|"# this exception and a timeout isn't too big a lie."
nl|'\n'
name|'raise'
name|'rpc_common'
op|'.'
name|'Timeout'
op|','
string|'"No match from matchmaker."'
newline|'\n'
nl|'\n'
comment|'# This supports brokerless fanout (addresses > 1)'
nl|'\n'
dedent|''
name|'for'
name|'queue'
name|'in'
name|'queues'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'_topic'
op|','
name|'ip_addr'
op|')'
op|'='
name|'queue'
newline|'\n'
name|'_addr'
op|'='
string|'"tcp://%s:%s"'
op|'%'
op|'('
name|'ip_addr'
op|','
name|'conf'
op|'.'
name|'rpc_zmq_port'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'method'
op|'.'
name|'__name__'
op|'=='
string|"'_cast'"
op|':'
newline|'\n'
indent|'            '
name|'eventlet'
op|'.'
name|'spawn_n'
op|'('
name|'method'
op|','
name|'_addr'
op|','
name|'context'
op|','
nl|'\n'
name|'_topic'
op|','
name|'_topic'
op|','
name|'msg'
op|','
name|'timeout'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'method'
op|'('
name|'_addr'
op|','
name|'context'
op|','
name|'_topic'
op|','
name|'_topic'
op|','
name|'msg'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_connection
dedent|''
dedent|''
name|'def'
name|'create_connection'
op|'('
name|'conf'
op|','
name|'new'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'Connection'
op|'('
name|'conf'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|multicall
dedent|''
name|'def'
name|'multicall'
op|'('
name|'conf'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Multiple calls."""'
newline|'\n'
name|'register_opts'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'return'
name|'_multi_send'
op|'('
name|'_call'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|call
dedent|''
name|'def'
name|'call'
op|'('
name|'conf'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send a message, expect a response."""'
newline|'\n'
name|'register_opts'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'data'
op|'='
name|'_multi_send'
op|'('
name|'_call'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'data'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'conf'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send a message expecting no reply."""'
newline|'\n'
name|'register_opts'
op|'('
name|'conf'
op|')'
newline|'\n'
name|'_multi_send'
op|'('
name|'_cast'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast
dedent|''
name|'def'
name|'fanout_cast'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Send a message to all listening and expect no reply."""'
newline|'\n'
name|'register_opts'
op|'('
name|'conf'
op|')'
newline|'\n'
comment|'# NOTE(ewindisch): fanout~ is used because it avoid splitting on .'
nl|'\n'
comment|'# and acts as a non-subtle hint to the matchmaker and ZmqProxy.'
nl|'\n'
name|'_multi_send'
op|'('
name|'_cast'
op|','
name|'context'
op|','
string|"'fanout~'"
op|'+'
name|'str'
op|'('
name|'topic'
op|')'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|notify
dedent|''
name|'def'
name|'notify'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Send notification event.\n    Notifications are sent to topic-priority.\n    This differs from the AMQP drivers which send to topic.priority.\n    """'
newline|'\n'
name|'register_opts'
op|'('
name|'conf'
op|')'
newline|'\n'
comment|'# NOTE(ewindisch): dot-priority in rpc notifier does not'
nl|'\n'
comment|'# work with our assumptions.'
nl|'\n'
name|'topic'
op|'.'
name|'replace'
op|'('
string|"'.'"
op|','
string|"'-'"
op|')'
newline|'\n'
name|'cast'
op|'('
name|'conf'
op|','
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cleanup
dedent|''
name|'def'
name|'cleanup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Clean up resources in use by implementation."""'
newline|'\n'
name|'global'
name|'ZMQ_CTX'
newline|'\n'
name|'global'
name|'matchmaker'
newline|'\n'
name|'matchmaker'
op|'='
name|'None'
newline|'\n'
name|'ZMQ_CTX'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'ZMQ_CTX'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|register_opts
dedent|''
name|'def'
name|'register_opts'
op|'('
name|'conf'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Registration of options for this driver."""'
newline|'\n'
comment|'#NOTE(ewindisch): ZMQ_CTX and matchmaker'
nl|'\n'
comment|'# are initialized here as this is as good'
nl|'\n'
comment|'# an initialization method as any.'
nl|'\n'
nl|'\n'
comment|'# We memoize through these globals'
nl|'\n'
name|'global'
name|'ZMQ_CTX'
newline|'\n'
name|'global'
name|'matchmaker'
newline|'\n'
name|'global'
name|'FLAGS'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'FLAGS'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'.'
name|'register_opts'
op|'('
name|'zmq_opts'
op|')'
newline|'\n'
name|'FLAGS'
op|'='
name|'conf'
newline|'\n'
comment|"# Don't re-set, if this method is called twice."
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'ZMQ_CTX'
op|':'
newline|'\n'
indent|'        '
name|'ZMQ_CTX'
op|'='
name|'zmq'
op|'.'
name|'Context'
op|'('
name|'conf'
op|'.'
name|'rpc_zmq_contexts'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'matchmaker'
op|':'
newline|'\n'
comment|"# rpc_zmq_matchmaker should be set to a 'module.Class'"
nl|'\n'
indent|'        '
name|'mm_path'
op|'='
name|'conf'
op|'.'
name|'rpc_zmq_matchmaker'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
newline|'\n'
name|'mm_module'
op|'='
string|"'.'"
op|'.'
name|'join'
op|'('
name|'mm_path'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|')'
newline|'\n'
name|'mm_class'
op|'='
name|'mm_path'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
comment|'# Only initialize a class.'
nl|'\n'
name|'if'
name|'mm_path'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'0'
op|']'
name|'not'
name|'in'
name|'string'
op|'.'
name|'ascii_uppercase'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Matchmaker could not be loaded.\\n"'
nl|'\n'
string|'"rpc_zmq_matchmaker is not a class."'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
name|'mm_impl'
op|'='
name|'importutils'
op|'.'
name|'import_module'
op|'('
name|'mm_module'
op|')'
newline|'\n'
name|'mm_constructor'
op|'='
name|'getattr'
op|'('
name|'mm_impl'
op|','
name|'mm_class'
op|')'
newline|'\n'
name|'matchmaker'
op|'='
name|'mm_constructor'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

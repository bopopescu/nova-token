begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'import'
name|'kombu'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'entity'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'messaging'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'connection'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.rpc'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QueueBase
name|'class'
name|'QueueBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue base class."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init the queue.\n\n        \'channel\' is the amqp channel to use\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        queue name, exchange name, and other kombu options are\n        passed in here as a dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
name|'str'
op|'('
name|'tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-create the queue after a rabbit reconnect"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'['
string|"'channel'"
op|']'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Queue'
op|'('
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'declare'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume from this queue.\n        If a callback is specified in kwargs, use that.  Otherwise,\n        use the callback passed during __init__()\n\n        The callback will be called if a message was read off of the\n        queue.\n\n        If kwargs[\'nowait\'] is True, then this call will block until\n        a message is read.\n\n        Messages will automatically be acked if the callback doesn\'t\n        raise an exception\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'consumer_tag'"
op|':'
name|'self'
op|'.'
name|'tag'
op|'}'
newline|'\n'
name|'options'
op|'['
string|"'nowait'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'nowait'"
op|','
name|'False'
op|')'
newline|'\n'
name|'callback'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'callback'"
op|','
name|'self'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'callback'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"No callback defined"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_callback
dedent|''
name|'def'
name|'_callback'
op|'('
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'message_to_python'
op|'('
name|'raw_message'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'message'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'ack'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'queue'
op|'.'
name|'consume'
op|'('
op|'*'
name|'args'
op|','
name|'callback'
op|'='
name|'_callback'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the consuming from the queue, if it has started"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'cancel'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Kludge to get around a amqplib bug'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'e'
op|')'
op|'!='
string|'"u\'%s\'"'
op|'%'
name|'self'
op|'.'
name|'tag'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectQueue
dedent|''
dedent|''
name|'class'
name|'DirectQueue'
op|'('
name|'QueueBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue/consumer class for \'direct\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'direct\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'msg_id\' is the msg_id to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectQueue'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'msg_id'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicQueue
dedent|''
dedent|''
name|'class'
name|'TopicQueue'
op|'('
name|'QueueBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue/consumer class for \'topic\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'topic\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicQueue'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'topic'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutQueue
dedent|''
dedent|''
name|'class'
name|'FanoutQueue'
op|'('
name|'QueueBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue/consumer class for \'fanout\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'fanout\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
name|'unique'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'exchange_name'
op|'='
string|"'%s_fanout'"
op|'%'
name|'topic'
newline|'\n'
name|'queue_name'
op|'='
string|"'%s_fanout_%s'"
op|'%'
op|'('
name|'topic'
op|','
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'exchange_name'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutQueue'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'queue_name'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Publisher
dedent|''
dedent|''
name|'class'
name|'Publisher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base Publisher class"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'exchange_name'
op|','
name|'routing_key'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init the Publisher class with the exchange_name, routing_key,\n        and other options\n        """'
newline|'\n'
name|'self'
op|'.'
name|'exchange_name'
op|'='
name|'exchange_name'
newline|'\n'
name|'self'
op|'.'
name|'routing_key'
op|'='
name|'routing_key'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-establish the Producer after a rabbit reconnection"""'
newline|'\n'
name|'self'
op|'.'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
name|'name'
op|'='
name|'self'
op|'.'
name|'exchange_name'
op|','
nl|'\n'
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'kombu'
op|'.'
name|'messaging'
op|'.'
name|'Producer'
op|'('
name|'exchange'
op|'='
name|'self'
op|'.'
name|'exchange'
op|','
nl|'\n'
name|'channel'
op|'='
name|'channel'
op|','
name|'routing_key'
op|'='
name|'self'
op|'.'
name|'routing_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message"""'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'publish'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectPublisher
dedent|''
dedent|''
name|'class'
name|'DirectPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'direct\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'direct\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicPublisher
dedent|''
dedent|''
name|'class'
name|'TopicPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'topic\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'topic\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'topic'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutPublisher
dedent|''
dedent|''
name|'class'
name|'FanoutPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'fanout\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'fanout\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
string|"'%s_fanout'"
op|'%'
name|'topic'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Connection instance object."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'queues'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_max_retries'
newline|'\n'
name|'self'
op|'.'
name|'interval_start'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_interval'
newline|'\n'
name|'self'
op|'.'
name|'interval_stepping'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'interval_max'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_interval'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'dict'
op|'('
name|'hostname'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_host'
op|','
nl|'\n'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_port'
op|','
nl|'\n'
name|'userid'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_userid'
op|','
nl|'\n'
name|'password'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_password'
op|','
nl|'\n'
name|'virtual_host'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_virtual_host'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_rabbit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'['
string|"'transport'"
op|']'
op|'='
string|"'memory'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles reconnecting and re-estblishing queues"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'kombu'
op|'.'
name|'connection'
op|'.'
name|'Connection'
op|'('
op|'**'
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue_num'
op|'='
name|'itertools'
op|'.'
name|'count'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'ensure_connection'
op|'('
name|'errback'
op|'='
name|'self'
op|'.'
name|'connect_error'
op|','
nl|'\n'
name|'max_retries'
op|'='
name|'self'
op|'.'
name|'max_retries'
op|','
nl|'\n'
name|'interval_start'
op|'='
name|'self'
op|'.'
name|'interval_start'
op|','
nl|'\n'
name|'interval_step'
op|'='
name|'self'
op|'.'
name|'interval_stepping'
op|','
nl|'\n'
name|'interval_max'
op|'='
name|'self'
op|'.'
name|'interval_max'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'err_str'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
name|'max_retries'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_max_retries'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Unable to connect to AMQP server '"
nl|'\n'
string|"'after %(max_retries)d tries: %(err_str)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# NOTE(comstud): Original carrot code exits after so many'
nl|'\n'
comment|'# attempts, but I wonder if we should re-try indefinitely'
nl|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Connected to AMQP server on %(hostname)s:%(port)d'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'params'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
name|'for'
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'queues'
op|':'
newline|'\n'
indent|'            '
name|'consumer'
op|'.'
name|'reconnect'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'queues'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Re-established AMQP queues"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_channel
dedent|''
dedent|''
name|'def'
name|'get_channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convenience call for bin/clear_rabbit_queues"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
DECL|member|connect_error
dedent|''
name|'def'
name|'connect_error'
op|'('
name|'self'
op|','
name|'exc'
op|','
name|'interval'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Callback when there are connection re-tries by kombu"""'
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'params'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'info'
op|'['
string|"'intv'"
op|']'
op|'='
name|'interval'
newline|'\n'
name|'info'
op|'['
string|"'e'"
op|']'
op|'='
name|'exc'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'AMQP server on %(hostname)s:%(port)d is'"
nl|'\n'
string|"' unreachable: %(e)s. Trying again in %(intv)d'"
nl|'\n'
string|"' seconds.'"
op|')'
op|'%'
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close/release this connection"""'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset a connection so it can be used again"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queues'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|create_queue
dedent|''
name|'def'
name|'create_queue'
op|'('
name|'self'
op|','
name|'queue_cls'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a queue using the class that was passed in and\n        add it to our list of queues used for consuming\n        """'
newline|'\n'
name|'self'
op|'.'
name|'queues'
op|'.'
name|'append'
op|'('
name|'queue_cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
nl|'\n'
name|'self'
op|'.'
name|'queue_num'
op|'.'
name|'next'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume from all queues"""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'queues_head'
op|'='
name|'self'
op|'.'
name|'queues'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'queues_tail'
op|'='
name|'self'
op|'.'
name|'queues'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'for'
name|'queue'
name|'in'
name|'queues_head'
op|':'
newline|'\n'
indent|'                    '
name|'queue'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'queues_tail'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'iteration'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'limit'
name|'and'
name|'iteration'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'drain_events'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to consume message from queue: '"
nl|'\n'
string|"'%s'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|publisher_send
dedent|''
dedent|''
dedent|''
name|'def'
name|'publisher_send'
op|'('
name|'self'
op|','
name|'cls'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send to a publisher based on the publisher class"""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'publisher'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'publisher'
op|'='
name|'cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|')'
newline|'\n'
name|'publisher'
op|'.'
name|'send'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to publish message %s'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
name|'if'
name|'publisher'
op|':'
newline|'\n'
indent|'                        '
name|'publisher'
op|'.'
name|'reconnect'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|direct_consumer
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'direct_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'direct\' queue.\n        In nova\'s use, this is generally a msg_id queue used for\n        responses for call/multicall\n        """'
newline|'\n'
name|'self'
op|'.'
name|'create_queue'
op|'('
name|'DirectQueue'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|topic_consumer
dedent|''
name|'def'
name|'topic_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'topic\' queue."""'
newline|'\n'
name|'self'
op|'.'
name|'create_queue'
op|'('
name|'TopicQueue'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fanout_consumer
dedent|''
name|'def'
name|'fanout_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'fanout\' queue"""'
newline|'\n'
name|'self'
op|'.'
name|'create_queue'
op|'('
name|'FanoutQueue'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|direct_send
dedent|''
name|'def'
name|'direct_send'
op|'('
name|'self'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'direct\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'DirectPublisher'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|topic_send
dedent|''
name|'def'
name|'topic_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'topic\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'TopicPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fanout_send
dedent|''
name|'def'
name|'fanout_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'fanout\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'FanoutPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

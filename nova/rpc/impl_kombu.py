begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'ssl'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'greenlet'
newline|'\n'
name|'import'
name|'kombu'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'entity'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'messaging'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'connection'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'amqp'
name|'as'
name|'rpc_amqp'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
nl|'\n'
DECL|variable|kombu_opts
name|'kombu_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'kombu_ssl_version'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'SSL version to use (valid only if SSL enabled)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'kombu_ssl_keyfile'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'SSL key file (valid only if SSL enabled)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'kombu_ssl_certfile'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'SSL cert file (valid only if SSL enabled)'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'kombu_ssl_ca_certs'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"''"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
op|'('
string|"'SSL certification authority file '"
nl|'\n'
string|"'(valid only if SSL enabled)'"
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'kombu_opts'
op|')'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'rpc_common'
op|'.'
name|'LOG'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConsumerBase
name|'class'
name|'ConsumerBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer base class."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a queue on an amqp channel.\n\n        \'channel\' is the amqp channel to use\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        queue name, exchange name, and other kombu options are\n        passed in here as a dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
name|'str'
op|'('
name|'tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-declare the queue after a rabbit reconnect"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'['
string|"'channel'"
op|']'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Queue'
op|'('
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'declare'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Actually declare the consumer on the amqp channel.  This will\n        start the flow of messages from the queue.  Using the\n        Connection.iterconsume() iterator will process the messages,\n        calling the appropriate callback.\n\n        If a callback is specified in kwargs, use that.  Otherwise,\n        use the callback passed during __init__()\n\n        If kwargs[\'nowait\'] is True, then this call will block until\n        a message is read.\n\n        Messages will automatically be acked if the callback doesn\'t\n        raise an exception\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'consumer_tag'"
op|':'
name|'self'
op|'.'
name|'tag'
op|'}'
newline|'\n'
name|'options'
op|'['
string|"'nowait'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'nowait'"
op|','
name|'False'
op|')'
newline|'\n'
name|'callback'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'callback'"
op|','
name|'self'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'callback'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"No callback defined"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_callback
dedent|''
name|'def'
name|'_callback'
op|'('
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'message_to_python'
op|'('
name|'raw_message'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'message'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'ack'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'queue'
op|'.'
name|'consume'
op|'('
op|'*'
name|'args'
op|','
name|'callback'
op|'='
name|'_callback'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the consuming from the queue, if it has started"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'cancel'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Kludge to get around a amqplib bug'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'e'
op|')'
op|'!='
string|'"u\'%s\'"'
op|'%'
name|'self'
op|'.'
name|'tag'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectConsumer
dedent|''
dedent|''
name|'class'
name|'DirectConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue/consumer class for \'direct\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'direct\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'msg_id\' is the msg_id to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'msg_id'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicConsumer
dedent|''
dedent|''
name|'class'
name|'TopicConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer class for \'topic\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'topic\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'topic'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutConsumer
dedent|''
dedent|''
name|'class'
name|'FanoutConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer class for \'fanout\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'fanout\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
name|'unique'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'exchange_name'
op|'='
string|"'%s_fanout'"
op|'%'
name|'topic'
newline|'\n'
name|'queue_name'
op|'='
string|"'%s_fanout_%s'"
op|'%'
op|'('
name|'topic'
op|','
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'exchange_name'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'queue_name'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Publisher
dedent|''
dedent|''
name|'class'
name|'Publisher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base Publisher class"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'exchange_name'
op|','
name|'routing_key'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init the Publisher class with the exchange_name, routing_key,\n        and other options\n        """'
newline|'\n'
name|'self'
op|'.'
name|'exchange_name'
op|'='
name|'exchange_name'
newline|'\n'
name|'self'
op|'.'
name|'routing_key'
op|'='
name|'routing_key'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-establish the Producer after a rabbit reconnection"""'
newline|'\n'
name|'self'
op|'.'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
name|'name'
op|'='
name|'self'
op|'.'
name|'exchange_name'
op|','
nl|'\n'
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'kombu'
op|'.'
name|'messaging'
op|'.'
name|'Producer'
op|'('
name|'exchange'
op|'='
name|'self'
op|'.'
name|'exchange'
op|','
nl|'\n'
name|'channel'
op|'='
name|'channel'
op|','
name|'routing_key'
op|'='
name|'self'
op|'.'
name|'routing_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message"""'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'publish'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectPublisher
dedent|''
dedent|''
name|'class'
name|'DirectPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'direct\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'direct\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicPublisher
dedent|''
dedent|''
name|'class'
name|'TopicPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'topic\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'topic\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'topic'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutPublisher
dedent|''
dedent|''
name|'class'
name|'FanoutPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'fanout\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'fanout\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
string|"'%s_fanout'"
op|'%'
name|'topic'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotifyPublisher
dedent|''
dedent|''
name|'class'
name|'NotifyPublisher'
op|'('
name|'TopicPublisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'notify\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'durable'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'durable'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|')'
newline|'\n'
name|'super'
op|'('
name|'NotifyPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotifyPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jerdfelt): Normally the consumer would create the queue, but'
nl|'\n'
comment|"# we do this to ensure that messages don't get dropped if the"
nl|'\n'
comment|'# consumer is started after we do'
nl|'\n'
name|'queue'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Queue'
op|'('
name|'channel'
op|'='
name|'channel'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'self'
op|'.'
name|'exchange'
op|','
nl|'\n'
name|'durable'
op|'='
name|'self'
op|'.'
name|'durable'
op|','
nl|'\n'
name|'name'
op|'='
name|'self'
op|'.'
name|'routing_key'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'self'
op|'.'
name|'routing_key'
op|')'
newline|'\n'
name|'queue'
op|'.'
name|'declare'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Connection object."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'server_params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_max_retries'
newline|'\n'
comment|'# Try forever?'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'max_retries'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'interval_start'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_interval'
newline|'\n'
name|'self'
op|'.'
name|'interval_stepping'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_backoff'
newline|'\n'
comment|'# max retry-interval = 30 seconds'
nl|'\n'
name|'self'
op|'.'
name|'interval_max'
op|'='
number|'30'
newline|'\n'
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'if'
name|'server_params'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'server_params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Keys to translate from server_params to kombu params'
nl|'\n'
dedent|''
name|'server_params_to_kombu_params'
op|'='
op|'{'
string|"'username'"
op|':'
string|"'userid'"
op|'}'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'sp_key'
op|','
name|'value'
name|'in'
name|'server_params'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'p_key'
op|'='
name|'server_params_to_kombu_params'
op|'.'
name|'get'
op|'('
name|'sp_key'
op|','
name|'sp_key'
op|')'
newline|'\n'
name|'params'
op|'['
name|'p_key'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
name|'params'
op|'.'
name|'setdefault'
op|'('
string|"'hostname'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_host'
op|')'
newline|'\n'
name|'params'
op|'.'
name|'setdefault'
op|'('
string|"'port'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_port'
op|')'
newline|'\n'
name|'params'
op|'.'
name|'setdefault'
op|'('
string|"'userid'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_userid'
op|')'
newline|'\n'
name|'params'
op|'.'
name|'setdefault'
op|'('
string|"'password'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_password'
op|')'
newline|'\n'
name|'params'
op|'.'
name|'setdefault'
op|'('
string|"'virtual_host'"
op|','
name|'FLAGS'
op|'.'
name|'rabbit_virtual_host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_rabbit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'['
string|"'transport'"
op|']'
op|'='
string|"'memory'"
newline|'\n'
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'rabbit_use_ssl'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'['
string|"'ssl'"
op|']'
op|'='
name|'self'
op|'.'
name|'_fetch_ssl_params'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fetch_ssl_params
dedent|''
name|'def'
name|'_fetch_ssl_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles fetching what ssl params\n        should be used for the connection (if any)"""'
newline|'\n'
name|'ssl_params'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# http://docs.python.org/library/ssl.html - ssl.wrap_socket'
nl|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'kombu_ssl_version'
op|':'
newline|'\n'
indent|'            '
name|'ssl_params'
op|'['
string|"'ssl_version'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'kombu_ssl_version'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'kombu_ssl_keyfile'
op|':'
newline|'\n'
indent|'            '
name|'ssl_params'
op|'['
string|"'keyfile'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'kombu_ssl_keyfile'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'kombu_ssl_certfile'
op|':'
newline|'\n'
indent|'            '
name|'ssl_params'
op|'['
string|"'certfile'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'kombu_ssl_certfile'
newline|'\n'
dedent|''
name|'if'
name|'FLAGS'
op|'.'
name|'kombu_ssl_ca_certs'
op|':'
newline|'\n'
indent|'            '
name|'ssl_params'
op|'['
string|"'ca_certs'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'kombu_ssl_ca_certs'
newline|'\n'
comment|'# We might want to allow variations in the'
nl|'\n'
comment|'# future with this?'
nl|'\n'
name|'ssl_params'
op|'['
string|"'cert_reqs'"
op|']'
op|'='
name|'ssl'
op|'.'
name|'CERT_REQUIRED'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'ssl_params'
op|':'
newline|'\n'
comment|'# Just have the default behavior'
nl|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Return the extended behavior'
nl|'\n'
indent|'            '
name|'return'
name|'ssl_params'
newline|'\n'
nl|'\n'
DECL|member|_connect
dedent|''
dedent|''
name|'def'
name|'_connect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Connect to rabbit.  Re-establish any queues that may have\n        been declared before if we are reconnecting.  Exceptions should\n        be handled by the caller.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Reconnecting to AMQP server on "'
nl|'\n'
string|'"%(hostname)s:%(port)d"'
op|')'
op|'%'
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection_errors'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
comment|'# Setting this in case the next statement fails, though'
nl|'\n'
comment|"# it shouldn't be doing any network operations, yet."
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'kombu'
op|'.'
name|'connection'
op|'.'
name|'BrokerConnection'
op|'('
nl|'\n'
op|'**'
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection_errors'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
comment|'# Kludge to speed up tests.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'transport'
op|'.'
name|'polling_interval'
op|'='
number|'0.0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumer_num'
op|'='
name|'itertools'
op|'.'
name|'count'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
comment|"# work around 'memory' transport bug in 1.1.3"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'_new_queue'
op|'('
string|"'ae.undeliver'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'consumer'
op|'.'
name|'reconnect'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Connected to AMQP server on '"
nl|'\n'
string|"'%(hostname)s:%(port)d'"
op|'%'
name|'self'
op|'.'
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles reconnecting and re-establishing queues.\n        Will retry up to self.max_retries number of times.\n        self.max_retries = 0 means to retry forever.\n        Sleep between tries, starting at self.interval_start\n        seconds, backing off self.interval_stepping number of seconds\n        each attempt.\n        """'
newline|'\n'
nl|'\n'
name|'attempt'
op|'='
number|'0'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'attempt'
op|'+='
number|'1'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_connect'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|"# NOTE(comstud): Unfortunately it's possible for amqplib"
nl|'\n'
comment|'# to return an error not covered by its transport'
nl|'\n'
comment|'# connection_errors in the case of a timeout waiting for'
nl|'\n'
comment|'# a protocol response.  (See paste link in LP888621)'
nl|'\n'
comment|"# So, we check all exceptions for 'timeout' in them"
nl|'\n'
comment|'# and try to reconnect in this case.'
nl|'\n'
indent|'                '
name|'if'
string|"'timeout'"
name|'not'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'log_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'log_info'
op|'['
string|"'err_str'"
op|']'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
name|'log_info'
op|'['
string|"'max_retries'"
op|']'
op|'='
name|'self'
op|'.'
name|'max_retries'
newline|'\n'
name|'log_info'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'max_retries'
name|'and'
name|'attempt'
op|'=='
name|'self'
op|'.'
name|'max_retries'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Unable to connect to AMQP server on '"
nl|'\n'
string|"'%(hostname)s:%(port)d after %(max_retries)d '"
nl|'\n'
string|"'tries: %(err_str)s'"
op|')'
op|'%'
name|'log_info'
op|')'
newline|'\n'
comment|"# NOTE(comstud): Copied from original code.  There's"
nl|'\n'
comment|'# really no better recourse because if this was a queue we'
nl|'\n'
comment|'# need to consume on, we have no way to consume anymore.'
nl|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'attempt'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'sleep_time'
op|'='
name|'self'
op|'.'
name|'interval_start'
name|'or'
number|'1'
newline|'\n'
dedent|''
name|'elif'
name|'attempt'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'sleep_time'
op|'+='
name|'self'
op|'.'
name|'interval_stepping'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'interval_max'
op|':'
newline|'\n'
indent|'                '
name|'sleep_time'
op|'='
name|'min'
op|'('
name|'sleep_time'
op|','
name|'self'
op|'.'
name|'interval_max'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'log_info'
op|'['
string|"'sleep_time'"
op|']'
op|'='
name|'sleep_time'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'AMQP server on %(hostname)s:%(port)d is'"
nl|'\n'
string|"' unreachable: %(err_str)s. Trying again in '"
nl|'\n'
string|"'%(sleep_time)d seconds.'"
op|')'
op|'%'
name|'log_info'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
name|'sleep_time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ensure
dedent|''
dedent|''
name|'def'
name|'ensure'
op|'('
name|'self'
op|','
name|'error_callback'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'self'
op|'.'
name|'connection_errors'
op|','
name|'socket'
op|'.'
name|'timeout'
op|')'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|"# NOTE(comstud): Unfortunately it's possible for amqplib"
nl|'\n'
comment|'# to return an error not covered by its transport'
nl|'\n'
comment|'# connection_errors in the case of a timeout waiting for'
nl|'\n'
comment|'# a protocol response.  (See paste link in LP888621)'
nl|'\n'
comment|"# So, we check all exceptions for 'timeout' in them"
nl|'\n'
comment|'# and try to reconnect in this case.'
nl|'\n'
indent|'                '
name|'if'
string|"'timeout'"
name|'not'
name|'in'
name|'str'
op|'('
name|'e'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'error_callback'
op|':'
newline|'\n'
indent|'                '
name|'error_callback'
op|'('
name|'e'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_channel
dedent|''
dedent|''
name|'def'
name|'get_channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convenience call for bin/clear_rabbit_queues"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close/release this connection"""'
newline|'\n'
name|'self'
op|'.'
name|'cancel_consumer_thread'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset a connection so it can be used again"""'
newline|'\n'
name|'self'
op|'.'
name|'cancel_consumer_thread'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
comment|"# work around 'memory' transport bug in 1.1.3"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'_new_queue'
op|'('
string|"'ae.undeliver'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
name|'consumer_cls'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a Consumer using the class that was passed in and\n        add it to our list of consumers\n        """'
newline|'\n'
nl|'\n'
DECL|function|_connect_error
name|'def'
name|'_connect_error'
op|'('
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log_info'
op|'='
op|'{'
string|"'topic'"
op|':'
name|'topic'
op|','
string|"'err_str'"
op|':'
name|'str'
op|'('
name|'exc'
op|')'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Failed to declare consumer for topic \'%(topic)s\': "'
nl|'\n'
string|'"%(err_str)s"'
op|')'
op|'%'
name|'log_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_declare_consumer
dedent|''
name|'def'
name|'_declare_consumer'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'consumer'
op|'='
name|'consumer_cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
nl|'\n'
name|'self'
op|'.'
name|'consumer_num'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumers'
op|'.'
name|'append'
op|'('
name|'consumer'
op|')'
newline|'\n'
name|'return'
name|'consumer'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'ensure'
op|'('
name|'_connect_error'
op|','
name|'_declare_consumer'
op|')'
newline|'\n'
nl|'\n'
DECL|member|iterconsume
dedent|''
name|'def'
name|'iterconsume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an iterator that will consume from all queues/consumers"""'
newline|'\n'
nl|'\n'
name|'info'
op|'='
op|'{'
string|"'do_consume'"
op|':'
name|'True'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_error_callback
name|'def'
name|'_error_callback'
op|'('
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'exc'
op|','
name|'socket'
op|'.'
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Timed out waiting for RPC response: %s'"
op|')'
op|'%'
nl|'\n'
name|'str'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'rpc_common'
op|'.'
name|'Timeout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to consume message from queue: %s'"
op|')'
op|'%'
nl|'\n'
name|'str'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
name|'info'
op|'['
string|"'do_consume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|_consume
dedent|''
dedent|''
name|'def'
name|'_consume'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'info'
op|'['
string|"'do_consume'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'queues_head'
op|'='
name|'self'
op|'.'
name|'consumers'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'queues_tail'
op|'='
name|'self'
op|'.'
name|'consumers'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'for'
name|'queue'
name|'in'
name|'queues_head'
op|':'
newline|'\n'
indent|'                    '
name|'queue'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'queues_tail'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'False'
op|')'
newline|'\n'
name|'info'
op|'['
string|"'do_consume'"
op|']'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'drain_events'
op|'('
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'iteration'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
number|'0'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'limit'
name|'and'
name|'iteration'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'ensure'
op|'('
name|'_error_callback'
op|','
name|'_consume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel_consumer_thread
dedent|''
dedent|''
name|'def'
name|'cancel_consumer_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel a consumer thread"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'consumer_thread'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer_thread'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consumer_thread'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'greenlet'
op|'.'
name|'GreenletExit'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|publisher_send
dedent|''
dedent|''
name|'def'
name|'publisher_send'
op|'('
name|'self'
op|','
name|'cls'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send to a publisher based on the publisher class"""'
newline|'\n'
nl|'\n'
DECL|function|_error_callback
name|'def'
name|'_error_callback'
op|'('
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'log_info'
op|'='
op|'{'
string|"'topic'"
op|':'
name|'topic'
op|','
string|"'err_str'"
op|':'
name|'str'
op|'('
name|'exc'
op|')'
op|'}'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Failed to publish message to topic "'
nl|'\n'
string|'"\'%(topic)s\': %(err_str)s"'
op|')'
op|'%'
name|'log_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_publish
dedent|''
name|'def'
name|'_publish'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'publisher'
op|'='
name|'cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'publisher'
op|'.'
name|'send'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'ensure'
op|'('
name|'_error_callback'
op|','
name|'_publish'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_direct_consumer
dedent|''
name|'def'
name|'declare_direct_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'direct\' queue.\n        In nova\'s use, this is generally a msg_id queue used for\n        responses for call/multicall\n        """'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'DirectConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_topic_consumer
dedent|''
name|'def'
name|'declare_topic_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'topic\' consumer."""'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'TopicConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_fanout_consumer
dedent|''
name|'def'
name|'declare_fanout_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'fanout\' consumer"""'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'FanoutConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|direct_send
dedent|''
name|'def'
name|'direct_send'
op|'('
name|'self'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'direct\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'DirectPublisher'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|topic_send
dedent|''
name|'def'
name|'topic_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'topic\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'TopicPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fanout_send
dedent|''
name|'def'
name|'fanout_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'fanout\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'FanoutPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|notify_send
dedent|''
name|'def'
name|'notify_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a notify message on a topic"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'NotifyPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume from all queues/consumers"""'
newline|'\n'
name|'it'
op|'='
name|'self'
op|'.'
name|'iterconsume'
op|'('
name|'limit'
op|'='
name|'limit'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'it'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
dedent|''
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consumer from all queues/consumers in a greenthread"""'
newline|'\n'
DECL|function|_consumer_thread
name|'def'
name|'_consumer_thread'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consume'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'greenlet'
op|'.'
name|'GreenletExit'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumer_thread'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'_consumer_thread'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'consumer_thread'
newline|'\n'
nl|'\n'
DECL|member|create_consumer
dedent|''
name|'def'
name|'create_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a consumer that calls a method in a proxy object"""'
newline|'\n'
name|'if'
name|'fanout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'declare_fanout_consumer'
op|'('
name|'topic'
op|','
nl|'\n'
name|'rpc_amqp'
op|'.'
name|'ProxyCallback'
op|'('
name|'proxy'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'declare_topic_consumer'
op|'('
name|'topic'
op|','
nl|'\n'
name|'rpc_amqp'
op|'.'
name|'ProxyCallback'
op|'('
name|'proxy'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'Connection'
op|'.'
name|'pool'
op|'='
name|'rpc_amqp'
op|'.'
name|'Pool'
op|'('
name|'connection_cls'
op|'='
name|'Connection'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_connection
name|'def'
name|'create_connection'
op|'('
name|'new'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a connection"""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'create_connection'
op|'('
name|'new'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|multicall
dedent|''
name|'def'
name|'multicall'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make a call that returns multiple times."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'multicall'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|call
dedent|''
name|'def'
name|'call'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic and wait for a response."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'call'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'timeout'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic without waiting for a response."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast
dedent|''
name|'def'
name|'fanout_cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a fanout exchange without waiting for a response."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'fanout_cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast_to_server
dedent|''
name|'def'
name|'cast_to_server'
op|'('
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic to a specific server."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'cast_to_server'
op|'('
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|','
nl|'\n'
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast_to_server
dedent|''
name|'def'
name|'fanout_cast_to_server'
op|'('
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a fanout exchange to a specific server."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'cast_to_server'
op|'('
name|'context'
op|','
name|'server_params'
op|','
name|'topic'
op|','
name|'msg'
op|','
nl|'\n'
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|notify
dedent|''
name|'def'
name|'notify'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a notification event on a topic."""'
newline|'\n'
name|'return'
name|'rpc_amqp'
op|'.'
name|'notify'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cleanup
dedent|''
name|'def'
name|'cleanup'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'rpc_amqp'
op|'.'
name|'cleanup'
op|'('
name|'Connection'
op|'.'
name|'pool'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

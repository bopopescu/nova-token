begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'kombu'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'entity'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'messaging'
newline|'\n'
name|'import'
name|'kombu'
op|'.'
name|'connection'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'types'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenpool'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'pools'
newline|'\n'
name|'import'
name|'greenlet'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
op|'.'
name|'common'
name|'import'
name|'RemoteError'
op|','
name|'LOG'
newline|'\n'
nl|'\n'
comment|'# Needed for tests'
nl|'\n'
name|'eventlet'
op|'.'
name|'monkey_patch'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConsumerBase
name|'class'
name|'ConsumerBase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer base class."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Declare a queue on an amqp channel.\n\n        \'channel\' is the amqp channel to use\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        queue name, exchange name, and other kombu options are\n        passed in here as a dictionary.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'callback'
op|'='
name|'callback'
newline|'\n'
name|'self'
op|'.'
name|'tag'
op|'='
name|'str'
op|'('
name|'tag'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-declare the queue after a rabbit reconnect"""'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'['
string|"'channel'"
op|']'
op|'='
name|'channel'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Queue'
op|'('
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'queue'
op|'.'
name|'declare'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Actually declare the consumer on the amqp channel.  This will\n        start the flow of messages from the queue.  Using the\n        Connection.iterconsume() iterator will process the messages,\n        calling the appropriate callback.\n\n        If a callback is specified in kwargs, use that.  Otherwise,\n        use the callback passed during __init__()\n\n        If kwargs[\'nowait\'] is True, then this call will block until\n        a message is read.\n\n        Messages will automatically be acked if the callback doesn\'t\n        raise an exception\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'consumer_tag'"
op|':'
name|'self'
op|'.'
name|'tag'
op|'}'
newline|'\n'
name|'options'
op|'['
string|"'nowait'"
op|']'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'nowait'"
op|','
name|'False'
op|')'
newline|'\n'
name|'callback'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'callback'"
op|','
name|'self'
op|'.'
name|'callback'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'callback'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'ValueError'
op|'('
string|'"No callback defined"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_callback
dedent|''
name|'def'
name|'_callback'
op|'('
name|'raw_message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'self'
op|'.'
name|'channel'
op|'.'
name|'message_to_python'
op|'('
name|'raw_message'
op|')'
newline|'\n'
name|'callback'
op|'('
name|'message'
op|'.'
name|'payload'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'ack'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'queue'
op|'.'
name|'consume'
op|'('
op|'*'
name|'args'
op|','
name|'callback'
op|'='
name|'_callback'
op|','
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel
dedent|''
name|'def'
name|'cancel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel the consuming from the queue, if it has started"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'queue'
op|'.'
name|'cancel'
op|'('
name|'self'
op|'.'
name|'tag'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# NOTE(comstud): Kludge to get around a amqplib bug'
nl|'\n'
indent|'            '
name|'if'
name|'str'
op|'('
name|'e'
op|')'
op|'!='
string|'"u\'%s\'"'
op|'%'
name|'self'
op|'.'
name|'tag'
op|':'
newline|'\n'
indent|'                '
name|'raise'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'queue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectConsumer
dedent|''
dedent|''
name|'class'
name|'DirectConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Queue/consumer class for \'direct\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'direct\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'msg_id\' is the msg_id to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'msg_id'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'msg_id'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicConsumer
dedent|''
dedent|''
name|'class'
name|'TopicConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer class for \'topic\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'topic\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'topic'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutConsumer
dedent|''
dedent|''
name|'class'
name|'FanoutConsumer'
op|'('
name|'ConsumerBase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Consumer class for \'fanout\'"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
name|'tag'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init a \'fanout\' queue.\n\n        \'channel\' is the amqp channel to use\n        \'topic\' is the topic to listen on\n        \'callback\' is the callback to call when messages are received\n        \'tag\' is a unique ID for the consumer on the channel\n\n        Other kombu options may be passed\n        """'
newline|'\n'
name|'unique'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'exchange_name'
op|'='
string|"'%s_fanout'"
op|'%'
name|'topic'
newline|'\n'
name|'queue_name'
op|'='
string|"'%s_fanout_%s'"
op|'%'
op|'('
name|'topic'
op|','
name|'unique'
op|')'
newline|'\n'
nl|'\n'
comment|'# Default options'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
nl|'\n'
name|'name'
op|'='
name|'exchange_name'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
name|'durable'
op|'='
name|'options'
op|'['
string|"'durable'"
op|']'
op|','
nl|'\n'
name|'auto_delete'
op|'='
name|'options'
op|'['
string|"'auto_delete'"
op|']'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutConsumer'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'channel'
op|','
nl|'\n'
name|'callback'
op|','
nl|'\n'
name|'tag'
op|','
nl|'\n'
name|'name'
op|'='
name|'queue_name'
op|','
nl|'\n'
name|'exchange'
op|'='
name|'exchange'
op|','
nl|'\n'
name|'routing_key'
op|'='
name|'topic'
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Publisher
dedent|''
dedent|''
name|'class'
name|'Publisher'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base Publisher class"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'exchange_name'
op|','
name|'routing_key'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Init the Publisher class with the exchange_name, routing_key,\n        and other options\n        """'
newline|'\n'
name|'self'
op|'.'
name|'exchange_name'
op|'='
name|'exchange_name'
newline|'\n'
name|'self'
op|'.'
name|'routing_key'
op|'='
name|'routing_key'
newline|'\n'
name|'self'
op|'.'
name|'kwargs'
op|'='
name|'kwargs'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
name|'channel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|','
name|'channel'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Re-establish the Producer after a rabbit reconnection"""'
newline|'\n'
name|'self'
op|'.'
name|'exchange'
op|'='
name|'kombu'
op|'.'
name|'entity'
op|'.'
name|'Exchange'
op|'('
name|'name'
op|'='
name|'self'
op|'.'
name|'exchange_name'
op|','
nl|'\n'
op|'**'
name|'self'
op|'.'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'='
name|'kombu'
op|'.'
name|'messaging'
op|'.'
name|'Producer'
op|'('
name|'exchange'
op|'='
name|'self'
op|'.'
name|'exchange'
op|','
nl|'\n'
name|'channel'
op|'='
name|'channel'
op|','
name|'routing_key'
op|'='
name|'self'
op|'.'
name|'routing_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|send
dedent|''
name|'def'
name|'send'
op|'('
name|'self'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message"""'
newline|'\n'
name|'self'
op|'.'
name|'producer'
op|'.'
name|'publish'
op|'('
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DirectPublisher
dedent|''
dedent|''
name|'class'
name|'DirectPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'direct\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'msg_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'direct\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
nl|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'DirectPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'msg_id'
op|','
nl|'\n'
name|'type'
op|'='
string|"'direct'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TopicPublisher
dedent|''
dedent|''
name|'class'
name|'TopicPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'topic\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'topic\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'FLAGS'
op|'.'
name|'rabbit_durable_queues'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TopicPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'control_exchange'
op|','
nl|'\n'
name|'topic'
op|','
nl|'\n'
name|'type'
op|'='
string|"'topic'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FanoutPublisher
dedent|''
dedent|''
name|'class'
name|'FanoutPublisher'
op|'('
name|'Publisher'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Publisher class for \'fanout\'"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'channel'
op|','
name|'topic'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""init a \'fanout\' publisher.\n\n        Kombu options may be passed as keyword args to override defaults\n        """'
newline|'\n'
name|'options'
op|'='
op|'{'
string|"'durable'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'auto_delete'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'exclusive'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'options'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'super'
op|'('
name|'FanoutPublisher'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'channel'
op|','
nl|'\n'
string|"'%s_fanout'"
op|'%'
name|'topic'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'type'
op|'='
string|"'fanout'"
op|','
nl|'\n'
op|'**'
name|'options'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Connection
dedent|''
dedent|''
name|'class'
name|'Connection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Connection object."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'consumers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_max_retries'
newline|'\n'
comment|'# Try forever?'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'max_retries'
op|'<='
number|'0'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'max_retries'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'interval_start'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_interval'
newline|'\n'
name|'self'
op|'.'
name|'interval_stepping'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_retry_backoff'
newline|'\n'
comment|'# max retry-interval = 30 seconds'
nl|'\n'
name|'self'
op|'.'
name|'interval_max'
op|'='
number|'30'
newline|'\n'
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'params'
op|'='
name|'dict'
op|'('
name|'hostname'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_host'
op|','
nl|'\n'
name|'port'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_port'
op|','
nl|'\n'
name|'userid'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_userid'
op|','
nl|'\n'
name|'password'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_password'
op|','
nl|'\n'
name|'virtual_host'
op|'='
name|'FLAGS'
op|'.'
name|'rabbit_virtual_host'
op|')'
newline|'\n'
name|'if'
name|'FLAGS'
op|'.'
name|'fake_rabbit'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'params'
op|'['
string|"'transport'"
op|']'
op|'='
string|"'memory'"
newline|'\n'
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'memory_transport'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|reconnect
dedent|''
name|'def'
name|'reconnect'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Handles reconnecting and re-establishing queues"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'kombu'
op|'.'
name|'connection'
op|'.'
name|'BrokerConnection'
op|'('
op|'**'
name|'self'
op|'.'
name|'params'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
comment|'# Kludge to speed up tests.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'transport'
op|'.'
name|'polling_interval'
op|'='
number|'0.0'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumer_num'
op|'='
name|'itertools'
op|'.'
name|'count'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'ensure_connection'
op|'('
name|'errback'
op|'='
name|'self'
op|'.'
name|'connect_error'
op|','
nl|'\n'
name|'max_retries'
op|'='
name|'self'
op|'.'
name|'max_retries'
op|','
nl|'\n'
name|'interval_start'
op|'='
name|'self'
op|'.'
name|'interval_start'
op|','
nl|'\n'
name|'interval_step'
op|'='
name|'self'
op|'.'
name|'interval_stepping'
op|','
nl|'\n'
name|'interval_max'
op|'='
name|'self'
op|'.'
name|'interval_max'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
comment|"# We should only get here if max_retries is set.  We'll go"
nl|'\n'
comment|'# ahead and exit in this case.'
nl|'\n'
indent|'            '
name|'err_str'
op|'='
name|'str'
op|'('
name|'e'
op|')'
newline|'\n'
name|'max_retries'
op|'='
name|'self'
op|'.'
name|'max_retries'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'Unable to connect to AMQP server '"
nl|'\n'
string|"'after %(max_retries)d tries: %(err_str)s'"
op|')'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'exit'
op|'('
number|'1'
op|')'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'Connected to AMQP server on %(hostname)s:%(port)d'"
op|'%'
nl|'\n'
name|'self'
op|'.'
name|'params'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
comment|"# work around 'memory' transport bug in 1.1.3"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'_new_queue'
op|'('
string|"'ae.undeliver'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'consumer'
name|'in'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'consumer'
op|'.'
name|'reconnect'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumers'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Re-established AMQP queues"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_channel
dedent|''
dedent|''
name|'def'
name|'get_channel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convenience call for bin/clear_rabbit_queues"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'channel'
newline|'\n'
nl|'\n'
DECL|member|connect_error
dedent|''
name|'def'
name|'connect_error'
op|'('
name|'self'
op|','
name|'exc'
op|','
name|'interval'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Callback when there are connection re-tries by kombu"""'
newline|'\n'
name|'info'
op|'='
name|'self'
op|'.'
name|'params'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'info'
op|'['
string|"'intv'"
op|']'
op|'='
name|'interval'
newline|'\n'
name|'info'
op|'['
string|"'e'"
op|']'
op|'='
name|'exc'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|"'AMQP server on %(hostname)s:%(port)d is'"
nl|'\n'
string|"' unreachable: %(e)s. Trying again in %(intv)d'"
nl|'\n'
string|"' seconds.'"
op|')'
op|'%'
name|'info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Close/release this connection"""'
newline|'\n'
name|'self'
op|'.'
name|'cancel_consumer_thread'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|reset
dedent|''
name|'def'
name|'reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset a connection so it can be used again"""'
newline|'\n'
name|'self'
op|'.'
name|'cancel_consumer_thread'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'channel'
op|'='
name|'self'
op|'.'
name|'connection'
op|'.'
name|'channel'
op|'('
op|')'
newline|'\n'
comment|"# work around 'memory' transport bug in 1.1.3"
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'memory_transport'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'channel'
op|'.'
name|'_new_queue'
op|'('
string|"'ae.undeliver'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumers'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|declare_consumer
dedent|''
name|'def'
name|'declare_consumer'
op|'('
name|'self'
op|','
name|'consumer_cls'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a Consumer using the class that was passed in and\n        add it to our list of consumers\n        """'
newline|'\n'
name|'consumer'
op|'='
name|'consumer_cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|','
name|'callback'
op|','
nl|'\n'
name|'self'
op|'.'
name|'consumer_num'
op|'.'
name|'next'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumers'
op|'.'
name|'append'
op|'('
name|'consumer'
op|')'
newline|'\n'
name|'return'
name|'consumer'
newline|'\n'
nl|'\n'
DECL|member|iterconsume
dedent|''
name|'def'
name|'iterconsume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return an iterator that will consume from all queues/consumers"""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'queues_head'
op|'='
name|'self'
op|'.'
name|'consumers'
op|'['
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'queues_tail'
op|'='
name|'self'
op|'.'
name|'consumers'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'for'
name|'queue'
name|'in'
name|'queues_head'
op|':'
newline|'\n'
indent|'                    '
name|'queue'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'queues_tail'
op|'.'
name|'consume'
op|'('
name|'nowait'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'iteration'
name|'in'
name|'itertools'
op|'.'
name|'count'
op|'('
number|'0'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'limit'
name|'and'
name|'iteration'
op|'>='
name|'limit'
op|':'
newline|'\n'
indent|'                        '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'yield'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'drain_events'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to consume message from queue: '"
nl|'\n'
string|"'%s'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|cancel_consumer_thread
dedent|''
dedent|''
dedent|''
name|'def'
name|'cancel_consumer_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Cancel a consumer thread"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'consumer_thread'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer_thread'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consumer_thread'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'greenlet'
op|'.'
name|'GreenletExit'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|publisher_send
dedent|''
dedent|''
name|'def'
name|'publisher_send'
op|'('
name|'self'
op|','
name|'cls'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send to a publisher based on the publisher class"""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'publisher'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'publisher'
op|'='
name|'cls'
op|'('
name|'self'
op|'.'
name|'channel'
op|','
name|'topic'
op|')'
newline|'\n'
name|'publisher'
op|'.'
name|'send'
op|'('
name|'msg'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|"'Failed to publish message %s'"
op|'%'
name|'str'
op|'('
name|'e'
op|')'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'reconnect'
op|'('
op|')'
newline|'\n'
name|'if'
name|'publisher'
op|':'
newline|'\n'
indent|'                        '
name|'publisher'
op|'.'
name|'reconnect'
op|'('
name|'self'
op|'.'
name|'channel'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'self'
op|'.'
name|'connection'
op|'.'
name|'connection_errors'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|declare_direct_consumer
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'declare_direct_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'direct\' queue.\n        In nova\'s use, this is generally a msg_id queue used for\n        responses for call/multicall\n        """'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'DirectConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_topic_consumer
dedent|''
name|'def'
name|'declare_topic_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'topic\' consumer."""'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'TopicConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|declare_fanout_consumer
dedent|''
name|'def'
name|'declare_fanout_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'callback'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a \'fanout\' consumer"""'
newline|'\n'
name|'self'
op|'.'
name|'declare_consumer'
op|'('
name|'FanoutConsumer'
op|','
name|'topic'
op|','
name|'callback'
op|')'
newline|'\n'
nl|'\n'
DECL|member|direct_send
dedent|''
name|'def'
name|'direct_send'
op|'('
name|'self'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'direct\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'DirectPublisher'
op|','
name|'msg_id'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|topic_send
dedent|''
name|'def'
name|'topic_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'topic\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'TopicPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fanout_send
dedent|''
name|'def'
name|'fanout_send'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a \'fanout\' message"""'
newline|'\n'
name|'self'
op|'.'
name|'publisher_send'
op|'('
name|'FanoutPublisher'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consume
dedent|''
name|'def'
name|'consume'
op|'('
name|'self'
op|','
name|'limit'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consume from all queues/consumers"""'
newline|'\n'
name|'it'
op|'='
name|'self'
op|'.'
name|'iterconsume'
op|'('
name|'limit'
op|'='
name|'limit'
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'it'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'StopIteration'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
nl|'\n'
DECL|member|consume_in_thread
dedent|''
dedent|''
dedent|''
name|'def'
name|'consume_in_thread'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consumer from all queues/consumers in a greenthread"""'
newline|'\n'
DECL|function|_consumer_thread
name|'def'
name|'_consumer_thread'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'consume'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'greenlet'
op|'.'
name|'GreenletExit'
op|':'
newline|'\n'
indent|'                '
name|'return'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'self'
op|'.'
name|'consumer_thread'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'consumer_thread'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'_consumer_thread'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'consumer_thread'
newline|'\n'
nl|'\n'
DECL|member|create_consumer
dedent|''
name|'def'
name|'create_consumer'
op|'('
name|'self'
op|','
name|'topic'
op|','
name|'proxy'
op|','
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a consumer that calls a method in a proxy object"""'
newline|'\n'
name|'if'
name|'fanout'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'declare_fanout_consumer'
op|'('
name|'topic'
op|','
name|'ProxyCallback'
op|'('
name|'proxy'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'declare_topic_consumer'
op|'('
name|'topic'
op|','
name|'ProxyCallback'
op|'('
name|'proxy'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Pool
dedent|''
dedent|''
dedent|''
name|'class'
name|'Pool'
op|'('
name|'pools'
op|'.'
name|'Pool'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class that implements a Pool of Connections."""'
newline|'\n'
nl|'\n'
comment|'# TODO(comstud): Timeout connections not used in a while'
nl|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'Pool creating new connection'"
op|')'
newline|'\n'
name|'return'
name|'Connection'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Create a ConnectionPool to use for RPC calls.  We'll order the"
nl|'\n'
comment|'# pool as a stack (LIFO), so that we can potentially loop through and'
nl|'\n'
comment|'# timeout old unused connections at some point'
nl|'\n'
DECL|variable|ConnectionPool
dedent|''
dedent|''
name|'ConnectionPool'
op|'='
name|'Pool'
op|'('
nl|'\n'
name|'max_size'
op|'='
name|'FLAGS'
op|'.'
name|'rpc_conn_pool_size'
op|','
nl|'\n'
name|'order_as_stack'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConnectionContext
name|'class'
name|'ConnectionContext'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""The class that is actually returned to the caller of\n    create_connection().  This is a essentially a wrapper around\n    Connection that supports \'with\' and can return a new Connection or\n    one from a pool.  It will also catch when an instance of this class\n    is to be deleted so that we can return Connections to the pool on\n    exceptions and so forth without making the caller be responsible for\n    catching all exceptions and making sure to return a connection to\n    the pool.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'pooled'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a new connection, or get one from the pool"""'
newline|'\n'
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'pooled'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'='
name|'ConnectionPool'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'connection'
op|'='
name|'Connection'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pooled'
op|'='
name|'pooled'
newline|'\n'
nl|'\n'
DECL|member|__enter__
dedent|''
name|'def'
name|'__enter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""with ConnectionContext() should return self"""'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|_done
dedent|''
name|'def'
name|'_done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If the connection came from a pool, clean it up and put it back.\n        If it did not come from a pool, close it.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'pooled'
op|':'
newline|'\n'
comment|"# Reset the connection so it's ready for the next caller"
nl|'\n'
comment|'# to grab from the pool'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'ConnectionPool'
op|'.'
name|'put'
op|'('
name|'self'
op|'.'
name|'connection'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# There's apparently a bug in kombu 'memory' transport"
nl|'\n'
comment|'# which causes an assert failure.'
nl|'\n'
comment|'# But, we probably want to ignore all exceptions when'
nl|'\n'
comment|'# trying to close a connection, anyway...'
nl|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'connection'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__exit__
dedent|''
dedent|''
name|'def'
name|'__exit__'
op|'('
name|'self'
op|','
name|'t'
op|','
name|'v'
op|','
name|'tb'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""end of \'with\' statement.  We\'re done here."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__del__
dedent|''
name|'def'
name|'__del__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Caller is done with this connection.  Make sure we cleaned up."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Caller is done with this connection."""'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getattr__
dedent|''
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Proxy all other calls to the Connection instance"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'connection'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'connection'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidRPCConnectionReuse'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyCallback
dedent|''
dedent|''
dedent|''
name|'class'
name|'ProxyCallback'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Calls methods on a proxy object based on method and args."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'proxy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'proxy'
op|'='
name|'proxy'
newline|'\n'
name|'self'
op|'.'
name|'pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
name|'FLAGS'
op|'.'
name|'rpc_thread_pool_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'message_data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Consumer callback to call a method on a proxy object.\n\n        Parses the message for validity and fires off a thread to call the\n        proxy object method.\n\n        Message data should be a dictionary with two keys:\n            method: string representing the method to call\n            args: dictionary of arg: value\n\n        Example: {\'method\': \'echo\', \'args\': {\'value\': 42}}\n\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'received %s'"
op|')'
op|'%'
name|'message_data'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'_unpack_context'
op|'('
name|'message_data'
op|')'
newline|'\n'
name|'method'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'method'"
op|')'
newline|'\n'
name|'args'
op|'='
name|'message_data'
op|'.'
name|'get'
op|'('
string|"'args'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'method'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'_'
op|'('
string|"'no method for message: %s'"
op|')'
op|'%'
name|'message_data'
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'_'
op|'('
string|"'No method for message: %s'"
op|')'
op|'%'
name|'message_data'
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'self'
op|'.'
name|'_process_data'
op|','
name|'ctxt'
op|','
name|'method'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'exception'
op|'.'
name|'wrap_exception'
op|'('
op|')'
newline|'\n'
DECL|member|_process_data
name|'def'
name|'_process_data'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'method'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Thread that magically looks for a method on the proxy\n        object and calls it.\n        """'
newline|'\n'
nl|'\n'
name|'node_func'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'proxy'
op|','
name|'str'
op|'('
name|'method'
op|')'
op|')'
newline|'\n'
name|'node_args'
op|'='
name|'dict'
op|'('
op|'('
name|'str'
op|'('
name|'k'
op|')'
op|','
name|'v'
op|')'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'args'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# NOTE(vish): magic is fun!'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'rval'
op|'='
name|'node_func'
op|'('
name|'context'
op|'='
name|'ctxt'
op|','
op|'**'
name|'node_args'
op|')'
newline|'\n'
comment|'# Check if the result was a generator'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'rval'
op|','
name|'types'
op|'.'
name|'GeneratorType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'x'
name|'in'
name|'rval'
op|':'
newline|'\n'
indent|'                    '
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'x'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'rval'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# This final None tells multicall that it is done.'
nl|'\n'
dedent|''
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'exception'
op|'('
string|"'Exception during message handling'"
op|')'
newline|'\n'
name|'ctxt'
op|'.'
name|'reply'
op|'('
name|'None'
op|','
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_unpack_context
dedent|''
dedent|''
name|'def'
name|'_unpack_context'
op|'('
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unpack context from msg."""'
newline|'\n'
name|'context_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'list'
op|'('
name|'msg'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(vish): Some versions of python don't like unicode keys"
nl|'\n'
comment|'#             in kwargs.'
nl|'\n'
indent|'        '
name|'key'
op|'='
name|'str'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'_context_'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'='
name|'msg'
op|'.'
name|'pop'
op|'('
name|'key'
op|')'
newline|'\n'
name|'context_dict'
op|'['
name|'key'
op|'['
number|'9'
op|':'
op|']'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'context_dict'
op|'['
string|"'msg_id'"
op|']'
op|'='
name|'msg'
op|'.'
name|'pop'
op|'('
string|"'_msg_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'unpacked context: %s'"
op|')'
op|','
name|'context_dict'
op|')'
newline|'\n'
name|'return'
name|'RpcContext'
op|'.'
name|'from_dict'
op|'('
name|'context_dict'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_pack_context
dedent|''
name|'def'
name|'_pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Pack context into msg.\n\n    Values for message keys need to be less than 255 chars, so we pull\n    context out into a bunch of separate keys. If we want to support\n    more arguments in rabbit messages, we may want to do the same\n    for args at some point.\n\n    """'
newline|'\n'
name|'context_d'
op|'='
name|'dict'
op|'('
op|'['
op|'('
string|"'_context_%s'"
op|'%'
name|'key'
op|','
name|'value'
op|')'
nl|'\n'
name|'for'
op|'('
name|'key'
op|','
name|'value'
op|')'
name|'in'
name|'context'
op|'.'
name|'to_dict'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'msg'
op|'.'
name|'update'
op|'('
name|'context_d'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcContext
dedent|''
name|'class'
name|'RpcContext'
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Context that supports replying to a rpc.call"""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'msg_id'
op|'='
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'msg_id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg_id'
op|'='
name|'msg_id'
newline|'\n'
name|'super'
op|'('
name|'RpcContext'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|reply
dedent|''
name|'def'
name|'reply'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'msg_id'
op|':'
newline|'\n'
indent|'            '
name|'msg_reply'
op|'('
name|'self'
op|'.'
name|'msg_id'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MulticallWaiter
dedent|''
dedent|''
dedent|''
name|'class'
name|'MulticallWaiter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'connection'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_connection'
op|'='
name|'connection'
newline|'\n'
name|'self'
op|'.'
name|'_iterator'
op|'='
name|'connection'
op|'.'
name|'iterconsume'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_result'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_done'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|done
dedent|''
name|'def'
name|'done'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_done'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__call__
dedent|''
name|'def'
name|'__call__'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The consume() callback will call this.  Store the result."""'
newline|'\n'
name|'if'
name|'data'
op|'['
string|"'failure'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_result'
op|'='
name|'RemoteError'
op|'('
op|'*'
name|'data'
op|'['
string|"'failure'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_result'
op|'='
name|'data'
op|'['
string|"'result'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__iter__
dedent|''
dedent|''
name|'def'
name|'__iter__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a result until we get a \'None\' response from consumer"""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_done'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_iterator'
op|'.'
name|'next'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_result'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'result'
newline|'\n'
dedent|''
name|'if'
name|'result'
op|'=='
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'done'
op|'('
op|')'
newline|'\n'
name|'raise'
name|'StopIteration'
newline|'\n'
dedent|''
name|'yield'
name|'result'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|create_connection
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_connection'
op|'('
name|'new'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create a connection"""'
newline|'\n'
name|'return'
name|'ConnectionContext'
op|'('
name|'pooled'
op|'='
name|'not'
name|'new'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|multicall
dedent|''
name|'def'
name|'multicall'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Make a call that returns multiple times."""'
newline|'\n'
comment|"# Can't use 'with' for multicall, as it returns an iterator"
nl|'\n'
comment|"# that will continue to use the connection.  When it's done,"
nl|'\n'
comment|'# connection.close() will get called which will put it back into'
nl|'\n'
comment|'# the pool'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making asynchronous call on %s ...'"
op|')'
op|','
name|'topic'
op|')'
newline|'\n'
name|'msg_id'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
name|'msg'
op|'.'
name|'update'
op|'('
op|'{'
string|"'_msg_id'"
op|':'
name|'msg_id'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'MSG_ID is %s'"
op|')'
op|'%'
op|'('
name|'msg_id'
op|')'
op|')'
newline|'\n'
name|'_pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'ConnectionContext'
op|'('
op|')'
newline|'\n'
name|'wait_msg'
op|'='
name|'MulticallWaiter'
op|'('
name|'conn'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'declare_direct_consumer'
op|'('
name|'msg_id'
op|','
name|'wait_msg'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'topic_send'
op|'('
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
name|'return'
name|'wait_msg'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|call
dedent|''
name|'def'
name|'call'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic and wait for a response."""'
newline|'\n'
name|'rv'
op|'='
name|'multicall'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
comment|'# NOTE(vish): return the last result from the multicall'
nl|'\n'
name|'rv'
op|'='
name|'list'
op|'('
name|'rv'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'rv'
op|':'
newline|'\n'
indent|'        '
name|'return'
newline|'\n'
dedent|''
name|'return'
name|'rv'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|cast
dedent|''
name|'def'
name|'cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a topic without waiting for a response."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making asynchronous cast on %s...'"
op|')'
op|','
name|'topic'
op|')'
newline|'\n'
name|'_pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'topic_send'
op|'('
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fanout_cast
dedent|''
dedent|''
name|'def'
name|'fanout_cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a message on a fanout exchange without waiting for a response."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|"'Making asynchronous fanout cast...'"
op|')'
op|')'
newline|'\n'
name|'_pack_context'
op|'('
name|'msg'
op|','
name|'context'
op|')'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'.'
name|'fanout_send'
op|'('
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|msg_reply
dedent|''
dedent|''
name|'def'
name|'msg_reply'
op|'('
name|'msg_id'
op|','
name|'reply'
op|'='
name|'None'
op|','
name|'failure'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Sends a reply or an error on the channel signified by msg_id.\n\n    Failure should be a sys.exc_info() tuple.\n\n    """'
newline|'\n'
name|'with'
name|'ConnectionContext'
op|'('
op|')'
name|'as'
name|'conn'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'failure'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'str'
op|'('
name|'failure'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'tb'
op|'='
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'failure'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'_'
op|'('
string|'"Returning exception %s to caller"'
op|')'
op|','
name|'message'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'error'
op|'('
name|'tb'
op|')'
newline|'\n'
name|'failure'
op|'='
op|'('
name|'failure'
op|'['
number|'0'
op|']'
op|'.'
name|'__name__'
op|','
name|'str'
op|'('
name|'failure'
op|'['
number|'1'
op|']'
op|')'
op|','
name|'tb'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
op|'{'
string|"'result'"
op|':'
name|'reply'
op|','
string|"'failure'"
op|':'
name|'failure'
op|'}'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'msg'
op|'='
op|'{'
string|"'result'"
op|':'
name|'dict'
op|'('
op|'('
name|'k'
op|','
name|'repr'
op|'('
name|'v'
op|')'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'reply'
op|'.'
name|'__dict__'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'failure'"
op|':'
name|'failure'
op|'}'
newline|'\n'
dedent|''
name|'conn'
op|'.'
name|'direct_send'
op|'('
name|'msg_id'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

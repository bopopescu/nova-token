begin_unit
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nCell messaging module.\n\nThis module defines the different message types that are passed between\ncells and the methods that they can call when the target cell has been\nreached.\n\nThe interface into this module is the MessageRunner class.\n"""'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'queue'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'state'
name|'as'
name|'cells_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'utils'
name|'as'
name|'cells_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'consoleauth'
name|'import'
name|'rpcapi'
name|'as'
name|'consoleauth_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'excutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|cell_messaging_opts
name|'cell_messaging_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'max_hop_count'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'10'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Maximum number of hops for cells routing.'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'scheduler'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'nova.cells.scheduler.CellsScheduler'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'Cells scheduler to use'"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'name'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'call_timeout'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'cell_messaging_opts'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
comment|"# Separator used between cell names for the 'full cell name' and routing"
nl|'\n'
comment|'# path.'
nl|'\n'
DECL|variable|_PATH_CELL_SEP
name|'_PATH_CELL_SEP'
op|'='
name|'cells_utils'
op|'.'
name|'_PATH_CELL_SEP'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_reverse_path
name|'def'
name|'_reverse_path'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Reverse a path.  Used for sending responses upstream."""'
newline|'\n'
name|'path_parts'
op|'='
name|'path'
op|'.'
name|'split'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'path_parts'
op|'.'
name|'reverse'
op|'('
op|')'
newline|'\n'
name|'return'
name|'_PATH_CELL_SEP'
op|'.'
name|'join'
op|'('
name|'path_parts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_response_cell_name_from_path
dedent|''
name|'def'
name|'_response_cell_name_from_path'
op|'('
name|'routing_path'
op|','
name|'neighbor_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Reverse the routing_path.  If we only want to send to our parent,\n    set neighbor_only to True.\n    """'
newline|'\n'
name|'path'
op|'='
name|'_reverse_path'
op|'('
name|'routing_path'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'neighbor_only'
name|'or'
name|'len'
op|'('
name|'path'
op|')'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'path'
newline|'\n'
dedent|''
name|'return'
name|'_PATH_CELL_SEP'
op|'.'
name|'join'
op|'('
name|'path'
op|'.'
name|'split'
op|'('
name|'_PATH_CELL_SEP'
op|')'
op|'['
op|':'
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Message classes.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseMessage
dedent|''
name|'class'
name|'_BaseMessage'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base message class.  It defines data that is passed with every\n    single message through every cell.\n\n    Messages are JSON-ified before sending and turned back into a\n    class instance when being received.\n\n    Every message has a unique ID.  This is used to route responses\n    back to callers.  In the future, this might be used to detect\n    receiving the same message more than once.\n\n    routing_path is updated on every hop through a cell.  The current\n    cell name is appended to it (cells are separated by\n    _PATH_CELL_SEP (\'!\')).  This is used to tell if we\'ve reached the\n    target cell and also to determine the source of a message for\n    responses by reversing it.\n\n    hop_count is incremented and compared against max_hop_count.  The\n    only current usefulness of this is to break out of a routing loop\n    if someone has a broken config.\n\n    fanout means to send to all nova-cells services running in a cell.\n    This is useful for capacity and capability broadcasting as well\n    as making sure responses get back to the nova-cells service that\n    is waiting.\n    """'
newline|'\n'
nl|'\n'
comment|'# Override message_type in a subclass'
nl|'\n'
DECL|variable|message_type
name|'message_type'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|base_attrs_to_json
name|'base_attrs_to_json'
op|'='
op|'['
string|"'message_type'"
op|','
nl|'\n'
string|"'ctxt'"
op|','
nl|'\n'
string|"'method_name'"
op|','
nl|'\n'
string|"'method_kwargs'"
op|','
nl|'\n'
string|"'direction'"
op|','
nl|'\n'
string|"'need_response'"
op|','
nl|'\n'
string|"'fanout'"
op|','
nl|'\n'
string|"'uuid'"
op|','
nl|'\n'
string|"'routing_path'"
op|','
nl|'\n'
string|"'hop_count'"
op|','
nl|'\n'
string|"'max_hop_count'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg_runner'
op|','
name|'ctxt'
op|','
name|'method_name'
op|','
name|'method_kwargs'
op|','
nl|'\n'
name|'direction'
op|','
name|'need_response'
op|'='
name|'False'
op|','
name|'fanout'
op|'='
name|'False'
op|','
name|'uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'routing_path'
op|'='
name|'None'
op|','
name|'hop_count'
op|'='
number|'0'
op|','
name|'max_hop_count'
op|'='
name|'None'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'ctxt'
op|'='
name|'ctxt'
newline|'\n'
name|'self'
op|'.'
name|'resp_queue'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'='
name|'msg_runner'
newline|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'='
name|'msg_runner'
op|'.'
name|'state_manager'
newline|'\n'
comment|'# Copy these.'
nl|'\n'
name|'self'
op|'.'
name|'base_attrs_to_json'
op|'='
name|'self'
op|'.'
name|'base_attrs_to_json'
op|'['
op|':'
op|']'
newline|'\n'
comment|'# Normally this would just be CONF.cells.name, but going through'
nl|'\n'
comment|'# the msg_runner allows us to stub it more easily.'
nl|'\n'
name|'self'
op|'.'
name|'our_path_part'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'our_name'
newline|'\n'
name|'self'
op|'.'
name|'uuid'
op|'='
name|'uuid'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'uuid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'method_name'
op|'='
name|'method_name'
newline|'\n'
name|'self'
op|'.'
name|'method_kwargs'
op|'='
name|'method_kwargs'
newline|'\n'
name|'self'
op|'.'
name|'direction'
op|'='
name|'direction'
newline|'\n'
name|'self'
op|'.'
name|'need_response'
op|'='
name|'need_response'
newline|'\n'
name|'self'
op|'.'
name|'fanout'
op|'='
name|'fanout'
newline|'\n'
name|'self'
op|'.'
name|'routing_path'
op|'='
name|'routing_path'
newline|'\n'
name|'self'
op|'.'
name|'hop_count'
op|'='
name|'hop_count'
newline|'\n'
name|'if'
name|'max_hop_count'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'max_hop_count'
op|'='
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'max_hop_count'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'max_hop_count'
op|'='
name|'max_hop_count'
newline|'\n'
name|'self'
op|'.'
name|'is_broadcast'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_append_hop'
op|'('
op|')'
newline|'\n'
comment|'# Each sub-class should set this when the message is inited'
nl|'\n'
name|'self'
op|'.'
name|'next_hops'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'resp_queue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_dict'
op|'='
name|'self'
op|'.'
name|'_to_dict'
op|'('
op|')'
newline|'\n'
name|'_dict'
op|'.'
name|'pop'
op|'('
string|"'method_kwargs'"
op|')'
newline|'\n'
name|'return'
string|'"<%s: %s>"'
op|'%'
op|'('
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|','
name|'_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_append_hop
dedent|''
name|'def'
name|'_append_hop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Add our hop to the routing_path."""'
newline|'\n'
name|'routing_path'
op|'='
op|'('
name|'self'
op|'.'
name|'routing_path'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'routing_path'
op|'+'
name|'_PATH_CELL_SEP'
name|'or'
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'routing_path'
op|'='
name|'routing_path'
op|'+'
name|'self'
op|'.'
name|'our_path_part'
newline|'\n'
name|'self'
op|'.'
name|'hop_count'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|_at_max_hop_count
dedent|''
name|'def'
name|'_at_max_hop_count'
op|'('
name|'self'
op|','
name|'do_raise'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if we\'re at the max hop count.  If we are and do_raise is\n        True, raise CellMaxHopCountReached.  If we are at the max and\n        do_raise is False... return True, else False.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hop_count'
op|'>='
name|'self'
op|'.'
name|'max_hop_count'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'do_raise'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'CellMaxHopCountReached'
op|'('
nl|'\n'
name|'hop_count'
op|'='
name|'self'
op|'.'
name|'hop_count'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|_process_locally
dedent|''
name|'def'
name|'_process_locally'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Its been determined that we should process this message in this\n        cell.  Go through the MessageRunner to call the appropriate\n        method for this message.  Catch the response and/or exception and\n        encode it within a Response instance.  Return it so the caller\n        can potentially return it to another cell... or return it to\n        a caller waiting in this cell.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'resp_value'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'_process_message_locally'
op|'('
name|'self'
op|')'
newline|'\n'
name|'failure'
op|'='
name|'False'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'resp_value'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'failure'
op|'='
name|'True'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error processing message locally: %(exc)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'Response'
op|'('
name|'self'
op|'.'
name|'routing_path'
op|','
name|'resp_value'
op|','
name|'failure'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_response_queue
dedent|''
name|'def'
name|'_setup_response_queue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shortcut to creating a response queue in the MessageRunner."""'
newline|'\n'
name|'self'
op|'.'
name|'resp_queue'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'_setup_response_queue'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_response_queue
dedent|''
name|'def'
name|'_cleanup_response_queue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Shortcut to deleting a response queue in the MessageRunner."""'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'resp_queue'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'_cleanup_response_queue'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resp_queue'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_json_responses
dedent|''
dedent|''
name|'def'
name|'_wait_for_json_responses'
op|'('
name|'self'
op|','
name|'num_responses'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Wait for response(s) to be put into the eventlet queue.  Since\n        each queue entry actually contains a list of JSON-ified responses,\n        combine them all into a single list to return.\n\n        Destroy the eventlet queue when done.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'resp_queue'
op|':'
newline|'\n'
comment|'# Source is not actually expecting a response'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'responses'
op|'='
op|'['
op|']'
newline|'\n'
name|'wait_time'
op|'='
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'call_timeout'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'num_responses'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'json_responses'
op|'='
name|'self'
op|'.'
name|'resp_queue'
op|'.'
name|'get'
op|'('
name|'timeout'
op|'='
name|'wait_time'
op|')'
newline|'\n'
name|'responses'
op|'.'
name|'extend'
op|'('
name|'json_responses'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'queue'
op|'.'
name|'Empty'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'CellTimeout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_cleanup_response_queue'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'responses'
newline|'\n'
nl|'\n'
DECL|member|_send_json_responses
dedent|''
name|'def'
name|'_send_json_responses'
op|'('
name|'self'
op|','
name|'json_responses'
op|','
name|'neighbor_only'
op|'='
name|'False'
op|','
nl|'\n'
name|'fanout'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send list of responses to this message.  Responses passed here\n        are JSON-ified.  Targeted messages have a single response while\n        Broadcast messages may have multiple responses.\n\n        If this cell was the source of the message, these responses will\n        be returned from self.process().\n\n        Otherwise, we will route the response to the source of the\n        request.  If \'neighbor_only\' is True, the response will be sent\n        to the neighbor cell, not the original requester.  Broadcast\n        messages get aggregated at each hop, so neighbor_only will be\n        True for those messages.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'need_response'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'source_is_us'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'responses'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'json_response'
name|'in'
name|'json_responses'
op|':'
newline|'\n'
indent|'                '
name|'responses'
op|'.'
name|'append'
op|'('
name|'Response'
op|'.'
name|'from_json'
op|'('
name|'json_response'
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'responses'
newline|'\n'
dedent|''
name|'direction'
op|'='
name|'self'
op|'.'
name|'direction'
op|'=='
string|"'up'"
name|'and'
string|"'down'"
name|'or'
string|"'up'"
newline|'\n'
name|'response_kwargs'
op|'='
op|'{'
string|"'orig_message'"
op|':'
name|'self'
op|'.'
name|'to_json'
op|'('
op|')'
op|','
nl|'\n'
string|"'responses'"
op|':'
name|'json_responses'
op|'}'
newline|'\n'
name|'target_cell'
op|'='
name|'_response_cell_name_from_path'
op|'('
name|'self'
op|'.'
name|'routing_path'
op|','
nl|'\n'
name|'neighbor_only'
op|'='
name|'neighbor_only'
op|')'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'_create_response_message'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'direction'
op|','
name|'target_cell'
op|','
name|'self'
op|'.'
name|'uuid'
op|','
name|'response_kwargs'
op|','
nl|'\n'
name|'fanout'
op|'='
name|'fanout'
op|')'
newline|'\n'
name|'response'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_send_response
dedent|''
name|'def'
name|'_send_response'
op|'('
name|'self'
op|','
name|'response'
op|','
name|'neighbor_only'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a response to this message.  If the source of the\n        request was ourselves, just return the response.  It\'ll be\n        passed back to the caller of self.process().  See DocString for\n        _send_json_responses() as it handles most of the real work for\n        this method.\n\n        \'response\' is an instance of Response class.\n        """'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'need_response'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'source_is_us'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'response'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_send_json_responses'
op|'('
op|'['
name|'response'
op|'.'
name|'to_json'
op|'('
op|')'
op|']'
op|','
nl|'\n'
name|'neighbor_only'
op|'='
name|'neighbor_only'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_send_response_from_exception
dedent|''
name|'def'
name|'_send_response_from_exception'
op|'('
name|'self'
op|','
name|'exc_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Take an exception as returned from sys.exc_info(), encode\n        it in a Response, and send it.\n        """'
newline|'\n'
name|'response'
op|'='
name|'Response'
op|'('
name|'self'
op|'.'
name|'routing_path'
op|','
name|'exc_info'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_to_dict
dedent|''
name|'def'
name|'_to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert a message to a dictionary.  Only used internally."""'
newline|'\n'
name|'_dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'base_attrs_to_json'
op|':'
newline|'\n'
indent|'            '
name|'_dict'
op|'['
name|'key'
op|']'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'_dict'
newline|'\n'
nl|'\n'
DECL|member|to_json
dedent|''
name|'def'
name|'to_json'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convert a message into JSON for sending to a sibling cell."""'
newline|'\n'
name|'_dict'
op|'='
name|'self'
op|'.'
name|'_to_dict'
op|'('
op|')'
newline|'\n'
comment|'# Convert context to dict.'
nl|'\n'
name|'_dict'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'_dict'
op|'['
string|"'ctxt'"
op|']'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|source_is_us
dedent|''
name|'def'
name|'source_is_us'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Did this cell create this message?"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'routing_path'
op|'=='
name|'self'
op|'.'
name|'our_path_part'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a message.  Deal with it locally and/or forward it to a\n        sibling cell.\n\n        Override in a subclass.\n        """'
newline|'\n'
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TargetedMessage
dedent|''
dedent|''
name|'class'
name|'_TargetedMessage'
op|'('
name|'_BaseMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A targeted message is a message that is destined for a specific\n    single cell.\n\n    \'target_cell\' can be a full cell name like \'api!child-cell\' or it can\n    be an instance of the CellState class if the target is a neighbor cell.\n    """'
newline|'\n'
DECL|variable|message_type
name|'message_type'
op|'='
string|"'targeted'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg_runner'
op|','
name|'ctxt'
op|','
name|'method_name'
op|','
name|'method_kwargs'
op|','
nl|'\n'
name|'direction'
op|','
name|'target_cell'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_TargetedMessage'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg_runner'
op|','
name|'ctxt'
op|','
nl|'\n'
name|'method_name'
op|','
name|'method_kwargs'
op|','
name|'direction'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'target_cell'
op|','
name|'cells_state'
op|'.'
name|'CellState'
op|')'
op|':'
newline|'\n'
comment|"# Neighbor cell or ourselves.  Convert it to a 'full path'."
nl|'\n'
indent|'            '
name|'if'
name|'target_cell'
op|'.'
name|'is_me'
op|':'
newline|'\n'
indent|'                '
name|'target_cell'
op|'='
name|'self'
op|'.'
name|'our_path_part'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'target_cell'
op|'='
string|"'%s%s%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'our_path_part'
op|','
nl|'\n'
name|'_PATH_CELL_SEP'
op|','
nl|'\n'
name|'target_cell'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'target_cell'
op|'='
name|'target_cell'
newline|'\n'
name|'self'
op|'.'
name|'base_attrs_to_json'
op|'.'
name|'append'
op|'('
string|"'target_cell'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_next_hop
dedent|''
name|'def'
name|'_get_next_hop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the cell name for the next hop.  If the next hop is\n        the current cell, return None.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'target_cell'
op|'=='
name|'self'
op|'.'
name|'routing_path'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'my_cell_state'
newline|'\n'
dedent|''
name|'target_cell'
op|'='
name|'self'
op|'.'
name|'target_cell'
newline|'\n'
name|'routing_path'
op|'='
name|'self'
op|'.'
name|'routing_path'
newline|'\n'
name|'current_hops'
op|'='
name|'routing_path'
op|'.'
name|'count'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'next_hop_num'
op|'='
name|'current_hops'
op|'+'
number|'1'
newline|'\n'
name|'dest_hops'
op|'='
name|'target_cell'
op|'.'
name|'count'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'if'
name|'dest_hops'
op|'<'
name|'current_hops'
op|':'
newline|'\n'
indent|'            '
name|'reason_args'
op|'='
op|'{'
string|"'target_cell'"
op|':'
name|'target_cell'
op|','
nl|'\n'
string|"'routing_path'"
op|':'
name|'routing_path'
op|'}'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"destination is %(target_cell)s but routing_path "'
nl|'\n'
string|'"is %(routing_path)s"'
op|')'
op|'%'
name|'reason_args'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'CellRoutingInconsistency'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'dest_name_parts'
op|'='
name|'target_cell'
op|'.'
name|'split'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'if'
op|'('
name|'_PATH_CELL_SEP'
op|'.'
name|'join'
op|'('
name|'dest_name_parts'
op|'['
op|':'
name|'next_hop_num'
op|']'
op|')'
op|'!='
nl|'\n'
name|'routing_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reason_args'
op|'='
op|'{'
string|"'target_cell'"
op|':'
name|'target_cell'
op|','
nl|'\n'
string|"'routing_path'"
op|':'
name|'routing_path'
op|'}'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"destination is %(target_cell)s but routing_path "'
nl|'\n'
string|'"is %(routing_path)s"'
op|')'
op|'%'
name|'reason_args'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'CellRoutingInconsistency'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'next_hop_name'
op|'='
name|'dest_name_parts'
op|'['
name|'next_hop_num'
op|']'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'direction'
op|'=='
string|"'up'"
op|':'
newline|'\n'
indent|'            '
name|'next_hop'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_parent_cell'
op|'('
name|'next_hop_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'next_hop'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_child_cell'
op|'('
name|'next_hop_name'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'not'
name|'next_hop'
op|':'
newline|'\n'
indent|'            '
name|'cell_type'
op|'='
string|"'parent'"
name|'if'
name|'self'
op|'.'
name|'direction'
op|'=='
string|"'up'"
name|'else'
string|"'child'"
newline|'\n'
name|'reason_args'
op|'='
op|'{'
string|"'cell_type'"
op|':'
name|'cell_type'
op|','
nl|'\n'
string|"'target_cell'"
op|':'
name|'target_cell'
op|'}'
newline|'\n'
name|'reason'
op|'='
name|'_'
op|'('
string|'"Unknown %(cell_type)s when routing to "'
nl|'\n'
string|'"%(target_cell)s"'
op|')'
op|'%'
name|'reason_args'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'CellRoutingInconsistency'
op|'('
name|'reason'
op|'='
name|'reason'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'next_hop'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a targeted message.  This is called for all cells\n        that touch this message.  If the local cell is the one that\n        created this message, we reply directly with a Response instance.\n        If the local cell is not the target, an eventlet queue is created\n        and we wait for the response to show up via another thread\n        receiving the Response back.\n\n        Responses to targeted messages are routed directly back to the\n        source.  No eventlet queues are created in intermediate hops.\n\n        All exceptions for processing the message across the whole\n        routing path are caught and encoded within the Response and\n        returned to the caller.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'next_hop'
op|'='
name|'self'
op|'.'
name|'_get_next_hop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error locating next hop for message: %(exc)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response_from_exception'
op|'('
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'next_hop'
op|'.'
name|'is_me'
op|':'
newline|'\n'
comment|'# Final destination.'
nl|'\n'
indent|'            '
name|'response'
op|'='
name|'self'
op|'.'
name|'_process_locally'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
comment|'# Need to forward via neighbor cell.'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'need_response'
name|'and'
name|'self'
op|'.'
name|'source_is_us'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# A response is needed and the source of the message is'
nl|'\n'
comment|'# this cell.  Create the eventlet queue.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setup_response_queue'
op|'('
op|')'
newline|'\n'
name|'wait_for_response'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'wait_for_response'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
comment|'# This is inside the try block, so we can encode the'
nl|'\n'
comment|'# exception and return it to the caller.'
nl|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'hop_count'
op|'>='
name|'self'
op|'.'
name|'max_hop_count'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'CellMaxHopCountReached'
op|'('
nl|'\n'
name|'hop_count'
op|'='
name|'self'
op|'.'
name|'hop_count'
op|')'
newline|'\n'
dedent|''
name|'next_hop'
op|'.'
name|'send_message'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'err_str'
op|'='
name|'_'
op|'('
string|'"Failed to send message to cell: %(next_hop)s: "'
nl|'\n'
string|'"%(exc)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'err_str'
op|','
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|','
string|"'next_hop'"
op|':'
name|'next_hop'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_response_queue'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response_from_exception'
op|'('
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'wait_for_response'
op|':'
newline|'\n'
comment|'# Targeted messages only have 1 response.'
nl|'\n'
indent|'            '
name|'remote_response'
op|'='
name|'self'
op|'.'
name|'_wait_for_json_responses'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'Response'
op|'.'
name|'from_json'
op|'('
name|'remote_response'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BroadcastMessage
dedent|''
dedent|''
dedent|''
name|'class'
name|'_BroadcastMessage'
op|'('
name|'_BaseMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A broadcast message.  This means to call a method in every single\n    cell going in a certain direction.\n    """'
newline|'\n'
DECL|variable|message_type
name|'message_type'
op|'='
string|"'broadcast'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg_runner'
op|','
name|'ctxt'
op|','
name|'method_name'
op|','
name|'method_kwargs'
op|','
nl|'\n'
name|'direction'
op|','
name|'run_locally'
op|'='
name|'True'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BroadcastMessage'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg_runner'
op|','
name|'ctxt'
op|','
nl|'\n'
name|'method_name'
op|','
name|'method_kwargs'
op|','
name|'direction'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# The local cell creating this message has the option'
nl|'\n'
comment|'# to be able to process the message locally or not.'
nl|'\n'
name|'self'
op|'.'
name|'run_locally'
op|'='
name|'run_locally'
newline|'\n'
name|'self'
op|'.'
name|'is_broadcast'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_get_next_hops
dedent|''
name|'def'
name|'_get_next_hops'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set the next hops and return the number of hops.  The next\n        hops may include ourself.\n        """'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'hop_count'
op|'>='
name|'self'
op|'.'
name|'max_hop_count'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'direction'
op|'=='
string|"'down'"
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_child_cells'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_parent_cells'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_send_to_cells
dedent|''
dedent|''
name|'def'
name|'_send_to_cells'
op|'('
name|'self'
op|','
name|'target_cells'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send a message to multiple cells."""'
newline|'\n'
name|'for'
name|'cell'
name|'in'
name|'target_cells'
op|':'
newline|'\n'
indent|'            '
name|'cell'
op|'.'
name|'send_message'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_send_json_responses
dedent|''
dedent|''
name|'def'
name|'_send_json_responses'
op|'('
name|'self'
op|','
name|'json_responses'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Responses to broadcast messages always need to go to the\n        neighbor cell from which we received this message.  That\n        cell aggregates the responses and makes sure to forward them\n        to the correct source.\n        """'
newline|'\n'
name|'return'
name|'super'
op|'('
name|'_BroadcastMessage'
op|','
name|'self'
op|')'
op|'.'
name|'_send_json_responses'
op|'('
nl|'\n'
name|'json_responses'
op|','
name|'neighbor_only'
op|'='
name|'True'
op|','
name|'fanout'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a broadcast message.  This is called for all cells\n        that touch this message.\n\n        The message is sent to all cells in the certain direction and\n        the creator of this message has the option of whether or not\n        to process it locally as well.\n\n        If responses from all cells are required, each hop creates an\n        eventlet queue and waits for responses from its immediate\n        neighbor cells.  All responses are then aggregated into a\n        single list and are returned to the neighbor cell until the\n        source is reached.\n\n        When the source is reached, a list of Response instances are\n        returned to the caller.\n\n        All exceptions for processing the message across the whole\n        routing path are caught and encoded within the Response and\n        returned to the caller.  It is possible to get a mix of\n        successful responses and failure responses.  The caller is\n        responsible for dealing with this.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'next_hops'
op|'='
name|'self'
op|'.'
name|'_get_next_hops'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error locating next hops for message: %(exc)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response_from_exception'
op|'('
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
comment|"# Short circuit if we don't need to respond"
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'need_response'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'run_locally'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_process_locally'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'_send_to_cells'
op|'('
name|'next_hops'
op|')'
newline|'\n'
name|'return'
newline|'\n'
nl|'\n'
comment|"# We'll need to aggregate all of the responses (from ourself"
nl|'\n'
comment|'# and our sibling cells) into 1 response'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_setup_response_queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_send_to_cells'
op|'('
name|'next_hops'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# Error just trying to send to cells.  Send a single response'
nl|'\n'
comment|'# with the failure.'
nl|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'_'
op|'('
string|'"Error sending message to next hops: %(exc)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_cleanup_response_queue'
op|'('
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response_from_exception'
op|'('
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'run_locally'
op|':'
newline|'\n'
comment|'# Run locally and store the Response.'
nl|'\n'
indent|'            '
name|'local_response'
op|'='
name|'self'
op|'.'
name|'_process_locally'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'local_response'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'remote_responses'
op|'='
name|'self'
op|'.'
name|'_wait_for_json_responses'
op|'('
nl|'\n'
name|'num_responses'
op|'='
name|'len'
op|'('
name|'next_hops'
op|')'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
name|'as'
name|'exc'
op|':'
newline|'\n'
comment|'# Error waiting for responses, most likely a timeout.'
nl|'\n'
comment|'# Send a single response back with the failure.'
nl|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'err_str'
op|'='
name|'_'
op|'('
string|'"Error waiting for responses from neighbor cells: "'
nl|'\n'
string|'"%(exc)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'err_str'
op|','
op|'{'
string|"'exc'"
op|':'
name|'exc'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_send_response_from_exception'
op|'('
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'local_response'
op|':'
newline|'\n'
indent|'            '
name|'remote_responses'
op|'.'
name|'append'
op|'('
name|'local_response'
op|'.'
name|'to_json'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_send_json_responses'
op|'('
name|'remote_responses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ResponseMessage
dedent|''
dedent|''
name|'class'
name|'_ResponseMessage'
op|'('
name|'_TargetedMessage'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A response message is really just a special targeted message,\n    saying to call \'parse_responses\' when we reach the source of a \'call\'.\n\n    The \'fanout\' attribute on this message may be true if we\'re responding\n    to a broadcast or if we\'re about to respond to the source of an\n    original target message.  Because multiple nova-cells services may\n    be running within a cell, we need to make sure the response gets\n    back to the correct one, so we have to fanout.\n    """'
newline|'\n'
DECL|variable|message_type
name|'message_type'
op|'='
string|"'response'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg_runner'
op|','
name|'ctxt'
op|','
name|'method_name'
op|','
name|'method_kwargs'
op|','
nl|'\n'
name|'direction'
op|','
name|'target_cell'
op|','
name|'response_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_ResponseMessage'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'msg_runner'
op|','
name|'ctxt'
op|','
nl|'\n'
name|'method_name'
op|','
name|'method_kwargs'
op|','
name|'direction'
op|','
name|'target_cell'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'response_uuid'
op|'='
name|'response_uuid'
newline|'\n'
name|'self'
op|'.'
name|'base_attrs_to_json'
op|'.'
name|'append'
op|'('
string|"'response_uuid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|process
dedent|''
name|'def'
name|'process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Process a response.  If the target is the local cell, process\n        the response here.  Otherwise, forward it to where it needs to\n        go.\n        """'
newline|'\n'
name|'next_hop'
op|'='
name|'self'
op|'.'
name|'_get_next_hop'
op|'('
op|')'
newline|'\n'
name|'if'
name|'next_hop'
op|'.'
name|'is_me'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_process_locally'
op|'('
op|')'
newline|'\n'
name|'return'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'fanout'
name|'is'
name|'False'
op|':'
newline|'\n'
comment|"# Really there's 1 more hop on each of these below, but"
nl|'\n'
comment|"# it doesn't matter for this logic."
nl|'\n'
indent|'            '
name|'target_hops'
op|'='
name|'self'
op|'.'
name|'target_cell'
op|'.'
name|'count'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'current_hops'
op|'='
name|'self'
op|'.'
name|'routing_path'
op|'.'
name|'count'
op|'('
name|'_PATH_CELL_SEP'
op|')'
newline|'\n'
name|'if'
name|'current_hops'
op|'+'
number|'1'
op|'=='
name|'target_hops'
op|':'
newline|'\n'
comment|'# Next hop is the target.. so we must fanout.  See'
nl|'\n'
comment|'# DocString above.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'fanout'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'next_hop'
op|'.'
name|'send_message'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Methods that may be called when processing messages after reaching'
nl|'\n'
comment|'# a target cell.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseMessageMethods
dedent|''
dedent|''
name|'class'
name|'_BaseMessageMethods'
op|'('
name|'base'
op|'.'
name|'Base'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for defining methods by message types."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'msg_runner'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BaseMessageMethods'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'='
name|'msg_runner'
newline|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'='
name|'msg_runner'
op|'.'
name|'state_manager'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'='
name|'consoleauth_rpcapi'
op|'.'
name|'ConsoleAuthAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_api'
op|'='
name|'compute'
op|'.'
name|'HostAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|task_log_get_all
dedent|''
name|'def'
name|'task_log_get_all'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'task_name'
op|','
name|'period_beginning'
op|','
nl|'\n'
name|'period_ending'
op|','
name|'host'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get task logs from the DB.  The message could have\n        directly targeted this cell, or it could have been a broadcast\n        message.\n\n        If \'host\' is not None, filter by host.\n        If \'state\' is not None, filter by state.\n        """'
newline|'\n'
name|'task_logs'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'task_log_get_all'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'task_name'
op|','
nl|'\n'
name|'period_beginning'
op|','
nl|'\n'
name|'period_ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
nl|'\n'
name|'state'
op|'='
name|'state'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'task_logs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_ResponseMessageMethods
dedent|''
dedent|''
name|'class'
name|'_ResponseMessageMethods'
op|'('
name|'_BaseMessageMethods'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Methods that are called from a ResponseMessage.  There\'s only\n    1 method (parse_responses) and it is called when the message reaches\n    the source of a \'call\'.  All we do is stuff the response into the\n    eventlet queue to signal the caller that\'s waiting.\n    """'
newline|'\n'
DECL|member|parse_responses
name|'def'
name|'parse_responses'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'orig_message'
op|','
name|'responses'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'_put_response'
op|'('
name|'message'
op|'.'
name|'response_uuid'
op|','
nl|'\n'
name|'responses'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TargetedMessageMethods
dedent|''
dedent|''
name|'class'
name|'_TargetedMessageMethods'
op|'('
name|'_BaseMessageMethods'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""These are the methods that can be called when routing a message\n    to a specific cell.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_TargetedMessageMethods'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|schedule_run_instance
dedent|''
name|'def'
name|'schedule_run_instance'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host_sched_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Parent cell told us to schedule new instance creation."""'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'scheduler'
op|'.'
name|'run_instance'
op|'('
name|'message'
op|','
name|'host_sched_kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_compute_api_method
dedent|''
name|'def'
name|'run_compute_api_method'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'method_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run a method in the compute api class."""'
newline|'\n'
name|'method'
op|'='
name|'method_info'
op|'['
string|"'method'"
op|']'
newline|'\n'
name|'fn'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
name|'method'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'fn'
op|':'
newline|'\n'
indent|'            '
name|'detail'
op|'='
name|'_'
op|'('
string|'"Unknown method \'%(method)s\' in compute API"'
op|')'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'CellServiceAPIMethodNotFound'
op|'('
nl|'\n'
name|'detail'
op|'='
name|'detail'
op|'%'
op|'{'
string|"'method'"
op|':'
name|'method'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'args'
op|'='
name|'list'
op|'('
name|'method_info'
op|'['
string|"'method_args'"
op|']'
op|')'
newline|'\n'
comment|'# 1st arg is instance_uuid that we need to turn into the'
nl|'\n'
comment|'# instance object.'
nl|'\n'
name|'instance_uuid'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# Must be a race condition.  Let's try to resolve it by"
nl|'\n'
comment|"# telling the top level cells that this instance doesn't"
nl|'\n'
comment|'# exist.'
nl|'\n'
indent|'                '
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'instance_destroy_at_top'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'args'
op|'['
number|'0'
op|']'
op|'='
name|'instance'
newline|'\n'
name|'return'
name|'fn'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'method_info'
op|'['
string|"'method_kwargs'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_capabilities
dedent|''
name|'def'
name|'update_capabilities'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'cell_name'
op|','
name|'capabilities'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A child cell told us about their capabilities."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Received capabilities from child cell "'
nl|'\n'
string|'"%(cell_name)s: %(capabilities)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'cell_name'"
op|':'
name|'cell_name'
op|','
string|"'capabilities'"
op|':'
name|'capabilities'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'update_cell_capabilities'
op|'('
name|'cell_name'
op|','
nl|'\n'
name|'capabilities'
op|')'
newline|'\n'
comment|'# Go ahead and update our parents now that a child updated us'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'tell_parents_our_capabilities'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|update_capacities
dedent|''
name|'def'
name|'update_capacities'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'cell_name'
op|','
name|'capacities'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A child cell told us about their capacity."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Received capacities from child cell "'
nl|'\n'
string|'"%(cell_name)s: %(capacities)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'cell_name'"
op|':'
name|'cell_name'
op|','
string|"'capacities'"
op|':'
name|'capacities'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'update_cell_capacities'
op|'('
name|'cell_name'
op|','
nl|'\n'
name|'capacities'
op|')'
newline|'\n'
comment|'# Go ahead and update our parents now that a child updated us'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'tell_parents_our_capacities'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|announce_capabilities
dedent|''
name|'def'
name|'announce_capabilities'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A parent cell has told us to send our capabilities, so let\'s\n        do so.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'tell_parents_our_capabilities'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|announce_capacities
dedent|''
name|'def'
name|'announce_capacities'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""A parent cell has told us to send our capacity, so let\'s\n        do so.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'tell_parents_our_capacities'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_by_compute_host
dedent|''
name|'def'
name|'service_get_by_compute_host'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return the service entry for a compute host."""'
newline|'\n'
name|'service'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'host_name'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'service'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_update
dedent|''
name|'def'
name|'service_update'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host_name'
op|','
name|'binary'
op|','
name|'params_to_update'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to enable/disable a service. For compute services, setting to\n        disabled stops new builds arriving on that host.\n\n        :param host_name: the name of the host machine that the service is\n                          running\n        :param binary: The name of the executable that the service runs as\n        :param params_to_update: eg. {\'disabled\': True}\n        """'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'host_api'
op|'.'
name|'service_update'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'host_name'
op|','
name|'binary'
op|','
nl|'\n'
name|'params_to_update'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|proxy_rpc_to_manager
dedent|''
name|'def'
name|'proxy_rpc_to_manager'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'host_name'
op|','
name|'rpc_message'
op|','
nl|'\n'
name|'topic'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Proxy RPC to the given compute topic."""'
newline|'\n'
comment|'# Check that the host exists.'
nl|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_by_compute_host'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'host_name'
op|')'
newline|'\n'
name|'if'
name|'message'
op|'.'
name|'need_response'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'topic'
op|','
name|'rpc_message'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'timeout'
op|')'
newline|'\n'
dedent|''
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'topic'
op|','
name|'rpc_message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get
dedent|''
name|'def'
name|'compute_node_get'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'compute_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get compute node by ID."""'
newline|'\n'
name|'compute_node'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'compute_node_get'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'compute_id'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'compute_node'
op|')'
newline|'\n'
nl|'\n'
DECL|member|actions_get
dedent|''
name|'def'
name|'actions_get'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'actions'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'actions_get'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'actions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_get_by_request_id
dedent|''
name|'def'
name|'action_get_by_request_id'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance_uuid'
op|','
name|'request_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'action'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'action_get_by_request_id'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'request_id'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'action'
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_events_get
dedent|''
name|'def'
name|'action_events_get'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'action_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'action_events'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'action_events_get'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'action_id'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'action_events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|validate_console_port
dedent|''
name|'def'
name|'validate_console_port'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance_uuid'
op|','
name|'console_port'
op|','
nl|'\n'
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Validate console port with child cell compute node."""'
newline|'\n'
comment|'# 1st arg is instance_uuid that we need to turn into the'
nl|'\n'
comment|'# instance object.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'excutils'
op|'.'
name|'save_and_reraise_exception'
op|'('
op|')'
op|':'
newline|'\n'
comment|"# Must be a race condition.  Let's try to resolve it by"
nl|'\n'
comment|"# telling the top level cells that this instance doesn't"
nl|'\n'
comment|'# exist.'
nl|'\n'
indent|'                '
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'instance_destroy_at_top'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'validate_console_port'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'console_port'
op|','
name|'console_type'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BroadcastMessageMethods
dedent|''
dedent|''
name|'class'
name|'_BroadcastMessageMethods'
op|'('
name|'_BaseMessageMethods'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""These are the methods that can be called as a part of a broadcast\n    message.\n    """'
newline|'\n'
DECL|member|_at_the_top
name|'def'
name|'_at_the_top'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Are we the API level?"""'
newline|'\n'
name|'return'
name|'not'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_parent_cells'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_update_at_top
dedent|''
name|'def'
name|'instance_update_at_top'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance in the DB if we\'re a top level cell."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_at_the_top'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|"# Remove things that we can't update in the top level cells."
nl|'\n'
comment|"# 'metadata' is only updated in the API cell, so don't overwrite"
nl|'\n'
comment|'# it based on what child cells say.  Make sure to update'
nl|'\n'
comment|"# 'cell_name' based on the routing path."
nl|'\n'
name|'items_to_remove'
op|'='
op|'['
string|"'id'"
op|','
string|"'security_groups'"
op|','
string|"'volumes'"
op|','
string|"'cell_name'"
op|','
nl|'\n'
string|"'name'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'items_to_remove'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'pop'
op|'('
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'['
string|"'cell_name'"
op|']'
op|'='
name|'_reverse_path'
op|'('
name|'message'
op|'.'
name|'routing_path'
op|')'
newline|'\n'
nl|'\n'
comment|"# Fixup info_cache.  We'll have to update this separately if"
nl|'\n'
comment|'# it exists.'
nl|'\n'
name|'info_cache'
op|'='
name|'instance'
op|'.'
name|'pop'
op|'('
string|"'info_cache'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'info_cache'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'info_cache'
op|'.'
name|'pop'
op|'('
string|"'id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'info_cache'
op|'.'
name|'pop'
op|'('
string|"'instance'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Fixup system_metadata (should be a dict for update, not a list)'
nl|'\n'
dedent|''
name|'if'
op|'('
string|"'system_metadata'"
name|'in'
name|'instance'
name|'and'
nl|'\n'
name|'isinstance'
op|'('
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|','
name|'list'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_metadata'
op|'='
name|'dict'
op|'('
op|'['
op|'('
name|'md'
op|'['
string|"'key'"
op|']'
op|','
name|'md'
op|'['
string|"'value'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'md'
name|'in'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|']'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'='
name|'sys_metadata'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Got update for instance: %(instance)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance'"
op|':'
name|'instance'
op|'}'
op|','
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# To attempt to address out-of-order messages, do some sanity'
nl|'\n'
comment|'# checking on the VM state.'
nl|'\n'
name|'expected_vm_state_map'
op|'='
op|'{'
nl|'\n'
comment|"# For updates containing 'vm_state' of 'building',"
nl|'\n'
comment|'# only allow them to occur if the DB already says'
nl|'\n'
comment|"# 'building' or if the vm_state is None.  None"
nl|'\n'
comment|"# really shouldn't be possible as instances always"
nl|'\n'
comment|"# start out in 'building' anyway.. but just in case."
nl|'\n'
name|'vm_states'
op|'.'
name|'BUILDING'
op|':'
op|'['
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
name|'None'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'expected_vm_states'
op|'='
name|'expected_vm_state_map'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'vm_state'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'expected_vm_states'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'['
string|"'expected_vm_state'"
op|']'
op|'='
name|'expected_vm_states'
newline|'\n'
nl|'\n'
comment|"# It's possible due to some weird condition that the instance"
nl|'\n'
comment|"# was already set as deleted... so we'll attempt to update"
nl|'\n'
comment|'# it with permissions that allows us to read deleted.'
nl|'\n'
dedent|''
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'instance'
op|','
name|'update_cells'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NotFound'
op|':'
newline|'\n'
comment|'# FIXME(comstud): Strange.  Need to handle quotas here,'
nl|'\n'
comment|'# if we actually want this code to remain..'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'info_cache'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
nl|'\n'
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|','
name|'info_cache'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceInfoCacheNotFound'
op|':'
newline|'\n'
comment|"# Can happen if we try to update a deleted instance's"
nl|'\n'
comment|'# network information.'
nl|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|instance_destroy_at_top
dedent|''
dedent|''
dedent|''
name|'def'
name|'instance_destroy_at_top'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy an instance from the DB if we\'re a top level cell."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_at_the_top'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Got update to delete instance"'
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'update_cells'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|instance_delete_everywhere
dedent|''
dedent|''
name|'def'
name|'instance_delete_everywhere'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance'
op|','
name|'delete_type'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call compute API delete() or soft_delete() in every cell.\n        This is used when the API cell doesn\'t know what cell an instance\n        belongs to but the instance was requested to be deleted or\n        soft-deleted.  So, we\'ll run it everywhere.\n        """'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Got broadcast to %(delete_type)s delete instance"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'delete_type'"
op|':'
name|'delete_type'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'if'
name|'delete_type'
op|'=='
string|"'soft'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_fault_create_at_top
dedent|''
dedent|''
name|'def'
name|'instance_fault_create_at_top'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance_fault'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy an instance from the DB if we\'re a top level cell."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_at_the_top'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'items_to_remove'
op|'='
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'items_to_remove'
op|':'
newline|'\n'
indent|'            '
name|'instance_fault'
op|'.'
name|'pop'
op|'('
name|'key'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'log_str'
op|'='
name|'_'
op|'('
string|'"Got message to create instance fault: "'
nl|'\n'
string|'"%(instance_fault)s"'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'log_str'
op|','
op|'{'
string|"'instance_fault'"
op|':'
name|'instance_fault'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'db'
op|'.'
name|'instance_fault_create'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance_fault'
op|')'
newline|'\n'
nl|'\n'
DECL|member|bw_usage_update_at_top
dedent|''
name|'def'
name|'bw_usage_update_at_top'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'bw_update_info'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update Bandwidth usage in the DB if we\'re a top level cell."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_at_the_top'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'db'
op|'.'
name|'bw_usage_update'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
op|'**'
name|'bw_update_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_sync_instance
dedent|''
name|'def'
name|'_sync_instance'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
op|'['
string|"'deleted'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'instance_destroy_at_top'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'instance_update_at_top'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|sync_instances
dedent|''
dedent|''
name|'def'
name|'sync_instances'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'project_id'
op|','
name|'updated_since'
op|','
name|'deleted'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'projid_str'
op|'='
name|'project_id'
name|'is'
name|'None'
name|'and'
string|'"<all>"'
name|'or'
name|'project_id'
newline|'\n'
name|'since_str'
op|'='
name|'updated_since'
name|'is'
name|'None'
name|'and'
string|'"<all>"'
name|'or'
name|'updated_since'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Forcing a sync of instances, project_id="'
nl|'\n'
string|'"%(projid_str)s, updated_since=%(since_str)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'projid_str'"
op|':'
name|'projid_str'
op|','
string|"'since_str'"
op|':'
name|'since_str'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'updated_since'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'updated_since'
op|'='
name|'timeutils'
op|'.'
name|'parse_isotime'
op|'('
name|'updated_since'
op|')'
newline|'\n'
dedent|''
name|'instances'
op|'='
name|'cells_utils'
op|'.'
name|'get_instances_to_sync'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'updated_since'
op|'='
name|'updated_since'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'deleted'
op|'='
name|'deleted'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_sync_instance'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_all
dedent|''
dedent|''
name|'def'
name|'service_get_all'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'filters'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'filters'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'disabled'
op|'='
name|'filters'
op|'.'
name|'pop'
op|'('
string|"'disabled'"
op|','
name|'None'
op|')'
newline|'\n'
name|'services'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'service_get_all'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
name|'disabled'
op|'='
name|'disabled'
op|')'
newline|'\n'
name|'ret_services'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'service'
name|'in'
name|'services'
op|':'
newline|'\n'
indent|'            '
name|'service'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'service'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'filters'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'service'
op|'['
name|'key'
op|']'
op|'!='
name|'val'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'ret_services'
op|'.'
name|'append'
op|'('
name|'service'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'ret_services'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get_all
dedent|''
name|'def'
name|'compute_node_get_all'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'hypervisor_match'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return compute nodes in this cell."""'
newline|'\n'
name|'if'
name|'hypervisor_match'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'compute_node_search_by_hypervisor'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'hypervisor_match'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'='
name|'self'
op|'.'
name|'db'
op|'.'
name|'compute_node_get_all'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'nodes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_stats
dedent|''
name|'def'
name|'compute_node_stats'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return compute node stats from this cell."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'db'
op|'.'
name|'compute_node_statistics'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|consoleauth_delete_tokens
dedent|''
name|'def'
name|'consoleauth_delete_tokens'
op|'('
name|'self'
op|','
name|'message'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete consoleauth tokens for an instance in API cells."""'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_at_the_top'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'delete_tokens_for_instance'
op|'('
name|'message'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|_CELL_MESSAGE_TYPE_TO_MESSAGE_CLS
dedent|''
dedent|''
name|'_CELL_MESSAGE_TYPE_TO_MESSAGE_CLS'
op|'='
op|'{'
string|"'targeted'"
op|':'
name|'_TargetedMessage'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'_BroadcastMessage'
op|','
nl|'\n'
string|"'response'"
op|':'
name|'_ResponseMessage'
op|'}'
newline|'\n'
DECL|variable|_CELL_MESSAGE_TYPE_TO_METHODS_CLS
name|'_CELL_MESSAGE_TYPE_TO_METHODS_CLS'
op|'='
op|'{'
string|"'targeted'"
op|':'
name|'_TargetedMessageMethods'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
name|'_BroadcastMessageMethods'
op|','
nl|'\n'
string|"'response'"
op|':'
name|'_ResponseMessageMethods'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Below are the public interfaces into this module.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|class|MessageRunner
name|'class'
name|'MessageRunner'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This class is the main interface into creating messages and\n    processing them.\n\n    Public methods in this class are typically called by the CellsManager\n    to create a new message and process it with the exception of\n    \'message_from_json\' which should be used by CellsDrivers to convert\n    a JSONified message it has received back into the appropriate Message\n    class.\n\n    Private methods are used internally when we need to keep some\n    \'global\' state.  For instance, eventlet queues used for responses are\n    held in this class.  Also, when a Message is process()ed above and\n    it\'s determined we should take action locally,\n    _process_message_locally() will be called.\n\n    When needing to add a new method to call in a Cell2Cell message,\n    define the new method below and also add it to the appropriate\n    MessageMethods class where the real work will be done.\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'state_manager'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'state_manager'
op|'='
name|'state_manager'
newline|'\n'
name|'cells_scheduler_cls'
op|'='
name|'importutils'
op|'.'
name|'import_class'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'scheduler'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler'
op|'='
name|'cells_scheduler_cls'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'response_queues'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'methods_by_type'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'our_name'
op|'='
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'name'
newline|'\n'
name|'for'
name|'msg_type'
op|','
name|'cls'
name|'in'
name|'_CELL_MESSAGE_TYPE_TO_METHODS_CLS'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'methods_by_type'
op|'['
name|'msg_type'
op|']'
op|'='
name|'cls'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_process_message_locally
dedent|''
dedent|''
name|'def'
name|'_process_message_locally'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Message processing will call this when its determined that\n        the message should be processed within this cell.  Find the\n        method to call based on the message type, and call it.  The\n        caller is responsible for catching exceptions and returning\n        results to cells, if needed.\n        """'
newline|'\n'
name|'methods'
op|'='
name|'self'
op|'.'
name|'methods_by_type'
op|'['
name|'message'
op|'.'
name|'message_type'
op|']'
newline|'\n'
name|'fn'
op|'='
name|'getattr'
op|'('
name|'methods'
op|','
name|'message'
op|'.'
name|'method_name'
op|')'
newline|'\n'
name|'return'
name|'fn'
op|'('
name|'message'
op|','
op|'**'
name|'message'
op|'.'
name|'method_kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_put_response
dedent|''
name|'def'
name|'_put_response'
op|'('
name|'self'
op|','
name|'response_uuid'
op|','
name|'response'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Put a response into a response queue.  This is called when\n        a _ResponseMessage is processed in the cell that initiated a\n        \'call\' to another cell.\n        """'
newline|'\n'
name|'resp_queue'
op|'='
name|'self'
op|'.'
name|'response_queues'
op|'.'
name|'get'
op|'('
name|'response_uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'resp_queue'
op|':'
newline|'\n'
comment|'# Response queue is gone.  We must have restarted or we'
nl|'\n'
comment|'# received a response after our timeout period.'
nl|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'resp_queue'
op|'.'
name|'put'
op|'('
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_response_queue
dedent|''
name|'def'
name|'_setup_response_queue'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Set up an eventlet queue to use to wait for replies.\n\n        Replies come back from the target cell as a _ResponseMessage\n        being sent back to the source.\n        """'
newline|'\n'
name|'resp_queue'
op|'='
name|'queue'
op|'.'
name|'Queue'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'response_queues'
op|'['
name|'message'
op|'.'
name|'uuid'
op|']'
op|'='
name|'resp_queue'
newline|'\n'
name|'return'
name|'resp_queue'
newline|'\n'
nl|'\n'
DECL|member|_cleanup_response_queue
dedent|''
name|'def'
name|'_cleanup_response_queue'
op|'('
name|'self'
op|','
name|'message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Stop tracking the response queue either because we\'re\n        done receiving responses, or we\'ve timed out.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'response_queues'
op|'['
name|'message'
op|'.'
name|'uuid'
op|']'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
comment|'# Ignore if queue is gone already somehow.'
nl|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|_create_response_message
dedent|''
dedent|''
name|'def'
name|'_create_response_message'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'direction'
op|','
name|'target_cell'
op|','
nl|'\n'
name|'response_uuid'
op|','
name|'response_kwargs'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a ResponseMessage.  This is used internally within\n        the messaging module.\n        """'
newline|'\n'
name|'return'
name|'_ResponseMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'parse_responses'"
op|','
nl|'\n'
name|'response_kwargs'
op|','
name|'direction'
op|','
name|'target_cell'
op|','
nl|'\n'
name|'response_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|message_from_json
dedent|''
name|'def'
name|'message_from_json'
op|'('
name|'self'
op|','
name|'json_message'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Turns a message in JSON format into an appropriate Message\n        instance.  This is called when cells receive a message from\n        another cell.\n        """'
newline|'\n'
name|'message_dict'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'json_message'
op|')'
newline|'\n'
name|'message_type'
op|'='
name|'message_dict'
op|'.'
name|'pop'
op|'('
string|"'message_type'"
op|')'
newline|'\n'
comment|'# Need to convert context back.'
nl|'\n'
name|'ctxt'
op|'='
name|'message_dict'
op|'['
string|"'ctxt'"
op|']'
newline|'\n'
name|'message_dict'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'.'
name|'from_dict'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'message_cls'
op|'='
name|'_CELL_MESSAGE_TYPE_TO_MESSAGE_CLS'
op|'['
name|'message_type'
op|']'
newline|'\n'
name|'return'
name|'message_cls'
op|'('
name|'self'
op|','
op|'**'
name|'message_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|ask_children_for_capabilities
dedent|''
name|'def'
name|'ask_children_for_capabilities'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell child cells to send us capabilities.  This is typically\n        called on startup of the nova-cells service.\n        """'
newline|'\n'
name|'child_cells'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_child_cells'
op|'('
op|')'
newline|'\n'
name|'for'
name|'child_cell'
name|'in'
name|'child_cells'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'announce_capabilities'"
op|','
nl|'\n'
name|'dict'
op|'('
op|')'
op|','
string|"'down'"
op|','
name|'child_cell'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|ask_children_for_capacities
dedent|''
dedent|''
name|'def'
name|'ask_children_for_capacities'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tell child cells to send us capacities.  This is typically\n        called on startup of the nova-cells service.\n        """'
newline|'\n'
name|'child_cells'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_child_cells'
op|'('
op|')'
newline|'\n'
name|'for'
name|'child_cell'
name|'in'
name|'child_cells'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'announce_capacities'"
op|','
nl|'\n'
name|'dict'
op|'('
op|')'
op|','
string|"'down'"
op|','
name|'child_cell'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tell_parents_our_capabilities
dedent|''
dedent|''
name|'def'
name|'tell_parents_our_capabilities'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send our capabilities to parent cells."""'
newline|'\n'
name|'parent_cells'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_parent_cells'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'parent_cells'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'my_cell_info'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_my_state'
op|'('
op|')'
newline|'\n'
name|'capabs'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_our_capabilities'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating parents with our capabilities: %(capabs)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'capabs'"
op|':'
name|'capabs'
op|'}'
op|')'
newline|'\n'
comment|'# We have to turn the sets into lists so they can potentially'
nl|'\n'
comment|'# be json encoded when the raw message is sent.'
nl|'\n'
name|'for'
name|'key'
op|','
name|'values'
name|'in'
name|'capabs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'capabs'
op|'['
name|'key'
op|']'
op|'='
name|'list'
op|'('
name|'values'
op|')'
newline|'\n'
dedent|''
name|'method_kwargs'
op|'='
op|'{'
string|"'cell_name'"
op|':'
name|'my_cell_info'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'capabilities'"
op|':'
name|'capabs'
op|'}'
newline|'\n'
name|'for'
name|'cell'
name|'in'
name|'parent_cells'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'update_capabilities'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'up'"
op|','
name|'cell'
op|','
name|'fanout'
op|'='
name|'True'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tell_parents_our_capacities
dedent|''
dedent|''
name|'def'
name|'tell_parents_our_capacities'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send our capacities to parent cells."""'
newline|'\n'
name|'parent_cells'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_parent_cells'
op|'('
op|')'
newline|'\n'
name|'if'
name|'not'
name|'parent_cells'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'my_cell_info'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_my_state'
op|'('
op|')'
newline|'\n'
name|'capacities'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_our_capacities'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Updating parents with our capacities: %(capacities)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'capacities'"
op|':'
name|'capacities'
op|'}'
op|')'
newline|'\n'
name|'method_kwargs'
op|'='
op|'{'
string|"'cell_name'"
op|':'
name|'my_cell_info'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'capacities'"
op|':'
name|'capacities'
op|'}'
newline|'\n'
name|'for'
name|'cell'
name|'in'
name|'parent_cells'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'update_capacities'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'up'"
op|','
name|'cell'
op|','
name|'fanout'
op|'='
name|'True'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|schedule_run_instance
dedent|''
dedent|''
name|'def'
name|'schedule_run_instance'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'target_cell'
op|','
name|'host_sched_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Called by the scheduler to tell a child cell to schedule\n        a new instance for build.\n        """'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'host_sched_kwargs'
op|'='
name|'host_sched_kwargs'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'schedule_run_instance'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
name|'target_cell'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|run_compute_api_method
dedent|''
name|'def'
name|'run_compute_api_method'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'method_info'
op|','
name|'call'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Call a compute API method in a specific cell."""'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'run_compute_api_method'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'method_info'
op|'='
name|'method_info'
op|')'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'call'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_update_at_top
dedent|''
name|'def'
name|'instance_update_at_top'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update an instance at the top level cell."""'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'instance_update_at_top'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|')'
op|','
string|"'up'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_destroy_at_top
dedent|''
name|'def'
name|'instance_destroy_at_top'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Destroy an instance at the top level cell."""'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'instance_destroy_at_top'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|')'
op|','
string|"'up'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_delete_everywhere
dedent|''
name|'def'
name|'instance_delete_everywhere'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'delete_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This is used by API cell when it didn\'t know what cell\n        an instance was in, but the instance was requested to be\n        deleted or soft_deleted.  So, we\'ll broadcast this everywhere.\n        """'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'instance'
op|'='
name|'instance'
op|','
name|'delete_type'
op|'='
name|'delete_type'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'instance_delete_everywhere'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|instance_fault_create_at_top
dedent|''
name|'def'
name|'instance_fault_create_at_top'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_fault'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create an instance fault at the top level cell."""'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'instance_fault_create_at_top'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_fault'
op|'='
name|'instance_fault'
op|')'
op|','
nl|'\n'
string|"'up'"
op|','
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|bw_usage_update_at_top
dedent|''
name|'def'
name|'bw_usage_update_at_top'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'bw_update_info'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Update bandwidth usage at top level cell."""'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'bw_usage_update_at_top'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'bw_update_info'
op|'='
name|'bw_update_info'
op|')'
op|','
nl|'\n'
string|"'up'"
op|','
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|sync_instances
dedent|''
name|'def'
name|'sync_instances'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'project_id'
op|','
name|'updated_since'
op|','
name|'deleted'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Force a sync of all instances, potentially by project_id,\n        and potentially since a certain date/time.\n        """'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'updated_since'
op|'='
name|'updated_since'
op|','
nl|'\n'
name|'deleted'
op|'='
name|'deleted'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'sync_instances'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_all
dedent|''
name|'def'
name|'service_get_all'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'filters'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'service_get_all'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'True'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_get_by_compute_host
dedent|''
name|'def'
name|'service_get_by_compute_host'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'host_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'host_name'
op|'='
name|'host_name'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'service_get_by_compute_host'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
name|'cell_name'
op|','
nl|'\n'
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|service_update
dedent|''
name|'def'
name|'service_update'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'host_name'
op|','
name|'binary'
op|','
nl|'\n'
name|'params_to_update'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Used to enable/disable a service. For compute services, setting to\n        disabled stops new builds arriving on that host.\n\n        :param host_name: the name of the host machine that the service is\n                          running\n        :param binary: The name of the executable that the service runs as\n        :param params_to_update: eg. {\'disabled\': True}\n        :returns: the update service object\n        """'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'host_name'
op|'='
name|'host_name'
op|','
name|'binary'
op|'='
name|'binary'
op|','
nl|'\n'
name|'params_to_update'
op|'='
name|'params_to_update'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'service_update'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
name|'cell_name'
op|','
nl|'\n'
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|proxy_rpc_to_manager
dedent|''
name|'def'
name|'proxy_rpc_to_manager'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'host_name'
op|','
name|'topic'
op|','
nl|'\n'
name|'rpc_message'
op|','
name|'call'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
op|'{'
string|"'host_name'"
op|':'
name|'host_name'
op|','
nl|'\n'
string|"'topic'"
op|':'
name|'topic'
op|','
nl|'\n'
string|"'rpc_message'"
op|':'
name|'rpc_message'
op|','
nl|'\n'
string|"'timeout'"
op|':'
name|'timeout'
op|'}'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
nl|'\n'
string|"'proxy_rpc_to_manager'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
name|'cell_name'
op|','
nl|'\n'
name|'need_response'
op|'='
name|'call'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|task_log_get_all
dedent|''
name|'def'
name|'task_log_get_all'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'task_name'
op|','
nl|'\n'
name|'period_beginning'
op|','
name|'period_ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'None'
op|','
name|'state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Get task logs from the DB from all cells or a particular\n        cell.\n\n        If \'cell_name\' is None or \'\', get responses from all cells.\n        If \'host\' is not None, filter by host.\n        If \'state\' is not None, filter by state.\n\n        Return a list of Response objects.\n        """'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'task_name'
op|'='
name|'task_name'
op|','
nl|'\n'
name|'period_beginning'
op|'='
name|'period_beginning'
op|','
nl|'\n'
name|'period_ending'
op|'='
name|'period_ending'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|','
name|'state'
op|'='
name|'state'
op|')'
newline|'\n'
name|'if'
name|'cell_name'
op|':'
newline|'\n'
indent|'            '
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'task_log_get_all'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# Caller should get a list of Responses.'
nl|'\n'
name|'return'
op|'['
name|'message'
op|'.'
name|'process'
op|'('
op|')'
op|']'
newline|'\n'
dedent|''
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'task_log_get_all'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'True'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get_all
dedent|''
name|'def'
name|'compute_node_get_all'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'hypervisor_match'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return list of compute nodes in all child cells."""'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'hypervisor_match'
op|'='
name|'hypervisor_match'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'compute_node_get_all'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'True'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_stats
dedent|''
name|'def'
name|'compute_node_stats'
op|'('
name|'self'
op|','
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return compute node stats from all child cells."""'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'compute_node_stats'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'run_locally'
op|'='
name|'True'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|compute_node_get
dedent|''
name|'def'
name|'compute_node_get'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'compute_id'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return compute node entry from a specific cell by ID."""'
newline|'\n'
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'compute_id'
op|'='
name|'compute_id'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'compute_node_get'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|actions_get
dedent|''
name|'def'
name|'actions_get'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'actions_get'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_get_by_request_id
dedent|''
name|'def'
name|'action_get_by_request_id'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'request_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'request_id'
op|'='
name|'request_id'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'action_get_by_request_id'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|action_events_get
dedent|''
name|'def'
name|'action_events_get'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'action_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'method_kwargs'
op|'='
name|'dict'
op|'('
name|'action_id'
op|'='
name|'action_id'
op|')'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'action_events_get'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|consoleauth_delete_tokens
dedent|''
name|'def'
name|'consoleauth_delete_tokens'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Delete consoleauth tokens for an instance in API cells."""'
newline|'\n'
name|'message'
op|'='
name|'_BroadcastMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'consoleauth_delete_tokens'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
op|','
nl|'\n'
string|"'up'"
op|','
name|'run_locally'
op|'='
name|'False'
op|')'
newline|'\n'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|validate_console_port
dedent|''
name|'def'
name|'validate_console_port'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'cell_name'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'console_port'
op|','
name|'console_type'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Validate console port with child cell compute node."""'
newline|'\n'
name|'method_kwargs'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'console_port'"
op|':'
name|'console_port'
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'console_type'
op|'}'
newline|'\n'
name|'message'
op|'='
name|'_TargetedMessage'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
string|"'validate_console_port'"
op|','
nl|'\n'
name|'method_kwargs'
op|','
string|"'down'"
op|','
nl|'\n'
name|'cell_name'
op|','
name|'need_response'
op|'='
name|'True'
op|')'
newline|'\n'
name|'return'
name|'message'
op|'.'
name|'process'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|get_message_types
name|'def'
name|'get_message_types'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_CELL_MESSAGE_TYPE_TO_MESSAGE_CLS'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Response
dedent|''
dedent|''
name|'class'
name|'Response'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Holds a response from a cell.  If there was a failure, \'failure\'\n    will be True and \'response\' will contain an encoded Exception.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'cell_name'
op|','
name|'value'
op|','
name|'failure'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'failure'
op|'='
name|'failure'
newline|'\n'
name|'self'
op|'.'
name|'cell_name'
op|'='
name|'cell_name'
newline|'\n'
name|'self'
op|'.'
name|'value'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|to_json
dedent|''
name|'def'
name|'to_json'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resp_value'
op|'='
name|'self'
op|'.'
name|'value'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'failure'
op|':'
newline|'\n'
indent|'            '
name|'resp_value'
op|'='
name|'rpc_common'
op|'.'
name|'serialize_remote_exception'
op|'('
name|'resp_value'
op|','
nl|'\n'
name|'log_failure'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'_dict'
op|'='
op|'{'
string|"'cell_name'"
op|':'
name|'self'
op|'.'
name|'cell_name'
op|','
nl|'\n'
string|"'value'"
op|':'
name|'resp_value'
op|','
nl|'\n'
string|"'failure'"
op|':'
name|'self'
op|'.'
name|'failure'
op|'}'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'_dict'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_json
name|'def'
name|'from_json'
op|'('
name|'cls'
op|','
name|'json_message'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'_dict'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'json_message'
op|')'
newline|'\n'
name|'if'
name|'_dict'
op|'['
string|"'failure'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'resp_value'
op|'='
name|'rpc_common'
op|'.'
name|'deserialize_remote_exception'
op|'('
nl|'\n'
name|'CONF'
op|','
name|'_dict'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'_dict'
op|'['
string|"'value'"
op|']'
op|'='
name|'resp_value'
newline|'\n'
dedent|''
name|'return'
name|'cls'
op|'('
op|'**'
name|'_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|value_or_raise
dedent|''
name|'def'
name|'value_or_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'failure'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'value'
op|','
op|'('
name|'tuple'
op|','
name|'list'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'value'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'value'
op|'['
number|'1'
op|']'
op|','
name|'self'
op|'.'
name|'value'
op|'['
number|'2'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'value'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'self'
op|'.'
name|'value'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

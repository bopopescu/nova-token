begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Super simple fake memcache client."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_cache'
name|'import'
name|'core'
name|'as'
name|'cache'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(dims): There are many copies of memcache_opts with memcached_servers'
nl|'\n'
comment|'# in various projects as this used to be in a copy of memory_cache.py'
nl|'\n'
comment|'# Since we are making a change in just our copy, oslo-config-generator fails'
nl|'\n'
comment|'# with cfg.DuplicateOptError unless we override the comparison check'
nl|'\n'
DECL|class|_DeprecatedListOpt
name|'class'
name|'_DeprecatedListOpt'
op|'('
name|'cfg'
op|'.'
name|'ListOpt'
op|')'
op|':'
newline|'\n'
DECL|member|__ne__
indent|'    '
name|'def'
name|'__ne__'
op|'('
name|'self'
op|','
name|'another'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self_dict'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'vars'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
name|'another_dict'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'vars'
op|'('
name|'another'
op|')'
op|')'
newline|'\n'
name|'self_dict'
op|'.'
name|'pop'
op|'('
string|"'help'"
op|')'
newline|'\n'
name|'self_dict'
op|'.'
name|'pop'
op|'('
string|"'deprecated_for_removal'"
op|')'
newline|'\n'
name|'another_dict'
op|'.'
name|'pop'
op|'('
string|"'help'"
op|')'
newline|'\n'
name|'another_dict'
op|'.'
name|'pop'
op|'('
string|"'deprecated_for_removal'"
op|')'
newline|'\n'
name|'return'
name|'self_dict'
op|'!='
name|'another_dict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|memcache_opts
dedent|''
dedent|''
name|'memcache_opts'
op|'='
op|'['
nl|'\n'
name|'_DeprecatedListOpt'
op|'('
string|"'memcached_servers'"
op|','
nl|'\n'
name|'help'
op|'='
string|"'DEPRECATED: Memcached servers or None for in '"
nl|'\n'
string|'\'process cache. "memcached_servers" opt is \''
nl|'\n'
string|"'deprecated in Mitaka. In Newton release '"
nl|'\n'
string|"'oslo.cache config options should be used as '"
nl|'\n'
string|"'this option will be removed. Please add a '"
nl|'\n'
string|"'[cache] group in your nova.conf file and '"
nl|'\n'
string|'\'add "enable" and "memcache_servers" option in \''
nl|'\n'
string|"'this section.'"
op|','
nl|'\n'
name|'deprecated_for_removal'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'memcache_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|WEEK
name|'WEEK'
op|'='
number|'604800'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|list_opts
name|'def'
name|'list_opts'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Entry point for oslo-config-generator."""'
newline|'\n'
name|'return'
op|'['
op|'('
name|'None'
op|','
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'memcache_opts'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_memcached_client
dedent|''
name|'def'
name|'get_memcached_client'
op|'('
name|'expiration_time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used ONLY when memcached is explicitly needed."""'
newline|'\n'
comment|'# If the operator uses the old style [DEFAULT]/memcached_servers'
nl|'\n'
comment|'# then we just respect that setting'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'memcached_servers'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CacheClient'
op|'('
nl|'\n'
name|'_get_custom_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'expiration_time'
op|','
nl|'\n'
name|'backend'
op|'='
string|"'dogpile.cache.memcached'"
op|','
nl|'\n'
name|'url'
op|'='
name|'CONF'
op|'.'
name|'memcached_servers'
op|')'
op|')'
newline|'\n'
comment|'# If the operator still uses the new style [cache]/memcache_servers'
nl|'\n'
comment|'# and has [cache]/enabled flag on then we let oslo_cache configure'
nl|'\n'
comment|'# the region from the configuration settings'
nl|'\n'
dedent|''
name|'elif'
name|'CONF'
op|'.'
name|'cache'
op|'.'
name|'enabled'
name|'and'
name|'CONF'
op|'.'
name|'cache'
op|'.'
name|'memcache_servers'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CacheClient'
op|'('
nl|'\n'
name|'_get_default_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'expiration_time'
op|')'
op|')'
newline|'\n'
dedent|''
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'memcached_servers not defined'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_client
dedent|''
name|'def'
name|'get_client'
op|'('
name|'expiration_time'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used to get a caching client."""'
newline|'\n'
comment|'# If the operator still uses the old style [DEFAULT]/memcached_servers'
nl|'\n'
comment|'# then we just respect that setting'
nl|'\n'
name|'if'
name|'CONF'
op|'.'
name|'memcached_servers'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CacheClient'
op|'('
nl|'\n'
name|'_get_custom_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'expiration_time'
op|','
nl|'\n'
name|'backend'
op|'='
string|"'dogpile.cache.memcached'"
op|','
nl|'\n'
name|'url'
op|'='
name|'CONF'
op|'.'
name|'memcached_servers'
op|')'
op|')'
newline|'\n'
comment|'# If the operator has [cache]/enabled flag on then we let oslo_cache'
nl|'\n'
comment|'# configure the region from configuration settings.'
nl|'\n'
dedent|''
name|'elif'
name|'CONF'
op|'.'
name|'cache'
op|'.'
name|'enabled'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'CacheClient'
op|'('
nl|'\n'
name|'_get_default_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'expiration_time'
op|')'
op|')'
newline|'\n'
comment|'# If [cache]/enabled flag is off and [DEFAULT]/memcached_servers is'
nl|'\n'
comment|'# absent we use the dictionary backend'
nl|'\n'
dedent|''
name|'return'
name|'CacheClient'
op|'('
nl|'\n'
name|'_get_custom_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'expiration_time'
op|','
nl|'\n'
name|'backend'
op|'='
string|"'oslo_cache.dict'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_default_cache_region
dedent|''
name|'def'
name|'_get_default_cache_region'
op|'('
name|'expiration_time'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'region'
op|'='
name|'cache'
op|'.'
name|'create_region'
op|'('
op|')'
newline|'\n'
name|'if'
name|'expiration_time'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'CONF'
op|'.'
name|'cache'
op|'.'
name|'expiration_time'
op|'='
name|'expiration_time'
newline|'\n'
dedent|''
name|'cache'
op|'.'
name|'configure_cache_region'
op|'('
name|'CONF'
op|','
name|'region'
op|')'
newline|'\n'
name|'return'
name|'region'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_custom_cache_region
dedent|''
name|'def'
name|'_get_custom_cache_region'
op|'('
name|'expiration_time'
op|'='
name|'WEEK'
op|','
nl|'\n'
name|'backend'
op|'='
name|'None'
op|','
nl|'\n'
name|'url'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Create instance of oslo_cache client.\n\n    For backends you can pass specific parameters by kwargs.\n    For \'dogpile.cache.memcached\' backend \'url\' parameter must be specified.\n\n    :param backend: backend name\n    :param expiration_time: interval in seconds to indicate maximum\n        time-to-live value for each key\n    :param url: memcached url(s)\n    """'
newline|'\n'
nl|'\n'
name|'region'
op|'='
name|'cache'
op|'.'
name|'create_region'
op|'('
op|')'
newline|'\n'
name|'region_params'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'expiration_time'
op|'!='
number|'0'
op|':'
newline|'\n'
indent|'        '
name|'region_params'
op|'['
string|"'expiration_time'"
op|']'
op|'='
name|'expiration_time'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'backend'
op|'=='
string|"'oslo_cache.dict'"
op|':'
newline|'\n'
indent|'        '
name|'region_params'
op|'['
string|"'arguments'"
op|']'
op|'='
op|'{'
string|"'expiration_time'"
op|':'
name|'expiration_time'
op|'}'
newline|'\n'
dedent|''
name|'elif'
name|'backend'
op|'=='
string|"'dogpile.cache.memcached'"
op|':'
newline|'\n'
indent|'        '
name|'region_params'
op|'['
string|"'arguments'"
op|']'
op|'='
op|'{'
string|"'url'"
op|':'
name|'url'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'RuntimeError'
op|'('
name|'_'
op|'('
string|"'old style configuration can use '"
nl|'\n'
string|"'only dictionary or memcached backends'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'region'
op|'.'
name|'configure'
op|'('
name|'backend'
op|','
op|'**'
name|'region_params'
op|')'
newline|'\n'
name|'return'
name|'region'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CacheClient
dedent|''
name|'class'
name|'CacheClient'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Replicates a tiny subset of memcached client interface."""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'region'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'region'
op|'='
name|'region'
newline|'\n'
nl|'\n'
DECL|member|get
dedent|''
name|'def'
name|'get'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'self'
op|'.'
name|'region'
op|'.'
name|'get'
op|'('
name|'key'
op|')'
newline|'\n'
name|'if'
name|'value'
op|'=='
name|'cache'
op|'.'
name|'NO_VALUE'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|get_or_create
dedent|''
name|'def'
name|'get_or_create'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'creator'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'region'
op|'.'
name|'get_or_create'
op|'('
name|'key'
op|','
name|'creator'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set
dedent|''
name|'def'
name|'set'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'region'
op|'.'
name|'set'
op|'('
name|'key'
op|','
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|add
dedent|''
name|'def'
name|'add'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'region'
op|'.'
name|'get_or_create'
op|'('
name|'key'
op|','
name|'lambda'
op|':'
name|'value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'region'
op|'.'
name|'delete'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_multi
dedent|''
name|'def'
name|'get_multi'
op|'('
name|'self'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'self'
op|'.'
name|'region'
op|'.'
name|'get_multi'
op|'('
name|'keys'
op|')'
newline|'\n'
name|'return'
op|'['
name|'None'
name|'if'
name|'value'
name|'is'
name|'cache'
op|'.'
name|'NO_VALUE'
name|'else'
name|'value'
name|'for'
name|'value'
name|'in'
nl|'\n'
name|'values'
op|']'
newline|'\n'
nl|'\n'
DECL|member|delete_multi
dedent|''
name|'def'
name|'delete_multi'
op|'('
name|'self'
op|','
name|'keys'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'region'
op|'.'
name|'delete_multi'
op|'('
name|'keys'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

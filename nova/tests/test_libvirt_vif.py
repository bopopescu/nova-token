begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Copyright 2012 Nicira, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
name|'import'
name|'ElementTree'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'vif'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
op|'.'
name|'vif'
name|'import'
name|'LibvirtBridgeDriver'
op|','
name|'LibvirtOpenVswitchDriver'
op|','
name|'LibvirtOpenVswitchVirtualPortDriver'
op|','
name|'QuantumLinuxBridgeVIFDriver'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVifTestCase
name|'class'
name|'LibvirtVifTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|net
indent|'    '
name|'net'
op|'='
op|'{'
nl|'\n'
string|"'cidr'"
op|':'
string|"'101.168.1.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'101:1db9::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'101:1db9::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'br0'"
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
number|'99'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'101.168.1.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'101.168.1.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|mapping
name|'mapping'
op|'='
op|'{'
nl|'\n'
string|"'mac'"
op|':'
string|"'ca:fe:de:ad:be:ef'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
name|'net'
op|'['
string|"'gateway_v6'"
op|']'
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
string|"'ip'"
op|':'
string|"'101.168.1.9'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
string|"'191.168.1.1'"
op|','
nl|'\n'
string|"'vif_uuid'"
op|':'
string|"'vif-xxx-yyy-zzz'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|instance
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'instance-uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVifTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'allow_same_net_traffic'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'executes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'executes'
op|'.'
name|'append'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'t'
op|'='
name|'__import__'
op|'('
string|"'Cheetah.Template'"
op|','
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
nl|'\n'
op|'['
string|"'Template'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'Template'
op|'='
name|'t'
op|'.'
name|'Template'
newline|'\n'
name|'xml_file'
op|'='
name|'open'
op|'('
name|'FLAGS'
op|'.'
name|'libvirt_xml_template'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'xml_template'
op|'='
name|'xml_file'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_xml_info
dedent|''
name|'def'
name|'_create_xml_info'
op|'('
name|'self'
op|','
name|'vif_type'
op|','
name|'nics'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
nl|'\n'
string|"'type'"
op|':'
string|"'qemu'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake-name'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake-uuid'"
op|','
nl|'\n'
string|"'memory_kb'"
op|':'
number|'100'
op|'*'
number|'1024'
op|','
nl|'\n'
string|"'basepath'"
op|':'
string|"'foobar'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'rescue'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'disk_prefix'"
op|':'
string|"'/dev/sda'"
op|','
nl|'\n'
string|"'driver_type'"
op|':'
string|"'raw'"
op|','
nl|'\n'
string|"'root_device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'vif_type'"
op|':'
name|'vif_type'
op|','
nl|'\n'
string|"'nics'"
op|':'
name|'nics'
op|','
nl|'\n'
string|"'ebs_root'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'ephemeral_device'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volumes'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'use_virtio_for_bridges'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_xml
dedent|''
name|'def'
name|'_get_instance_xml'
op|'('
name|'self'
op|','
name|'driver'
op|','
name|'vif_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nic_dict'
op|'='
name|'driver'
op|'.'
name|'plug'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'net'
op|','
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
name|'xml_info'
op|'='
name|'self'
op|'.'
name|'_create_xml_info'
op|'('
name|'vif_type'
op|','
op|'['
name|'nic_dict'
op|']'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'Template'
op|'('
name|'self'
op|'.'
name|'xml_template'
op|','
name|'searchList'
op|'='
op|'['
name|'xml_info'
op|']'
op|')'
op|')'
newline|'\n'
name|'return'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|test_bridge_driver
dedent|''
name|'def'
name|'test_bridge_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'LibvirtBridgeDriver'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
string|"'bridge'"
op|')'
newline|'\n'
nl|'\n'
name|'doc'
op|'='
name|'ElementTree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"bridge"'
op|')'
newline|'\n'
name|'br_name'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"source"'
op|')'
op|'.'
name|'get'
op|'('
string|'"bridge"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'br_name'
op|','
name|'self'
op|'.'
name|'net'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
name|'mac'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mac'
op|','
name|'self'
op|'.'
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'unplug'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'net'
op|','
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ovs_ethernet_driver
dedent|''
name|'def'
name|'test_ovs_ethernet_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'LibvirtOpenVswitchDriver'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
string|"'ethernet'"
op|')'
newline|'\n'
nl|'\n'
name|'doc'
op|'='
name|'ElementTree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"ethernet"'
op|')'
newline|'\n'
name|'dev_name'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"target"'
op|')'
op|'.'
name|'get'
op|'('
string|'"dev"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'dev_name'
op|'.'
name|'startswith'
op|'('
string|'"tap"'
op|')'
op|')'
newline|'\n'
name|'mac'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mac'
op|','
name|'self'
op|'.'
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
name|'script'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"script"'
op|')'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'script'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'unplug'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'net'
op|','
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ovs_virtualport_driver
dedent|''
name|'def'
name|'test_ovs_virtualport_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'LibvirtOpenVswitchVirtualPortDriver'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
string|"'ovs_virtualport'"
op|')'
newline|'\n'
nl|'\n'
name|'doc'
op|'='
name|'ElementTree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"bridge"'
op|')'
newline|'\n'
nl|'\n'
name|'br_name'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"source"'
op|')'
op|'.'
name|'get'
op|'('
string|'"bridge"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'br_name'
op|','
name|'FLAGS'
op|'.'
name|'libvirt_ovs_bridge'
op|')'
newline|'\n'
name|'mac'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mac'
op|','
name|'self'
op|'.'
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
name|'vp'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"virtualport"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vp'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"openvswitch"'
op|')'
newline|'\n'
name|'iface_id_found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'p_elem'
name|'in'
name|'vp'
op|'.'
name|'findall'
op|'('
string|'"parameters"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'iface_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"interfaceid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'iface_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'iface_id'
op|','
name|'self'
op|'.'
name|'mapping'
op|'['
string|"'vif_uuid'"
op|']'
op|')'
newline|'\n'
name|'iface_id_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'iface_id_found'
op|')'
newline|'\n'
name|'d'
op|'.'
name|'unplug'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'net'
op|','
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quantum_bridge_ethernet_driver
dedent|''
name|'def'
name|'test_quantum_bridge_ethernet_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'QuantumLinuxBridgeVIFDriver'
op|'('
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
string|"'ethernet'"
op|')'
newline|'\n'
nl|'\n'
name|'doc'
op|'='
name|'ElementTree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"ethernet"'
op|')'
newline|'\n'
name|'dev_name'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"target"'
op|')'
op|'.'
name|'get'
op|'('
string|'"dev"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'dev_name'
op|'.'
name|'startswith'
op|'('
string|'"tap"'
op|')'
op|')'
newline|'\n'
name|'mac'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mac'
op|','
name|'self'
op|'.'
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
name|'script'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"script"'
op|')'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'script'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'.'
name|'unplug'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'net'
op|','
name|'self'
op|'.'
name|'mapping'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

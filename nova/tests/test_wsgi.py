begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Unit tests for `nova.wsgi`."""'
newline|'\n'
nl|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'import'
name|'unittest2'
name|'as'
name|'unittest'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'exception'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'test'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'wsgi'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNothingExists
name|'class'
name|'TestNothingExists'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Loader tests where os.path.exists always returns False."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_os_path_exists'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'='
name|'lambda'
name|'_'
op|':'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test_config_not_found
dedent|''
name|'def'
name|'test_config_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'nova'
op|'.'
name|'exception'
op|'.'
name|'PasteConfigNotFound'
op|','
nl|'\n'
name|'nova'
op|'.'
name|'wsgi'
op|'.'
name|'Loader'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'='
name|'self'
op|'.'
name|'_os_path_exists'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNormalFilesystem
dedent|''
dedent|''
name|'class'
name|'TestNormalFilesystem'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Loader tests where os.path.exists always returns True."""'
newline|'\n'
nl|'\n'
name|'_paste_config'
op|'='
string|'"""\n[app:test_app]\nuse = egg:Paste#static\ndocument_root = /tmp\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'='
name|'tempfile'
op|'.'
name|'NamedTemporaryFile'
op|'('
name|'mode'
op|'='
string|'"w+t"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'write'
op|'('
name|'self'
op|'.'
name|'_paste_config'
op|'.'
name|'lstrip'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'seek'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'config'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'loader'
op|'='
name|'nova'
op|'.'
name|'wsgi'
op|'.'
name|'Loader'
op|'('
name|'self'
op|'.'
name|'config'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_config_found
dedent|''
name|'def'
name|'test_config_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'       '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'config'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'loader'
op|'.'
name|'config_path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_app_not_found
dedent|''
name|'def'
name|'test_app_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'nova'
op|'.'
name|'exception'
op|'.'
name|'PasteAppNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'loader'
op|'.'
name|'load_app'
op|','
nl|'\n'
string|'"non-existant app"'
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_app_found
dedent|''
name|'def'
name|'test_app_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'url_parser'
op|'='
name|'self'
op|'.'
name|'loader'
op|'.'
name|'load_app'
op|'('
string|'"test_app"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"/tmp"'
op|','
name|'url_parser'
op|'.'
name|'directory'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'config'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

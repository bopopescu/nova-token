begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_instance_numa_topology'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_objects'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|fake_instance_uuid
name|'fake_instance_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|fake_migration_context_obj
name|'fake_migration_context_obj'
op|'='
name|'objects'
op|'.'
name|'MigrationContext'
op|'('
op|')'
newline|'\n'
name|'fake_migration_context_obj'
op|'.'
name|'instance_uuid'
op|'='
name|'fake_instance_uuid'
newline|'\n'
name|'fake_migration_context_obj'
op|'.'
name|'migration_id'
op|'='
number|'42'
newline|'\n'
name|'fake_migration_context_obj'
op|'.'
name|'new_numa_topology'
op|'='
op|'('
nl|'\n'
name|'test_instance_numa_topology'
op|'.'
name|'fake_obj_numa_topology'
op|'.'
name|'obj_clone'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_migration_context_obj'
op|'.'
name|'old_numa_topology'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|fake_db_context
name|'fake_db_context'
op|'='
op|'{'
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance_uuid'
op|','
nl|'\n'
string|"'migration_context'"
op|':'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
nl|'\n'
name|'fake_migration_context_obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_fake_migration_context_obj
name|'def'
name|'get_fake_migration_context_obj'
op|'('
name|'ctxt'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'obj'
op|'='
name|'fake_migration_context_obj'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_context'
op|'='
name|'ctxt'
newline|'\n'
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TestMigrationContext
dedent|''
name|'class'
name|'_TestMigrationContext'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_extra_update_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_create
name|'def'
name|'test_create'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt_obj'
op|'='
name|'get_fake_migration_context_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'ctxt_obj'
op|'.'
name|'_save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'mock_update'
op|'.'
name|'call_args_list'
op|')'
op|')'
newline|'\n'
name|'update_call'
op|'='
name|'mock_update'
op|'.'
name|'call_args'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'update_call'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_instance_uuid'
op|','
name|'update_call'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'ctxt_obj'
op|'.'
name|'new_numa_topology'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'InstanceNUMATopology'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'ctxt_obj'
op|'.'
name|'old_numa_topology'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_extra_update_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_destroy
name|'def'
name|'test_destroy'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'mock_update'
op|'.'
name|'call_args_list'
op|')'
op|')'
newline|'\n'
name|'update_call'
op|'='
name|'mock_update'
op|'.'
name|'call_args'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'update_call'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_instance_uuid'
op|','
name|'update_call'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'migration_context'"
op|':'
name|'None'
op|'}'
op|','
name|'update_call'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_get_by_instance_uuid
dedent|''
name|'def'
name|'_test_get_by_instance_uuid'
op|'('
name|'self'
op|','
name|'db_data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mig_context'
op|'='
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'fake_db_context'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'mig_context'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_db_context'
op|'['
string|"'instance_uuid'"
op|']'
op|','
nl|'\n'
name|'mig_context'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'expected_mig_context'
op|'='
name|'db_data'
name|'and'
name|'db_data'
op|'.'
name|'get'
op|'('
string|"'migration_context'"
op|')'
newline|'\n'
name|'expected_mig_context'
op|'='
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'obj_from_db_obj'
op|'('
nl|'\n'
name|'expected_mig_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_mig_context'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'mig_context'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_mig_context'
op|'.'
name|'migration_id'
op|','
nl|'\n'
name|'mig_context'
op|'.'
name|'migration_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'expected_mig_context'
op|'.'
name|'new_numa_topology'
op|','
nl|'\n'
name|'mig_context'
op|'.'
name|'new_numa_topology'
op|'.'
name|'__class__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'expected_mig_context'
op|'.'
name|'old_numa_topology'
op|','
nl|'\n'
name|'mig_context'
op|'.'
name|'old_numa_topology'
op|'.'
name|'__class__'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'mig_context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_extra_get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_by_instance_uuid
name|'def'
name|'test_get_by_instance_uuid'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'fake_db_context'
newline|'\n'
name|'self'
op|'.'
name|'_test_get_by_instance_uuid'
op|'('
name|'fake_db_context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_extra_get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_by_instance_uuid_none
name|'def'
name|'test_get_by_instance_uuid_none'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_context'
op|'='
name|'fake_db_context'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'db_context'
op|'['
string|"'migration_context'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'db_context'
newline|'\n'
name|'self'
op|'.'
name|'_test_get_by_instance_uuid'
op|'('
name|'db_context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_extra_get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_by_instance_uuid_missing
name|'def'
name|'test_get_by_instance_uuid_missing'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'MigrationContextNotFound'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'get_by_instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_uuid'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMigrationContext
dedent|''
dedent|''
name|'class'
name|'TestMigrationContext'
op|'('
name|'test_objects'
op|'.'
name|'_LocalTest'
op|','
name|'_TestMigrationContext'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestMigrationContextRemote'
op|'('
name|'test_objects'
op|'.'
name|'_RemoteTest'
op|','
nl|'\n'
DECL|class|TestMigrationContextRemote
name|'_TestMigrationContext'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
dedent|''
endmarker|''
end_unit

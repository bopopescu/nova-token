begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'collections'
name|'import'
name|'OrderedDict'
newline|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pprint'
newline|'\n'
nl|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'exception'
name|'as'
name|'ovo_exc'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'fixture'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'testtools'
name|'import'
name|'matchers'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
name|'as'
name|'nova_fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_notifier'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'log'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyOwnedObject
name|'class'
name|'MyOwnedObject'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'baz'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'MyObj'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|','
nl|'\n'
DECL|class|MyObj
name|'base'
op|'.'
name|'NovaObjectDictCompat'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.6'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'default'
op|'='
number|'1'
op|')'
op|','
nl|'\n'
string|"'bar'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'missing'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'readonly'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'read_only'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'rel_object'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyOwnedObject'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'rel_objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyOwnedObject'"
op|','
nl|'\n'
DECL|variable|nullable
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'mutable_default'"
op|':'
name|'fields'
op|'.'
name|'ListOfStringsField'
op|'('
name|'default'
op|'='
op|'['
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_from_db_object
name|'def'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'obj'
op|','
name|'db_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'db_obj'
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'bar'
op|'='
name|'db_obj'
op|'['
string|"'bar'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'missing'
op|'='
name|'db_obj'
op|'['
string|"'missing'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'readonly'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|obj_load_attr
dedent|''
name|'def'
name|'obj_load_attr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|','
name|'attrname'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|query
name|'def'
name|'query'
op|'('
name|'cls'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'cls'
op|'('
name|'context'
op|'='
name|'context'
op|','
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|marco
name|'def'
name|'marco'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'polo'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|_update_test
name|'def'
name|'_update_test'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bar'
op|'='
string|"'updated'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|refresh
name|'def'
name|'refresh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'foo'
op|'='
number|'321'
newline|'\n'
name|'self'
op|'.'
name|'bar'
op|'='
string|"'refreshed'"
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|modify_save_modify
name|'def'
name|'modify_save_modify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bar'
op|'='
string|"'meow'"
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
number|'42'
newline|'\n'
name|'self'
op|'.'
name|'rel_object'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'42'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_make_compatible
dedent|''
name|'def'
name|'obj_make_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MyObj'
op|','
name|'self'
op|')'
op|'.'
name|'obj_make_compatible'
op|'('
name|'primitive'
op|','
name|'target_version'
op|')'
newline|'\n'
comment|'# NOTE(danms): Simulate an older version that had a different'
nl|'\n'
comment|"# format for the 'bar' attribute"
nl|'\n'
name|'if'
name|'target_version'
op|'=='
string|"'1.1'"
name|'and'
string|"'bar'"
name|'in'
name|'primitive'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'['
string|"'bar'"
op|']'
op|'='
string|"'old%s'"
op|'%'
name|'primitive'
op|'['
string|"'bar'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyObjDiffVers
dedent|''
dedent|''
dedent|''
name|'class'
name|'MyObjDiffVers'
op|'('
name|'MyObj'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.5'"
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'MyObj'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyObj2
dedent|''
dedent|''
name|'class'
name|'MyObj2'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'    '
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'bar'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'MyObj'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|query
name|'def'
name|'query'
op|'('
name|'cls'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RandomMixInWithNoFields
dedent|''
dedent|''
name|'class'
name|'RandomMixInWithNoFields'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used to test object inheritance using a mixin that has no fields."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestSubclassedObject
name|'class'
name|'TestSubclassedObject'
op|'('
name|'RandomMixInWithNoFields'
op|','
name|'MyObj'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'    '
name|'fields'
op|'='
op|'{'
string|"'new_field'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjToPrimitive
dedent|''
name|'class'
name|'TestObjToPrimitive'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_list
indent|'    '
name|'def'
name|'test_obj_to_primitive_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|MyObjElement
name|'class'
name|'MyObjElement'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'foo'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'super'
op|'('
name|'MyObjElement'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'foo'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|MyList
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObjElement'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mylist'
op|'='
name|'MyList'
op|'('
op|')'
newline|'\n'
name|'mylist'
op|'.'
name|'objects'
op|'='
op|'['
name|'MyObjElement'
op|'('
number|'1'
op|')'
op|','
name|'MyObjElement'
op|'('
number|'2'
op|')'
op|','
name|'MyObjElement'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
nl|'\n'
op|'['
name|'x'
op|'['
string|"'foo'"
op|']'
name|'for'
name|'x'
name|'in'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'mylist'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_dict
dedent|''
name|'def'
name|'test_obj_to_primitive_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyObj'
op|')'
newline|'\n'
name|'myobj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
string|"'bar'"
op|':'
string|"'foo'"
op|'}'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'myobj'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_recursive
dedent|''
name|'def'
name|'test_obj_to_primitive_recursive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyObj'
op|')'
newline|'\n'
nl|'\n'
DECL|class|MyList
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObj'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mylist'
op|'='
name|'MyList'
op|'('
name|'objects'
op|'='
op|'['
name|'MyObj'
op|'('
op|')'
op|','
name|'MyObj'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'value'
name|'in'
name|'enumerate'
op|'('
name|'mylist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'.'
name|'foo'
op|'='
name|'i'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|'{'
string|"'foo'"
op|':'
number|'0'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|']'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'mylist'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_with_ip_addr
dedent|''
name|'def'
name|'test_obj_to_primitive_with_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestObject
name|'class'
name|'TestObject'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'addr'"
op|':'
name|'fields'
op|'.'
name|'IPAddressField'
op|'('
op|')'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'fields'
op|'.'
name|'IPNetworkField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'TestObject'
op|'('
name|'addr'
op|'='
string|"'1.2.3.4'"
op|','
name|'cidr'
op|'='
string|"'1.1.1.1/16'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'addr'"
op|':'
string|"'1.2.3.4'"
op|','
string|"'cidr'"
op|':'
string|"'1.1.1.1/16'"
op|'}'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjMakeList
dedent|''
dedent|''
name|'class'
name|'TestObjMakeList'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_list
indent|'    '
name|'def'
name|'test_obj_make_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyList
indent|'        '
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObj'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'db_objs'
op|'='
op|'['
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
string|"'bar'"
op|':'
string|"'baz'"
op|','
string|"'missing'"
op|':'
string|"'banana'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'foo'"
op|':'
number|'2'
op|','
string|"'bar'"
op|':'
string|"'bat'"
op|','
string|"'missing'"
op|':'
string|"'apple'"
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'mylist'
op|'='
name|'base'
op|'.'
name|'obj_make_list'
op|'('
string|"'ctxt'"
op|','
name|'MyList'
op|'('
op|')'
op|','
name|'MyObj'
op|','
name|'db_objs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'mylist'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ctxt'"
op|','
name|'mylist'
op|'.'
name|'_context'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'item'
name|'in'
name|'enumerate'
op|'('
name|'mylist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'foo'"
op|']'
op|','
name|'item'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'bar'"
op|']'
op|','
name|'item'
op|'.'
name|'bar'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'missing'"
op|']'
op|','
name|'item'
op|'.'
name|'missing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compare_obj
dedent|''
dedent|''
dedent|''
name|'def'
name|'compare_obj'
op|'('
name|'test'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'None'
op|','
name|'allow_missing'
op|'='
name|'None'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compare a NovaObject and a dict-like database object.\n\n    This automatically converts TZ-aware datetimes and iterates over\n    the fields of the object.\n\n    :param:test: The TestCase doing the comparison\n    :param:obj: The NovaObject to examine\n    :param:db_obj: The dict-like database object to use as reference\n    :param:subs: A dict of objkey=dbkey field substitutions\n    :param:allow_missing: A list of fields that may not be in db_obj\n    :param:comparators: Map of comparator functions to use for certain fields\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'subs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'subs'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'allow_missing'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'allow_missing'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'comparators'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'comparators'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'obj'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'allow_missing'
name|'and'
name|'not'
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'obj_val'
op|'='
name|'getattr'
op|'('
name|'obj'
op|','
name|'key'
op|')'
newline|'\n'
name|'db_key'
op|'='
name|'subs'
op|'.'
name|'get'
op|'('
name|'key'
op|','
name|'key'
op|')'
newline|'\n'
name|'db_val'
op|'='
name|'db_obj'
op|'['
name|'db_key'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj_val'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj_val'
op|'='
name|'obj_val'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
name|'comparators'
op|':'
newline|'\n'
indent|'            '
name|'comparator'
op|'='
name|'comparators'
op|'['
name|'key'
op|']'
newline|'\n'
name|'comparator'
op|'('
name|'db_val'
op|','
name|'obj_val'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'test'
op|'.'
name|'assertEqual'
op|'('
name|'db_val'
op|','
name|'obj_val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'_BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remote_object_calls'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake-user'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake-project'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): register these here instead of at import time'
nl|'\n'
comment|"# so that they're not always present"
nl|'\n'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyObj'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyObjDiffVers'
op|')'
newline|'\n'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyOwnedObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compare_obj
dedent|''
name|'def'
name|'compare_obj'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'None'
op|','
name|'allow_missing'
op|'='
name|'None'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compare_obj'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'subs'
op|','
name|'allow_missing'
op|'='
name|'allow_missing'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'comparators'
op|')'
newline|'\n'
nl|'\n'
DECL|member|str_comparator
dedent|''
name|'def'
name|'str_comparator'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'obj_val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare an object field to a string in the db by performing\n        a simple coercion on the object field value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'str'
op|'('
name|'obj_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertNotIsInstance
dedent|''
name|'def'
name|'assertNotIsInstance'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'cls'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Python < v2.7 compatibility.  Assert \'not isinstance(obj, cls)."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'super'
op|'('
name|'_BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'assertNotIsInstance'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'obj'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'Not'
op|'('
name|'matchers'
op|'.'
name|'IsInstance'
op|'('
name|'cls'
op|')'
op|')'
op|','
nl|'\n'
name|'message'
op|'='
name|'msg'
name|'or'
string|"''"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
name|'obj'
op|','
name|'cls'
op|','
name|'msg'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LocalTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'_LocalTest'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_LocalTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# Just in case'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'nova_fixtures'
op|'.'
name|'IndirectionAPIFixture'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|things_temporarily_local
name|'def'
name|'things_temporarily_local'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Temporarily go non-remote so the conductor handles'
nl|'\n'
comment|'# this request directly'
nl|'\n'
indent|'    '
name|'_api'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
newline|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'None'
newline|'\n'
name|'yield'
newline|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'_api'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeIndirectionHack
dedent|''
name|'class'
name|'FakeIndirectionHack'
op|'('
name|'fixture'
op|'.'
name|'FakeIndirectionAPI'
op|')'
op|':'
newline|'\n'
DECL|member|object_action
indent|'    '
name|'def'
name|'object_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'objinst'
op|','
name|'objmethod'
op|','
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objinst'
op|'='
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'deserialize_entity'
op|'('
nl|'\n'
name|'context'
op|','
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'serialize_entity'
op|'('
nl|'\n'
name|'context'
op|','
name|'objinst'
op|')'
op|')'
newline|'\n'
name|'objmethod'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'objmethod'
op|')'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'deserialize_entity'
op|'('
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'deserialize_entity'
op|'('
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'original'
op|'='
name|'objinst'
op|'.'
name|'obj_clone'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.base.NovaObject.'"
nl|'\n'
string|"'indirection_api'"
op|','
name|'new'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'getattr'
op|'('
name|'objinst'
op|','
name|'objmethod'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'updates'
op|'='
name|'self'
op|'.'
name|'_get_changes'
op|'('
name|'original'
op|','
name|'objinst'
op|')'
newline|'\n'
name|'updates'
op|'['
string|"'obj_what_changed'"
op|']'
op|'='
name|'objinst'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
newline|'\n'
name|'return'
name|'updates'
op|','
name|'result'
newline|'\n'
nl|'\n'
DECL|member|object_class_action
dedent|''
name|'def'
name|'object_class_action'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'objname'
op|','
name|'objmethod'
op|','
name|'objver'
op|','
nl|'\n'
name|'args'
op|','
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'objname'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'objname'
op|')'
newline|'\n'
name|'objmethod'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'objmethod'
op|')'
newline|'\n'
name|'objver'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'objver'
op|')'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'deserialize_entity'
op|'('
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'deserialize_entity'
op|'('
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'_ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'kwargs'
op|')'
op|')'
newline|'\n'
name|'cls'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
name|'objname'
op|','
name|'objver'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.base.NovaObject.'"
nl|'\n'
string|"'indirection_api'"
op|','
name|'new'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'getattr'
op|'('
name|'cls'
op|','
name|'objmethod'
op|')'
op|'('
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
nl|'\n'
name|'result'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
name|'objver'
op|')'
op|','
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
name|'else'
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IndirectionFixture
dedent|''
dedent|''
name|'class'
name|'IndirectionFixture'
op|'('
name|'fixtures'
op|'.'
name|'Fixture'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IndirectionFixture'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'indirection_api'
op|'='
name|'FakeIndirectionHack'
op|'('
name|'serializer'
op|'='
name|'ser'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'MonkeyPatch'
op|'('
nl|'\n'
string|"'nova.objects.base.NovaObject.indirection_api'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'indirection_api'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_RemoteTest
dedent|''
dedent|''
name|'class'
name|'_RemoteTest'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_RemoteTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'IndirectionFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TestObject
dedent|''
dedent|''
name|'class'
name|'_TestObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|test_object_attrs_in_init
indent|'    '
name|'def'
name|'test_object_attrs_in_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Spot check a few'
nl|'\n'
indent|'        '
name|'objects'
op|'.'
name|'Instance'
newline|'\n'
name|'objects'
op|'.'
name|'InstanceInfoCache'
newline|'\n'
name|'objects'
op|'.'
name|'SecurityGroup'
newline|'\n'
comment|'# Now check the test one in this file. Should be newest version'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'objects'
op|'.'
name|'MyObj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_type_error
dedent|''
name|'def'
name|'test_hydration_type_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'a'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration
dedent|''
name|'def'
name|'test_hydration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'real_method'
op|'='
name|'MyObj'
op|'.'
name|'_obj_from_primitive'
newline|'\n'
nl|'\n'
DECL|function|_obj_from_primitive
name|'def'
name|'_obj_from_primitive'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'real_method'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'MyObj'
op|','
string|"'_obj_from_primitive'"
op|')'
name|'as'
name|'ofp'
op|':'
newline|'\n'
indent|'            '
name|'ofp'
op|'.'
name|'side_effect'
op|'='
name|'_obj_from_primitive'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'ofp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'None'
op|','
string|"'1.5'"
op|','
name|'primitive'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_version_different
dedent|''
name|'def'
name|'test_hydration_version_different'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.2'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.2'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_bad_ns
dedent|''
name|'def'
name|'test_hydration_bad_ns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'UnsupportedObjectError'
op|','
nl|'\n'
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_additional_unexpected_stuff
dedent|''
name|'def'
name|'test_hydration_additional_unexpected_stuff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5.1'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
nl|'\n'
string|"'foo'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'unexpected_thing'"
op|':'
string|"'foobar'"
op|'}'
op|'}'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'obj'
op|','
string|"'unexpected_thing'"
op|')'
op|')'
newline|'\n'
comment|'# NOTE(danms): If we call obj_from_primitive() directly'
nl|'\n'
comment|"# with a version containing .z, we'll get that version"
nl|'\n'
comment|'# in the resulting object. In reality, when using the'
nl|'\n'
comment|"# serializer, we'll get that snipped off (tested"
nl|'\n'
comment|'# elsewhere)'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.5.1'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dehydration
dedent|''
name|'def'
name|'test_dehydration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_property
dedent|''
name|'def'
name|'test_object_property'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_property_type_error
dedent|''
name|'def'
name|'test_object_property_type_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fail
name|'def'
name|'fail'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'foo'
op|'='
string|"'a'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'fail'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_load
dedent|''
name|'def'
name|'test_load'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_load_in_base
dedent|''
name|'def'
name|'test_load_in_base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|Foo
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foobar'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
op|')'
newline|'\n'
name|'with'
name|'self'
op|'.'
name|'assertRaisesRegex'
op|'('
name|'NotImplementedError'
op|','
string|'".*foobar.*"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'foobar'
newline|'\n'
nl|'\n'
DECL|member|test_loaded_in_primitive
dedent|''
dedent|''
name|'def'
name|'test_loaded_in_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.changes'"
op|':'
op|'['
string|"'bar'"
op|']'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'bar'"
op|':'
string|"'loaded!'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changes_in_primitive
dedent|''
name|'def'
name|'test_changes_in_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nova_object.changes'"
op|','
name|'primitive'
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name
dedent|''
name|'def'
name|'test_obj_class_from_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.5'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name_latest_compatible
dedent|''
name|'def'
name|'test_obj_class_from_name_latest_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unknown_objtype
dedent|''
name|'def'
name|'test_unknown_objtype'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'UnsupportedObjectError'
op|','
nl|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|','
string|"'foo'"
op|','
string|"'1.0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name_supported_version
dedent|''
name|'def'
name|'test_obj_class_from_name_supported_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.25'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ovo_exc'
op|'.'
name|'IncompatibleObjectVersion'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'error'
op|'='
name|'ex'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'error'
op|'.'
name|'kwargs'
op|'['
string|"'supported'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_orphaned_object
dedent|''
name|'def'
name|'test_orphaned_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_context'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'OrphanedObjectError'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_1
dedent|''
name|'def'
name|'test_changed_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_2
dedent|''
name|'def'
name|'test_changed_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_3
dedent|''
name|'def'
name|'test_changed_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'refreshed'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_4
dedent|''
name|'def'
name|'test_changed_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
string|"'something'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'bar'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'modify_save_modify'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'rel_object'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'meow'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'obj'
op|'.'
name|'rel_object'
op|','
name|'MyOwnedObject'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_with_sub_object
dedent|''
name|'def'
name|'test_changed_with_sub_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|ParentObject
name|'class'
name|'ParentObject'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
string|"'bar'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyObj'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'obj'
op|'='
name|'ParentObject'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
name|'bar'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'bar'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_static_result
dedent|''
name|'def'
name|'test_static_result'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'obj'
op|'.'
name|'marco'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
string|"'polo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates
dedent|''
name|'def'
name|'test_updates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'updated'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_base_attributes
dedent|''
name|'def'
name|'test_base_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dt'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'created_at'
op|'='
name|'dt'
op|','
name|'updated_at'
op|'='
name|'dt'
op|','
name|'deleted_at'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleted'
op|'='
name|'False'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.changes'"
op|':'
nl|'\n'
op|'['
string|"'deleted'"
op|','
string|"'created_at'"
op|','
string|"'deleted_at'"
op|','
string|"'updated_at'"
op|']'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
nl|'\n'
op|'{'
string|"'created_at'"
op|':'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'dt'
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'dt'
op|')'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'actual'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertJsonEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_contains
dedent|''
name|'def'
name|'test_contains'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'foo'"
op|','
name|'obj'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'foo'"
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'does_not_exist'"
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_attr_is_set
dedent|''
name|'def'
name|'test_obj_attr_is_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|','
string|"'bang'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_reset_changes_recursive
dedent|''
name|'def'
name|'test_obj_reset_changes_recursive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'rel_object'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'123'
op|')'
op|','
nl|'\n'
name|'rel_objects'
op|'='
op|'['
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'456'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'rel_object'"
op|','
string|"'rel_objects'"
op|']'
op|')'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'rel_object'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'baz'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'rel_object'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'baz'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'rel_objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
name|'recursive'
op|'='
name|'True'
op|','
name|'fields'
op|'='
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'rel_object'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'baz'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'rel_object'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'baz'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'rel_objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
name|'recursive'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'rel_object'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
comment|'# Foo has value, should not get the default'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'foo'"
op|','
number|'2'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Foo has value, should return the value without error'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'foo'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Bar is not loaded, so we should get the default'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|','
string|"'not-loaded'"
op|')'
op|','
string|"'not-loaded'"
op|')'
newline|'\n'
comment|'# Bar without a default should lazy-load'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|')'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
comment|'# Bar now has a default, but loaded value should be returned'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|','
string|"'not-loaded'"
op|')'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
comment|'# Invalid attribute should raise AttributeError'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'get'
op|','
string|"'nothing'"
op|')'
newline|'\n'
comment|'# ...even with a default'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'get'
op|','
string|"'nothing'"
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_inheritance
dedent|''
name|'def'
name|'test_object_inheritance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_fields'
op|'='
name|'base'
op|'.'
name|'NovaPersistentObject'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'myobj_fields'
op|'='
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'missing'"
op|','
nl|'\n'
string|"'readonly'"
op|','
string|"'rel_object'"
op|','
nl|'\n'
string|"'rel_objects'"
op|','
string|"'mutable_default'"
op|']'
op|'+'
nl|'\n'
name|'list'
op|'('
name|'base_fields'
op|')'
op|')'
newline|'\n'
name|'myobj3_fields'
op|'='
op|'['
string|"'new_field'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'issubclass'
op|'('
name|'TestSubclassedObject'
op|','
name|'MyObj'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'myobj_fields'
op|')'
op|','
name|'len'
op|'('
name|'MyObj'
op|'.'
name|'fields'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'myobj_fields'
op|')'
op|','
name|'set'
op|'('
name|'MyObj'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'myobj_fields'
op|')'
op|'+'
name|'len'
op|'('
name|'myobj3_fields'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'TestSubclassedObject'
op|'.'
name|'fields'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'myobj_fields'
op|')'
op|'|'
name|'set'
op|'('
name|'myobj3_fields'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
name|'TestSubclassedObject'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_as_admin
dedent|''
name|'def'
name|'test_obj_as_admin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'obj'
op|'.'
name|'_context'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'obj'
op|','
string|"'obj_reset_changes'"
op|')'
name|'as'
name|'mock_fn'
op|':'
newline|'\n'
indent|'            '
name|'mock_fn'
op|'.'
name|'side_effect'
op|'='
name|'fake'
newline|'\n'
name|'with'
name|'obj'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_fn'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'obj'
op|'.'
name|'_context'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_as_admin_orphaned
dedent|''
name|'def'
name|'test_obj_as_admin_orphaned'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|testme
indent|'        '
name|'def'
name|'testme'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'with'
name|'obj'
op|'.'
name|'obj_as_admin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'OrphanedObjectError'
op|','
name|'testme'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_alternate_context
dedent|''
name|'def'
name|'test_obj_alternate_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'with'
name|'obj'
op|'.'
name|'obj_alternate_context'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'alt_ctx'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'alt_ctx'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'_context'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'obj'
op|'.'
name|'_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_changes
dedent|''
name|'def'
name|'test_get_changes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'123'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
string|"'test'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'123'
op|','
string|"'bar'"
op|':'
string|"'test'"
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_fields
dedent|''
name|'def'
name|'test_obj_fields'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestObj
name|'class'
name|'TestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_extra_fields
name|'obj_extra_fields'
op|'='
op|'['
string|"'bar'"
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'this is bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'obj'
op|'='
name|'TestObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
name|'obj'
op|'.'
name|'obj_fields'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_constructor
dedent|''
name|'def'
name|'test_obj_constructor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'123'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'abc'"
op|','
name|'obj'
op|'.'
name|'bar'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_read_only
dedent|''
name|'def'
name|'test_obj_read_only'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'readonly'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'ReadOnlyFieldError'
op|','
name|'setattr'
op|','
nl|'\n'
name|'obj'
op|','
string|"'readonly'"
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_mutable_default
dedent|''
name|'def'
name|'test_obj_mutable_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'mutable_default'
op|'='
name|'None'
newline|'\n'
name|'obj'
op|'.'
name|'mutable_default'
op|'.'
name|'append'
op|'('
string|"'s1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'mutable_default'
op|','
op|'['
string|"'s1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'obj1'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'mutable_default'
op|'='
name|'None'
newline|'\n'
name|'obj1'
op|'.'
name|'mutable_default'
op|'.'
name|'append'
op|'('
string|"'s2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj1'
op|'.'
name|'mutable_default'
op|','
op|'['
string|"'s2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_mutable_default_set_default
dedent|''
name|'def'
name|'test_obj_mutable_default_set_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'obj_set_defaults'
op|'('
string|"'mutable_default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj1'
op|'.'
name|'mutable_default'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'mutable_default'
op|'.'
name|'append'
op|'('
string|"'s1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj1'
op|'.'
name|'mutable_default'
op|','
op|'['
string|"'s1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_set_defaults'
op|'('
string|"'mutable_default'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'mutable_default'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'mutable_default'
op|'.'
name|'append'
op|'('
string|"'s2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'mutable_default'
op|','
op|'['
string|"'s2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_repr
dedent|''
name|'def'
name|'test_obj_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'MyObj(bar=<?>,created_at=<?>,deleted=<?>,'"
nl|'\n'
string|"'deleted_at=<?>,foo=123,missing=<?>,'"
nl|'\n'
string|"'mutable_default=<?>,readonly=<?>,rel_object=<?>,'"
nl|'\n'
string|"'rel_objects=<?>,updated_at=<?>)'"
op|','
nl|'\n'
name|'repr'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_obj_compatible
dedent|''
name|'def'
name|'test_obj_make_obj_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subobj'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'1'
op|')'
newline|'\n'
name|'subobj'
op|'.'
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'rel_object'
op|'='
name|'subobj'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'rel_object'"
op|':'
op|'['
op|'('
string|"'1.5'"
op|','
string|"'1.1'"
op|')'
op|','
op|'('
string|"'1.7'"
op|','
string|"'1.2'"
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'orig_primitive'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'orig_primitive'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
string|"'1.8'"
op|','
string|"'rel_object'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_compat'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'orig_primitive'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
string|"'1.7'"
op|','
string|"'rel_object'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_compat'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'orig_primitive'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
string|"'1.6'"
op|','
string|"'rel_object'"
op|')'
newline|'\n'
name|'mock_compat'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'primitive'
op|'['
string|"'rel_object'"
op|']'
op|'['
string|"'nova_object.data'"
op|']'
op|','
string|"'1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.1'"
op|','
nl|'\n'
name|'primitive'
op|'['
string|"'rel_object'"
op|']'
op|'['
string|"'nova_object.version'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'orig_primitive'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
string|"'1.5'"
op|','
string|"'rel_object'"
op|')'
newline|'\n'
name|'mock_compat'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'primitive'
op|'['
string|"'rel_object'"
op|']'
op|'['
string|"'nova_object.data'"
op|']'
op|','
string|"'1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.1'"
op|','
nl|'\n'
name|'primitive'
op|'['
string|"'rel_object'"
op|']'
op|'['
string|"'nova_object.version'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'orig_primitive'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_obj_make_obj_compatible'
op|'('
name|'primitive'
op|','
string|"'1.4'"
op|','
string|"'rel_object'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_compat'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'rel_object'"
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_hits_sub_objects
dedent|''
dedent|''
name|'def'
name|'test_obj_make_compatible_hits_sub_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subobj'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|','
name|'rel_object'
op|'='
name|'subobj'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_relationships'
op|'='
op|'{'
string|"'rel_object'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.0'"
op|')'
op|']'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'obj'
op|','
string|"'_obj_make_obj_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'obj_make_compatible'
op|'('
op|'{'
string|"'rel_object'"
op|':'
string|"'foo'"
op|'}'
op|','
string|"'1.10'"
op|')'
newline|'\n'
name|'mock_compat'
op|'.'
name|'assert_called_once_with'
op|'('
op|'{'
string|"'rel_object'"
op|':'
string|"'foo'"
op|'}'
op|','
string|"'1.10'"
op|','
nl|'\n'
string|"'rel_object'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_skips_unset_sub_objects
dedent|''
dedent|''
name|'def'
name|'test_obj_make_compatible_skips_unset_sub_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_relationships'
op|'='
op|'{'
string|"'rel_object'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.0'"
op|')'
op|']'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'obj'
op|','
string|"'_obj_make_obj_compatible'"
op|')'
name|'as'
name|'mock_compat'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'obj_make_compatible'
op|'('
op|'{'
string|"'rel_object'"
op|':'
string|"'foo'"
op|'}'
op|','
string|"'1.10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_compat'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_complains_about_missing_rules
dedent|''
dedent|''
name|'def'
name|'test_obj_make_compatible_complains_about_missing_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subobj'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|','
name|'rel_object'
op|'='
name|'subobj'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_relationships'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ObjectActionError'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'obj_make_compatible'
op|','
op|'{'
op|'}'
op|','
string|"'1.0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_doesnt_skip_falsey_sub_objects
dedent|''
name|'def'
name|'test_obj_make_compatible_doesnt_skip_falsey_sub_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|MyList
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObjElement'"
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
op|'['
op|'('
string|"'1.1'"
op|','
string|"'1.1'"
op|')'
op|','
op|'('
string|"'1.2'"
op|','
string|"'1.2'"
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mylist'
op|'='
name|'MyList'
op|'('
name|'objects'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|MyOwner
name|'class'
name|'MyOwner'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'mylist'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyList'"
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'mylist'"
op|':'
op|'['
op|'('
string|"'1.1'"
op|','
string|"'1.1'"
op|')'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'myowner'
op|'='
name|'MyOwner'
op|'('
name|'mylist'
op|'='
name|'mylist'
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'myowner'
op|'.'
name|'obj_to_primitive'
op|'('
string|"'1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'mylist'"
op|','
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_handles_list_of_objects
dedent|''
name|'def'
name|'test_obj_make_compatible_handles_list_of_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'subobj'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'rel_objects'
op|'='
op|'['
name|'subobj'
op|']'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_relationships'
op|'='
op|'{'
string|"'rel_objects'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.123'"
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_make_compat
name|'def'
name|'fake_make_compat'
op|'('
name|'primitive'
op|','
name|'version'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.123'"
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'baz'"
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'subobj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'mock_mc'
op|':'
newline|'\n'
indent|'            '
name|'mock_mc'
op|'.'
name|'side_effect'
op|'='
name|'fake_make_compat'
newline|'\n'
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
string|"'1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_mc'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delattr
dedent|''
dedent|''
name|'def'
name|'test_delattr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'bar'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'del'
name|'obj'
op|'.'
name|'bar'
newline|'\n'
nl|'\n'
comment|'# Should appear unset now'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure post-delete, references trigger lazy loads'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'loaded!'"
op|','
name|'getattr'
op|'('
name|'obj'
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delattr_unset
dedent|''
name|'def'
name|'test_delattr_unset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'delattr'
op|','
name|'obj'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObject
dedent|''
dedent|''
name|'class'
name|'TestObject'
op|'('
name|'_LocalTest'
op|','
name|'_TestObject'
op|')'
op|':'
newline|'\n'
DECL|member|test_set_defaults
indent|'    '
name|'def'
name|'test_set_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_set_defaults'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_defaults_no_default
dedent|''
name|'def'
name|'test_set_defaults_no_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'ObjectActionError'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'obj_set_defaults'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_all_defaults
dedent|''
name|'def'
name|'test_set_all_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_set_defaults'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'deleted'"
op|','
string|"'foo'"
op|','
string|"'mutable_default'"
op|']'
op|')'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_defaults_not_overwrite
dedent|''
name|'def'
name|'test_set_defaults_not_overwrite'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): deleted defaults to False, so verify that it does'
nl|'\n'
comment|'# not get reset by obj_set_defaults()'
nl|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'deleted'
op|'='
name|'True'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_set_defaults'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'obj'
op|'.'
name|'deleted'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRemoteObject
dedent|''
dedent|''
name|'class'
name|'TestRemoteObject'
op|'('
name|'_RemoteTest'
op|','
name|'_TestObject'
op|')'
op|':'
newline|'\n'
DECL|member|test_major_version_mismatch
indent|'    '
name|'def'
name|'test_major_version_mismatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'2.0'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'IncompatibleObjectVersion'
op|','
nl|'\n'
name|'MyObj2'
op|'.'
name|'query'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_minor_version_greater
dedent|''
name|'def'
name|'test_minor_version_greater'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.7'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'IncompatibleObjectVersion'
op|','
nl|'\n'
name|'MyObj2'
op|'.'
name|'query'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_minor_version_less
dedent|''
name|'def'
name|'test_minor_version_less'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj2'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compat
dedent|''
name|'def'
name|'test_compat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj2'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'oldbar'"
op|','
name|'obj'
op|'.'
name|'bar'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_revision_ignored
dedent|''
name|'def'
name|'test_revision_ignored'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.1.456'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj2'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'bar'"
op|','
name|'obj'
op|'.'
name|'bar'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectSerializer
dedent|''
dedent|''
name|'class'
name|'TestObjectSerializer'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_serialize_entity_primitive
indent|'    '
name|'def'
name|'test_serialize_entity_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'for'
name|'thing'
name|'in'
op|'('
number|'1'
op|','
string|"'foo'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'thing'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_primitive
dedent|''
dedent|''
name|'def'
name|'test_deserialize_entity_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'for'
name|'thing'
name|'in'
op|'('
number|'1'
op|','
string|"'foo'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'None'
op|','
name|'thing'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serialize_set_to_list
dedent|''
dedent|''
name|'def'
name|'test_serialize_set_to_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_deserialize_entity_newer
dedent|''
name|'def'
name|'_test_deserialize_entity_newer'
op|'('
name|'self'
op|','
name|'obj_version'
op|','
name|'backported_to'
op|','
nl|'\n'
name|'my_version'
op|'='
string|"'1.6'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'.'
name|'object_backport'
op|'.'
name|'return_value'
op|'='
string|"'backported'"
newline|'\n'
nl|'\n'
DECL|class|MyTestObj
name|'class'
name|'MyTestObj'
op|'('
name|'MyObj'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
name|'my_version'
newline|'\n'
nl|'\n'
dedent|''
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'MyTestObj'
op|')'
newline|'\n'
nl|'\n'
name|'obj'
op|'='
name|'MyTestObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'VERSION'
op|'='
name|'obj_version'
newline|'\n'
name|'primitive'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'if'
name|'backported_to'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'ser'
op|'.'
name|'_conductor'
op|'.'
name|'object_backport'
op|'.'
name|'called'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'backported'"
op|','
name|'result'
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'.'
name|'object_backport'
op|'.'
name|'assert_called_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'primitive'
op|','
nl|'\n'
name|'backported_to'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_newer_version_backports
dedent|''
dedent|''
name|'def'
name|'test_deserialize_entity_newer_version_backports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deserialize_entity_newer'
op|'('
string|"'1.25'"
op|','
string|"'1.6'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_newer_revision_does_not_backport_zero
dedent|''
name|'def'
name|'test_deserialize_entity_newer_revision_does_not_backport_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deserialize_entity_newer'
op|'('
string|"'1.6.0'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_newer_revision_does_not_backport
dedent|''
name|'def'
name|'test_deserialize_entity_newer_revision_does_not_backport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deserialize_entity_newer'
op|'('
string|"'1.6.1'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_newer_version_passes_revision
dedent|''
name|'def'
name|'test_deserialize_entity_newer_version_passes_revision'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deserialize_entity_newer'
op|'('
string|"'1.7'"
op|','
string|"'1.6.1'"
op|','
string|"'1.6.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_dot_z_with_extra_stuff
dedent|''
name|'def'
name|'test_deserialize_dot_z_with_extra_stuff'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6.1'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
nl|'\n'
string|"'foo'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'unexpected_thing'"
op|':'
string|"'foobar'"
op|'}'
op|'}'
newline|'\n'
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hasattr'
op|'('
name|'obj'
op|','
string|"'unexpected_thing'"
op|')'
op|')'
newline|'\n'
comment|'# NOTE(danms): The serializer is where the logic lives that'
nl|'\n'
comment|'# avoids backports for cases where only a .z difference in'
nl|'\n'
comment|'# the received object version is detected. As a result, we'
nl|'\n'
comment|'# end up with a version of what we expected, effectively the'
nl|'\n'
comment|'# .0 of the object.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nested_backport
dedent|''
name|'def'
name|'test_nested_backport'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|Parent
name|'class'
name|'Parent'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'child'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyObj'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
comment|'# noqa'
newline|'\n'
DECL|class|Parent
name|'class'
name|'Parent'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'child'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyObj'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'child'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'parent'
op|'='
name|'Parent'
op|'('
name|'child'
op|'='
name|'child'
op|')'
newline|'\n'
name|'prim'
op|'='
name|'parent'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'child_prim'
op|'='
name|'prim'
op|'['
string|"'nova_object.data'"
op|']'
op|'['
string|"'child'"
op|']'
newline|'\n'
name|'child_prim'
op|'['
string|"'nova_object.version'"
op|']'
op|'='
string|"'1.10'"
newline|'\n'
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ser'
op|'.'
name|'conductor'
op|','
string|"'object_backport'"
op|')'
name|'as'
name|'backport'
op|':'
newline|'\n'
indent|'            '
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'prim'
op|')'
newline|'\n'
comment|'# NOTE(danms): This should be the version of the parent object,'
nl|'\n'
comment|"# not the child. If wrong, this will be '1.6', which is the max"
nl|'\n'
comment|'# child version in our registry.'
nl|'\n'
name|'backport'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'prim'
op|','
string|"'1.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_serialization
dedent|''
dedent|''
name|'def'
name|'test_object_serialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nova_object.name'"
op|','
name|'primitive'
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'obj2'
op|','
name|'MyObj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'obj2'
op|'.'
name|'_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_serialization_iterables
dedent|''
name|'def'
name|'test_object_serialization_iterables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'for'
name|'iterable'
name|'in'
op|'('
name|'list'
op|','
name|'tuple'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'='
name|'iterable'
op|'('
op|'['
name|'obj'
op|']'
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'primitive'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'primitive'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'item'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
dedent|''
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'thing2'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'thing2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'item'
op|','
name|'MyObj'
op|')'
newline|'\n'
comment|'# dict case'
nl|'\n'
dedent|''
dedent|''
name|'thing'
op|'='
op|'{'
string|"'key'"
op|':'
name|'obj'
op|'}'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'primitive'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'six'
op|'.'
name|'itervalues'
op|'('
name|'primitive'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'item'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
dedent|''
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'thing2'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'six'
op|'.'
name|'itervalues'
op|'('
name|'thing2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'item'
op|','
name|'MyObj'
op|')'
newline|'\n'
nl|'\n'
comment|'# object-action updates dict case'
nl|'\n'
dedent|''
name|'thing'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|'}'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'thing2'
op|'['
string|"'foo'"
op|']'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestArgsSerializer
dedent|''
dedent|''
name|'class'
name|'TestArgsSerializer'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestArgsSerializer'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'str_now'
op|'='
name|'timeutils'
op|'.'
name|'strtime'
op|'('
name|'at'
op|'='
name|'self'
op|'.'
name|'now'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'serialize_args'
newline|'\n'
DECL|member|_test_serialize_args
name|'def'
name|'_test_serialize_args'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_args'
op|'='
op|'('
string|"'untouched'"
op|','
name|'self'
op|'.'
name|'str_now'
op|','
name|'self'
op|'.'
name|'str_now'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'val'
name|'in'
name|'enumerate'
op|'('
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_args'
op|'['
name|'index'
op|']'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_kwargs'
op|'='
op|'{'
string|"'a'"
op|':'
string|"'untouched'"
op|','
string|"'b'"
op|':'
name|'self'
op|'.'
name|'str_now'
op|','
nl|'\n'
string|"'c'"
op|':'
name|'self'
op|'.'
name|'str_now'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_kwargs'
op|'['
name|'key'
op|']'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serialize_args
dedent|''
dedent|''
name|'def'
name|'test_serialize_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_serialize_args'
op|'('
string|"'untouched'"
op|','
name|'self'
op|'.'
name|'now'
op|','
name|'self'
op|'.'
name|'now'
op|','
nl|'\n'
name|'a'
op|'='
string|"'untouched'"
op|','
name|'b'
op|'='
name|'self'
op|'.'
name|'now'
op|','
name|'c'
op|'='
name|'self'
op|'.'
name|'now'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(danms): The hashes in this list should only be changed if'
nl|'\n'
comment|'# they come with a corresponding version bump in the affected'
nl|'\n'
comment|'# objects'
nl|'\n'
DECL|variable|object_data
dedent|''
dedent|''
name|'object_data'
op|'='
op|'{'
nl|'\n'
string|"'Agent'"
op|':'
string|"'1.0-c0c092abaceb6f51efe5d82175f15eba'"
op|','
nl|'\n'
string|"'AgentList'"
op|':'
string|"'1.0-5a7380d02c3aaf2a32fc8115ae7ca98c'"
op|','
nl|'\n'
string|"'Aggregate'"
op|':'
string|"'1.1-1ab35c4516f71de0bef7087026ab10d1'"
op|','
nl|'\n'
string|"'AggregateList'"
op|':'
string|"'1.2-fb6e19f3c3a3186b04eceb98b5dadbfa'"
op|','
nl|'\n'
string|"'BandwidthUsage'"
op|':'
string|"'1.2-c6e4c779c7f40f2407e3d70022e3cd1c'"
op|','
nl|'\n'
string|"'BandwidthUsageList'"
op|':'
string|"'1.2-5fe7475ada6fe62413cbfcc06ec70746'"
op|','
nl|'\n'
string|"'BlockDeviceMapping'"
op|':'
string|"'1.14-d44d8d694619e79c172a99b3c1d6261d'"
op|','
nl|'\n'
string|"'BlockDeviceMappingList'"
op|':'
string|"'1.15-6fa262c059dad1d519b9fe05b9e4f404'"
op|','
nl|'\n'
string|"'CellMapping'"
op|':'
string|"'1.0-7f1a7e85a22bbb7559fc730ab658b9bd'"
op|','
nl|'\n'
string|"'ComputeNode'"
op|':'
string|"'1.13-1e370701d1d10a88d94c02c34098d2a9'"
op|','
nl|'\n'
string|"'ComputeNodeList'"
op|':'
string|"'1.13-3b6f4f5ade621c40e70cb116db237844'"
op|','
nl|'\n'
string|"'DNSDomain'"
op|':'
string|"'1.0-7b0b2dab778454b6a7b6c66afe163a1a'"
op|','
nl|'\n'
string|"'DNSDomainList'"
op|':'
string|"'1.0-4ee0d9efdfd681fed822da88376e04d2'"
op|','
nl|'\n'
string|"'EC2Ids'"
op|':'
string|"'1.0-474ee1094c7ec16f8ce657595d8c49d9'"
op|','
nl|'\n'
string|"'EC2InstanceMapping'"
op|':'
string|"'1.0-a4556eb5c5e94c045fe84f49cf71644f'"
op|','
nl|'\n'
string|"'EC2SnapshotMapping'"
op|':'
string|"'1.0-47e7ddabe1af966dce0cfd0ed6cd7cd1'"
op|','
nl|'\n'
string|"'EC2VolumeMapping'"
op|':'
string|"'1.0-5b713751d6f97bad620f3378a521020d'"
op|','
nl|'\n'
string|"'FixedIP'"
op|':'
string|"'1.12-b5818a33996228fc146f096d1403742c'"
op|','
nl|'\n'
string|"'FixedIPList'"
op|':'
string|"'1.12-87a39361c8f08f059004d6b15103cdfd'"
op|','
nl|'\n'
string|"'Flavor'"
op|':'
string|"'1.1-b6bb7a730a79d720344accefafacf7ee'"
op|','
nl|'\n'
string|"'FlavorList'"
op|':'
string|"'1.1-52b5928600e7ca973aa4fc1e46f3934c'"
op|','
nl|'\n'
string|"'FloatingIP'"
op|':'
string|"'1.8-52a67d52d85eb8b3f324a5b7935a335b'"
op|','
nl|'\n'
string|"'FloatingIPList'"
op|':'
string|"'1.9-7f2ba670714e1b7bab462ab3290f7159'"
op|','
nl|'\n'
string|"'HostMapping'"
op|':'
string|"'1.0-1a3390a696792a552ab7bd31a77ba9ac'"
op|','
nl|'\n'
string|"'HVSpec'"
op|':'
string|"'1.1-6b4f7c0f688cbd03e24142a44eb9010d'"
op|','
nl|'\n'
string|"'ImageMeta'"
op|':'
string|"'1.6-642d1b2eb3e880a367f37d72dd76162d'"
op|','
nl|'\n'
string|"'ImageMetaProps'"
op|':'
string|"'1.6-07a6d9f3576c4927220331584661ce45'"
op|','
nl|'\n'
string|"'Instance'"
op|':'
string|"'1.22-260d385315d4868b6397c61a13109841'"
op|','
nl|'\n'
string|"'InstanceAction'"
op|':'
string|"'1.1-f9f293e526b66fca0d05c3b3a2d13914'"
op|','
nl|'\n'
string|"'InstanceActionEvent'"
op|':'
string|"'1.1-e56a64fa4710e43ef7af2ad9d6028b33'"
op|','
nl|'\n'
string|"'InstanceActionEventList'"
op|':'
string|"'1.1-13d92fb953030cdbfee56481756e02be'"
op|','
nl|'\n'
string|"'InstanceActionList'"
op|':'
string|"'1.0-4a53826625cc280e15fae64a575e0879'"
op|','
nl|'\n'
string|"'InstanceExternalEvent'"
op|':'
string|"'1.1-6e446ceaae5f475ead255946dd443417'"
op|','
nl|'\n'
string|"'InstanceFault'"
op|':'
string|"'1.2-7ef01f16f1084ad1304a513d6d410a38'"
op|','
nl|'\n'
string|"'InstanceFaultList'"
op|':'
string|"'1.1-f8ec07cbe3b60f5f07a8b7a06311ac0d'"
op|','
nl|'\n'
string|"'InstanceGroup'"
op|':'
string|"'1.9-a413a4ec0ff391e3ef0faa4e3e2a96d0'"
op|','
nl|'\n'
string|"'InstanceGroupList'"
op|':'
string|"'1.6-be18078220513316abd0ae1b2d916873'"
op|','
nl|'\n'
string|"'InstanceInfoCache'"
op|':'
string|"'1.5-cd8b96fefe0fc8d4d337243ba0bf0e1e'"
op|','
nl|'\n'
string|"'InstanceList'"
op|':'
string|"'1.21-6c8ba6147cca3082b1e4643f795068bf'"
op|','
nl|'\n'
string|"'InstanceMapping'"
op|':'
string|"'1.0-47ef26034dfcbea78427565d9177fe50'"
op|','
nl|'\n'
string|"'InstanceMappingList'"
op|':'
string|"'1.0-9e982e3de1613b9ada85e35f69b23d47'"
op|','
nl|'\n'
string|"'InstanceNUMACell'"
op|':'
string|"'1.2-535ef30e0de2d6a0d26a71bd58ecafc4'"
op|','
nl|'\n'
string|"'InstanceNUMATopology'"
op|':'
string|"'1.2-d944a7d6c21e1c773ffdf09c6d025954'"
op|','
nl|'\n'
string|"'InstancePCIRequest'"
op|':'
string|"'1.1-b1d75ebc716cb12906d9d513890092bf'"
op|','
nl|'\n'
string|"'InstancePCIRequests'"
op|':'
string|"'1.1-65e38083177726d806684cb1cc0136d2'"
op|','
nl|'\n'
string|"'KeyPair'"
op|':'
string|"'1.3-bfaa2a8b148cdf11e0c72435d9dd097a'"
op|','
nl|'\n'
string|"'KeyPairList'"
op|':'
string|"'1.2-58b94f96e776bedaf1e192ddb2a24c4e'"
op|','
nl|'\n'
string|"'Migration'"
op|':'
string|"'1.2-8784125bedcea0a9227318511904e853'"
op|','
nl|'\n'
string|"'MigrationList'"
op|':'
string|"'1.2-02c0ec0c50b75ca86a2a74c5e8c911cc'"
op|','
nl|'\n'
string|"'MonitorMetric'"
op|':'
string|"'1.1-53b1db7c4ae2c531db79761e7acc52ba'"
op|','
nl|'\n'
string|"'MonitorMetricList'"
op|':'
string|"'1.1-15ecf022a68ddbb8c2a6739cfc9f8f5e'"
op|','
nl|'\n'
string|"'NUMACell'"
op|':'
string|"'1.2-74fc993ac5c83005e76e34e8487f1c05'"
op|','
nl|'\n'
string|"'NUMAPagesTopology'"
op|':'
string|"'1.0-c71d86317283266dc8364c149155e48e'"
op|','
nl|'\n'
string|"'NUMATopology'"
op|':'
string|"'1.2-c63fad38be73b6afd04715c9c1b29220'"
op|','
nl|'\n'
string|"'NUMATopologyLimits'"
op|':'
string|"'1.0-9463e0edd40f64765ae518a539b9dfd2'"
op|','
nl|'\n'
string|"'Network'"
op|':'
string|"'1.2-a977ab383aa462a479b2fae8211a5dde'"
op|','
nl|'\n'
string|"'NetworkList'"
op|':'
string|"'1.2-69eca910d8fa035dfecd8ba10877ee59'"
op|','
nl|'\n'
string|"'NetworkRequest'"
op|':'
string|"'1.1-7a3e4ca2ce1e7b62d8400488f2f2b756'"
op|','
nl|'\n'
string|"'NetworkRequestList'"
op|':'
string|"'1.1-15ecf022a68ddbb8c2a6739cfc9f8f5e'"
op|','
nl|'\n'
string|"'PciDevice'"
op|':'
string|"'1.3-d92e0b17bbed61815b919af6b8d8998e'"
op|','
nl|'\n'
string|"'PciDeviceList'"
op|':'
string|"'1.2-3757458c45591cbc92c72ee99e757c98'"
op|','
nl|'\n'
string|"'PciDevicePool'"
op|':'
string|"'1.1-3f5ddc3ff7bfa14da7f6c7e9904cc000'"
op|','
nl|'\n'
string|"'PciDevicePoolList'"
op|':'
string|"'1.1-15ecf022a68ddbb8c2a6739cfc9f8f5e'"
op|','
nl|'\n'
string|"'Quotas'"
op|':'
string|"'1.2-1fe4cd50593aaf5d36a6dc5ab3f98fb3'"
op|','
nl|'\n'
string|"'QuotasNoOp'"
op|':'
string|"'1.2-e041ddeb7dc8188ca71706f78aad41c1'"
op|','
nl|'\n'
string|"'RequestSpec'"
op|':'
string|"'1.1-6922fe208b5d1186bdd825513f677921'"
op|','
nl|'\n'
string|"'S3ImageMapping'"
op|':'
string|"'1.0-7dd7366a890d82660ed121de9092276e'"
op|','
nl|'\n'
string|"'SchedulerLimits'"
op|':'
string|"'1.0-249c4bd8e62a9b327b7026b7f19cc641'"
op|','
nl|'\n'
string|"'SchedulerRetries'"
op|':'
string|"'1.0-3c9c8b16143ebbb6ad7030e999d14cc0'"
op|','
nl|'\n'
string|"'SecurityGroup'"
op|':'
string|"'1.1-0e1b9ba42fe85c13c1437f8b74bdb976'"
op|','
nl|'\n'
string|"'SecurityGroupList'"
op|':'
string|"'1.0-dc8bbea01ba09a2edb6e5233eae85cbc'"
op|','
nl|'\n'
string|"'SecurityGroupRule'"
op|':'
string|"'1.1-ae1da17b79970012e8536f88cb3c6b29'"
op|','
nl|'\n'
string|"'SecurityGroupRuleList'"
op|':'
string|"'1.1-674b323c9ccea02e93b1b40e7fd2091a'"
op|','
nl|'\n'
string|"'Service'"
op|':'
string|"'1.17-f1c6e82b5479f63e35970fe7625c3878'"
op|','
nl|'\n'
string|"'ServiceList'"
op|':'
string|"'1.15-b767102cba7cbed290e396114c3f86b3'"
op|','
nl|'\n'
string|"'TaskLog'"
op|':'
string|"'1.0-78b0534366f29aa3eebb01860fbe18fe'"
op|','
nl|'\n'
string|"'TaskLogList'"
op|':'
string|"'1.0-cc8cce1af8a283b9d28b55fcd682e777'"
op|','
nl|'\n'
string|"'Tag'"
op|':'
string|"'1.1-8b8d7d5b48887651a0e01241672e2963'"
op|','
nl|'\n'
string|"'TagList'"
op|':'
string|"'1.1-55231bdb671ecf7641d6a2e9109b5d8e'"
op|','
nl|'\n'
string|"'VirtCPUFeature'"
op|':'
string|"'1.0-3310718d8c72309259a6e39bdefe83ee'"
op|','
nl|'\n'
string|"'VirtCPUModel'"
op|':'
string|"'1.0-6a5cc9f322729fc70ddc6733bacd57d3'"
op|','
nl|'\n'
string|"'VirtCPUTopology'"
op|':'
string|"'1.0-fc694de72e20298f7c6bab1083fd4563'"
op|','
nl|'\n'
string|"'VirtualInterface'"
op|':'
string|"'1.0-19921e38cba320f355d56ecbf8f29587'"
op|','
nl|'\n'
string|"'VirtualInterfaceList'"
op|':'
string|"'1.0-9750e2074437b3077e46359102779fc6'"
op|','
nl|'\n'
string|"'VolumeUsage'"
op|':'
string|"'1.0-6c8190c46ce1469bb3286a1f21c2e475'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectVersions
name|'class'
name|'TestObjectVersions'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_is_method
name|'def'
name|'_is_method'
op|'('
name|'thing'
op|')'
op|':'
newline|'\n'
comment|"# NOTE(dims): In Python3, The concept of 'unbound methods' has"
nl|'\n'
comment|'# been removed from the language. When referencing a method'
nl|'\n'
comment|'# as a class attribute, you now get a plain function object.'
nl|'\n'
comment|"# so let's check for both"
nl|'\n'
indent|'        '
name|'return'
name|'inspect'
op|'.'
name|'isfunction'
op|'('
name|'thing'
op|')'
name|'or'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'thing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_remotable_method
dedent|''
name|'def'
name|'_find_remotable_method'
op|'('
name|'self'
op|','
name|'cls'
op|','
name|'thing'
op|','
name|'parent_was_remotable'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Follow a chain of remotable things down to the original function."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'classmethod'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'cls'
op|','
name|'thing'
op|'.'
name|'__get__'
op|'('
name|'None'
op|','
name|'cls'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'_is_method'
op|'('
name|'thing'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'thing'
op|','
string|"'remotable'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'cls'
op|','
name|'thing'
op|'.'
name|'original_fn'
op|','
nl|'\n'
name|'parent_was_remotable'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parent_was_remotable'
op|':'
newline|'\n'
comment|'# We must be the first non-remotable thing underneath a stack of'
nl|'\n'
comment|'# remotable things (i.e. the actual implementation method)'
nl|'\n'
indent|'            '
name|'return'
name|'thing'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This means the top-level thing never hit a remotable layer'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_un_unicodify_enum_valid_values
dedent|''
dedent|''
name|'def'
name|'_un_unicodify_enum_valid_values'
op|'('
name|'self'
op|','
name|'_fields'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'_fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'field'
op|','
op|'('
name|'fields'
op|'.'
name|'BaseEnumField'
op|','
nl|'\n'
name|'fields'
op|'.'
name|'EnumField'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'orig_type'
op|'='
name|'type'
op|'('
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
op|')'
newline|'\n'
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
op|'='
name|'orig_type'
op|'('
nl|'\n'
op|'['
name|'x'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
name|'for'
name|'x'
name|'in'
nl|'\n'
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_valid_values'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_fingerprint
dedent|''
dedent|''
name|'def'
name|'_get_fingerprint'
op|'('
name|'self'
op|','
name|'obj_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fields'
op|'='
name|'list'
op|'('
name|'obj_class'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# NOTE(danms): We store valid_values in the enum as strings,'
nl|'\n'
comment|'# but oslo is working to make these coerced to unicode (which'
nl|'\n'
comment|'# is the right thing to do). The functionality will be'
nl|'\n'
comment|'# unchanged, but the repr() result that we use for calculating'
nl|'\n'
comment|'# the hashes will be different. This helper method coerces all'
nl|'\n'
comment|'# Enum valid_values elements to UTF-8 string before we make the'
nl|'\n'
comment|'# repr() call so that it is consistent before and after the'
nl|'\n'
comment|'# unicode change, and on py2 and py3.'
nl|'\n'
name|'if'
name|'six'
op|'.'
name|'PY2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_un_unicodify_enum_valid_values'
op|'('
name|'fields'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'fields'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'methods'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'dir'
op|'('
name|'obj_class'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'='
name|'getattr'
op|'('
name|'obj_class'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_is_method'
op|'('
name|'thing'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'classmethod'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'='
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'obj_class'
op|','
name|'thing'
op|')'
newline|'\n'
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'                    '
name|'methods'
op|'.'
name|'append'
op|'('
op|'('
name|'name'
op|','
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'method'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'methods'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(danms): Things that need a version bump are any fields'
nl|'\n'
comment|'# and their types, or the signatures of any remotable methods.'
nl|'\n'
comment|'# Of course, these are just the mechanical changes we can detect,'
nl|'\n'
comment|'# but many other things may require a version bump (method behavior'
nl|'\n'
comment|'# and return value changes, for example).'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'obj_class'
op|','
string|"'child_versions'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'relevant_data'
op|'='
op|'('
name|'fields'
op|','
name|'methods'
op|','
nl|'\n'
name|'OrderedDict'
op|'('
nl|'\n'
name|'sorted'
op|'('
name|'obj_class'
op|'.'
name|'child_versions'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'relevant_data'
op|'='
op|'('
name|'fields'
op|','
name|'methods'
op|')'
newline|'\n'
dedent|''
name|'relevant_data'
op|'='
name|'repr'
op|'('
name|'relevant_data'
op|')'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY3'
op|':'
newline|'\n'
indent|'            '
name|'relevant_data'
op|'='
name|'relevant_data'
op|'.'
name|'encode'
op|'('
string|"'utf-8'"
op|')'
newline|'\n'
dedent|''
name|'fingerprint'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
nl|'\n'
name|'obj_class'
op|'.'
name|'VERSION'
op|','
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'relevant_data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'fingerprint'
newline|'\n'
nl|'\n'
DECL|member|test_find_remotable_method
dedent|''
name|'def'
name|'test_find_remotable_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyObject
indent|'        '
name|'class'
name|'MyObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|my_method
name|'def'
name|'my_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'Hello World!'"
newline|'\n'
dedent|''
dedent|''
name|'thing'
op|'='
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'MyObject'
op|','
nl|'\n'
name|'getattr'
op|'('
name|'MyObject'
op|','
string|"'my_method'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'thing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_versions
dedent|''
name|'def'
name|'test_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fingerprints'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'sorted'
op|'('
name|'obj_classes'
op|','
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fingerprints'
op|'['
name|'obj_name'
op|']'
op|'='
name|'self'
op|'.'
name|'_get_fingerprint'
op|'('
name|'obj_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'GENERATE_HASHES'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'('
string|"'object_hashes.txt'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'pprint'
op|'.'
name|'pformat'
op|'('
name|'fingerprints'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
nl|'\n'
string|"'Generated hashes in object_hashes.txt'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stored'
op|'='
name|'set'
op|'('
name|'object_data'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'computed'
op|'='
name|'set'
op|'('
name|'fingerprints'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'changed'
op|'='
name|'stored'
op|'.'
name|'symmetric_difference'
op|'('
name|'computed'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'actual'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'hash'
name|'in'
name|'changed'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
name|'name'
op|']'
op|'='
name|'object_data'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'actual'
op|'['
name|'name'
op|']'
op|'='
name|'fingerprints'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|','
nl|'\n'
string|"'Some objects have changed; please make sure the '"
nl|'\n'
string|"'versions have been bumped, and then update their '"
nl|'\n'
string|"'hashes here.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_object_field_name
dedent|''
name|'def'
name|'_get_object_field_name'
op|'('
name|'self'
op|','
name|'field'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'field'
op|'.'
name|'_type'
op|','
name|'fields'
op|'.'
name|'Object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_obj_name'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'field'
op|','
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_element_type'
op|'.'
name|'_type'
op|'.'
name|'_obj_name'
newline|'\n'
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_build_tree
dedent|''
name|'def'
name|'_build_tree'
op|'('
name|'self'
op|','
name|'tree'
op|','
name|'obj_class'
op|','
name|'get_current_versions'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj_name'
op|'='
name|'obj_class'
op|'.'
name|'obj_name'
op|'('
op|')'
newline|'\n'
name|'if'
name|'obj_name'
name|'in'
name|'tree'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'obj_class'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sub_obj_name'
op|'='
name|'self'
op|'.'
name|'_get_object_field_name'
op|'('
name|'field'
op|')'
newline|'\n'
name|'if'
name|'sub_obj_name'
op|':'
newline|'\n'
indent|'                '
name|'sub_obj_class'
op|'='
name|'obj_classes'
op|'['
name|'sub_obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'tree'
op|'.'
name|'setdefault'
op|'('
name|'obj_name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'get_current_versions'
op|':'
newline|'\n'
indent|'                    '
name|'sub_obj_ver'
op|'='
name|'sub_obj_class'
op|'.'
name|'VERSION'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# get the most recent subobject version'
nl|'\n'
comment|'# from obj_relationships'
nl|'\n'
indent|'                    '
name|'sub_obj_ver'
op|'='
name|'obj_class'
op|'.'
name|'obj_relationships'
op|'['
name|'name'
op|']'
op|'['
op|'-'
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
name|'tree'
op|'['
name|'obj_name'
op|']'
op|'['
name|'sub_obj_name'
op|']'
op|'='
name|'sub_obj_ver'
newline|'\n'
nl|'\n'
DECL|member|test_relationships
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_relationships'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This test asserts that the obj_relationship map of all objects'
nl|'\n'
comment|'# contain the current versions of any subobjects.'
nl|'\n'
indent|'        '
name|'current_versions_tree'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj_relationships_tree'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'current_versions_tree'
op|','
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'obj_relationships_tree'
op|','
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'get_current_versions'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stored'
op|'='
name|'set'
op|'('
op|'['
op|'('
name|'x'
op|','
name|'str'
op|'('
name|'y'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'obj_relationships_tree'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'computed'
op|'='
name|'set'
op|'('
op|'['
op|'('
name|'x'
op|','
name|'str'
op|'('
name|'y'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'current_versions_tree'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'changed'
op|'='
name|'stored'
op|'.'
name|'symmetric_difference'
op|'('
name|'computed'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'actual'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'deps'
name|'in'
name|'changed'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
name|'name'
op|']'
op|'='
name|'current_versions_tree'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'actual'
op|'['
name|'name'
op|']'
op|'='
name|'obj_relationships_tree'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
comment|'# If this assertion is failing, this means an object is holding a'
nl|'\n'
comment|'# non-current version of another object.'
nl|'\n'
comment|'# Example: if Instance is bumped from version 1.1 to 1.2,'
nl|'\n'
comment|'# and InstanceList is still only has obj_relationships with 1.1,'
nl|'\n'
comment|'# this assertion will fail. InstanceList will need to also be bumped'
nl|'\n'
comment|'# a version, with the relationship to Instance 1.2 added.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|','
nl|'\n'
string|"'Some objects have changed dependencies. '"
nl|'\n'
string|"'Please make sure to bump the versions of '"
nl|'\n'
string|"'parent objects and provide a rule in their '"
nl|'\n'
string|"'obj_make_compatible() routines to backlevel '"
nl|'\n'
string|"'the child object. The expected dict is the '"
nl|'\n'
string|"'current versions of all objects held by other '"
nl|'\n'
string|"'objects, and the actual dict is what is held '"
nl|'\n'
string|"'within obj_relationships on the given objects.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible
dedent|''
name|'def'
name|'test_obj_make_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes and verify that we can run'
nl|'\n'
comment|'# obj_make_compatible with every older version than current.'
nl|'\n'
comment|"# This doesn't actually test the data conversions, but it at least"
nl|'\n'
comment|"# makes sure the method doesn't blow up on something basic like"
nl|'\n'
comment|'# expecting the wrong version format.'
nl|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'obj_class'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'version'
op|'['
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'test_version'
op|'='
string|"'%d.%d'"
op|'%'
op|'('
name|'version'
op|'['
number|'0'
op|']'
op|','
name|'n'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'testing obj: %s version: %s'"
op|'%'
nl|'\n'
op|'('
name|'obj_name'
op|','
name|'test_version'
op|')'
op|')'
newline|'\n'
name|'obj_class'
op|'('
op|')'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
name|'test_version'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_obj_make_compatible
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_list_obj_make_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestObj
name|'class'
name|'TestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.4'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestListObj
name|'class'
name|'TestListObj'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.5'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'TestObj'"
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.1'"
op|')'
op|','
op|'('
string|"'1.1'"
op|','
string|"'1.2'"
op|')'
op|','
nl|'\n'
op|'('
string|"'1.3'"
op|','
string|"'1.3'"
op|')'
op|','
op|'('
string|"'1.5'"
op|','
string|"'1.4'"
op|')'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'my_list'
op|'='
name|'TestListObj'
op|'('
op|')'
newline|'\n'
name|'my_obj'
op|'='
name|'TestObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'my_list'
op|'.'
name|'objects'
op|'='
op|'['
name|'my_obj'
op|']'
newline|'\n'
name|'primitive'
op|'='
name|'my_list'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
string|"'1.5'"
op|')'
newline|'\n'
name|'primitive_data'
op|'='
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'obj_primitive'
op|'='
name|'my_obj'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
string|"'1.4'"
op|')'
newline|'\n'
name|'obj_primitive_data'
op|'='
name|'obj_primitive'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'TestObj'
op|','
string|"'obj_make_compatible'"
op|')'
name|'as'
name|'comp'
op|':'
newline|'\n'
indent|'            '
name|'my_list'
op|'.'
name|'obj_make_compatible'
op|'('
name|'primitive_data'
op|','
string|"'1.1'"
op|')'
newline|'\n'
name|'comp'
op|'.'
name|'assert_called_with'
op|'('
name|'obj_primitive_data'
op|','
nl|'\n'
string|"'1.2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_obj_make_compatible_when_no_objects
dedent|''
dedent|''
name|'def'
name|'test_list_obj_make_compatible_when_no_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to make sure obj_make_compatible works with no \'objects\'\n\n        If a List object ever has a version that did not contain the \'objects\'\n        key, we need to make sure converting back to that version doesn\'t\n        cause backporting problems.\n        """'
newline|'\n'
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestObj
name|'class'
name|'TestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestListObj
name|'class'
name|'TestListObj'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'TestObj'"
op|')'
op|'}'
newline|'\n'
comment|"# pretend that version 1.0 didn't have 'objects'"
nl|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
op|'['
op|'('
string|"'1.1'"
op|','
string|"'1.1'"
op|')'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'my_list'
op|'='
name|'TestListObj'
op|'('
op|')'
newline|'\n'
name|'my_list'
op|'.'
name|'objects'
op|'='
op|'['
name|'TestObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
op|']'
newline|'\n'
name|'primitive'
op|'='
name|'my_list'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
string|"'1.1'"
op|')'
newline|'\n'
name|'primitive_data'
op|'='
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
newline|'\n'
name|'my_list'
op|'.'
name|'obj_make_compatible'
op|'('
name|'primitive_data'
op|','
nl|'\n'
DECL|variable|target_version
name|'target_version'
op|'='
string|"'1.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'objects'"
op|','
name|'primitive_data'
op|','
nl|'\n'
string|'"List was backported to before \'objects\' existed."'
nl|'\n'
string|'" \'objects\' should not be in the primitive."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_bad_relationships
dedent|''
name|'def'
name|'test_obj_bad_relationships'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure having an object with bad relationships is caught by'
nl|'\n'
comment|'# _build_tree()'
nl|'\n'
indent|'        '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|TestObj
name|'class'
name|'TestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|OtherTestObj
name|'class'
name|'OtherTestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'test'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'TestObj'"
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_relationships
name|'obj_relationships'
op|'='
op|'{'
string|"'test'"
op|':'
op|'['
op|'('
string|"'1.0'"
op|','
string|"'1.0'"
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'current_versions_tree'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj_relationships_tree'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'expected_current'
op|'='
op|'{'
string|"'OtherTestObj'"
op|':'
op|'{'
string|"'TestObj'"
op|':'
string|"'1.1'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'current_versions_tree'
op|','
nl|'\n'
name|'obj_classes'
op|'['
string|"'OtherTestObj'"
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'expected_obj_relationships'
op|'='
op|'{'
string|"'OtherTestObj'"
op|':'
op|'{'
string|"'TestObj'"
op|':'
string|"'1.0'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'obj_relationships_tree'
op|','
nl|'\n'
name|'obj_classes'
op|'['
string|"'OtherTestObj'"
op|']'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
DECL|variable|get_current_versions
name|'get_current_versions'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_current'
op|','
name|'current_versions_tree'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_obj_relationships'
op|','
name|'obj_relationships_tree'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_obj_to_test
dedent|''
name|'def'
name|'_get_obj_to_test'
op|'('
name|'self'
op|','
name|'obj_class'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'obj_class'
op|'('
op|')'
newline|'\n'
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'fname'
op|','
name|'ftype'
name|'in'
name|'obj'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'ftype'
op|','
name|'fields'
op|'.'
name|'ObjectField'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'fobjname'
op|'='
name|'ftype'
op|'.'
name|'AUTO_TYPE'
op|'.'
name|'_obj_name'
newline|'\n'
name|'fobjcls'
op|'='
name|'obj_classes'
op|'['
name|'fobjname'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'setattr'
op|'('
name|'obj'
op|','
name|'fname'
op|','
name|'self'
op|'.'
name|'_get_obj_to_test'
op|'('
name|'fobjcls'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'isinstance'
op|'('
name|'ftype'
op|','
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(danms): This will result in no tests for this'
nl|'\n'
comment|'# field type...'
nl|'\n'
indent|'                '
name|'setattr'
op|'('
name|'obj'
op|','
name|'fname'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
DECL|member|_find_version_mapping
dedent|''
name|'def'
name|'_find_version_mapping'
op|'('
name|'self'
op|','
name|'my_ver'
op|','
name|'versions'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'closest'
op|'='
name|'None'
newline|'\n'
name|'my_ver'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'my_ver'
op|')'
newline|'\n'
name|'for'
name|'_my'
op|','
name|'_child'
name|'in'
name|'versions'
op|':'
newline|'\n'
indent|'            '
name|'_my'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'_my'
op|')'
newline|'\n'
name|'_child'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'_child'
op|')'
newline|'\n'
name|'if'
name|'_my'
op|'=='
name|'my_ver'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'%s.%s'"
op|'%'
name|'_child'
newline|'\n'
dedent|''
name|'elif'
name|'_my'
op|'<'
name|'my_ver'
op|':'
newline|'\n'
indent|'                '
name|'closest'
op|'='
name|'_child'
newline|'\n'
dedent|''
dedent|''
name|'if'
name|'closest'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'%s.%s'"
op|'%'
name|'closest'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_validate_object_fields
dedent|''
dedent|''
name|'def'
name|'_validate_object_fields'
op|'('
name|'self'
op|','
name|'obj_class'
op|','
name|'primitive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'fname'
op|','
name|'ftype'
name|'in'
name|'obj_class'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'ftype'
op|','
name|'fields'
op|'.'
name|'ObjectField'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'exp_vers'
op|'='
name|'obj_class'
op|'.'
name|'obj_relationships'
op|'['
name|'fname'
op|']'
newline|'\n'
name|'exp_ver'
op|'='
name|'self'
op|'.'
name|'_find_version_mapping'
op|'('
nl|'\n'
name|'primitive'
op|'['
string|"'nova_object.version'"
op|']'
op|','
name|'exp_vers'
op|')'
newline|'\n'
name|'if'
name|'exp_ver'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'fname'
op|','
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'child_p'
op|'='
name|'primitive'
op|'['
string|"'nova_object.data'"
op|']'
op|'['
name|'fname'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exp_ver'
op|','
nl|'\n'
name|'child_p'
op|'['
string|"'nova_object.version'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible_with_data
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_obj_make_compatible_with_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes and verify that we can run'
nl|'\n'
comment|'# obj_make_compatible with every older version than current.'
nl|'\n'
comment|"# This doesn't actually test the data conversions, but it at least"
nl|'\n'
comment|"# makes sure the method doesn't blow up on something basic like"
nl|'\n'
comment|'# expecting the wrong version format.'
nl|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'if'
string|"'tests.unit'"
name|'in'
name|'obj_class'
op|'.'
name|'__module__'
op|':'
newline|'\n'
comment|'# NOTE(danms): Skip test objects. When we move to'
nl|'\n'
comment|"# oslo.versionedobjects, we won't have to do this"
nl|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'obj_class'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'version'
op|'['
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'test_version'
op|'='
string|"'%d.%d'"
op|'%'
op|'('
name|'version'
op|'['
number|'0'
op|']'
op|','
name|'n'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'testing obj: %s version: %s'"
op|'%'
nl|'\n'
op|'('
name|'obj_name'
op|','
name|'test_version'
op|')'
op|')'
newline|'\n'
name|'test_object'
op|'='
name|'self'
op|'.'
name|'_get_obj_to_test'
op|'('
name|'obj_class'
op|')'
newline|'\n'
name|'obj_p'
op|'='
name|'test_object'
op|'.'
name|'obj_to_primitive'
op|'('
nl|'\n'
name|'target_version'
op|'='
name|'test_version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_validate_object_fields'
op|'('
name|'obj_class'
op|','
name|'obj_p'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_relationships_in_order
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_obj_relationships_in_order'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes and verify that we can run'
nl|'\n'
comment|'# obj_make_compatible with every older version than current.'
nl|'\n'
comment|"# This doesn't actually test the data conversions, but it at least"
nl|'\n'
comment|"# makes sure the method doesn't blow up on something basic like"
nl|'\n'
comment|'# expecting the wrong version format.'
nl|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'field'
op|','
name|'versions'
name|'in'
name|'obj_class'
op|'.'
name|'obj_relationships'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'last_my_version'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'last_child_version'
op|'='
op|'('
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
name|'for'
name|'my_version'
op|','
name|'child_version'
name|'in'
name|'versions'
op|':'
newline|'\n'
indent|'                    '
name|'_my_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'my_version'
op|')'
newline|'\n'
name|'_ch_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'child_version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'('
name|'last_my_version'
op|'<'
name|'_my_version'
nl|'\n'
name|'and'
name|'last_child_version'
op|'<='
name|'_ch_version'
op|')'
op|','
nl|'\n'
string|"'Object %s relationship '"
nl|'\n'
string|"'%s->%s for field %s is out of order'"
op|'%'
op|'('
nl|'\n'
name|'obj_name'
op|','
name|'my_version'
op|','
name|'child_version'
op|','
nl|'\n'
name|'field'
op|')'
op|')'
newline|'\n'
name|'last_my_version'
op|'='
name|'_my_version'
newline|'\n'
name|'last_child_version'
op|'='
name|'_ch_version'
newline|'\n'
nl|'\n'
DECL|member|test_objects_use_obj_relationships
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_objects_use_obj_relationships'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
op|'('
name|'hasattr'
op|'('
name|'obj_class'
op|','
string|"'child_versions'"
op|')'
nl|'\n'
name|'and'
name|'obj_class'
op|'.'
name|'child_versions'
op|')'
op|','
nl|'\n'
string|"'Object %s should be using obj_relationships, '"
nl|'\n'
string|"'not child_versions.'"
op|'%'
name|'obj_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_relationships_not_past_current_parent_version
dedent|''
dedent|''
name|'def'
name|'test_obj_relationships_not_past_current_parent_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes to verify that all versions of the parent'
nl|'\n'
comment|'# held in obj_relationships are at or before the current version'
nl|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'cur_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'obj_class'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
name|'for'
name|'field'
op|','
name|'versions'
name|'in'
name|'obj_class'
op|'.'
name|'obj_relationships'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'my_version'
op|','
name|'child_version'
name|'in'
name|'versions'
op|':'
newline|'\n'
indent|'                    '
name|'tup_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'my_version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'tup_version'
op|'<='
name|'cur_version'
op|','
nl|'\n'
string|'"Field \'%(field)s\' of %(obj)s contains a "'
nl|'\n'
string|'"relationship that is past the current "'
nl|'\n'
string|'"version. Relationship version is %(ov)s."'
nl|'\n'
string|'" Current version is %(cv)s."'
op|'%'
nl|'\n'
op|'{'
string|"'field'"
op|':'
name|'field'
op|','
string|"'obj'"
op|':'
name|'obj_name'
op|','
nl|'\n'
string|"'ov'"
op|':'
name|'my_version'
op|','
nl|'\n'
string|"'cv'"
op|':'
name|'obj_class'
op|'.'
name|'VERSION'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_relationships_not_past_current_child_version
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_obj_relationships_not_past_current_child_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes to verify that all versions of subobjects'
nl|'\n'
comment|'# held in obj_relationships are at or before the current version'
nl|'\n'
indent|'        '
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'for'
name|'field'
op|','
name|'versions'
name|'in'
name|'obj_class'
op|'.'
name|'obj_relationships'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'obj_field'
op|'='
name|'obj_class'
op|'.'
name|'fields'
op|'['
name|'field'
op|']'
newline|'\n'
name|'child_name'
op|'='
name|'self'
op|'.'
name|'_get_object_field_name'
op|'('
name|'obj_field'
op|')'
newline|'\n'
name|'child_class'
op|'='
name|'obj_classes'
op|'['
name|'child_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'curr_child_ver'
op|'='
name|'child_class'
op|'.'
name|'VERSION'
newline|'\n'
name|'tup_curr_child_ver'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
nl|'\n'
name|'curr_child_ver'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'parent_ver'
op|','
name|'child_ver'
name|'in'
name|'versions'
op|':'
newline|'\n'
indent|'                    '
name|'tup_version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'child_ver'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'tup_version'
op|'<='
name|'tup_curr_child_ver'
op|','
nl|'\n'
string|'"Field \'%(field)s\' of %(obj)s contains a "'
nl|'\n'
string|'"relationship that is past the current "'
nl|'\n'
string|'"version of %(child_obj)s. Relationship "'
nl|'\n'
string|'"version is %(ov)s. Current version is "'
nl|'\n'
string|'"%(cv)s."'
op|'%'
nl|'\n'
op|'{'
string|"'field'"
op|':'
name|'field'
op|','
string|"'obj'"
op|':'
name|'obj_name'
op|','
nl|'\n'
string|"'child_obj'"
op|':'
name|'child_name'
op|','
nl|'\n'
string|"'ov'"
op|':'
name|'child_ver'
op|','
string|"'cv'"
op|':'
name|'curr_child_ver'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjEqualPrims
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestObjEqualPrims'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_object_equal
indent|'    '
name|'def'
name|'test_object_equal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'goodbye'"
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'goodbye'"
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'bar'
op|'='
string|"'goodbye'"
newline|'\n'
comment|"# obj2 will be marked with field 'three' updated"
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'base'
op|'.'
name|'obj_equal_prims'
op|'('
name|'obj1'
op|','
name|'obj2'
op|')'
op|','
nl|'\n'
string|'"Objects that differ only because one a is marked "'
nl|'\n'
string|'"as updated should be equal"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_not_equal
dedent|''
name|'def'
name|'test_object_not_equal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'goodbye'"
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'hello'"
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'base'
op|'.'
name|'obj_equal_prims'
op|'('
name|'obj1'
op|','
name|'obj2'
op|')'
op|','
nl|'\n'
string|'"Objects that differ in any field "'
nl|'\n'
string|'"should not be equal"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_ignore_equal
dedent|''
name|'def'
name|'test_object_ignore_equal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj1'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'goodbye'"
op|')'
newline|'\n'
name|'obj1'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'hello'"
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'base'
op|'.'
name|'obj_equal_prims'
op|'('
name|'obj1'
op|','
name|'obj2'
op|','
op|'['
string|"'bar'"
op|']'
op|')'
op|','
nl|'\n'
string|'"Objects that only differ in an ignored field "'
nl|'\n'
string|'"should be equal"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjMethodOverrides
dedent|''
dedent|''
name|'class'
name|'TestObjMethodOverrides'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_obj_reset_changes
indent|'    '
name|'def'
name|'test_obj_reset_changes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_reset_changes'
op|')'
newline|'\n'
name|'obj_classes'
op|'='
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'obj_classes'
op|'('
op|')'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'args'
op|','
nl|'\n'
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'obj_class'
op|'.'
name|'obj_reset_changes'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

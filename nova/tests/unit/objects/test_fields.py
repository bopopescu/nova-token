begin_unit
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'import'
name|'iso8601'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'exception'
name|'as'
name|'ovo_exc'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeFieldType
name|'class'
name|'FakeFieldType'
op|'('
name|'fields'
op|'.'
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'*%s*'"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'!%s!'"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnum
dedent|''
dedent|''
name|'class'
name|'FakeEnum'
op|'('
name|'fields'
op|'.'
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|FROG
indent|'    '
name|'FROG'
op|'='
string|'"frog"'
newline|'\n'
DECL|variable|PLATYPUS
name|'PLATYPUS'
op|'='
string|'"platypus"'
newline|'\n'
DECL|variable|ALLIGATOR
name|'ALLIGATOR'
op|'='
string|'"alligator"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FROG'
op|','
name|'PLATYPUS'
op|','
name|'ALLIGATOR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeEnum'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'valid_values'
op|'='
name|'FakeEnum'
op|'.'
name|'ALL'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumAlt
dedent|''
dedent|''
name|'class'
name|'FakeEnumAlt'
op|'('
name|'fields'
op|'.'
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|FROG
indent|'    '
name|'FROG'
op|'='
string|'"frog"'
newline|'\n'
DECL|variable|PLATYPUS
name|'PLATYPUS'
op|'='
string|'"platypus"'
newline|'\n'
DECL|variable|AARDVARK
name|'AARDVARK'
op|'='
string|'"aardvark"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FROG'
op|','
name|'PLATYPUS'
op|','
name|'AARDVARK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeEnumAlt'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'valid_values'
op|'='
name|'FakeEnumAlt'
op|'.'
name|'ALL'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumField
dedent|''
dedent|''
name|'class'
name|'FakeEnumField'
op|'('
name|'fields'
op|'.'
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FakeEnum'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumAltField
dedent|''
name|'class'
name|'FakeEnumAltField'
op|'('
name|'fields'
op|'.'
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FakeEnumAlt'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestField
dedent|''
name|'class'
name|'TestField'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestField'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'*foo*'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'!foo!'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
string|"'!foo!'"
op|','
string|"'foo'"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_coerce_good_values
dedent|''
name|'def'
name|'test_coerce_good_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
op|','
name|'out_val'
name|'in'
name|'self'
op|'.'
name|'coerce_good_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'coerce'
op|'('
string|"'obj'"
op|','
string|"'attr'"
op|','
name|'in_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_coerce_bad_values
dedent|''
dedent|''
name|'def'
name|'test_coerce_bad_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
name|'in'
name|'self'
op|'.'
name|'coerce_bad_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'coerce'
op|','
string|"'obj'"
op|','
string|"'attr'"
op|','
name|'in_val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_to_primitive
dedent|''
dedent|''
name|'def'
name|'test_to_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
op|','
name|'prim_val'
name|'in'
name|'self'
op|'.'
name|'to_primitive_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'prim_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'to_primitive'
op|'('
string|"'obj'"
op|','
string|"'attr'"
op|','
nl|'\n'
name|'in_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_primitive
dedent|''
dedent|''
name|'def'
name|'test_from_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|ObjectLikeThing
indent|'        '
name|'class'
name|'ObjectLikeThing'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|_context
indent|'            '
name|'_context'
op|'='
string|"'context'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'prim_val'
op|','
name|'out_val'
name|'in'
name|'self'
op|'.'
name|'from_primitive_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'from_primitive'
op|'('
nl|'\n'
name|'ObjectLikeThing'
op|','
string|"'attr'"
op|','
name|'prim_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'123'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
number|'123'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestString
dedent|''
dedent|''
name|'class'
name|'TestString'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestString'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|','
op|'('
number|'1'
op|','
string|"'1'"
op|')'
op|','
op|'('
name|'True'
op|','
string|"'True'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'coerce_good_values'
op|'.'
name|'append'
op|'('
op|'('
name|'long'
op|'('
number|'1'
op|')'
op|','
string|"'1'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'123\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
number|'123'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBaseEnum
dedent|''
dedent|''
name|'class'
name|'TestBaseEnum'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaseEnum'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'FakeEnumField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'frog'"
op|','
string|"'frog'"
op|')'
op|','
nl|'\n'
op|'('
string|"'platypus'"
op|','
string|"'platypus'"
op|')'
op|','
nl|'\n'
op|'('
string|"'alligator'"
op|','
string|"'alligator'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'aardvark'"
op|','
string|"'wookie'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'platypus\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'platypus'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'aardvark'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fingerprint
dedent|''
name|'def'
name|'test_fingerprint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Notes(yjiang5): make sure changing valid_value will be detected'
nl|'\n'
comment|'# in test_objects.test_versions'
nl|'\n'
indent|'        '
name|'field1'
op|'='
name|'FakeEnumField'
op|'('
op|')'
newline|'\n'
name|'field2'
op|'='
name|'FakeEnumAltField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'field1'
op|')'
op|','
name|'str'
op|'('
name|'field2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestEnum
dedent|''
dedent|''
name|'class'
name|'TestEnum'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestEnum'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
nl|'\n'
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
number|'1'
op|','
number|'1'
op|','
name|'True'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|','
op|'('
number|'1'
op|','
string|"'1'"
op|')'
op|','
op|'('
name|'True'
op|','
string|"'True'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'coerce_good_values'
op|'.'
name|'append'
op|'('
op|'('
name|'long'
op|'('
number|'1'
op|')'
op|','
string|"'1'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'boo'"
op|','
number|'2'
op|','
name|'False'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'foo\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'123'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fingerprint
dedent|''
name|'def'
name|'test_fingerprint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Notes(yjiang5): make sure changing valid_value will be detected'
nl|'\n'
comment|'# in test_objects.test_versions'
nl|'\n'
indent|'        '
name|'field1'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'field2'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'field1'
op|')'
op|','
name|'str'
op|'('
name|'field2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_without_valid_values
dedent|''
name|'def'
name|'test_without_valid_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'EnumValidValuesInvalidError'
op|','
nl|'\n'
name|'fields'
op|'.'
name|'EnumField'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_empty_values
dedent|''
name|'def'
name|'test_with_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'EnumRequiresValidValuesError'
op|','
nl|'\n'
name|'fields'
op|'.'
name|'EnumField'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestArchitecture
dedent|''
dedent|''
name|'class'
name|'TestArchitecture'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestArchitecture'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ArchitectureField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'x86_64'"
op|','
string|"'x86_64'"
op|')'
op|','
nl|'\n'
op|'('
string|"'amd64'"
op|','
string|"'x86_64'"
op|')'
op|','
nl|'\n'
op|'('
string|"'I686'"
op|','
string|"'i686'"
op|')'
op|','
nl|'\n'
op|'('
string|"'i386'"
op|','
string|"'i686'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'x86_99'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'aarch64\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'aarch64'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'ppc42'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBlockDeviceDestinationType
dedent|''
dedent|''
name|'class'
name|'TestBlockDeviceDestinationType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBlockDeviceDestinationType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'BlockDeviceDestinationTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'local'"
op|','
string|"'local'"
op|')'
op|','
nl|'\n'
op|'('
string|"'volume'"
op|','
string|"'volume'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'volume\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'volume'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBlockDeviceSourceType
dedent|''
dedent|''
name|'class'
name|'TestBlockDeviceSourceType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBlockDeviceSourceType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'BlockDeviceSourceTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'blank'"
op|','
string|"'blank'"
op|')'
op|','
nl|'\n'
op|'('
string|"'image'"
op|','
string|"'image'"
op|')'
op|','
nl|'\n'
op|'('
string|"'snapshot'"
op|','
string|"'snapshot'"
op|')'
op|','
nl|'\n'
op|'('
string|"'volume'"
op|','
string|"'volume'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'image\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'image'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBlockDeviceType
dedent|''
dedent|''
name|'class'
name|'TestBlockDeviceType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBlockDeviceType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'BlockDeviceTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'cdrom'"
op|','
string|"'cdrom'"
op|')'
op|','
nl|'\n'
op|'('
string|"'disk'"
op|','
string|"'disk'"
op|')'
op|','
nl|'\n'
op|'('
string|"'floppy'"
op|','
string|"'floppy'"
op|')'
op|','
nl|'\n'
op|'('
string|"'fs'"
op|','
string|"'fs'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lun'"
op|','
string|"'lun'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'disk\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'disk'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCPUMode
dedent|''
dedent|''
name|'class'
name|'TestCPUMode'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestCPUMode'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'CPUModeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'host-model'"
op|','
string|"'host-model'"
op|')'
op|','
nl|'\n'
op|'('
string|"'host-passthrough'"
op|','
string|"'host-passthrough'"
op|')'
op|','
nl|'\n'
op|'('
string|"'custom'"
op|','
string|"'custom'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'magic'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'custom\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'custom'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'magic'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCPUMatch
dedent|''
dedent|''
name|'class'
name|'TestCPUMatch'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestCPUMatch'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'CPUMatchField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'exact'"
op|','
string|"'exact'"
op|')'
op|','
nl|'\n'
op|'('
string|"'strict'"
op|','
string|"'strict'"
op|')'
op|','
nl|'\n'
op|'('
string|"'minimum'"
op|','
string|"'minimum'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'best'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'exact\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'exact'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'best'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCPUFeaturePolicy
dedent|''
dedent|''
name|'class'
name|'TestCPUFeaturePolicy'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestCPUFeaturePolicy'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'CPUFeaturePolicyField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'force'"
op|','
string|"'force'"
op|')'
op|','
nl|'\n'
op|'('
string|"'require'"
op|','
string|"'require'"
op|')'
op|','
nl|'\n'
op|'('
string|"'optional'"
op|','
string|"'optional'"
op|')'
op|','
nl|'\n'
op|'('
string|"'disable'"
op|','
string|"'disable'"
op|')'
op|','
nl|'\n'
op|'('
string|"'forbid'"
op|','
string|"'forbid'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'disallow'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'forbid\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'forbid'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'disallow'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDiskBus
dedent|''
dedent|''
name|'class'
name|'TestDiskBus'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDiskBus'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DiskBusField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'fdc'"
op|','
string|"'fdc'"
op|')'
op|','
nl|'\n'
op|'('
string|"'ide'"
op|','
string|"'ide'"
op|')'
op|','
nl|'\n'
op|'('
string|"'sata'"
op|','
string|"'sata'"
op|')'
op|','
nl|'\n'
op|'('
string|"'scsi'"
op|','
string|"'scsi'"
op|')'
op|','
nl|'\n'
op|'('
string|"'usb'"
op|','
string|"'usb'"
op|')'
op|','
nl|'\n'
op|'('
string|"'virtio'"
op|','
string|"'virtio'"
op|')'
op|','
nl|'\n'
op|'('
string|"'xen'"
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lxc'"
op|','
string|"'lxc'"
op|')'
op|','
nl|'\n'
op|'('
string|"'uml'"
op|','
string|"'uml'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'ide\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'ide'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestHVType
dedent|''
dedent|''
name|'class'
name|'TestHVType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestHVType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'HVTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'baremetal'"
op|','
string|"'baremetal'"
op|')'
op|','
nl|'\n'
op|'('
string|"'bhyve'"
op|','
string|"'bhyve'"
op|')'
op|','
nl|'\n'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
op|','
nl|'\n'
op|'('
string|"'kvm'"
op|','
string|"'kvm'"
op|')'
op|','
nl|'\n'
op|'('
string|"'xapi'"
op|','
string|"'xen'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'xen\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'xen'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestOSType
dedent|''
dedent|''
name|'class'
name|'TestOSType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestOSType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'OSTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'linux'"
op|','
string|"'linux'"
op|')'
op|','
nl|'\n'
op|'('
string|"'windows'"
op|','
string|"'windows'"
op|')'
op|','
nl|'\n'
op|'('
string|"'WINDOWS'"
op|','
string|"'windows'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'linux\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'linux'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRNGModel
dedent|''
dedent|''
name|'class'
name|'TestRNGModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestRNGModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'RNGModelField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'virtio'"
op|','
string|"'virtio'"
op|')'
op|','
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'virtio\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'virtio'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSCSIModel
dedent|''
dedent|''
name|'class'
name|'TestSCSIModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSCSIModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'SCSIModelField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'buslogic'"
op|','
string|"'buslogic'"
op|')'
op|','
nl|'\n'
op|'('
string|"'ibmvscsi'"
op|','
string|"'ibmvscsi'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lsilogic'"
op|','
string|"'lsilogic'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lsisas1068'"
op|','
string|"'lsisas1068'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lsisas1078'"
op|','
string|"'lsisas1078'"
op|')'
op|','
nl|'\n'
op|'('
string|"'virtio-scsi'"
op|','
string|"'virtio-scsi'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vmpvscsi'"
op|','
string|"'vmpvscsi'"
op|')'
op|','
nl|'\n'
op|'('
string|"'lsilogicsas'"
op|','
string|"'lsisas1068'"
op|')'
op|','
nl|'\n'
op|'('
string|"'paravirtual'"
op|','
string|"'vmpvscsi'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'vmpvscsi\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'vmpvscsi'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestVideoModel
dedent|''
dedent|''
name|'class'
name|'TestVideoModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestVideoModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'VideoModelField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'cirrus'"
op|','
string|"'cirrus'"
op|')'
op|','
nl|'\n'
op|'('
string|"'qxl'"
op|','
string|"'qxl'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vga'"
op|','
string|"'vga'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vmvga'"
op|','
string|"'vmvga'"
op|')'
op|','
nl|'\n'
op|'('
string|"'xen'"
op|','
string|"'xen'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'cirrus\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'cirrus'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestVIFModel
dedent|''
dedent|''
name|'class'
name|'TestVIFModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestVIFModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'VIFModelField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'virtio'"
op|','
string|"'virtio'"
op|')'
op|','
nl|'\n'
op|'('
string|"'ne2k_pci'"
op|','
string|"'ne2k_pci'"
op|')'
op|','
nl|'\n'
op|'('
string|"'pcnet'"
op|','
string|"'pcnet'"
op|')'
op|','
nl|'\n'
op|'('
string|"'rtl8139'"
op|','
string|"'rtl8139'"
op|')'
op|','
nl|'\n'
op|'('
string|"'e1000'"
op|','
string|"'e1000'"
op|')'
op|','
nl|'\n'
op|'('
string|"'e1000e'"
op|','
string|"'e1000e'"
op|')'
op|','
nl|'\n'
op|'('
string|"'netfront'"
op|','
string|"'netfront'"
op|')'
op|','
nl|'\n'
op|'('
string|"'spapr-vlan'"
op|','
string|"'spapr-vlan'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualE1000'"
op|','
string|"'e1000'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualE1000e'"
op|','
string|"'e1000e'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualPCNet32'"
op|','
string|"'pcnet'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualSriovEthernetCard'"
op|','
string|"'sriov'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualVmxnet'"
op|','
string|"'vmxnet'"
op|')'
op|','
nl|'\n'
op|'('
string|"'VirtualVmxnet3'"
op|','
string|"'vmxnet3'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'e1000\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'e1000'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestVMMode
dedent|''
dedent|''
name|'class'
name|'TestVMMode'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestVMMode'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'VMModeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'hvm'"
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
string|"'xen'"
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
string|"'uml'"
op|','
string|"'uml'"
op|')'
op|','
nl|'\n'
op|'('
string|"'exe'"
op|','
string|"'exe'"
op|')'
op|','
nl|'\n'
op|'('
string|"'pv'"
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
string|"'hv'"
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
string|"'baremetal'"
op|','
string|"'hvm'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'hvm\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'hvm'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestWatchdogAction
dedent|''
dedent|''
name|'class'
name|'TestWatchdogAction'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestWatchdogAction'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'WatchdogActionField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'none'"
op|','
string|"'none'"
op|')'
op|','
nl|'\n'
op|'('
string|"'pause'"
op|','
string|"'pause'"
op|')'
op|','
nl|'\n'
op|'('
string|"'poweroff'"
op|','
string|"'poweroff'"
op|')'
op|','
nl|'\n'
op|'('
string|"'reset'"
op|','
string|"'reset'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'reset\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'reset'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'acme'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMonitorMetricType
dedent|''
dedent|''
name|'class'
name|'TestMonitorMetricType'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestMonitorMetricType'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'MonitorMetricTypeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'cpu.frequency'"
op|','
string|"'cpu.frequency'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.user.time'"
op|','
string|"'cpu.user.time'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.kernel.time'"
op|','
string|"'cpu.kernel.time'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.idle.time'"
op|','
string|"'cpu.idle.time'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.iowait.time'"
op|','
string|"'cpu.iowait.time'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.user.percent'"
op|','
string|"'cpu.user.percent'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.kernel.percent'"
op|','
nl|'\n'
string|"'cpu.kernel.percent'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.idle.percent'"
op|','
string|"'cpu.idle.percent'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.iowait.percent'"
op|','
nl|'\n'
string|"'cpu.iowait.percent'"
op|')'
op|','
nl|'\n'
op|'('
string|"'cpu.percent'"
op|','
string|"'cpu.percent'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'cpu.typo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'cpu.frequency\'"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'cpu.frequency'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'cpufrequency'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestVersionPredicate
dedent|''
dedent|''
name|'class'
name|'TestVersionPredicate'
op|'('
name|'TestString'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestVersionPredicate'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'VersionPredicateField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'>=1.0'"
op|','
string|"'>=1.0'"
op|')'
op|','
nl|'\n'
op|'('
string|"'==1.1'"
op|','
string|"'==1.1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'<1.1.0'"
op|','
string|"'<1.1.0'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'1'"
op|','
string|"'foo'"
op|','
string|"'>1'"
op|','
number|'1.0'
op|','
string|"'1.0'"
op|','
string|"'=1.0'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestInteger
dedent|''
dedent|''
name|'class'
name|'TestInteger'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestInteger'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
number|'1'
op|','
number|'1'
op|')'
op|','
op|'('
string|"'1'"
op|','
number|'1'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNonNegativeInteger
dedent|''
dedent|''
name|'class'
name|'TestNonNegativeInteger'
op|'('
name|'TestInteger'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNonNegativeInteger'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NonNegativeInteger'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-2'"
op|','
string|"'4.2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFloat
dedent|''
dedent|''
name|'class'
name|'TestFloat'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestFloat'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'FloatField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
number|'1.1'
op|','
number|'1.1'
op|')'
op|','
op|'('
string|"'1.1'"
op|','
number|'1.1'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNonNegativeFloat
dedent|''
dedent|''
name|'class'
name|'TestNonNegativeFloat'
op|'('
name|'TestFloat'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNonNegativeFloat'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NonNegativeFloat'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-4.2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBoolean
dedent|''
dedent|''
name|'class'
name|'TestBoolean'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBoolean'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'BooleanField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'True'
op|','
name|'True'
op|')'
op|','
op|'('
name|'False'
op|','
name|'False'
op|')'
op|','
op|'('
number|'1'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'foo'"
op|','
name|'True'
op|')'
op|','
op|'('
number|'0'
op|','
name|'False'
op|')'
op|','
op|'('
string|"''"
op|','
name|'False'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFlexibleBoolean
dedent|''
dedent|''
name|'class'
name|'TestFlexibleBoolean'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestFlexibleBoolean'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'FlexibleBooleanField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'True'
op|','
name|'True'
op|')'
op|','
op|'('
name|'False'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|'"true"'
op|','
name|'True'
op|')'
op|','
op|'('
string|'"false"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|'"t"'
op|','
name|'True'
op|')'
op|','
op|'('
string|'"f"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|'"yes"'
op|','
name|'True'
op|')'
op|','
op|'('
string|'"no"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|'"y"'
op|','
name|'True'
op|')'
op|','
op|'('
string|'"n"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|'"on"'
op|','
name|'True'
op|')'
op|','
op|'('
string|'"off"'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
number|'1'
op|','
name|'True'
op|')'
op|','
op|'('
number|'0'
op|','
name|'False'
op|')'
op|','
nl|'\n'
op|'('
string|"'frog'"
op|','
name|'False'
op|')'
op|','
op|'('
string|"''"
op|','
name|'False'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDateTime
dedent|''
dedent|''
name|'class'
name|'TestDateTime'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDateTime'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dt'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|','
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'dt'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|','
nl|'\n'
op|'('
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
number|'1'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'dt'
op|','
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"'1955-11-05T18:00:00Z'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|','
number|'18'
op|','
number|'0'
op|','
number|'0'
op|','
nl|'\n'
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPAddress
dedent|''
dedent|''
name|'class'
name|'TestIPAddress'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPAddress'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'IPAddressField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'1.2.3.4'"
op|','
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'::1'"
op|','
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'1-2'"
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|','
string|"'1.2.3.4'"
op|')'
op|','
nl|'\n'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|','
string|"'::1'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
string|"'1.2.3.4'"
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'::1'"
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPAddressV4
dedent|''
dedent|''
name|'class'
name|'TestIPAddressV4'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPAddressV4'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'IPV4AddressField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'1.2.3.4'"
op|','
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'1-2'"
op|','
string|"'foo'"
op|','
string|"'::1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|','
string|"'1.2.3.4'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
string|"'1.2.3.4'"
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'1.2.3.4'"
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPAddressV6
dedent|''
dedent|''
name|'class'
name|'TestIPAddressV6'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPAddressV6'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'IPV6AddressField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'::1'"
op|','
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'1.2'"
op|','
string|"'foo'"
op|','
string|"'1.2.3.4'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|','
string|"'::1'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
string|"'::1'"
op|','
nl|'\n'
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
string|"'::1'"
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDict
dedent|''
dedent|''
name|'class'
name|'TestDict'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDict'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Dict'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'*bar*'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'*1*'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'!bar!'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'!bar!'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=val}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfStrings
dedent|''
dedent|''
name|'class'
name|'TestDictOfStrings'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfStrings'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'1'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=\'val\'}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestDictOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'42'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'4.2'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'4'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'boo'"
op|'}'
op|','
nl|'\n'
string|"'foo'"
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=42}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
number|'42'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfStringsNone
dedent|''
dedent|''
name|'class'
name|'TestDictOfStringsNone'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfStringsNone'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfNullableStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'1'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{k2=None,key=\'val\'}"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'k2'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfDictOfNullableStringsField
dedent|''
dedent|''
name|'class'
name|'TestListOfDictOfNullableStringsField'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfDictOfNullableStringsField'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfDictOfNullableStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'1'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'['
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
op|','
op|'['
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
op|'{'
number|'1'
op|':'
string|"'a'"
op|'}'
op|']'
op|','
op|'['
string|"'ham'"
op|','
number|'1'
op|']'
op|','
op|'['
string|"'eggs'"
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[{f=None,f1=\'b1\'},{f2=\'b2\'}]"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
name|'None'
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestList
dedent|''
dedent|''
name|'class'
name|'TestList'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestList'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'List'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
op|'['
string|"'*foo*'"
op|','
string|"'*bar*'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'!foo!'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'!foo!'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'[123]'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
number|'123'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfStrings
dedent|''
dedent|''
name|'class'
name|'TestListOfStrings'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfStrings'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[\'abc\']"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSet
dedent|''
dedent|''
name|'class'
name|'TestSet'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSet'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Set'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
string|"'*foo*'"
op|','
string|"'*bar*'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
string|"'foo'"
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'tuple'
op|'('
op|'['
string|"'!foo!'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'tuple'
op|'('
op|'['
string|"'!foo!'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'set([123])'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'set'
op|'('
op|'['
number|'123'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSetOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestSetOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSetOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'SetOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'1'"
op|','
number|'2'
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|','
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'set([1,2])'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfSetsOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestListOfSetsOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfSetsOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfSetsOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
name|'set'
op|'('
op|'['
string|"'1'"
op|','
number|'2'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'3'
op|','
string|"'4'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'3'
op|','
number|'4'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|','
op|'['
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|','
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'[set([1,2])]'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfListOfStrings
dedent|''
dedent|''
name|'class'
name|'TestDictOfListOfStrings'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfListOfStrings'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfListOfStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
number|'1'
op|']'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|']'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
string|"'foo'"
op|':'
op|'['
name|'None'
op|','
name|'None'
op|']'
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{foo=[\'1\',\'2\']}"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'foo'"
op|':'
op|'['
string|"'1'"
op|','
string|"'2'"
op|']'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNetworkModel
dedent|''
dedent|''
name|'class'
name|'TestNetworkModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNetworkModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'model'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NetworkModel'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'model'
op|','
name|'model'
op|')'
op|','
op|'('
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|','
name|'model'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
op|']'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'model'
op|','
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|','
name|'model'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'networkinfo'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'networkinfo'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
number|'123'
op|')'
op|')'
newline|'\n'
name|'networkinfo'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
number|'456'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'NetworkModel(123,456)'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'networkinfo'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPNetwork
dedent|''
dedent|''
name|'class'
name|'TestIPNetwork'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPNetwork'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'IPNetwork'
op|'('
op|')'
op|')'
newline|'\n'
name|'good'
op|'='
op|'['
string|"'192.168.1.0/24'"
op|','
string|"'0.0.0.0/0'"
op|','
string|"'::1/128'"
op|','
string|"'::1/64'"
op|','
string|"'::1/0'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'192.168.0.0/f'"
op|','
string|"'192.168.0.0/foo'"
op|','
nl|'\n'
string|"'::1/129'"
op|','
string|"'192.168.0.0/-1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPV4Network
dedent|''
dedent|''
name|'class'
name|'TestIPV4Network'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPV4Network'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'IPV4Network'
op|'('
op|')'
op|')'
newline|'\n'
name|'good'
op|'='
op|'['
string|"'192.168.1.0/24'"
op|','
string|"'0.0.0.0/0'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'192.168.0.0/f'"
op|','
string|"'192.168.0.0/foo'"
op|','
nl|'\n'
string|"'::1/129'"
op|','
string|"'192.168.0.0/-1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIPV6Network
dedent|''
dedent|''
name|'class'
name|'TestIPV6Network'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIPV6Network'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'IPV6Network'
op|'('
op|')'
op|')'
newline|'\n'
name|'good'
op|'='
op|'['
string|"'::1/128'"
op|','
string|"'::1/64'"
op|','
string|"'::1/0'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'192.168.0.0/f'"
op|','
string|"'192.168.0.0/foo'"
op|','
nl|'\n'
string|"'::1/129'"
op|','
string|"'192.168.0.0/-1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|','
name|'x'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'x'
op|','
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|')'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'good'
op|']'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
nl|'\n'
name|'import'
name|'iso8601'
newline|'\n'
name|'from'
name|'oslo_versionedobjects'
name|'import'
name|'exception'
name|'as'
name|'ovo_exc'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'signature_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeFieldType
name|'class'
name|'FakeFieldType'
op|'('
name|'fields'
op|'.'
name|'FieldType'
op|')'
op|':'
newline|'\n'
DECL|member|coerce
indent|'    '
name|'def'
name|'coerce'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'*%s*'"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|to_primitive
dedent|''
name|'def'
name|'to_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'!%s!'"
op|'%'
name|'value'
newline|'\n'
nl|'\n'
DECL|member|from_primitive
dedent|''
name|'def'
name|'from_primitive'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'attr'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'value'
op|'['
number|'1'
op|':'
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnum
dedent|''
dedent|''
name|'class'
name|'FakeEnum'
op|'('
name|'fields'
op|'.'
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|FROG
indent|'    '
name|'FROG'
op|'='
string|'"frog"'
newline|'\n'
DECL|variable|PLATYPUS
name|'PLATYPUS'
op|'='
string|'"platypus"'
newline|'\n'
DECL|variable|ALLIGATOR
name|'ALLIGATOR'
op|'='
string|'"alligator"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FROG'
op|','
name|'PLATYPUS'
op|','
name|'ALLIGATOR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeEnum'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'valid_values'
op|'='
name|'FakeEnum'
op|'.'
name|'ALL'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumAlt
dedent|''
dedent|''
name|'class'
name|'FakeEnumAlt'
op|'('
name|'fields'
op|'.'
name|'Enum'
op|')'
op|':'
newline|'\n'
DECL|variable|FROG
indent|'    '
name|'FROG'
op|'='
string|'"frog"'
newline|'\n'
DECL|variable|PLATYPUS
name|'PLATYPUS'
op|'='
string|'"platypus"'
newline|'\n'
DECL|variable|AARDVARK
name|'AARDVARK'
op|'='
string|'"aardvark"'
newline|'\n'
nl|'\n'
DECL|variable|ALL
name|'ALL'
op|'='
op|'('
name|'FROG'
op|','
name|'PLATYPUS'
op|','
name|'AARDVARK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FakeEnumAlt'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'valid_values'
op|'='
name|'FakeEnumAlt'
op|'.'
name|'ALL'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumField
dedent|''
dedent|''
name|'class'
name|'FakeEnumField'
op|'('
name|'fields'
op|'.'
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FakeEnum'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeEnumAltField
dedent|''
name|'class'
name|'FakeEnumAltField'
op|'('
name|'fields'
op|'.'
name|'BaseEnumField'
op|')'
op|':'
newline|'\n'
DECL|variable|AUTO_TYPE
indent|'    '
name|'AUTO_TYPE'
op|'='
name|'FakeEnumAlt'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestField
dedent|''
name|'class'
name|'TestField'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestField'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'*foo*'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'!foo!'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
string|"'!foo!'"
op|','
string|"'foo'"
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_coerce_good_values
dedent|''
name|'def'
name|'test_coerce_good_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
op|','
name|'out_val'
name|'in'
name|'self'
op|'.'
name|'coerce_good_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'coerce'
op|'('
string|"'obj'"
op|','
string|"'attr'"
op|','
name|'in_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_coerce_bad_values
dedent|''
dedent|''
name|'def'
name|'test_coerce_bad_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
name|'in'
name|'self'
op|'.'
name|'coerce_bad_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
op|'('
name|'TypeError'
op|','
name|'ValueError'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'coerce'
op|','
string|"'obj'"
op|','
string|"'attr'"
op|','
name|'in_val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_to_primitive
dedent|''
dedent|''
name|'def'
name|'test_to_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'in_val'
op|','
name|'prim_val'
name|'in'
name|'self'
op|'.'
name|'to_primitive_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'prim_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'to_primitive'
op|'('
string|"'obj'"
op|','
string|"'attr'"
op|','
nl|'\n'
name|'in_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_primitive
dedent|''
dedent|''
name|'def'
name|'test_from_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|ObjectLikeThing
indent|'        '
name|'class'
name|'ObjectLikeThing'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|_context
indent|'            '
name|'_context'
op|'='
string|"'context'"
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'prim_val'
op|','
name|'out_val'
name|'in'
name|'self'
op|'.'
name|'from_primitive_values'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out_val'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'from_primitive'
op|'('
nl|'\n'
name|'ObjectLikeThing'
op|','
string|"'attr'"
op|','
name|'prim_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'123'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
number|'123'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestString
dedent|''
dedent|''
name|'class'
name|'TestString'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestString'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|','
op|'('
number|'1'
op|','
string|"'1'"
op|')'
op|','
op|'('
name|'True'
op|','
string|"'True'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'coerce_good_values'
op|'.'
name|'append'
op|'('
op|'('
name|'int'
op|'('
number|'1'
op|')'
op|','
string|"'1'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'123\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
number|'123'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBaseEnum
dedent|''
dedent|''
name|'class'
name|'TestBaseEnum'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaseEnum'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'FakeEnumField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'frog'"
op|','
string|"'frog'"
op|')'
op|','
nl|'\n'
op|'('
string|"'platypus'"
op|','
string|"'platypus'"
op|')'
op|','
nl|'\n'
op|'('
string|"'alligator'"
op|','
string|"'alligator'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'aardvark'"
op|','
string|"'wookie'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'platypus\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'platypus'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'aardvark'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fingerprint
dedent|''
name|'def'
name|'test_fingerprint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Notes(yjiang5): make sure changing valid_value will be detected'
nl|'\n'
comment|'# in test_objects.test_versions'
nl|'\n'
indent|'        '
name|'field1'
op|'='
name|'FakeEnumField'
op|'('
op|')'
newline|'\n'
name|'field2'
op|'='
name|'FakeEnumAltField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'field1'
op|')'
op|','
name|'str'
op|'('
name|'field2'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestEnum
dedent|''
dedent|''
name|'class'
name|'TestEnum'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestEnum'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
nl|'\n'
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
number|'1'
op|','
number|'1'
op|','
name|'True'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
op|','
op|'('
number|'1'
op|','
string|"'1'"
op|')'
op|','
op|'('
name|'True'
op|','
string|"'True'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'six'
op|'.'
name|'PY2'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'coerce_good_values'
op|'.'
name|'append'
op|'('
op|'('
name|'int'
op|'('
number|'1'
op|')'
op|','
string|"'1'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'boo'"
op|','
number|'2'
op|','
name|'False'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'foo\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'123'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fingerprint
dedent|''
name|'def'
name|'test_fingerprint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Notes(yjiang5): make sure changing valid_value will be detected'
nl|'\n'
comment|'# in test_objects.test_versions'
nl|'\n'
indent|'        '
name|'field1'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'field2'
op|'='
name|'fields'
op|'.'
name|'EnumField'
op|'('
name|'valid_values'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'str'
op|'('
name|'field1'
op|')'
op|','
name|'str'
op|'('
name|'field2'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_without_valid_values
dedent|''
name|'def'
name|'test_without_valid_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'EnumValidValuesInvalidError'
op|','
nl|'\n'
name|'fields'
op|'.'
name|'EnumField'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_empty_values
dedent|''
name|'def'
name|'test_with_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ovo_exc'
op|'.'
name|'EnumRequiresValidValuesError'
op|','
nl|'\n'
name|'fields'
op|'.'
name|'EnumField'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestImageSignatureTypes
dedent|''
dedent|''
name|'class'
name|'TestImageSignatureTypes'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that the object definition is updated'
nl|'\n'
comment|'# in step with the signature_utils module'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestImageSignatureTypes'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hash_field'
op|'='
name|'fields'
op|'.'
name|'ImageSignatureHashType'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'key_type_field'
op|'='
name|'fields'
op|'.'
name|'ImageSignatureKeyType'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hashes
dedent|''
name|'def'
name|'test_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'hash_name'
name|'in'
name|'list'
op|'('
name|'signature_utils'
op|'.'
name|'HASH_METHODS'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'hash_name'
op|','
name|'self'
op|'.'
name|'hash_field'
op|'.'
name|'hashes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_key_types
dedent|''
dedent|''
name|'def'
name|'test_key_types'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'key_type_dict'
op|'='
name|'signature_utils'
op|'.'
name|'SignatureKeyType'
op|'.'
name|'_REGISTERED_TYPES'
newline|'\n'
name|'key_types'
op|'='
name|'list'
op|'('
name|'key_type_dict'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'key_type'
name|'in'
name|'key_types'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'key_type'
op|','
name|'self'
op|'.'
name|'key_type_field'
op|'.'
name|'key_types'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestResourceClass
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestResourceClass'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestResourceClass'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ResourceClassField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
nl|'\n'
op|'('
string|"'VCPU'"
op|','
string|"'VCPU'"
op|')'
op|','
nl|'\n'
op|'('
string|"'MEMORY_MB'"
op|','
string|"'MEMORY_MB'"
op|')'
op|','
nl|'\n'
op|'('
string|"'DISK_GB'"
op|','
string|"'DISK_GB'"
op|')'
op|','
nl|'\n'
op|'('
string|"'PCI_DEVICE'"
op|','
string|"'PCI_DEVICE'"
op|')'
op|','
nl|'\n'
op|'('
string|"'SRIOV_NET_VF'"
op|','
string|"'SRIOV_NET_VF'"
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_SOCKET'"
op|','
string|"'NUMA_SOCKET'"
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_CORE'"
op|','
string|"'NUMA_CORE'"
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_THREAD'"
op|','
string|"'NUMA_THREAD'"
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_MEMORY_MB'"
op|','
string|"'NUMA_MEMORY_MB'"
op|')'
op|','
nl|'\n'
op|'('
string|"'IPV4_ADDRESS'"
op|','
string|"'IPV4_ADDRESS'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'expected_indexes'
op|'='
op|'['
nl|'\n'
op|'('
string|"'VCPU'"
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'('
string|"'MEMORY_MB'"
op|','
number|'1'
op|')'
op|','
nl|'\n'
op|'('
string|"'DISK_GB'"
op|','
number|'2'
op|')'
op|','
nl|'\n'
op|'('
string|"'PCI_DEVICE'"
op|','
number|'3'
op|')'
op|','
nl|'\n'
op|'('
string|"'SRIOV_NET_VF'"
op|','
number|'4'
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_SOCKET'"
op|','
number|'5'
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_CORE'"
op|','
number|'6'
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_THREAD'"
op|','
number|'7'
op|')'
op|','
nl|'\n'
op|'('
string|"'NUMA_MEMORY_MB'"
op|','
number|'8'
op|')'
op|','
nl|'\n'
op|'('
string|"'IPV4_ADDRESS'"
op|','
number|'9'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'acme'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'VCPU\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
nl|'\n'
name|'fields'
op|'.'
name|'ResourceClass'
op|'.'
name|'VCPU'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'cow'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_index
dedent|''
name|'def'
name|'test_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'index'
name|'in'
name|'self'
op|'.'
name|'expected_indexes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'index'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'index'
op|'('
name|'name'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_index_invalid
dedent|''
dedent|''
name|'def'
name|'test_index_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'index'
op|','
string|"'cow'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_index
dedent|''
name|'def'
name|'test_from_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'index'
name|'in'
name|'self'
op|'.'
name|'expected_indexes'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'from_index'
op|'('
name|'index'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_from_index_invalid
dedent|''
dedent|''
name|'def'
name|'test_from_index_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'IndexError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'from_index'
op|','
number|'999'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestInteger
dedent|''
dedent|''
name|'class'
name|'TestInteger'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestInteger'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
number|'1'
op|','
number|'1'
op|')'
op|','
op|'('
string|"'1'"
op|','
number|'1'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNonNegativeInteger
dedent|''
dedent|''
name|'class'
name|'TestNonNegativeInteger'
op|'('
name|'TestInteger'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNonNegativeInteger'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NonNegativeInteger'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-2'"
op|','
string|"'4.2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestFloat
dedent|''
dedent|''
name|'class'
name|'TestFloat'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestFloat'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'FloatField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
number|'1.1'
op|','
number|'1.1'
op|')'
op|','
op|'('
string|"'1.1'"
op|','
number|'1.1'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNonNegativeFloat
dedent|''
dedent|''
name|'class'
name|'TestNonNegativeFloat'
op|'('
name|'TestFloat'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNonNegativeFloat'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NonNegativeFloat'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'.'
name|'extend'
op|'('
op|'['
string|"'-4.2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBoolean
dedent|''
dedent|''
name|'class'
name|'TestBoolean'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBoolean'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'BooleanField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'True'
op|','
name|'True'
op|')'
op|','
op|'('
name|'False'
op|','
name|'False'
op|')'
op|','
op|'('
number|'1'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
string|"'foo'"
op|','
name|'True'
op|')'
op|','
op|'('
number|'0'
op|','
name|'False'
op|')'
op|','
op|'('
string|"''"
op|','
name|'False'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDateTime
dedent|''
dedent|''
name|'class'
name|'TestDateTime'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDateTime'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dt'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|','
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DateTimeField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'dt'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|','
nl|'\n'
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
number|'1'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'dt'
op|','
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'self'
op|'.'
name|'dt'
op|')'
op|','
name|'self'
op|'.'
name|'dt'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
string|"'1955-11-05T18:00:00Z'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|','
number|'18'
op|','
number|'0'
op|','
number|'0'
op|','
nl|'\n'
name|'tzinfo'
op|'='
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'Utc'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDict
dedent|''
dedent|''
name|'class'
name|'TestDict'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDict'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Dict'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'*bar*'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'*1*'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'!bar!'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'!bar!'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=val}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfStrings
dedent|''
dedent|''
name|'class'
name|'TestDictOfStrings'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfStrings'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'1'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=\'val\'}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestDictOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'42'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'4.2'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'4'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'boo'"
op|'}'
op|','
nl|'\n'
string|"'foo'"
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'42'
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{key=42}"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'key'"
op|':'
number|'42'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestDictOfStringsNone
dedent|''
dedent|''
name|'class'
name|'TestDictOfStringsNone'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestDictOfStringsNone'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'DictOfNullableStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'1'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'{'
number|'1'
op|':'
string|"'bar'"
op|'}'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"{k2=None,key=\'val\'}"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'{'
string|"'k2'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'key'"
op|':'
string|"'val'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfDictOfNullableStringsField
dedent|''
dedent|''
name|'class'
name|'TestListOfDictOfNullableStringsField'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfDictOfNullableStringsField'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfDictOfNullableStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'1'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'('
op|'['
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
op|','
op|'['
op|'{'
string|"'foo'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
op|'{'
number|'1'
op|':'
string|"'a'"
op|'}'
op|']'
op|','
op|'['
string|"'ham'"
op|','
number|'1'
op|']'
op|','
op|'['
string|"'eggs'"
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|','
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
string|"'b'"
op|'}'
op|','
op|'{'
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'f2'"
op|':'
name|'None'
op|'}'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[{f=None,f1=\'b1\'},{f2=\'b2\'}]"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'f'"
op|':'
name|'None'
op|','
string|"'f1'"
op|':'
string|"'b1'"
op|'}'
op|','
op|'{'
string|"'f2'"
op|':'
string|"'b2'"
op|'}'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestList
dedent|''
dedent|''
name|'class'
name|'TestList'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestList'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'List'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
op|'['
string|"'*foo*'"
op|','
string|"'*bar*'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'!foo!'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'!foo!'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'[123]'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
number|'123'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfStrings
dedent|''
dedent|''
name|'class'
name|'TestListOfStrings'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfStrings'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfStringsField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
string|"'foo'"
op|']'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[\'abc\']"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
string|"'abc'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSet
dedent|''
dedent|''
name|'class'
name|'TestSet'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSet'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Set'
op|'('
name|'FakeFieldType'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
string|"'*foo*'"
op|','
string|"'*bar*'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
string|"'foo'"
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'tuple'
op|'('
op|'['
string|"'!foo!'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'tuple'
op|'('
op|'['
string|"'!foo!'"
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'set([123])'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'set'
op|'('
op|'['
number|'123'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSetOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestSetOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSetOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'SetOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
string|"'1'"
op|','
number|'2'
op|']'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|','
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'set([1,2])'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestListOfSetsOfIntegers
dedent|''
dedent|''
name|'class'
name|'TestListOfSetsOfIntegers'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestListOfSetsOfIntegers'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'ListOfSetsOfIntegersField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
op|'['
name|'set'
op|'('
op|'['
string|"'1'"
op|','
number|'2'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'3'
op|','
string|"'4'"
op|']'
op|')'
op|']'
op|','
nl|'\n'
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
name|'set'
op|'('
op|'['
number|'3'
op|','
number|'4'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|','
op|'['
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
op|'['
name|'tuple'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|','
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|']'
op|')'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'[set([1,2])]'"
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
op|'['
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNetworkModel
dedent|''
dedent|''
name|'class'
name|'TestNetworkModel'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNetworkModel'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'model'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'NetworkModel'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
name|'model'
op|','
name|'model'
op|')'
op|','
op|'('
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|','
name|'model'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
op|'['
op|']'
op|','
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
op|'['
op|'('
name|'model'
op|','
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
op|'['
op|'('
name|'model'
op|'.'
name|'json'
op|'('
op|')'
op|','
name|'model'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'networkinfo'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'networkinfo'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
number|'123'
op|')'
op|')'
newline|'\n'
name|'networkinfo'
op|'.'
name|'append'
op|'('
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
number|'456'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'NetworkModel(123,456)'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
name|'networkinfo'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNotificationPriority
dedent|''
dedent|''
name|'class'
name|'TestNotificationPriority'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNotificationPriority'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'NotificationPriorityField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'audit'"
op|','
string|"'audit'"
op|')'
op|','
nl|'\n'
op|'('
string|"'critical'"
op|','
string|"'critical'"
op|')'
op|','
nl|'\n'
op|'('
string|"'debug'"
op|','
string|"'debug'"
op|')'
op|','
nl|'\n'
op|'('
string|"'error'"
op|','
string|"'error'"
op|')'
op|','
nl|'\n'
op|'('
string|"'sample'"
op|','
string|"'sample'"
op|')'
op|','
nl|'\n'
op|'('
string|"'warn'"
op|','
string|"'warn'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'warning'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'warn\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'warn'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'warning'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNotificationPhase
dedent|''
dedent|''
name|'class'
name|'TestNotificationPhase'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNotificationPhase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'NotificationPhaseField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'start'"
op|','
string|"'start'"
op|')'
op|','
nl|'\n'
op|'('
string|"'end'"
op|','
string|"'end'"
op|')'
op|','
nl|'\n'
op|'('
string|"'error'"
op|','
string|"'error'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'begin'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'error\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'error'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'begin'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNotificationAction
dedent|''
dedent|''
name|'class'
name|'TestNotificationAction'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNotificationAction'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'NotificationActionField'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'update'"
op|','
string|"'update'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
string|"'magic'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
op|'['
number|'0'
op|':'
number|'1'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_stringify
dedent|''
name|'def'
name|'test_stringify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"\'update\'"'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|'('
string|"'update'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stringify_invalid
dedent|''
name|'def'
name|'test_stringify_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'field'
op|'.'
name|'stringify'
op|','
string|"'magic'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestPCIAddress
dedent|''
dedent|''
name|'class'
name|'TestPCIAddress'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestPCIAddress'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'PCIAddressField'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'0000:00:02.0'"
op|','
string|"'0000:00:02.0'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
nl|'\n'
string|"'000:00:02.0'"
op|','
nl|'\n'
string|"'0000:0:02.0'"
op|','
nl|'\n'
string|"'0000:00:2.0'"
op|','
nl|'\n'
string|"'0000:00:02.'"
op|','
nl|'\n'
string|"'-000:00:02.0'"
op|','
nl|'\n'
string|"'0000:0-:02.0'"
op|','
nl|'\n'
string|"'0000:00:-2.0'"
op|','
nl|'\n'
string|"'0000:00:02.-'"
op|','
nl|'\n'
string|"'000000:02.0'"
op|','
nl|'\n'
string|"'0000:0:02.0'"
op|','
nl|'\n'
string|"'0000:00:020'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestUSBAddress
dedent|''
dedent|''
name|'class'
name|'TestUSBAddress'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestUSBAddress'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'USBAddressField'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'0:0'"
op|','
string|"'0:0'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
nl|'\n'
string|"'00'"
op|','
nl|'\n'
string|"'0:'"
op|','
nl|'\n'
string|"'0.0'"
op|','
nl|'\n'
string|"'-.0'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSCSIAddress
dedent|''
dedent|''
name|'class'
name|'TestSCSIAddress'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestSCSIAddress'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'SCSIAddressField'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'1:0:2:0'"
op|','
string|"'1:0:2:0'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
nl|'\n'
string|"'1:0:2'"
op|','
nl|'\n'
string|"'-:0:2:0'"
op|','
nl|'\n'
string|"'1:-:2:0'"
op|','
nl|'\n'
string|"'1:0:-:0'"
op|','
nl|'\n'
string|"'1:0:2:-'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestIDEAddress
dedent|''
dedent|''
name|'class'
name|'TestIDEAddress'
op|'('
name|'TestField'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestIDEAddress'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'field'
op|'='
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'IDEAddressField'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'coerce_good_values'
op|'='
op|'['
op|'('
string|"'0:0'"
op|','
string|"'0:0'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'coerce_bad_values'
op|'='
op|'['
nl|'\n'
string|"'0:2'"
op|','
nl|'\n'
string|"'00'"
op|','
nl|'\n'
string|"'0'"
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'to_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
name|'self'
op|'.'
name|'from_primitive_values'
op|'='
name|'self'
op|'.'
name|'coerce_good_values'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

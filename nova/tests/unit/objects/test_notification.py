begin_unit
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'notification'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNotificationBase
name|'class'
name|'TestNotificationBase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestObject
name|'class'
name|'TestObject'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'        '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'field_1'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'field_2'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
string|"'not_important_field'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestNotificationPayload
name|'class'
name|'TestNotificationPayload'
op|'('
name|'notification'
op|'.'
name|'NotificationPayloadBase'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'        '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|SCHEMA
name|'SCHEMA'
op|'='
op|'{'
nl|'\n'
string|"'field_1'"
op|':'
op|'('
string|"'source_field'"
op|','
string|"'field_1'"
op|')'
op|','
nl|'\n'
string|"'field_2'"
op|':'
op|'('
string|"'source_field'"
op|','
string|"'field_2'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'extra_field'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
comment|'# filled by ctor'
nl|'\n'
string|"'field_1'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
comment|'# filled by the schema'
nl|'\n'
string|"'field_2'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
comment|'# filled by the schema'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|populate_schema
name|'def'
name|'populate_schema'
op|'('
name|'self'
op|','
name|'source_field'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'super'
op|'('
name|'TestNotificationBase'
op|'.'
name|'TestNotificationPayload'
op|','
nl|'\n'
name|'self'
op|')'
op|'.'
name|'populate_schema'
op|'('
name|'source_field'
op|'='
name|'source_field'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
name|'class'
name|'TestNotificationPayloadEmptySchema'
op|'('
nl|'\n'
DECL|class|TestNotificationPayloadEmptySchema
name|'notification'
op|'.'
name|'NotificationPayloadBase'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'        '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'extra_field'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
comment|'# filled by ctor'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestNotification
name|'class'
name|'TestNotification'
op|'('
name|'notification'
op|'.'
name|'NotificationBase'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'        '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'payload'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'TestNotificationPayload'"
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|TestNotificationEmptySchema
name|'class'
name|'TestNotificationEmptySchema'
op|'('
name|'notification'
op|'.'
name|'NotificationBase'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'        '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'payload'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'TestNotificationPayloadEmptySchema'"
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|fake_service
dedent|''
name|'fake_service'
op|'='
op|'{'
nl|'\n'
string|"'created_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
name|'microsecond'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'123'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake-host'"
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-fake'"
op|','
nl|'\n'
string|"'topic'"
op|':'
string|"'fake-service-topic'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'forced_down'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'disabled_reason'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'last_seen_up'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'version'"
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|expected_payload
name|'expected_payload'
op|'='
op|'{'
nl|'\n'
string|"'nova_object.name'"
op|':'
string|"'TestNotificationPayload'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
nl|'\n'
string|"'extra_field'"
op|':'
string|"'test string'"
op|','
nl|'\n'
string|"'field_1'"
op|':'
string|"'test1'"
op|','
nl|'\n'
string|"'field_2'"
op|':'
number|'42'
op|'}'
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.0'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNotificationBase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.service_update'"
op|')'
name|'as'
name|'mock_db_service_update'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'service_obj'
op|'='
name|'objects'
op|'.'
name|'Service'
op|'('
name|'context'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'context'
op|','
nl|'\n'
name|'id'
op|'='
name|'self'
op|'.'
name|'fake_service'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'service_obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|'['
string|"'version'"
op|']'
op|')'
newline|'\n'
name|'mock_db_service_update'
op|'.'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'fake_service'
newline|'\n'
name|'self'
op|'.'
name|'service_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'my_obj'
op|'='
name|'self'
op|'.'
name|'TestObject'
op|'('
name|'field_1'
op|'='
string|"'test1'"
op|','
nl|'\n'
name|'field_2'
op|'='
number|'42'
op|','
nl|'\n'
name|'not_important_field'
op|'='
number|'13'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'payload'
op|'='
name|'self'
op|'.'
name|'TestNotificationPayload'
op|'('
nl|'\n'
name|'extra_field'
op|'='
string|"'test string'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'payload'
op|'.'
name|'populate_schema'
op|'('
name|'source_field'
op|'='
name|'self'
op|'.'
name|'my_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'notification'
op|'='
name|'self'
op|'.'
name|'TestNotification'
op|'('
nl|'\n'
name|'event_type'
op|'='
name|'notification'
op|'.'
name|'EventType'
op|'('
nl|'\n'
name|'object'
op|'='
string|"'test_object'"
op|','
nl|'\n'
name|'action'
op|'='
name|'fields'
op|'.'
name|'NotificationAction'
op|'.'
name|'UPDATE'
op|','
nl|'\n'
name|'phase'
op|'='
name|'fields'
op|'.'
name|'NotificationPhase'
op|'.'
name|'START'
op|')'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'notification'
op|'.'
name|'NotificationPublisher'
op|'.'
name|'from_service_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'service_obj'
op|')'
op|','
nl|'\n'
name|'priority'
op|'='
name|'fields'
op|'.'
name|'NotificationPriority'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'payload'
op|'='
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_notification
dedent|''
name|'def'
name|'_verify_notification'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|','
name|'mock_context'
op|','
nl|'\n'
name|'expected_event_type'
op|','
nl|'\n'
name|'expected_payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_notifier'
op|'.'
name|'prepare'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'publisher_id'
op|'='
string|"'nova-fake:fake-host'"
op|')'
newline|'\n'
name|'mock_notify'
op|'='
name|'mock_notifier'
op|'.'
name|'prepare'
op|'.'
name|'return_value'
op|'.'
name|'info'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_notify'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock_notify'
op|'.'
name|'call_args'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'mock_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock_notify'
op|'.'
name|'call_args'
op|'['
number|'1'
op|']'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
name|'expected_event_type'
op|')'
newline|'\n'
name|'actual_payload'
op|'='
name|'mock_notify'
op|'.'
name|'call_args'
op|'['
number|'1'
op|']'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertJsonEqual'
op|'('
name|'expected_payload'
op|','
name|'actual_payload'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.LEGACY_NOTIFIER'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.NOTIFIER'"
op|')'
newline|'\n'
DECL|member|test_emit_notification
name|'def'
name|'test_emit_notification'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|','
name|'mock_legacy'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'to_dict'
op|'.'
name|'return_value'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'notification'
op|'.'
name|'emit'
op|'('
name|'mock_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_verify_notification'
op|'('
nl|'\n'
name|'mock_notifier'
op|','
nl|'\n'
name|'mock_context'
op|','
nl|'\n'
name|'expected_event_type'
op|'='
string|"'test_object.update.start'"
op|','
nl|'\n'
name|'expected_payload'
op|'='
name|'self'
op|'.'
name|'expected_payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_legacy'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.NOTIFIER'"
op|')'
newline|'\n'
DECL|member|test_emit_with_host_and_binary_as_publisher
name|'def'
name|'test_emit_with_host_and_binary_as_publisher'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'noti'
op|'='
name|'self'
op|'.'
name|'TestNotification'
op|'('
nl|'\n'
name|'event_type'
op|'='
name|'notification'
op|'.'
name|'EventType'
op|'('
nl|'\n'
name|'object'
op|'='
string|"'test_object'"
op|','
nl|'\n'
name|'action'
op|'='
name|'fields'
op|'.'
name|'NotificationAction'
op|'.'
name|'UPDATE'
op|')'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'notification'
op|'.'
name|'NotificationPublisher'
op|'('
name|'host'
op|'='
string|"'fake-host'"
op|','
nl|'\n'
name|'binary'
op|'='
string|"'nova-fake'"
op|')'
op|','
nl|'\n'
name|'priority'
op|'='
name|'fields'
op|'.'
name|'NotificationPriority'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'payload'
op|'='
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'to_dict'
op|'.'
name|'return_value'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'noti'
op|'.'
name|'emit'
op|'('
name|'mock_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_verify_notification'
op|'('
nl|'\n'
name|'mock_notifier'
op|','
nl|'\n'
name|'mock_context'
op|','
nl|'\n'
name|'expected_event_type'
op|'='
string|"'test_object.update'"
op|','
nl|'\n'
name|'expected_payload'
op|'='
name|'self'
op|'.'
name|'expected_payload'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.LEGACY_NOTIFIER'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.NOTIFIER'"
op|')'
newline|'\n'
DECL|member|test_emit_event_type_without_phase
name|'def'
name|'test_emit_event_type_without_phase'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|','
name|'mock_legacy'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'noti'
op|'='
name|'self'
op|'.'
name|'TestNotification'
op|'('
nl|'\n'
name|'event_type'
op|'='
name|'notification'
op|'.'
name|'EventType'
op|'('
nl|'\n'
name|'object'
op|'='
string|"'test_object'"
op|','
nl|'\n'
name|'action'
op|'='
name|'fields'
op|'.'
name|'NotificationAction'
op|'.'
name|'UPDATE'
op|')'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'notification'
op|'.'
name|'NotificationPublisher'
op|'.'
name|'from_service_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'service_obj'
op|')'
op|','
nl|'\n'
name|'priority'
op|'='
name|'fields'
op|'.'
name|'NotificationPriority'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'payload'
op|'='
name|'self'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'to_dict'
op|'.'
name|'return_value'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'noti'
op|'.'
name|'emit'
op|'('
name|'mock_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_verify_notification'
op|'('
nl|'\n'
name|'mock_notifier'
op|','
nl|'\n'
name|'mock_context'
op|','
nl|'\n'
name|'expected_event_type'
op|'='
string|"'test_object.update'"
op|','
nl|'\n'
name|'expected_payload'
op|'='
name|'self'
op|'.'
name|'expected_payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_legacy'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.NOTIFIER'"
op|')'
newline|'\n'
DECL|member|test_not_possible_to_emit_if_not_populated
name|'def'
name|'test_not_possible_to_emit_if_not_populated'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'non_populated_payload'
op|'='
name|'self'
op|'.'
name|'TestNotificationPayload'
op|'('
nl|'\n'
name|'extra_field'
op|'='
string|"'test string'"
op|')'
newline|'\n'
name|'noti'
op|'='
name|'self'
op|'.'
name|'TestNotification'
op|'('
nl|'\n'
name|'event_type'
op|'='
name|'notification'
op|'.'
name|'EventType'
op|'('
nl|'\n'
name|'object'
op|'='
string|"'test_object'"
op|','
nl|'\n'
name|'action'
op|'='
name|'fields'
op|'.'
name|'NotificationAction'
op|'.'
name|'UPDATE'
op|')'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'notification'
op|'.'
name|'NotificationPublisher'
op|'.'
name|'from_service_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'service_obj'
op|')'
op|','
nl|'\n'
name|'priority'
op|'='
name|'fields'
op|'.'
name|'NotificationPriority'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'payload'
op|'='
name|'non_populated_payload'
op|')'
newline|'\n'
nl|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AssertionError'
op|','
name|'noti'
op|'.'
name|'emit'
op|','
name|'mock_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_notifier'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.rpc.NOTIFIER'"
op|')'
newline|'\n'
DECL|member|test_empty_schema
name|'def'
name|'test_empty_schema'
op|'('
name|'self'
op|','
name|'mock_notifier'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'non_populated_payload'
op|'='
name|'self'
op|'.'
name|'TestNotificationPayloadEmptySchema'
op|'('
nl|'\n'
name|'extra_field'
op|'='
string|"'test string'"
op|')'
newline|'\n'
name|'noti'
op|'='
name|'self'
op|'.'
name|'TestNotificationEmptySchema'
op|'('
nl|'\n'
name|'event_type'
op|'='
name|'notification'
op|'.'
name|'EventType'
op|'('
nl|'\n'
name|'object'
op|'='
string|"'test_object'"
op|','
nl|'\n'
name|'action'
op|'='
name|'fields'
op|'.'
name|'NotificationAction'
op|'.'
name|'UPDATE'
op|')'
op|','
nl|'\n'
name|'publisher'
op|'='
name|'notification'
op|'.'
name|'NotificationPublisher'
op|'.'
name|'from_service_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'service_obj'
op|')'
op|','
nl|'\n'
name|'priority'
op|'='
name|'fields'
op|'.'
name|'NotificationPriority'
op|'.'
name|'INFO'
op|','
nl|'\n'
name|'payload'
op|'='
name|'non_populated_payload'
op|')'
newline|'\n'
nl|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'to_dict'
op|'.'
name|'return_value'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'noti'
op|'.'
name|'emit'
op|'('
name|'mock_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_verify_notification'
op|'('
nl|'\n'
name|'mock_notifier'
op|','
nl|'\n'
name|'mock_context'
op|','
nl|'\n'
name|'expected_event_type'
op|'='
string|"'test_object.update'"
op|','
nl|'\n'
name|'expected_payload'
op|'='
nl|'\n'
op|'{'
string|"'nova_object.name'"
op|':'
string|"'TestNotificationPayloadEmptySchema'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'extra_field'"
op|':'
string|"u'test string'"
op|'}'
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.0'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

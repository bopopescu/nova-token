begin_unit
comment|'#    Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'importlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'struct'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_context'
name|'import'
name|'context'
name|'as'
name|'common_context'
newline|'\n'
name|'from'
name|'oslo_context'
name|'import'
name|'fixture'
name|'as'
name|'context_fixture'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'encodeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenericUtilsTestCase
name|'class'
name|'GenericUtilsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_parse_server_string
indent|'    '
name|'def'
name|'test_parse_server_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'::1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[::1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'2001:db8::192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[2001:db8::192.168.1.1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.2:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.2'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.3'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"'8443'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
comment|'# error case'
nl|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.exa:mple.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_unicode_sanitization
dedent|''
name|'def'
name|'test_hostname_unicode_sanitization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'u"\\u7684.test.example.com"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_periods
dedent|''
name|'def'
name|'test_hostname_sanitize_periods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"....test.example.com..."'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_dashes
dedent|''
name|'def'
name|'test_hostname_sanitize_dashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"----test.example.com---"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_characters
dedent|''
name|'def'
name|'test_hostname_sanitize_characters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"(#@&$!(@*--#&91)(__=+--test-host.example!!.com-0+"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"91----test-host.example.com-0"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_translate
dedent|''
name|'def'
name|'test_hostname_translate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"hello"'
op|','
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_password
dedent|''
name|'def'
name|'test_generate_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
name|'if'
name|'c'
name|'in'
string|"'0123456789'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'abcdefghijklmnopqrstuvwxyz'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_file_as_root
dedent|''
name|'def'
name|'test_read_file_as_root'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'1'
op|']'
op|'=='
string|"'bad'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'fakecontents'"
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'contents'
op|'='
name|'utils'
op|'.'
name|'read_file_as_root'
op|'('
string|"'good'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'contents'
op|','
string|"'fakecontents'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FileNotFound'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'read_file_as_root'
op|','
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_temporary_chown
dedent|''
name|'def'
name|'test_temporary_chown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'chown'"
op|':'
newline|'\n'
indent|'                '
name|'fake_execute'
op|'.'
name|'uid'
op|'='
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'tempfile'
op|'.'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'temporary_chown'
op|'('
name|'f'
op|'.'
name|'name'
op|','
name|'owner_uid'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xhtml_escape
dedent|''
dedent|''
name|'def'
name|'test_xhtml_escape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&quot;foo&quot;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'\'"foo"\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&apos;foo&apos;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'"\'foo\'"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&amp;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'&'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&gt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'>'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&lt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'<'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&lt;foo&gt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'<foo>'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_valid_ipv6_cidr
dedent|''
name|'def'
name|'test_is_valid_ipv6_cidr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"2600::/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"abcd:ef01:2345:6789:abcd:ef01:192.168.254.254/48"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001/32"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"127.0.0.1"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_shortened_ipv6
dedent|''
name|'def'
name|'test_get_shortened_ipv6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"abcd:ef01:2345:6789:abcd:ef01:c0a8:fefe"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"abcd:ef01:2345:6789:abcd:ef01:192.168.254.254"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"::1"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"caca::caca:0:babe:201:102"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"caca:0000:0000:caca:0000:babe:0201:0102"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|','
nl|'\n'
string|'"failure"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_shortened_ipv6_cidr
dedent|''
name|'def'
name|'test_get_shortened_ipv6_cidr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"2600::/64"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|'('
nl|'\n'
string|'"2600:0000:0000:0000:0000:0000:0000:0000/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"2600::/64"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|'('
nl|'\n'
string|'"2600::1/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|','
nl|'\n'
string|'"failure"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_safe_ip_format
dedent|''
name|'def'
name|'test_safe_ip_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[::1]"'
op|','
name|'utils'
op|'.'
name|'safe_ip_format'
op|'('
string|'"::1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"127.0.0.1"'
op|','
name|'utils'
op|'.'
name|'safe_ip_format'
op|'('
string|'"127.0.0.1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"[::ffff:127.0.0.1]"'
op|','
name|'utils'
op|'.'
name|'safe_ip_format'
op|'('
nl|'\n'
string|'"::ffff:127.0.0.1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"localhost"'
op|','
name|'utils'
op|'.'
name|'safe_ip_format'
op|'('
string|'"localhost"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hash_str
dedent|''
name|'def'
name|'test_get_hash_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_str'
op|'='
string|'b"foo"'
newline|'\n'
name|'base_unicode'
op|'='
string|'u"foo"'
newline|'\n'
name|'value'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'base_str'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'value'
op|','
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'base_str'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'value'
op|','
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'base_unicode'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_rootwrap
dedent|''
name|'def'
name|'test_use_rootwrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'disable_rootwrap'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'workarounds'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'rootwrap_config'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'sudo nova-rootwrap foo'"
op|','
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_sudo
dedent|''
name|'def'
name|'test_use_sudo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'disable_rootwrap'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'workarounds'"
op|')'
newline|'\n'
name|'cmd'
op|'='
name|'utils'
op|'.'
name|'_get_root_helper'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'sudo'"
op|','
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ssh_execute
dedent|''
name|'def'
name|'test_ssh_execute'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_args'
op|'='
op|'('
string|"'ssh'"
op|','
string|"'-o'"
op|','
string|"'BatchMode=yes'"
op|','
nl|'\n'
string|"'remotehost'"
op|','
string|"'ls'"
op|','
string|"'-l'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.utils.execute'"
op|')'
name|'as'
name|'mock_method'
op|':'
newline|'\n'
indent|'            '
name|'utils'
op|'.'
name|'ssh_execute'
op|'('
string|"'remotehost'"
op|','
string|"'ls'"
op|','
string|"'-l'"
op|')'
newline|'\n'
dedent|''
name|'mock_method'
op|'.'
name|'assert_called_once_with'
op|'('
op|'*'
name|'expected_args'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCachedFile
dedent|''
dedent|''
name|'class'
name|'TestCachedFile'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.getmtime'"
op|','
name|'return_value'
op|'='
number|'1'
op|')'
newline|'\n'
DECL|member|test_read_cached_file
name|'def'
name|'test_read_cached_file'
op|'('
name|'self'
op|','
name|'getmtime'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|'='
op|'{'
nl|'\n'
string|"'/this/is/a/fake'"
op|':'
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'fresh'
op|','
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|')'
newline|'\n'
name|'fdata'
op|'='
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|'['
string|"'/this/is/a/fake'"
op|']'
op|'['
string|'"data"'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fdata'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.getmtime'"
op|','
name|'return_value'
op|'='
number|'2'
op|')'
newline|'\n'
DECL|member|test_read_modified_cached_file
name|'def'
name|'test_read_modified_cached_file'
op|'('
name|'self'
op|','
name|'getmtime'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|'='
op|'{'
nl|'\n'
string|"'/this/is/a/fake'"
op|':'
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'fake_contents'
op|'='
string|'"lorem ipsum"'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'six.moves.builtins.open'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'mock_open'
op|'('
name|'read_data'
op|'='
name|'fake_contents'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fresh'
op|','
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|','
name|'fake_contents'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fresh'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_cached_file
dedent|''
name|'def'
name|'test_delete_cached_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filename'
op|'='
string|"'/this/is/a/fake/deletion/of/cached/file'"
newline|'\n'
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|'='
op|'{'
nl|'\n'
name|'filename'
op|':'
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'filename'
op|','
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'delete_cached_file'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'filename'
op|','
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_cached_file_not_exist
dedent|''
name|'def'
name|'test_delete_cached_file_not_exist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We expect that if cached file does not exist no Exception raised.'
nl|'\n'
indent|'        '
name|'filename'
op|'='
string|"'/this/is/a/fake/deletion/attempt/of/not/cached/file'"
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'filename'
op|','
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'delete_cached_file'
op|'('
name|'filename'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'filename'
op|','
name|'utils'
op|'.'
name|'_FILE_CACHE'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VPNPingTestCase
dedent|''
dedent|''
name|'class'
name|'VPNPingTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit tests for utils.vpn_ping()."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VPNPingTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'address'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'session_id'
op|'='
number|'0x1234'
newline|'\n'
name|'self'
op|'.'
name|'fmt'
op|'='
string|"'!BQxxxxxQxxxx'"
newline|'\n'
nl|'\n'
DECL|member|fake_reply_packet
dedent|''
name|'def'
name|'fake_reply_packet'
op|'('
name|'self'
op|','
name|'pkt_id'
op|'='
number|'0x40'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'struct'
op|'.'
name|'pack'
op|'('
name|'self'
op|'.'
name|'fmt'
op|','
name|'pkt_id'
op|','
number|'0x0'
op|','
name|'self'
op|'.'
name|'session_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_socket
dedent|''
name|'def'
name|'setup_socket'
op|'('
name|'sefl'
op|','
name|'mock_socket'
op|','
name|'return_value'
op|','
name|'side_effect'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'socket_obj'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'if'
name|'side_effect'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'socket_obj'
op|'.'
name|'recv'
op|'.'
name|'side_effect'
op|'='
name|'side_effect'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'socket_obj'
op|'.'
name|'recv'
op|'.'
name|'return_value'
op|'='
name|'return_value'
newline|'\n'
dedent|''
name|'mock_socket'
op|'.'
name|'return_value'
op|'='
name|'socket_obj'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'socket'
op|','
string|"'socket'"
op|')'
newline|'\n'
DECL|member|test_vpn_ping_timeout
name|'def'
name|'test_vpn_ping_timeout'
op|'('
name|'self'
op|','
name|'mock_socket'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Server doesn\'t reply within timeout."""'
newline|'\n'
name|'self'
op|'.'
name|'setup_socket'
op|'('
name|'mock_socket'
op|','
name|'None'
op|','
name|'socket'
op|'.'
name|'timeout'
op|')'
newline|'\n'
name|'rc'
op|'='
name|'utils'
op|'.'
name|'vpn_ping'
op|'('
name|'self'
op|'.'
name|'address'
op|','
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
name|'session_id'
op|'='
name|'self'
op|'.'
name|'session_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'socket'
op|','
string|"'socket'"
op|')'
newline|'\n'
DECL|member|test_vpn_ping_bad_len
name|'def'
name|'test_vpn_ping_bad_len'
op|'('
name|'self'
op|','
name|'mock_socket'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test a short/invalid server reply."""'
newline|'\n'
name|'self'
op|'.'
name|'setup_socket'
op|'('
name|'mock_socket'
op|','
string|"'fake_reply'"
op|')'
newline|'\n'
name|'rc'
op|'='
name|'utils'
op|'.'
name|'vpn_ping'
op|'('
name|'self'
op|'.'
name|'address'
op|','
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
name|'session_id'
op|'='
name|'self'
op|'.'
name|'session_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'socket'
op|','
string|"'socket'"
op|')'
newline|'\n'
DECL|member|test_vpn_ping_bad_id
name|'def'
name|'test_vpn_ping_bad_id'
op|'('
name|'self'
op|','
name|'mock_socket'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Server sends an unknown packet ID."""'
newline|'\n'
name|'self'
op|'.'
name|'setup_socket'
op|'('
name|'mock_socket'
op|','
name|'self'
op|'.'
name|'fake_reply_packet'
op|'('
name|'pkt_id'
op|'='
number|'0x41'
op|')'
op|')'
newline|'\n'
name|'rc'
op|'='
name|'utils'
op|'.'
name|'vpn_ping'
op|'('
name|'self'
op|'.'
name|'address'
op|','
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
name|'session_id'
op|'='
name|'self'
op|'.'
name|'session_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'socket'
op|','
string|"'socket'"
op|')'
newline|'\n'
DECL|member|test_vpn_ping_ok
name|'def'
name|'test_vpn_ping_ok'
op|'('
name|'self'
op|','
name|'mock_socket'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'setup_socket'
op|'('
name|'mock_socket'
op|','
name|'self'
op|'.'
name|'fake_reply_packet'
op|'('
op|')'
op|')'
newline|'\n'
name|'rc'
op|'='
name|'utils'
op|'.'
name|'vpn_ping'
op|'('
name|'self'
op|'.'
name|'address'
op|','
name|'self'
op|'.'
name|'port'
op|','
nl|'\n'
name|'session_id'
op|'='
name|'self'
op|'.'
name|'session_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rc'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonkeyPatchTestCase
dedent|''
dedent|''
name|'class'
name|'MonkeyPatchTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for utils.monkey_patch()."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonkeyPatchTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'example_package'
op|'='
string|"'nova.tests.unit.monkey_patch_example.'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
nl|'\n'
name|'monkey_patch'
op|'='
name|'True'
op|','
nl|'\n'
name|'monkey_patch_modules'
op|'='
op|'['
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a'"
op|'+'
string|"':'"
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_decorator'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_monkey_patch
dedent|''
name|'def'
name|'test_monkey_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'monkey_patch'
op|'('
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|'='
op|'['
op|']'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_a'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_b'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_a'
op|'.'
name|'example_function_a'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleA'
op|'='
name|'example_a'
op|'.'
name|'ExampleClassA'
op|'('
op|')'
newline|'\n'
name|'exampleA'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_a'
op|'='
name|'exampleA'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_a'
op|','
number|'8'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_b'
op|'.'
name|'example_function_b'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleB'
op|'='
name|'example_b'
op|'.'
name|'ExampleClassB'
op|'('
op|')'
newline|'\n'
name|'exampleB'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_b'
op|'='
name|'exampleB'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_b'
op|','
number|'8'
op|')'
newline|'\n'
name|'package_a'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a.'"
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'example_function_a'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method_add'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'package_b'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_b.'"
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'example_function_b'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method_add'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonkeyPatchDefaultTestCase
dedent|''
dedent|''
name|'class'
name|'MonkeyPatchDefaultTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for default monkey_patch_modules value."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonkeyPatchDefaultTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
nl|'\n'
name|'monkey_patch'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_monkey_patch_default_mod
dedent|''
name|'def'
name|'test_monkey_patch_default_mod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# monkey_patch_modules is defined to be'
nl|'\n'
comment|'#    <module_to_patch>:<decorator_to_patch_with>'
nl|'\n'
comment|'#  Here we check that both parts of the default values are'
nl|'\n'
comment|'# valid'
nl|'\n'
indent|'        '
name|'for'
name|'module'
name|'in'
name|'CONF'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'module'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Check we can import the module to be patched'
nl|'\n'
name|'importlib'
op|'.'
name|'import_module'
op|'('
name|'m'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# check the decorator is valid'
nl|'\n'
name|'decorator_name'
op|'='
name|'m'
op|'['
number|'1'
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
name|'decorator_module'
op|'='
name|'importlib'
op|'.'
name|'import_module'
op|'('
name|'decorator_name'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'getattr'
op|'('
name|'decorator_module'
op|','
name|'decorator_name'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuditPeriodTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'AuditPeriodTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# a fairly random time to test with'
nl|'\n'
name|'self'
op|'.'
name|'test_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'second'
op|'='
number|'23'
op|','
nl|'\n'
name|'minute'
op|'='
number|'12'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'override_time'
op|'='
name|'self'
op|'.'
name|'test_time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeutils'
op|'.'
name|'clear_time_override'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour
dedent|''
name|'def'
name|'test_hour'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_before_current
dedent|''
name|'def'
name|'test_hour_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_after_current
dedent|''
name|'def'
name|'test_hour_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day
dedent|''
name|'def'
name|'test_day'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_before_current
dedent|''
name|'def'
name|'test_day_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_after_current
dedent|''
name|'def'
name|'test_day_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'3'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month
dedent|''
name|'def'
name|'test_month'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_before_current
dedent|''
name|'def'
name|'test_month_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_after_current
dedent|''
name|'def'
name|'test_month_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@15'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year
dedent|''
name|'def'
name|'test_year'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_before_current
dedent|''
name|'def'
name|'test_year_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_after_current
dedent|''
name|'def'
name|'test_year_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MkfsTestCase
dedent|''
dedent|''
name|'class'
name|'MkfsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_mkfs
indent|'    '
name|'def'
name|'test_mkfs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'ext4'"
op|','
string|"'-F'"
op|','
string|"'/my/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
string|"'/my/swap/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
string|"'/my/swap/block/dev'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mkfs_with_label
dedent|''
name|'def'
name|'test_mkfs_with_label'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'ext4'"
op|','
string|"'-F'"
op|','
nl|'\n'
string|"'-L'"
op|','
string|"'ext4-vol'"
op|','
string|"'/my/block/dev'"
op|','
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'msdos'"
op|','
nl|'\n'
string|"'-n'"
op|','
string|"'msdos-vol'"
op|','
string|"'/my/msdos/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
string|"'-L'"
op|','
string|"'swap-vol'"
op|','
string|"'/my/swap/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|','
string|"'ext4-vol'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|','
string|"'msdos-vol'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
string|"'/my/swap/block/dev'"
op|','
string|"'swap-vol'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LastBytesTestCase
dedent|''
dedent|''
name|'class'
name|'LastBytesTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the last_bytes() utility method."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LastBytesTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'six'
op|'.'
name|'BytesIO'
op|'('
string|"b'1234567890'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_truncated
dedent|''
name|'def'
name|'test_truncated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
name|'out'
op|','
name|'remaining'
op|'='
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'self'
op|'.'
name|'f'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out'
op|','
string|"b'67890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'remaining'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_all
dedent|''
name|'def'
name|'test_read_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
name|'out'
op|','
name|'remaining'
op|'='
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'self'
op|'.'
name|'f'
op|','
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out'
op|','
string|"b'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'remaining'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_seek_too_far_real_file
dedent|''
name|'def'
name|'test_seek_too_far_real_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# StringIO doesn't raise IOError if you see past the start of the file."
nl|'\n'
indent|'        '
name|'with'
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
name|'as'
name|'flo'
op|':'
newline|'\n'
indent|'            '
name|'content'
op|'='
string|"b'1234567890'"
newline|'\n'
name|'flo'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'content'
op|','
number|'0'
op|')'
op|','
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'flo'
op|','
number|'1000'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataToDictTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'MetadataToDictTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_metadata_to_dict
indent|'    '
name|'def'
name|'test_metadata_to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'key'"
op|':'
string|"'foo1'"
op|','
string|"'value'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
string|"'foo2'"
op|','
string|"'value'"
op|':'
string|"'baz'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|"'foo1'"
op|':'
string|"'bar'"
op|','
string|"'foo2'"
op|':'
string|"'baz'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_metadata_to_dict_empty
dedent|''
name|'def'
name|'test_metadata_to_dict_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
op|'['
op|']'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_to_metadata
dedent|''
name|'def'
name|'test_dict_to_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|sort_key
indent|'        '
name|'def'
name|'sort_key'
op|'('
name|'adict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'sorted'
op|'('
name|'adict'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'='
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
name|'dict'
op|'('
name|'foo1'
op|'='
string|"'bar1'"
op|','
name|'foo2'
op|'='
string|"'bar2'"
op|')'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'key'"
op|':'
string|"'foo1'"
op|','
string|"'value'"
op|':'
string|"'bar1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
string|"'foo2'"
op|','
string|"'value'"
op|':'
string|"'bar2'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'metadata'
op|','
name|'key'
op|'='
name|'sort_key'
op|')'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'expected'
op|','
name|'key'
op|'='
name|'sort_key'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_to_metadata_empty
dedent|''
name|'def'
name|'test_dict_to_metadata_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
op|'{'
op|'}'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrappedCodeTestCase
dedent|''
dedent|''
name|'class'
name|'WrappedCodeTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the get_wrapped_function utility method."""'
newline|'\n'
nl|'\n'
DECL|member|_wrapper
name|'def'
name|'_wrapper'
op|'('
name|'self'
op|','
name|'function'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'function'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
DECL|member|test_single_wrapped
dedent|''
name|'def'
name|'test_single_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'__code__'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_double_wrapped
dedent|''
name|'def'
name|'test_double_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'__code__'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_triple_wrapped
dedent|''
name|'def'
name|'test_triple_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'__code__'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExpectedArgsTestCase
dedent|''
dedent|''
name|'class'
name|'ExpectedArgsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_passes
indent|'    '
name|'def'
name|'test_passes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'foo'
op|','
name|'bar'
op|','
name|'baz'
op|'='
string|'"lol"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_raises
dedent|''
dedent|''
name|'def'
name|'test_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|function|func
dedent|''
name|'def'
name|'func'
op|'('
name|'bar'
op|','
name|'baz'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'dec'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_var_no_of_args
dedent|''
name|'def'
name|'test_var_no_of_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'bar'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_more_layers
dedent|''
dedent|''
name|'def'
name|'test_more_layers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|function|dec_2
dedent|''
name|'def'
name|'dec_2'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
DECL|function|inner_f
indent|'            '
name|'def'
name|'inner_f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner_f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec_2'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'bar'
op|','
name|'baz'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'dec'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringLengthTestCase
dedent|''
dedent|''
name|'class'
name|'StringLengthTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_check_string_length
indent|'    '
name|'def'
name|'test_check_string_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'utils'
op|'.'
name|'check_string_length'
op|'('
nl|'\n'
string|"'test'"
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
number|'11'
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"''"
op|','
string|"'name'"
op|','
name|'min_length'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"'a'"
op|'*'
number|'256'
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_string_length_noname
dedent|''
name|'def'
name|'test_check_string_length_noname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'utils'
op|'.'
name|'check_string_length'
op|'('
nl|'\n'
string|"'test'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
number|'11'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"''"
op|','
name|'min_length'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"'a'"
op|'*'
number|'256'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValidateIntegerTestCase
dedent|''
dedent|''
name|'class'
name|'ValidateIntegerTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_valid_inputs
indent|'    '
name|'def'
name|'test_valid_inputs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
number|'42'
op|','
string|'"answer"'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
string|'"42"'
op|','
string|'"answer"'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
string|'"7"'
op|','
string|'"lucky"'
op|','
name|'min_value'
op|'='
number|'7'
op|','
name|'max_value'
op|'='
number|'8'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
number|'7'
op|','
string|'"lucky"'
op|','
name|'min_value'
op|'='
number|'6'
op|','
name|'max_value'
op|'='
number|'7'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
number|'300'
op|','
string|'"Spartaaa!!!"'
op|','
name|'min_value'
op|'='
number|'300'
op|')'
op|','
number|'300'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
string|'"300"'
op|','
string|'"Spartaaa!!!"'
op|','
name|'max_value'
op|'='
number|'300'
op|')'
op|','
number|'300'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_inputs
dedent|''
name|'def'
name|'test_invalid_inputs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
string|'"im-not-an-int"'
op|','
string|'"not-an-int"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
number|'3.14'
op|','
string|'"Pie"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
string|'"299"'
op|','
string|'"Sparta no-show"'
op|','
nl|'\n'
name|'min_value'
op|'='
number|'300'
op|','
name|'max_value'
op|'='
number|'300'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
number|'55'
op|','
string|'"doing 55 in a 54"'
op|','
nl|'\n'
name|'max_value'
op|'='
number|'54'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
name|'six'
op|'.'
name|'unichr'
op|'('
number|'129'
op|')'
op|','
string|'"UnicodeError"'
op|','
nl|'\n'
name|'max_value'
op|'='
number|'1000'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValidateNeutronConfiguration
dedent|''
dedent|''
name|'class'
name|'ValidateNeutronConfiguration'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_nova_network
indent|'    '
name|'def'
name|'test_nova_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_neutron
dedent|''
name|'def'
name|'test_neutron'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_api_class'
op|'='
string|"'nova.network.neutronv2.api.API'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quantum
dedent|''
name|'def'
name|'test_quantum'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_api_class'
op|'='
string|"'nova.network.quantumv2.api.API'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutoDiskConfigUtilTestCase
dedent|''
dedent|''
name|'class'
name|'AutoDiskConfigUtilTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_is_auto_disk_config_disabled
indent|'    '
name|'def'
name|'test_is_auto_disk_config_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
string|'"Disabled "'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_auto_disk_config_disabled_none
dedent|''
name|'def'
name|'test_is_auto_disk_config_disabled_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_auto_disk_config_disabled_false
dedent|''
name|'def'
name|'test_is_auto_disk_config_disabled_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
string|'"false"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetSystemMetadataFromImageTestCase
dedent|''
dedent|''
name|'class'
name|'GetSystemMetadataFromImageTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|get_image
indent|'    '
name|'def'
name|'get_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
op|'{'
nl|'\n'
string|'"id"'
op|':'
string|'"fake-image"'
op|','
nl|'\n'
string|'"name"'
op|':'
string|'"fake-name"'
op|','
nl|'\n'
string|'"min_ram"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"min_disk"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"disk_format"'
op|':'
string|'"raw"'
op|','
nl|'\n'
string|'"container_format"'
op|':'
string|'"bare"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|get_flavor
dedent|''
name|'def'
name|'get_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
op|'{'
nl|'\n'
string|'"id"'
op|':'
string|'"fake.flavor"'
op|','
nl|'\n'
string|'"root_gb"'
op|':'
number|'10'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'flavor'
newline|'\n'
nl|'\n'
DECL|member|test_base_image_properties
dedent|''
name|'def'
name|'test_base_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the needed keys'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'.'
name|'get'
op|'('
name|'sys_key'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that everything else is ignored'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sys_meta'
op|')'
op|','
name|'len'
op|'('
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inherit_image_properties
dedent|''
name|'def'
name|'test_inherit_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
name|'image'
op|'['
string|'"properties"'
op|']'
op|'='
op|'{'
string|'"foo1"'
op|':'
string|'"bar"'
op|','
string|'"foo2"'
op|':'
string|'"baz"'
op|'}'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the image properties'
nl|'\n'
name|'for'
name|'key'
op|','
name|'expected'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'image'
op|'['
string|'"properties"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skip_image_properties
dedent|''
dedent|''
name|'def'
name|'test_skip_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
name|'image'
op|'['
string|'"properties"'
op|']'
op|'='
op|'{'
nl|'\n'
string|'"foo1"'
op|':'
string|'"bar"'
op|','
string|'"foo2"'
op|':'
string|'"baz"'
op|','
nl|'\n'
string|'"mappings"'
op|':'
string|'"wizz"'
op|','
string|'"img_block_device_mapping"'
op|':'
string|'"eek"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the image properties'
nl|'\n'
name|'for'
name|'key'
op|','
name|'expected'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'image'
op|'['
string|'"properties"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_SKIP_KEYS'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'sys_key'
op|','
name|'sys_meta'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vhd_min_disk_image
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_vhd_min_disk_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'self'
op|'.'
name|'get_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|'"disk_format"'
op|']'
op|'='
string|'"vhd"'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the min_disk property is taken from'
nl|'\n'
comment|"# flavor's root_gb when using vhd disk format"
nl|'\n'
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
string|'"min_disk"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|','
name|'flavor'
op|'['
string|'"root_gb"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dont_inherit_empty_values
dedent|''
name|'def'
name|'test_dont_inherit_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'['
name|'key'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the empty properties have not been inherited'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'sys_key'
op|','
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetImageFromSystemMetadataTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'GetImageFromSystemMetadataTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|get_system_metadata
indent|'    '
name|'def'
name|'get_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
op|'{'
nl|'\n'
string|'"image_min_ram"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"image_min_disk"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"image_disk_format"'
op|':'
string|'"raw"'
op|','
nl|'\n'
string|'"image_container_format"'
op|':'
string|'"bare"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'sys_meta'
newline|'\n'
nl|'\n'
DECL|member|test_image_from_system_metadata
dedent|''
name|'def'
name|'test_image_from_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'self'
op|'.'
name|'get_system_metadata'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%soo1"'
op|'%'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"bar"'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%soo2"'
op|'%'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"baz"'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%simg_block_device_mapping"'
op|'%'
nl|'\n'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"eek"'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the needed keys'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'.'
name|'get'
op|'('
name|'sys_key'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit the rest of metadata as properties'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"properties"'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'image'
op|'['
string|'"properties"'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|'"properties"'
op|']'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|'"img_block_device_mapping"'
op|','
name|'image'
op|'['
string|'"properties"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dont_inherit_empty_values
dedent|''
name|'def'
name|'test_dont_inherit_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'self'
op|'.'
name|'get_system_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'image'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the empty properties have not been inherited'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'key'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetImageMetadataFromVolumeTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'GetImageMetadataFromVolumeTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_inherit_image_properties
indent|'    '
name|'def'
name|'test_inherit_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'properties'
op|'='
op|'{'
string|'"fake_prop"'
op|':'
string|'"fake_value"'
op|'}'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|'"volume_image_metadata"'
op|':'
name|'properties'
op|'}'
newline|'\n'
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|','
name|'image_meta'
op|'['
string|'"properties"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_size
dedent|''
name|'def'
name|'test_image_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume'
op|'='
op|'{'
string|'"size"'
op|':'
number|'10'
op|'}'
newline|'\n'
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'10'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
name|'image_meta'
op|'['
string|'"size"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_status
dedent|''
name|'def'
name|'test_image_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'volume'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"active"'
op|','
name|'image_meta'
op|'['
string|'"status"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_values_conversion
dedent|''
name|'def'
name|'test_values_conversion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'properties'
op|'='
op|'{'
string|'"min_ram"'
op|':'
string|'"5"'
op|','
string|'"min_disk"'
op|':'
string|'"7"'
op|'}'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|'"volume_image_metadata"'
op|':'
name|'properties'
op|'}'
newline|'\n'
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'5'
op|','
name|'image_meta'
op|'['
string|'"min_ram"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'7'
op|','
name|'image_meta'
op|'['
string|'"min_disk"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suppress_not_image_properties
dedent|''
name|'def'
name|'test_suppress_not_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'properties'
op|'='
op|'{'
string|'"min_ram"'
op|':'
string|'"256"'
op|','
string|'"min_disk"'
op|':'
string|'"128"'
op|','
nl|'\n'
string|'"image_id"'
op|':'
string|'"fake_id"'
op|','
string|'"image_name"'
op|':'
string|'"fake_name"'
op|','
nl|'\n'
string|'"container_format"'
op|':'
string|'"ami"'
op|','
string|'"disk_format"'
op|':'
string|'"ami"'
op|','
nl|'\n'
string|'"size"'
op|':'
string|'"1234"'
op|','
string|'"checksum"'
op|':'
string|'"fake_checksum"'
op|'}'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|'"volume_image_metadata"'
op|':'
name|'properties'
op|'}'
newline|'\n'
name|'image_meta'
op|'='
name|'utils'
op|'.'
name|'get_image_metadata_from_volume'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'image_meta'
op|'['
string|'"properties"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'image_meta'
op|'['
string|'"size"'
op|']'
op|')'
newline|'\n'
comment|"# volume's properties should not be touched"
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
op|'{'
op|'}'
op|','
name|'properties'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VersionTestCase
dedent|''
dedent|''
name|'class'
name|'VersionTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_convert_version_to_int
indent|'    '
name|'def'
name|'test_convert_version_to_int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
string|"'6.2.0'"
op|')'
op|','
number|'6002000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
op|'('
number|'6'
op|','
number|'4'
op|','
number|'3'
op|')'
op|')'
op|','
number|'6004003'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
op|'('
number|'5'
op|','
op|')'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'convert_version_to_int'
op|','
string|"'5a.6b'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_convert_version_to_string
dedent|''
name|'def'
name|'test_convert_version_to_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_str'
op|'('
number|'6007000'
op|')'
op|','
string|"'6.7.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_str'
op|'('
number|'4'
op|')'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_convert_version_to_tuple
dedent|''
name|'def'
name|'test_convert_version_to_tuple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
string|"'6.7.0'"
op|')'
op|','
op|'('
number|'6'
op|','
number|'7'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConstantTimeCompareTestCase
dedent|''
dedent|''
name|'class'
name|'ConstantTimeCompareTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_constant_time_compare
indent|'    '
name|'def'
name|'test_constant_time_compare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"abcd1234"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"ABCD234"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceFilterTestCase
dedent|''
dedent|''
name|'class'
name|'ResourceFilterTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_assert_filtering
indent|'    '
name|'def'
name|'_assert_filtering'
op|'('
name|'self'
op|','
name|'res_list'
op|','
name|'filts'
op|','
name|'expected_tags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'actual_tags'
op|'='
name|'utils'
op|'.'
name|'filter_and_format_resource_metadata'
op|'('
string|"'instance'"
op|','
nl|'\n'
name|'res_list'
op|','
name|'filts'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertJsonEqual'
op|'('
name|'expected_tags'
op|','
name|'actual_tags'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filter_and_format_resource_metadata
dedent|''
name|'def'
name|'test_filter_and_format_resource_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create some tags'
nl|'\n'
comment|'# One overlapping pair, and one different key value pair'
nl|'\n'
comment|'# i1 : foo=bar, bax=wibble'
nl|'\n'
comment|'# i2 : foo=bar, baz=quux'
nl|'\n'
nl|'\n'
comment|'# resources'
nl|'\n'
indent|'        '
name|'i1'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'bax'"
op|':'
string|"'wibble'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'i2'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'2'"
op|','
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|','
string|"'baz'"
op|':'
string|"'quux'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Resources list'
nl|'\n'
name|'rl'
op|'='
op|'['
name|'i1'
op|','
name|'i2'
op|']'
newline|'\n'
nl|'\n'
comment|'# tags'
nl|'\n'
name|'i11'
op|'='
op|'{'
string|"'instance_id'"
op|':'
string|"'1'"
op|','
string|"'key'"
op|':'
string|"'foo'"
op|','
string|"'value'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'i12'
op|'='
op|'{'
string|"'instance_id'"
op|':'
string|"'1'"
op|','
string|"'key'"
op|':'
string|"'bax'"
op|','
string|"'value'"
op|':'
string|"'wibble'"
op|'}'
newline|'\n'
name|'i21'
op|'='
op|'{'
string|"'instance_id'"
op|':'
string|"'2'"
op|','
string|"'key'"
op|':'
string|"'foo'"
op|','
string|"'value'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'i22'
op|'='
op|'{'
string|"'instance_id'"
op|':'
string|"'2'"
op|','
string|"'key'"
op|':'
string|"'baz'"
op|','
string|"'value'"
op|':'
string|"'quux'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# No filter'
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'['
op|']'
op|','
op|'['
name|'i11'
op|','
name|'i12'
op|','
name|'i21'
op|','
name|'i22'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
op|'}'
op|','
op|'['
name|'i11'
op|','
name|'i12'
op|','
name|'i21'
op|','
name|'i22'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Key search'
nl|'\n'
nl|'\n'
comment|"# Both should have tags with key 'foo' and value 'bar'"
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'key'"
op|':'
string|"'foo'"
op|','
string|"'value'"
op|':'
string|"'bar'"
op|'}'
op|','
op|'['
name|'i11'
op|','
name|'i21'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Both should have tags with key 'foo'"
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'key'"
op|':'
string|"'foo'"
op|'}'
op|','
op|'['
name|'i11'
op|','
name|'i21'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Only i2 should have tags with key 'baz' and value 'quux'"
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'key'"
op|':'
string|"'baz'"
op|','
string|"'value'"
op|':'
string|"'quux'"
op|'}'
op|','
op|'['
name|'i22'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# Only i2 should have tags with value 'quux'"
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'value'"
op|':'
string|"'quux'"
op|'}'
op|','
op|'['
name|'i22'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Empty list should be returned when no tags match'
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'key'"
op|':'
string|"'split'"
op|','
string|"'value'"
op|':'
string|"'banana'"
op|'}'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Multiple values'
nl|'\n'
nl|'\n'
comment|"# Only i2 should have tags with key 'baz' and values in the set"
nl|'\n'
comment|"# ['quux', 'wibble']"
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'key'"
op|':'
string|"'baz'"
op|','
string|"'value'"
op|':'
op|'['
string|"'quux'"
op|','
string|"'wibble'"
op|']'
op|'}'
op|','
nl|'\n'
op|'['
name|'i22'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# But when specified as two different filters, no tags should be'
nl|'\n'
comment|'# returned. This is because, the filter will mean "return tags which'
nl|'\n'
comment|'# have (key=baz AND value=quux) AND (key=baz AND value=wibble)'
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'['
op|'{'
string|"'key'"
op|':'
string|"'baz'"
op|','
string|"'value'"
op|':'
string|"'quux'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
string|"'baz'"
op|','
string|"'value'"
op|':'
string|"'wibble'"
op|'}'
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test for regex'
nl|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'value'"
op|':'
string|"'\\\\Aqu..*\\\\Z(?s)'"
op|'}'
op|','
op|'['
name|'i22'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure bug #1365887 is fixed'
nl|'\n'
name|'i1'
op|'['
string|"'metadata'"
op|']'
op|'['
string|"'key3'"
op|']'
op|'='
string|"'a'"
newline|'\n'
name|'self'
op|'.'
name|'_assert_filtering'
op|'('
name|'rl'
op|','
op|'{'
string|"'value'"
op|':'
string|"'banana'"
op|'}'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SafeTruncateTestCase
dedent|''
dedent|''
name|'class'
name|'SafeTruncateTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_exception_to_dict_with_long_message_3_bytes
indent|'    '
name|'def'
name|'test_exception_to_dict_with_long_message_3_bytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Generate Chinese byte string whose length is 300. This Chinese UTF-8'
nl|'\n'
comment|'# character occupies 3 bytes. After truncating, the byte string length'
nl|'\n'
comment|'# should be 255.'
nl|'\n'
indent|'        '
name|'msg'
op|'='
string|"u'\\u8d75'"
op|'*'
number|'100'
newline|'\n'
name|'truncated_msg'
op|'='
name|'utils'
op|'.'
name|'safe_truncate'
op|'('
name|'msg'
op|','
number|'255'
op|')'
newline|'\n'
name|'byte_message'
op|'='
name|'encodeutils'
op|'.'
name|'safe_encode'
op|'('
name|'truncated_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'255'
op|','
name|'len'
op|'('
name|'byte_message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_exception_to_dict_with_long_message_2_bytes
dedent|''
name|'def'
name|'test_exception_to_dict_with_long_message_2_bytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Generate Russian byte string whose length is 300. This Russian UTF-8'
nl|'\n'
comment|'# character occupies 2 bytes. After truncating, the byte string length'
nl|'\n'
comment|'# should be 254.'
nl|'\n'
indent|'        '
name|'msg'
op|'='
name|'encodeutils'
op|'.'
name|'safe_decode'
op|'('
string|"'\\xd0\\x92'"
op|'*'
number|'150'
op|')'
newline|'\n'
name|'truncated_msg'
op|'='
name|'utils'
op|'.'
name|'safe_truncate'
op|'('
name|'msg'
op|','
number|'255'
op|')'
newline|'\n'
name|'byte_message'
op|'='
name|'encodeutils'
op|'.'
name|'safe_encode'
op|'('
name|'truncated_msg'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'254'
op|','
name|'len'
op|'('
name|'byte_message'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SpawnNTestCase
dedent|''
dedent|''
name|'class'
name|'SpawnNTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SpawnNTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'context_fixture'
op|'.'
name|'ClearRequestContext'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'spawn_name'
op|'='
string|"'spawn_n'"
newline|'\n'
nl|'\n'
DECL|member|test_spawn_n_no_context
dedent|''
name|'def'
name|'test_spawn_n_no_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fake_spawn
name|'def'
name|'_fake_spawn'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# call the method to ensure no error is raised'
nl|'\n'
indent|'            '
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test'"
op|','
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
dedent|''
name|'def'
name|'fake'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'eventlet'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|','
name|'_fake_spawn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'getattr'
op|'('
name|'utils'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|')'
op|'('
name|'fake'
op|','
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_n_context
dedent|''
name|'def'
name|'test_spawn_n_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fake_spawn
name|'def'
name|'_fake_spawn'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# call the method to ensure no error is raised'
nl|'\n'
indent|'            '
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ctxt'
op|','
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test'"
op|','
name|'kwargs'
op|'['
string|"'kwarg1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
dedent|''
name|'def'
name|'fake'
op|'('
name|'context'
op|','
name|'kwarg1'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'eventlet'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|','
name|'_fake_spawn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'getattr'
op|'('
name|'utils'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|')'
op|'('
name|'fake'
op|','
name|'ctxt'
op|','
name|'kwarg1'
op|'='
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ctxt'
op|','
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_n_context_different_from_passed
dedent|''
name|'def'
name|'test_spawn_n_context_different_from_passed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'ctxt_passed'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'overwrite'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ctxt'
op|','
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fake_spawn
name|'def'
name|'_fake_spawn'
op|'('
name|'func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# call the method to ensure no error is raised'
nl|'\n'
indent|'            '
name|'func'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ctxt_passed'
op|','
name|'args'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test'"
op|','
name|'kwargs'
op|'['
string|"'kwarg1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
dedent|''
name|'def'
name|'fake'
op|'('
name|'context'
op|','
name|'kwarg1'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'eventlet'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|','
name|'_fake_spawn'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'getattr'
op|'('
name|'utils'
op|','
name|'self'
op|'.'
name|'spawn_name'
op|')'
op|'('
name|'fake'
op|','
name|'ctxt_passed'
op|','
name|'kwarg1'
op|'='
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ctxt'
op|','
name|'common_context'
op|'.'
name|'get_current'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SpawnTestCase
dedent|''
dedent|''
name|'class'
name|'SpawnTestCase'
op|'('
name|'SpawnNTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'SpawnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'spawn_name'
op|'='
string|"'spawn'"
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

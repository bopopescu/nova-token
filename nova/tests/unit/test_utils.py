begin_unit
comment|'#    Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'importlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetMyIP4AddressTestCase
name|'class'
name|'GetMyIP4AddressTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_get_my_ipv4_address_with_no_ipv4
indent|'    '
name|'def'
name|'test_get_my_ipv4_address_with_no_ipv4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
string|'"""172.16.0.0/16 via 172.16.251.13 dev tun1\n172.16.251.1 via 172.16.251.13 dev tun1\n172.16.251.13 dev tun1  proto kernel  scope link  src 172.16.251.14\n172.24.0.0/16 via 172.16.251.13 dev tun1\n192.168.122.0/24 dev virbr0  proto kernel  scope link  src 192.168.122.1"""'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'response'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'address'
op|'='
name|'utils'
op|'.'
name|'get_my_ipv4_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'address'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_my_ipv4_address_bad_process
dedent|''
name|'def'
name|'test_get_my_ipv4_address_bad_process'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'address'
op|'='
name|'utils'
op|'.'
name|'get_my_ipv4_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'address'
op|','
string|"'127.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_my_ipv4_address_with_single_interface
dedent|''
name|'def'
name|'test_get_my_ipv4_address_with_single_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response_route'
op|'='
string|'"""default via 192.168.1.1 dev wlan0  proto static\n192.168.1.0/24 dev wlan0  proto kernel  scope link  src 192.168.1.137  metric 9\n"""'
newline|'\n'
name|'response_addr'
op|'='
string|'"""\n1: lo    inet 127.0.0.1/8 scope host lo\n3: wlan0    inet 192.168.1.137/24 brd 192.168.1.255 scope global wlan0\n"""'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'route'"
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'response_route'
op|','
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'response_addr'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'address'
op|'='
name|'utils'
op|'.'
name|'get_my_ipv4_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'address'
op|','
string|"'192.168.1.137'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_my_ipv4_address_with_multi_ipv4_on_single_interface
dedent|''
name|'def'
name|'test_get_my_ipv4_address_with_multi_ipv4_on_single_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response_route'
op|'='
string|'"""\n172.18.56.0/24 dev customer  proto kernel  scope link  src 172.18.56.22\n169.254.0.0/16 dev customer  scope link  metric 1031\ndefault via 172.18.56.1 dev customer\n"""'
newline|'\n'
name|'response_addr'
op|'='
op|'('
string|'""'
nl|'\n'
string|'"31: customer    inet 172.18.56.22/24 brd 172.18.56.255 scope global"'
nl|'\n'
string|'" customer\\n"'
nl|'\n'
string|'"31: customer    inet 172.18.56.32/24 brd 172.18.56.255 scope global "'
nl|'\n'
string|'"secondary customer"'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'route'"
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'response_route'
op|','
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'response_addr'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'address'
op|'='
name|'utils'
op|'.'
name|'get_my_ipv4_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'address'
op|','
string|"'172.18.56.22'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_my_ipv4_address_with_multiple_interfaces
dedent|''
name|'def'
name|'test_get_my_ipv4_address_with_multiple_interfaces'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response_route'
op|'='
string|'"""\n169.1.9.0/24 dev eth1  proto kernel  scope link  src 169.1.9.10\n172.17.248.0/21 dev eth0  proto kernel  scope link  src 172.17.255.9\n169.254.0.0/16 dev eth0  scope link  metric 1002\n169.254.0.0/16 dev eth1  scope link  metric 1003\ndefault via 172.17.248.1 dev eth0  proto static\n"""'
newline|'\n'
name|'response_addr'
op|'='
string|'"""\n1: lo    inet 127.0.0.1/8 scope host lo\n2: eth0    inet 172.17.255.9/21 brd 172.17.255.255 scope global eth0\n3: eth1    inet 169.1.9.10/24 scope global eth1\n"""'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'route'"
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'response_route'
op|','
name|'None'
newline|'\n'
dedent|''
name|'return'
name|'response_addr'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'address'
op|'='
name|'utils'
op|'.'
name|'get_my_ipv4_address'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'address'
op|','
string|"'172.17.255.9'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenericUtilsTestCase
dedent|''
dedent|''
name|'class'
name|'GenericUtilsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_parse_server_string
indent|'    '
name|'def'
name|'test_parse_server_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'::1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[::1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'2001:db8::192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[2001:db8::192.168.1.1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.2:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.2'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.3'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"'8443'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
comment|'# error case'
nl|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.exa:mple.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_unicode_sanitization
dedent|''
name|'def'
name|'test_hostname_unicode_sanitization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'u"\\u7684.test.example.com"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_periods
dedent|''
name|'def'
name|'test_hostname_sanitize_periods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"....test.example.com..."'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_dashes
dedent|''
name|'def'
name|'test_hostname_sanitize_dashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"----test.example.com---"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_characters
dedent|''
name|'def'
name|'test_hostname_sanitize_characters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"(#@&$!(@*--#&91)(__=+--test-host.example!!.com-0+"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"91----test-host.example.com-0"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_translate
dedent|''
name|'def'
name|'test_hostname_translate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"hello"'
op|','
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_cached_file
dedent|''
name|'def'
name|'test_read_cached_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|'"getmtime"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cache_data'
op|'='
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|','
name|'cache_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'cache_data'
op|'['
string|'"data"'
op|']'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_modified_cached_file
dedent|''
name|'def'
name|'test_read_modified_cached_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|'"getmtime"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_contents'
op|'='
string|'"lorem ipsum"'
newline|'\n'
name|'m'
op|'='
name|'mock'
op|'.'
name|'mock_open'
op|'('
name|'read_data'
op|'='
name|'fake_contents'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"__builtin__.open"'
op|','
name|'m'
op|','
name|'create'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cache_data'
op|'='
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'reload_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|test_reload
name|'def'
name|'test_reload'
op|'('
name|'reloaded_data'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reloaded_data'
op|','
name|'fake_contents'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reload_called'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|','
name|'cache_data'
op|','
nl|'\n'
name|'reload_func'
op|'='
name|'test_reload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|','
name|'fake_contents'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reload_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_password
dedent|''
dedent|''
name|'def'
name|'test_generate_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
name|'if'
name|'c'
name|'in'
string|"'0123456789'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'abcdefghijklmnopqrstuvwxyz'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_file_as_root
dedent|''
name|'def'
name|'test_read_file_as_root'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'1'
op|']'
op|'=='
string|"'bad'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
string|"'fakecontents'"
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'contents'
op|'='
name|'utils'
op|'.'
name|'read_file_as_root'
op|'('
string|"'good'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'contents'
op|','
string|"'fakecontents'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FileNotFound'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'read_file_as_root'
op|','
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_temporary_chown
dedent|''
name|'def'
name|'test_temporary_chown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'chown'"
op|':'
newline|'\n'
indent|'                '
name|'fake_execute'
op|'.'
name|'uid'
op|'='
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'tempfile'
op|'.'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'temporary_chown'
op|'('
name|'f'
op|'.'
name|'name'
op|','
name|'owner_uid'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xhtml_escape
dedent|''
dedent|''
name|'def'
name|'test_xhtml_escape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&quot;foo&quot;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'\'"foo"\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&apos;foo&apos;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'"\'foo\'"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&amp;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'&'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&gt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'>'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&lt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'<'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&lt;foo&gt;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|"'<foo>'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_valid_ipv4
dedent|''
name|'def'
name|'test_is_valid_ipv4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
string|"'127.0.0.1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
string|"'::1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
string|"'bacon'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
string|'""'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_valid_ipv6
dedent|''
name|'def'
name|'test_is_valid_ipv6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
string|'"::1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
nl|'\n'
string|'"abcd:ef01:2345:6789:abcd:ef01:192.168.254.254"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
string|'"127.0.0.1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
string|'""'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6'
op|'('
number|'10'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_valid_ipv6_cidr
dedent|''
name|'def'
name|'test_is_valid_ipv6_cidr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"2600::/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"abcd:ef01:2345:6789:abcd:ef01:192.168.254.254/48"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001/32"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"foo"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv6_cidr'
op|'('
string|'"127.0.0.1"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_shortened_ipv6
dedent|''
name|'def'
name|'test_get_shortened_ipv6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"abcd:ef01:2345:6789:abcd:ef01:c0a8:fefe"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"abcd:ef01:2345:6789:abcd:ef01:192.168.254.254"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"::1"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"0000:0000:0000:0000:0000:0000:0000:0001"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"caca::caca:0:babe:201:102"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|'('
nl|'\n'
string|'"caca:0000:0000:caca:0000:babe:0201:0102"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6'
op|','
nl|'\n'
string|'"failure"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_shortened_ipv6_cidr
dedent|''
name|'def'
name|'test_get_shortened_ipv6_cidr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"2600::/64"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|'('
nl|'\n'
string|'"2600:0000:0000:0000:0000:0000:0000:0000/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"2600::/64"'
op|','
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|'('
nl|'\n'
string|'"2600::1/64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|','
nl|'\n'
string|'"127.0.0.1"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'netaddr'
op|'.'
name|'AddrFormatError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_shortened_ipv6_cidr'
op|','
nl|'\n'
string|'"failure"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_hash_str
dedent|''
name|'def'
name|'test_get_hash_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_str'
op|'='
string|'"foo"'
newline|'\n'
name|'value'
op|'='
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'base_str'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'value'
op|','
name|'utils'
op|'.'
name|'get_hash_str'
op|'('
name|'base_str'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonkeyPatchTestCase
dedent|''
dedent|''
name|'class'
name|'MonkeyPatchTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for utils.monkey_patch()."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonkeyPatchTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'example_package'
op|'='
string|"'nova.tests.unit.monkey_patch_example.'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
nl|'\n'
name|'monkey_patch'
op|'='
name|'True'
op|','
nl|'\n'
name|'monkey_patch_modules'
op|'='
op|'['
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a'"
op|'+'
string|"':'"
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_decorator'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_monkey_patch
dedent|''
name|'def'
name|'test_monkey_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'monkey_patch'
op|'('
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|'='
op|'['
op|']'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_a'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_b'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_a'
op|'.'
name|'example_function_a'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleA'
op|'='
name|'example_a'
op|'.'
name|'ExampleClassA'
op|'('
op|')'
newline|'\n'
name|'exampleA'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_a'
op|'='
name|'exampleA'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_a'
op|','
number|'8'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_b'
op|'.'
name|'example_function_b'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleB'
op|'='
name|'example_b'
op|'.'
name|'ExampleClassB'
op|'('
op|')'
newline|'\n'
name|'exampleB'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_b'
op|'='
name|'exampleB'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_b'
op|','
number|'8'
op|')'
newline|'\n'
name|'package_a'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a.'"
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'example_function_a'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method_add'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'package_b'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_b.'"
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'example_function_b'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method_add'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonkeyPatchDefaultTestCase
dedent|''
dedent|''
name|'class'
name|'MonkeyPatchDefaultTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for default monkey_patch_modules value."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonkeyPatchDefaultTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
nl|'\n'
name|'monkey_patch'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_monkey_patch_default_mod
dedent|''
name|'def'
name|'test_monkey_patch_default_mod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# monkey_patch_modules is defined to be'
nl|'\n'
comment|'#    <module_to_patch>:<decorator_to_patch_with>'
nl|'\n'
comment|'#  Here we check that both parts of the default values are'
nl|'\n'
comment|'# valid'
nl|'\n'
indent|'        '
name|'for'
name|'module'
name|'in'
name|'CONF'
op|'.'
name|'monkey_patch_modules'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'module'
op|'.'
name|'split'
op|'('
string|"':'"
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Check we can import the module to be patched'
nl|'\n'
name|'importlib'
op|'.'
name|'import_module'
op|'('
name|'m'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
comment|'# check the decorator is valid'
nl|'\n'
name|'decorator_name'
op|'='
name|'m'
op|'['
number|'1'
op|']'
op|'.'
name|'rsplit'
op|'('
string|"'.'"
op|','
number|'1'
op|')'
newline|'\n'
name|'decorator_module'
op|'='
name|'importlib'
op|'.'
name|'import_module'
op|'('
name|'decorator_name'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'getattr'
op|'('
name|'decorator_module'
op|','
name|'decorator_name'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuditPeriodTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'AuditPeriodTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# a fairly random time to test with'
nl|'\n'
name|'self'
op|'.'
name|'test_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'second'
op|'='
number|'23'
op|','
nl|'\n'
name|'minute'
op|'='
number|'12'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'override_time'
op|'='
name|'self'
op|'.'
name|'test_time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeutils'
op|'.'
name|'clear_time_override'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour
dedent|''
name|'def'
name|'test_hour'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_before_current
dedent|''
name|'def'
name|'test_hour_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_after_current
dedent|''
name|'def'
name|'test_hour_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day
dedent|''
name|'def'
name|'test_day'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_before_current
dedent|''
name|'def'
name|'test_day_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_after_current
dedent|''
name|'def'
name|'test_day_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'3'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month
dedent|''
name|'def'
name|'test_month'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_before_current
dedent|''
name|'def'
name|'test_month_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_after_current
dedent|''
name|'def'
name|'test_month_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@15'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year
dedent|''
name|'def'
name|'test_year'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_before_current
dedent|''
name|'def'
name|'test_year_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_after_current
dedent|''
name|'def'
name|'test_year_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MkfsTestCase
dedent|''
dedent|''
name|'class'
name|'MkfsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_mkfs
indent|'    '
name|'def'
name|'test_mkfs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'ext4'"
op|','
string|"'-F'"
op|','
string|"'/my/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
string|"'/my/swap/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
string|"'/my/swap/block/dev'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mkfs_with_label
dedent|''
name|'def'
name|'test_mkfs_with_label'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'ext4'"
op|','
string|"'-F'"
op|','
nl|'\n'
string|"'-L'"
op|','
string|"'ext4-vol'"
op|','
string|"'/my/block/dev'"
op|','
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'msdos'"
op|','
nl|'\n'
string|"'-n'"
op|','
string|"'msdos-vol'"
op|','
string|"'/my/msdos/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
string|"'-L'"
op|','
string|"'swap-vol'"
op|','
string|"'/my/swap/block/dev'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|','
string|"'ext4-vol'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'msdos'"
op|','
string|"'/my/msdos/block/dev'"
op|','
string|"'msdos-vol'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
string|"'/my/swap/block/dev'"
op|','
string|"'swap-vol'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LastBytesTestCase
dedent|''
dedent|''
name|'class'
name|'LastBytesTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the last_bytes() utility method."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LastBytesTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'f'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'1234567890'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_truncated
dedent|''
name|'def'
name|'test_truncated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
name|'out'
op|','
name|'remaining'
op|'='
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'self'
op|'.'
name|'f'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out'
op|','
string|"'67890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'remaining'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_all
dedent|''
name|'def'
name|'test_read_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'f'
op|'.'
name|'seek'
op|'('
number|'0'
op|','
name|'os'
op|'.'
name|'SEEK_SET'
op|')'
newline|'\n'
name|'out'
op|','
name|'remaining'
op|'='
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'self'
op|'.'
name|'f'
op|','
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'out'
op|','
string|"'1234567890'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'remaining'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_seek_too_far_real_file
dedent|''
name|'def'
name|'test_seek_too_far_real_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# StringIO doesn't raise IOError if you see past the start of the file."
nl|'\n'
indent|'        '
name|'flo'
op|'='
name|'tempfile'
op|'.'
name|'TemporaryFile'
op|'('
op|')'
newline|'\n'
name|'content'
op|'='
string|"'1234567890'"
newline|'\n'
name|'flo'
op|'.'
name|'write'
op|'('
name|'content'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'content'
op|','
number|'0'
op|')'
op|','
name|'utils'
op|'.'
name|'last_bytes'
op|'('
name|'flo'
op|','
number|'1000'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IntLikeTestCase
dedent|''
dedent|''
name|'class'
name|'IntLikeTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_is_int_like
indent|'    '
name|'def'
name|'test_is_int_like'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"514"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"0"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
number|'1.1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"1.1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"1.1.1"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"0."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"aaaaaa"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"...."'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"1g"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"0cc3346e-9fef-4445-abe6-5d2b2690ec64"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_int_like'
op|'('
string|'"a1"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataToDictTestCase
dedent|''
dedent|''
name|'class'
name|'MetadataToDictTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_metadata_to_dict
indent|'    '
name|'def'
name|'test_metadata_to_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'key'"
op|':'
string|"'foo1'"
op|','
string|"'value'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
string|"'foo2'"
op|','
string|"'value'"
op|':'
string|"'baz'"
op|'}'
op|']'
op|')'
op|','
nl|'\n'
op|'{'
string|"'foo1'"
op|':'
string|"'bar'"
op|','
string|"'foo2'"
op|':'
string|"'baz'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_metadata_to_dict_empty
dedent|''
name|'def'
name|'test_metadata_to_dict_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'metadata_to_dict'
op|'('
op|'['
op|']'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_to_metadata
dedent|''
name|'def'
name|'test_dict_to_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
op|'['
op|'{'
string|"'key'"
op|':'
string|"'foo1'"
op|','
string|"'value'"
op|':'
string|"'bar1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key'"
op|':'
string|"'foo2'"
op|','
string|"'value'"
op|':'
string|"'bar2'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
name|'dict'
op|'('
name|'foo1'
op|'='
string|"'bar1'"
op|','
nl|'\n'
name|'foo2'
op|'='
string|"'bar2'"
op|')'
op|')'
op|','
nl|'\n'
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_to_metadata_empty
dedent|''
name|'def'
name|'test_dict_to_metadata_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
op|'{'
op|'}'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|WrappedCodeTestCase
dedent|''
dedent|''
name|'class'
name|'WrappedCodeTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test the get_wrapped_function utility method."""'
newline|'\n'
nl|'\n'
DECL|member|_wrapper
name|'def'
name|'_wrapper'
op|'('
name|'self'
op|','
name|'function'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'function'
op|')'
newline|'\n'
DECL|function|decorated_function
name|'def'
name|'decorated_function'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'function'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'decorated_function'
newline|'\n'
nl|'\n'
DECL|member|test_single_wrapped
dedent|''
name|'def'
name|'test_single_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'func_code'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_double_wrapped
dedent|''
name|'def'
name|'test_double_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'func_code'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_triple_wrapped
dedent|''
name|'def'
name|'test_triple_wrapped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
op|'@'
name|'self'
op|'.'
name|'_wrapper'
newline|'\n'
DECL|function|wrapped
name|'def'
name|'wrapped'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'func'
op|'='
name|'utils'
op|'.'
name|'get_wrapped_function'
op|'('
name|'wrapped'
op|')'
newline|'\n'
name|'func_code'
op|'='
name|'func'
op|'.'
name|'func_code'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'self'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'instance'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'red'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'blue'"
op|','
name|'func_code'
op|'.'
name|'co_varnames'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExpectedArgsTestCase
dedent|''
dedent|''
name|'class'
name|'ExpectedArgsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_passes
indent|'    '
name|'def'
name|'test_passes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'foo'
op|','
name|'bar'
op|','
name|'baz'
op|'='
string|'"lol"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_raises
dedent|''
dedent|''
name|'def'
name|'test_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|function|func
dedent|''
name|'def'
name|'func'
op|'('
name|'bar'
op|','
name|'baz'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'dec'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_var_no_of_args
dedent|''
name|'def'
name|'test_var_no_of_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'bar'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_more_layers
dedent|''
dedent|''
name|'def'
name|'test_more_layers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'expects_func_args'
op|'('
string|"'foo'"
op|','
string|"'baz'"
op|')'
newline|'\n'
DECL|function|dec
name|'def'
name|'dec'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|function|dec_2
dedent|''
name|'def'
name|'dec_2'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
DECL|function|inner_f
indent|'            '
name|'def'
name|'inner_f'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'inner_f'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'dec_2'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'bar'
op|','
name|'baz'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'dec'
op|','
name|'func'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|StringLengthTestCase
dedent|''
dedent|''
name|'class'
name|'StringLengthTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_check_string_length
indent|'    '
name|'def'
name|'test_check_string_length'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'utils'
op|'.'
name|'check_string_length'
op|'('
nl|'\n'
string|"'test'"
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
number|'11'
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"''"
op|','
string|"'name'"
op|','
name|'min_length'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"'a'"
op|'*'
number|'256'
op|','
string|"'name'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_string_length_noname
dedent|''
name|'def'
name|'test_check_string_length_noname'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'utils'
op|'.'
name|'check_string_length'
op|'('
nl|'\n'
string|"'test'"
op|','
name|'max_length'
op|'='
number|'255'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
number|'11'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"''"
op|','
name|'min_length'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'check_string_length'
op|','
nl|'\n'
string|"'a'"
op|'*'
number|'256'
op|','
name|'max_length'
op|'='
number|'255'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValidateIntegerTestCase
dedent|''
dedent|''
name|'class'
name|'ValidateIntegerTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_valid_inputs
indent|'    '
name|'def'
name|'test_valid_inputs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
number|'42'
op|','
string|'"answer"'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
string|'"42"'
op|','
string|'"answer"'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
string|'"7"'
op|','
string|'"lucky"'
op|','
name|'min_value'
op|'='
number|'7'
op|','
name|'max_value'
op|'='
number|'8'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
number|'7'
op|','
string|'"lucky"'
op|','
name|'min_value'
op|'='
number|'6'
op|','
name|'max_value'
op|'='
number|'7'
op|')'
op|','
number|'7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
number|'300'
op|','
string|'"Spartaaa!!!"'
op|','
name|'min_value'
op|'='
number|'300'
op|')'
op|','
number|'300'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|'('
nl|'\n'
string|'"300"'
op|','
string|'"Spartaaa!!!"'
op|','
name|'max_value'
op|'='
number|'300'
op|')'
op|','
number|'300'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_inputs
dedent|''
name|'def'
name|'test_invalid_inputs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
string|'"im-not-an-int"'
op|','
string|'"not-an-int"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
number|'3.14'
op|','
string|'"Pie"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
string|'"299"'
op|','
string|'"Sparta no-show"'
op|','
nl|'\n'
name|'min_value'
op|'='
number|'300'
op|','
name|'max_value'
op|'='
number|'300'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
number|'55'
op|','
string|'"doing 55 in a 54"'
op|','
nl|'\n'
name|'max_value'
op|'='
number|'54'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'validate_integer'
op|','
nl|'\n'
name|'unichr'
op|'('
number|'129'
op|')'
op|','
string|'"UnicodeError"'
op|','
nl|'\n'
name|'max_value'
op|'='
number|'1000'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ValidateNeutronConfiguration
dedent|''
dedent|''
name|'class'
name|'ValidateNeutronConfiguration'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_nova_network
indent|'    '
name|'def'
name|'test_nova_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_neutron
dedent|''
name|'def'
name|'test_neutron'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_api_class'
op|'='
string|"'nova.network.neutronv2.api.API'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quantum
dedent|''
name|'def'
name|'test_quantum'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_api_class'
op|'='
string|"'nova.network.quantumv2.api.API'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_neutron'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AutoDiskConfigUtilTestCase
dedent|''
dedent|''
name|'class'
name|'AutoDiskConfigUtilTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_is_auto_disk_config_disabled
indent|'    '
name|'def'
name|'test_is_auto_disk_config_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
string|'"Disabled "'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_auto_disk_config_disabled_none
dedent|''
name|'def'
name|'test_is_auto_disk_config_disabled_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_auto_disk_config_disabled_false
dedent|''
name|'def'
name|'test_is_auto_disk_config_disabled_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'is_auto_disk_config_disabled'
op|'('
string|'"false"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetSystemMetadataFromImageTestCase
dedent|''
dedent|''
name|'class'
name|'GetSystemMetadataFromImageTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|get_image
indent|'    '
name|'def'
name|'get_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
op|'{'
nl|'\n'
string|'"id"'
op|':'
string|'"fake-image"'
op|','
nl|'\n'
string|'"name"'
op|':'
string|'"fake-name"'
op|','
nl|'\n'
string|'"min_ram"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"min_disk"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"disk_format"'
op|':'
string|'"raw"'
op|','
nl|'\n'
string|'"container_format"'
op|':'
string|'"bare"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'image_meta'
newline|'\n'
nl|'\n'
DECL|member|get_flavor
dedent|''
name|'def'
name|'get_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
op|'{'
nl|'\n'
string|'"id"'
op|':'
string|'"fake.flavor"'
op|','
nl|'\n'
string|'"root_gb"'
op|':'
number|'10'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'flavor'
newline|'\n'
nl|'\n'
DECL|member|test_base_image_properties
dedent|''
name|'def'
name|'test_base_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the needed keys'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'.'
name|'get'
op|'('
name|'sys_key'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that everything else is ignored'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sys_meta'
op|')'
op|','
name|'len'
op|'('
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inherit_image_properties
dedent|''
name|'def'
name|'test_inherit_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
name|'image'
op|'['
string|'"properties"'
op|']'
op|'='
op|'{'
string|'"foo1"'
op|':'
string|'"bar"'
op|','
string|'"foo2"'
op|':'
string|'"baz"'
op|'}'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the image properties'
nl|'\n'
name|'for'
name|'key'
op|','
name|'expected'
name|'in'
name|'image'
op|'['
string|'"properties"'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vhd_min_disk_image
dedent|''
dedent|''
name|'def'
name|'test_vhd_min_disk_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'self'
op|'.'
name|'get_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|'"disk_format"'
op|']'
op|'='
string|'"vhd"'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the min_disk property is taken from'
nl|'\n'
comment|"# flavor's root_gb when using vhd disk format"
nl|'\n'
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
string|'"min_disk"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|','
name|'flavor'
op|'['
string|'"root_gb"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dont_inherit_empty_values
dedent|''
name|'def'
name|'test_dont_inherit_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'get_image'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'image'
op|'['
name|'key'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'get_system_metadata_from_image'
op|'('
name|'image'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the empty properties have not been inherited'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'sys_key'
op|','
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetImageFromSystemMetadataTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'GetImageFromSystemMetadataTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|get_system_metadata
indent|'    '
name|'def'
name|'get_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
op|'{'
nl|'\n'
string|'"image_min_ram"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"image_min_disk"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"image_disk_format"'
op|':'
string|'"raw"'
op|','
nl|'\n'
string|'"image_container_format"'
op|':'
string|'"bare"'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'sys_meta'
newline|'\n'
nl|'\n'
DECL|member|test_image_from_system_metadata
dedent|''
name|'def'
name|'test_image_from_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'self'
op|'.'
name|'get_system_metadata'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%soo1"'
op|'%'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"bar"'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%soo2"'
op|'%'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"baz"'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit all the needed keys'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'.'
name|'get'
op|'('
name|'sys_key'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that we inherit the rest of metadata as properties'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"properties"'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'image'
op|'['
string|'"properties"'
op|']'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|'"properties"'
op|']'
op|'['
name|'key'
op|']'
op|','
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dont_inherit_empty_values
dedent|''
dedent|''
name|'def'
name|'test_dont_inherit_empty_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'self'
op|'.'
name|'get_system_metadata'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'sys_key'
op|'='
string|'"%s%s"'
op|'%'
op|'('
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|','
name|'key'
op|')'
newline|'\n'
name|'sys_meta'
op|'['
name|'sys_key'
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'image'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the empty properties have not been inherited'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'utils'
op|'.'
name|'SM_INHERITABLE_KEYS'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'key'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_non_inheritable_image_properties
dedent|''
dedent|''
name|'def'
name|'test_non_inheritable_image_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'self'
op|'.'
name|'get_system_metadata'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'['
string|'"%soo1"'
op|'%'
name|'utils'
op|'.'
name|'SM_IMAGE_PROP_PREFIX'
op|']'
op|'='
string|'"bar"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'non_inheritable_image_properties'
op|'='
op|'['
string|'"foo1"'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the foo1 key has not been inherited'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|'"foo1"'
op|','
name|'image'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VersionTestCase
dedent|''
dedent|''
name|'class'
name|'VersionTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_convert_version_to_int
indent|'    '
name|'def'
name|'test_convert_version_to_int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
string|"'6.2.0'"
op|')'
op|','
number|'6002000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
op|'('
number|'6'
op|','
number|'4'
op|','
number|'3'
op|')'
op|')'
op|','
number|'6004003'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_int'
op|'('
op|'('
number|'5'
op|','
op|')'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'convert_version_to_int'
op|','
string|"'5a.6b'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_convert_version_to_string
dedent|''
name|'def'
name|'test_convert_version_to_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_str'
op|'('
number|'6007000'
op|')'
op|','
string|"'6.7.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_str'
op|'('
number|'4'
op|')'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_convert_version_to_tuple
dedent|''
name|'def'
name|'test_convert_version_to_tuple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
string|"'6.7.0'"
op|')'
op|','
op|'('
number|'6'
op|','
number|'7'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConstantTimeCompareTestCase
dedent|''
dedent|''
name|'class'
name|'ConstantTimeCompareTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_constant_time_compare
indent|'    '
name|'def'
name|'test_constant_time_compare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"abcd1234"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'constant_time_compare'
op|'('
string|'"abcd1234"'
op|','
string|'"ABCD234"'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

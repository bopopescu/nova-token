begin_unit
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
op|'.'
name|'filters'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UtilsTestCase
name|'class'
name|'UtilsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_validate_num_values
indent|'    '
name|'def'
name|'test_validate_num_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'validate_num_values'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"x"'
op|','
name|'f'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'default'
op|'='
string|'"x"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'f'
op|'('
name|'set'
op|'('
op|'['
string|'"1"'
op|']'
op|')'
op|','
name|'cast_to'
op|'='
name|'int'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1.0'
op|','
name|'f'
op|'('
name|'set'
op|'('
op|'['
string|'"1"'
op|']'
op|')'
op|','
name|'cast_to'
op|'='
name|'float'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'f'
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
name|'based_on'
op|'='
name|'min'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'f'
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
name|'based_on'
op|'='
name|'max'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.objects.aggregate.AggregateList.get_by_host"'
op|')'
newline|'\n'
DECL|member|test_aggregate_values_from_db
name|'def'
name|'test_aggregate_values_from_db'
op|'('
name|'self'
op|','
name|'get_by_host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aggrA'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'aggrB'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'get_by_host'
op|'.'
name|'return_value'
op|'='
op|'['
name|'aggrA'
op|','
name|'aggrB'
op|']'
newline|'\n'
name|'aggrA'
op|'.'
name|'metadata'
op|'='
op|'{'
string|"'k1'"
op|':'
number|'1'
op|','
string|"'k2'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'aggrB'
op|'.'
name|'metadata'
op|'='
op|'{'
string|"'k1'"
op|':'
number|'3'
op|','
string|"'k2'"
op|':'
number|'4'
op|'}'
newline|'\n'
nl|'\n'
name|'values'
op|'='
name|'utils'
op|'.'
name|'aggregate_values_from_db'
op|'('
name|'context'
op|','
string|"'h1'"
op|','
name|'key_name'
op|'='
string|"'k1'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'context'
op|'.'
name|'elevated'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'3'
op|']'
op|')'
op|','
name|'values'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2011 OpenStack Foundation  # All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Scheduler Host Filters.\n"""'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
op|'.'
name|'filters'
name|'import'
name|'all_hosts_filter'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
op|'.'
name|'filters'
name|'import'
name|'compute_filter'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'scheduler'
name|'import'
name|'fakes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostFiltersTestCase
name|'class'
name|'HostFiltersTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_filter_handler
indent|'    '
name|'def'
name|'test_filter_handler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Double check at least a couple of known filters exist'
nl|'\n'
indent|'        '
name|'filter_handler'
op|'='
name|'filters'
op|'.'
name|'HostFilterHandler'
op|'('
op|')'
newline|'\n'
name|'classes'
op|'='
name|'filter_handler'
op|'.'
name|'get_matching_classes'
op|'('
nl|'\n'
op|'['
string|"'nova.scheduler.filters.all_filters'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'all_hosts_filter'
op|'.'
name|'AllHostsFilter'
op|','
name|'classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'compute_filter'
op|'.'
name|'ComputeFilter'
op|','
name|'classes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_host_filter
dedent|''
name|'def'
name|'test_all_host_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filt_cls'
op|'='
name|'all_hosts_filter'
op|'.'
name|'AllHostsFilter'
op|'('
op|')'
newline|'\n'
name|'host'
op|'='
name|'fakes'
op|'.'
name|'FakeHostState'
op|'('
string|"'host1'"
op|','
string|"'node1'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'filt_cls'
op|'.'
name|'host_passes'
op|'('
name|'host'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'to_legacy_request_spec_dict'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'to_legacy_filter_properties_dict'"
op|')'
newline|'\n'
DECL|member|test_compat_legacy_props
name|'def'
name|'test_compat_legacy_props'
op|'('
name|'self'
op|','
name|'to_props'
op|','
name|'to_spec'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
name|'context'
op|'='
name|'fake_context'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'fake_flavor'
op|')'
newline|'\n'
name|'fake_spec'
op|'.'
name|'config_options'
op|'='
name|'None'
newline|'\n'
name|'to_props'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'prop1'"
op|':'
string|"'val1'"
op|'}'
newline|'\n'
name|'to_spec'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'spec1'"
op|':'
string|"'val2'"
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'filters'
op|'.'
name|'compat_legacy_props'
newline|'\n'
DECL|function|fake_host_passes
name|'def'
name|'fake_host_passes'
op|'('
name|'self'
op|','
name|'host_state'
op|','
name|'filter_properties'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sbauza): Convenient way to verify the passed properties'
nl|'\n'
indent|'            '
name|'return'
name|'filter_properties'
newline|'\n'
nl|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
string|"'prop1'"
op|':'
string|"'val1'"
op|','
nl|'\n'
string|"'request_spec'"
op|':'
op|'{'
string|"'spec1'"
op|':'
string|"'val2'"
op|'}'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'fake_flavor'
op|','
nl|'\n'
string|"'context'"
op|':'
name|'fake_context'
op|','
nl|'\n'
string|"'config_options'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
nl|'\n'
name|'fake_host_passes'
op|'('
string|"'self'"
op|','
string|"'host_state'"
op|','
name|'fake_spec'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

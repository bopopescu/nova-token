begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Chance Scheduler.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'random'
newline|'\n'
nl|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'chance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'scheduler'
name|'import'
name|'test_scheduler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ChanceSchedulerTestCase
name|'class'
name|'ChanceSchedulerTestCase'
op|'('
name|'test_scheduler'
op|'.'
name|'SchedulerTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case for Chance Scheduler."""'
newline|'\n'
nl|'\n'
DECL|variable|driver_cls
name|'driver_cls'
op|'='
name|'chance'
op|'.'
name|'ChanceScheduler'
newline|'\n'
nl|'\n'
DECL|member|test_filter_hosts_avoid
name|'def'
name|'test_filter_hosts_avoid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to make sure _filter_hosts() filters original hosts if\n        avoid_original_host is True.\n        """'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
op|'['
string|"'host1'"
op|','
string|"'host2'"
op|','
string|"'host3'"
op|']'
newline|'\n'
name|'spec_obj'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
name|'ignore_hosts'
op|'='
op|'['
string|"'host2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'filtered'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_filter_hosts'
op|'('
name|'hosts'
op|','
name|'spec_obj'
op|'='
name|'spec_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'filtered'
op|','
op|'['
string|"'host1'"
op|','
string|"'host3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filter_hosts_no_avoid
dedent|''
name|'def'
name|'test_filter_hosts_no_avoid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to make sure _filter_hosts() does not filter original\n        hosts if avoid_original_host is False.\n        """'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
op|'['
string|"'host1'"
op|','
string|"'host2'"
op|','
string|"'host3'"
op|']'
newline|'\n'
name|'spec_obj'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
name|'ignore_hosts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'filtered'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_filter_hosts'
op|'('
name|'hosts'
op|','
name|'spec_obj'
op|'='
name|'spec_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'filtered'
op|','
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_destinations
dedent|''
name|'def'
name|'test_select_destinations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
name|'False'
op|')'
newline|'\n'
name|'ctxt_elevated'
op|'='
string|"'fake-context-elevated'"
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'num_instances'"
op|':'
number|'2'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'ctxt'
op|','
string|"'elevated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'hosts_up'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'random'
op|','
string|"'choice'"
op|')'
newline|'\n'
nl|'\n'
name|'hosts_full'
op|'='
op|'['
string|"'host1'"
op|','
string|"'host2'"
op|','
string|"'host3'"
op|','
string|"'host4'"
op|']'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ctxt_elevated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'hosts_up'
op|'('
name|'ctxt_elevated'
op|','
string|"'compute'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'hosts_full'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'choice'
op|'('
name|'hosts_full'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'host3'"
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ctxt_elevated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'hosts_up'
op|'('
name|'ctxt_elevated'
op|','
string|"'compute'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'hosts_full'
op|')'
newline|'\n'
name|'random'
op|'.'
name|'choice'
op|'('
name|'hosts_full'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'dests'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'select_destinations'
op|'('
name|'ctxt'
op|','
name|'request_spec'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'dests'
op|')'
op|')'
newline|'\n'
op|'('
name|'host'
op|','
name|'node'
op|')'
op|'='
op|'('
name|'dests'
op|'['
number|'0'
op|']'
op|'['
string|"'host'"
op|']'
op|','
name|'dests'
op|'['
number|'0'
op|']'
op|'['
string|"'nodename'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'host3'"
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'node'
op|')'
newline|'\n'
op|'('
name|'host'
op|','
name|'node'
op|')'
op|'='
op|'('
name|'dests'
op|'['
number|'1'
op|']'
op|'['
string|"'host'"
op|']'
op|','
name|'dests'
op|'['
number|'1'
op|']'
op|'['
string|"'nodename'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'host2'"
op|','
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_destinations_no_valid_host
dedent|''
name|'def'
name|'test_select_destinations_no_valid_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_return_no_host
indent|'        '
name|'def'
name|'_return_no_host'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'hosts_up'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'hosts_up'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'_filter_hosts'"
op|','
name|'_return_no_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'num_instances'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'select_destinations'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'request_spec'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

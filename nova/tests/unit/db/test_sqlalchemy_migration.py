begin_unit
comment|'# Copyright 2014 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'migrate'
name|'import'
name|'UniqueConstraint'
newline|'\n'
name|'from'
name|'oslo_db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
name|'as'
name|'db_utils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'api'
name|'as'
name|'db_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'migration'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNullInstanceUuidScanDB
name|'class'
name|'TestNullInstanceUuidScanDB'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): Copied from the 267 database migration.'
nl|'\n'
DECL|member|downgrade
indent|'    '
name|'def'
name|'downgrade'
op|'('
name|'self'
op|','
name|'migrate_engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'UniqueConstraint'
op|'('
string|"'uuid'"
op|','
nl|'\n'
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'migrate_engine'
op|','
string|"'instances'"
op|')'
op|','
nl|'\n'
name|'name'
op|'='
string|"'uniq_instances0uuid'"
op|')'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'instances'"
op|','
string|"'shadow_instances'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'migrate_engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'table'
op|'.'
name|'columns'
op|'.'
name|'uuid'
op|'.'
name|'alter'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNullInstanceUuidScanDB'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'engine'
op|'='
name|'db_api'
op|'.'
name|'get_engine'
op|'('
op|')'
newline|'\n'
comment|"# When this test runs, we've already run the schema migration to make"
nl|'\n'
comment|'# instances.uuid non-nullable, so we have to alter the table here'
nl|'\n'
comment|'# so we can test against a real database.'
nl|'\n'
name|'self'
op|'.'
name|'downgrade'
op|'('
name|'self'
op|'.'
name|'engine'
op|')'
newline|'\n'
comment|'# Now create fake entries in the fixed_ips, consoles and'
nl|'\n'
comment|'# instances table where (instance_)uuid is None for testing.'
nl|'\n'
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'fixed_ips'"
op|','
string|"'instances'"
op|','
string|"'consoles'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'self'
op|'.'
name|'engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'fake_record'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'table'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
name|'fake_record'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_db_null_instance_uuid_scan_readonly
dedent|''
dedent|''
name|'def'
name|'test_db_null_instance_uuid_scan_readonly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'migration'
op|'.'
name|'db_null_instance_uuid_scan'
op|'('
name|'delete'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'instances'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'consoles'"
op|')'
op|')'
newline|'\n'
comment|'# The fixed_ips table should be ignored.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'fixed_ips'"
op|','
name|'results'
op|')'
newline|'\n'
comment|"# Now pick a random table with an instance_uuid column and show it's"
nl|'\n'
comment|'# in the results but with 0 hits.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'instance_info_caches'"
op|')'
op|')'
newline|'\n'
comment|'# Make sure nothing was deleted.'
nl|'\n'
name|'for'
name|'table_name'
name|'in'
op|'('
string|"'fixed_ips'"
op|','
string|"'instances'"
op|','
string|"'consoles'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'self'
op|'.'
name|'engine'
op|','
name|'table_name'
op|')'
newline|'\n'
name|'record'
op|'='
name|'table'
op|'.'
name|'select'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_db_null_instance_uuid_scan_delete
dedent|''
dedent|''
name|'def'
name|'test_db_null_instance_uuid_scan_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'results'
op|'='
name|'migration'
op|'.'
name|'db_null_instance_uuid_scan'
op|'('
name|'delete'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'instances'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'consoles'"
op|')'
op|')'
newline|'\n'
comment|'# The fixed_ips table should be ignored.'
nl|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'fixed_ips'"
op|','
name|'results'
op|')'
newline|'\n'
comment|"# Now pick a random table with an instance_uuid column and show it's"
nl|'\n'
comment|'# in the results but with 0 hits.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'results'
op|'.'
name|'get'
op|'('
string|"'instance_info_caches'"
op|')'
op|')'
newline|'\n'
comment|"# Make sure fixed_ips wasn't touched, but instances and instance_faults"
nl|'\n'
comment|'# records were deleted.'
nl|'\n'
name|'fixed_ips'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'self'
op|'.'
name|'engine'
op|','
string|"'fixed_ips'"
op|')'
newline|'\n'
name|'record'
op|'='
name|'fixed_ips'
op|'.'
name|'select'
op|'('
name|'fixed_ips'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
name|'consoles'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'self'
op|'.'
name|'engine'
op|','
string|"'consoles'"
op|')'
newline|'\n'
name|'record'
op|'='
name|'consoles'
op|'.'
name|'select'
op|'('
name|'consoles'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'record'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'self'
op|'.'
name|'engine'
op|','
string|"'instances'"
op|')'
newline|'\n'
name|'record'
op|'='
name|'instances'
op|'.'
name|'select'
op|'('
name|'instances'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'record'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

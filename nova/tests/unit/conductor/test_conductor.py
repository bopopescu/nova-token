begin_unit
comment|'#    Copyright 2012 IBM Corp.'
nl|'\n'
comment|'#    Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for the conductor service."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'oslo_messaging'
name|'as'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'conductor'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'api'
name|'as'
name|'conductor_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'manager'
name|'as'
name|'conductor_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'rpcapi'
name|'as'
name|'conductor_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
op|'.'
name|'tasks'
name|'import'
name|'live_migrate'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
op|'.'
name|'tasks'
name|'import'
name|'migrate'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'exc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'api'
name|'as'
name|'image_api'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
name|'as'
name|'obj_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'client'
name|'as'
name|'scheduler_client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'utils'
name|'as'
name|'scheduler_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'cast_as_call'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'compute'
name|'import'
name|'test_compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_request_spec'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_server_actions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeContext
name|'class'
name|'FakeContext'
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|')'
op|':'
newline|'\n'
DECL|member|elevated
indent|'    '
name|'def'
name|'elevated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Return a consistent elevated context so we can detect it."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'self'
op|','
string|"'_elevated'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_elevated'
op|'='
name|'super'
op|'('
name|'FakeContext'
op|','
name|'self'
op|')'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_elevated'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseTestCase
dedent|''
dedent|''
name|'class'
name|'_BaseTestCase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'FakeContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_deserialize_context
name|'def'
name|'fake_deserialize_context'
op|'('
name|'serializer'
op|','
name|'ctxt_dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|','
name|'ctxt_dict'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
name|'ctxt_dict'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'context'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|'.'
name|'RequestContextSerializer'
op|','
string|"'deserialize_context'"
op|','
nl|'\n'
name|'fake_deserialize_context'
op|')'
newline|'\n'
nl|'\n'
name|'fake_utils'
op|'.'
name|'stub_out_utils_spawn_n'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorTestCase
dedent|''
dedent|''
name|'class'
name|'ConductorTestCase'
op|'('
name|'_BaseTestCase'
op|','
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor Manager Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_manager'
op|'.'
name|'ConductorManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor'
newline|'\n'
nl|'\n'
DECL|member|_test_object_action
dedent|''
name|'def'
name|'_test_object_action'
op|'('
name|'self'
op|','
name|'is_classmethod'
op|','
name|'raise_exception'
op|')'
op|':'
newline|'\n'
DECL|class|TestObject
indent|'        '
name|'class'
name|'TestObject'
op|'('
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|member|foo
indent|'            '
name|'def'
name|'foo'
op|'('
name|'self'
op|','
name|'raise_exception'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'raise_exception'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
string|"'test'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'raise_exception'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'raise_exception'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'return'
string|"'test'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'obj_base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'TestObject'
op|')'
newline|'\n'
nl|'\n'
name|'obj'
op|'='
name|'TestObject'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(danms): After a trip over RPC, any tuple will be a list,'
nl|'\n'
comment|'# so use a list here to make sure we can handle it'
nl|'\n'
name|'fake_args'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'is_classmethod'
op|':'
newline|'\n'
DECL|variable|versions
indent|'            '
name|'versions'
op|'='
op|'{'
string|"'TestObject'"
op|':'
string|"'1.0'"
op|'}'
newline|'\n'
DECL|variable|result
name|'result'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_class_action_versions'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'TestObject'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
string|"'bar'"
op|','
name|'versions'
op|','
nl|'\n'
name|'fake_args'
op|','
op|'{'
string|"'raise_exception'"
op|':'
name|'raise_exception'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|','
name|'result'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_action'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'obj'
op|','
string|"'foo'"
op|','
name|'fake_args'
op|','
nl|'\n'
op|'{'
string|"'raise_exception'"
op|':'
name|'raise_exception'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test'"
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_action
dedent|''
name|'def'
name|'test_object_action'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_object_action'
op|'('
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_action_on_raise
dedent|''
name|'def'
name|'test_object_action_on_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_test_object_action'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_class_action
dedent|''
name|'def'
name|'test_object_class_action'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_object_action'
op|'('
name|'True'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_class_action_on_raise
dedent|''
name|'def'
name|'test_object_class_action_on_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_test_object_action'
op|','
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_action_copies_object
dedent|''
name|'def'
name|'test_object_action_copies_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|TestObject
indent|'        '
name|'class'
name|'TestObject'
op|'('
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'dict'"
op|':'
name|'fields'
op|'.'
name|'DictOfStringsField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|touch_dict
name|'def'
name|'touch_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'dict'
op|'['
string|"'foo'"
op|']'
op|'='
string|"'bar'"
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'obj_base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
op|'('
name|'TestObject'
op|')'
newline|'\n'
nl|'\n'
name|'obj'
op|'='
name|'TestObject'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'dict'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'updates'
op|','
name|'result'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_action'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'obj'
op|','
string|"'touch_dict'"
op|','
name|'tuple'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'# NOTE(danms): If conductor did not properly copy the object, then'
nl|'\n'
comment|'# the new and reference copies of the nested dict object will be'
nl|'\n'
comment|"# the same, and thus 'dict' will not be reported as changed"
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'dict'"
op|','
name|'updates'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|','
name|'updates'
op|'['
string|"'dict'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_class_action_versions
dedent|''
name|'def'
name|'test_object_class_action_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'obj_base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|TestObject
name|'class'
name|'TestObject'
op|'('
name|'obj_base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.10'"
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|foo
name|'def'
name|'foo'
op|'('
name|'cls'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cls'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'versions'
op|'='
op|'{'
nl|'\n'
string|"'TestObject'"
op|':'
string|"'1.2'"
op|','
nl|'\n'
string|"'OtherObj'"
op|':'
string|"'1.0'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
nl|'\n'
string|"'_object_dispatch'"
op|')'
name|'as'
name|'m'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'.'
name|'return_value'
op|'='
name|'TestObject'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'return_value'
op|'.'
name|'obj_to_primitive'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_class_action_versions'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'TestObject'
op|'.'
name|'obj_name'
op|'('
op|')'
op|','
string|"'foo'"
op|','
name|'versions'
op|','
nl|'\n'
name|'tuple'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'m'
op|'.'
name|'return_value'
op|'.'
name|'obj_to_primitive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'target_version'
op|'='
string|"'1.2'"
op|','
name|'version_manifest'
op|'='
name|'versions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset
dedent|''
dedent|''
name|'def'
name|'test_reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Service'
op|','
string|"'clear_min_version_cache'"
nl|'\n'
op|')'
name|'as'
name|'mock_clear_cache'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'mock_clear_cache'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_provider_fw_rule_get_all
dedent|''
dedent|''
name|'def'
name|'test_provider_fw_rule_get_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'provider_fw_rule_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorRPCAPITestCase
dedent|''
dedent|''
name|'class'
name|'ConductorRPCAPITestCase'
op|'('
name|'_BaseTestCase'
op|','
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor RPC API Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorRPCAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_service'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_rpcapi'
op|'.'
name|'ConductorAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorAPITestCase
dedent|''
dedent|''
name|'class'
name|'ConductorAPITestCase'
op|'('
name|'_BaseTestCase'
op|','
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor API Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_service'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_api'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
newline|'\n'
nl|'\n'
DECL|member|test_wait_until_ready
dedent|''
name|'def'
name|'test_wait_until_ready'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timeouts'
op|'='
op|'['
op|']'
newline|'\n'
name|'calls'
op|'='
name|'dict'
op|'('
name|'count'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_ping
name|'def'
name|'fake_ping'
op|'('
name|'context'
op|','
name|'message'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'timeouts'
op|'.'
name|'append'
op|'('
name|'timeout'
op|')'
newline|'\n'
name|'calls'
op|'['
string|"'count'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'calls'
op|'['
string|"'count'"
op|']'
op|'<'
number|'15'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'messaging'
op|'.'
name|'MessagingTimeout'
op|'('
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'base_rpcapi'
op|','
string|"'ping'"
op|','
name|'fake_ping'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'wait_until_ready'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'timeouts'
op|'.'
name|'count'
op|'('
number|'10'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'None'
op|','
name|'timeouts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'oslo_versionedobjects.base.obj_tree_get_versions'"
op|')'
newline|'\n'
DECL|member|test_object_backport_redirect
name|'def'
name|'test_object_backport_redirect'
op|'('
name|'self'
op|','
name|'mock_ovo'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_ovo'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'obj_versions'
newline|'\n'
name|'mock_objinst'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor'
op|','
nl|'\n'
string|"'object_backport_versions'"
op|')'
name|'as'
name|'mock_call'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'object_backport'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock_objinst'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'target_version'
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock_objinst'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'obj_versions'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorLocalAPITestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConductorLocalAPITestCase'
op|'('
name|'ConductorAPITestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor LocalAPI Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorLocalAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_api'
op|'.'
name|'LocalAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_manager'
op|'.'
name|'_target'
newline|'\n'
nl|'\n'
DECL|member|test_wait_until_ready
dedent|''
name|'def'
name|'test_wait_until_ready'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Override test in ConductorAPITestCase'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorImportTest
dedent|''
dedent|''
name|'class'
name|'ConductorImportTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_import_conductor_local
indent|'    '
name|'def'
name|'test_import_conductor_local'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
op|','
name|'conductor_api'
op|'.'
name|'LocalAPI'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'ComputeTaskAPI'
op|'('
op|')'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'LocalComputeTaskAPI'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_conductor_rpc
dedent|''
name|'def'
name|'test_import_conductor_rpc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'API'
op|'('
op|')'
op|','
name|'conductor_api'
op|'.'
name|'API'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'ComputeTaskAPI'
op|'('
op|')'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'ComputeTaskAPI'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_conductor_override_to_local
dedent|''
name|'def'
name|'test_import_conductor_override_to_local'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'API'
op|'('
name|'use_local'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'LocalAPI'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'conductor'
op|'.'
name|'ComputeTaskAPI'
op|'('
name|'use_local'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'LocalComputeTaskAPI'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseTaskTestCase
dedent|''
dedent|''
name|'class'
name|'_BaseTaskTestCase'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BaseTaskTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'FakeContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'fake_server_actions'
op|'.'
name|'stub_out_action_events'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_deserialize_context
name|'def'
name|'fake_deserialize_context'
op|'('
name|'serializer'
op|','
name|'ctxt_dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|','
name|'ctxt_dict'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
name|'ctxt_dict'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'context'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|'.'
name|'RequestContextSerializer'
op|','
string|"'deserialize_context'"
op|','
nl|'\n'
name|'fake_deserialize_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'SpawnIsSynchronousFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_rebuild_args
dedent|''
name|'def'
name|'_prepare_rebuild_args'
op|'('
name|'self'
op|','
name|'update_args'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|"# Args that don't get passed in to the method but do get passed to RPC"
nl|'\n'
indent|'        '
name|'migration'
op|'='
name|'update_args'
name|'and'
name|'update_args'
op|'.'
name|'pop'
op|'('
string|"'migration'"
op|','
name|'None'
op|')'
newline|'\n'
name|'node'
op|'='
name|'update_args'
name|'and'
name|'update_args'
op|'.'
name|'pop'
op|'('
string|"'node'"
op|','
name|'None'
op|')'
newline|'\n'
name|'limits'
op|'='
name|'update_args'
name|'and'
name|'update_args'
op|'.'
name|'pop'
op|'('
string|"'limits'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'rebuild_args'
op|'='
op|'{'
string|"'new_pass'"
op|':'
string|"'admin_password'"
op|','
nl|'\n'
string|"'injected_files'"
op|':'
string|"'files_to_inject'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"'image_ref'"
op|','
nl|'\n'
string|"'orig_image_ref'"
op|':'
string|"'orig_image_ref'"
op|','
nl|'\n'
string|"'orig_sys_metadata'"
op|':'
string|"'orig_sys_meta'"
op|','
nl|'\n'
string|"'bdms'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'recreate'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'on_shared_storage'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'preserve_ephemeral'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'compute-host'"
op|','
nl|'\n'
string|"'request_spec'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'if'
name|'update_args'
op|':'
newline|'\n'
indent|'            '
name|'rebuild_args'
op|'.'
name|'update'
op|'('
name|'update_args'
op|')'
newline|'\n'
dedent|''
name|'compute_rebuild_args'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'rebuild_args'
op|')'
newline|'\n'
name|'compute_rebuild_args'
op|'['
string|"'migration'"
op|']'
op|'='
name|'migration'
newline|'\n'
name|'compute_rebuild_args'
op|'['
string|"'node'"
op|']'
op|'='
name|'node'
newline|'\n'
name|'compute_rebuild_args'
op|'['
string|"'limits'"
op|']'
op|'='
name|'limits'
newline|'\n'
nl|'\n'
comment|"# Args that are passed in to the method but don't get passed to RPC"
nl|'\n'
name|'compute_rebuild_args'
op|'.'
name|'pop'
op|'('
string|"'request_spec'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'rebuild_args'
op|','
name|'compute_rebuild_args'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration'"
op|')'
newline|'\n'
DECL|member|test_live_migrate
name|'def'
name|'test_live_migrate'
op|'('
name|'self'
op|','
name|'migobj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'inst'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'migobj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'live_migrate'
op|'.'
name|'LiveMigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_build_live_migrate_task'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
string|"'destination'"
op|','
string|"'block_migration'"
op|','
nl|'\n'
string|"'disk_over_commit'"
op|','
name|'migration'
op|')'
newline|'\n'
name|'task'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'conductor'
op|','
op|'('
name|'conductor_api'
op|'.'
name|'ComputeTaskAPI'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'LocalComputeTaskAPI'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# The API method is actually 'live_migrate_instance'.  It gets"
nl|'\n'
comment|"# converted into 'migrate_server' when doing RPC."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'live_migrate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
string|"'destination'"
op|','
string|"'block_migration'"
op|','
string|"'disk_over_commit'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'destination'"
op|'}'
op|','
name|'True'
op|','
name|'False'
op|','
name|'None'
op|','
nl|'\n'
string|"'block_migration'"
op|','
string|"'disk_over_commit'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'accepted'"
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'destination'"
op|','
name|'migration'
op|'.'
name|'dest_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_obj'
op|'.'
name|'host'
op|','
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_cold_migrate
dedent|''
name|'def'
name|'_test_cold_migrate'
op|'('
name|'self'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'image_ref'
op|'='
string|"'image_ref'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'inst'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'system_metadata'
op|'='
op|'{'
string|"'image_hw_disk_bus'"
op|':'
string|"'scsi'"
op|'}'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'.'
name|'extra_specs'
op|'='
op|'{'
string|"'extra_specs'"
op|':'
string|"'fake'"
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'host1'"
op|','
name|'None'
op|']'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_type'"
op|':'
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'flavor'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'utils'
op|'.'
name|'get_image_from_system_metadata'
op|'('
nl|'\n'
name|'inst_obj'
op|'.'
name|'system_metadata'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'image'"
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_utils'
op|'.'
name|'build_request_spec'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'image'"
op|','
nl|'\n'
op|'['
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Flavor'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'request_spec'
op|')'
newline|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_build_cold_migrate_task'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
name|'flavor'
op|','
name|'filter_properties'
op|','
nl|'\n'
name|'request_spec'
op|','
op|'['
op|']'
op|','
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
name|'task'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_hint'
op|'='
op|'{'
string|"'filter_properties'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'self'
op|'.'
name|'conductor'
op|','
op|'('
name|'conductor_api'
op|'.'
name|'ComputeTaskAPI'
op|','
nl|'\n'
name|'conductor_api'
op|'.'
name|'LocalComputeTaskAPI'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# The API method is actually 'resize_instance'.  It gets"
nl|'\n'
comment|"# converted into 'migrate_server' when doing RPC."
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'resize_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
op|'{'
op|'}'
op|','
name|'scheduler_hint'
op|','
name|'flavor'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
name|'scheduler_hint'
op|','
nl|'\n'
name|'False'
op|','
name|'False'
op|','
name|'flavor'
op|','
name|'None'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cold_migrate
dedent|''
dedent|''
name|'def'
name|'test_cold_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_cold_migrate'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cold_migrate_forced_shutdown
dedent|''
name|'def'
name|'test_cold_migrate_forced_shutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_cold_migrate'
op|'('
name|'clean_shutdown'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Instance.refresh'"
op|')'
newline|'\n'
DECL|member|test_build_instances
name|'def'
name|'test_build_instances'
op|'('
name|'self'
op|','
name|'mock_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(danms): Avoid datetime timezone issues with converted flavors'
nl|'\n'
name|'instance_type'
op|'.'
name|'created_at'
op|'='
name|'None'
newline|'\n'
name|'instances'
op|'='
op|'['
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'id'
op|'='
name|'i'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'instance_type'
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'instance_type_p'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'instance_type'
op|')'
newline|'\n'
name|'instance_properties'
op|'='
name|'obj_base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'instance_properties'
op|'['
string|"'system_metadata'"
op|']'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
nl|'\n'
op|'{'
op|'}'
op|','
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'block_device_mapping_get_all_by_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'spec'
op|'='
op|'{'
string|"'image'"
op|':'
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type_p'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_schedule_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'spec'
op|','
name|'filter_properties'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'host'
op|'='
string|"'host1'"
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type_p'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'host1'"
op|','
string|"'node1'"
op|']'
op|']'
op|'}'
op|','
nl|'\n'
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node1'"
op|','
name|'limits'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'['
number|'1'
op|']'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'host'
op|'='
string|"'host2'"
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type_p'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'host2'"
op|','
string|"'node2'"
op|']'
op|']'
op|'}'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node2'"
op|','
name|'limits'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
string|"'fake_data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_cleanup_allocated_networks'"
op|')'
newline|'\n'
DECL|member|test_build_instances_scheduler_failure
name|'def'
name|'test_build_instances_scheduler_failure'
op|'('
nl|'\n'
name|'self'
op|','
name|'cleanup_mock'
op|','
name|'sd_mock'
op|','
name|'state_mock'
op|','
nl|'\n'
name|'sig_mock'
op|','
name|'bs_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
name|'spec'
op|'='
op|'{'
string|"'fake'"
op|':'
string|"'specs'"
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
name|'exception'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|"'fake-reason'"
op|')'
newline|'\n'
nl|'\n'
name|'bs_mock'
op|'.'
name|'return_value'
op|'='
name|'spec'
newline|'\n'
name|'sd_mock'
op|'.'
name|'side_effect'
op|'='
name|'exception'
newline|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'set_state_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'cleanup_network_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'set_state_calls'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'compute_task'"
op|','
string|"'build_instances'"
op|','
nl|'\n'
name|'updates'
op|','
name|'exception'
op|','
name|'spec'
op|')'
op|')'
newline|'\n'
name|'cleanup_network_calls'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'state_mock'
op|'.'
name|'assert_has_calls'
op|'('
name|'set_state_calls'
op|')'
newline|'\n'
name|'cleanup_mock'
op|'.'
name|'assert_has_calls'
op|'('
name|'cleanup_network_calls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instances_retry_exceeded
dedent|''
name|'def'
name|'test_build_instances_retry_exceeded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|']'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'10'
op|','
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_cleanup_allocated_networks'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'populate_retry'"
op|')'
newline|'\n'
DECL|function|_test
name|'def'
name|'_test'
op|'('
name|'populate_retry'
op|','
nl|'\n'
name|'set_vm_state_and_notify'
op|','
name|'cleanup_mock'
op|')'
op|':'
newline|'\n'
comment|'# build_instances() is a cast, we need to wait for it to'
nl|'\n'
comment|'# complete'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'populate_retry'
op|'.'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'MaxRetriesExceeded'
op|'('
nl|'\n'
name|'reason'
op|'='
string|'"Too many try"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'populate_retry'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'filter_properties'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'set_vm_state_and_notify'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|','
string|"'compute_task'"
op|','
nl|'\n'
string|"'build_instances'"
op|','
name|'updates'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'cleanup_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_cleanup_allocated_networks'"
op|')'
newline|'\n'
DECL|member|test_build_instances_scheduler_group_failure
name|'def'
name|'test_build_instances_scheduler_group_failure'
op|'('
nl|'\n'
name|'self'
op|','
name|'cleanup_mock'
op|','
name|'state_mock'
op|','
name|'sig_mock'
op|','
name|'bs_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
name|'spec'
op|'='
op|'{'
string|"'fake'"
op|':'
string|"'specs'"
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'bs_mock'
op|'.'
name|'return_value'
op|'='
name|'spec'
newline|'\n'
name|'exception'
op|'='
name|'exc'
op|'.'
name|'UnsupportedPolicyException'
op|'('
name|'reason'
op|'='
string|"'fake-reason'"
op|')'
newline|'\n'
name|'sig_mock'
op|'.'
name|'side_effect'
op|'='
name|'exception'
newline|'\n'
nl|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
name|'set_state_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'cleanup_network_calls'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'set_state_calls'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'build_instances'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exception'
op|','
name|'spec'
op|')'
op|')'
newline|'\n'
name|'cleanup_network_calls'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
dedent|''
name|'state_mock'
op|'.'
name|'assert_has_calls'
op|'('
name|'set_state_calls'
op|')'
newline|'\n'
name|'cleanup_mock'
op|'.'
name|'assert_has_calls'
op|'('
name|'cleanup_network_calls'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceMapping'
op|','
string|"'get_by_instance_uuid'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'InstanceMappingNotFound'
op|'('
name|'uuid'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'HostMapping'
op|','
string|"'get_by_host'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
DECL|member|test_build_instances_no_instance_mapping
name|'def'
name|'test_build_instances_no_instance_mapping'
op|'('
name|'self'
op|','
name|'_mock_set_state'
op|','
nl|'\n'
name|'mock_select_dests'
op|','
name|'mock_get_by_host'
op|','
name|'mock_get_inst_map_by_uuid'
op|','
nl|'\n'
name|'_mock_refresh'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'mock_select_dests'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'mock_get_inst_map_by_uuid'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instances'
op|'['
number|'1'
op|']'
op|'.'
name|'uuid'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_get_by_host'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceMapping'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'HostMapping'
op|','
string|"'get_by_host'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'HostMappingNotFound'
op|'('
name|'name'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
DECL|member|test_build_instances_no_host_mapping
name|'def'
name|'test_build_instances_no_host_mapping'
op|'('
name|'self'
op|','
name|'_mock_set_state'
op|','
nl|'\n'
name|'mock_select_dests'
op|','
name|'mock_get_by_host'
op|','
name|'mock_get_inst_map_by_uuid'
op|','
nl|'\n'
name|'_mock_refresh'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'mock_select_dests'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'num_instances'
op|'='
number|'2'
newline|'\n'
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_instances'
op|')'
op|']'
newline|'\n'
name|'inst_mapping_mocks'
op|'='
op|'['
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_instances'
op|')'
op|']'
newline|'\n'
name|'mock_get_inst_map_by_uuid'
op|'.'
name|'side_effect'
op|'='
name|'inst_mapping_mocks'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'mock_get_inst_map_by_uuid'
op|'.'
name|'assert_any_call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inst_mapping'
name|'in'
name|'inst_mapping_mocks'
op|':'
newline|'\n'
indent|'            '
name|'inst_mapping'
op|'.'
name|'destroy'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_get_by_host'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'host1'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'host2'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceMapping'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'HostMapping'
op|','
string|"'get_by_host'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
DECL|member|test_build_instances_update_instance_mapping
name|'def'
name|'test_build_instances_update_instance_mapping'
op|'('
name|'self'
op|','
name|'_mock_set_state'
op|','
nl|'\n'
name|'mock_select_dests'
op|','
name|'mock_get_by_host'
op|','
name|'mock_get_inst_map_by_uuid'
op|','
nl|'\n'
name|'_mock_refresh'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'mock_select_dests'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
newline|'\n'
name|'mock_get_by_host'
op|'.'
name|'side_effect'
op|'='
op|'['
nl|'\n'
name|'objects'
op|'.'
name|'HostMapping'
op|'('
name|'cell_mapping'
op|'='
name|'objects'
op|'.'
name|'CellMapping'
op|'('
name|'id'
op|'='
number|'1'
op|')'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'HostMapping'
op|'('
name|'cell_mapping'
op|'='
name|'objects'
op|'.'
name|'CellMapping'
op|'('
name|'id'
op|'='
number|'2'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'num_instances'
op|'='
number|'2'
newline|'\n'
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_instances'
op|')'
op|']'
newline|'\n'
name|'inst_mapping_mocks'
op|'='
op|'['
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'num_instances'
op|')'
op|']'
newline|'\n'
name|'mock_get_inst_map_by_uuid'
op|'.'
name|'side_effect'
op|'='
name|'inst_mapping_mocks'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'mock_get_inst_map_by_uuid'
op|'.'
name|'assert_any_call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'inst_mapping'
name|'in'
name|'inst_mapping_mocks'
op|':'
newline|'\n'
indent|'            '
name|'inst_mapping'
op|'.'
name|'save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'inst_mapping_mocks'
op|'['
number|'0'
op|']'
op|'.'
name|'cell_mapping'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'inst_mapping_mocks'
op|'['
number|'1'
op|']'
op|'.'
name|'cell_mapping'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'mock_get_by_host'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'host1'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'host2'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_instance_on_host
dedent|''
name|'def'
name|'test_unshelve_instance_on_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNSHELVING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'start_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'unshelve_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
string|"'fake_image_id'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_offload_instance_on_host_with_request_spec
dedent|''
name|'def'
name|'test_unshelve_offload_instance_on_host_with_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNSHELVING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
string|"'fake_image_id'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
nl|'\n'
name|'fake_spec'
op|'='
name|'fake_request_spec'
op|'.'
name|'fake_spec_obj'
op|'('
op|')'
newline|'\n'
comment|'# FIXME(sbauza): Modify the fake RequestSpec object to either add a'
nl|'\n'
comment|'# non-empty SchedulerRetries object or nullify the field'
nl|'\n'
name|'fake_spec'
op|'.'
name|'retry'
op|'='
name|'None'
newline|'\n'
comment|'# FIXME(sbauza): Modify the fake RequestSpec object to either add a'
nl|'\n'
comment|'# non-empty SchedulerLimits object or nullify the field'
nl|'\n'
name|'fake_spec'
op|'.'
name|'limits'
op|'='
name|'None'
newline|'\n'
comment|'# FIXME(sbauza): Modify the fake RequestSpec object to either add a'
nl|'\n'
comment|'# non-empty InstanceGroup object or nullify the field'
nl|'\n'
name|'fake_spec'
op|'.'
name|'instance_group'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
name|'fake_spec'
op|'.'
name|'to_legacy_filter_properties_dict'
op|'('
op|')'
newline|'\n'
name|'request_spec'
op|'='
name|'fake_spec'
op|'.'
name|'to_legacy_request_spec_dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'host'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
comment|'# unshelve_instance() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'unshelve_instance'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'populate_filter_properties'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'populate_retry'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'to_legacy_request_spec_dict'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
nl|'\n'
string|"'to_legacy_filter_properties_dict'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'reset_forced_destinations'"
op|')'
newline|'\n'
DECL|function|do_test
name|'def'
name|'do_test'
op|'('
name|'reset_forced_destinations'
op|','
nl|'\n'
name|'to_filtprops'
op|','
name|'to_reqspec'
op|','
name|'sched_instances'
op|','
nl|'\n'
name|'populate_retry'
op|','
name|'populate_filter_properties'
op|','
nl|'\n'
name|'unshelve_instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'to_filtprops'
op|'.'
name|'return_value'
op|'='
name|'filter_properties'
newline|'\n'
name|'to_reqspec'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
name|'sched_instances'
op|'.'
name|'return_value'
op|'='
op|'['
name|'host'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'fake_spec'
op|')'
newline|'\n'
name|'reset_forced_destinations'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'sched_instances'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
comment|'# NOTE(sbauza): Since the instance is dehydrated when passing thru'
nl|'\n'
comment|'# the RPC API, we can only assert mock.ANY for it'
nl|'\n'
name|'unshelve_instance'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'host'
op|'['
string|"'host'"
op|']'
op|','
name|'image'
op|'='
name|'mock'
op|'.'
name|'ANY'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|','
name|'node'
op|'='
name|'host'
op|'['
string|"'nodename'"
op|']'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'do_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_offloaded_instance_glance_image_not_found
dedent|''
name|'def'
name|'test_unshelve_offloaded_instance_glance_image_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shelved_image_id'
op|'='
string|'"image_not_found"'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNSHELVING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'image_api'
op|','
string|"'get'"
op|')'
newline|'\n'
nl|'\n'
name|'e'
op|'='
name|'exc'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'shelved_image_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'image_api'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'shelved_image_id'
op|','
name|'show_deleted'
op|'='
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'e'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
name|'shelved_image_id'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exc'
op|'.'
name|'UnshelveException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_offloaded_instance_image_id_is_none
dedent|''
name|'def'
name|'test_unshelve_offloaded_instance_image_id_is_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNSHELVING'
newline|'\n'
comment|"# 'shelved_image_id' is None for volumebacked instance"
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
nl|'\n'
string|"'_schedule_instances'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'unshelve_instance'"
op|')'
op|','
nl|'\n'
op|')'
name|'as'
op|'('
name|'schedule_mock'
op|','
name|'unshelve_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'schedule_mock'
op|'.'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'host'"
op|':'
string|"'fake_host'"
op|','
nl|'\n'
string|"'nodename'"
op|':'
string|"'fake_node'"
op|','
nl|'\n'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'unshelve_mock'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_instance_schedule_and_rebuild
dedent|''
dedent|''
name|'def'
name|'test_unshelve_instance_schedule_and_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'image_api'
op|','
string|"'get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'unshelve_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'image_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_image_id'"
op|','
name|'show_deleted'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_image'"
op|')'
newline|'\n'
name|'scheduler_utils'
op|'.'
name|'build_request_spec'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_image'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'req_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_schedule_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'req_spec'"
op|','
name|'filter_properties'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'host'"
op|':'
string|"'fake_host'"
op|','
nl|'\n'
string|"'nodename'"
op|':'
string|"'fake_node'"
op|','
nl|'\n'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|"'fake_host'"
op|','
name|'image'
op|'='
string|"'fake_image'"
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'fake_host'"
op|','
nl|'\n'
string|"'fake_node'"
op|']'
op|']'
op|'}'
op|'}'
op|','
nl|'\n'
name|'node'
op|'='
string|"'fake_node'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
string|"'fake_image_id'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_instance_schedule_and_rebuild_novalid_host
dedent|''
name|'def'
name|'test_unshelve_instance_schedule_and_rebuild_novalid_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
DECL|function|fake_schedule_instances
name|'def'
name|'fake_schedule_instances'
op|'('
name|'context'
op|','
name|'image'
op|','
name|'filter_properties'
op|','
nl|'\n'
op|'*'
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'image_api'
op|','
string|"'get'"
op|','
nl|'\n'
name|'return_value'
op|'='
string|"'fake_image'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|','
nl|'\n'
name|'fake_schedule_instances'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'_get_image'
op|','
name|'_schedule_instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
string|"'fake_image_id'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'_get_image'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|','
nl|'\n'
name|'show_deleted'
op|'='
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_schedule_instances'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'messaging'
op|'.'
name|'MessagingTimeout'
op|'('
op|')'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'image_api'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'return_value'
op|'='
string|"'fake_image'"
op|')'
newline|'\n'
DECL|member|test_unshelve_instance_schedule_and_rebuild_messaging_exception
name|'def'
name|'test_unshelve_instance_schedule_and_rebuild_messaging_exception'
op|'('
nl|'\n'
name|'self'
op|','
name|'mock_get_image'
op|','
name|'mock_schedule_instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNSHELVING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
string|"'fake_image_id'"
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'MessagingTimeout'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'mock_get_image'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|','
nl|'\n'
name|'show_deleted'
op|'='
name|'False'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unshelve_instance_schedule_and_rebuild_volume_backed
dedent|''
name|'def'
name|'test_unshelve_instance_schedule_and_rebuild_volume_backed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SHELVED_OFFLOADED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'system_metadata'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'unshelve_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_utils'
op|'.'
name|'build_request_spec'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'req_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_schedule_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'req_spec'"
op|','
name|'filter_properties'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'host'"
op|':'
string|"'fake_host'"
op|','
nl|'\n'
string|"'nodename'"
op|':'
string|"'fake_node'"
op|','
nl|'\n'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|"'fake_host'"
op|','
name|'image'
op|'='
name|'None'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'fake_host'"
op|','
nl|'\n'
string|"'fake_node'"
op|']'
op|']'
op|'}'
op|'}'
op|','
nl|'\n'
name|'node'
op|'='
string|"'fake_node'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'unshelve_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance
dedent|''
name|'def'
name|'test_rebuild_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'rebuild_args'
op|','
name|'compute_args'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'inst_obj'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'rebuild_mock'
op|','
name|'select_dest_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'rebuild_instance'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'select_dest_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'rebuild_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'compute_args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_with_scheduler
dedent|''
dedent|''
name|'def'
name|'test_rebuild_instance_with_scheduler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'host'
op|'='
string|"'noselect'"
newline|'\n'
name|'expected_host'
op|'='
string|"'thebesthost'"
newline|'\n'
name|'expected_node'
op|'='
string|"'thebestnode'"
newline|'\n'
name|'expected_limits'
op|'='
string|"'fake-limits'"
newline|'\n'
name|'rebuild_args'
op|','
name|'compute_args'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'None'
op|','
string|"'node'"
op|':'
name|'expected_node'
op|','
string|"'limits'"
op|':'
name|'expected_limits'
op|'}'
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'ignore_hosts'"
op|':'
op|'['
op|'('
name|'inst_obj'
op|'.'
name|'host'
op|')'
op|']'
op|'}'
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'host'"
op|':'
name|'expected_host'
op|','
nl|'\n'
string|"'nodename'"
op|':'
name|'expected_node'
op|','
nl|'\n'
string|"'limits'"
op|':'
name|'expected_limits'
op|'}'
op|']'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.scheduler.utils.build_request_spec'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'request_spec'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'rebuild_mock'
op|','
name|'sig_mock'
op|','
name|'fp_mock'
op|','
name|'select_dest_mock'
op|','
name|'bs_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'rebuild_instance'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'fp_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_spec'
op|')'
newline|'\n'
name|'compute_args'
op|'['
string|"'host'"
op|']'
op|'='
name|'expected_host'
newline|'\n'
name|'rebuild_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'compute_args'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'compute.instance.rebuild.scheduled'"
op|','
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
op|'.'
name|'event_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_with_scheduler_no_host
dedent|''
name|'def'
name|'test_rebuild_instance_with_scheduler_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'host'
op|'='
string|"'noselect'"
newline|'\n'
name|'rebuild_args'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'ignore_hosts'"
op|':'
op|'['
op|'('
name|'inst_obj'
op|'.'
name|'host'
op|')'
op|']'
op|'}'
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.scheduler.utils.build_request_spec'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'request_spec'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'rebuild_mock'
op|','
name|'sig_mock'
op|','
name|'fp_mock'
op|','
name|'select_dest_mock'
op|','
name|'bs_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'rebuild_instance'
op|','
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'fp_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rebuild_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.scheduler.utils.build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
DECL|member|test_rebuild_instance_with_scheduler_group_failure
name|'def'
name|'test_rebuild_instance_with_scheduler_group_failure'
op|'('
name|'self'
op|','
nl|'\n'
name|'state_mock'
op|','
nl|'\n'
name|'bs_mock'
op|','
nl|'\n'
name|'select_dest_mock'
op|','
nl|'\n'
name|'sig_mock'
op|','
nl|'\n'
name|'rebuild_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'rebuild_args'
op|','
name|'_'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'bs_mock'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
nl|'\n'
name|'exception'
op|'='
name|'exc'
op|'.'
name|'UnsupportedPolicyException'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
name|'sig_mock'
op|'.'
name|'side_effect'
op|'='
name|'exception'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'UnsupportedPolicyException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'rebuild_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'state_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'rebuild_server'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exception'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'select_dest_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'rebuild_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_evacuate_migration_record
dedent|''
name|'def'
name|'test_rebuild_instance_evacuate_migration_record'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'source_compute'
op|'='
name|'inst_obj'
op|'.'
name|'host'
op|','
nl|'\n'
name|'source_node'
op|'='
name|'inst_obj'
op|'.'
name|'node'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'status'
op|'='
string|"'accepted'"
op|','
nl|'\n'
name|'migration_type'
op|'='
string|"'evacuation'"
op|')'
newline|'\n'
name|'rebuild_args'
op|','
name|'compute_args'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'inst_obj'
op|'.'
name|'host'
op|','
string|"'migration'"
op|':'
name|'migration'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Migration'
op|','
string|"'get_by_instance_and_status'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'migration'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'rebuild_mock'
op|','
name|'select_dest_mock'
op|','
name|'get_migration_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'rebuild_instance'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'select_dest_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'rebuild_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'compute_args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_with_request_spec
dedent|''
dedent|''
name|'def'
name|'test_rebuild_instance_with_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'host'
op|'='
string|"'noselect'"
newline|'\n'
name|'expected_host'
op|'='
string|"'thebesthost'"
newline|'\n'
name|'expected_node'
op|'='
string|"'thebestnode'"
newline|'\n'
name|'expected_limits'
op|'='
string|"'fake-limits'"
newline|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'ignore_hosts'"
op|':'
op|'['
op|'('
name|'inst_obj'
op|'.'
name|'host'
op|')'
op|']'
op|'}'
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
name|'ignore_hosts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'augmented_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
name|'ignore_hosts'
op|'='
op|'['
name|'inst_obj'
op|'.'
name|'host'
op|']'
op|')'
newline|'\n'
name|'rebuild_args'
op|','
name|'compute_args'
op|'='
name|'self'
op|'.'
name|'_prepare_rebuild_args'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'None'
op|','
string|"'node'"
op|':'
name|'expected_node'
op|','
string|"'limits'"
op|':'
name|'expected_limits'
op|','
nl|'\n'
string|"'request_spec'"
op|':'
name|'fake_spec'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'augmented_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'host'"
op|':'
name|'expected_host'
op|','
nl|'\n'
string|"'nodename'"
op|':'
name|'expected_node'
op|','
nl|'\n'
string|"'limits'"
op|':'
name|'expected_limits'
op|'}'
op|']'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fake_spec'
op|','
string|"'reset_forced_destinations'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fake_spec'
op|','
string|"'to_legacy_request_spec_dict'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'request_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fake_spec'
op|','
string|"'to_legacy_filter_properties_dict'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'filter_properties'
op|')'
op|','
nl|'\n'
op|')'
name|'as'
op|'('
name|'rebuild_mock'
op|','
name|'sig_mock'
op|','
name|'fp_mock'
op|','
name|'select_dest_mock'
op|','
name|'reset_fd'
op|','
nl|'\n'
name|'to_reqspec'
op|','
name|'to_filtprops'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'rebuild_instance'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'rebuild_args'
op|')'
newline|'\n'
name|'reset_fd'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'to_reqspec'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'to_filtprops'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'fp_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'augmented_spec'
op|')'
newline|'\n'
name|'compute_args'
op|'['
string|"'host'"
op|']'
op|'='
name|'expected_host'
newline|'\n'
name|'rebuild_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
op|'**'
name|'compute_args'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'compute.instance.rebuild.scheduled'"
op|','
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
op|'.'
name|'event_type'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorTaskTestCase
dedent|''
dedent|''
name|'class'
name|'ConductorTaskTestCase'
op|'('
name|'_BaseTaskTestCase'
op|','
name|'test_compute'
op|'.'
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""ComputeTaskManager Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorTaskTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor'
newline|'\n'
nl|'\n'
DECL|member|test_reset
dedent|''
name|'def'
name|'test_reset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.compute.rpcapi.ComputeAPI'"
op|')'
name|'as'
name|'mock_rpc'
op|':'
newline|'\n'
indent|'            '
name|'old_rpcapi'
op|'='
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'mock_rpc'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'old_rpcapi'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_server_fails_with_rebuild
dedent|''
dedent|''
name|'def'
name|'test_migrate_server_fails_with_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'True'
op|','
name|'True'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_server_fails_with_flavor
dedent|''
name|'def'
name|'test_migrate_server_fails_with_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'True'
op|','
name|'False'
op|','
name|'flavor'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_request_spec
dedent|''
name|'def'
name|'_build_request_spec'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
nl|'\n'
string|"'instance_properties'"
op|':'
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'live_migrate'
op|'.'
name|'LiveMigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
DECL|member|_test_migrate_server_deals_with_expected_exceptions
name|'def'
name|'_test_migrate_server_deals_with_expected_exceptions'
op|'('
name|'self'
op|','
name|'ex'
op|','
nl|'\n'
name|'mock_execute'
op|','
name|'mock_set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
string|"'uuid'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'mock_execute'
op|'.'
name|'side_effect'
op|'='
name|'ex'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'conductor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'type'
op|'('
name|'ex'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'destination'"
op|'}'
op|','
name|'True'
op|','
name|'False'
op|','
name|'None'
op|','
string|"'block_migration'"
op|','
nl|'\n'
string|"'disk_over_commit'"
op|')'
newline|'\n'
nl|'\n'
name|'mock_set'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'compute_task'"
op|','
string|"'migrate_server'"
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'expected_task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|'}'
op|','
nl|'\n'
name|'ex'
op|','
name|'self'
op|'.'
name|'_build_request_spec'
op|'('
name|'inst_obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_server_deals_with_invalidcpuinfo_exception
dedent|''
name|'def'
name|'test_migrate_server_deals_with_invalidcpuinfo_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
string|"'uuid'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'live_migrate'
op|'.'
name|'LiveMigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
nl|'\n'
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
nl|'\n'
name|'ex'
op|'='
name|'exc'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
string|'"invalid cpu info."'
op|')'
newline|'\n'
nl|'\n'
name|'task'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_build_live_migrate_task'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
string|"'destination'"
op|','
string|"'block_migration'"
op|','
nl|'\n'
string|"'disk_over_commit'"
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Migration'
op|')'
op|')'
newline|'\n'
name|'task'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'ex'
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_utils'
op|'.'
name|'set_vm_state_and_notify'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'compute_task'"
op|','
string|"'migrate_server'"
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'expected_task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|'}'
op|','
nl|'\n'
name|'ex'
op|','
name|'self'
op|'.'
name|'_build_request_spec'
op|'('
name|'inst_obj'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'conductor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'InvalidCPUInfo'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'destination'"
op|'}'
op|','
name|'True'
op|','
name|'False'
op|','
name|'None'
op|','
string|"'block_migration'"
op|','
nl|'\n'
string|"'disk_over_commit'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_server_deals_with_expected_exception
dedent|''
name|'def'
name|'test_migrate_server_deals_with_expected_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exs'
op|'='
op|'['
name|'exc'
op|'.'
name|'InstanceInvalidState'
op|'('
name|'instance_uuid'
op|'='
string|'"fake"'
op|','
name|'attr'
op|'='
string|"''"
op|','
nl|'\n'
name|'state'
op|'='
string|"''"
op|','
name|'method'
op|'='
string|"''"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'DestinationHypervisorTooOld'
op|'('
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'HypervisorUnavailable'
op|'('
name|'host'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'LiveMigrationWithOldNovaNotSupported'
op|'('
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'MigrationPreCheckError'
op|'('
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'InvalidSharedStorage'
op|'('
name|'path'
op|'='
string|"'dummy'"
op|','
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'ComputeServiceUnavailable'
op|'('
name|'host'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'InvalidHypervisorType'
op|'('
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'InvalidCPUInfo'
op|'('
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'UnableToMigrateToSelf'
op|'('
name|'instance_id'
op|'='
string|"'dummy'"
op|','
name|'host'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'InvalidLocalStorage'
op|'('
name|'path'
op|'='
string|"'dummy'"
op|','
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'MigrationSchedulerRPCError'
op|'('
name|'reason'
op|'='
string|"'dummy'"
op|')'
op|']'
newline|'\n'
name|'for'
name|'ex'
name|'in'
name|'exs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_test_migrate_server_deals_with_expected_exceptions'
op|'('
name|'ex'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'live_migrate'
op|'.'
name|'LiveMigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
DECL|member|test_migrate_server_deals_with_unexpected_exceptions
name|'def'
name|'test_migrate_server_deals_with_unexpected_exceptions'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_live_migrate'
op|','
name|'mock_set_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_ex'
op|'='
name|'IOError'
op|'('
string|"'fake error'"
op|')'
newline|'\n'
name|'mock_live_migrate'
op|'.'
name|'side_effect'
op|'='
name|'expected_ex'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'ex'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'MigrationError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'migrate_server'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'destination'"
op|'}'
op|','
name|'True'
op|','
name|'False'
op|','
name|'None'
op|','
string|"'block_migration'"
op|','
nl|'\n'
string|"'disk_over_commit'"
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_properties'"
op|':'
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'mock_set_state'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'compute_task'"
op|','
string|"'migrate_server'"
op|','
nl|'\n'
name|'dict'
op|'('
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'inst_obj'
op|'.'
name|'task_state'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
op|')'
op|','
nl|'\n'
name|'expected_ex'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ex'
op|'.'
name|'kwargs'
op|'['
string|"'reason'"
op|']'
op|','
name|'six'
op|'.'
name|'text_type'
op|'('
name|'expected_ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_vm_state_and_notify
dedent|''
name|'def'
name|'test_set_vm_state_and_notify'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
nl|'\n'
string|"'set_vm_state_and_notify'"
op|')'
newline|'\n'
name|'scheduler_utils'
op|'.'
name|'set_vm_state_and_notify'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
string|"'compute_task'"
op|','
string|"'method'"
op|','
string|"'updates'"
op|','
nl|'\n'
string|"'ex'"
op|','
string|"'request_spec'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_set_vm_state_and_notify'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
string|"'method'"
op|','
string|"'updates'"
op|','
string|"'ex'"
op|','
string|"'request_spec'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'from_reservations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_cold_migrate_no_valid_host_back_in_active_state
name|'def'
name|'test_cold_migrate_no_valid_host_back_in_active_state'
op|'('
nl|'\n'
name|'self'
op|','
name|'rollback_mock'
op|','
name|'notify_mock'
op|','
name|'select_dest_mock'
op|','
name|'quotas_mock'
op|','
nl|'\n'
name|'metadata_mock'
op|','
name|'spec_fp_mock'
op|','
name|'sig_mock'
op|','
name|'brs_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'='
name|'dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
name|'metadata_mock'
op|'.'
name|'return_value'
op|'='
name|'image'
newline|'\n'
name|'brs_mock'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
name|'spec_fp_mock'
op|'.'
name|'return_value'
op|'='
name|'fake_spec'
newline|'\n'
name|'exc_info'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|'""'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'side_effect'
op|'='
name|'exc_info'
newline|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
name|'flavor'
op|','
name|'filter_props'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'metadata_mock'
op|'.'
name|'assert_called_with'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'brs_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
nl|'\n'
op|'['
name|'inst_obj'
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavor'
op|')'
newline|'\n'
name|'quotas_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'sig_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_props'
op|')'
newline|'\n'
name|'notify_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'migrate_server'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'rollback_mock'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'from_reservations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_cold_migrate_no_valid_host_back_in_stopped_state
name|'def'
name|'test_cold_migrate_no_valid_host_back_in_stopped_state'
op|'('
nl|'\n'
name|'self'
op|','
name|'rollback_mock'
op|','
name|'notify_mock'
op|','
name|'select_dest_mock'
op|','
name|'quotas_mock'
op|','
nl|'\n'
name|'metadata_mock'
op|','
name|'spec_fp_mock'
op|','
name|'sig_mock'
op|','
name|'brs_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'='
name|'dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'metadata_mock'
op|'.'
name|'return_value'
op|'='
name|'image'
newline|'\n'
name|'brs_mock'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
name|'spec_fp_mock'
op|'.'
name|'return_value'
op|'='
name|'fake_spec'
newline|'\n'
name|'exc_info'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|'""'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'side_effect'
op|'='
name|'exc_info'
newline|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
nl|'\n'
name|'flavor'
op|','
name|'filter_props'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'metadata_mock'
op|'.'
name|'assert_called_with'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'brs_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
nl|'\n'
op|'['
name|'inst_obj'
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavor'
op|')'
newline|'\n'
name|'quotas_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'sig_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_props'
op|')'
newline|'\n'
name|'notify_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'migrate_server'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'rollback_mock'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cold_migrate_no_valid_host_error_msg
dedent|''
name|'def'
name|'test_cold_migrate_no_valid_host_error_msg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'='
name|'dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'image'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'request_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor'
op|','
string|"'_set_vm_state_and_notify'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
nl|'\n'
string|"'execute'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|'""'
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'image_mock'
op|','
name|'brs_mock'
op|','
name|'set_vm_mock'
op|','
name|'task_execute_mock'
op|','
nl|'\n'
name|'task_rollback_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nvh'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|','
name|'flavor'
op|','
name|'filter_props'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'cold migrate'"
op|','
name|'nvh'
op|'.'
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.scheduler.utils.build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'execute'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
DECL|member|test_cold_migrate_no_valid_host_in_group
name|'def'
name|'test_cold_migrate_no_valid_host_in_group'
op|'('
name|'self'
op|','
nl|'\n'
name|'set_vm_mock'
op|','
nl|'\n'
name|'task_rollback_mock'
op|','
nl|'\n'
name|'task_exec_mock'
op|','
nl|'\n'
name|'brs_mock'
op|','
nl|'\n'
name|'image_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'='
name|'dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
name|'exception'
op|'='
name|'exc'
op|'.'
name|'UnsupportedPolicyException'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
name|'image_mock'
op|'.'
name|'return_value'
op|'='
name|'image'
newline|'\n'
name|'brs_mock'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
name|'task_exec_mock'
op|'.'
name|'side_effect'
op|'='
name|'exception'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'UnsupportedPolicyException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|','
name|'flavor'
op|','
name|'filter_props'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'set_vm_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'migrate_server'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exception'
op|','
name|'request_spec'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'from_reservations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'select_destinations'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'_set_vm_state_and_notify'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'prep_resize'"
op|')'
newline|'\n'
DECL|member|test_cold_migrate_exception_host_in_error_state_and_raise
name|'def'
name|'test_cold_migrate_exception_host_in_error_state_and_raise'
op|'('
nl|'\n'
name|'self'
op|','
name|'prep_resize_mock'
op|','
name|'rollback_mock'
op|','
name|'notify_mock'
op|','
nl|'\n'
name|'select_dest_mock'
op|','
name|'quotas_mock'
op|','
name|'metadata_mock'
op|','
name|'spec_fp_mock'
op|','
nl|'\n'
name|'sig_mock'
op|','
name|'brs_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
op|'['
name|'dict'
op|'('
name|'host'
op|'='
string|"'host1'"
op|','
name|'nodename'
op|'='
name|'None'
op|','
name|'limits'
op|'='
op|'{'
op|'}'
op|')'
op|']'
newline|'\n'
name|'metadata_mock'
op|'.'
name|'return_value'
op|'='
name|'image'
newline|'\n'
name|'brs_mock'
op|'.'
name|'return_value'
op|'='
name|'request_spec'
newline|'\n'
name|'spec_fp_mock'
op|'.'
name|'return_value'
op|'='
name|'fake_spec'
newline|'\n'
name|'exc_info'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|'('
string|"'something happened'"
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'return_value'
op|'='
name|'hosts'
newline|'\n'
nl|'\n'
name|'updates'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'prep_resize_mock'
op|'.'
name|'side_effect'
op|'='
name|'exc_info'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
name|'flavor'
op|','
nl|'\n'
name|'filter_props'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'metadata_mock'
op|'.'
name|'assert_called_with'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'brs_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
nl|'\n'
op|'['
name|'inst_obj'
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavor'
op|')'
newline|'\n'
name|'quotas_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'sig_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_props'
op|')'
newline|'\n'
name|'select_dest_mock'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'fake_spec'
op|')'
newline|'\n'
name|'prep_resize_mock'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
name|'inst_obj'
op|','
name|'flavor'
op|','
nl|'\n'
name|'hosts'
op|'['
number|'0'
op|']'
op|'['
string|"'host'"
op|']'
op|','
op|'['
name|'resvs'
op|']'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_props'
op|','
nl|'\n'
name|'node'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
op|'['
string|"'nodename'"
op|']'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'notify_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'migrate_server'"
op|','
name|'updates'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'rollback_mock'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_no_valid_host_error_msg
dedent|''
name|'def'
name|'test_resize_no_valid_host_error_msg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'flavor_new'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.small'"
op|')'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'image_ref'
op|'='
string|"'fake-image_ref'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_type'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'='
name|'dict'
op|'('
op|')'
op|')'
op|','
nl|'\n'
name|'instance_properties'
op|'='
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'filter_props'
op|'='
name|'dict'
op|'('
name|'context'
op|'='
name|'None'
op|')'
newline|'\n'
name|'resvs'
op|'='
string|"'fake-resvs'"
newline|'\n'
name|'image'
op|'='
string|"'fake-image'"
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'utils'
op|','
string|"'get_image_from_system_metadata'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'image'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'request_spec'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor'
op|','
string|"'_set_vm_state_and_notify'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
nl|'\n'
string|"'execute'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'NoValidHost'
op|'('
name|'reason'
op|'='
string|'""'
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migrate'
op|'.'
name|'MigrationTask'
op|','
string|"'rollback'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'image_mock'
op|','
name|'brs_mock'
op|','
name|'vm_st_mock'
op|','
name|'task_execute_mock'
op|','
nl|'\n'
name|'task_rb_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nvh'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exc'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_cold_migrate'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_obj'
op|','
name|'flavor_new'
op|','
name|'filter_props'
op|','
nl|'\n'
op|'['
name|'resvs'
op|']'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'resize'"
op|','
name|'nvh'
op|'.'
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instances_instance_not_found
dedent|''
dedent|''
name|'def'
name|'test_build_instances_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|','
string|"'refresh'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'instances'
op|'['
number|'1'
op|']'
op|','
string|"'refresh'"
op|')'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
name|'spec'
op|'='
op|'{'
string|"'fake'"
op|':'
string|"'specs'"
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|','
string|"'_schedule_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_utils'
op|'.'
name|'build_request_spec'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'spec'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'_schedule_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'spec'
op|','
name|'filter_properties'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'refresh'
op|'('
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exc'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'instances'
op|'['
number|'1'
op|']'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instances'
op|'['
number|'1'
op|']'
op|','
name|'host'
op|'='
string|"'host2'"
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
op|','
name|'request_spec'
op|'='
name|'spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'host2'"
op|','
nl|'\n'
string|"'node2'"
op|']'
op|']'
op|'}'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|')'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node2'"
op|','
name|'limits'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'setup_instance_group'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|')'
newline|'\n'
DECL|member|test_build_instances_info_cache_not_found
name|'def'
name|'test_build_instances_info_cache_not_found'
op|'('
name|'self'
op|','
name|'build_request_spec'
op|','
nl|'\n'
name|'setup_instance_group'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|']'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
string|"'should_pass_silently'"
op|'}'
newline|'\n'
name|'destinations'
op|'='
op|'['
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|','
string|"'nodename'"
op|':'
string|"'node1'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'host2'"
op|','
string|"'nodename'"
op|':'
string|"'node2'"
op|','
string|"'limits'"
op|':'
op|'['
op|']'
op|'}'
op|']'
newline|'\n'
name|'spec'
op|'='
op|'{'
string|"'fake'"
op|':'
string|"'specs'"
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|'}'
newline|'\n'
name|'build_request_spec'
op|'.'
name|'return_value'
op|'='
name|'spec'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|','
string|"'refresh'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exc'
op|'.'
name|'InstanceInfoCacheNotFound'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instances'
op|'['
number|'1'
op|']'
op|','
string|"'refresh'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
string|"'from_primitives'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'scheduler_client'
op|','
nl|'\n'
string|"'select_destinations'"
op|','
name|'return_value'
op|'='
name|'destinations'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'conductor_manager'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'build_and_run_instance'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'inst1_refresh'
op|','
name|'inst2_refresh'
op|','
name|'from_primitives'
op|','
nl|'\n'
name|'select_destinations'
op|','
nl|'\n'
name|'build_and_run_instance'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# build_instances() is a cast, we need to wait for it to complete'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|','
nl|'\n'
name|'image'
op|'='
name|'image'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'block_device_mapping'"
op|','
nl|'\n'
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sbauza): Due to populate_retry() later in the code,'
nl|'\n'
comment|'# filter_properties is dynamically modified'
nl|'\n'
name|'setup_instance_group'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'spec'
op|','
op|'{'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'build_and_run_instance'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'1'
op|']'
op|','
name|'host'
op|'='
string|"'host2'"
op|','
name|'image'
op|'='
op|'{'
string|"'fake-data'"
op|':'
nl|'\n'
string|"'should_pass_silently'"
op|'}'
op|','
name|'request_spec'
op|'='
name|'spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'retry'"
op|':'
op|'{'
string|"'num_attempts'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'hosts'"
op|':'
op|'['
op|'['
string|"'host2'"
op|','
nl|'\n'
string|"'node2'"
op|']'
op|']'
op|'}'
op|'}'
op|','
nl|'\n'
name|'admin_password'
op|'='
string|"'admin_password'"
op|','
nl|'\n'
name|'injected_files'
op|'='
string|"'injected_files'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
string|"'security_groups'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
name|'mock'
op|'.'
name|'ANY'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node2'"
op|','
name|'limits'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'class'
name|'ConductorTaskRPCAPITestCase'
op|'('
name|'_BaseTaskTestCase'
op|','
nl|'\n'
DECL|class|ConductorTaskRPCAPITestCase
name|'test_compute'
op|'.'
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor compute_task RPC namespace Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorTaskRPCAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_service'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_rpcapi'
op|'.'
name|'ComputeTaskAPI'
op|'('
op|')'
newline|'\n'
name|'service_manager'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'service_manager'
op|'.'
name|'compute_task_mgr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorTaskAPITestCase
dedent|''
dedent|''
name|'class'
name|'ConductorTaskAPITestCase'
op|'('
name|'_BaseTaskTestCase'
op|','
name|'test_compute'
op|'.'
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compute task API Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorTaskAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_service'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_api'
op|'.'
name|'ComputeTaskAPI'
op|'('
op|')'
newline|'\n'
name|'service_manager'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'service_manager'
op|'.'
name|'compute_task_mgr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConductorLocalComputeTaskAPITestCase
dedent|''
dedent|''
name|'class'
name|'ConductorLocalComputeTaskAPITestCase'
op|'('
name|'ConductorTaskAPITestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Conductor LocalComputeTaskAPI Tests."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConductorLocalComputeTaskAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'conductor_api'
op|'.'
name|'LocalComputeTaskAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor_manager'
op|'='
name|'self'
op|'.'
name|'conductor'
op|'.'
name|'_manager'
op|'.'
name|'_target'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

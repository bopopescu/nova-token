begin_unit
comment|'# Copyright 2012 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for network API."""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'itertools'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'base_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'floating_ips'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'rpcapi'
name|'as'
name|'network_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'policy'
name|'as'
name|'common_policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_fixed_ip'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_flavor'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_virtual_interface'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|FAKE_UUID
name|'FAKE_UUID'
op|'='
string|"'a47ae74e-ab08-547f-9eee-ffd23fc46c16'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkPolicyTestCase
name|'class'
name|'NetworkPolicyTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NetworkPolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'policy'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'policy'
op|'.'
name|'init'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NetworkPolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'policy'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_policy
dedent|''
name|'def'
name|'test_check_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'policy'
op|','
string|"'enforce'"
op|')'
newline|'\n'
name|'target'
op|'='
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'network:get_all'"
op|','
name|'target'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'check_policy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'get_all'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_skip_policy
dedent|''
name|'def'
name|'test_skip_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'{'
string|"'network:get_all'"
op|':'
name|'common_policy'
op|'.'
name|'parse_rule'
op|'('
string|"'!'"
op|')'
op|'}'
newline|'\n'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'common_policy'
op|'.'
name|'Rules'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
name|'api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_all'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
name|'skip_policy_check'
op|'='
name|'True'
op|')'
newline|'\n'
name|'api'
op|'.'
name|'get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ApiTestCase
dedent|''
dedent|''
name|'class'
name|'ApiTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ApiTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'='
name|'network'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake-user'"
op|','
nl|'\n'
string|"'fake-project'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.NetworkList.get_all'"
op|')'
newline|'\n'
DECL|member|test_get_all
name|'def'
name|'test_get_all'
op|'('
name|'self'
op|','
name|'mock_get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_all'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_all'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_all'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'mock_get_all'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.NetworkList.get_all'"
op|')'
newline|'\n'
DECL|member|test_get_all_liberal
name|'def'
name|'test_get_all_liberal'
op|'('
name|'self'
op|','
name|'mock_get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_manager'
op|'='
string|"'nova.network.manager.FlatDHCPManaager'"
op|')'
newline|'\n'
name|'mock_get_all'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_all'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_all'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'mock_get_all'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.NetworkList.get_all'"
op|')'
newline|'\n'
DECL|member|test_get_all_no_networks
name|'def'
name|'test_get_all_no_networks'
op|'('
name|'self'
op|','
name|'mock_get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_all'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NoNetworksFound'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'mock_get_all'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_get
name|'def'
name|'test_get'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_by_uuid'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|')'
name|'as'
name|'elevated'
op|':'
newline|'\n'
indent|'            '
name|'elevated'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'elevated_context'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-uuid'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'elevated_context'
op|','
nl|'\n'
string|"'fake-uuid'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_id'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.virtual_interface_get_by_instance'"
op|')'
newline|'\n'
DECL|member|test_get_vifs_by_instance
name|'def'
name|'test_get_vifs_by_instance'
op|'('
name|'self'
op|','
name|'mock_get_by_instance'
op|','
nl|'\n'
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_by_instance'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'test_virtual_interface'
op|'.'
name|'fake_vif'
op|','
nl|'\n'
name|'network_id'
op|'='
number|'123'
op|')'
op|']'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
op|')'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'.'
name|'uuid'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'network_uuid'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'inst_uuid'
op|')'
newline|'\n'
name|'vifs'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_vifs_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'vifs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'123'
op|','
name|'vifs'
op|'['
number|'0'
op|']'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'network_uuid'
op|')'
op|','
name|'vifs'
op|'['
number|'0'
op|']'
op|'.'
name|'net_uuid'
op|')'
newline|'\n'
name|'mock_get_by_instance'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'str'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'inst_uuid'
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'123'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_id'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.virtual_interface_get_by_address'"
op|')'
newline|'\n'
DECL|member|test_get_vif_by_mac_address
name|'def'
name|'test_get_vif_by_mac_address'
op|'('
name|'self'
op|','
name|'mock_get_by_address'
op|','
nl|'\n'
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_by_address'
op|'.'
name|'return_value'
op|'='
name|'dict'
op|'('
nl|'\n'
name|'test_virtual_interface'
op|'.'
name|'fake_vif'
op|','
name|'network_id'
op|'='
number|'123'
op|')'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'network_uuid'
op|')'
newline|'\n'
name|'vif'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_vif_by_mac_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'123'
op|','
name|'vif'
op|'.'
name|'network_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'network_uuid'
op|')'
op|','
name|'vif'
op|'.'
name|'net_uuid'
op|')'
newline|'\n'
name|'mock_get_by_address'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'mac'
op|')'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'123'
op|','
nl|'\n'
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_handles_macs_passed
dedent|''
name|'def'
name|'test_allocate_for_instance_handles_macs_passed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# If a macs argument is supplied to the 'nova-network' API, it is just"
nl|'\n'
comment|'# ignored. This test checks that the call down to the rpcapi layer'
nl|'\n'
comment|"# doesn't pass macs down: nova-network doesn't support hypervisor"
nl|'\n'
comment|'# mac address limits (today anyhow).'
nl|'\n'
indent|'        '
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'ab:cd:ef:01:23:34'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'network_rpcapi'
op|','
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'dict'
op|'('
name|'zip'
op|'('
op|'['
string|"'host'"
op|','
string|"'instance_id'"
op|','
string|"'project_id'"
op|','
nl|'\n'
string|"'requested_networks'"
op|','
string|"'rxtx_factor'"
op|','
string|"'vpn'"
op|','
string|"'macs'"
op|','
nl|'\n'
string|"'dhcp_options'"
op|']'
op|','
nl|'\n'
name|'itertools'
op|'.'
name|'repeat'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'network_rpcapi'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
op|'**'
name|'kwargs'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'flavor'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'uuid'
op|'='
string|"'uuid'"
op|','
name|'project_id'
op|'='
string|"'project_id'"
op|','
nl|'\n'
name|'host'
op|'='
string|"'host'"
op|','
name|'system_metadata'
op|'='
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
name|'sys_meta'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
op|'**'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'vpn'"
op|','
string|"'requested_networks'"
op|','
name|'macs'
op|'='
name|'macs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_test_associate_floating_ip
dedent|''
name|'def'
name|'_do_test_associate_floating_ip'
op|'('
name|'self'
op|','
name|'orig_instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test post-association logic."""'
newline|'\n'
nl|'\n'
name|'new_instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'FAKE_UUID'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_associate
name|'def'
name|'fake_associate'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'orig_instance_uuid'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
string|"'associate_floating_ip'"
op|','
nl|'\n'
name|'fake_associate'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_by_uuid
name|'def'
name|'fake_instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|','
nl|'\n'
name|'fake_instance_get_by_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_nw_info
name|'def'
name|'fake_get_nw_info'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
DECL|class|FakeNWInfo
indent|'            '
name|'class'
name|'FakeNWInfo'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|json
indent|'                '
name|'def'
name|'json'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'FakeNWInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network_api'
op|','
string|"'_get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'orig_instance_uuid'
op|':'
newline|'\n'
indent|'            '
name|'expected_updated_instances'
op|'='
op|'['
name|'new_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'orig_instance_uuid'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'expected_updated_instances'
op|'='
op|'['
name|'new_instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_info_cache_update
dedent|''
name|'def'
name|'fake_instance_info_cache_update'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
name|'cache'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_uuid'
op|','
nl|'\n'
name|'expected_updated_instances'
op|'.'
name|'pop'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|','
nl|'\n'
name|'fake_instance_info_cache_update'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_update_instance_cache_with_nw_info
name|'def'
name|'fake_update_instance_cache_with_nw_info'
op|'('
name|'api'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'nw_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'update_cells'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'base_api'
op|','
string|'"update_instance_cache_with_nw_info"'
op|','
nl|'\n'
name|'fake_update_instance_cache_with_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'new_instance'
op|','
nl|'\n'
string|"'172.24.4.225'"
op|','
nl|'\n'
string|"'10.0.0.2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_preassociated_floating_ip
dedent|''
name|'def'
name|'test_associate_preassociated_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_do_test_associate_floating_ip'
op|'('
string|"'orig-uuid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_unassociated_floating_ip
dedent|''
name|'def'
name|'test_associate_unassociated_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_do_test_associate_floating_ip'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_invalid_id
dedent|''
name|'def'
name|'test_get_floating_ip_invalid_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidID'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'123zzz'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FloatingIP.get_by_id'"
op|')'
newline|'\n'
DECL|member|test_get_floating_ip
name|'def'
name|'test_get_floating_ip'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'floating'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'floating'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'123'
op|')'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'123'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FloatingIP.get_pool_names'"
op|')'
newline|'\n'
DECL|member|test_get_floating_ip_pools
name|'def'
name|'test_get_floating_ip_pools'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pools'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'pools'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pools'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ip_pools'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FloatingIP.get_by_address'"
op|')'
newline|'\n'
DECL|member|test_get_floating_ip_by_address
name|'def'
name|'test_get_floating_ip_by_address'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'floating'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'floating'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ip_by_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'address'
op|')'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FloatingIPList.get_by_project'"
op|')'
newline|'\n'
DECL|member|test_get_floating_ips_by_project
name|'def'
name|'test_get_floating_ips_by_project'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floatings'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating_ips'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'floatings'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'floatings'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_floating_ips_by_project'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stub_migrate_instance_calls
dedent|''
name|'def'
name|'_stub_migrate_instance_calls'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'multi_host'
op|','
name|'info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_flavor'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'fake_flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'1.21'
newline|'\n'
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'fake_flavor'
op|')'
newline|'\n'
name|'fake_instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
op|','
nl|'\n'
name|'project_id'
op|'='
string|"'fake_project_id'"
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'fake_flavor'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
name|'fake_migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
string|"'fake_compute_source'"
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
string|"'fake_compute_dest'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_mig_inst_method
name|'def'
name|'fake_mig_inst_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'kwargs'"
op|']'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
DECL|function|fake_get_multi_addresses
dedent|''
name|'def'
name|'fake_get_multi_addresses'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'multi_host'
op|','
op|'['
string|"'fake_float1'"
op|','
string|"'fake_float2'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_rpcapi'
op|'.'
name|'NetworkAPI'
op|','
name|'method'
op|','
nl|'\n'
name|'fake_mig_inst_method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network_api'
op|','
string|"'_get_multi_addresses'"
op|','
nl|'\n'
name|'fake_get_multi_addresses'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'source_compute'"
op|':'
string|"'fake_compute_source'"
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
string|"'fake_compute_dest'"
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.21'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project_id'"
op|','
nl|'\n'
string|"'floating_addresses'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'if'
name|'multi_host'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
string|"'floating_addresses'"
op|']'
op|'='
op|'['
string|"'fake_float1'"
op|','
string|"'fake_float2'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'fake_instance'
op|','
name|'fake_migration'
op|','
name|'expected'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_start_with_multhost
dedent|''
name|'def'
name|'test_migrate_instance_start_with_multhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
op|'{'
string|"'kwargs'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'arg1'
op|','
name|'arg2'
op|','
name|'expected'
op|'='
name|'self'
op|'.'
name|'_stub_migrate_instance_calls'
op|'('
nl|'\n'
string|"'migrate_instance_start'"
op|','
name|'True'
op|','
name|'info'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'host'"
op|']'
op|'='
string|"'fake_compute_source'"
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'arg1'
op|','
name|'arg2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'kwargs'"
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_start_without_multhost
dedent|''
name|'def'
name|'test_migrate_instance_start_without_multhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
op|'{'
string|"'kwargs'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'arg1'
op|','
name|'arg2'
op|','
name|'expected'
op|'='
name|'self'
op|'.'
name|'_stub_migrate_instance_calls'
op|'('
nl|'\n'
string|"'migrate_instance_start'"
op|','
name|'False'
op|','
name|'info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'arg1'
op|','
name|'arg2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'kwargs'"
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish_with_multhost
dedent|''
name|'def'
name|'test_migrate_instance_finish_with_multhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
op|'{'
string|"'kwargs'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'arg1'
op|','
name|'arg2'
op|','
name|'expected'
op|'='
name|'self'
op|'.'
name|'_stub_migrate_instance_calls'
op|'('
nl|'\n'
string|"'migrate_instance_finish'"
op|','
name|'True'
op|','
name|'info'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'host'"
op|']'
op|'='
string|"'fake_compute_dest'"
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'arg1'
op|','
name|'arg2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'kwargs'"
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish_without_multhost
dedent|''
name|'def'
name|'test_migrate_instance_finish_without_multhost'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info'
op|'='
op|'{'
string|"'kwargs'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'arg1'
op|','
name|'arg2'
op|','
name|'expected'
op|'='
name|'self'
op|'.'
name|'_stub_migrate_instance_calls'
op|'('
nl|'\n'
string|"'migrate_instance_finish'"
op|','
name|'False'
op|','
name|'info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'arg1'
op|','
name|'arg2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'kwargs'"
op|']'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_multi_host_instance_has_no_fixed_ip
dedent|''
name|'def'
name|'test_is_multi_host_instance_has_no_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_fixed_ip_get_by_instance
indent|'        '
name|'def'
name|'fake_fixed_ip_get_by_instance'
op|'('
name|'ctxt'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|'('
name|'instance_uuid'
op|'='
name|'uuid'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get_by_instance'"
op|','
nl|'\n'
name|'fake_fixed_ip_get_by_instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'FAKE_UUID'
op|')'
newline|'\n'
name|'result'
op|','
name|'floats'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'_get_multi_addresses'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.fixed_ip.FixedIPList.get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|_test_is_multi_host_network_has_no_project_id
name|'def'
name|'_test_is_multi_host_network_has_no_project_id'
op|'('
name|'self'
op|','
name|'is_multi_host'
op|','
nl|'\n'
name|'fip_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
nl|'\n'
name|'id'
op|'='
number|'123'
op|','
name|'project_id'
op|'='
name|'None'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'is_multi_host'
op|')'
newline|'\n'
name|'fip_get'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'objects'
op|'.'
name|'FixedIP'
op|'('
name|'instance_uuid'
op|'='
name|'FAKE_UUID'
op|','
name|'network'
op|'='
name|'network'
op|','
nl|'\n'
name|'floating_ips'
op|'='
name|'objects'
op|'.'
name|'FloatingIPList'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'FAKE_UUID'
op|')'
newline|'\n'
name|'result'
op|','
name|'floats'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'_get_multi_addresses'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'is_multi_host'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_multi_host_network_has_no_project_id_multi
dedent|''
name|'def'
name|'test_is_multi_host_network_has_no_project_id_multi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_is_multi_host_network_has_no_project_id'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_multi_host_network_has_no_project_id_non_multi
dedent|''
name|'def'
name|'test_is_multi_host_network_has_no_project_id_non_multi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_is_multi_host_network_has_no_project_id'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.fixed_ip.FixedIPList.get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|_test_is_multi_host_network_has_project_id
name|'def'
name|'_test_is_multi_host_network_has_project_id'
op|'('
name|'self'
op|','
name|'is_multi_host'
op|','
nl|'\n'
name|'fip_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
nl|'\n'
name|'id'
op|'='
number|'123'
op|','
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'is_multi_host'
op|')'
newline|'\n'
name|'fip_get'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'objects'
op|'.'
name|'FixedIP'
op|'('
name|'instance_uuid'
op|'='
name|'FAKE_UUID'
op|','
name|'network'
op|'='
name|'network'
op|','
nl|'\n'
name|'floating_ips'
op|'='
name|'objects'
op|'.'
name|'FloatingIPList'
op|'('
op|')'
op|')'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'FAKE_UUID'
op|')'
newline|'\n'
name|'result'
op|','
name|'floats'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'_get_multi_addresses'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'is_multi_host'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_multi_host_network_has_project_id_multi
dedent|''
name|'def'
name|'test_is_multi_host_network_has_project_id_multi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_is_multi_host_network_has_project_id'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_multi_host_network_has_project_id_non_multi
dedent|''
name|'def'
name|'test_is_multi_host_network_has_project_id_non_multi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_is_multi_host_network_has_project_id'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.disassociate'"
op|')'
newline|'\n'
DECL|member|test_network_disassociate_project
name|'def'
name|'test_network_disassociate_project'
op|'('
name|'self'
op|','
name|'mock_disassociate'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_obj'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'net_obj'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKE_UUID'
op|','
name|'project'
op|'='
name|'None'
op|')'
newline|'\n'
name|'mock_disassociate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'net_obj'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host'
op|'='
name|'False'
op|','
name|'project'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.disassociate'"
op|')'
newline|'\n'
DECL|member|test_network_disassociate_host
name|'def'
name|'test_network_disassociate_host'
op|'('
name|'self'
op|','
name|'mock_disassociate'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_obj'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'net_obj'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKE_UUID'
op|','
name|'host'
op|'='
name|'None'
op|')'
newline|'\n'
name|'mock_disassociate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'net_obj'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host'
op|'='
name|'True'
op|','
name|'project'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.associate'"
op|')'
newline|'\n'
DECL|member|test_network_associate_project
name|'def'
name|'test_network_associate_project'
op|'('
name|'self'
op|','
name|'mock_associate'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_obj'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'net_obj'
newline|'\n'
name|'project'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'project'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKE_UUID'
op|','
name|'project'
op|'='
name|'project'
op|')'
newline|'\n'
name|'mock_associate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'project'
op|','
nl|'\n'
name|'network_id'
op|'='
name|'net_obj'
op|'.'
name|'id'
op|','
nl|'\n'
name|'force'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.save'"
op|')'
newline|'\n'
DECL|member|test_network_associate_host
name|'def'
name|'test_network_associate_host'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_obj'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'net_obj'
newline|'\n'
name|'host'
op|'='
name|'str'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'associate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKE_UUID'
op|','
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
name|'mock_save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
name|'net_obj'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Network.disassociate'"
op|')'
newline|'\n'
DECL|member|test_network_disassociate
name|'def'
name|'test_network_disassociate'
op|'('
name|'self'
op|','
name|'mock_disassociate'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'Network'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'id'
op|'='
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'disassociate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKE_UUID'
op|')'
newline|'\n'
name|'mock_disassociate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'123'
op|','
nl|'\n'
name|'project'
op|'='
name|'True'
op|','
name|'host'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_refresh_cache
dedent|''
name|'def'
name|'_test_refresh_cache'
op|'('
name|'self'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# This test verifies that no call to get_instance_nw_info() is made'
nl|'\n'
comment|'# from the @refresh_cache decorator for the tested method.'
nl|'\n'
indent|'        '
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'network_rpcapi'
op|','
name|'method'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'network_rpcapi'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'network_model'
op|'.'
name|'NetworkInfo'
op|','
string|"'hydrate'"
op|')'
op|','
nl|'\n'
op|')'
name|'as'
op|'('
nl|'\n'
name|'method_mock'
op|','
name|'nwinfo_mock'
op|','
name|'hydrate_mock'
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nw_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'method_mock'
op|'.'
name|'return_value'
op|'='
name|'nw_info'
newline|'\n'
name|'hydrate_mock'
op|'.'
name|'return_value'
op|'='
name|'nw_info'
newline|'\n'
name|'getattr'
op|'('
name|'self'
op|'.'
name|'network_api'
op|','
name|'method'
op|')'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'hydrate_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'nwinfo_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_refresh_cache
dedent|''
dedent|''
name|'def'
name|'test_allocate_for_instance_refresh_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
name|'vpn'
op|'='
string|"'fake-vpn'"
newline|'\n'
name|'requested_networks'
op|'='
string|"'fake-networks'"
newline|'\n'
name|'self'
op|'.'
name|'_test_refresh_cache'
op|'('
string|"'allocate_for_instance'"
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'vpn'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_to_instance_refresh_cache
dedent|''
name|'def'
name|'test_add_fixed_ip_to_instance_refresh_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
name|'network_id'
op|'='
string|"'fake-network-id'"
newline|'\n'
name|'self'
op|'.'
name|'_test_refresh_cache'
op|'('
string|"'add_fixed_ip_to_instance'"
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_from_instance_refresh_cache
dedent|''
name|'def'
name|'test_remove_fixed_ip_from_instance_refresh_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
name|'address'
op|'='
string|"'fake-address'"
newline|'\n'
name|'self'
op|'.'
name|'_test_refresh_cache'
op|'('
string|"'remove_fixed_ip_from_instance'"
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.fixed_ip_get_by_address'"
op|')'
newline|'\n'
DECL|member|test_get_fixed_ip_by_address
name|'def'
name|'test_get_fixed_ip_by_address'
op|'('
name|'self'
op|','
name|'fip_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fip_get'
op|'.'
name|'return_value'
op|'='
name|'test_fixed_ip'
op|'.'
name|'fake_fixed_ip'
newline|'\n'
name|'fip'
op|'='
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_fixed_ip_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake-addr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'fip'
op|','
name|'objects'
op|'.'
name|'FixedIP'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FixedIP.get_by_id'"
op|')'
newline|'\n'
DECL|member|test_get_fixed_ip
name|'def'
name|'test_get_fixed_ip'
op|'('
name|'self'
op|','
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fixed_ip'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fixed_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'id'
op|')'
op|')'
newline|'\n'
name|'mock_get_by_id'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FixedIP.get_by_floating_address'"
op|')'
newline|'\n'
DECL|member|test_get_instance_by_floating_address
name|'def'
name|'test_get_instance_by_floating_address'
op|'('
name|'self'
op|','
name|'mock_get_by_floating'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_by_floating'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'FixedIP'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instance_uuid'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_id_by_floating_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
op|')'
op|')'
newline|'\n'
name|'mock_get_by_floating'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.FixedIP.get_by_floating_address'"
op|')'
newline|'\n'
DECL|member|test_get_instance_by_floating_address_none
name|'def'
name|'test_get_instance_by_floating_address_none'
op|'('
name|'self'
op|','
name|'mock_get_by_floating'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_by_floating'
op|'.'
name|'return_value'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_id_by_floating_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
op|')'
op|')'
newline|'\n'
name|'mock_get_by_floating'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'floating'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.network.api.API.migrate_instance_start'"
op|')'
newline|'\n'
DECL|member|test_cleanup_instance_network_on_host
name|'def'
name|'test_cleanup_instance_network_on_host'
op|'('
name|'self'
op|','
name|'fake_migrate_start'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'cleanup_instance_network_on_host'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'fake_compute_source'"
op|')'
newline|'\n'
name|'fake_migrate_start'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'source_compute'"
op|':'
string|"'fake_compute_source'"
op|','
string|"'dest_compute'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.network.api.API.migrate_instance_finish'"
op|')'
newline|'\n'
DECL|member|test_setup_instance_network_on_host
name|'def'
name|'test_setup_instance_network_on_host'
op|'('
name|'self'
op|','
name|'fake_migrate_finish'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_api'
op|'.'
name|'setup_instance_network_on_host'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'fake_compute_source'"
op|')'
newline|'\n'
name|'fake_migrate_finish'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'source_compute'"
op|':'
name|'None'
op|','
string|"'dest_compute'"
op|':'
string|"'fake_compute_source'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.network.api.API'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_info_cache_update'"
op|')'
newline|'\n'
DECL|class|TestUpdateInstanceCache
name|'class'
name|'TestUpdateInstanceCache'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestUpdateInstanceCache'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'FAKE_UUID'
op|')'
newline|'\n'
name|'vifs'
op|'='
op|'['
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
string|"'super_vif'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nw_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
name|'vifs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nw_json'
op|'='
name|'fields'
op|'.'
name|'NetworkModel'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|','
string|"'network_info'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_nw_info_none
dedent|''
name|'def'
name|'test_update_nw_info_none'
op|'('
name|'self'
op|','
name|'db_mock'
op|','
name|'api_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'nw_info'
newline|'\n'
nl|'\n'
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
name|'api_mock'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'db_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
name|'self'
op|'.'
name|'nw_json'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_nw_info_one_network
dedent|''
name|'def'
name|'test_update_nw_info_one_network'
op|'('
name|'self'
op|','
name|'db_mock'
op|','
name|'api_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'nw_info'
newline|'\n'
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
name|'api_mock'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'db_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
name|'self'
op|'.'
name|'nw_json'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_nw_info_empty_list
dedent|''
name|'def'
name|'test_update_nw_info_empty_list'
op|'('
name|'self'
op|','
name|'db_mock'
op|','
name|'api_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'nw_info'
newline|'\n'
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
op|'('
name|'api_mock'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'db_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
string|"'[]'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_decorator_return_object
dedent|''
name|'def'
name|'test_decorator_return_object'
op|'('
name|'self'
op|','
name|'db_mock'
op|','
name|'api_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'func'
op|'('
name|'api_mock'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'db_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
string|"'[]'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_decorator_return_none
dedent|''
name|'def'
name|'test_decorator_return_none'
op|'('
name|'self'
op|','
name|'db_mock'
op|','
name|'api_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'base_api'
op|'.'
name|'refresh_cache'
newline|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'return_value'
op|'='
name|'self'
op|'.'
name|'nw_info'
newline|'\n'
name|'func'
op|'('
name|'api_mock'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'api_mock'
op|'.'
name|'_get_instance_nw_info'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'db_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
name|'self'
op|'.'
name|'nw_json'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NetworkHooksTestCase
dedent|''
dedent|''
name|'class'
name|'NetworkHooksTestCase'
op|'('
name|'test'
op|'.'
name|'BaseHookTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_instance_network_info_hook
indent|'    '
name|'def'
name|'test_instance_network_info_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'info_func'
op|'='
name|'base_api'
op|'.'
name|'update_instance_cache_with_nw_info'
newline|'\n'
name|'self'
op|'.'
name|'assert_has_hook'
op|'('
string|"'instance_network_info'"
op|','
name|'info_func'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2013 Intel Corporation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for resource monitors."""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'monitors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'monitors'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMonitor1
name|'class'
name|'CPUMonitor1'
op|'('
name|'base'
op|'.'
name|'MonitorBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|NOW_TS
indent|'    '
name|'NOW_TS'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CPUMonitor1'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'source'
op|'='
string|"'CPUMonitor1'"
newline|'\n'
nl|'\n'
DECL|member|get_metric_names
dedent|''
name|'def'
name|'get_metric_names'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'set'
op|'('
op|'['
nl|'\n'
name|'fields'
op|'.'
name|'MonitorMetricType'
op|'.'
name|'CPU_FREQUENCY'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metric
dedent|''
name|'def'
name|'get_metric'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
number|'100'
op|','
name|'CPUMonitor1'
op|'.'
name|'NOW_TS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CPUMonitor2
dedent|''
dedent|''
name|'class'
name|'CPUMonitor2'
op|'('
name|'base'
op|'.'
name|'MonitorBase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|get_metric_names
indent|'    '
name|'def'
name|'get_metric_names'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'set'
op|'('
op|'['
nl|'\n'
name|'fields'
op|'.'
name|'MonitorMetricType'
op|'.'
name|'CPU_FREQUENCY'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_metric
dedent|''
name|'def'
name|'get_metric'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
comment|'# This should never be called since the CPU metrics overlap'
nl|'\n'
comment|'# with the ones in the CPUMonitor1.'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ResourceMonitorsTestCase
dedent|''
dedent|''
name|'class'
name|'ResourceMonitorsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case for monitors."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ResourceMonitorsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'monitor_handler'
op|'='
name|'monitors'
op|'.'
name|'ResourceMonitorHandler'
op|'('
op|')'
newline|'\n'
name|'fake_monitors'
op|'='
op|'['
nl|'\n'
string|"'nova.tests.unit.compute.monitors.test_monitors.CPUMonitor1'"
op|','
nl|'\n'
string|"'nova.tests.unit.compute.monitors.test_monitors.CPUMonitor2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_available_monitors'
op|'='
name|'fake_monitors'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_choose_monitors_not_found
dedent|''
name|'def'
name|'test_choose_monitors_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_monitors'
op|'='
op|'['
string|"'CPUMonitor1'"
op|','
string|"'CPUMonitorb'"
op|']'
op|')'
newline|'\n'
name|'monitor_classes'
op|'='
name|'self'
op|'.'
name|'monitor_handler'
op|'.'
name|'choose_monitors'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'monitor_classes'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_choose_monitors_bad
dedent|''
name|'def'
name|'test_choose_monitors_bad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_monitors'
op|'='
op|'['
string|"'CPUMonitor1'"
op|','
string|"'CPUMonitor2'"
op|']'
op|')'
newline|'\n'
name|'monitor_classes'
op|'='
name|'self'
op|'.'
name|'monitor_handler'
op|'.'
name|'choose_monitors'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'monitor_classes'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_choose_monitors_none
dedent|''
name|'def'
name|'test_choose_monitors_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_monitors'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'monitor_classes'
op|'='
name|'self'
op|'.'
name|'monitor_handler'
op|'.'
name|'choose_monitors'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'monitor_classes'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

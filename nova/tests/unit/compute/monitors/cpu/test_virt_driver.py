begin_unit
comment|'# Copyright 2013 Intel Corporation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for Compute Driver CPU resource monitor."""'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'monitors'
op|'.'
name|'cpu'
name|'import'
name|'virt_driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeDriver
name|'class'
name|'FakeDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|get_host_cpu_stats
indent|'    '
name|'def'
name|'get_host_cpu_stats'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'kernel'"
op|':'
number|'5664160000000'
op|','
nl|'\n'
string|"'idle'"
op|':'
number|'1592705190000000'
op|','
nl|'\n'
string|"'frequency'"
op|':'
number|'800'
op|','
nl|'\n'
string|"'user'"
op|':'
number|'26728850000000'
op|','
nl|'\n'
string|"'iowait'"
op|':'
number|'6121490000000'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeResourceTracker
dedent|''
dedent|''
name|'class'
name|'FakeResourceTracker'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|driver
indent|'    '
name|'driver'
op|'='
name|'FakeDriver'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VirtDriverCPUMonitorTestCase
dedent|''
name|'class'
name|'VirtDriverCPUMonitorTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_get_metric_names
indent|'    '
name|'def'
name|'test_get_metric_names'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'monitor'
op|'='
name|'virt_driver'
op|'.'
name|'Monitor'
op|'('
name|'FakeResourceTracker'
op|'('
op|')'
op|')'
newline|'\n'
name|'names'
op|'='
name|'monitor'
op|'.'
name|'get_metric_names'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'10'
op|','
name|'len'
op|'('
name|'names'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.frequency"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.user.time"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.kernel.time"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.idle.time"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.iowait.time"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.user.percent"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.kernel.percent"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.idle.percent"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.iowait.percent"'
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"cpu.percent"'
op|','
name|'names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_metrics
dedent|''
name|'def'
name|'test_get_metrics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'metrics'
op|'='
name|'objects'
op|'.'
name|'MonitorMetricList'
op|'('
op|')'
newline|'\n'
name|'monitor'
op|'='
name|'virt_driver'
op|'.'
name|'Monitor'
op|'('
name|'FakeResourceTracker'
op|'('
op|')'
op|')'
newline|'\n'
name|'monitor'
op|'.'
name|'add_metrics_to_list'
op|'('
name|'metrics'
op|')'
newline|'\n'
name|'names'
op|'='
name|'monitor'
op|'.'
name|'get_metric_names'
op|'('
op|')'
newline|'\n'
name|'for'
name|'metric'
name|'in'
name|'metrics'
op|'.'
name|'objects'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'metric'
op|'.'
name|'name'
op|','
name|'names'
op|')'
newline|'\n'
nl|'\n'
comment|'# Some conversion to a dict to ease testing...'
nl|'\n'
dedent|''
name|'metrics'
op|'='
op|'{'
name|'m'
op|'.'
name|'name'
op|':'
name|'m'
op|'.'
name|'value'
name|'for'
name|'m'
name|'in'
name|'metrics'
op|'.'
name|'objects'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.frequency"'
op|']'
op|','
number|'800'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.user.time"'
op|']'
op|','
number|'26728850000000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.kernel.time"'
op|']'
op|','
number|'5664160000000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.idle.time"'
op|']'
op|','
number|'1592705190000000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.iowait.time"'
op|']'
op|','
number|'6121490000000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.user.percent"'
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.kernel.percent"'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.idle.percent"'
op|']'
op|','
number|'97'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.iowait.percent"'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metrics'
op|'['
string|'"cpu.percent"'
op|']'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_single_sampling
dedent|''
name|'def'
name|'test_ensure_single_sampling'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# We want to ensure that the virt driver's get_host_cpu_stats()"
nl|'\n'
comment|'# is only ever called once, otherwise values for monitor metrics'
nl|'\n'
comment|'# might be illogical -- e.g. pct cpu times for user/system/idle'
nl|'\n'
comment|'# may add up to more than 100.'
nl|'\n'
indent|'        '
name|'metrics'
op|'='
name|'objects'
op|'.'
name|'MonitorMetricList'
op|'('
op|')'
newline|'\n'
name|'monitor'
op|'='
name|'virt_driver'
op|'.'
name|'Monitor'
op|'('
name|'FakeResourceTracker'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FakeDriver'
op|','
string|"'get_host_cpu_stats'"
op|')'
name|'as'
name|'mocked'
op|':'
newline|'\n'
indent|'            '
name|'monitor'
op|'.'
name|'add_metrics_to_list'
op|'('
name|'metrics'
op|')'
newline|'\n'
name|'mocked'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

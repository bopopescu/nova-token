begin_unit
comment|'#    Copyright (C) 2014 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'hv_type'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HvTypeTest
name|'class'
name|'HvTypeTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_valid_string
indent|'    '
name|'def'
name|'test_valid_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'hv_type'
op|'.'
name|'is_valid'
op|'('
string|'"vmware"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_constant
dedent|''
name|'def'
name|'test_valid_constant'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'hv_type'
op|'.'
name|'is_valid'
op|'('
name|'hv_type'
op|'.'
name|'QEMU'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_docker
dedent|''
name|'def'
name|'test_valid_docker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'hv_type'
op|'.'
name|'is_valid'
op|'('
string|'"docker"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_bogus
dedent|''
name|'def'
name|'test_valid_bogus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'hv_type'
op|'.'
name|'is_valid'
op|'('
string|'"acmehypervisor"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_canonicalize_none
dedent|''
name|'def'
name|'test_canonicalize_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_canonicalize_case
dedent|''
name|'def'
name|'test_canonicalize_case'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hv_type'
op|'.'
name|'QEMU'
op|','
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
string|'"QeMu"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_canonicalize_xapi
dedent|''
name|'def'
name|'test_canonicalize_xapi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hv_type'
op|'.'
name|'XEN'
op|','
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
string|'"xapi"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_canonicalize_powervm
dedent|''
name|'def'
name|'test_canonicalize_powervm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hv_type'
op|'.'
name|'PHYP'
op|','
name|'hv_type'
op|'.'
name|'canonicalize'
op|'('
string|'"POWERVM"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_canonicalize_invalid
dedent|''
name|'def'
name|'test_canonicalize_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidHypervisorVirtType'
op|','
nl|'\n'
name|'hv_type'
op|'.'
name|'canonicalize'
op|','
nl|'\n'
string|'"wibble"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

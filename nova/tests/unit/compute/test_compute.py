begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""Tests for compute service."""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'operator'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
name|'from'
name|'neutronclient'
op|'.'
name|'common'
name|'import'
name|'exceptions'
name|'as'
name|'neutron_exceptions'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'oslo_messaging'
name|'as'
name|'messaging'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'fixture'
name|'as'
name|'utils_fixture'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'import'
name|'testtools'
newline|'\n'
name|'from'
name|'testtools'
name|'import'
name|'matchers'
name|'as'
name|'testtools_matchers'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'availability_zones'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'arch'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'manager'
name|'as'
name|'compute_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'manager'
name|'as'
name|'conductor_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'console'
name|'import'
name|'type'
name|'as'
name|'ctype'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'api'
name|'as'
name|'image_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'security_group'
name|'import'
name|'openstack_driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'block_device'
name|'as'
name|'block_device_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'migrate_data'
name|'as'
name|'migrate_data_obj'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'client'
name|'as'
name|'scheduler_client'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'compute'
name|'import'
name|'eventlet_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'compute'
name|'import'
name|'fake_resource_tracker'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_network_cache_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_server_actions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'image'
name|'import'
name|'fake'
name|'as'
name|'fake_image'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'matchers'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_flavor'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_instance_numa_topology'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_migration'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'utils'
name|'as'
name|'test_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'uuidsentinel'
name|'as'
name|'uuids'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'block_device'
name|'as'
name|'driver_block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'cinder'
newline|'\n'
nl|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_manager'"
op|','
string|"'nova.service'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'default_ephemeral_format'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FAKE_IMAGE_REF
name|'FAKE_IMAGE_REF'
op|'='
name|'uuids'
op|'.'
name|'image_ref'
newline|'\n'
nl|'\n'
DECL|variable|NODENAME
name|'NODENAME'
op|'='
string|"'fakenode1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_not_implemented
name|'def'
name|'fake_not_implemented'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_primitive_instance_by_uuid
dedent|''
name|'def'
name|'get_primitive_instance_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Helper method to get an instance and then convert it to\n    a primitive form using jsonutils.\n    """'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|unify_instance
dedent|''
name|'def'
name|'unify_instance'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Return a dict-like instance for both object-initiated and\n    model-initiated sources that can reasonably be compared.\n    """'
newline|'\n'
name|'newdict'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'isinstance'
op|'('
name|'v'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): DB models and Instance objects have different'
nl|'\n'
comment|'# timezone expectations'
nl|'\n'
indent|'            '
name|'v'
op|'='
name|'v'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'k'
op|'=='
string|"'fault'"
op|':'
newline|'\n'
comment|"# NOTE(danms): DB models don't have 'fault'"
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'k'
op|'=='
string|"'pci_devices'"
op|':'
newline|'\n'
comment|'# NOTE(yonlig.he) pci devices need lazy loading'
nl|'\n'
comment|'# fake db does not support it yet.'
nl|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'newdict'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'return'
name|'newdict'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeComputeTaskAPI
dedent|''
name|'class'
name|'FakeComputeTaskAPI'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|resize_instance
indent|'    '
name|'def'
name|'resize_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'extra_instance_updates'
op|','
nl|'\n'
name|'scheduler_hint'
op|','
name|'flavor'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseTestCase
dedent|''
dedent|''
name|'class'
name|'BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'network_manager'
op|'='
string|"'nova.network.manager.FlatManager'"
op|')'
newline|'\n'
name|'fake'
op|'.'
name|'set_nodes'
op|'('
op|'['
name|'NODENAME'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
comment|'# execute power syncing synchronously for testing:'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_power_pool'
op|'='
name|'eventlet_utils'
op|'.'
name|'SyncPool'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# override tracker with a version that doesn't need the database:"
nl|'\n'
name|'fake_rt'
op|'='
name|'fake_resource_tracker'
op|'.'
name|'FakeResourceTracker'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
name|'NODENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'NODENAME'
op|']'
op|'='
name|'fake_rt'
newline|'\n'
nl|'\n'
DECL|function|fake_get_compute_nodes_in_db
name|'def'
name|'fake_get_compute_nodes_in_db'
op|'('
name|'context'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_compute_nodes'
op|'='
op|'['
op|'{'
string|"'local_gb'"
op|':'
number|'259'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'uuids'
op|'.'
name|'fake_compute_node'
op|','
nl|'\n'
string|"'vcpus_used'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'hypervisor_type'"
op|':'
string|"'powervm'"
op|','
nl|'\n'
string|"'created_at'"
op|':'
string|"'2013-04-01T00:27:06.000000'"
op|','
nl|'\n'
string|"'local_gb_used'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
string|"'2013-04-03T00:35:41.000000'"
op|','
nl|'\n'
string|"'hypervisor_hostname'"
op|':'
string|"'fake_phyp1'"
op|','
nl|'\n'
string|"'memory_mb_used'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'131072'
op|','
nl|'\n'
string|"'current_workload'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'16'
op|','
nl|'\n'
string|"'cpu_info'"
op|':'
string|"'ppc64,powervm,3940'"
op|','
nl|'\n'
string|"'running_vms'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'free_disk_gb'"
op|':'
number|'259'
op|','
nl|'\n'
string|"'service_id'"
op|':'
number|'7'
op|','
nl|'\n'
string|"'hypervisor_version'"
op|':'
number|'7'
op|','
nl|'\n'
string|"'disk_available_least'"
op|':'
number|'265856'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'free_ram_mb'"
op|':'
number|'130560'
op|','
nl|'\n'
string|"'metrics'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'stats'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'numa_topology'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_phyp1'"
op|','
nl|'\n'
string|"'cpu_allocation_ratio'"
op|':'
number|'16.0'
op|','
nl|'\n'
string|"'ram_allocation_ratio'"
op|':'
number|'1.5'
op|','
nl|'\n'
string|"'host_ip'"
op|':'
string|"'127.0.0.1'"
op|'}'
op|']'
newline|'\n'
name|'return'
op|'['
name|'objects'
op|'.'
name|'ComputeNode'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'context'
op|','
name|'objects'
op|'.'
name|'ComputeNode'
op|'('
op|')'
op|','
name|'cn'
op|')'
nl|'\n'
name|'for'
name|'cn'
name|'in'
name|'fake_compute_nodes'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_compute_node_delete
dedent|''
name|'def'
name|'fake_compute_node_delete'
op|'('
name|'context'
op|','
name|'compute_node_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'compute_node_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_nodes_in_db'"
op|','
nl|'\n'
name|'fake_get_compute_nodes_in_db'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.compute_node_delete'"
op|','
nl|'\n'
name|'fake_compute_node_delete'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'update_available_resource'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|'='
name|'objects'
op|'.'
name|'Quotas'
op|'.'
name|'from_reservations'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'id'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'id'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'something_else'"
op|':'
string|"'meow'"
op|'}'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'fake_taskapi'
op|'='
name|'FakeComputeTaskAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'compute_task_api'"
op|','
name|'fake_taskapi'
op|')'
newline|'\n'
nl|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|')'
newline|'\n'
name|'fake_server_actions'
op|'.'
name|'stub_out_action_events'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_nw_info
name|'def'
name|'fake_get_nw_info'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_allocate_for_instance
name|'def'
name|'fake_allocate_for_instance'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'ctxt'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'allocate_for_instance'"
op|','
nl|'\n'
name|'fake_allocate_for_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_spec_create
name|'def'
name|'fake_spec_create'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Tests in this module do not depend on this running.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.objects.RequestSpec.create'"
op|','
name|'fake_spec_create'
op|')'
newline|'\n'
nl|'\n'
comment|'# Just to make long lines short'
nl|'\n'
name|'self'
op|'.'
name|'rt'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fake_image'
op|'.'
name|'FakeImageService_reset'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'fake'
op|'.'
name|'restore_nodes'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fake_instance
dedent|''
name|'def'
name|'_fake_instance'
op|'('
name|'self'
op|','
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'None'
op|','
op|'**'
name|'updates'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_fake_instance_obj
dedent|''
name|'def'
name|'_create_fake_instance_obj'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|','
name|'type_name'
op|'='
string|"'m1.tiny'"
op|','
nl|'\n'
name|'services'
op|'='
name|'False'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
name|'type_name'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'context'
op|'='
name|'context'
name|'or'
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'inst'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'inst'
op|'.'
name|'power_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'inst'
op|'.'
name|'image_ref'
op|'='
name|'FAKE_IMAGE_REF'
newline|'\n'
name|'inst'
op|'.'
name|'reservation_id'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'.'
name|'user_id'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'inst'
op|'.'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'inst'
op|'.'
name|'host'
op|'='
string|"'fake_host'"
newline|'\n'
name|'inst'
op|'.'
name|'node'
op|'='
name|'NODENAME'
newline|'\n'
name|'inst'
op|'.'
name|'instance_type_id'
op|'='
name|'flavor'
op|'.'
name|'id'
newline|'\n'
name|'inst'
op|'.'
name|'ami_launch_index'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'memory_mb'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'vcpus'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'root_gb'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'ephemeral_gb'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'architecture'
op|'='
name|'arch'
op|'.'
name|'X86_64'
newline|'\n'
name|'inst'
op|'.'
name|'os_type'
op|'='
string|"'Linux'"
newline|'\n'
name|'inst'
op|'.'
name|'system_metadata'
op|'='
op|'('
nl|'\n'
name|'params'
name|'and'
name|'params'
op|'.'
name|'get'
op|'('
string|"'system_metadata'"
op|','
op|'{'
op|'}'
op|')'
name|'or'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'locked'
op|'='
name|'False'
newline|'\n'
name|'inst'
op|'.'
name|'created_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'updated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'security_groups'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
name|'objects'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'inst'
op|'.'
name|'old_flavor'
op|'='
name|'None'
newline|'\n'
name|'inst'
op|'.'
name|'new_flavor'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'services'
op|':'
newline|'\n'
indent|'            '
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'['
string|"'fake_zone'"
op|','
op|'['
name|'inst'
op|'.'
name|'host'
op|']'
op|']'
op|']'
op|')'
newline|'\n'
dedent|''
name|'inst'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_type
dedent|''
name|'def'
name|'_create_instance_type'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance type."""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
string|"'m1.small'"
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1024'
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'20'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'10'
newline|'\n'
name|'inst'
op|'['
string|"'flavorid'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'swap'"
op|']'
op|'='
number|'2048'
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'flavor_create'
op|'('
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_group
dedent|''
name|'def'
name|'_create_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stub_migrate_server
dedent|''
name|'def'
name|'_stub_migrate_server'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_migrate_server
indent|'        '
name|'def'
name|'_fake_migrate_server'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conductor_manager'
op|'.'
name|'ComputeTaskManager'
op|','
nl|'\n'
string|"'migrate_server'"
op|','
name|'_fake_migrate_server'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_aggregate_with_host
dedent|''
name|'def'
name|'_init_aggregate_with_host'
op|'('
name|'self'
op|','
name|'aggr'
op|','
name|'aggr_name'
op|','
name|'zone'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'aggr'
op|':'
newline|'\n'
indent|'            '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr_name'
op|','
name|'zone'
op|')'
newline|'\n'
dedent|''
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
name|'host'
op|')'
newline|'\n'
name|'return'
name|'aggr'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeVolumeTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeVolumeTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeVolumeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fetched_attempts'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'uuids'
op|'.'
name|'instance'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'fake_volume'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_object'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
string|"'size'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'attach_status'"
op|':'
string|"'detached'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_volume_connector'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'initialize_connection'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'terminate_connection'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'attach'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'detach'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'check_attach'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'greenthread'
op|','
string|"'sleep'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|store_cinfo
name|'def'
name|'store_cinfo'
op|'('
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'cinfo'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'args'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'connection_info'"
op|')'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'fake_volume'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.block_device_mapping_create'"
op|','
name|'store_cinfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.block_device_mapping_update'"
op|','
name|'store_cinfo'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_serial
dedent|''
name|'def'
name|'test_attach_volume_serial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'**'
name|'self'
op|'.'
name|'fake_volume'
op|')'
newline|'\n'
name|'with'
op|'('
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get_volume_encryption_metadata'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
op|'}'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|'='
name|'fake_bdm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'cinfo'
op|'.'
name|'get'
op|'('
string|"'serial'"
op|')'
op|','
name|'uuids'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_raises
dedent|''
dedent|''
name|'def'
name|'test_attach_volume_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
op|'**'
name|'self'
op|'.'
name|'fake_volume'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_attach
name|'def'
name|'fake_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'driver_block_device'
op|'.'
name|'DriverVolumeBlockDevice'
op|','
nl|'\n'
string|"'attach'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'unreserve_volume'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
nl|'\n'
string|"'destroy'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_attach'
op|','
name|'mock_unreserve'
op|','
name|'mock_destroy'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_attach'
op|'.'
name|'side_effect'
op|'='
name|'fake_attach'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'fake_bdm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_unreserve'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_destroy'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_volume_api_raises
dedent|''
dedent|''
name|'def'
name|'test_detach_volume_api_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
op|'**'
name|'self'
op|'.'
name|'fake_volume'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_driver_detach_volume'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'detach'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
nl|'\n'
string|"'get_by_volume_and_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fake_bdm'
op|','
string|"'destroy'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_internal_detach'
op|','
name|'mock_detach'
op|','
name|'mock_get'
op|','
name|'mock_destroy'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_detach'
op|'.'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'fake_bdm'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
name|'instance'
op|','
string|"'fake_id'"
op|')'
newline|'\n'
name|'mock_internal_detach'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'fake_bdm'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_destroy'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_await_block_device_created_too_slow
dedent|''
dedent|''
name|'def'
name|'test_await_block_device_created_too_slow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries_interval'
op|'='
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|never_get
name|'def'
name|'never_get'
op|'('
name|'context'
op|','
name|'vol_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'blah'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'never_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeNotCreated'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_await_block_device_map_created'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_await_block_device_created_failed
dedent|''
name|'def'
name|'test_await_block_device_created_failed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'compute'
newline|'\n'
nl|'\n'
name|'fake_result'
op|'='
op|'{'
string|"'status'"
op|':'
string|"'error'"
op|','
string|"'id'"
op|':'
string|"'blah'"
op|'}'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'c'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_result'
op|')'
name|'as'
name|'fake_get'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeNotCreated'
op|','
nl|'\n'
name|'c'
op|'.'
name|'_await_block_device_map_created'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'fake_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_await_block_device_created_slow
dedent|''
dedent|''
name|'def'
name|'test_await_block_device_created_slow'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'compute'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries'
op|'='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries_interval'
op|'='
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|slow_get
name|'def'
name|'slow_get'
op|'('
name|'context'
op|','
name|'vol_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'fetched_attempts'
op|'<'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fetched_attempts'
op|'+='
number|'1'
newline|'\n'
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'blah'"
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'blah'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'c'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'slow_get'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'c'
op|'.'
name|'_await_block_device_map_created'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'attempts'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_await_block_device_created_retries_negative
dedent|''
name|'def'
name|'test_await_block_device_created_retries_negative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'compute'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries_interval'
op|'='
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|volume_get
name|'def'
name|'volume_get'
op|'('
name|'context'
op|','
name|'vol_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'blah'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'c'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'volume_get'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'c'
op|'.'
name|'_await_block_device_map_created'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'attempts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_await_block_device_created_retries_zero
dedent|''
name|'def'
name|'test_await_block_device_created_retries_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'self'
op|'.'
name|'compute'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'block_device_allocate_retries_interval'
op|'='
number|'0.1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|volume_get
name|'def'
name|'volume_get'
op|'('
name|'context'
op|','
name|'vol_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
nl|'\n'
string|"'status'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'blah'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'c'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'volume_get'
op|')'
newline|'\n'
name|'attempts'
op|'='
name|'c'
op|'.'
name|'_await_block_device_map_created'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'attempts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boot_volume_serial
dedent|''
name|'def'
name|'test_boot_volume_serial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'save'"
op|')'
nl|'\n'
op|')'
name|'as'
name|'mock_save'
op|':'
newline|'\n'
indent|'            '
name|'block_device_mapping'
op|'='
op|'['
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'55'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
op|')'
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'prepped_bdm'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_prep_block_device'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance_object'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_save'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'volume_driver_bdm'
op|'='
name|'prepped_bdm'
op|'['
string|"'block_device_mapping'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'volume_driver_bdm'
op|'['
string|"'connection_info'"
op|']'
op|'['
string|"'serial'"
op|']'
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boot_volume_metadata
dedent|''
dedent|''
name|'def'
name|'test_boot_volume_metadata'
op|'('
name|'self'
op|','
name|'metadata'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
DECL|function|volume_api_get
indent|'        '
name|'def'
name|'volume_api_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
nl|'\n'
string|"'size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'volume_image_metadata'"
op|':'
op|'{'
string|"'vol_test_key'"
op|':'
string|"'vol_test_value'"
op|','
nl|'\n'
string|"'min_ram'"
op|':'
string|"u'128'"
op|','
nl|'\n'
string|"'min_disk'"
op|':'
string|"u'256'"
op|','
nl|'\n'
string|"'size'"
op|':'
string|"u'536870912'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'volume_api'
op|','
string|"'get'"
op|','
name|'volume_api_get'
op|')'
newline|'\n'
nl|'\n'
name|'expected_no_metadata'
op|'='
op|'{'
string|"'min_disk'"
op|':'
number|'0'
op|','
string|"'min_ram'"
op|':'
number|'0'
op|','
string|"'properties'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'size'"
op|':'
number|'0'
op|','
string|"'status'"
op|':'
string|"'active'"
op|'}'
newline|'\n'
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_get_bdm_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'vol_test_key'"
op|']'
op|','
nl|'\n'
string|"'vol_test_value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'128'
op|','
name|'image_meta'
op|'['
string|"'min_ram'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'256'
op|','
name|'image_meta'
op|'['
string|"'min_disk'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'units'
op|'.'
name|'Gi'
op|','
name|'image_meta'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_no_metadata'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test it with new-style BDMs'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_get_bdm_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_device_mapping'
op|','
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'vol_test_key'"
op|']'
op|','
nl|'\n'
string|"'vol_test_value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'128'
op|','
name|'image_meta'
op|'['
string|"'min_ram'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'256'
op|','
name|'image_meta'
op|'['
string|"'min_disk'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'units'
op|'.'
name|'Gi'
op|','
name|'image_meta'
op|'['
string|"'size'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_no_metadata'
op|','
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boot_volume_no_metadata
dedent|''
dedent|''
name|'def'
name|'test_boot_volume_no_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test_boot_volume_metadata'
op|'('
name|'metadata'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boot_image_metadata
dedent|''
name|'def'
name|'test_boot_image_metadata'
op|'('
name|'self'
op|','
name|'metadata'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
DECL|function|image_api_get
indent|'        '
name|'def'
name|'image_api_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'img_test_key'"
op|':'
string|"'img_test_value'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'image_api'
op|','
string|"'get'"
op|','
name|'image_api_get'
op|')'
newline|'\n'
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|'"fake-image"'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_get_bdm_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_device_mapping'
op|','
name|'legacy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'metadata'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'img_test_value'"
op|','
nl|'\n'
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'img_test_key'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image_meta'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_boot_image_no_metadata
dedent|''
dedent|''
name|'def'
name|'test_boot_image_no_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'test_boot_image_metadata'
op|'('
name|'metadata'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_bandwidth_usage_not_implemented
dedent|''
name|'def'
name|'test_poll_bandwidth_usage_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_all_bw_counters'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'last_completed_audit_period'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'time'
op|','
string|"'time'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
string|"'get_by_host'"
op|')'
newline|'\n'
comment|'# Following methods will be called'
nl|'\n'
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
number|'0'
op|','
number|'0'
op|')'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10'
op|')'
newline|'\n'
comment|'# Note - time called two more times from Log'
nl|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'20'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'21'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_host'
op|'('
name|'ctxt'
op|','
string|"'fake-mini'"
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_all_bw_counters'
op|'('
op|'['
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'bandwidth_poll_interval'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_bandwidth_usage'
op|'('
name|'ctxt'
op|')'
newline|'\n'
comment|"# A second call won't call the stubs again as the bandwidth"
nl|'\n'
comment|'# poll is now disabled'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_bandwidth_usage'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
string|"'get_by_host'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_host_volume_bdms
name|'def'
name|'test_get_host_volume_bdms'
op|'('
name|'self'
op|','
name|'mock_get_by_inst'
op|','
name|'mock_get_by_host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'volume_instance'
op|')'
newline|'\n'
name|'mock_get_by_host'
op|'.'
name|'return_value'
op|'='
op|'['
name|'fake_instance'
op|']'
newline|'\n'
nl|'\n'
name|'volume_bdm'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'is_volume'
op|'='
name|'True'
op|')'
newline|'\n'
name|'not_volume_bdm'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'id'
op|'='
number|'2'
op|','
name|'is_volume'
op|'='
name|'False'
op|')'
newline|'\n'
name|'mock_get_by_inst'
op|'.'
name|'return_value'
op|'='
op|'['
name|'volume_bdm'
op|','
name|'not_volume_bdm'
op|']'
newline|'\n'
nl|'\n'
name|'expected_host_bdms'
op|'='
op|'['
op|'{'
string|"'instance'"
op|':'
name|'fake_instance'
op|','
nl|'\n'
string|"'instance_bdms'"
op|':'
op|'['
name|'volume_bdm'
op|']'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'got_host_bdms'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_host_volume_bdms'
op|'('
string|"'fake-context'"
op|')'
newline|'\n'
name|'mock_get_by_host'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'fake-context'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
newline|'\n'
name|'mock_get_by_inst'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'fake-context'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'volume_instance'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_host_bdms'
op|','
name|'got_host_bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_volume_usage_disabled
dedent|''
name|'def'
name|'test_poll_volume_usage_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
string|"'MockContext'"
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_host_volume_bdms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'last_completed_audit_period'"
op|')'
newline|'\n'
comment|'# None of the mocks should be called.'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'volume_usage_poll_interval'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_volume_usage'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_volume_usage_returns_no_vols
dedent|''
name|'def'
name|'test_poll_volume_usage_returns_no_vols'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
string|"'MockContext'"
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_host_volume_bdms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_all_volume_usage'"
op|')'
newline|'\n'
comment|'# Following methods are called.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_host_volume_bdms'
op|'('
name|'ctxt'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'volume_usage_poll_interval'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_volume_usage'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_volume_usage_with_data
dedent|''
name|'def'
name|'test_poll_volume_usage_with_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
string|"'MockContext'"
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_host_volume_bdms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_update_volume_usage_cache'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_all_volume_usage'"
op|','
nl|'\n'
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
op|'['
number|'3'
op|','
number|'4'
op|']'
op|')'
newline|'\n'
comment|'# All the mocks are called'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_host_volume_bdms'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_update_volume_usage_cache'
op|'('
name|'ctxt'
op|','
op|'['
number|'3'
op|','
number|'4'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'volume_usage_poll_interval'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_volume_usage'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_volume_usage
dedent|''
name|'def'
name|'test_detach_volume_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that detach volume update the volume usage cache table correctly'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'device_name'
op|'='
string|"'/dev/vdb'"
op|','
nl|'\n'
name|'connection_info'
op|'='
string|"'{}'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'source_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'destination_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'no_device'
op|'='
name|'False'
op|','
nl|'\n'
name|'disk_bus'
op|'='
string|"'foo'"
op|','
nl|'\n'
name|'device_type'
op|'='
string|"'disk'"
op|','
nl|'\n'
name|'volume_size'
op|'='
number|'1'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'uuids'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
name|'host_volume_bdms'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|"'{}'"
op|','
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
nl|'\n'
string|"'get_by_volume_and_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'block_stats'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_host_volume_bdms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_all_volume_usage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_exists'"
op|')'
newline|'\n'
nl|'\n'
comment|'# The following methods will be called'
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'.'
name|'get_by_volume_and_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'uuids'
op|'.'
name|'volume_id'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'bdm'
op|'.'
name|'obj_clone'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'block_stats'
op|'('
name|'instance'
op|','
string|"'vdb'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
number|'1'
op|','
number|'30'
op|','
number|'1'
op|','
number|'20'
op|','
name|'None'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_host_volume_bdms'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'host_volume_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_all_volume_usage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'host_volume_bdms'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'volume'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'rd_req'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'rd_bytes'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'wr_req'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'wr_bytes'"
op|':'
number|'5'
op|','
nl|'\n'
string|"'instance'"
op|':'
name|'instance'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_volume_encryption_metadata
name|'def'
name|'fake_get_volume_encryption_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get_volume_encryption_metadata'"
op|','
nl|'\n'
name|'fake_get_volume_encryption_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
comment|'# Poll volume usage & then detach the volume. This will update the'
nl|'\n'
comment|'# total fields in the volume usage cache.'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'volume_usage_poll_interval'
op|'='
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_volume_usage'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
comment|'# Check that a volume.usage and volume.attach notification was sent'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'uuids'
op|'.'
name|'volume_id'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that volume.attach, 2 volume.usage, and volume.detach'
nl|'\n'
comment|'# notifications were sent'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'compute.instance.volume.attach'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'volume.usage'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake'"
op|','
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake'"
op|','
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'payload'
op|'['
string|"'reads'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'30'
op|','
name|'payload'
op|'['
string|"'read_bytes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'payload'
op|'['
string|"'writes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'20'
op|','
name|'payload'
op|'['
string|"'write_bytes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'payload'
op|'['
string|"'availability_zone'"
op|']'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'compute.instance.volume.detach'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the database for the'
nl|'\n'
name|'volume_usages'
op|'='
name|'db'
op|'.'
name|'vol_get_usage_by_time'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'volume_usages'
op|')'
op|')'
newline|'\n'
name|'volume_usage'
op|'='
name|'volume_usages'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'volume_usage'
op|'['
string|"'curr_reads'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'volume_usage'
op|'['
string|"'curr_read_bytes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'volume_usage'
op|'['
string|"'curr_writes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'volume_usage'
op|'['
string|"'curr_write_bytes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'volume_usage'
op|'['
string|"'tot_reads'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'30'
op|','
name|'volume_usage'
op|'['
string|"'tot_read_bytes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'volume_usage'
op|'['
string|"'tot_writes'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'20'
op|','
name|'volume_usage'
op|'['
string|"'tot_write_bytes'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prepare_image_mapping
dedent|''
name|'def'
name|'test_prepare_image_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'swap_size'
op|'='
number|'1'
newline|'\n'
name|'ephemeral_size'
op|'='
number|'1'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
name|'swap_size'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
name|'ephemeral_size'
op|'}'
newline|'\n'
name|'mappings'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'sdc2'"
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'preped_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_prepare_image_mapping'
op|'('
nl|'\n'
name|'instance_type'
op|','
name|'mappings'
op|')'
newline|'\n'
nl|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'ephemeral_size'
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'ephemeral_size'
nl|'\n'
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'expected'
op|','
name|'got'
name|'in'
name|'zip'
op|'('
name|'expected_result'
op|','
name|'preped_bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'expected'
op|','
name|'matchers'
op|'.'
name|'IsSubDictOf'
op|'('
name|'got'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_bdm
dedent|''
dedent|''
name|'def'
name|'test_validate_bdm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_get
indent|'        '
name|'def'
name|'fake_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'res_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'res_id'
op|','
string|"'size'"
op|':'
number|'4'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
dedent|''
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get_snapshot'"
op|','
name|'fake_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
nl|'\n'
name|'fake_check_attach'
op|')'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'55555555-aaaa-bbbb-cccc-555555555555'"
newline|'\n'
name|'snapshot_id'
op|'='
string|"'66666666-aaaa-bbbb-cccc-555555555555'"
newline|'\n'
name|'image_id'
op|'='
string|"'77777777-aaaa-bbbb-cccc-555555555555'"
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
number|'1'
op|','
string|"'ephemeral_gb'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'mappings'
op|'='
op|'['
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'1'
op|','
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'snapshot_id'
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'mappings'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mappings'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure it passes at first'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'mappings'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'mappings'
op|'['
number|'1'
op|']'
op|'.'
name|'volume_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'6'
op|','
name|'mappings'
op|'['
number|'2'
op|']'
op|'.'
name|'volume_size'
op|')'
newline|'\n'
nl|'\n'
comment|'# Boot sequence'
nl|'\n'
name|'mappings'
op|'['
number|'2'
op|']'
op|'.'
name|'boot_index'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMBootSequence'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings'
op|')'
newline|'\n'
name|'mappings'
op|'['
number|'2'
op|']'
op|'.'
name|'boot_index'
op|'='
number|'0'
newline|'\n'
nl|'\n'
comment|'# number of local block_devices'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'max_local_block_devices'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMLocalsLimit'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings'
op|')'
newline|'\n'
name|'ephemerals'
op|'='
op|'['
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'ephemerals'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'ephemerals'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'max_local_block_devices'
op|'='
number|'4'
op|')'
newline|'\n'
comment|'# More ephemerals are OK as long as they are not over the size limit'
nl|'\n'
name|'mappings_'
op|'='
name|'mappings'
op|'['
op|':'
op|']'
newline|'\n'
name|'mappings_'
op|'.'
name|'objects'
op|'.'
name|'extend'
op|'('
name|'ephemerals'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'mappings_'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ephemerals over the size limit'
nl|'\n'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_size'
op|'='
number|'3'
newline|'\n'
name|'mappings_'
op|'='
name|'mappings'
op|'['
op|':'
op|']'
newline|'\n'
name|'mappings_'
op|'.'
name|'objects'
op|'.'
name|'extend'
op|'('
name|'ephemerals'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMEphemeralSize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings_'
op|')'
newline|'\n'
nl|'\n'
comment|'# Swap over the size limit'
nl|'\n'
name|'mappings'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_size'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMSwapSize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings'
op|')'
newline|'\n'
name|'mappings'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_size'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'additional_swap'
op|'='
op|'['
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'additional_swap'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'additional_swap'
op|')'
newline|'\n'
nl|'\n'
comment|'# More than one swap'
nl|'\n'
name|'mappings_'
op|'='
name|'mappings'
op|'['
op|':'
op|']'
newline|'\n'
name|'mappings_'
op|'.'
name|'objects'
op|'.'
name|'extend'
op|'('
name|'additional_swap'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMFormat'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings_'
op|')'
newline|'\n'
nl|'\n'
name|'image_no_size'
op|'='
op|'['
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda4'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'image_no_size'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image_no_size'
op|')'
newline|'\n'
name|'mappings_'
op|'='
name|'mappings'
op|'['
op|':'
op|']'
newline|'\n'
name|'mappings_'
op|'.'
name|'objects'
op|'.'
name|'extend'
op|'('
name|'image_no_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDM'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings_'
op|')'
newline|'\n'
nl|'\n'
comment|'# blank device without a specified size fails'
nl|'\n'
name|'blank_no_size'
op|'='
op|'['
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda4'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'blank_no_size'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'blank_no_size'
op|')'
newline|'\n'
name|'mappings_'
op|'='
name|'mappings'
op|'['
op|':'
op|']'
newline|'\n'
name|'mappings_'
op|'.'
name|'objects'
op|'.'
name|'extend'
op|'('
name|'blank_no_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDM'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'mappings_'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_bdm_media_service_exceptions
dedent|''
name|'def'
name|'test_validate_bdm_media_service_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
number|'1'
op|','
string|"'ephemeral_gb'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
name|'anon'
op|'='
name|'True'
op|')'
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|'# First we test a list of invalid status values that should result'
nl|'\n'
comment|'# in an InvalidVolume exception being raised.'
nl|'\n'
name|'status_values'
op|'='
op|'('
nl|'\n'
comment|"# First two check that the status is 'available'."
nl|'\n'
op|'('
string|"'creating'"
op|','
string|"'detached'"
op|')'
op|','
nl|'\n'
op|'('
string|"'error'"
op|','
string|"'detached'"
op|')'
op|','
nl|'\n'
comment|"# Checks that the attach_status is 'detached'."
nl|'\n'
op|'('
string|"'available'"
op|','
string|"'attached'"
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'status'
op|','
name|'attach_status'
name|'in'
name|'status_values'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'attach_status'
op|'=='
string|"'attached'"
op|':'
newline|'\n'
DECL|function|fake_volume_get
indent|'                '
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'status'
op|','
nl|'\n'
string|"'attach_status'"
op|':'
name|'attach_status'
op|','
nl|'\n'
string|"'multiattach'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'attachments'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|function|fake_volume_get
indent|'                '
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'status'
op|','
nl|'\n'
string|"'attach_status'"
op|':'
name|'attach_status'
op|','
nl|'\n'
string|"'multiattach'"
op|':'
name|'False'
op|'}'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidVolume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now we test a 404 case that results in InvalidBDMVolume.'
nl|'\n'
DECL|function|fake_volume_get_not_found
dedent|''
name|'def'
name|'fake_volume_get_not_found'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'VolumeNotFound'
op|'('
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get_not_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidBDMVolume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
comment|"# Check that the volume status is 'available' and attach_status is"
nl|'\n'
comment|"# 'detached' and accept the request if so"
nl|'\n'
DECL|function|fake_volume_get_ok
name|'def'
name|'fake_volume_get_ok'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'attach_status'"
op|':'
string|"'detached'"
op|','
nl|'\n'
string|"'multiattach'"
op|':'
name|'False'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get_ok'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_validate_bdm'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_snapshot_create
dedent|''
name|'def'
name|'test_volume_snapshot_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_snapshot_create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_object'
op|','
string|"'fake_id'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_snapshot_create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_object'
op|','
string|"'fake_id'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_snapshot_delete
dedent|''
name|'def'
name|'test_volume_snapshot_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_snapshot_delete'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_object'
op|','
string|"'fake_id'"
op|','
string|"'fake_id2'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_snapshot_delete'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_object'
op|','
string|"'fake_id'"
op|','
string|"'fake_id2'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'create'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'OverQuota'
op|'('
name|'overs'
op|'='
string|"'volumes'"
op|')'
op|')'
newline|'\n'
DECL|member|test_prep_block_device_over_quota_failure
name|'def'
name|'test_prep_block_device_over_quota_failure'
op|'('
name|'self'
op|','
name|'mock_create'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"u'disk'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'image_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
op|'}'
op|')'
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeLimitExceeded'
op|','
nl|'\n'
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|'('
op|')'
op|'.'
name|'_prep_block_device'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_create'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'get_swap'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_blanks'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_images'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_snapshots'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_volumes'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_ephemerals'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'convert_swap'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'block_device'
op|','
string|"'attach_block_devices'"
op|')'
newline|'\n'
DECL|member|test_prep_block_device_with_blanks
name|'def'
name|'test_prep_block_device_with_blanks'
op|'('
name|'self'
op|','
name|'attach_block_devices'
op|','
nl|'\n'
name|'convert_swap'
op|','
name|'convert_ephemerals'
op|','
nl|'\n'
name|'convert_volumes'
op|','
name|'convert_snapshots'
op|','
nl|'\n'
name|'convert_images'
op|','
name|'convert_blanks'
op|','
nl|'\n'
name|'get_swap'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|'='
string|"'/dev/vda'"
newline|'\n'
name|'root_volume'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id-1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|')'
newline|'\n'
name|'blank_volume1'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'1'
op|'}'
op|')'
op|')'
newline|'\n'
name|'blank_volume2'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'2'
op|'}'
op|')'
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'blank_volume1'
op|','
name|'blank_volume2'
op|','
name|'root_volume'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_attach_block_devices
name|'def'
name|'fake_attach_block_devices'
op|'('
name|'bdm'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
dedent|''
name|'convert_swap'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
name|'convert_ephemerals'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
name|'convert_volumes'
op|'.'
name|'return_value'
op|'='
op|'['
name|'blank_volume1'
op|','
name|'blank_volume2'
op|']'
newline|'\n'
name|'convert_snapshots'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
name|'convert_images'
op|'.'
name|'return_value'
op|'='
op|'['
name|'root_volume'
op|']'
newline|'\n'
name|'convert_blanks'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
name|'attach_block_devices'
op|'.'
name|'side_effect'
op|'='
name|'fake_attach_block_devices'
newline|'\n'
name|'get_swap'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'expected_block_device_info'
op|'='
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'swap'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'bdms'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'manager'
op|'='
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|'('
op|')'
newline|'\n'
name|'manager'
op|'.'
name|'use_legacy_block_device_info'
op|'='
name|'False'
newline|'\n'
name|'block_device_info'
op|'='
name|'manager'
op|'.'
name|'_prep_block_device'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
name|'convert_swap'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'convert_ephemerals'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'bdm_args'
op|'='
name|'tuple'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'convert_volumes'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdm_args'
op|')'
newline|'\n'
name|'convert_snapshots'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdm_args'
op|')'
newline|'\n'
name|'convert_images'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdm_args'
op|')'
newline|'\n'
name|'convert_blanks'
op|'.'
name|'assert_called_once_with'
op|'('
name|'bdm_args'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_block_device_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'attach_block_devices'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'get_swap'
op|'.'
name|'assert_called_once_with'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'SpawnIsSynchronousFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault
dedent|''
name|'def'
name|'test_wrap_instance_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault_instance_in_args
dedent|''
name|'def'
name|'test_wrap_instance_fault_instance_in_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault_no_instance
dedent|''
name|'def'
name|'test_wrap_instance_fault_no_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
string|"'event_start'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
nl|'\n'
string|"'event_finish_with_failure'"
op|')'
newline|'\n'
DECL|member|test_wrap_instance_event
name|'def'
name|'test_wrap_instance_event'
op|'('
name|'self'
op|','
name|'mock_finish'
op|','
name|'mock_start'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_event'
newline|'\n'
DECL|function|fake_event
name|'def'
name|'fake_event'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'fake_event'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_start'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_finish'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
string|"'event_start'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
nl|'\n'
string|"'event_finish_with_failure'"
op|')'
newline|'\n'
DECL|member|test_wrap_instance_event_return
name|'def'
name|'test_wrap_instance_event_return'
op|'('
name|'self'
op|','
name|'mock_finish'
op|','
name|'mock_start'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_event'
newline|'\n'
DECL|function|fake_event
name|'def'
name|'fake_event'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'retval'
op|'='
name|'fake_event'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'retval'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_start'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_finish'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
string|"'event_start'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceActionEvent'
op|','
nl|'\n'
string|"'event_finish_with_failure'"
op|')'
newline|'\n'
DECL|member|test_wrap_instance_event_log_exception
name|'def'
name|'test_wrap_instance_event_log_exception'
op|'('
name|'self'
op|','
name|'mock_finish'
op|','
name|'mock_start'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_event'
newline|'\n'
DECL|function|fake_event
name|'def'
name|'fake_event'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NovaException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'fake_event'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_start'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_finish'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'args'
op|','
name|'kwargs'
op|'='
name|'mock_finish'
op|'.'
name|'call_args'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'kwargs'
op|'['
string|"'exc_val'"
op|']'
op|','
name|'exception'
op|'.'
name|'NovaException'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_compat
dedent|''
name|'def'
name|'test_object_compat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'object_compat'
newline|'\n'
DECL|function|test_fn
name|'def'
name|'test_fn'
op|'('
name|'_self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'instance'
op|','
name|'objects'
op|'.'
name|'Instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
name|'db_inst'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'metadata'
op|','
name|'db_inst'
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'system_metadata'
op|','
nl|'\n'
name|'db_inst'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'test_fn'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'db_inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_compat_no_metas
dedent|''
name|'def'
name|'test_object_compat_no_metas'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Tests that we don't try to set metadata/system_metadata on the"
nl|'\n'
comment|"# instance object using fields that aren't in the db object."
nl|'\n'
indent|'        '
name|'db_inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
newline|'\n'
name|'db_inst'
op|'.'
name|'pop'
op|'('
string|"'metadata'"
op|','
name|'None'
op|')'
newline|'\n'
name|'db_inst'
op|'.'
name|'pop'
op|'('
string|"'system_metadata'"
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'object_compat'
newline|'\n'
DECL|function|test_fn
name|'def'
name|'test_fn'
op|'('
name|'_self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'instance'
op|','
name|'objects'
op|'.'
name|'Instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
name|'db_inst'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'metadata'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'system_metadata'"
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'test_fn'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'db_inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_compat_more_positional_args
dedent|''
name|'def'
name|'test_object_compat_more_positional_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'object_compat'
newline|'\n'
DECL|function|test_fn
name|'def'
name|'test_fn'
op|'('
name|'_self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'pos_arg_1'
op|','
name|'pos_arg_2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'instance'
op|','
name|'objects'
op|'.'
name|'Instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|','
name|'db_inst'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'metadata'
op|','
name|'db_inst'
op|'['
string|"'metadata'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'system_metadata'
op|','
nl|'\n'
name|'db_inst'
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pos_arg_1'
op|','
string|"'fake_pos_arg1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pos_arg_2'
op|','
string|"'fake_pos_arg2'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test_fn'
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'db_inst'
op|','
string|"'fake_pos_arg1'"
op|','
string|"'fake_pos_arg2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_img_ref_associates_config_drive
dedent|''
name|'def'
name|'test_create_instance_with_img_ref_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates a config drive.'
nl|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'config_drive'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_config_drive
dedent|''
dedent|''
name|'def'
name|'test_create_instance_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates a config drive.'
nl|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'config_drive'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_unlimited_memory
dedent|''
dedent|''
name|'def'
name|'test_create_instance_unlimited_memory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Default of memory limit=None is unlimited.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'999999999999'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
name|'None'
op|'}'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'999999999999'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_unlimited_disk
dedent|''
name|'def'
name|'test_create_instance_unlimited_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
number|'999999999999'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'99999999999'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'disk_gb'"
op|':'
name|'None'
op|'}'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_multiple_instances_then_starve
dedent|''
name|'def'
name|'test_create_multiple_instances_then_starve'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'limits'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'4096'
op|','
string|"'disk_gb'"
op|':'
number|'1000'
op|'}'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'1024'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1024'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'256'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'2048'
op|','
string|'"root_gb"'
op|':'
number|'256'
op|','
string|'"ephemeral_gb"'
op|':'
number|'256'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3072'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'768'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'8192'
op|','
string|'"root_gb"'
op|':'
number|'8192'
op|','
string|'"ephemeral_gb"'
op|':'
number|'8192'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3072'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'768'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_multiple_instance_with_neutron_port
dedent|''
name|'def'
name|'test_create_multiple_instance_with_neutron_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_is_neutron
name|'def'
name|'fake_is_neutron'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'is_neutron'"
op|','
name|'fake_is_neutron'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
name|'objects'
op|'.'
name|'NetworkRequestList'
op|'('
nl|'\n'
name|'objects'
op|'='
op|'['
name|'objects'
op|'.'
name|'NetworkRequest'
op|'('
name|'port_id'
op|'='
name|'uuids'
op|'.'
name|'port_instance'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MultiplePortsNotApplicable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'max_count'
op|'='
number|'2'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_ram
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed ram policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_mem_mb'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_mb'
op|'='
name|'total_mem_mb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_mb'
op|'='
name|'int'
op|'('
name|'total_mem_mb'
op|'*'
number|'1.45'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# total_mem_mb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
name|'instance_mb'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
name|'oversub_limit_mb'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_mb'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_ram_fail
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_ram_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test passing of oversubscribed ram policy from the scheduler, but\n        with insufficient memory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_mem_mb'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_mb'
op|'='
name|'total_mem_mb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_mb'
op|'='
name|'int'
op|'('
name|'total_mem_mb'
op|'*'
number|'1.55'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# both total_mem_mb and the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
name|'instance_mb'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
name|'oversub_limit_mb'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_cpu
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_cpu'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed cpu policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'limits'
op|'='
op|'{'
string|"'vcpu'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'resources'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# total_mem_mb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'2'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# create one more instance:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# delete the instance:'
nl|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_usage'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# now oversubscribe vcpus and fail:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'2'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'vcpu'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_disk
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed disk policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_disk_gb'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_gb'
op|'='
name|'total_disk_gb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_gb'
op|'='
name|'int'
op|'('
name|'total_disk_gb'
op|'*'
number|'1.45'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of disk that exceeds'
nl|'\n'
comment|'# total_disk_gb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
name|'instance_gb'
op|','
string|'"memory_mb"'
op|':'
number|'10'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'disk_gb'"
op|':'
name|'oversub_limit_gb'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_gb'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_disk_fail
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_disk_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test passing of oversubscribed disk policy from the scheduler, but\n        with insufficient disk.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_disk_gb'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_gb'
op|'='
name|'total_disk_gb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_gb'
op|'='
name|'int'
op|'('
name|'total_disk_gb'
op|'*'
number|'1.55'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of disk that exceeds'
nl|'\n'
comment|'# total_disk_gb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
name|'instance_gb'
op|','
string|'"memory_mb"'
op|':'
number|'10'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'disk_gb'"
op|':'
name|'oversub_limit_gb'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_without_node_param
dedent|''
name|'def'
name|'test_create_instance_without_node_param'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'node'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'NODENAME'
op|','
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_no_image
dedent|''
name|'def'
name|'test_create_instance_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create instance with no image provided.'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'testtools'
op|'.'
name|'skipIf'
op|'('
name|'test_utils'
op|'.'
name|'is_osx'
op|'('
op|')'
op|','
nl|'\n'
string|"'IPv6 pretty-printing broken on OSX, see bug 1409135'"
op|')'
newline|'\n'
DECL|member|test_default_access_ip
name|'def'
name|'test_default_access_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'default_access_ip_network_name'
op|'='
string|"'test1'"
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'orig_update'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
newline|'\n'
nl|'\n'
comment|'# Make sure the access_ip_* updates happen in the same DB'
nl|'\n'
comment|'# update as the set to ACTIVE.'
nl|'\n'
DECL|function|_instance_update
name|'def'
name|'_instance_update'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'vm_state'"
op|','
name|'None'
op|')'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'access_ip_v4'"
op|']'
op|','
string|"'192.168.1.100'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'access_ip_v6'"
op|']'
op|','
string|"'2001:db8:0:1::1'"
op|')'
newline|'\n'
dedent|''
name|'return'
name|'orig_update'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|','
name|'_instance_update'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
op|','
string|"'192.168.1.100'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|','
nl|'\n'
string|"'2001:db8:0:1:dcad:beff:feef:1'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_default_access_ip
dedent|''
dedent|''
name|'def'
name|'test_no_default_access_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_to_schedule_persists
dedent|''
dedent|''
name|'def'
name|'test_fail_to_schedule_persists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# check the persistence of the ERROR(scheduling) state.'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
comment|'# check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_setup_block_device_mapping_fail
dedent|''
name|'def'
name|'test_run_instance_setup_block_device_mapping_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""block device mapping failure test.\n\n        Make sure that when there is a block device mapping problem,\n        the instance goes to ERROR state, cleaning the task state\n        """'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InvalidBDM'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_prep_block_device'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'requested_networks'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|')'
newline|'\n'
comment|'# check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.compute.manager.ComputeManager._prep_block_device'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'OverQuota'
op|'('
name|'overs'
op|'='
string|"'volumes'"
op|')'
op|')'
newline|'\n'
DECL|member|test_setup_block_device_over_quota_fail
name|'def'
name|'test_setup_block_device_over_quota_fail'
op|'('
name|'self'
op|','
name|'mock_prep_block_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""block device mapping over quota failure test.\n\n        Make sure when we\'re over volume quota according to Cinder client, the\n        appropriate exception is raised and the instances to ERROR state,\n        cleaning the task state.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'requested_networks'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
comment|'# check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_prep_block_dev'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_spawn_fail
dedent|''
name|'def'
name|'test_run_instance_spawn_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""spawn failure test.\n\n        Make sure that when there is a spawning problem,\n        the instance goes to ERROR state, cleaning the task state.\n        """'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'requested_networks'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|')'
newline|'\n'
comment|'# check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_dealloc_network_instance_not_found
dedent|''
name|'def'
name|'test_run_instance_dealloc_network_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""spawn network deallocate test.\n\n        Make sure that when an instance is not found during spawn\n        that the network is deallocated\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_bails_on_missing_instance
dedent|''
name|'def'
name|'test_run_instance_bails_on_missing_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that run_instance() will quickly ignore a deleted instance'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance'
op|','
string|"'save'"
op|')'
name|'as'
name|'mock_save'
op|':'
newline|'\n'
indent|'            '
name|'mock_save'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_save'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_bails_on_deleting_instance
dedent|''
dedent|''
name|'def'
name|'test_run_instance_bails_on_deleting_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that run_instance() will quickly ignore a deleting instance'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance'
op|','
string|"'save'"
op|')'
name|'as'
name|'mock_save'
op|':'
newline|'\n'
indent|'            '
name|'mock_save'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'task_state'"
op|':'
string|"'bar'"
op|'}'
op|','
nl|'\n'
name|'actual'
op|'='
op|'{'
string|"'task_state'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_save'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_terminate_on_error_state
dedent|''
dedent|''
name|'def'
name|'test_can_terminate_on_error_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that the instance can be terminated in ERROR state.'
nl|'\n'
comment|'# check failed to schedule --> terminate'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|"# Double check it's not there for admins, either."
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate
dedent|''
name|'def'
name|'test_run_terminate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure it is possible to  run and terminate instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"Running instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"After terminating instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'admin_deleted_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
nl|'\n'
name|'read_deleted'
op|'='
string|'"only"'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'admin_deleted_context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'DELETED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_with_vol_attached
dedent|''
name|'def'
name|'test_run_terminate_with_vol_attached'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure it is possible to  run and terminate instance with volume\n        attached\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"Running instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve_volume
dedent|''
name|'def'
name|'fake_reserve_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'attach_status'"
op|':'
string|"'attached'"
op|','
nl|'\n'
string|"'attachments'"
op|':'
op|'{'
name|'instance'
op|'.'
name|'uuid'
op|':'
op|'{'
nl|'\n'
string|"'attachment_id'"
op|':'
string|"'abc123'"
nl|'\n'
op|'}'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_terminate_connection
dedent|''
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_detach
dedent|''
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'bdms'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_reserve_block_device_name
name|'def'
name|'fake_rpc_reserve_block_device_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'device'
op|','
nl|'\n'
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
op|'{'
string|"'context'"
op|':'
name|'context'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'append'
op|'('
name|'bdm'
op|')'
newline|'\n'
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
nl|'\n'
name|'fake_reserve_volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'terminate_connection'"
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'detach'"
op|','
name|'fake_detach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'reserve_block_device_name'"
op|','
nl|'\n'
name|'fake_rpc_reserve_block_device_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|','
nl|'\n'
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'bdms'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"After terminating instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_no_image
dedent|''
name|'def'
name|'test_run_terminate_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure instance started without image (from volume)\n        can be termintad without issues\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_no_network
dedent|''
name|'def'
name|'test_terminate_no_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This is as reported in LP bug 1008875'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"Running instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"After terminating instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_timestamps
dedent|''
name|'def'
name|'test_run_terminate_timestamps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure timestamps are set for launched and destroyed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|')'
newline|'\n'
name|'launch'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
op|'>'
name|'launch'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|')'
newline|'\n'
name|'terminate'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'read_deleted'
op|'='
string|"'only'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'tzinfo'
op|'='
name|'None'
op|')'
op|'<'
name|'terminate'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|'.'
name|'replace'
op|'('
nl|'\n'
name|'tzinfo'
op|'='
name|'None'
op|')'
op|'>'
name|'terminate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_deallocate_net_failure_sets_error_state
dedent|''
name|'def'
name|'test_run_terminate_deallocate_net_failure_sets_error_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"Running instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fake_deallocate_network
name|'def'
name|'_fake_deallocate_network'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|','
nl|'\n'
name|'_fake_deallocate_network'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'test'
op|'.'
name|'TestingException'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be stopped.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be started.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start_shelved_instance
dedent|''
name|'def'
name|'test_start_shelved_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure shelved instance can be started.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'deleted_image_id'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_delete
name|'def'
name|'fake_delete'
op|'('
name|'self_'
op|','
name|'ctxt'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'deleted_image_id'
op|'='
name|'image_id'
newline|'\n'
nl|'\n'
dedent|''
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'delete'"
op|','
name|'fake_delete'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'fake_id'"
op|'}'
newline|'\n'
comment|'# Adding shelved information to instance system metadata.'
nl|'\n'
name|'shelved_time'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'isoformat'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_at'"
op|']'
op|'='
name|'shelved_time'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_image_id'"
op|']'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'['
string|"'shelved_host'"
op|']'
op|'='
string|"'fake-mini'"
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
nl|'\n'
string|'"vm_state"'
op|':'
name|'vm_states'
op|'.'
name|'SHELVED'
op|'}'
op|')'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'self'
op|'.'
name|'deleted_image_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'shelved_at'"
op|','
name|'inst_obj'
op|'.'
name|'system_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'shelved_image_id'"
op|','
name|'inst_obj'
op|'.'
name|'system_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'shelved_host'"
op|','
name|'inst_obj'
op|'.'
name|'system_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop_start_no_image
dedent|''
name|'def'
name|'test_stop_start_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_uuid'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue
dedent|''
name|'def'
name|'test_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rescued and unrescued.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'rescued'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'unrescued'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rescue
name|'def'
name|'fake_rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'rescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'rescue'"
op|','
name|'fake_rescue'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_unrescue
name|'def'
name|'fake_unrescue'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'unrescue'"
op|','
nl|'\n'
name|'fake_unrescue'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'rescued'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unrescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue_notifications
dedent|''
name|'def'
name|'test_rescue_notifications'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance rescue.'
nl|'\n'
DECL|function|fake_rescue
indent|'        '
name|'def'
name|'fake_rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'rescue'"
op|','
name|'fake_rescue'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESCUING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'expected_notifications'
op|'='
op|'['
string|"'compute.instance.rescue.start'"
op|','
nl|'\n'
string|"'compute.instance.exists'"
op|','
nl|'\n'
string|"'compute.instance.rescue.end'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'m'
op|'.'
name|'event_type'
name|'for'
name|'m'
name|'in'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|']'
op|','
nl|'\n'
name|'expected_notifications'
op|')'
newline|'\n'
name|'for'
name|'n'
op|','
name|'msg'
name|'in'
name|'enumerate'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
name|'expected_notifications'
op|'['
name|'n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
dedent|''
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'rescue_image_name'"
op|','
name|'msg'
op|'.'
name|'payload'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unrescue_notifications
dedent|''
name|'def'
name|'test_unrescue_notifications'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance rescue.'
nl|'\n'
DECL|function|fake_unrescue
indent|'        '
name|'def'
name|'fake_unrescue'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'unrescue'"
op|','
nl|'\n'
name|'fake_unrescue'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNRESCUING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unrescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'expected_notifications'
op|'='
op|'['
string|"'compute.instance.unrescue.start'"
op|','
nl|'\n'
string|"'compute.instance.unrescue.end'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'m'
op|'.'
name|'event_type'
name|'for'
name|'m'
name|'in'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|']'
op|','
nl|'\n'
name|'expected_notifications'
op|')'
newline|'\n'
name|'for'
name|'n'
op|','
name|'msg'
name|'in'
name|'enumerate'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
name|'expected_notifications'
op|'['
name|'n'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue_handle_err
dedent|''
name|'def'
name|'test_rescue_handle_err'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If the driver fails to rescue, instance state should got to ERROR'
nl|'\n'
comment|'# and the exception should be converted to InstanceNotRescuable'
nl|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_rescue_image'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'rescue'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_rescue_image'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'inst_obj'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'ImageMeta'
op|'.'
name|'from_dict'
op|'('
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|'.'
name|'rescue'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'inst_obj'
op|','
op|'['
op|']'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'password'"
nl|'\n'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'RuntimeError'
op|'('
string|'"Try again later"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'expected_message'
op|'='
op|'('
string|"'Instance %s cannot be rescued: '"
nl|'\n'
string|"'Driver Error: Try again later'"
op|'%'
name|'inst_obj'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotRescuable'
op|','
name|'expected_message'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'rescue_password'
op|'='
string|"'password'"
op|','
name|'rescue_image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'inst_obj'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'image_api'
op|'.'
name|'API'
op|','
string|'"get"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|'"rescue"'
op|')'
newline|'\n'
DECL|member|test_rescue_with_image_specified
name|'def'
name|'test_rescue_with_image_specified'
op|'('
name|'self'
op|','
name|'mock_rescue'
op|','
nl|'\n'
name|'mock_image_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_ref'
op|'='
name|'uuids'
op|'.'
name|'image_instance'
newline|'\n'
name|'rescue_image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESCUING'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'elevated'
op|'.'
name|'return_value'
op|'='
name|'ctxt'
newline|'\n'
nl|'\n'
name|'mock_image_get'
op|'.'
name|'return_value'
op|'='
name|'rescue_image_meta'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'mock_context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
string|'"password"'
op|','
name|'rescue_image_ref'
op|'='
name|'image_ref'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'mock_image_get'
op|'.'
name|'assert_called_with'
op|'('
name|'ctxt'
op|','
name|'image_ref'
op|')'
newline|'\n'
name|'mock_rescue'
op|'.'
name|'assert_called_with'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'test'
op|'.'
name|'MatchType'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'image_api'
op|'.'
name|'API'
op|','
string|'"get"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|'"rescue"'
op|')'
newline|'\n'
DECL|member|test_rescue_with_base_image_when_image_not_specified
name|'def'
name|'test_rescue_with_base_image_when_image_not_specified'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_rescue'
op|','
name|'mock_image_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_ref'
op|'='
string|'"image-ref"'
newline|'\n'
name|'system_meta'
op|'='
op|'{'
string|'"image_base_image_ref"'
op|':'
name|'image_ref'
op|'}'
newline|'\n'
name|'rescue_image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESCUING'
op|','
nl|'\n'
string|'"system_metadata"'
op|':'
name|'system_meta'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_context'
op|'.'
name|'elevated'
op|'.'
name|'return_value'
op|'='
name|'ctxt'
newline|'\n'
nl|'\n'
name|'mock_image_get'
op|'.'
name|'return_value'
op|'='
name|'rescue_image_meta'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'mock_context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'rescue_password'
op|'='
string|'"password"'
op|','
nl|'\n'
name|'rescue_image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'mock_image_get'
op|'.'
name|'assert_called_with'
op|'('
name|'ctxt'
op|','
name|'image_ref'
op|')'
newline|'\n'
nl|'\n'
name|'mock_rescue'
op|'.'
name|'assert_called_with'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'test'
op|'.'
name|'MatchType'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
string|"'password'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_on
dedent|''
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be powered on.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'power_on'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_on
name|'def'
name|'fake_driver_power_on'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'network_info'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_on'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'power_on'"
op|','
nl|'\n'
name|'fake_driver_power_on'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_ON'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_on'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_off
dedent|''
name|'def'
name|'test_power_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be powered off.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'power_off'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_off
name|'def'
name|'fake_driver_power_off'
op|'('
name|'self'
op|','
name|'instance'
op|','
nl|'\n'
name|'shutdown_timeout'
op|','
name|'shutdown_attempts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_off'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'power_off'"
op|','
nl|'\n'
name|'fake_driver_power_off'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'extra'
op|'='
op|'['
string|"'system_metadata'"
op|','
string|"'metadata'"
op|']'
newline|'\n'
name|'inst_obj'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'extra'
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'POWERING_OFF'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_off'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pause
dedent|''
name|'def'
name|'test_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be paused and unpaused.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'PAUSING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.pause.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.pause.end'"
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'UNPAUSING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unpause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.unpause.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.unpause.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend
dedent|''
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure instance can be suspended and resumed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.suspend.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.suspend.end'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend_error
dedent|''
name|'def'
name|'test_suspend_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure vm_state is ERROR when suspend error occurs.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'suspend'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend_not_implemented
dedent|''
dedent|''
name|'def'
name|'test_suspend_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure expected exception is raised and the vm_state of instance'
nl|'\n'
comment|'# restore to original value if suspend is not implemented by driver'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'suspend'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'NotImplementedError'
op|'('
string|"'suspend test'"
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend_rescued
dedent|''
dedent|''
name|'def'
name|'test_suspend_rescued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure rescued instance can be suspended and resumed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resume_notifications
dedent|''
name|'def'
name|'test_resume_notifications'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure instance can be suspended and resumed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'6'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.resume.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'5'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.resume.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resume_no_old_state
dedent|''
name|'def'
name|'test_resume_no_old_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure a suspended instance with no old_vm_state is resumed to the'
nl|'\n'
comment|'# ACTIVE state'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SUSPENDED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resume_error
dedent|''
name|'def'
name|'test_resume_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure vm_state is ERROR when resume error occurs.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SUSPENDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESUMING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'resume'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_driver
dedent|''
name|'def'
name|'test_rebuild_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure virt drivers can override default rebuild'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'rebuild'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'kwargs'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|']'
op|')'
newline|'\n'
name|'called'
op|'['
string|"'rebuild'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'rebuild'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'rebuild'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.compute.manager.ComputeManager._detach_volume'"
op|')'
newline|'\n'
DECL|member|test_rebuild_driver_with_volumes
name|'def'
name|'test_rebuild_driver_with_volumes'
op|'('
name|'self'
op|','
name|'mock_detach'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"driver_volume_type": "rbd"}\''
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
nl|'\n'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure virt drivers can override default rebuild'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'rebuild'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'kwargs'
op|'['
string|"'instance'"
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILD_SPAWNING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILD_BLOCK_DEVICE_MAPPING'
op|']'
op|')'
newline|'\n'
name|'called'
op|'['
string|"'rebuild'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'func'
op|'='
name|'kwargs'
op|'['
string|"'detach_block_devices'"
op|']'
newline|'\n'
comment|'# Have the fake driver call the function to detach block devices'
nl|'\n'
name|'func'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
comment|'# Verify volumes to be detached without destroying'
nl|'\n'
name|'mock_detach'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_id'
op|','
nl|'\n'
name|'instance'
op|','
name|'destroy_bdm'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'rebuild'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'bdms'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'rebuild'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_no_image
dedent|''
name|'def'
name|'test_rebuild_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt when started with no image.'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
name|'bdms'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'False'
op|','
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_launched_at_time
dedent|''
name|'def'
name|'test_rebuild_launched_at_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'time_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'utils_fixture'
op|'.'
name|'TimeFixture'
op|'('
name|'old_time'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'time_fixture'
op|'.'
name|'advance_time_delta'
op|'('
name|'cur_time'
op|'-'
name|'old_time'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'cur_time'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_injected_files
dedent|''
name|'def'
name|'test_rebuild_with_injected_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt with injected files.'
nl|'\n'
indent|'        '
name|'injected_files'
op|'='
op|'['
nl|'\n'
op|'('
string|"b'/a/b/c'"
op|','
name|'base64'
op|'.'
name|'b64encode'
op|'('
string|"b'foobarbaz'"
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'decoded_files'
op|'='
op|'['
nl|'\n'
op|'('
string|"b'/a/b/c'"
op|','
string|"b'foobarbaz'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|_spawn
name|'def'
name|'_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|','
name|'block_device_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'decoded_files'
op|','
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'_spawn'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'injected_files'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_reboot
dedent|''
name|'def'
name|'_test_reboot'
op|'('
name|'self'
op|','
name|'soft'
op|','
nl|'\n'
name|'test_delete'
op|'='
name|'False'
op|','
name|'test_unrescue'
op|'='
name|'False'
op|','
nl|'\n'
name|'fail_reboot'
op|'='
name|'False'
op|','
name|'fail_running'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'reboot_type'
op|'='
name|'soft'
name|'and'
string|"'SOFT'"
name|'or'
string|"'HARD'"
newline|'\n'
name|'task_pending'
op|'='
op|'('
name|'soft'
name|'and'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
nl|'\n'
name|'or'
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
op|')'
newline|'\n'
name|'task_started'
op|'='
op|'('
name|'soft'
name|'and'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
nl|'\n'
name|'or'
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
op|')'
newline|'\n'
name|'expected_task'
op|'='
op|'('
name|'soft'
name|'and'
name|'task_states'
op|'.'
name|'REBOOTING'
nl|'\n'
name|'or'
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|')'
newline|'\n'
name|'expected_tasks'
op|'='
op|'('
name|'soft'
name|'and'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|')'
nl|'\n'
name|'or'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING_HARD'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED_HARD'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# This is a true unit test, so we don't need the network stubs."
nl|'\n'
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_notify_about_instance_usage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update_and_get_original'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'reboot'"
op|')'
newline|'\n'
nl|'\n'
comment|"# FIXME(comstud): I don't feel like the context needs to"
nl|'\n'
comment|'# be elevated at all.  Hopefully remove elevated from'
nl|'\n'
comment|'# reboot_instance and remove the stub here in a future patch.'
nl|'\n'
comment|'# econtext would just become self.context below then.'
nl|'\n'
name|'econtext'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
nl|'\n'
op|'**'
name|'dict'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'db_instance'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'expected_task'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
nl|'\n'
name|'db_instance'
op|')'
newline|'\n'
nl|'\n'
name|'updated_dbinstance1'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
nl|'\n'
op|'**'
name|'dict'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'db_instance_1'
op|','
nl|'\n'
name|'power_state'
op|'='
number|'10003'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'expected_task'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'updated_dbinstance2'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
nl|'\n'
op|'**'
name|'dict'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'db_instance_2'
op|','
nl|'\n'
name|'power_state'
op|'='
number|'10003'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'expected_task'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'test_unrescue'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
newline|'\n'
dedent|''
name|'instance'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_nw_model'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_block_dev_info'
op|'='
string|"'fake_block_dev_info'"
newline|'\n'
name|'fake_power_state1'
op|'='
number|'10001'
newline|'\n'
name|'fake_power_state2'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
name|'fake_power_state3'
op|'='
number|'10002'
newline|'\n'
nl|'\n'
comment|'# Beginning of calls we expect.'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'econtext'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'econtext'
op|','
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_block_dev_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'econtext'
op|','
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_nw_model'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
string|"'reboot.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_power_state1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
name|'econtext'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_pending'
op|','
nl|'\n'
string|"'expected_task_state'"
op|':'
name|'expected_tasks'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'fake_power_state1'
op|'}'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'system_metadata'"
op|','
nl|'\n'
string|"'extra'"
op|','
nl|'\n'
string|"'extra.flavor'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'None'
op|','
nl|'\n'
name|'updated_dbinstance1'
op|')'
op|')'
newline|'\n'
name|'expected_nw_info'
op|'='
name|'fake_nw_model'
newline|'\n'
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'updated_dbinstance1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_started'
op|','
nl|'\n'
string|"'expected_task_state'"
op|':'
name|'task_pending'
op|'}'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'system_metadata'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'None'
op|','
nl|'\n'
name|'updated_dbinstance1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Annoying.  driver.reboot is wrapped in a try/except, and'
nl|'\n'
comment|"# doesn't re-raise.  It eats exception generated by mox if"
nl|'\n'
comment|'# this is called with the wrong args, so we have to hack'
nl|'\n'
comment|'# around it.'
nl|'\n'
name|'reboot_call_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'expected_call_info'
op|'='
op|'{'
nl|'\n'
string|"'args'"
op|':'
op|'('
name|'econtext'
op|','
name|'instance'
op|','
name|'expected_nw_info'
op|','
nl|'\n'
name|'reboot_type'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
string|"'block_device_info'"
op|':'
name|'fake_block_dev_info'
op|'}'
op|'}'
newline|'\n'
name|'fault'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
string|"'instance-0000'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_reboot
name|'def'
name|'fake_reboot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reboot_call_info'
op|'['
string|"'args'"
op|']'
op|'='
name|'args'
newline|'\n'
name|'reboot_call_info'
op|'['
string|"'kwargs'"
op|']'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
comment|'# NOTE(sirp): Since `bad_volumes_callback` is a function defined'
nl|'\n'
comment|"# within `reboot_instance`, we don't have access to its value and"
nl|'\n'
comment|"# can't stub it out, thus we skip that comparison."
nl|'\n'
name|'kwargs'
op|'.'
name|'pop'
op|'('
string|"'bad_volumes_callback'"
op|')'
newline|'\n'
name|'if'
name|'fail_reboot'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'fault'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'reboot'"
op|','
name|'fake_reboot'
op|')'
newline|'\n'
nl|'\n'
comment|'# Power state should be updated again'
nl|'\n'
name|'if'
name|'not'
name|'fail_reboot'
name|'or'
name|'fail_running'
op|':'
newline|'\n'
indent|'            '
name|'new_power_state'
op|'='
name|'fake_power_state2'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_power_state2'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'new_power_state'
op|'='
name|'fake_power_state3'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_power_state3'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'test_delete'
op|':'
newline|'\n'
indent|'            '
name|'fault'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'econtext'
op|','
name|'updated_dbinstance1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'power_state'"
op|':'
name|'new_power_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|'}'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'fault'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
string|"'reboot.end'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fail_reboot'
name|'and'
name|'not'
name|'fail_running'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'econtext'
op|','
name|'updated_dbinstance1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|'}'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'fault'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
nl|'\n'
name|'econtext'
op|','
name|'updated_dbinstance1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'power_state'"
op|':'
name|'new_power_state'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|'}'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|','
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'None'
op|','
name|'updated_dbinstance2'
op|')'
op|')'
newline|'\n'
name|'if'
name|'fail_running'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'econtext'
op|','
name|'instance'
op|','
nl|'\n'
string|"'reboot.error'"
op|','
name|'fault'
op|'='
name|'fault'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
string|"'reboot.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'fail_reboot'
name|'or'
name|'fail_running'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'reboot_type'
op|'='
name|'reboot_type'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'reboot_type'
op|'='
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_call_info'
op|','
name|'reboot_call_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft
dedent|''
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft_and_delete
dedent|''
name|'def'
name|'test_reboot_soft_and_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft_and_rescued
dedent|''
name|'def'
name|'test_reboot_soft_and_rescued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft_and_delete_and_rescued
dedent|''
name|'def'
name|'test_reboot_soft_and_delete_and_rescued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|','
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard_and_delete
dedent|''
name|'def'
name|'test_reboot_hard_and_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard_and_rescued
dedent|''
name|'def'
name|'test_reboot_hard_and_rescued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard_and_delete_and_rescued
dedent|''
name|'def'
name|'test_reboot_hard_and_delete_and_rescued'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'jsonutils'
op|','
string|"'to_primitive'"
op|')'
newline|'\n'
DECL|member|test_reboot_fail
name|'def'
name|'test_reboot_fail'
op|'('
name|'self'
op|','
name|'mock_to_primitive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'fail_reboot'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_fail_running
dedent|''
name|'def'
name|'test_reboot_fail_running'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'fail_reboot'
op|'='
name|'True'
op|','
nl|'\n'
name|'fail_running'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_block_device_info_source_image
dedent|''
name|'def'
name|'test_get_instance_block_device_info_source_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"driver_volume_type": "rbd"}\''
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
nl|'\n'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
op|'('
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'bdms'
op|')'
nl|'\n'
op|')'
name|'as'
name|'mock_get_by_instance'
op|':'
newline|'\n'
indent|'            '
name|'block_device_info'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'swap'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'connection_info'"
op|':'
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'rbd'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_get_by_instance'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device_info'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_block_device_info_passed_bdms
dedent|''
dedent|''
name|'def'
name|'test_get_instance_block_device_info_passed_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdd'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"driver_volume_type": "rbd"}\''
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'with'
op|'('
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
op|')'
name|'as'
name|'mock_get_by_instance'
op|':'
newline|'\n'
indent|'            '
name|'block_device_info'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
op|','
name|'bdms'
op|'='
name|'bdms'
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'swap'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'connection_info'"
op|':'
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'rbd'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'mount_device'"
op|':'
string|"'/dev/vdd'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_get_by_instance'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device_info'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_block_device_info_swap_and_ephemerals
dedent|''
dedent|''
name|'def'
name|'test_get_instance_block_device_info_swap_and_ephemerals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ephemeral0'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
string|"'virtio'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'ephemeral1'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
string|"'virtio'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdd'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'device_type'"
op|':'
string|"'disk'"
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
string|"'virtio'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'swap'
op|','
name|'ephemeral0'
op|','
name|'ephemeral1'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|','
name|'return_value'
op|'='
name|'bdms'
op|')'
nl|'\n'
op|')'
name|'as'
name|'mock_get_by_instance_uuid'
op|':'
newline|'\n'
indent|'            '
name|'expected_block_device_info'
op|'='
op|'{'
nl|'\n'
string|"'swap'"
op|':'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdd'"
op|','
string|"'swap_size'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
op|'['
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
string|"'num'"
op|':'
number|'0'
op|','
string|"'size'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
string|"'num'"
op|':'
number|'1'
op|','
string|"'size'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
string|"'ephemeral1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get_by_instance_uuid'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_block_device_info'
op|','
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can inject network info.'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'inject'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_inject_network
name|'def'
name|'fake_driver_inject_network'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'inject'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'inject_network_info'"
op|','
nl|'\n'
name|'fake_driver_inject_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'inject'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can reset networking on an instance.'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'count'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_reset_network
name|'def'
name|'fake_driver_reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'count'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'reset_network'"
op|','
nl|'\n'
name|'fake_driver_reset_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'count'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_snapshotting_instance
dedent|''
name|'def'
name|'_get_snapshotting_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be snapshotted.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT_PENDING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot
dedent|''
name|'def'
name|'test_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_no_image
dedent|''
name|'def'
name|'test_snapshot_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'image_ref'
op|'='
string|"''"
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_snapshot_fails
dedent|''
name|'def'
name|'_test_snapshot_fails'
op|'('
name|'self'
op|','
name|'raise_during_cleanup'
op|','
name|'method'
op|','
nl|'\n'
name|'expected_state'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
DECL|function|fake_snapshot
indent|'        '
name|'def'
name|'fake_snapshot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fake_image_delete_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_delete
name|'def'
name|'fake_delete'
op|'('
name|'self_'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fake_image_delete_called'
op|'='
name|'True'
newline|'\n'
name|'if'
name|'raise_during_cleanup'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'snapshot'"
op|','
name|'fake_snapshot'
op|')'
newline|'\n'
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'delete'"
op|','
name|'fake_delete'
op|')'
newline|'\n'
nl|'\n'
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
name|'if'
name|'method'
op|'=='
string|"'snapshot'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'backup_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
name|'backup_type'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'rotation'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_state'
op|','
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
string|"'_rotate_backups'"
op|')'
newline|'\n'
DECL|member|test_backup_fails
name|'def'
name|'test_backup_fails'
op|'('
name|'self'
op|','
name|'mock_rotate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_snapshot_fails'
op|'('
name|'False'
op|','
string|"'backup'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
string|"'_rotate_backups'"
op|')'
newline|'\n'
DECL|member|test_backup_fails_cleanup_ignores_exception
name|'def'
name|'test_backup_fails_cleanup_ignores_exception'
op|'('
name|'self'
op|','
name|'mock_rotate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_snapshot_fails'
op|'('
name|'True'
op|','
string|"'backup'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
string|"'_rotate_backups'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_do_snapshot_instance'"
op|')'
newline|'\n'
DECL|member|test_backup_fails_rotate_backup
name|'def'
name|'test_backup_fails_rotate_backup'
op|'('
name|'self'
op|','
name|'mock_snap'
op|','
name|'mock_rotate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_rotate'
op|'.'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_fails'
op|'('
name|'True'
op|','
string|"'backup'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails
dedent|''
name|'def'
name|'test_snapshot_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_snapshot_fails'
op|'('
name|'False'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails_cleanup_ignores_exception
dedent|''
name|'def'
name|'test_snapshot_fails_cleanup_ignores_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_snapshot_fails'
op|'('
name|'True'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_snapshot_deletes_image_on_failure
dedent|''
name|'def'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
name|'self'
op|','
name|'status'
op|','
name|'exc'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fake_image_delete_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'self_'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fakesnap'"
op|','
name|'image_id'
op|')'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'id'"
op|':'
name|'image_id'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'status'
op|'}'
newline|'\n'
name|'return'
name|'image'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_delete
name|'def'
name|'fake_delete'
op|'('
name|'self_'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fake_image_delete_called'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fakesnap'"
op|','
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'delete'"
op|','
name|'fake_delete'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_snapshot
name|'def'
name|'fake_snapshot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'snapshot'"
op|','
name|'fake_snapshot'
op|')'
newline|'\n'
nl|'\n'
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails_with_glance_error
dedent|''
name|'def'
name|'test_snapshot_fails_with_glance_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_not_found'
op|'='
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
string|"'fakesnap'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
string|"'error'"
op|','
name|'image_not_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails_with_task_state_error
dedent|''
name|'def'
name|'test_snapshot_fails_with_task_state_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'deleting_state_error'
op|'='
name|'exception'
op|'.'
name|'UnexpectedDeletingTaskStateError'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuids'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
op|','
nl|'\n'
name|'actual'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'DELETING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
nl|'\n'
string|"'error'"
op|','
name|'deleting_state_error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
nl|'\n'
string|"'active'"
op|','
name|'deleting_state_error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails_with_instance_not_found
dedent|''
name|'def'
name|'test_snapshot_fails_with_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_not_found'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
string|"'uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
nl|'\n'
string|"'error'"
op|','
name|'instance_not_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_snapshot_deletes_image_on_failure'
op|'('
nl|'\n'
string|"'active'"
op|','
name|'instance_not_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'fake_image_delete_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_handles_cases_when_instance_is_deleted
dedent|''
name|'def'
name|'test_snapshot_handles_cases_when_instance_is_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
name|'inst_obj'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
newline|'\n'
name|'inst_obj'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_handles_cases_when_instance_is_not_found
dedent|''
name|'def'
name|'test_snapshot_handles_cases_when_instance_is_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_get_snapshotting_instance'
op|'('
op|')'
newline|'\n'
name|'inst_obj2'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_obj'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'inst_obj2'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image_id'
op|'='
string|"'fakesnap'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_state
dedent|''
name|'def'
name|'_assert_state'
op|'('
name|'self'
op|','
name|'state_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert state of VM is equal to state passed as parameter."""'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'vm_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'task_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'power_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'power_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get console output from instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|"b'FAKE CONSOLE OUTPUT\\nANOTHER\\nLAST LINE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_bytes
dedent|''
name|'def'
name|'test_console_output_bytes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get console output from instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'get_console_output'"
op|')'
name|'as'
name|'mock_console_output'
op|':'
newline|'\n'
indent|'            '
name|'mock_console_output'
op|'.'
name|'return_value'
op|'='
string|"b'Hello.'"
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'tail_length'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|"b'Hello.'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_tail
dedent|''
dedent|''
name|'def'
name|'test_console_output_tail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get console output from instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'tail_length'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|"b'ANOTHER\\nLAST LINE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_not_implemented
dedent|''
name|'def'
name|'test_console_output_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_not_implemented
indent|'        '
name|'def'
name|'fake_not_implemented'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_console_output'"
op|','
nl|'\n'
name|'fake_not_implemented'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_instance_not_found
dedent|''
name|'def'
name|'test_console_output_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_not_found
indent|'        '
name|'def'
name|'fake_not_found'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
string|"'fake-instance'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_console_output'"
op|','
nl|'\n'
name|'fake_not_found'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_novnc_vnc_console
dedent|''
name|'def'
name|'test_novnc_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try with the full instance'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_console_port_vnc
dedent|''
name|'def'
name|'test_validate_console_port_vnc'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleVNC'
op|'('
name|'host'
op|'='
string|'"fake_host"'
op|','
name|'port'
op|'='
number|'5900'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_vnc_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'validate_console_port'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'port'
op|'='
number|'5900'
op|','
nl|'\n'
name|'console_type'
op|'='
string|'"novnc"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_console_port_spice
dedent|''
name|'def'
name|'test_validate_console_port_spice'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleSpice'
op|'('
name|'host'
op|'='
string|'"fake_host"'
op|','
name|'port'
op|'='
number|'5900'
op|','
name|'tlsPort'
op|'='
number|'88'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_spice_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'validate_console_port'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'port'
op|'='
number|'5900'
op|','
nl|'\n'
name|'console_type'
op|'='
string|'"spice-html5"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_console_port_rdp
dedent|''
name|'def'
name|'test_validate_console_port_rdp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleRDP'
op|'('
name|'host'
op|'='
string|'"fake_host"'
op|','
name|'port'
op|'='
number|'5900'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_rdp_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'validate_console_port'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'port'
op|'='
number|'5900'
op|','
nl|'\n'
name|'console_type'
op|'='
string|'"rdp-html5"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_console_port_mks
dedent|''
name|'def'
name|'test_validate_console_port_mks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'mks'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_mks_console'"
op|')'
name|'as'
name|'mock_getmks'
op|':'
newline|'\n'
indent|'            '
name|'mock_getmks'
op|'.'
name|'return_value'
op|'='
name|'ctype'
op|'.'
name|'ConsoleMKS'
op|'('
name|'host'
op|'='
string|'"fake_host"'
op|','
nl|'\n'
name|'port'
op|'='
number|'5900'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'validate_console_port'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'port'
op|'='
number|'5900'
op|','
name|'console_type'
op|'='
string|'"webmks"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_console_port_wrong_port
dedent|''
dedent|''
name|'def'
name|'test_validate_console_port_wrong_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ctype'
op|'.'
name|'ConsoleSpice'
op|'('
name|'host'
op|'='
string|'"fake_host"'
op|','
name|'port'
op|'='
number|'5900'
op|','
name|'tlsPort'
op|'='
number|'88'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_vnc_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'validate_console_port'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'port'
op|'='
string|'"wrongport"'
op|','
nl|'\n'
name|'console_type'
op|'='
string|'"spice-html5"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xvpvnc_vnc_console
dedent|''
name|'def'
name|'test_xvpvnc_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'xvpvnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'console'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_vnc_console_type
dedent|''
name|'def'
name|'test_invalid_vnc_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error if console type is an unrecognised string.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_vnc_console_type
dedent|''
name|'def'
name|'test_missing_vnc_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error is console type is None.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vnc_console_not_implemented
dedent|''
name|'def'
name|'test_get_vnc_console_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_vnc_console'"
op|','
nl|'\n'
name|'fake_not_implemented'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spicehtml5_spice_console
dedent|''
name|'def'
name|'test_spicehtml5_spice_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a spice console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try with the full instance'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_spice_console_type
dedent|''
name|'def'
name|'test_invalid_spice_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error if console type is an unrecognised string'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_spice_console_not_implemented
dedent|''
name|'def'
name|'test_get_spice_console_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_spice_console'"
op|','
nl|'\n'
name|'fake_not_implemented'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_spice_console_type
dedent|''
name|'def'
name|'test_missing_spice_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error is console type is None'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rdphtml5_rdp_console
dedent|''
name|'def'
name|'test_rdphtml5_rdp_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a rdp console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try with the full instance'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'rdp-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_rdp_console_type
dedent|''
name|'def'
name|'test_invalid_rdp_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error if console type is an unrecognised string'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_rdp_console_type
dedent|''
name|'def'
name|'test_missing_rdp_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error is console type is None'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'messaging'
op|'.'
name|'ExpectedException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console_instance_not_ready
dedent|''
name|'def'
name|'test_vnc_console_instance_not_ready'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_vnc_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spice_console_instance_not_ready
dedent|''
name|'def'
name|'test_spice_console_instance_not_ready'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_spice_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rdp_console_instance_not_ready
dedent|''
name|'def'
name|'test_rdp_console_instance_not_ready'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_console
name|'def'
name|'fake_driver_get_console'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"get_rdp_console"'
op|','
nl|'\n'
name|'fake_driver_get_console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'rdp-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console_disabled
dedent|''
name|'def'
name|'test_vnc_console_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spice_console_disabled
dedent|''
name|'def'
name|'test_spice_console_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rdp_console_disabled
dedent|''
name|'def'
name|'test_rdp_console_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'rdp'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'ExceptionHelper'
op|'('
name|'self'
op|'.'
name|'compute'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_rdp_console'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'rdp-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diagnostics
dedent|''
name|'def'
name|'test_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get diagnostics for an instance.'
nl|'\n'
indent|'        '
name|'expected_diagnostic'
op|'='
op|'{'
string|"'cpu0_time'"
op|':'
number|'17300000000'
op|','
nl|'\n'
string|"'memory'"
op|':'
number|'524288'
op|','
nl|'\n'
string|"'vda_errors'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'vda_read'"
op|':'
number|'262144'
op|','
nl|'\n'
string|"'vda_read_req'"
op|':'
number|'112'
op|','
nl|'\n'
string|"'vda_write'"
op|':'
number|'5778432'
op|','
nl|'\n'
string|"'vda_write_req'"
op|':'
number|'488'
op|','
nl|'\n'
string|"'vnet1_rx'"
op|':'
number|'2070139'
op|','
nl|'\n'
string|"'vnet1_rx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_packets'"
op|':'
number|'26701'
op|','
nl|'\n'
string|"'vnet1_tx'"
op|':'
number|'140208'
op|','
nl|'\n'
string|"'vnet1_tx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_packets'"
op|':'
number|'662'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'diagnostics'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diagnostics'
op|','
name|'expected_diagnostic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_diagnostics
dedent|''
name|'def'
name|'test_instance_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get diagnostics for an instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'diagnostics'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'config_drive'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'cpu_details'"
op|':'
op|'['
op|'{'
string|"'time'"
op|':'
number|'17300000000'
op|'}'
op|']'
op|','
nl|'\n'
string|"'disk_details'"
op|':'
op|'['
op|'{'
string|"'errors_count'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'fake-disk-id'"
op|','
nl|'\n'
string|"'read_bytes'"
op|':'
number|'262144'
op|','
nl|'\n'
string|"'read_requests'"
op|':'
number|'112'
op|','
nl|'\n'
string|"'write_bytes'"
op|':'
number|'5778432'
op|','
nl|'\n'
string|"'write_requests'"
op|':'
number|'488'
op|'}'
op|']'
op|','
nl|'\n'
string|"'driver'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'hypervisor_os'"
op|':'
string|"'fake-os'"
op|','
nl|'\n'
string|"'memory_details'"
op|':'
op|'{'
string|"'maximum'"
op|':'
number|'524288'
op|','
string|"'used'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
string|"'nic_details'"
op|':'
op|'['
op|'{'
string|"'mac_address'"
op|':'
string|"'01:23:45:67:89:ab'"
op|','
nl|'\n'
string|"'rx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rx_octets'"
op|':'
number|'2070139'
op|','
nl|'\n'
string|"'rx_packets'"
op|':'
number|'26701'
op|','
nl|'\n'
string|"'tx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'tx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'tx_octets'"
op|':'
number|'140208'
op|','
nl|'\n'
string|"'tx_packets'"
op|':'
number|'662'
op|'}'
op|']'
op|','
nl|'\n'
string|"'state'"
op|':'
string|"'running'"
op|','
nl|'\n'
string|"'uptime'"
op|':'
number|'46664'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'1.0'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'diagnostics'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_add_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'add_fixed_ip_to_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'network_id'
op|'='
number|'1'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_remove_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'remove_fixed_ip_from_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_usage_notification
dedent|''
name|'def'
name|'test_run_instance_usage_notification'
op|'('
name|'self'
op|','
name|'request_spec'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Ensure run instance generates appropriate usage notification.'
nl|'\n'
indent|'        '
name|'request_spec'
op|'='
name|'request_spec'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'expected_image_name'
op|'='
name|'request_spec'
op|'.'
name|'get'
op|'('
string|"'image'"
op|','
op|'{'
op|'}'
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
string|"'name'"
op|':'
nl|'\n'
name|'expected_image_name'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
comment|'# The last event is the one with the sugar in it.'
nl|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.end'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'state'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'fixed_ips'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Success'"
op|','
name|'payload'
op|'['
string|"'message'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_image_usage_notification
dedent|''
name|'def'
name|'test_run_instance_image_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request_spec'
op|'='
op|'{'
string|"'image'"
op|':'
op|'{'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
string|"'key'"
op|':'
string|"'value'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'test_run_instance_usage_notification'
op|'('
name|'request_spec'
op|'='
name|'request_spec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_usage_notification_volume_meta
dedent|''
name|'def'
name|'test_run_instance_usage_notification_volume_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Volume's image metadata won't contain the image name"
nl|'\n'
indent|'        '
name|'request_spec'
op|'='
op|'{'
string|"'image'"
op|':'
op|'{'
string|"'key'"
op|':'
string|"'value'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'test_run_instance_usage_notification'
op|'('
name|'request_spec'
op|'='
name|'request_spec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_end_notification_on_abort
dedent|''
name|'def'
name|'test_run_instance_end_notification_on_abort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that an error notif is sent if the build is aborted'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|build_inst_abort
name|'def'
name|'build_inst_abort'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'reason'
op|'='
string|'"already deleted"'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
nl|'\n'
name|'build_inst_abort'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|'>='
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ERROR'"
op|','
name|'msg'
op|'.'
name|'priority'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'message'
op|'='
name|'payload'
op|'['
string|"'message'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
op|'-'
number|'1'
op|','
name|'message'
op|'.'
name|'find'
op|'('
string|'"already deleted"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_error_notification_on_reschedule
dedent|''
name|'def'
name|'test_run_instance_error_notification_on_reschedule'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that error notif is sent if the build got rescheduled'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|build_inst_fail
name|'def'
name|'build_inst_fail'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'RescheduledException'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'reason'
op|'='
string|'"something bad happened"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
nl|'\n'
name|'build_inst_fail'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|'>='
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ERROR'"
op|','
name|'msg'
op|'.'
name|'priority'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'message'
op|'='
name|'payload'
op|'['
string|"'message'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
op|'-'
number|'1'
op|','
name|'message'
op|'.'
name|'find'
op|'('
string|'"something bad happened"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_error_notification_on_failure
dedent|''
name|'def'
name|'test_run_instance_error_notification_on_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that error notif is sent if build fails hard'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|build_inst_fail
name|'def'
name|'build_inst_fail'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"i\'m dying"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
nl|'\n'
name|'build_inst_fail'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|'>='
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.error'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ERROR'"
op|','
name|'msg'
op|'.'
name|'priority'
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'message'
op|'='
name|'payload'
op|'['
string|"'message'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
op|'-'
number|'1'
op|','
name|'message'
op|'.'
name|'find'
op|'('
string|'"i\'m dying"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_usage_notification
dedent|''
name|'def'
name|'test_terminate_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure terminate_instance generates correct usage notification.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
nl|'\n'
name|'time_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'utils_fixture'
op|'.'
name|'TimeFixture'
op|'('
name|'old_time'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'time_fixture'
op|'.'
name|'advance_time_delta'
op|'('
name|'cur_time'
op|'-'
name|'old_time'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.delete.start'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg1'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.shutdown.start'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg1'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.shutdown.end'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg1'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.delete.end'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg1'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'terminated_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'deleted_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'terminated_at'"
op|']'
op|','
name|'utils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'utils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_queries_macs
dedent|''
name|'def'
name|'test_run_instance_queries_macs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# run_instance should ask the driver for node mac addresses and pass'
nl|'\n'
comment|'# that to the network_api in use.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'01:23:45:67:89:ab'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'False'
op|','
name|'macs'
op|'='
name|'macs'
op|','
nl|'\n'
name|'security_groups'
op|'='
op|'['
op|']'
op|','
name|'dhcp_options'
op|'='
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|','
number|'1'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"macs_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance_obj'
op|'.'
name|'Instance'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'macs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_server_group
dedent|''
name|'def'
name|'_create_server_group'
op|'('
name|'self'
op|','
name|'policies'
op|','
name|'instance_host'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'group_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
name|'dict'
op|'('
name|'host'
op|'='
name|'instance_host'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'instance_group'
op|'='
name|'objects'
op|'.'
name|'InstanceGroup'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance_group'
op|'.'
name|'user_id'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'instance_group'
op|'.'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'instance_group'
op|'.'
name|'name'
op|'='
string|"'messi'"
newline|'\n'
name|'instance_group'
op|'.'
name|'uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_group'
op|'.'
name|'members'
op|'='
op|'['
name|'group_instance'
op|'.'
name|'uuid'
op|']'
newline|'\n'
name|'instance_group'
op|'.'
name|'policies'
op|'='
name|'policies'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance_group'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_group'
op|'.'
name|'name'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_group'
op|'.'
name|'members'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'members'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_group'
op|'.'
name|'policies'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'policies'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_group'
op|'.'
name|'project_id'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_group'
op|'.'
name|'uuid'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'servergroup.create'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
name|'return'
name|'instance_group'
newline|'\n'
nl|'\n'
DECL|member|test_instance_set_to_error_on_uncaught_exception
dedent|''
name|'def'
name|'test_instance_set_to_error_on_uncaught_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that instance is set to error state when exception is raised.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"deallocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'False'
op|','
name|'macs'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_groups'
op|'='
op|'['
op|']'
op|','
name|'dhcp_options'
op|'='
name|'None'
nl|'\n'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'messaging'
op|'.'
name|'RemoteError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'deallocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_keeps_net_on_power_off_fail
dedent|''
name|'def'
name|'test_delete_instance_keeps_net_on_power_off_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'exp'
op|'='
name|'exception'
op|'.'
name|'InstancePowerOffFailure'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exp'
op|')'
newline|'\n'
comment|'# mox will detect if _deallocate_network gets called unexpectedly'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstancePowerOffFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_loses_net_on_other_fail
dedent|''
name|'def'
name|'test_delete_instance_loses_net_on_other_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'exp'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_deletes_console_auth_tokens
dedent|''
name|'def'
name|'test_delete_instance_deletes_console_auth_tokens'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'tokens_deleted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_delete_tokens
name|'def'
name|'fake_delete_tokens'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tokens_deleted'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'cauth_rpcapi'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'consoleauth_rpcapi'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cauth_rpcapi'
op|','
string|"'delete_tokens_for_instance'"
op|','
nl|'\n'
name|'fake_delete_tokens'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'tokens_deleted'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_deletes_console_auth_tokens_cells
dedent|''
name|'def'
name|'test_delete_instance_deletes_console_auth_tokens_cells'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'vnc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enable'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'tokens_deleted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_delete_tokens
name|'def'
name|'fake_delete_tokens'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'tokens_deleted'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'cells_rpcapi'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'cells_rpcapi'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cells_rpcapi'
op|','
string|"'consoleauth_delete_tokens'"
op|','
nl|'\n'
name|'fake_delete_tokens'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'tokens_deleted'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_changes_power_state
dedent|''
name|'def'
name|'test_delete_instance_changes_power_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that the power state is NOSTATE after deleting an instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
name|'instance'
op|'.'
name|'power_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_termination_exception_sets_error
dedent|''
name|'def'
name|'test_instance_termination_exception_sets_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that we handle InstanceTerminationFailure\n        which is propagated up from the underlying driver.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_delete_instance
name|'def'
name|'fake_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_delete_instance'"
op|','
nl|'\n'
name|'fake_delete_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_network_is_deallocated_on_spawn_failure
dedent|''
name|'def'
name|'test_network_is_deallocated_on_spawn_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# When a spawn fails the network must be deallocated.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_prep_block_device"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_prep_block_device'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'messaging'
op|'.'
name|'RemoteError'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(comstud): This test is such crap.  This is testing'
nl|'\n'
comment|'# compute API lock functionality in a test class for the compute'
nl|'\n'
comment|'# manager by running an instance.  Hello?  We should just have'
nl|'\n'
comment|'# unit tests in test_compute_api that test the check_instance_lock'
nl|'\n'
comment|'# decorator and make sure that appropriate compute_api methods'
nl|'\n'
comment|'# have the decorator.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'non_admin_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check_task_state
name|'def'
name|'check_task_state'
op|'('
name|'task_state'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# should fail with locked nonadmin context'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceIsLocked'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'non_admin_context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# should fail with invalid task state'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOTING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'non_admin_context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
nl|'\n'
comment|'# should succeed with admin context'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_locked_by
dedent|''
name|'def'
name|'_check_locked_by'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|','
name|'locked_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'locked'"
op|']'
op|','
name|'locked_by'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'locked_by'"
op|']'
op|','
name|'locked_by'
op|')'
newline|'\n'
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|member|test_override_owner_lock
dedent|''
name|'def'
name|'test_override_owner_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(comstud): This test is such crap.  This is testing'
nl|'\n'
comment|'# compute API lock functionality in a test class for the compute'
nl|'\n'
comment|'# manager by running an instance.  Hello?  We should just have'
nl|'\n'
comment|'# unit tests in test_compute_api that test the check_instance_lock'
nl|'\n'
comment|'# decorator and make sure that appropriate compute_api methods'
nl|'\n'
comment|'# have the decorator.'
nl|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'admin-user'"
op|','
nl|'\n'
string|"'admin-project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that an admin can override the owner lock'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_locked_by'
op|'('
name|'instance_uuid'
op|','
string|"'owner'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_locked_by'
op|'('
name|'instance_uuid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_upgrade_owner_lock
dedent|''
name|'def'
name|'test_upgrade_owner_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# FIXME(comstud): This test is such crap.  This is testing'
nl|'\n'
comment|'# compute API lock functionality in a test class for the compute'
nl|'\n'
comment|'# manager by running an instance.  Hello?  We should just have'
nl|'\n'
comment|'# unit tests in test_compute_api that test the check_instance_lock'
nl|'\n'
comment|'# decorator and make sure that appropriate compute_api methods'
nl|'\n'
comment|'# have the decorator.'
nl|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'admin-user'"
op|','
nl|'\n'
string|"'admin-project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that an admin can upgrade the lock and that'
nl|'\n'
comment|'# the owner can no longer unlock'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_locked_by'
op|'('
name|'instance_uuid'
op|','
string|"'admin'"
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_locked_by'
op|'('
name|'instance_uuid'
op|','
string|"'admin'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_locked_by'
op|'('
name|'instance_uuid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_state_revert
dedent|''
name|'def'
name|'_test_state_revert'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'operation'
op|','
name|'pre_task_state'
op|','
nl|'\n'
name|'kwargs'
op|'='
name|'None'
op|','
name|'vm_state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'kwargs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
comment|'# The API would have set task_state, so do that here to test'
nl|'\n'
comment|'# that the state gets reverted on failure'
nl|'\n'
dedent|''
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'pre_task_state'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'orig_elevated'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
newline|'\n'
name|'orig_notify'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
newline|'\n'
nl|'\n'
DECL|function|_get_an_exception
name|'def'
name|'_get_an_exception'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|','
name|'_get_an_exception'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_notify_about_instance_usage'"
op|','
name|'_get_an_exception'
op|')'
newline|'\n'
nl|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
name|'operation'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'func'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'# self.context.elevated() is called in tearDown()'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|','
name|'orig_elevated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_notify_about_instance_usage'"
op|','
name|'orig_notify'
op|')'
newline|'\n'
nl|'\n'
comment|"# Fetch the instance's task_state and make sure it reverted to None."
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'vm_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_state'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|'"task_state"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_state_revert
dedent|''
name|'def'
name|'test_state_revert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure that task_state is reverted after a failed operation.'
nl|'\n'
indent|'        '
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
string|"'b48316c5-71e8-45e4-9884-6c78055b9b13'"
newline|'\n'
name|'migration'
op|'.'
name|'new_instance_type_id'
op|'='
string|"'1'"
newline|'\n'
name|'instance_type'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'actions'
op|'='
op|'['
nl|'\n'
op|'('
string|'"reboot_instance"'
op|','
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
op|'{'
string|"'block_device_info'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'reboot_type'"
op|':'
string|"'SOFT'"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"stop_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
nl|'\n'
op|'{'
string|"'clean_shutdown'"
op|':'
name|'True'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"start_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
op|','
nl|'\n'
op|'('
string|'"terminate_instance"'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|','
nl|'\n'
op|'{'
string|"'bdms'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'reservations'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
op|','
nl|'\n'
op|'('
string|'"soft_delete_instance"'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|','
nl|'\n'
op|'{'
string|"'reservations'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"restore_instance"'
op|','
name|'task_states'
op|'.'
name|'RESTORING'
op|')'
op|','
nl|'\n'
op|'('
string|'"rebuild_instance"'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|','
nl|'\n'
op|'{'
string|"'orig_image_ref'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'injected_files'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'new_pass'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'orig_sys_metadata'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'bdms'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'recreate'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'on_shared_storage'"
op|':'
name|'False'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"set_admin_password"'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|','
nl|'\n'
op|'{'
string|"'new_pass'"
op|':'
name|'None'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"rescue_instance"'
op|','
name|'task_states'
op|'.'
name|'RESCUING'
op|','
nl|'\n'
op|'{'
string|"'rescue_password'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'rescue_image_ref'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'clean_shutdown'"
op|':'
name|'True'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"unrescue_instance"'
op|','
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
op|','
nl|'\n'
op|'('
string|'"revert_resize"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|','
nl|'\n'
op|'{'
string|"'migration'"
op|':'
name|'migration'
op|','
nl|'\n'
string|"'reservations'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"prep_resize"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
op|'{'
string|"'image'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type'
op|','
nl|'\n'
string|"'reservations'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'request_spec'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'filter_properties'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'node'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'clean_shutdown'"
op|':'
name|'True'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"resize_instance"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
op|'{'
string|"'migration'"
op|':'
name|'migration'
op|','
nl|'\n'
string|"'image'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'reservations'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'clean_shutdown'"
op|':'
name|'True'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"pause_instance"'
op|','
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
op|','
nl|'\n'
op|'('
string|'"unpause_instance"'
op|','
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
op|','
nl|'\n'
op|'('
string|'"suspend_instance"'
op|','
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
op|','
nl|'\n'
op|'('
string|'"resume_instance"'
op|','
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'for'
name|'operation'
name|'in'
name|'actions'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'revert_resize'"
name|'in'
name|'operation'
op|':'
newline|'\n'
indent|'                '
name|'migration'
op|'.'
name|'source_compute'
op|'='
string|"'fake-mini'"
newline|'\n'
nl|'\n'
DECL|function|fake_migration_save
dedent|''
name|'def'
name|'fake_migration_save'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'migration'
op|','
string|"'save'"
op|','
name|'fake_migration_save'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_state_revert'
op|'('
name|'instance'
op|','
op|'*'
name|'operation'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_quota_reservations_committed
dedent|''
dedent|''
name|'def'
name|'_ensure_quota_reservations_committed'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mock up commit of quota reservations."""'
newline|'\n'
name|'reservations'
op|'='
name|'list'
op|'('
string|"'fake_res'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'commit'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|_ensure_quota_reservations_rolledback
dedent|''
name|'def'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mock up rollback of quota reservations."""'
newline|'\n'
name|'reservations'
op|'='
name|'list'
op|'('
string|"'fake_res'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'rollback'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'reservations'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'user_id'
op|'='
name|'instance'
op|'['
string|"'user_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|test_quotas_successful_delete
dedent|''
name|'def'
name|'test_quotas_successful_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'resvs'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'reservations'
op|'='
name|'resvs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quotas_failed_delete
dedent|''
name|'def'
name|'test_quotas_failed_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_shutdown_instance
name|'def'
name|'fake_shutdown_instance'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_shutdown_instance'"
op|','
nl|'\n'
name|'fake_shutdown_instance'
op|')'
newline|'\n'
nl|'\n'
name|'resvs'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'reservations'
op|'='
name|'resvs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quotas_successful_soft_delete
dedent|''
name|'def'
name|'test_quotas_successful_soft_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
name|'dict'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
op|')'
newline|'\n'
name|'resvs'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'soft_delete_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'resvs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quotas_failed_soft_delete
dedent|''
name|'def'
name|'test_quotas_failed_soft_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
name|'dict'
op|'('
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_soft_delete
name|'def'
name|'fake_soft_delete'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'soft_delete'"
op|','
nl|'\n'
name|'fake_soft_delete'
op|')'
newline|'\n'
nl|'\n'
name|'resvs'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'soft_delete_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'resvs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quotas_destroy_of_soft_deleted_instance
dedent|''
name|'def'
name|'test_quotas_destroy_of_soft_deleted_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
name|'dict'
op|'('
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|')'
op|')'
newline|'\n'
comment|'# Termination should be successful, but quota reservations'
nl|'\n'
comment|'# rolled back because the instance was in SOFT_DELETED state.'
nl|'\n'
name|'resvs'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'reservations'
op|'='
name|'resvs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stub_out_resize_network_methods
dedent|''
name|'def'
name|'_stub_out_resize_network_methods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'setup_networks_on_host'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'migrate_instance_start'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'migrate_instance_finish'"
op|','
name|'fake'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_finish_resize
dedent|''
name|'def'
name|'_test_finish_resize'
op|'('
name|'self'
op|','
name|'power_on'
op|','
name|'resize_instance'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|"# Contrived test to ensure finish_resize doesn't raise anything and"
nl|'\n'
comment|'# also tests resize from ACTIVE or STOPPED state which determines'
nl|'\n'
comment|'# if the resized instance is powered on or not.'
nl|'\n'
indent|'        '
name|'vm_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_state'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'image'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'disk_info'
op|'='
string|"'fake-disk-info'"
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'resize_instance'
op|':'
newline|'\n'
indent|'            '
name|'old_instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
name|'old_instance_type'
op|'['
string|"'root_gb'"
op|']'
newline|'\n'
name|'instance_type'
op|'['
string|"'swap'"
op|']'
op|'='
name|'old_instance_type'
op|'['
string|"'swap'"
op|']'
newline|'\n'
name|'instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
name|'old_instance_type'
op|'['
string|"'ephemeral_gb'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): make sure prep_resize set old_vm_state correctly'
nl|'\n'
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'old_vm_state'"
op|','
name|'sys_meta'
op|')'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'sys_meta'
op|'['
string|"'old_vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
name|'sys_meta'
op|'['
string|"'old_vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'orig_mig_save'
op|'='
name|'migration'
op|'.'
name|'save'
newline|'\n'
name|'orig_inst_save'
op|'='
name|'instance'
op|'.'
name|'save'
newline|'\n'
name|'network_api'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'network_api'
op|','
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_finish'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_notify_about_instance_usage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'migration'
op|','
string|"'save'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'instance'
op|','
string|"'save'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_mig_save
name|'def'
name|'_mig_save'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'migration'
op|'.'
name|'status'
op|','
string|"'finished'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_state'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'migration'
op|'.'
name|'_context'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'orig_mig_save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_instance_save0
dedent|''
name|'def'
name|'_instance_save0'
op|'('
name|'expected_task_state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'expected_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'orig_inst_save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_instance_save1
dedent|''
name|'def'
name|'_instance_save1'
op|'('
name|'expected_task_state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
nl|'\n'
name|'expected_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'instance'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'orig_inst_save'
op|'('
name|'expected_task_state'
op|'='
name|'expected_task_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'fake-mini'"
op|')'
newline|'\n'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'dict'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake-nwinfo1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# First save to update old/current flavor and task state'
nl|'\n'
name|'exp_kwargs'
op|'='
name|'dict'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|'**'
name|'exp_kwargs'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
name|'_instance_save0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'finish_resize.start'"
op|','
nl|'\n'
name|'network_info'
op|'='
string|"'fake-nwinfo1'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'refresh_conn_info'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake-bdminfo'"
op|')'
newline|'\n'
comment|'# nova.conf sets the default flavor to m1.small and the test'
nl|'\n'
comment|'# sets the default flavor to m1.tiny so they should be different'
nl|'\n'
comment|'# which makes this a resize'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'finish_migration'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'migration'
op|','
nl|'\n'
name|'instance'
op|','
name|'disk_info'
op|','
nl|'\n'
string|"'fake-nwinfo1'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'resize_instance'
op|','
nl|'\n'
string|"'fake-bdminfo'"
op|','
name|'power_on'
op|')'
newline|'\n'
comment|'# Ensure instance status updates is after the migration finish'
nl|'\n'
name|'migration'
op|'.'
name|'save'
op|'('
op|')'
op|'.'
name|'WithSideEffects'
op|'('
name|'_mig_save'
op|')'
newline|'\n'
name|'exp_kwargs'
op|'='
name|'dict'
op|'('
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|'**'
name|'exp_kwargs'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
name|'_instance_save1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'finish_resize.end'"
op|','
nl|'\n'
name|'network_info'
op|'='
string|"'fake-nwinfo1'"
op|')'
newline|'\n'
comment|'# NOTE(comstud): This actually does the mox.ReplayAll()'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'disk_info'
op|'='
name|'disk_info'
op|','
name|'image'
op|'='
name|'image'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_from_active
dedent|''
name|'def'
name|'test_finish_resize_from_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_from_stopped
dedent|''
name|'def'
name|'test_finish_resize_from_stopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_resize'
op|'('
name|'power_on'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_without_resize_instance
dedent|''
name|'def'
name|'test_finish_resize_without_resize_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|','
name|'resize_instance'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_with_volumes
dedent|''
name|'def'
name|'test_finish_resize_with_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Contrived test to ensure finish_resize doesn\'t raise anything."""'
newline|'\n'
nl|'\n'
comment|'# create instance'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# create volume'
nl|'\n'
name|'volume'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'size'"
op|':'
number|'200'
op|','
nl|'\n'
string|"'attach_status'"
op|':'
string|"'detached'"
op|'}'
newline|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
op|'{'
string|"'context'"
op|':'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# stub out volume attach'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'volume'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"get"'
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_check_attach
name|'def'
name|'fake_volume_check_attach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"check_attach"'
op|','
name|'fake_volume_check_attach'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_volume_encryption_metadata
name|'def'
name|'fake_get_volume_encryption_metadata'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get_volume_encryption_metadata'"
op|','
nl|'\n'
name|'fake_get_volume_encryption_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'orig_connection_data'
op|'='
op|'{'
nl|'\n'
string|"'target_discovered'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'target_iqn'"
op|':'
string|"'iqn.2010-10.org.openstack:%s.1'"
op|'%'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'target_portal'"
op|':'
string|"'127.0.0.0.1:3260'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
op|'{'
nl|'\n'
string|"'driver_volume_type'"
op|':'
string|"'iscsi'"
op|','
nl|'\n'
string|"'data'"
op|':'
name|'orig_connection_data'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_init_conn
name|'def'
name|'fake_init_conn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'connection_info'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"initialize_connection"'
op|','
name|'fake_init_conn'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_attach
name|'def'
name|'fake_attach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'instance_uuid'
op|','
name|'device_name'
op|','
nl|'\n'
name|'mode'
op|'='
string|"'rw'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'instance_uuid'
newline|'\n'
name|'volume'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'device_name'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"attach"'
op|','
name|'fake_attach'
op|')'
newline|'\n'
nl|'\n'
comment|'# stub out virt driver attach'
nl|'\n'
DECL|function|fake_get_volume_connector
name|'def'
name|'fake_get_volume_connector'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_volume_connector'"
op|','
nl|'\n'
name|'fake_get_volume_connector'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_attach_volume
name|'def'
name|'fake_attach_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'fake_attach_volume'
op|')'
newline|'\n'
nl|'\n'
comment|'# attach volume to instance'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
newline|'\n'
nl|'\n'
comment|'# assert volume attached correctly'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'volume'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
name|'disk_info'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'disk_info'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|','
name|'volume'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# begin resize'
nl|'\n'
dedent|''
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# fake out detach for prep_resize (and later terminate)'
nl|'\n'
DECL|function|fake_terminate_connection
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"terminate_connection"'
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# assert bdm is unchanged'
nl|'\n'
name|'disk_info'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'disk_info'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|','
name|'volume'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
name|'cached_connection_info'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'cached_connection_info'
op|'['
string|"'data'"
op|']'
op|','
nl|'\n'
name|'orig_connection_data'
op|')'
newline|'\n'
comment|'# but connection was terminated'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# stub out virt driver finish_migration'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# new initialize connection'
nl|'\n'
name|'new_connection_data'
op|'='
name|'dict'
op|'('
name|'orig_connection_data'
op|')'
newline|'\n'
name|'new_iqn'
op|'='
string|"'iqn.2010-10.org.openstack:%s.2'"
op|'%'
name|'uuids'
op|'.'
name|'volume_id'
op|','
newline|'\n'
name|'new_connection_data'
op|'['
string|"'target_iqn'"
op|']'
op|'='
name|'new_iqn'
newline|'\n'
nl|'\n'
DECL|function|fake_init_conn_with_data
name|'def'
name|'fake_init_conn_with_data'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'session'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'connection_info'
op|'['
string|"'data'"
op|']'
op|'='
name|'new_connection_data'
newline|'\n'
name|'return'
name|'connection_info'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"initialize_connection"'
op|','
nl|'\n'
name|'fake_init_conn_with_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
comment|'# assert volume attached correctly'
nl|'\n'
name|'disk_info'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'disk_info'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'disk_info'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bdm'
op|'['
string|"'connection_info'"
op|']'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'connection_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# stub out detach'
nl|'\n'
DECL|function|fake_detach
dedent|''
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'volume'
op|'['
string|"'device_path'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'volume'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"detach"'
op|','
name|'fake_detach'
op|')'
newline|'\n'
nl|'\n'
comment|'# clean up'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_handles_error
dedent|''
name|'def'
name|'test_finish_resize_handles_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure we don't leave the instance in RESIZE on error."
nl|'\n'
nl|'\n'
DECL|function|throw_up
indent|'        '
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'throw_up'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'old_flavor_name'
op|'='
string|"'m1.tiny'"
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'type_name'
op|'='
name|'old_flavor_name'
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.small'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
name|'old_flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
name|'old_flavor_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_flavor'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'instance'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_flavor'
op|'['
string|"'vcpus'"
op|']'
op|','
name|'instance'
op|'.'
name|'vcpus'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_flavor'
op|'['
string|"'root_gb'"
op|']'
op|','
name|'instance'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_flavor'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
name|'instance'
op|'.'
name|'ephemeral_gb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_flavor'
op|'['
string|"'id'"
op|']'
op|','
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|','
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_instance_info
dedent|''
name|'def'
name|'test_set_instance_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'old_flavor_name'
op|'='
string|"'m1.tiny'"
newline|'\n'
name|'new_flavor_name'
op|'='
string|"'m1.small'"
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'type_name'
op|'='
name|'old_flavor_name'
op|')'
newline|'\n'
name|'new_flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
name|'new_flavor_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_set_instance_info'
op|'('
name|'instance'
op|','
name|'new_flavor'
op|'.'
name|'obj_clone'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_flavor'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'instance'
op|'.'
name|'memory_mb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_flavor'
op|'['
string|"'vcpus'"
op|']'
op|','
name|'instance'
op|'.'
name|'vcpus'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_flavor'
op|'['
string|"'root_gb'"
op|']'
op|','
name|'instance'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_flavor'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
name|'instance'
op|'.'
name|'ephemeral_gb'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'new_flavor'
op|'['
string|"'id'"
op|']'
op|','
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_notification
dedent|''
name|'def'
name|'test_rebuild_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'time_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'utils_fixture'
op|'.'
name|'TimeFixture'
op|'('
name|'old_time'
op|')'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'time_fixture'
op|'.'
name|'advance_time_delta'
op|'('
name|'cur_time'
op|'-'
name|'old_time'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'orig_sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|'"image_ref"'
op|']'
newline|'\n'
name|'new_image_ref'
op|'='
name|'image_ref'
op|'+'
string|"'-new_image_ref'"
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'image_ref'"
op|':'
name|'new_image_ref'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'password'
op|'='
string|'"new_password"'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
newline|'\n'
name|'inst_ref'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'new_image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
name|'password'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|','
name|'recreate'
op|'='
name|'False'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'image_ref'
op|')'
newline|'\n'
name|'new_image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'new_image_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.rebuild.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'new_image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.rebuild.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'utils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'new_image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_instance_notification
dedent|''
name|'def'
name|'test_finish_resize_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'time_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'utils_fixture'
op|'.'
name|'TimeFixture'
op|'('
name|'old_time'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'new_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.small'"
op|')'
newline|'\n'
name|'new_type_id'
op|'='
name|'new_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'flavor_id'
op|'='
name|'new_type'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance_type'
op|'='
name|'new_type'
op|','
nl|'\n'
name|'reservations'
op|'='
op|'['
op|']'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'time_fixture'
op|'.'
name|'advance_time_delta'
op|'('
name|'cur_time'
op|'-'
name|'old_time'
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.finish_resize.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.finish_resize.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.small'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'new_type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'utils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_notification
dedent|''
name|'def'
name|'test_resize_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'time_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'utils_fixture'
op|'.'
name|'TimeFixture'
op|'('
name|'old_time'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'time_fixture'
op|'.'
name|'advance_time_delta'
op|'('
name|'cur_time'
op|'-'
name|'old_time'
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.resize.prep.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.resize.prep.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'display_name'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'created_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'launched_at'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prep_resize_instance_migration_error_on_none_host
dedent|''
name|'def'
name|'test_prep_resize_instance_migration_error_on_none_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure prep_resize raises a migration error if destination host is\n        not defined\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MigrationError'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_driver_error
dedent|''
name|'def'
name|'test_resize_instance_driver_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance status set to Error on resize error.'
nl|'\n'
nl|'\n'
DECL|function|throw_up
indent|'        '
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'throw_up'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
comment|'# verify'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# NOTE(comstud): error path doesn't use objects, so our object"
nl|'\n'
comment|'# is not updated.  Refresh and compare against the DB.'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_driver_rollback
dedent|''
name|'def'
name|'test_resize_instance_driver_rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance status set to Running after rollback.'
nl|'\n'
nl|'\n'
DECL|function|throw_up
indent|'        '
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceFaultRollback'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'throw_up'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# NOTE(comstud): error path doesn't use objects, so our object"
nl|'\n'
comment|'# is not updated.  Refresh and compare against the DB.'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_resize_instance
dedent|''
name|'def'
name|'_test_resize_instance'
op|'('
name|'self'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be migrated/resized.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|"# verify 'old_vm_state' was set on system_metadata"
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'sys_meta'
op|'['
string|"'old_vm_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|','
name|'return_value'
op|'='
string|"'fake_bdms'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_block_device_info'"
op|','
nl|'\n'
name|'return_value'
op|'='
string|"'fake_bdinfo'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_terminate_volume_connections'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_off_values'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'('
number|'1'
op|','
number|'2'
op|')'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_get_by_inst_uuid'
op|','
name|'mock_get_instance_vol_bdinfo'
op|','
nl|'\n'
name|'mock_terminate_vol_conn'
op|','
name|'mock_get_power_off_values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'clean_shutdown'
op|')'
newline|'\n'
name|'mock_get_instance_vol_bdinfo'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|'='
string|"'fake_bdms'"
op|')'
newline|'\n'
name|'mock_terminate_vol_conn'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|"'fake_bdms'"
op|')'
newline|'\n'
name|'mock_get_power_off_values'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'clean_shutdown'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'migration'
op|'.'
name|'dest_compute'
op|','
name|'instance'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance
dedent|''
dedent|''
name|'def'
name|'test_resize_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_resize_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_forced_shutdown
dedent|''
name|'def'
name|'test_resize_instance_forced_shutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_resize_instance'
op|'('
name|'clean_shutdown'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_confirm_resize
dedent|''
name|'def'
name|'_test_confirm_resize'
op|'('
name|'self'
op|','
name|'power_on'
op|','
name|'numa_topology'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# Common test case method for confirm_resize'
nl|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_confirm_migration_driver
dedent|''
name|'def'
name|'fake_confirm_migration_driver'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Confirm the instance uses the new type in finish_resize'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'3'"
op|','
name|'instance'
op|'.'
name|'flavor'
op|'.'
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'old_vm_state'
op|'='
name|'None'
newline|'\n'
name|'p_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'old_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'p_state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'old_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
name|'p_state'
op|'='
name|'power_state'
op|'.'
name|'SHUTDOWN'
newline|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'old_vm_state'
op|','
string|"'power_state'"
op|':'
name|'p_state'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'allow_resize_to_same_host'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'confirm_migration'"
op|','
nl|'\n'
name|'fake_confirm_migration_driver'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Confirm the instance size before the resize starts'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'flavor_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'old_vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'power_state'
op|'='
name|'p_state'
newline|'\n'
name|'instance'
op|'.'
name|'numa_topology'
op|'='
name|'numa_topology'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'new_instance_type_ref'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_ref'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'migration_context'
op|'='
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'migration_context'
op|'.'
name|'old_numa_topology'
op|','
nl|'\n'
name|'numa_topology'
op|'.'
name|'__class__'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'migration_context'
op|'.'
name|'new_numa_topology'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): ensure prep_resize set old_vm_state in system_metadata'
nl|'\n'
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_vm_state'
op|','
name|'sys_meta'
op|'['
string|"'old_vm_state'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_ref'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prove that the instance size is now the new size'
nl|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'flavor_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
comment|'# Prove that the NUMA topology has also been updated to that of the new'
nl|'\n'
comment|'# flavor - meaning None'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
comment|'# Finally, confirm the resize and verify the new flavor is applied'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'flavor_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake-mini'"
op|','
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_vm_state'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'migration_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'p_state'
op|','
name|'instance'
op|'.'
name|'power_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_confirm_resize_from_active
dedent|''
name|'def'
name|'test_confirm_resize_from_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_confirm_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_confirm_resize_from_stopped
dedent|''
name|'def'
name|'test_confirm_resize_from_stopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_confirm_resize'
op|'('
name|'power_on'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_confirm_resize_with_migration_context
dedent|''
name|'def'
name|'test_confirm_resize_with_migration_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numa_topology'
op|'='
op|'('
nl|'\n'
name|'test_instance_numa_topology'
op|'.'
name|'get_fake_obj_numa_topology'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_confirm_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|','
name|'numa_topology'
op|'='
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_finish_revert_resize
dedent|''
name|'def'
name|'_test_finish_revert_resize'
op|'('
name|'self'
op|','
name|'power_on'
op|','
nl|'\n'
name|'remove_old_vm_state'
op|'='
name|'False'
op|','
nl|'\n'
name|'numa_topology'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Convenience method that does most of the work for the\n        test_finish_revert_resize tests.\n        :param power_on -- True if testing resize from ACTIVE state, False if\n        testing resize from STOPPED state.\n        :param remove_old_vm_state -- True if testing a case where the\n        \'old_vm_state\' system_metadata is not present when the\n        finish_revert_resize method is called.\n        """'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_finish_revert_migration_driver
dedent|''
name|'def'
name|'fake_finish_revert_migration_driver'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Confirm the instance uses the old type in finish_revert_resize'
nl|'\n'
indent|'            '
name|'inst'
op|'='
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1'"
op|','
name|'inst'
op|'.'
name|'flavor'
op|'.'
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'old_vm_state'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'power_on'
op|':'
newline|'\n'
indent|'            '
name|'old_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'old_vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
dedent|''
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'old_vm_state'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_revert_migration'"
op|','
nl|'\n'
name|'fake_finish_revert_migration_driver'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_out_resize_network_methods'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'flavor_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'old_vm_state'
op|'='
name|'instance'
op|'['
string|"'vm_state'"
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'old_vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'numa_topology'
op|'='
name|'numa_topology'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'new_instance_type_ref'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_ref'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'migration_context'
op|'='
name|'objects'
op|'.'
name|'MigrationContext'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'migration_context'
op|'.'
name|'old_numa_topology'
op|','
nl|'\n'
name|'numa_topology'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mriedem): ensure prep_resize set old_vm_state in system_metadata'
nl|'\n'
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_vm_state'
op|','
name|'sys_meta'
op|'['
string|"'old_vm_state'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_ref'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prove that the instance size is now the new size'
nl|'\n'
name|'instance_type_ref'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
comment|'# Prove that the NUMA topology has also been updated to that of the new'
nl|'\n'
comment|'# flavor - meaning None'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'revert_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'if'
name|'remove_old_vm_state'
op|':'
newline|'\n'
comment|'# need to wipe out the old_vm_state from system_metadata'
nl|'\n'
comment|'# before calling finish_revert_resize'
nl|'\n'
indent|'            '
name|'sys_meta'
op|'='
name|'instance'
op|'.'
name|'system_metadata'
newline|'\n'
name|'sys_meta'
op|'.'
name|'pop'
op|'('
string|"'old_vm_state'"
op|')'
newline|'\n'
comment|'# Have to reset for save() to work'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'='
name|'sys_meta'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_revert_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'flavor_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'host'
op|','
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'migration'
op|'.'
name|'dest_compute'
op|','
name|'migration'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'instance'
op|'.'
name|'numa_topology'
op|','
name|'numa_topology'
op|'.'
name|'__class__'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'remove_old_vm_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'old_vm_state'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize_from_active
dedent|''
dedent|''
name|'def'
name|'test_finish_revert_resize_from_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_revert_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize_from_stopped
dedent|''
name|'def'
name|'test_finish_revert_resize_from_stopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_revert_resize'
op|'('
name|'power_on'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize_from_stopped_remove_old_vm_state
dedent|''
name|'def'
name|'test_finish_revert_resize_from_stopped_remove_old_vm_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# in  this case we resize from STOPPED but end up with ACTIVE'
nl|'\n'
comment|'# because the old_vm_state value is not present in'
nl|'\n'
comment|'# finish_revert_resize'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_finish_revert_resize'
op|'('
name|'power_on'
op|'='
name|'False'
op|','
nl|'\n'
name|'remove_old_vm_state'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize_migration_context
dedent|''
name|'def'
name|'test_finish_revert_resize_migration_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numa_topology'
op|'='
op|'('
nl|'\n'
name|'test_instance_numa_topology'
op|'.'
name|'get_fake_obj_numa_topology'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_finish_revert_resize'
op|'('
name|'power_on'
op|'='
name|'True'
op|','
nl|'\n'
name|'numa_topology'
op|'='
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_by_flavor_id
dedent|''
name|'def'
name|'test_get_by_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor_type'
op|'['
string|"'name'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_handles_migration_error
dedent|''
name|'def'
name|'test_resize_instance_handles_migration_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure vm_state is ERROR when error occurs.'
nl|'\n'
DECL|function|raise_migration_failure
indent|'        '
name|'def'
name|'raise_migration_failure'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'raise_migration_failure'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
string|"'foo'"
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'node'
op|'='
name|'None'
op|','
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'.'
name|'get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
comment|"# NOTE(comstud): error path doesn't use objects, so our object"
nl|'\n'
comment|'# is not updated.  Refresh and compare against the DB.'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'vm_state'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_instance_has_no_fixed_ip
dedent|''
name|'def'
name|'test_pre_live_migration_instance_has_no_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm that no exception is raised if there is no fixed ip on'
nl|'\n'
comment|'# pre_live_migration'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'c'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
op|'{'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_works_correctly
dedent|''
name|'def'
name|'test_pre_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm setup_compute_volume is called when volume is mounted.'
nl|'\n'
DECL|function|stupid
indent|'        '
name|'def'
name|'stupid'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|','
name|'stupid'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'c'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
op|'{'
string|"'swap'"
op|':'
name|'None'
op|','
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'ensure_filtering_rules_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance'
op|')'
op|','
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'c'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
string|"'is_shared_instance_path'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pre_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
name|'disk'
op|'='
name|'None'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.pre.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.pre.end'"
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration.save'"
op|')'
newline|'\n'
DECL|member|test_live_migration_exception_rolls_back
name|'def'
name|'test_live_migration_exception_rolls_back'
op|'('
name|'self'
op|','
name|'mock_save'
op|')'
op|':'
newline|'\n'
comment|'# Confirm exception when pre_live_migration fails.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'src_host'"
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|'}'
op|')'
newline|'\n'
name|'updated_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake-dest-host'"
op|'}'
op|')'
newline|'\n'
name|'dest_host'
op|'='
name|'updated_instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'fake_bdms'
op|'='
op|'['
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id_1'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|')'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id_2'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|')'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'migrate_data'
op|'='
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'get_instance_disk_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'remove_volume_connection'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rollback_live_migration_at_destination'"
op|')'
newline|'\n'
nl|'\n'
name|'block_device_info'
op|'='
op|'{'
nl|'\n'
string|"'swap'"
op|':'
name|'None'
op|','
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'block_device_info'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_disk'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pre_live_migration'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|','
name|'True'
op|','
string|"'fake_disk'"
op|','
name|'dest_host'
op|','
nl|'\n'
name|'migrate_data'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'uuids'
op|'.'
name|'volume_id_1'
op|','
name|'dest_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'uuids'
op|'.'
name|'volume_id_2'
op|','
name|'dest_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'dest_host'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|','
nl|'\n'
name|'c'
op|','
name|'dest'
op|'='
name|'dest_host'
op|','
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'src_host'"
op|','
name|'instance'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'instance'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'failed'"
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'EventReporter'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration.save'"
op|')'
newline|'\n'
DECL|member|test_live_migration_works_correctly
name|'def'
name|'test_live_migration_works_correctly'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
name|'event_mock'
op|')'
op|':'
newline|'\n'
comment|'# Confirm live_migration() works as expected correctly.'
nl|'\n'
comment|'# creating instance testdata'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'context'
op|'='
name|'c'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data_obj'
op|'.'
name|'LibvirtLiveMigrateData'
op|'('
nl|'\n'
name|'is_shared_instance_path'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_shared_block_storage'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pre_live_migration'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'False'
op|','
name|'None'
op|','
name|'dest'
op|','
name|'migrate_data'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
string|"'dest_compute'"
op|':'
name|'dest'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'c'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'post_live_migration_at_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'post_live_migration_at_destination'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'False'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|','
nl|'\n'
string|"'clear_events_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|'('
name|'c'
op|','
name|'dest'
op|'='
name|'dest'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'event_mock'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'c'
op|','
string|"'compute_live_migration'"
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
comment|'# cleanup'
nl|'\n'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'completed'"
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_no_shared_storage_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_no_shared_storage_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm post_live_migration() works correctly as expected\n           for non shared storage migration.\n        """'
newline|'\n'
comment|'# Create stubs'
nl|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|"# No share storage live migration don't need to destroy at source"
nl|'\n'
comment|'# server because instance has been migrated to destination, but a'
nl|'\n'
comment|'# cleanup for block device and network are needed.'
nl|'\n'
nl|'\n'
DECL|function|fakecleanup
name|'def'
name|'fakecleanup'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'cleanup'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'cleanup'"
op|','
name|'fakecleanup'
op|')'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'srchost'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unfilter_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'srchost'
op|','
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'c'
op|','
name|'instance'
op|','
nl|'\n'
name|'migration'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'post_live_migration_at_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'post_live_migration_at_destination'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'False'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|','
nl|'\n'
string|"'clear_events_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|'.'
name|'clear_events_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
name|'objects'
op|'.'
name|'LibvirtLiveMigrateData'
op|'('
nl|'\n'
name|'is_shared_instance_path'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_shared_block_storage'
op|'='
name|'False'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_post_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'cleanup'"
op|','
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'['
string|"'cleanup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm post_live_migration() works as expected correctly.'
nl|'\n'
indent|'        '
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'srchost'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'c'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration_obj'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
name|'migrate_data_obj'
op|'.'
name|'LiveMigrateData'
op|'('
nl|'\n'
name|'migration'
op|'='
name|'migration_obj'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'post_live_migration'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unfilter_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'post_live_migration_at_destination'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'post_live_migration_at_source'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|','
nl|'\n'
string|"'clear_events_for_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'update_available_resource'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'migration_obj'
op|','
string|"'save'"
op|')'
op|','
nl|'\n'
op|')'
name|'as'
op|'('
nl|'\n'
name|'post_live_migration'
op|','
name|'unfilter_instance'
op|','
nl|'\n'
name|'migrate_instance_start'
op|','
name|'post_live_migration_at_destination'
op|','
nl|'\n'
name|'post_live_migration_at_source'
op|','
name|'setup_networks_on_host'
op|','
nl|'\n'
name|'clear_events'
op|','
name|'update_available_resource'
op|','
name|'mig_save'
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_post_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|','
name|'dest'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
nl|'\n'
name|'post_live_migration'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'instance'
op|','
op|'{'
string|"'swap'"
op|':'
name|'None'
op|','
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'migrate_data'
op|')'
op|']'
op|')'
newline|'\n'
name|'unfilter_instance'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'instance'
op|','
op|'['
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'migrate_instance_start'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'instance'
op|','
name|'migration'
op|')'
op|']'
op|')'
newline|'\n'
name|'post_live_migration_at_destination'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'instance'
op|','
name|'False'
op|','
name|'dest'
op|')'
op|']'
op|')'
newline|'\n'
name|'post_live_migration_at_source'
op|'.'
name|'assert_has_calls'
op|'('
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'instance'
op|','
op|'['
op|']'
op|')'
op|']'
op|')'
newline|'\n'
name|'clear_events'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'update_available_resource'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'c'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'completed'"
op|','
name|'migration_obj'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'mig_save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_terminate_volume_connections
dedent|''
dedent|''
name|'def'
name|'test_post_live_migration_terminate_volume_connections'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|','
nl|'\n'
name|'context'
op|'='
name|'c'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'c'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|'}'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|'}'
op|')'
op|','
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'post_live_migration_at_destination'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'instance_events'
op|','
nl|'\n'
string|"'clear_events_for_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_volume_connector'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'terminate_connection'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
nl|'\n'
name|'migrate_instance_start'
op|','
name|'post_live_migration_at_destination'
op|','
nl|'\n'
name|'setup_networks_on_host'
op|','
name|'clear_events_for_instance'
op|','
nl|'\n'
name|'get_instance_volume_block_device_info'
op|','
name|'get_by_instance_uuid'
op|','
nl|'\n'
name|'get_volume_connector'
op|','
name|'terminate_connection'
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'bdms'
newline|'\n'
name|'get_volume_connector'
op|'.'
name|'return_value'
op|'='
string|"'fake-connector'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_post_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|','
string|"'dest_host'"
op|')'
newline|'\n'
nl|'\n'
name|'terminate_connection'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'c'
op|','
name|'uuids'
op|'.'
name|'volume_id'
op|','
string|"'fake-connector'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_begin_post_live_migration_at_destination
dedent|''
dedent|''
name|'def'
name|'_begin_post_live_migration_at_destination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_finish'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_info'"
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'admin_ctxt'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'migration'
op|')'
newline|'\n'
name|'fake_net_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'fake_block_dev_info'
op|'='
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'fake_net_info'
op|','
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'fake_block_dev_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'10001'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_finish_post_live_migration_at_destination
dedent|''
name|'def'
name|'_finish_post_live_migration_at_destination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.post.dest.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.post.dest.end'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'admin_ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_at_destination_with_compute_info
dedent|''
name|'def'
name|'test_post_live_migration_at_destination_with_compute_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The instance\'s node property should be updated correctly."""'
newline|'\n'
name|'self'
op|'.'
name|'_begin_post_live_migration_at_destination'
op|'('
op|')'
newline|'\n'
name|'hypervisor_hostname'
op|'='
string|"'fake_hypervisor_hostname'"
newline|'\n'
name|'fake_compute_info'
op|'='
name|'objects'
op|'.'
name|'ComputeNode'
op|'('
nl|'\n'
name|'hypervisor_hostname'
op|'='
name|'hypervisor_hostname'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'fake_compute_info'
op|')'
newline|'\n'
name|'updated'
op|'='
name|'self'
op|'.'
name|'_finish_post_live_migration_at_destination'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'updated'
op|'['
string|"'node'"
op|']'
op|','
name|'hypervisor_hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_at_destination_without_compute_info
dedent|''
name|'def'
name|'test_post_live_migration_at_destination_without_compute_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""The instance\'s node property should be set to None if we fail to\n           get compute_info.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'_begin_post_live_migration_at_destination'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|'('
name|'host'
op|'='
string|"'fake-host'"
op|')'
op|')'
newline|'\n'
name|'updated'
op|'='
name|'self'
op|'.'
name|'_finish_post_live_migration_at_destination'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'updated'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.BlockDeviceMappingList.get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_rollback_live_migration
name|'def'
name|'test_rollback_live_migration'
op|'('
name|'self'
op|','
name|'mock_bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
string|"'migration'"
op|':'
name|'migration'
op|'}'
newline|'\n'
nl|'\n'
name|'mock_bdms'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_live_migration_cleanup_flags'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'network_api'"
op|')'
newline|'\n'
DECL|function|_test
name|'def'
name|'_test'
op|'('
name|'mock_nw_api'
op|','
name|'mock_lmcf'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_lmcf'
op|'.'
name|'return_value'
op|'='
name|'False'
op|','
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_rollback_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|','
string|"'foo'"
op|','
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'mock_nw_api'
op|'.'
name|'setup_networks_on_host'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
dedent|''
name|'_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'error'"
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rollback_live_migration_at_destination_correctly
dedent|''
name|'def'
name|'test_rollback_live_migration_at_destination_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# creating instance testdata'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'c'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
name|'teardown'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'rollback_live_migration_at_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|','
op|'['
op|']'
op|','
op|'{'
string|"'swap'"
op|':'
name|'None'
op|','
string|"'ephemerals'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'ret'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.rollback.dest.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'compute.instance.live_migration.rollback.dest.end'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.network.api.API.setup_networks_on_host'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.driver.ComputeDriver.'"
nl|'\n'
string|"'rollback_live_migration_at_destination'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.migrate_data.LiveMigrateData.'"
nl|'\n'
string|"'detect_implementation'"
op|')'
newline|'\n'
DECL|member|test_rollback_live_migration_at_destination_network_fails
name|'def'
name|'test_rollback_live_migration_at_destination_network_fails'
op|'('
nl|'\n'
name|'self'
op|','
name|'mock_detect'
op|','
name|'mock_rollback'
op|','
name|'net_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rollback_live_migration_at_destination'
op|','
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'destroy_disks'
op|'='
name|'True'
op|','
name|'migrate_data'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'mock_rollback'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'c'
op|','
name|'instance'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
nl|'\n'
name|'destroy_disks'
op|'='
name|'True'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'mock_detect'
op|'.'
name|'return_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_kill_vm
dedent|''
name|'def'
name|'test_run_kill_vm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Detect when a vm is terminated behind the scenes.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"Running instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'_test_remove_vm'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# Force the compute manager to do its periodic poll'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_power_states'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"After force-killing instances: %s"'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fill_fault
dedent|''
name|'def'
name|'_fill_fault'
op|'('
name|'self'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'extra'
op|'='
op|'{'
name|'x'
op|':'
name|'None'
name|'for'
name|'x'
name|'in'
op|'['
string|"'created_at'"
op|','
nl|'\n'
string|"'deleted_at'"
op|','
nl|'\n'
string|"'updated_at'"
op|','
nl|'\n'
string|"'deleted'"
op|']'
op|'}'
newline|'\n'
name|'extra'
op|'['
string|"'id'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'extra'
op|'['
string|"'details'"
op|']'
op|'='
string|"''"
newline|'\n'
name|'extra'
op|'.'
name|'update'
op|'('
name|'values'
op|')'
newline|'\n'
name|'return'
name|'extra'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault
dedent|''
name|'def'
name|'test_add_instance_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'raise NotImplementedError'"
op|','
name|'values'
op|'['
string|"'details'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'values'
op|'['
string|"'details'"
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'test'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
op|','
nl|'\n'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_with_remote_error
dedent|''
name|'def'
name|'test_add_instance_fault_with_remote_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
name|'raised_exc'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'global'
name|'exc_info'
newline|'\n'
name|'global'
name|'raised_exc'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'raise messaging.RemoteError'"
op|','
name|'values'
op|'['
string|"'details'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'values'
op|'['
string|"'details'"
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'Remote error: test My Test Message\\nNone.'"
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'messaging'
op|'.'
name|'RemoteError'
op|'('
string|"'test'"
op|','
string|"'My Test Message'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'messaging'
op|'.'
name|'RemoteError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'raised_exc'
op|'='
name|'exc'
newline|'\n'
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'raised_exc'
op|','
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_user_error
dedent|''
name|'def'
name|'test_add_instance_fault_user_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'400'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'fake details'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'user_exc'
op|'='
name|'exception'
op|'.'
name|'Invalid'
op|'('
string|"'fake details'"
op|','
name|'code'
op|'='
number|'400'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'user_exc'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'user_exc'
op|','
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_no_exc_info
dedent|''
name|'def'
name|'test_add_instance_fault_no_exc_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'test'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_long_message
dedent|''
name|'def'
name|'test_add_instance_fault_long_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'message'
op|'='
number|'300'
op|'*'
string|"'a'"
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
name|'message'
op|'['
op|':'
number|'255'
op|']'
op|','
nl|'\n'
string|"'details'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
name|'message'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_with_message
dedent|''
name|'def'
name|'test_add_instance_fault_with_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'raise NotImplementedError'"
op|','
name|'values'
op|'['
string|"'details'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'values'
op|'['
string|"'details'"
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'hoge'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_fill_fault'
op|'('
name|'expected'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
op|','
nl|'\n'
name|'exc_info'
op|','
nl|'\n'
name|'fault_message'
op|'='
string|"'hoge'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_cleanup_running
dedent|''
name|'def'
name|'_test_cleanup_running'
op|'('
name|'self'
op|','
name|'action'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'deleted_at'
op|'='
op|'('
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
nl|'\n'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|','
name|'minutes'
op|'='
number|'5'
op|')'
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|'"deleted_at"'
op|':'
name|'deleted_at'
op|','
nl|'\n'
string|'"deleted"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|'"deleted_at"'
op|':'
name|'deleted_at'
op|','
nl|'\n'
string|'"deleted"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
nl|'\n'
name|'admin_context'
op|','
op|'{'
string|"'deleted'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'soft_deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'instance1'
op|','
nl|'\n'
name|'instance2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'running_deleted_instance_timeout'
op|'='
number|'3600'
op|','
nl|'\n'
name|'running_deleted_instance_action'
op|'='
name|'action'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'admin_context'
op|','
name|'instance1'
op|','
name|'instance2'
newline|'\n'
nl|'\n'
DECL|member|test_cleanup_running_deleted_instances_reap
dedent|''
name|'def'
name|'test_cleanup_running_deleted_instances_reap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|','
name|'inst1'
op|','
name|'inst2'
op|'='
name|'self'
op|'.'
name|'_test_cleanup_running'
op|'('
string|"'reap'"
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_shutdown_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|'"get_by_instance_uuid"'
op|')'
newline|'\n'
comment|'# Simulate an error and make sure cleanup proceeds with next instance.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_shutdown_instance'
op|'('
name|'ctxt'
op|','
name|'inst1'
op|','
name|'bdms'
op|','
name|'notify'
op|'='
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'inst1'
op|'.'
name|'uuid'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'inst2'
op|'.'
name|'uuid'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_shutdown_instance'
op|'('
name|'ctxt'
op|','
name|'inst2'
op|','
name|'bdms'
op|','
name|'notify'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_cleanup_volumes"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'ctxt'
op|','
name|'inst1'
op|'['
string|"'uuid'"
op|']'
op|','
name|'bdms'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_running_deleted_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cleanup_running_deleted_instances_shutdown
dedent|''
name|'def'
name|'test_cleanup_running_deleted_instances_shutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|','
name|'inst1'
op|','
name|'inst2'
op|'='
name|'self'
op|'.'
name|'_test_cleanup_running'
op|'('
string|"'shutdown'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'set_bootable'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'power_off'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst1'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst2'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_running_deleted_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cleanup_running_deleted_instances_shutdown_notimpl
dedent|''
name|'def'
name|'test_cleanup_running_deleted_instances_shutdown_notimpl'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|','
name|'inst1'
op|','
name|'inst2'
op|'='
name|'self'
op|'.'
name|'_test_cleanup_running'
op|'('
string|"'shutdown'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'set_bootable'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'power_off'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst1'
op|','
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
name|'compute_manager'
op|'.'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst2'
op|','
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NotImplementedError'
op|')'
newline|'\n'
name|'compute_manager'
op|'.'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_running_deleted_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cleanup_running_deleted_instances_shutdown_error
dedent|''
name|'def'
name|'test_cleanup_running_deleted_instances_shutdown_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|','
name|'inst1'
op|','
name|'inst2'
op|'='
name|'self'
op|'.'
name|'_test_cleanup_running'
op|'('
string|"'shutdown'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'set_bootable'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'power_off'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'compute_manager'
op|'.'
name|'LOG'
op|','
string|"'exception'"
op|')'
newline|'\n'
name|'e'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|'('
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst1'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst1'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'e'
op|')'
newline|'\n'
name|'compute_manager'
op|'.'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'set_bootable'
op|'('
name|'inst2'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'inst2'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'e'
op|')'
newline|'\n'
name|'compute_manager'
op|'.'
name|'LOG'
op|'.'
name|'warn'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_running_deleted_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_running_deleted_instances
dedent|''
name|'def'
name|'test_running_deleted_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'='
string|"'host'"
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'True'
newline|'\n'
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'deleted_at'
op|'='
name|'now'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
nl|'\n'
name|'admin_context'
op|','
op|'{'
string|"'deleted'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'soft_deleted'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'timeutils'
op|','
string|"'is_older_than'"
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
name|'now'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'running_deleted_instance_timeout'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'val'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_running_deleted_instances'
op|'('
name|'admin_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'val'
op|','
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_heal_instance_info_cache
dedent|''
name|'def'
name|'_heal_instance_info_cache'
op|'('
name|'self'
op|','
nl|'\n'
name|'_get_instance_nw_info_raise'
op|'='
name|'False'
op|','
nl|'\n'
name|'_get_instance_nw_info_raise_cache'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# Update on every call for the test'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'heal_instance_info_cache_interval'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'8'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'inst_uuid'
op|'='
name|'getattr'
op|'('
name|'uuids'
op|','
string|"'db_instance_%i'"
op|'%'
name|'x'
op|')'
newline|'\n'
name|'instance_map'
op|'['
name|'inst_uuid'
op|']'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'inst_uuid'
op|','
name|'host'
op|'='
name|'CONF'
op|'.'
name|'host'
op|','
name|'created_at'
op|'='
name|'None'
op|')'
newline|'\n'
comment|"# These won't be in our instance since they're not requested"
nl|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'inst_uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'call_info'
op|'='
op|'{'
string|"'get_all_by_host'"
op|':'
number|'0'
op|','
string|"'get_by_uuid'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'get_nw_info'"
op|':'
number|'0'
op|','
string|"'expected_instance'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_host
name|'def'
name|'fake_instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'host'
op|','
nl|'\n'
name|'columns_to_join'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'columns_to_join'
op|')'
newline|'\n'
name|'return'
name|'instances'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_by_uuid
dedent|''
name|'def'
name|'fake_instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'columns_to_join'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_uuid'
name|'not'
name|'in'
name|'instance_map'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|','
string|"'extra'"
op|','
nl|'\n'
string|"'extra.flavor'"
op|']'
op|','
nl|'\n'
name|'columns_to_join'
op|')'
newline|'\n'
name|'return'
name|'instance_map'
op|'['
name|'instance_uuid'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): Override the stub in setUp()'
nl|'\n'
DECL|function|fake_get_instance_nw_info
dedent|''
name|'def'
name|'fake_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
comment|'# Note that this exception gets caught in compute/manager'
nl|'\n'
comment|'# and is ignored.  However, the below increment of'
nl|'\n'
comment|"# 'get_nw_info' won't happen, and you'll get an assert"
nl|'\n'
comment|'# failure checking it below.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'_get_instance_nw_info_raise'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'_get_instance_nw_info_raise_cache'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceInfoCacheNotFound'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_get_all_by_host'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_get_by_uuid'"
op|','
nl|'\n'
name|'fake_instance_get_by_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_instance_nw_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make an instance appear to be still Building'
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
comment|'# Make an instance appear to be Deleting'
nl|'\n'
name|'instances'
op|'['
number|'1'
op|']'
op|'['
string|"'task_state'"
op|']'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
newline|'\n'
comment|"# '0', '1' should be skipped.."
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make an instance switch hosts'
nl|'\n'
name|'instances'
op|'['
number|'4'
op|']'
op|'['
string|"'host'"
op|']'
op|'='
string|"'not-me'"
newline|'\n'
comment|'# Make an instance disappear'
nl|'\n'
name|'instance_map'
op|'.'
name|'pop'
op|'('
name|'instances'
op|'['
number|'5'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|'# Make an instance switch to be Deleting'
nl|'\n'
name|'instances'
op|'['
number|'6'
op|']'
op|'['
string|"'task_state'"
op|']'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
newline|'\n'
comment|"# '4', '5', and '6' should be skipped.."
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'7'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
comment|'# Should be no more left.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_uuids_to_heal'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# This should cause a DB query now, so get a list of instances'
nl|'\n'
comment|'# where none can be processed to make sure we handle that case'
nl|'\n'
comment|"# cleanly.   Use just '0' (Building) and '1' (Deleting)"
nl|'\n'
name|'instances'
op|'='
name|'instances'
op|'['
number|'0'
op|':'
number|'2'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
comment|'# Should have called the list once more'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
comment|'# Stays the same because we remove invalid entries from the list'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
comment|"# Stays the same because we didn't find anything to process"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_heal_instance_info_cache
dedent|''
name|'def'
name|'test_heal_instance_info_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_heal_instance_info_cache'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_heal_instance_info_cache_with_instance_exception
dedent|''
name|'def'
name|'test_heal_instance_info_cache_with_instance_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'_get_instance_nw_info_raise'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_heal_instance_info_cache_with_info_cache_exception
dedent|''
name|'def'
name|'test_heal_instance_info_cache_with_info_cache_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'_get_instance_nw_info_raise_cache'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.InstanceList.get_by_filters'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.compute.api.API.unrescue'"
op|')'
newline|'\n'
DECL|member|test_poll_rescued_instances
name|'def'
name|'test_poll_rescued_instances'
op|'('
name|'self'
op|','
name|'unrescue'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timed_out_time'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'minutes'
op|'='
number|'5'
op|')'
newline|'\n'
name|'not_timed_out_time'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
op|'['
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_1'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timed_out_time'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_2'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'timed_out_time'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_3'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
name|'launched_at'
op|'='
name|'not_timed_out_time'
op|')'
op|']'
newline|'\n'
name|'unrescued_instances'
op|'='
op|'{'
name|'uuids'
op|'.'
name|'pool_instance_1'
op|':'
name|'False'
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'pool_instance_2'
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_filters
name|'def'
name|'fake_instance_get_all_by_filters'
op|'('
name|'context'
op|','
name|'filters'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'None'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|'"system_metadata"'
op|']'
op|','
name|'expected_attrs'
op|')'
newline|'\n'
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
dedent|''
name|'get'
op|'.'
name|'side_effect'
op|'='
name|'fake_instance_get_all_by_filters'
newline|'\n'
nl|'\n'
DECL|function|fake_unrescue
name|'def'
name|'fake_unrescue'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unrescued_instances'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'unrescue'
op|'.'
name|'side_effect'
op|'='
name|'fake_unrescue'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'rescue_timeout'
op|'='
number|'60'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_rescued_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'unrescued_instances'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.InstanceList.get_by_filters'"
op|')'
newline|'\n'
DECL|member|test_poll_rebooting_instances
name|'def'
name|'test_poll_rebooting_instances'
op|'('
name|'self'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reboot_timeout'
op|'='
number|'60'
newline|'\n'
name|'updated_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'minutes'
op|'='
number|'5'
op|')'
newline|'\n'
name|'to_poll'
op|'='
op|'['
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_1'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
name|'updated_at'
op|'='
name|'updated_at'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_2'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'updated_at'
op|'='
name|'updated_at'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'pool_instance_3'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'updated_at'
op|'='
name|'updated_at'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'reboot_timeout'
op|'='
name|'reboot_timeout'
op|')'
newline|'\n'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'to_poll'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
op|'('
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'poll_rebooting_instances'"
nl|'\n'
op|')'
op|')'
name|'as'
name|'mock_poll'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_rebooting_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'mock_poll'
op|'.'
name|'assert_called_with'
op|'('
name|'reboot_timeout'
op|','
name|'to_poll'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'filters'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'fake-mini'"
op|','
nl|'\n'
string|"'task_state'"
op|':'
op|'['
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|']'
op|'}'
newline|'\n'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'ctxt'
op|','
name|'filters'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
op|']'
op|','
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_unconfirmed_resizes
dedent|''
name|'def'
name|'test_poll_unconfirmed_resizes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_1'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_none'
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_2'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_3'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_4'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_5'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
comment|'# The expceted migration result will be None instead of error'
nl|'\n'
comment|'# since _poll_unconfirmed_resizes will not change it'
nl|'\n'
comment|'# when the instance vm state is RESIZED and task state'
nl|'\n'
comment|'# is deleting, see bug 1301696 for more detail'
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_6'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'task_state'
op|'='
string|"'deleting'"
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_7'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
name|'task_state'
op|'='
string|"'soft-deleting'"
op|')'
op|','
nl|'\n'
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'migration_instance_8'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
string|"'resize_finish'"
op|')'
op|']'
newline|'\n'
name|'expected_migration_status'
op|'='
op|'{'
name|'uuids'
op|'.'
name|'migration_instance_1'
op|':'
string|"'confirmed'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_none'
op|':'
string|"'error'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_2'
op|':'
string|"'error'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_3'
op|':'
string|"'error'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_4'
op|':'
name|'None'
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_5'
op|':'
string|"'error'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_6'
op|':'
name|'None'
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_7'
op|':'
name|'None'
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'migration_instance_8'
op|':'
name|'None'
op|'}'
newline|'\n'
name|'migrations'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
op|','
name|'instance'
name|'in'
name|'enumerate'
op|'('
name|'instances'
op|','
name|'start'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_mig'
op|'='
name|'test_migration'
op|'.'
name|'fake_db_migration'
op|'('
op|')'
newline|'\n'
name|'fake_mig'
op|'.'
name|'update'
op|'('
op|'{'
string|"'id'"
op|':'
name|'i'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'migrations'
op|'.'
name|'append'
op|'('
name|'fake_mig'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_by_uuid
dedent|''
name|'def'
name|'fake_instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
name|'None'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'metadata'"
op|','
name|'columns_to_join'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'system_metadata'"
op|','
name|'columns_to_join'
op|')'
newline|'\n'
comment|'# raise InstanceNotFound exception for non-existing instance'
nl|'\n'
comment|'# represented by UUID: uuids.migration_instance_none'
nl|'\n'
name|'if'
name|'instance_uuid'
op|'=='
name|'uuids'
op|'.'
name|'db_instance_nonexist'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'=='
name|'instance_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|function|fake_migration_get_unconfirmed_by_dest_compute
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_migration_get_unconfirmed_by_dest_compute'
op|'('
name|'context'
op|','
nl|'\n'
name|'resize_confirm_window'
op|','
name|'dest_compute'
op|','
name|'use_slave'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dest_compute'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'migrations'
newline|'\n'
nl|'\n'
DECL|function|fake_migration_update
dedent|''
name|'def'
name|'fake_migration_update'
op|'('
name|'context'
op|','
name|'mid'
op|','
name|'updates'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'migration'
op|'['
string|"'id'"
op|']'
op|'=='
name|'mid'
op|':'
newline|'\n'
indent|'                    '
name|'migration'
op|'.'
name|'update'
op|'('
name|'updates'
op|')'
newline|'\n'
name|'return'
name|'migration'
newline|'\n'
nl|'\n'
DECL|function|fake_confirm_resize
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'migration'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
comment|'# raise exception for uuids.migration_instance_4 to check'
nl|'\n'
comment|"# migration status does not get set to 'error' on confirm_resize"
nl|'\n'
comment|'# failure.'
nl|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'=='
name|'uuids'
op|'.'
name|'migration_instance_4'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|"'bomb'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'migration'
op|')'
newline|'\n'
name|'for'
name|'migration2'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
op|'('
name|'migration2'
op|'['
string|"'instance_uuid'"
op|']'
op|'=='
nl|'\n'
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'migration2'
op|'['
string|"'status'"
op|']'
op|'='
string|"'confirmed'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.instance_get_by_uuid'"
op|','
nl|'\n'
name|'fake_instance_get_by_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.migration_get_unconfirmed_by_dest_compute'"
op|','
nl|'\n'
name|'fake_migration_get_unconfirmed_by_dest_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.migration_update'"
op|','
name|'fake_migration_update'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_api'
op|','
string|"'confirm_resize'"
op|','
nl|'\n'
name|'fake_confirm_resize'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fetch_instance_migration_status
name|'def'
name|'fetch_instance_migration_status'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
op|'=='
name|'instance_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'migration'
op|'['
string|"'status'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'flags'
op|'('
name|'resize_confirm_window'
op|'='
number|'60'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_unconfirmed_resizes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance_uuid'
op|','
name|'status'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'expected_migration_status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'status'
op|','
nl|'\n'
name|'fetch_instance_migration_status'
op|'('
name|'instance_uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_build_timeout_mixed_instances
dedent|''
dedent|''
name|'def'
name|'test_instance_build_timeout_mixed_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Tests that instances which failed to build within the configured'
nl|'\n'
comment|'# instance_build_timeout value are set to error state.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_build_timeout'
op|'='
number|'30'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'created_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
op|'-'
number|'60'
op|')'
newline|'\n'
nl|'\n'
name|'filters'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
newline|'\n'
comment|'# these are the ones that are expired'
nl|'\n'
name|'old_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|','
string|"'created_at'"
op|':'
name|'created_at'
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
name|'filters'
op|')'
newline|'\n'
name|'old_instances'
op|'.'
name|'append'
op|'('
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|'**'
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# not expired'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'list'
op|'('
name|'old_instances'
op|')'
comment|'# copy the contents of old_instances'
newline|'\n'
name|'new_instance'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'sort_key'
op|'='
string|"'created_at'"
newline|'\n'
name|'sort_dir'
op|'='
string|"'desc'"
newline|'\n'
name|'new_instance'
op|'.'
name|'update'
op|'('
name|'filters'
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
op|'**'
name|'new_instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'api'
op|','
nl|'\n'
string|"'instance_get_all_by_filters'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'instances'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
op|','
nl|'\n'
op|')'
name|'as'
op|'('
nl|'\n'
name|'instance_get_all_by_filters'
op|','
nl|'\n'
name|'conductor_instance_update'
nl|'\n'
op|')'
op|':'
newline|'\n'
comment|'# run the code'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_instance_build_time'
op|'('
name|'ctxt'
op|')'
newline|'\n'
comment|'# check our assertions'
nl|'\n'
name|'instance_get_all_by_filters'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'filters'
op|','
nl|'\n'
name|'sort_key'
op|','
nl|'\n'
name|'sort_dir'
op|','
nl|'\n'
name|'marker'
op|'='
name|'None'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'limit'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'conductor_instance_update'
op|'.'
name|'mock_calls'
op|','
nl|'\n'
name|'testtools_matchers'
op|'.'
name|'HasLength'
op|'('
name|'len'
op|'('
name|'old_instances'
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'inst'
name|'in'
name|'old_instances'
op|':'
newline|'\n'
indent|'                '
name|'conductor_instance_update'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_resource_tracker_fail
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_get_resource_tracker_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_resource_tracker'
op|','
nl|'\n'
string|"'invalidnodename'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
DECL|member|test_instance_update_host_check
name|'def'
name|'test_instance_update_host_check'
op|'('
name|'self'
op|','
name|'mock_save'
op|')'
op|':'
newline|'\n'
comment|"# make sure rt usage doesn't happen if the host or node is different"
nl|'\n'
DECL|function|fail_get
indent|'        '
name|'def'
name|'fail_get'
op|'('
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"wrong host/node"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_resource_tracker'"
op|','
name|'fail_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'someotherhost'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'vcpus'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'node'"
op|':'
string|"'someothernode'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'vcpus'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'someotherhost'"
op|','
string|"'node'"
op|':'
string|"'someothernode'"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'vcpus'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.MigrationList.get_by_filters'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration.save'"
op|')'
newline|'\n'
DECL|member|test_destroy_evacuated_instance_on_shared_storage
name|'def'
name|'test_destroy_evacuated_instance_on_shared_storage'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
nl|'\n'
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# instances in central db'
nl|'\n'
name|'instances'
op|'='
op|'['
nl|'\n'
comment|'# those are still related to this host'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# those are already been evacuated to other host'
nl|'\n'
name|'evacuated_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'otherhost'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'instance_uuid'
op|'='
name|'evacuated_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
op|'['
name|'migration'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'evacuated_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_is_instance_storage_shared'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
nl|'\n'
name|'fake_context'
op|','
op|'{'
string|"'deleted'"
op|':'
name|'False'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_network_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_bdi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_is_instance_storage_shared'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'fake_context'
op|','
name|'evacuated_instance'
op|','
nl|'\n'
string|"'fake_network_info'"
op|','
nl|'\n'
string|"'fake_bdi'"
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'status'"
op|':'
op|'['
string|"'accepted'"
op|','
string|"'done'"
op|']'
op|','
nl|'\n'
string|"'migration_type'"
op|':'
string|"'evacuation'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.MigrationList.get_by_filters'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration.save'"
op|')'
newline|'\n'
DECL|member|test_destroy_evacuated_instance_with_disks
name|'def'
name|'test_destroy_evacuated_instance_with_disks'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
nl|'\n'
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# instances in central db'
nl|'\n'
name|'instances'
op|'='
op|'['
nl|'\n'
comment|'# those are still related to this host'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# those are already been evacuated to other host'
nl|'\n'
name|'evacuated_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'otherhost'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'instance_uuid'
op|'='
name|'evacuated_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
op|'['
name|'migration'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'evacuated_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_instance_shared_storage_local'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'check_instance_shared_storage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_instance_shared_storage_cleanup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
nl|'\n'
name|'fake_context'
op|','
op|'{'
string|"'deleted'"
op|':'
name|'False'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_network_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_bdi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_local'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'filename'"
op|':'
string|"'tmpfilename'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'check_instance_shared_storage'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'evacuated_instance'
op|','
nl|'\n'
op|'{'
string|"'filename'"
op|':'
string|"'tmpfilename'"
op|'}'
op|','
name|'host'
op|'='
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_cleanup'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'filename'"
op|':'
string|"'tmpfilename'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'fake_context'
op|','
name|'evacuated_instance'
op|','
nl|'\n'
string|"'fake_network_info'"
op|','
nl|'\n'
string|"'fake_bdi'"
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.MigrationList.get_by_filters'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Migration.save'"
op|')'
newline|'\n'
DECL|member|test_destroy_evacuated_instance_not_implemented
name|'def'
name|'test_destroy_evacuated_instance_not_implemented'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
nl|'\n'
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# instances in central db'
nl|'\n'
name|'instances'
op|'='
op|'['
nl|'\n'
comment|'# those are still related to this host'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# those are already been evacuated to other host'
nl|'\n'
name|'evacuated_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'otherhost'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'instance_uuid'
op|'='
name|'evacuated_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
op|'['
name|'migration'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'evacuated_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_instance_shared_storage_local'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'check_instance_shared_storage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_instance_shared_storage_cleanup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
nl|'\n'
name|'fake_context'
op|','
op|'{'
string|"'deleted'"
op|':'
name|'False'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_network_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_block_device_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_bdi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_instance_shared_storage_local'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'evacuated_instance'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'fake_context'
op|','
name|'evacuated_instance'
op|','
nl|'\n'
string|"'fake_network_info'"
op|','
nl|'\n'
string|"'fake_bdi'"
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_complete_partial_deletion
dedent|''
name|'def'
name|'test_complete_partial_deletion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'id'
op|'='
number|'1'
newline|'\n'
name|'instance'
op|'.'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'instance'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'='
op|'{'
string|"'fake_key'"
op|':'
string|"'fake_value'"
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'vcpus'
op|'='
number|'1'
newline|'\n'
name|'instance'
op|'.'
name|'memory_mb'
op|'='
number|'1'
newline|'\n'
name|'instance'
op|'.'
name|'project_id'
op|'='
string|"'fake-prj'"
newline|'\n'
name|'instance'
op|'.'
name|'user_id'
op|'='
string|"'fake-user'"
newline|'\n'
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_destroy
name|'def'
name|'fake_destroy'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'instance'
op|','
string|"'destroy'"
op|','
name|'fake_destroy'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.db.block_device_mapping_get_all_by_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_complete_deletion'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'reserve'"
op|','
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_complete_partial_deletion'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
number|'0'
op|','
name|'instance'
op|'.'
name|'deleted'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_init_instance_for_partial_deletion
dedent|''
name|'def'
name|'test_init_instance_for_partial_deletion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'admin_context'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'id'
op|'='
number|'1'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'False'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|function|fake_partial_deletion
name|'def'
name|'fake_partial_deletion'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'['
string|"'deleted'"
op|']'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_complete_partial_deletion'"
op|','
nl|'\n'
name|'fake_partial_deletion'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
number|'0'
op|','
name|'instance'
op|'['
string|"'deleted'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_partial_deletion_raise_exception
dedent|''
name|'def'
name|'test_partial_deletion_raise_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'admin_context'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'instance'
op|'.'
name|'deleted'
op|'='
name|'False'
newline|'\n'
name|'instance'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_complete_partial_deletion'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_complete_partial_deletion'
op|'('
nl|'\n'
name|'admin_context'
op|','
name|'instance'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'ValueError'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
name|'admin_context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_fixed_ip_updates_instance_updated_at
dedent|''
name|'def'
name|'test_add_remove_fixed_ip_updates_instance_updated_at'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_noop
indent|'        '
name|'def'
name|'_noop'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'add_fixed_ip_to_instance'"
op|','
name|'_noop'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'remove_fixed_ip_from_instance'"
op|','
name|'_noop'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'updated_at_1'
op|'='
name|'instance'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'updated_at_2'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'updated_at_3'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
nl|'\n'
name|'updated_ats'
op|'='
op|'('
name|'updated_at_1'
op|','
name|'updated_at_2'
op|','
name|'updated_at_3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'updated_ats'
op|')'
op|','
name|'len'
op|'('
name|'set'
op|'('
name|'updated_ats'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_pending_deletes_for_soft_deleted_instances
dedent|''
name|'def'
name|'test_no_pending_deletes_for_soft_deleted_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'0'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_run_pending_deletes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'cleaned'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reclaim_queued_deletes
dedent|''
name|'def'
name|'test_reclaim_queued_deletes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'3600'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Active'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deleted not old enough'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deleted old enough (only this one should be reclaimed)'
nl|'\n'
name|'deleted_at'
op|'='
op|'('
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
nl|'\n'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|','
name|'minutes'
op|'='
number|'5'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'deleted_at'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restoring'
nl|'\n'
comment|'# NOTE(hanlind): This specifically tests for a race condition'
nl|'\n'
comment|'# where restoring a previously soft deleted instance sets'
nl|'\n'
comment|'# deleted_at back to None, causing reclaim to think it can be'
nl|'\n'
comment|'# deleted, see LP #1186243.'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'RESTORING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_delete_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reclaim_queued_deletes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reclaim_queued_deletes_continue_on_error
dedent|''
name|'def'
name|'test_reclaim_queued_deletes_continue_on_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that reclaim continues on error.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'3600'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'deleted_at'
op|'='
op|'('
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
nl|'\n'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|','
name|'minutes'
op|'='
number|'5'
op|')'
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'deleted_at'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'deleted_at'
op|'}'
op|')'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance1'
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
nl|'\n'
string|"'get_by_filters'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deleted_old_enough'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_delete_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'objects'
op|'.'
name|'InstanceList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'instance_obj'
op|'.'
name|'INSTANCE_DEFAULT_FIELDS'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instances'
op|')'
newline|'\n'
nl|'\n'
comment|'# The first instance delete fails.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deleted_old_enough'
op|'('
name|'instance1'
op|','
number|'3600'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance1'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'ctxt'
op|','
name|'instance1'
op|','
nl|'\n'
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'none_quotas'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'test'
op|'.'
name|'TestingException'
op|')'
newline|'\n'
nl|'\n'
comment|'# The second instance delete that follows.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deleted_old_enough'
op|'('
name|'instance2'
op|','
number|'3600'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance2'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'ctxt'
op|','
name|'instance2'
op|','
nl|'\n'
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'none_quotas'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reclaim_queued_deletes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_sync_power_states
dedent|''
name|'def'
name|'test_sync_power_states'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_sync_instance_power_state'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Check to make sure task continues on error.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'uuids'
op|'.'
name|'instance'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'uuids'
op|'.'
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_instance_power_state'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_power_states'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_lifecycle_event
dedent|''
name|'def'
name|'_test_lifecycle_event'
op|'('
name|'self'
op|','
name|'lifecycle_event'
op|','
name|'vm_power_state'
op|','
nl|'\n'
name|'is_actual_state'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_sync_instance_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
nl|'\n'
name|'actual_state'
op|'='
op|'('
name|'vm_power_state'
nl|'\n'
name|'if'
name|'vm_power_state'
name|'is'
name|'not'
name|'None'
name|'and'
name|'is_actual_state'
nl|'\n'
name|'else'
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|"'uuid'"
op|','
name|'uuid'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'actual_state'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'actual_state'
op|'=='
name|'vm_power_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_instance_power_state'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'ContainsKeyValue'
op|'('
string|"'uuid'"
op|','
name|'uuid'
op|')'
op|','
nl|'\n'
name|'vm_power_state'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'handle_events'
op|'('
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
name|'uuid'
op|','
name|'lifecycle_event'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lifecycle_events
dedent|''
name|'def'
name|'test_lifecycle_events'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'is_actual_state'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STARTED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_PAUSED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'PAUSED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_RESUMED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_lifecycle_event'
op|'('
op|'-'
number|'1'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lifecycle_event_non_existent_instance
dedent|''
name|'def'
name|'test_lifecycle_event_non_existent_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# No error raised for non-existent instance because of inherent race'
nl|'\n'
comment|'# between database updates and hypervisor events. See bug #1180501.'
nl|'\n'
indent|'        '
name|'event_instance'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
string|"'does-not-exist'"
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'handle_events'
op|'('
name|'event_instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Migration'
op|','
string|"'get_by_id'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_confirm_resize_roll_back_quota_migration_not_found
name|'def'
name|'test_confirm_resize_roll_back_quota_migration_not_found'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_rollback'
op|','
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'finished'"
newline|'\n'
name|'migration'
op|'.'
name|'id'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_get_by_id'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'MigrationNotFound'
op|'('
nl|'\n'
name|'migration_id'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_rollback'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance_obj'
op|'.'
name|'Instance'
op|','
string|"'get_by_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_confirm_resize_roll_back_quota_instance_not_found
name|'def'
name|'test_confirm_resize_roll_back_quota_instance_not_found'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_rollback'
op|','
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'finished'"
newline|'\n'
name|'migration'
op|'.'
name|'id'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_get_by_id'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_rollback'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Migration'
op|','
string|"'get_by_id'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_confirm_resize_roll_back_quota_status_confirmed
name|'def'
name|'test_confirm_resize_roll_back_quota_status_confirmed'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_rollback'
op|','
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'confirmed'"
newline|'\n'
name|'migration'
op|'.'
name|'id'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'='
name|'migration'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_rollback'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Migration'
op|','
string|"'get_by_id'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Quotas'
op|','
string|"'rollback'"
op|')'
newline|'\n'
DECL|member|test_confirm_resize_roll_back_quota_status_dummy
name|'def'
name|'test_confirm_resize_roll_back_quota_status_dummy'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_rollback'
op|','
name|'mock_get_by_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'dummy'"
newline|'\n'
name|'migration'
op|'.'
name|'id'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_get_by_id'
op|'.'
name|'return_value'
op|'='
name|'migration'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_rollback'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allow_confirm_resize_on_instance_in_deleting_task_state
dedent|''
name|'def'
name|'test_allow_confirm_resize_on_instance_in_deleting_task_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'old_type'
op|'='
name|'instance'
op|'.'
name|'flavor'
newline|'\n'
name|'new_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'new_type'
newline|'\n'
name|'instance'
op|'.'
name|'old_flavor'
op|'='
name|'old_type'
newline|'\n'
name|'instance'
op|'.'
name|'new_flavor'
op|'='
name|'new_type'
newline|'\n'
nl|'\n'
name|'fake_rt'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_drop_move_claim
name|'def'
name|'fake_drop_move_claim'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_get_resource_tracker
dedent|''
name|'def'
name|'fake_get_resource_tracker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fake_rt'
newline|'\n'
nl|'\n'
DECL|function|fake_setup_networks_on_host
dedent|''
name|'def'
name|'fake_setup_networks_on_host'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_rt'
op|','
string|"'drop_move_claim'"
op|','
name|'fake_drop_move_claim'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_resource_tracker'"
op|','
nl|'\n'
name|'fake_get_resource_tracker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
string|"'setup_networks_on_host'"
op|','
nl|'\n'
name|'fake_setup_networks_on_host'
op|')'
newline|'\n'
nl|'\n'
name|'migration'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'migration'
op|'.'
name|'status'
op|'='
string|"'finished'"
newline|'\n'
name|'migration'
op|'.'
name|'migration_type'
op|'='
string|"'resize'"
newline|'\n'
name|'migration'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'DELETING'
newline|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration'
op|','
name|'reservations'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_and_bdm_for_dev_defaults_tests
dedent|''
name|'def'
name|'_get_instance_and_bdm_for_dev_defaults_tests'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|'}'
op|')'
newline|'\n'
name|'block_device_mapping'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'instance'
op|','
name|'block_device_mapping'
newline|'\n'
nl|'\n'
DECL|member|test_default_block_device_names_empty_instance_root_dev
dedent|''
name|'def'
name|'test_default_block_device_names_empty_instance_root_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_and_bdm_for_dev_defaults_tests'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'root_device_name'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_default_device_names_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_device_names_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
string|"'/dev/vda'"
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|','
nl|'\n'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_block_device_names'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/vda'"
op|','
name|'instance'
op|'.'
name|'root_device_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_block_device_names_empty_root_device
dedent|''
name|'def'
name|'test_default_block_device_names_empty_root_device'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_and_bdm_for_dev_defaults_tests'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_default_device_names_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'save'"
op|')'
newline|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|'.'
name|'save'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_device_names_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
string|"'/dev/vda'"
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|','
nl|'\n'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_block_device_names'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_block_device_names_no_root_device
dedent|''
name|'def'
name|'test_default_block_device_names_no_root_device'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'bdms'
op|'='
name|'self'
op|'.'
name|'_get_instance_and_bdm_for_dev_defaults_tests'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'root_device_name'
op|'='
name|'None'
newline|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'save'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_default_root_device_name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_default_device_names_for_instance'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_root_device_name'
op|'('
name|'instance'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'/dev/vda'"
op|')'
newline|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|'.'
name|'save'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_device_names_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
string|"'/dev/vda'"
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|','
nl|'\n'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_block_device_names'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/vda'"
op|','
name|'instance'
op|'.'
name|'root_device_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_block_device_names_with_blank_volumes
dedent|''
name|'def'
name|'test_default_block_device_names_with_blank_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'root_volume'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|')'
newline|'\n'
name|'blank_volume1'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|'}'
op|')'
op|')'
newline|'\n'
name|'blank_volume2'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|'}'
op|')'
op|')'
newline|'\n'
name|'ephemeral'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'4'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'5'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
nl|'\n'
op|'}'
op|')'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'root_volume'
op|','
name|'blank_volume1'
op|','
name|'blank_volume2'
op|','
nl|'\n'
name|'ephemeral'
op|','
name|'swap'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_default_root_device_name'"
op|','
nl|'\n'
name|'return_value'
op|'='
string|"'/dev/vda'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'save'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_default_device_names_for_instance'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'default_root_device'
op|','
name|'object_save'
op|','
nl|'\n'
name|'default_device_names'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_default_block_device_names'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'default_root_device'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'bdms'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/vda'"
op|','
name|'instance'
op|'.'
name|'root_device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'object_save'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'default_device_names'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
nl|'\n'
string|"'/dev/vda'"
op|','
op|'['
name|'bdms'
op|'['
op|'-'
number|'2'
op|']'
op|']'
op|','
op|'['
name|'bdms'
op|'['
op|'-'
number|'1'
op|']'
op|']'
op|','
nl|'\n'
op|'['
name|'bdm'
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|'['
op|':'
op|'-'
number|'2'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reserve_block_device_name
dedent|''
dedent|''
name|'def'
name|'test_reserve_block_device_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
op|'{'
string|"'context'"
op|':'
name|'self'
op|'.'
name|'context'
op|','
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'uuids'
op|'.'
name|'image_instance'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reserve_block_device_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'virtio'"
op|','
string|"'disk'"
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'list'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'vol_bdm'
op|'='
name|'bdms'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'source_type'
op|','
string|"'volume'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'vol_bdm'
op|'.'
name|'boot_index'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'vol_bdm'
op|'.'
name|'guest_format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'destination_type'
op|','
string|"'volume'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'device_name'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'volume_id'
op|','
name|'uuids'
op|'.'
name|'block_device_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'disk_bus'
op|','
string|"'virtio'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vol_bdm'
op|'.'
name|'device_type'
op|','
string|"'disk'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reserve_block_device_name_with_iso_instance
dedent|''
name|'def'
name|'test_reserve_block_device_name_with_iso_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'root_device_name'"
op|':'
string|"'/dev/hda'"
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'**'
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake-image-id'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/hda'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reserve_block_device_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|','
nl|'\n'
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
nl|'\n'
string|"'ide'"
op|','
string|"'disk'"
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'list'
op|'('
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'bdms'
op|')'
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'vol_bdm'
op|'='
name|'bdms'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'volume'"
op|','
name|'vol_bdm'
op|'.'
name|'source_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'volume'"
op|','
name|'vol_bdm'
op|'.'
name|'destination_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/hdb'"
op|','
name|'vol_bdm'
op|'.'
name|'device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'uuids'
op|'.'
name|'block_device_instance'
op|','
name|'vol_bdm'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ide'"
op|','
name|'vol_bdm'
op|'.'
name|'disk_bus'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'disk'"
op|','
name|'vol_bdm'
op|'.'
name|'device_type'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get_snapshot'"
op|')'
newline|'\n'
DECL|member|test_quiesce
name|'def'
name|'test_quiesce'
op|'('
name|'self'
op|','
name|'mock_snapshot_get'
op|')'
op|':'
newline|'\n'
comment|'# ensure instance can be quiesced and unquiesced'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'mapping'
op|'='
op|'['
op|'{'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'snapshot_id'"
op|':'
string|"'fake-id1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'snapshot_id'"
op|':'
string|"'fake-id2'"
op|'}'
op|']'
newline|'\n'
comment|'# unquiesce should wait until volume snapshots are completed'
nl|'\n'
name|'mock_snapshot_get'
op|'.'
name|'side_effect'
op|'='
op|'['
op|'{'
string|"'status'"
op|':'
string|"'creating'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'status'"
op|':'
string|"'available'"
op|'}'
op|']'
op|'*'
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'quiesce_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unquiesce_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'mock_snapshot_get'
op|'.'
name|'assert_any_call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|"'fake-id1'"
op|')'
newline|'\n'
name|'mock_snapshot_get'
op|'.'
name|'assert_any_call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|"'fake-id2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'mock_snapshot_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_fault_message_no_rescheduled_details_without_retry
dedent|''
name|'def'
name|'test_instance_fault_message_no_rescheduled_details_without_retry'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""This test simulates a spawn failure with no retry data.\n\n        If driver spawn raises an exception and there is no retry data\n        available, the instance fault message should not contain any details\n        about rescheduling. The fault message field is limited in size and a\n        long message about rescheduling displaces the original error message.\n        """'
newline|'\n'
DECL|class|TestException
name|'class'
name|'TestException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
name|'as'
name|'mock_spawn'
op|':'
newline|'\n'
indent|'            '
name|'mock_spawn'
op|'.'
name|'side_effect'
op|'='
name|'TestException'
op|'('
string|"'Preserve this'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
DECL|variable|block_device_mapping
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Preserve this'"
op|','
name|'instance'
op|'.'
name|'fault'
op|'.'
name|'message'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPITestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAPITestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_get_nw_info
indent|'        '
name|'def'
name|'fake_get_nw_info'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ctxt'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ComputeAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'SpawnIsSynchronousFixture'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'='
op|'('
nl|'\n'
name|'openstack_driver'
op|'.'
name|'get_openstack_security_group_driver'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
nl|'\n'
name|'security_group_api'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
string|"'f9000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'obj'
op|','
name|'context'
op|','
name|'image_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'fake_image'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fake_show'
op|'='
name|'fake_show'
newline|'\n'
nl|'\n'
comment|'# Mock out build_instances and rebuild_instance since nothing in these'
nl|'\n'
comment|'# tests should need those to actually run. We do this to avoid'
nl|'\n'
comment|'# possible races with other tests that actually test those methods'
nl|'\n'
comment|'# and mock things out within them, like conductor tests.'
nl|'\n'
name|'self'
op|'.'
name|'build_instances_mock'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'autospec'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_task_api'
op|'.'
name|'build_instances'
op|'='
name|'self'
op|'.'
name|'build_instances_mock'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'rebuild_instance_mock'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'autospec'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_task_api'
op|'.'
name|'rebuild_instance'
op|'='
name|'self'
op|'.'
name|'rebuild_instance_mock'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|','
name|'services'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'instance'
op|','
name|'instance_uuid'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_ram
dedent|''
name|'def'
name|'test_create_with_too_little_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too little memory.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorMemoryTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type memory and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_disk
dedent|''
name|'def'
name|'test_create_with_too_little_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too little disk space.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanMinDisk'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type disk space and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_large_image
dedent|''
name|'def'
name|'test_create_with_too_large_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too little disk space.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'size'"
op|']'
op|'='
string|"'1073741825'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanImage'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reduce image to 1 GB limit and ensure it works'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'size'"
op|']'
op|'='
string|"'1073741824'"
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_just_enough_ram_and_disk
dedent|''
name|'def'
name|'test_create_just_enough_ram_and_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with just enough ram and disk space.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'name'"
op|']'
op|'='
string|"'fake_name'"
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_no_ram_and_disk_reqs
dedent|''
name|'def'
name|'test_create_with_no_ram_and_disk_reqs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with no min_ram or min_disk.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_bdm_from_flavor
dedent|''
name|'def'
name|'test_create_bdm_from_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type_params'
op|'='
op|'{'
nl|'\n'
string|"'flavorid'"
op|':'
string|"'test'"
op|','
string|"'name'"
op|':'
string|"'test'"
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'1024'
op|','
string|"'ephemeral_gb'"
op|':'
number|'1'
op|','
string|"'root_gb'"
op|':'
number|'1'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_create_instance_type'
op|'('
name|'params'
op|'='
name|'instance_type_params'
op|')'
newline|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'ephemeral'
op|'='
name|'list'
op|'('
name|'filter'
op|'('
name|'block_device'
op|'.'
name|'new_format_is_ephemeral'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'ephemeral'
op|')'
op|')'
newline|'\n'
name|'swap'
op|'='
name|'list'
op|'('
name|'filter'
op|'('
name|'block_device'
op|'.'
name|'new_format_is_swap'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'swap'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1024'
op|','
name|'swap'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'ephemeral'
op|'['
number|'0'
op|']'
op|'.'
name|'volume_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_deleted_image
dedent|''
name|'def'
name|'test_create_with_deleted_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# If we're given a deleted image by glance, we should not be able to"
nl|'\n'
comment|'# build from it'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'name'"
op|']'
op|'='
string|"'fake_name'"
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'status'"
op|']'
op|'='
string|"'DELETED'"
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'expected_message'
op|'='
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ImageNotActive'
op|'.'
name|'msg_fmt'
op|'%'
op|'{'
string|"'image_id'"
op|':'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'expected_message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hardware.numa_get_constraints'"
op|')'
newline|'\n'
DECL|member|test_create_with_numa_topology
name|'def'
name|'test_create_with_numa_topology'
op|'('
name|'self'
op|','
name|'numa_constraints_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'numa_topology'
op|'='
name|'objects'
op|'.'
name|'InstanceNUMATopology'
op|'('
nl|'\n'
name|'cells'
op|'='
op|'['
name|'objects'
op|'.'
name|'InstanceNUMACell'
op|'('
nl|'\n'
name|'id'
op|'='
number|'0'
op|','
name|'cpuset'
op|'='
name|'set'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
op|','
name|'memory'
op|'='
number|'512'
op|')'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'InstanceNUMACell'
op|'('
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cpuset'
op|'='
name|'set'
op|'('
op|'['
number|'3'
op|','
number|'4'
op|']'
op|')'
op|','
name|'memory'
op|'='
number|'512'
op|')'
op|']'
op|')'
newline|'\n'
name|'numa_constraints_mock'
op|'.'
name|'return_value'
op|'='
name|'numa_topology'
newline|'\n'
nl|'\n'
name|'instances'
op|','
name|'resv_id'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'numa_constraints_mock'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'inst_type'
op|','
name|'test'
op|'.'
name|'MatchType'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'numa_topology'
op|'.'
name|'cells'
op|'['
number|'0'
op|']'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'numa_topology'
op|'.'
name|'cells'
op|'['
number|'0'
op|']'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'numa_topology'
op|'.'
name|'cells'
op|'['
number|'1'
op|']'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'numa_topology'
op|'.'
name|'cells'
op|'['
number|'1'
op|']'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_defaults_display_name
dedent|''
name|'def'
name|'test_create_instance_defaults_display_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that an instance cannot be created without a display_name.'
nl|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
name|'dict'
op|'('
op|')'
op|','
name|'dict'
op|'('
name|'display_name'
op|'='
name|'None'
op|')'
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
string|"'f5000000-0000-0000-0000-000000000000'"
op|','
op|'**'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_sets_system_metadata
dedent|''
dedent|''
name|'def'
name|'test_create_instance_sets_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure image properties are copied into system metadata.'
nl|'\n'
indent|'        '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
string|"'f5000000-0000-0000-0000-000000000000'"
op|')'
newline|'\n'
nl|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'image_props'
op|'='
op|'{'
string|"'image_kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'meow'"
op|','
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'six'
op|'.'
name|'iteritems'
op|'('
name|'image_props'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'key'
op|','
name|'sys_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
name|'sys_metadata'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_saves_flavor
dedent|''
dedent|''
name|'def'
name|'test_create_saves_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type'
op|'.'
name|'flavorid'
op|','
name|'instance'
op|'.'
name|'flavor'
op|'.'
name|'flavorid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'instance_type_id'"
op|','
name|'instance'
op|'.'
name|'system_metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_security_groups
dedent|''
name|'def'
name|'test_create_instance_associates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates security groups.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'groups_for_instance'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'groups_for_instance'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'group'
op|'.'
name|'id'
op|','
name|'groups_for_instance'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'group_with_instances'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'group'
op|'.'
name|'id'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'instances'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'group_with_instances'
op|'.'
name|'instances'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_invalid_security_group_raises
dedent|''
name|'def'
name|'test_create_instance_with_invalid_security_group_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'pre_build_len'
op|'='
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'SecurityGroupNotFoundForProject'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'this_is_a_fake_sec_group'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pre_build_len'
op|','
nl|'\n'
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_large_user_data
dedent|''
name|'def'
name|'test_create_with_large_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too much user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceUserDataTooLarge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
name|'user_data'
op|'='
op|'('
string|"b'1'"
op|'*'
number|'65536'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_malformed_user_data
dedent|''
name|'def'
name|'test_create_with_malformed_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with malformed user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceUserDataMalformed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
name|'user_data'
op|'='
string|"b'banana'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_base64_user_data
dedent|''
name|'def'
name|'test_create_with_base64_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with ok much user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): a string of length 48510 encodes to 65532 characters of'
nl|'\n'
comment|'# base64'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'user_data'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
string|"b'1'"
op|'*'
number|'48510'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_populate_instance_for_create
dedent|''
name|'def'
name|'test_populate_instance_for_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_options'
op|'='
op|'{'
string|"'image_ref'"
op|':'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'system_metadata'"
op|':'
op|'{'
string|"'fake'"
op|':'
string|"'value'"
op|'}'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'uuids'
op|'.'
name|'instance'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'update'
op|'('
name|'base_options'
op|')'
newline|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|'"m1.tiny"'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_populate_instance_for_create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|','
nl|'\n'
number|'1'
op|','
nl|'\n'
name|'security_groups'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'inst_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'base_options'
op|'['
string|"'image_ref'"
op|']'
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'['
string|"'image_base_image_ref'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'instance'
op|'['
string|"'launch_index'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'instance'
op|'.'
name|'get'
op|'('
string|"'uuid'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'instance'
op|'.'
name|'security_groups'
op|'.'
name|'objects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_hostname_generator
dedent|''
name|'def'
name|'test_default_hostname_generator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_uuids'
op|'='
op|'['
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'orig_populate'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_populate_instance_for_create'
newline|'\n'
nl|'\n'
DECL|function|_fake_populate
name|'def'
name|'_fake_populate'
op|'('
name|'context'
op|','
name|'base_options'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_options'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'fake_uuids'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'orig_populate'
op|'('
name|'context'
op|','
name|'base_options'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
string|"'_populate_instance_for_create'"
op|','
nl|'\n'
name|'_fake_populate'
op|')'
newline|'\n'
nl|'\n'
name|'cases'
op|'='
op|'['
op|'('
name|'None'
op|','
string|"'server-%s'"
op|'%'
name|'fake_uuids'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'Hello, Server!'"
op|','
string|"'hello-server'"
op|')'
op|','
nl|'\n'
op|'('
string|"'<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>'"
op|','
string|"'hello'"
op|')'
op|','
nl|'\n'
op|'('
string|"'hello_server'"
op|','
string|"'hello-server'"
op|')'
op|']'
newline|'\n'
name|'for'
name|'display_name'
op|','
name|'hostname'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'display_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
name|'hostname'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_create_adds_to_instance_group
dedent|''
dedent|''
name|'def'
name|'test_instance_create_adds_to_instance_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'objects'
op|'.'
name|'InstanceGroup'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'group'
op|'.'
name|'uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'group'
op|'.'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'group'
op|'.'
name|'user_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
newline|'\n'
name|'group'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
op|'{'
string|"'group'"
op|':'
name|'group'
op|'.'
name|'uuid'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'objects'
op|'.'
name|'InstanceGroup'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'group'
op|'.'
name|'members'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_create_with_group_name_fails
dedent|''
name|'def'
name|'test_instance_create_with_group_name_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
op|'{'
string|"'group'"
op|':'
string|"'non-uuid'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_create_with_group_uuid_fails_group_not_exist
dedent|''
name|'def'
name|'test_instance_create_with_group_uuid_fails_group_not_exist'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.tests.unit.image.fake._FakeImageService.show'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InstanceGroupNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'scheduler_hints'
op|'='
op|'{'
string|"'group'"
op|':'
nl|'\n'
string|"'5b674f73-c8cf-40ef-9965-3b6fe4b304b1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_instance_disassociates_security_groups
dedent|''
name|'def'
name|'test_destroy_instance_disassociates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure destroying disassociates security groups.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'instances'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'group'
op|'['
string|"'instances'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_security_group_disassociates_instances
dedent|''
name|'def'
name|'test_destroy_security_group_disassociates_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure destroying security groups disassociates instances.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'admin_deleted_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
nl|'\n'
name|'read_deleted'
op|'='
string|'"only"'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'admin_deleted_context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'instances'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'group'
op|'['
string|"'instances'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_rebuild
dedent|''
name|'def'
name|'_test_rebuild'
op|'('
name|'self'
op|','
name|'vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
comment|'# Set some image metadata that should get wiped out and reset'
nl|'\n'
comment|'# as well as some other metadata that should be preserved.'
nl|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
op|'{'
nl|'\n'
string|"'image_kernel_id'"
op|':'
string|"'old-data'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'old_data'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'old-data'"
op|','
nl|'\n'
string|"'image_should_remove'"
op|':'
string|"'bye-bye'"
op|','
nl|'\n'
string|"'preserved'"
op|':'
string|"'preserve this!'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure Compute API updates the image_ref before casting to'
nl|'\n'
comment|'# compute manager.'
nl|'\n'
name|'info'
op|'='
op|'{'
string|"'image_ref'"
op|':'
name|'None'
op|','
string|"'clean'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_rebuild
name|'def'
name|'fake_rpc_rebuild'
op|'('
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'image_ref'
newline|'\n'
name|'info'
op|'['
string|"'clean'"
op|']'
op|'='
op|'('
string|"'progress'"
name|'not'
name|'in'
nl|'\n'
name|'kwargs'
op|'['
string|"'instance'"
op|']'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_task_api'
op|','
string|"'rebuild_instance'"
op|','
nl|'\n'
name|'fake_rpc_rebuild'
op|')'
newline|'\n'
nl|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|'"image_ref"'
op|']'
op|'+'
string|"'-new_image_ref'"
newline|'\n'
name|'password'
op|'='
string|'"new_password"'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'vm_state'
op|'='
name|'vm_state'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'image_ref'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'image_ref'"
op|']'
op|','
name|'image_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'info'
op|'['
string|"'clean'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
name|'sys_meta'
op|'='
op|'{'
name|'k'
op|':'
name|'v'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'items'
op|'('
op|')'
nl|'\n'
name|'if'
name|'not'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'instance_type'"
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_meta'
op|','
nl|'\n'
op|'{'
string|"'image_kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'image_min_disk'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'meow'"
op|','
nl|'\n'
string|"'preserved'"
op|':'
string|"'preserve this!'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_rebuild'
op|'('
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_in_error_state
dedent|''
name|'def'
name|'test_rebuild_in_error_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_rebuild'
op|'('
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_in_error_not_launched
dedent|''
name|'def'
name|'test_rebuild_in_error_not_launched'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"vm_state"'
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|'"launched_at"'
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|','
nl|'\n'
string|'"new password"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_no_image
dedent|''
name|'def'
name|'test_rebuild_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'.'
name|'uuid'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"''"
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_deleted_image
dedent|''
name|'def'
name|'test_rebuild_with_deleted_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# If we're given a deleted image by glance, we should not be able to"
nl|'\n'
comment|'# rebuild from it'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'name'"
op|']'
op|'='
string|"'fake_name'"
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'status'"
op|']'
op|'='
string|"'DELETED'"
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'expected_message'
op|'='
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ImageNotActive'
op|'.'
name|'msg_fmt'
op|'%'
op|'{'
string|"'image_id'"
op|':'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'expected_message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_too_little_ram
dedent|''
dedent|''
name|'def'
name|'test_rebuild_with_too_little_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'.'
name|'memory_mb'
op|'='
number|'64'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'.'
name|'root_gb'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'128'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorMemoryTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Reduce image memory requirements and make sure it works'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'64'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_too_little_disk
dedent|''
name|'def'
name|'test_rebuild_with_too_little_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_extract_flavor
name|'def'
name|'fake_extract_flavor'
op|'('
name|'_inst'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'prefix'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|'**'
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'memory_mb'
op|'='
number|'64'
newline|'\n'
name|'f'
op|'.'
name|'root_gb'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'extract_flavor'"
op|','
nl|'\n'
name|'fake_extract_flavor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanMinDisk'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Reduce image disk requirements and make sure it works'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_just_enough_ram_and_disk
dedent|''
name|'def'
name|'test_rebuild_with_just_enough_ram_and_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_extract_flavor
name|'def'
name|'fake_extract_flavor'
op|'('
name|'_inst'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'prefix'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|'**'
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'memory_mb'
op|'='
number|'64'
newline|'\n'
name|'f'
op|'.'
name|'root_gb'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'extract_flavor'"
op|','
nl|'\n'
name|'fake_extract_flavor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'64'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_no_ram_and_disk_reqs
dedent|''
name|'def'
name|'test_rebuild_with_no_ram_and_disk_reqs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_extract_flavor
name|'def'
name|'fake_extract_flavor'
op|'('
name|'_inst'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'prefix'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|'**'
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'memory_mb'
op|'='
number|'64'
newline|'\n'
name|'f'
op|'.'
name|'root_gb'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'extract_flavor'"
op|','
nl|'\n'
name|'fake_extract_flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_too_large_image
dedent|''
name|'def'
name|'test_rebuild_with_too_large_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"'1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_extract_flavor
name|'def'
name|'fake_extract_flavor'
op|'('
name|'_inst'
op|','
name|'prefix'
op|'='
string|"''"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'prefix'
op|'=='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'f'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|'**'
name|'test_flavor'
op|'.'
name|'fake_flavor'
op|')'
newline|'\n'
name|'f'
op|'.'
name|'memory_mb'
op|'='
number|'64'
newline|'\n'
name|'f'
op|'.'
name|'root_gb'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'KeyError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'extract_flavor'"
op|','
nl|'\n'
name|'fake_extract_flavor'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'size'"
op|']'
op|'='
string|"'1073741825'"
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanImage'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Reduce image to 1 GB limit and ensure it works'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'size'"
op|']'
op|'='
string|"'1073741824'"
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_create
dedent|''
name|'def'
name|'test_hostname_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance hostname is set during creation.'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
op|'('
name|'instances'
op|','
name|'_'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'display_name'
op|'='
string|"'test host'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test-host'"
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fake_rescue_block_devices
dedent|''
name|'def'
name|'_fake_rescue_block_devices'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'status'
op|'='
string|'"in-use"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'bf0b6b00-a20c-11e2-9e96-0800200c9a66'"
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'bf0b6b00-a20c-11e2-9e96-0800200c9a66'"
op|','
nl|'\n'
string|"'state'"
op|':'
string|"'active'"
op|','
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'fake_bdms'
op|','
name|'volume'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_rescue_volume_backed_no_image
name|'def'
name|'test_rescue_volume_backed_no_image'
op|'('
name|'self'
op|','
name|'mock_get_vol'
op|','
name|'mock_get_bdms'
op|')'
op|':'
newline|'\n'
comment|'# Instance started without an image'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'volume_backed_inst_1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
name|'bdms'
op|','
name|'volume'
op|'='
name|'self'
op|'.'
name|'_fake_rescue_block_devices'
op|'('
name|'volume_backed_inst_1'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get_vol'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'id'"
op|':'
name|'volume'
op|'['
string|"'id'"
op|']'
op|','
string|"'status'"
op|':'
string|'"in-use"'
op|'}'
newline|'\n'
name|'mock_get_bdms'
op|'.'
name|'return_value'
op|'='
name|'bdms'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_prep_block_device'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'volume_backed_inst_1'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotRescuable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rescue'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'volume_backed_inst_1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_rescue_volume_backed_placeholder_image
name|'def'
name|'test_rescue_volume_backed_placeholder_image'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_get_vol'
op|','
nl|'\n'
name|'mock_get_bdms'
op|')'
op|':'
newline|'\n'
comment|'# Instance started with a placeholder image (for metadata)'
nl|'\n'
indent|'        '
name|'volume_backed_inst_2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'image_ref'"
op|':'
string|"'my_placeholder_img'"
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|'}'
op|')'
newline|'\n'
name|'bdms'
op|','
name|'volume'
op|'='
name|'self'
op|'.'
name|'_fake_rescue_block_devices'
op|'('
name|'volume_backed_inst_2'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get_vol'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'id'"
op|':'
name|'volume'
op|'['
string|"'id'"
op|']'
op|','
string|"'status'"
op|':'
string|'"in-use"'
op|'}'
newline|'\n'
name|'mock_get_bdms'
op|'.'
name|'return_value'
op|'='
name|'bdms'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_prep_block_device'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'volume_backed_inst_2'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotRescuable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rescue'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'volume_backed_inst_2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance.'
nl|'\n'
indent|'        '
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'exp_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exp_instance'
op|'.'
name|'id'
op|','
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_with_admin_context
dedent|''
name|'def'
name|'test_get_with_admin_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'c'
op|','
name|'exp_instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exp_instance'
op|'.'
name|'id'
op|','
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_with_integer_id
dedent|''
name|'def'
name|'test_get_with_integer_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance with an integer id.'
nl|'\n'
indent|'        '
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'exp_instance'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exp_instance'
op|'.'
name|'id'
op|','
name|'instance'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_name_regexp
dedent|''
name|'def'
name|'test_get_all_by_name_regexp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by name (display_name).'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'display_name'"
op|':'
string|"'woot'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^woot.*'"
op|'}'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'.*oot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^n.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'noth.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_multiple_options_at_once
dedent|''
name|'def'
name|'test_get_all_by_multiple_options_at_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching by multiple options at once.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_network_info
name|'def'
name|'fake_network_info'
op|'('
name|'ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'info'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'aa:bb:cc:dd:ee:ff'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'network'"
op|':'
op|'{'
nl|'\n'
string|"'bridge'"
op|':'
string|"'br0'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'private'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'address'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'fixed'"
op|','
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|']'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woot'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000010'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
nl|'\n'
name|'network_info'
op|'='
name|'fake_network_info'
op|'('
string|"'192.168.0.1'"
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
comment|'# instance2'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000020'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
nl|'\n'
name|'network_info'
op|'='
name|'fake_network_info'
op|'('
string|"'192.168.0.2'"
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000030'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
nl|'\n'
name|'network_info'
op|'='
name|'fake_network_info'
op|'('
string|"'192.168.0.3'"
op|')'
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip ends up matching 2nd octet here.. so all 3 match ip'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
string|"'name'"
op|':'
string|"'not.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# ip ends up matching any ip with a '1' in the last octet.."
nl|'\n'
comment|'# so instance 1 and 3.. but name should only match #1'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1$'"
op|','
string|"'name'"
op|':'
string|"'^woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# same as above but no match on name (name matches instance1'
nl|'\n'
comment|"# but the ip query doesn't"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.2$'"
op|','
string|"'name'"
op|':'
string|"'^woot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip matches all 3... ipv6 matches #2+#3...name matches #3'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'not.*'"
op|','
nl|'\n'
string|"'ip6'"
op|':'
string|"'^.*12.*34.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_image
dedent|''
name|'def'
name|'test_get_all_by_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by image.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'123'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
op|'['
string|"'1234'"
op|','
string|"'4567'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_flavor
dedent|''
name|'def'
name|'test_get_all_by_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by image.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'flavor_dict'
op|'='
op|'{'
name|'f'
op|'.'
name|'flavorid'
op|':'
name|'f'
name|'for'
name|'f'
name|'in'
name|'objects'
op|'.'
name|'FlavorList'
op|'.'
name|'get_all'
op|'('
name|'c'
op|')'
op|'}'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'instance_type_id'"
op|':'
name|'flavor_dict'
op|'['
string|"'1'"
op|']'
op|'.'
name|'id'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'instance_type_id'"
op|':'
name|'flavor_dict'
op|'['
string|"'2'"
op|']'
op|'.'
name|'id'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'instance_type_id'"
op|':'
name|'flavor_dict'
op|'['
string|"'2'"
op|']'
op|'.'
name|'id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure unknown filter maps to an exception'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|','
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'99'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'instance1'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_state
dedent|''
name|'def'
name|'test_get_all_by_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by state.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
op|'['
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_metadata
dedent|''
name|'def'
name|'test_get_all_by_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by metadata.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
comment|'# instance0'
newline|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
comment|'# instance1'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance4'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# get all instances'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u"{}"'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# wrong key/value combination'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u\'{"key1": "value3"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# non-existing keys'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u\'{"key5": "value1"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# find existing instance'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u\'{"key2": "value2"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u\'{"key3": "value3"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criteria as a dict'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
string|'u\'{"key3": "value3","key4": "value4"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criteria as a list'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
nl|'\n'
op|'{'
string|"'metadata'"
op|':'
string|'u\'[{"key4": "value4"},{"key3": "value3"}]\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_system_metadata
dedent|''
name|'def'
name|'test_get_all_by_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by system metadata.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'system_metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# find existing instance'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'system_metadata'"
op|':'
string|'u\'{"key1": "value1"}\''
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_instance_metadata
dedent|''
name|'def'
name|'test_all_instance_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|','
nl|'\n'
string|"'user_id'"
op|':'
string|"'user1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|','
nl|'\n'
string|"'user_id'"
op|':'
string|"'user2'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'project2'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'_context'
op|'.'
name|'user_id'
op|'='
string|"'user1'"
newline|'\n'
name|'_context'
op|'.'
name|'project_id'
op|'='
string|"'project1'"
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all_instance_metadata'
op|'('
name|'_context'
op|','
nl|'\n'
name|'search_filts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|'['
number|'0'
op|']'
op|'['
string|"'key'"
op|']'
op|','
string|"'key1'"
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'.'
name|'user_id'
op|'='
string|"'user2'"
newline|'\n'
name|'_context'
op|'.'
name|'project_id'
op|'='
string|"'project2'"
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all_instance_metadata'
op|'('
name|'_context'
op|','
nl|'\n'
name|'search_filts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|'['
number|'0'
op|']'
op|'['
string|"'key'"
op|']'
op|','
string|"'key2'"
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all_instance_metadata'
op|'('
name|'_context'
op|','
nl|'\n'
name|'search_filts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'metadata'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_metadata
dedent|''
name|'def'
name|'test_instance_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta_changes'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'notify_on_state_change'
op|'='
string|"'vm_state'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_change_instance_metadata
name|'def'
name|'fake_change_instance_metadata'
op|'('
name|'inst'
op|','
name|'ctxt'
op|','
name|'diff'
op|','
name|'instance'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meta_changes'
op|'['
number|'0'
op|']'
op|'='
name|'diff'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'change_instance_metadata'"
op|','
nl|'\n'
name|'fake_change_instance_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'metadata'"
op|':'
nl|'\n'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|','
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
string|"'key2'"
op|':'
op|'['
string|"'+'"
op|','
string|"'value2'"
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'metadata'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'new_metadata'
op|'='
op|'{'
string|"'key2'"
op|':'
string|"'bah'"
op|','
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
name|'new_metadata'
op|','
name|'delete'
op|'='
name|'True'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'new_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
nl|'\n'
string|"'key1'"
op|':'
op|'['
string|"'-'"
op|']'
op|','
nl|'\n'
string|"'key2'"
op|':'
op|'['
string|"'+'"
op|','
string|"'bah'"
op|']'
op|','
nl|'\n'
string|"'key3'"
op|':'
op|'['
string|"'+'"
op|','
string|"'value3'"
op|']'
op|','
nl|'\n'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'metadata'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
string|"'key2'"
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
string|"'key2'"
op|':'
op|'['
string|"'-'"
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'metadata'"
op|','
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disallow_metadata_changes_during_building
dedent|''
name|'def'
name|'test_disallow_metadata_changes_during_building'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_change_instance_metadata
indent|'        '
name|'def'
name|'fake_change_instance_metadata'
op|'('
name|'inst'
op|','
name|'ctxt'
op|','
name|'diff'
op|','
name|'instance'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'change_instance_metadata'"
op|','
nl|'\n'
name|'fake_change_instance_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|'"key"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|'"key"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_parse_db_block_device_mapping
name|'def'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attr_list'
op|'='
op|'('
string|"'delete_on_termination'"
op|','
string|"'device_name'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'virtual_name'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
string|"'snapshot_id'"
op|')'
newline|'\n'
name|'bdm'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'attr_list'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'bdm_ref'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'val'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
DECL|member|test_create_block_device_mapping
dedent|''
name|'def'
name|'test_create_block_device_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_compare_bdm_object
indent|'        '
name|'def'
name|'_compare_bdm_object'
op|'('
name|'obj1'
op|','
name|'obj2'
op|','
name|'extra_keys'
op|'='
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'key'
name|'in'
op|'('
op|'('
string|"'device_name'"
op|','
string|"'source_type'"
op|','
string|"'destination_type'"
op|')'
nl|'\n'
op|'+'
name|'extra_keys'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'getattr'
op|'('
name|'obj1'
op|','
name|'key'
op|')'
op|','
name|'getattr'
op|'('
name|'obj2'
op|','
name|'key'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'swap_size'
op|'='
name|'ephemeral_size'
op|'='
number|'1'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
name|'swap_size'
op|','
string|"'ephemeral_gb'"
op|':'
name|'ephemeral_size'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'mappings'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'sdc2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral2'"
op|','
string|"'device'"
op|':'
string|"'sdc3'"
op|'}'
op|']'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
nl|'\n'
comment|'# root'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'00000000-aaaa-bbbb-cccc-000000000000'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# overwrite swap'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'11111111-aaaa-bbbb-cccc-111111111111'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'22222222-aaaa-bbbb-cccc-222222222222'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# overwrite ephemeral'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'44444444-aaaa-bbbb-cccc-555555555555'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# volume'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'55555555-aaaa-bbbb-cccc-666666666666'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'66666666-aaaa-bbbb-cccc-777777777777'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'77777777-aaaa-bbbb-cccc-888888888888'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'image_mapping'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_prepare_image_mapping'
op|'('
nl|'\n'
name|'instance_type'
op|','
name|'mappings'
op|')'
newline|'\n'
name|'image_mapping'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_create_block_device_mapping'
op|'('
nl|'\n'
name|'instance_type'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'image_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|','
string|"'delete_on_termination'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|','
string|"'delete_on_termination'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|','
string|"'delete_on_termination'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'CONF'
op|'.'
name|'default_ephemeral_format'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
string|"'delete_on_termination'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'expected_result'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'map'
op|'('
name|'fake_block_device'
op|'.'
name|'AnonFakeDbBlockDeviceDict'
op|','
nl|'\n'
name|'expected_result'
op|')'
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'attrgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
name|'len'
op|'('
name|'expected_result'
op|')'
op|')'
newline|'\n'
name|'for'
name|'expected'
op|','
name|'got'
name|'in'
name|'zip'
op|'('
name|'expected_result'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_compare_bdm_object'
op|'('
nl|'\n'
name|'expected'
op|','
name|'got'
op|','
nl|'\n'
name|'extra_keys'
op|'='
op|'('
string|"'guest_format'"
op|','
string|"'delete_on_termination'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'block_device_mapping'
op|'='
op|'('
nl|'\n'
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'map'
op|'('
name|'fake_block_device'
op|'.'
name|'AnonFakeDbBlockDeviceDict'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_create_block_device_mapping'
op|'('
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'00000000-aaaa-bbbb-cccc-000000000000'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|','
string|"'delete_on_termination'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'11111111-aaaa-bbbb-cccc-111111111111'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'22222222-aaaa-bbbb-cccc-222222222222'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'44444444-aaaa-bbbb-cccc-555555555555'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'55555555-aaaa-bbbb-cccc-666666666666'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'66666666-aaaa-bbbb-cccc-777777777777'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'77777777-aaaa-bbbb-cccc-888888888888'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|'}'
op|']'
newline|'\n'
name|'expected_result'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'map'
op|'('
name|'fake_block_device'
op|'.'
name|'AnonFakeDbBlockDeviceDict'
op|','
nl|'\n'
name|'expected_result'
op|')'
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'itemgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'operator'
op|'.'
name|'itemgetter'
op|'('
string|"'device_name'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
name|'len'
op|'('
name|'expected_result'
op|')'
op|')'
newline|'\n'
name|'for'
name|'expected'
op|','
name|'got'
name|'in'
name|'zip'
op|'('
name|'expected_result'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'_compare_bdm_object'
op|'('
nl|'\n'
name|'expected'
op|','
name|'got'
op|','
nl|'\n'
name|'extra_keys'
op|'='
op|'('
string|"'snapshot_id'"
op|','
string|"'delete_on_termination'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_check_and_transform_bdm
dedent|''
dedent|''
name|'def'
name|'_test_check_and_transform_bdm'
op|'('
name|'self'
op|','
name|'bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'None'
op|','
name|'base_options'
op|'='
name|'None'
op|','
nl|'\n'
name|'legacy_bdms'
op|'='
name|'False'
op|','
nl|'\n'
name|'legacy_image_bdms'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_bdms'
op|'='
name|'image_bdms'
name|'or'
op|'['
op|']'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'if'
name|'image_bdms'
op|':'
newline|'\n'
indent|'            '
name|'image_meta'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
string|"'block_device_mapping'"
op|':'
name|'image_bdms'
op|'}'
op|'}'
newline|'\n'
name|'if'
name|'not'
name|'legacy_image_bdms'
op|':'
newline|'\n'
indent|'                '
name|'image_meta'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'bdm_v2'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'base_options'
op|'='
name|'base_options'
name|'or'
op|'{'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'FAKE_IMAGE_REF'
op|'}'
newline|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'image_meta'
op|','
number|'1'
op|','
number|'1'
op|','
name|'bdms'
op|','
name|'legacy_bdms'
op|')'
newline|'\n'
name|'for'
name|'expected'
op|','
name|'got'
name|'in'
name|'zip'
op|'('
name|'expected_bdms'
op|','
name|'transformed_bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dict'
op|'('
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|','
name|'dict'
op|'('
name|'got'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_legacy_bdm_no_image_bdms
dedent|''
dedent|''
name|'def'
name|'test_check_and_transform_legacy_bdm_no_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'legacy_bdms'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
nl|'\n'
name|'legacy_bdms'
op|'['
number|'0'
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'legacy_bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'legacy_bdms'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_legacy_bdm_legacy_image_bdms
dedent|''
name|'def'
name|'test_check_and_transform_legacy_bdm_legacy_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_bdms'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
name|'legacy_bdms'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
op|'['
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
name|'legacy_bdms'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
name|'image_bdms'
op|'['
number|'0'
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'expected_bdms'
op|'['
number|'1'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'legacy_bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|','
nl|'\n'
name|'legacy_bdms'
op|'='
name|'True'
op|','
nl|'\n'
name|'legacy_image_bdms'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_legacy_bdm_image_bdms
dedent|''
name|'def'
name|'test_check_and_transform_legacy_bdm_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'legacy_bdms'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
name|'image_bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
op|'['
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
name|'legacy_bdms'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
name|'image_bdms'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'expected_bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
op|'-'
number|'1'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'legacy_bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|','
nl|'\n'
name|'legacy_bdms'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_bdm_no_image_bdms
dedent|''
name|'def'
name|'test_check_and_transform_bdm_no_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'bdms'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_bdm_image_bdms
dedent|''
name|'def'
name|'test_check_and_transform_bdm_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|']'
newline|'\n'
name|'image_bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
name|'bdms'
op|'+'
name|'image_bdms'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_bdm_image_bdms_w_overrides
dedent|''
name|'def'
name|'test_check_and_transform_bdm_image_bdms_w_overrides'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'device_name'"
op|':'
string|"'vdb'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|')'
op|']'
newline|'\n'
name|'image_bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_bdm_image_bdms_w_overrides_complex
dedent|''
name|'def'
name|'test_check_and_transform_bdm_image_bdms_w_overrides_complex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'device_name'"
op|':'
string|"'vdb'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'11111111-aaaa-bbbb-cccc-222222222222'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'vdc'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'image_bdms'
op|'='
op|'['
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|'}'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'55555555-aaaa-bbbb-cccc-666666666666'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|'}'
op|')'
op|','
nl|'\n'
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'77777777-aaaa-bbbb-cccc-8888888888888'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdd'"
op|'}'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'bdms'
op|'+'
op|'['
name|'image_bdms'
op|'['
number|'2'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_bdm_legacy_image_bdms
dedent|''
name|'def'
name|'test_check_and_transform_bdm_legacy_image_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'('
op|'{'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|']'
newline|'\n'
name|'image_bdms'
op|'='
op|'['
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
name|'expected_bdms'
op|'='
op|'['
name|'block_device'
op|'.'
name|'BlockDeviceDict'
op|'.'
name|'from_legacy'
op|'('
nl|'\n'
name|'image_bdms'
op|'['
number|'0'
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_bdms'
op|'['
number|'0'
op|']'
op|'['
string|"'boot_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list_from_dicts'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'expected_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_check_and_transform_bdm'
op|'('
name|'bdms'
op|','
name|'expected_bdms'
op|','
nl|'\n'
name|'image_bdms'
op|'='
name|'image_bdms'
op|','
nl|'\n'
name|'legacy_image_bdms'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_and_transform_image
dedent|''
name|'def'
name|'test_check_and_transform_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_options'
op|'='
op|'{'
string|"'root_device_name'"
op|':'
string|"'vdb'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'FAKE_IMAGE_REF'
op|'}'
newline|'\n'
name|'fake_legacy_bdms'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
string|"'block_device_mapping'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
comment|'# We get an image BDM'
nl|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
number|'1'
op|','
number|'1'
op|','
name|'fake_legacy_bdms'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'transformed_bdm'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# No image BDM created if image already defines a root BDM'
nl|'\n'
name|'base_options'
op|'['
string|"'root_device_name'"
op|']'
op|'='
string|"'vda'"
newline|'\n'
name|'base_options'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
name|'image_meta'
op|','
number|'1'
op|','
number|'1'
op|','
op|'['
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'transformed_bdm'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# No image BDM created'
nl|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
number|'1'
op|','
number|'1'
op|','
name|'fake_legacy_bdms'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'transformed_bdm'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Volumes with multiple instances fails'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidRequest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'base_options'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
number|'1'
op|','
number|'2'
op|','
name|'fake_legacy_bdms'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Volume backed so no image_ref in base_options'
nl|'\n'
comment|'# v2 bdms contains a root image to volume mapping'
nl|'\n'
comment|'# image_meta contains a snapshot as the image'
nl|'\n'
comment|'# is created by nova image-create from a volume backed server'
nl|'\n'
comment|'# see bug 1381598'
nl|'\n'
name|'fake_v2_bdms'
op|'='
op|'['
op|'{'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"u'volume'"
op|','
nl|'\n'
string|"'image_id'"
op|':'
name|'FAKE_IMAGE_REF'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"u'image'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'1'
op|'}'
op|']'
newline|'\n'
name|'base_options'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
name|'image_meta'
op|','
number|'1'
op|','
number|'1'
op|','
nl|'\n'
name|'fake_v2_bdms'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'transformed_bdm'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Image BDM overrides mappings'
nl|'\n'
name|'base_options'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'FAKE_IMAGE_REF'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
nl|'\n'
string|"'properties'"
op|':'
op|'{'
nl|'\n'
string|"'mappings'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'vdb'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'bdm_v2'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
string|"'volume_size'"
op|':'
number|'1'
op|'}'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'transformed_bdm'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_and_transform_bdm'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'base_options'
op|','
op|'{'
op|'}'
op|','
name|'image_meta'
op|','
number|'1'
op|','
number|'1'
op|','
op|'['
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'transformed_bdm'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'volume'"
op|','
name|'transformed_bdm'
op|'['
number|'0'
op|']'
op|'['
string|"'destination_type'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/vdb'"
op|','
name|'transformed_bdm'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_size
dedent|''
name|'def'
name|'test_volume_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ephemeral_size'
op|'='
number|'2'
newline|'\n'
name|'swap_size'
op|'='
number|'3'
newline|'\n'
name|'volume_size'
op|'='
number|'5'
newline|'\n'
nl|'\n'
name|'swap_bdm'
op|'='
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|'}'
newline|'\n'
name|'ephemeral_bdm'
op|'='
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|'}'
newline|'\n'
name|'volume_bdm'
op|'='
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'volume_size'"
op|':'
name|'volume_size'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
newline|'\n'
name|'blank_bdm'
op|'='
op|'{'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
op|'{'
string|"'ephemeral_gb'"
op|':'
name|'ephemeral_size'
op|','
string|"'swap'"
op|':'
name|'swap_size'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'ephemeral_bdm'
op|')'
op|','
nl|'\n'
name|'ephemeral_size'
op|')'
newline|'\n'
name|'ephemeral_bdm'
op|'['
string|"'volume_size'"
op|']'
op|'='
number|'42'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'ephemeral_bdm'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'swap_bdm'
op|')'
op|','
nl|'\n'
name|'swap_size'
op|')'
newline|'\n'
name|'swap_bdm'
op|'['
string|"'volume_size'"
op|']'
op|'='
number|'42'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'swap_bdm'
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'volume_bdm'
op|')'
op|','
nl|'\n'
name|'volume_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
name|'blank_bdm'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_no_bdm_no_image
dedent|''
name|'def'
name|'test_is_volume_backed_instance_no_bdm_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_empty_bdm_with_image
dedent|''
name|'def'
name|'test_is_volume_backed_instance_empty_bdm_with_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'FAKE_IMAGE_REF'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
op|'['
op|']'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_bdm_volume_no_image
dedent|''
name|'def'
name|'test_is_volume_backed_instance_bdm_volume_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"''"
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
nl|'\n'
string|"'f8000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_bdm_local_no_image
dedent|''
name|'def'
name|'test_is_volume_backed_instance_bdm_local_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if the root device is local the instance is not volume backed, even'
nl|'\n'
comment|'# if no image_ref is set.'
nl|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"''"
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'f8000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|'}'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'f8000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'c2ec2156-d75e-11e2-985b-5254009297d6'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_bdm_volume_with_image
dedent|''
name|'def'
name|'test_is_volume_backed_instance_bdm_volume_with_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'FAKE_IMAGE_REF'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_volume_backed_instance_bdm_snapshot
dedent|''
name|'def'
name|'test_is_volume_backed_instance_bdm_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'root_device_name'"
op|':'
string|"'vda'"
op|'}'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'de8836ac-d75e-11e2-8271-5254009297d6'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'f8000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'None'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_is_volume_backed_instance_empty_bdm_by_uuid
name|'def'
name|'test_is_volume_backed_instance_empty_bdm_by_uuid'
op|'('
name|'self'
op|','
name|'mock_bdms'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'mock_bdms'
op|'.'
name|'return_value'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
name|'ctxt'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'is_volume_backed_instance'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'mock_bdms'
op|'.'
name|'assert_called_with'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_id_one_instance
dedent|''
name|'def'
name|'test_reservation_id_one_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building an instance has a reservation_id that\n        matches return value from create.\n        """'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_ids_two_instances
dedent|''
name|'def'
name|'test_reservation_ids_two_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building 2 instances at once results in a\n        reservation_id being returned equal to reservation id set\n        in both instances.\n        """'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'resv_id'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'refs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multi_instance_display_name_template
dedent|''
dedent|''
name|'def'
name|'test_multi_instance_display_name_template'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'multi_instance_display_name_template'
op|'='
string|"'%(name)s'"
op|')'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|','
name|'display_name'
op|'='
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'multi_instance_display_name_template'
op|'='
string|"'%(name)s-%(count)d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_multi_instance_display_name_default'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'multi_instance_display_name_template'
op|'='
string|"'%(name)s-%(uuid)s'"
op|')'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|','
name|'display_name'
op|'='
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x-%s'"
op|'%'
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x-%s'"
op|'%'
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x-%s'"
op|'%'
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x-%s'"
op|'%'
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multi_instance_display_name_default
dedent|''
name|'def'
name|'test_multi_instance_display_name_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_multi_instance_display_name_default'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_multi_instance_display_name_default
dedent|''
name|'def'
name|'_multi_instance_display_name_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_href_id'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|','
name|'display_name'
op|'='
string|"'x'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x-1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x-1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
string|"'x-2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'1'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
string|"'x-2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_architecture
dedent|''
name|'def'
name|'test_instance_architecture'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test the instance architecture.'
nl|'\n'
indent|'        '
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'architecture'"
op|']'
op|','
name|'arch'
op|'.'
name|'X86_64'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_unknown_architecture
dedent|''
name|'def'
name|'test_instance_unknown_architecture'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test if the architecture is unknown.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'architecture'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'instance'
op|'['
string|"'architecture'"
op|']'
op|','
string|"'Unknown'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_name_template
dedent|''
name|'def'
name|'test_instance_name_template'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test the instance_name template.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%d'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%d'"
op|'%'
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%s'"
op|'%'
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(id)d-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'%d-%s'"
op|'%'
nl|'\n'
op|'('
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# not allowed.. default is uuid'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(name)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_fixed_ip
dedent|''
name|'def'
name|'test_add_remove_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
string|"'deallocate_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'add_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_invalid
dedent|''
name|'def'
name|'test_attach_volume_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'None'
op|','
op|'**'
op|'{'
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'/invalid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_dev_name_assign_dev_name
dedent|''
name|'def'
name|'test_check_dev_name_assign_dev_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'vol-id'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'device_type'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_dev_name'
op|'('
name|'bdms'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'bdms'
op|'['
number|'0'
op|']'
op|'.'
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_get_device_name_for_instance'"
op|')'
newline|'\n'
DECL|member|test_check_dev_name_skip_bdms_with_dev_name
name|'def'
name|'test_check_dev_name_skip_bdms_with_dev_name'
op|'('
name|'self'
op|','
name|'mock_get_dev_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'vol-id'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disk_bus'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'device_type'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_dev_name'
op|'('
name|'bdms'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_get_dev_name'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_attach_volume_in_rescue_state
dedent|''
name|'def'
name|'test_no_attach_volume_in_rescue_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
name|'fake'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'None'
op|','
op|'**'
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_attach_volume_in_suspended_state
dedent|''
name|'def'
name|'test_no_attach_volume_in_suspended_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'None'
op|','
op|'**'
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'fake-volume-id'"
op|'}'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_detach_volume_in_rescue_state
dedent|''
name|'def'
name|'test_no_detach_volume_in_rescue_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure volume can be detached from instance'
nl|'\n'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'attach_status'"
op|':'
string|"'attached'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_no_rescue_in_volume_state_attaching
name|'def'
name|'test_no_rescue_in_volume_state_attaching'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_get_vol'
op|','
nl|'\n'
name|'mock_get_bdms'
op|')'
op|':'
newline|'\n'
comment|'# Make sure a VM cannot be rescued while volume is being attached'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|','
name|'volume'
op|'='
name|'self'
op|'.'
name|'_fake_rescue_block_devices'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get_vol'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'id'"
op|':'
name|'volume'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|'"attaching"'
op|'}'
newline|'\n'
name|'mock_get_bdms'
op|'.'
name|'return_value'
op|'='
name|'bdms'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidVolume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rescue'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console
dedent|''
name|'def'
name|'test_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_console_type'
op|'='
string|'"novnc"'
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_console_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'access_url'"
op|':'
string|"'fake_console_url'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_vnc_console'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_vnc_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'fake_instance'
op|','
nl|'\n'
name|'console_type'
op|'='
name|'fake_console_type'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_connect_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|','
nl|'\n'
string|"'authorize_console'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_token'"
op|','
name|'fake_console_type'
op|','
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'fake_console_port'"
op|','
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
name|'access_url'
op|'='
string|"'fake_console_url'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_console_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vnc_console_no_host
dedent|''
name|'def'
name|'test_get_vnc_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'novnc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spice_console
dedent|''
name|'def'
name|'test_spice_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a spice console for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_console_type'
op|'='
string|'"spice-html5"'
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_console_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'access_url'"
op|':'
string|"'fake_console_url'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_spice_console'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_spice_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'fake_instance'
op|','
nl|'\n'
name|'console_type'
op|'='
name|'fake_console_type'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_connect_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|','
nl|'\n'
string|"'authorize_console'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_token'"
op|','
name|'fake_console_type'
op|','
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'fake_console_port'"
op|','
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
name|'access_url'
op|'='
string|"'fake_console_url'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_spice_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_console_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_spice_console_no_host
dedent|''
name|'def'
name|'test_get_spice_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rdp_console
dedent|''
name|'def'
name|'test_rdp_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a rdp console for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_console_type'
op|'='
string|'"rdp-html5"'
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_console_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'access_url'"
op|':'
string|"'fake_console_url'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_rdp_console'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_rdp_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'fake_instance'
op|','
nl|'\n'
name|'console_type'
op|'='
name|'fake_console_type'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_connect_info'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|','
nl|'\n'
string|"'authorize_console'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_token'"
op|','
name|'fake_console_type'
op|','
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'fake_console_port'"
op|','
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
name|'access_url'
op|'='
string|"'fake_console_url'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_rdp_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_console_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_rdp_console_no_host
dedent|''
name|'def'
name|'test_get_rdp_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_rdp_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'rdp'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serial_console
dedent|''
name|'def'
name|'test_serial_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can  get a serial proxy url for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_console_type'
op|'='
string|"'serial'"
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_serial_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_tcp_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'access_url'"
op|':'
string|"'fake_access_url'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'rpcapi'
op|','
string|"'get_serial_console'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_connect_info'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|','
nl|'\n'
string|"'authorize_console'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_get_serial_console'
op|','
name|'mock_authorize_console'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|'.'
name|'authorize_console'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_token'"
op|','
name|'fake_console_type'
op|','
nl|'\n'
string|"'fake_serial_host'"
op|','
string|"'fake_tcp_port'"
op|','
nl|'\n'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
name|'access_url'
op|'='
string|"'fake_access_url'"
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_serial_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
nl|'\n'
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_access_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_serial_console_no_host
dedent|''
dedent|''
name|'def'
name|'test_get_serial_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure an exception is raised when instance is not Active.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_serial_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'serial'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mks_console
dedent|''
name|'def'
name|'test_mks_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_console_type'
op|'='
string|"'webmks'"
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_mks_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_tcp_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fake_instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'access_url'"
op|':'
string|"'fake_access_url'"
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'get_mks_console'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_connect_info'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'consoleauth_rpcapi'
op|','
nl|'\n'
string|"'authorize_console'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_get_mks_console'
op|','
name|'mock_authorize_console'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_mks_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
nl|'\n'
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_access_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_mks_console_no_host
dedent|''
dedent|''
name|'def'
name|'test_get_mks_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure an exception is raised when instance is not Active.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_mks_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'mks'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f3000000-0000-0000-0000-000000000000'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
op|')'
newline|'\n'
name|'fake_tail_length'
op|'='
number|'699'
newline|'\n'
name|'fake_console_output'
op|'='
string|"'fake console output'"
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_console_output'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_console_output'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'fake_instance'
op|','
nl|'\n'
name|'tail_length'
op|'='
name|'fake_tail_length'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_console_output'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'tail_length'
op|'='
name|'fake_tail_length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'fake_console_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_no_host
dedent|''
name|'def'
name|'test_console_output_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_console_output'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_interface
dedent|''
name|'def'
name|'test_attach_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'image_ref'
op|'='
name|'uuids'
op|'.'
name|'image_instance'
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'new_type'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake-host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'allocate_port_for_instance'"
op|')'
newline|'\n'
name|'nwinfo'
op|'='
op|'['
name|'fake_network_cache_model'
op|'.'
name|'new_vif'
op|'('
op|')'
op|']'
newline|'\n'
name|'network_id'
op|'='
name|'nwinfo'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'port_id'
op|'='
name|'nwinfo'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'req_ip'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_port_for_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|','
name|'network_id'
op|','
name|'req_ip'
op|','
nl|'\n'
name|'bind_host_id'
op|'='
string|"'fake-host'"
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'nwinfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'vif'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_interface'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'network_id'
op|','
nl|'\n'
name|'port_id'
op|','
nl|'\n'
name|'req_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
name|'network_id'
op|')'
newline|'\n'
name|'return'
name|'nwinfo'
op|','
name|'port_id'
newline|'\n'
nl|'\n'
DECL|member|test_attach_interface_failed
dedent|''
name|'def'
name|'test_attach_interface_failed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'new_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
string|"'4'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'id'
op|'='
number|'42'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuids'
op|'.'
name|'interface_failed_instance'
op|','
nl|'\n'
name|'image_ref'
op|'='
string|"'foo'"
op|','
nl|'\n'
name|'system_metadata'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'new_type'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake-host'"
op|')'
newline|'\n'
name|'nwinfo'
op|'='
op|'['
name|'fake_network_cache_model'
op|'.'
name|'new_vif'
op|'('
op|')'
op|']'
newline|'\n'
name|'network_id'
op|'='
name|'nwinfo'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'port_id'
op|'='
name|'nwinfo'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'req_ip'
op|'='
string|"'1.2.3.4'"
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'attach_interface'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'allocate_port_for_instance'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'deallocate_port_for_instance'"
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'mock_attach'
op|','
name|'mock_allocate'
op|','
name|'mock_deallocate'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'mock_allocate'
op|'.'
name|'return_value'
op|'='
name|'nwinfo'
newline|'\n'
name|'mock_attach'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|'"attach_failed"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InterfaceAttachFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'attach_interface'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'network_id'
op|','
name|'port_id'
op|','
name|'req_ip'
op|')'
newline|'\n'
name|'mock_allocate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_id'
op|','
name|'port_id'
op|','
name|'req_ip'
op|','
nl|'\n'
name|'bind_host_id'
op|'='
string|"'fake-host'"
op|')'
newline|'\n'
name|'mock_deallocate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'port_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_interface
dedent|''
dedent|''
name|'def'
name|'test_detach_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nwinfo'
op|','
name|'port_id'
op|'='
name|'self'
op|'.'
name|'test_attach_interface'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'deallocate_port_for_instance'"
op|','
nl|'\n'
name|'lambda'
name|'a'
op|','
name|'b'
op|','
name|'c'
op|':'
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'.'
name|'new'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'uuids'
op|'.'
name|'info_cache_instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
nl|'\n'
name|'nwinfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_interface'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'_interfaces'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_interface_failed
dedent|''
name|'def'
name|'test_detach_interface_failed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nwinfo'
op|','
name|'port_id'
op|'='
name|'self'
op|'.'
name|'test_attach_interface'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'id'
op|'='
number|'42'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'uuids'
op|'.'
name|'info_cache_instance'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'.'
name|'new'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'uuids'
op|'.'
name|'info_cache_instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
nl|'\n'
name|'nwinfo'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'detach_interface'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
op|'('
string|"'detach_failed'"
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'deallocate_port_for_instance'"
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'mock_detach'
op|','
name|'mock_deallocate'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InterfaceDetachFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_interface'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_deallocate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_manager'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test_detach_interface_deallocate_port_for_instance_failed
name|'def'
name|'test_detach_interface_deallocate_port_for_instance_failed'
op|'('
name|'self'
op|','
nl|'\n'
name|'warn_mock'
op|')'
op|':'
newline|'\n'
comment|'# Tests that when deallocate_port_for_instance fails we log the failure'
nl|'\n'
comment|'# before exiting compute.detach_interface.'
nl|'\n'
indent|'        '
name|'nwinfo'
op|','
name|'port_id'
op|'='
name|'self'
op|'.'
name|'test_attach_interface'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'id'
op|'='
number|'42'
op|','
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'.'
name|'new'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'uuids'
op|'.'
name|'info_cache_instance'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'info_cache'
op|'.'
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'.'
name|'hydrate'
op|'('
nl|'\n'
name|'nwinfo'
op|')'
newline|'\n'
nl|'\n'
comment|'# Sometimes neutron errors slip through the neutronv2 API so we want'
nl|'\n'
comment|'# to make sure we catch those in the compute manager and not just'
nl|'\n'
comment|'# NovaExceptions.'
nl|'\n'
name|'error'
op|'='
name|'neutron_exceptions'
op|'.'
name|'PortNotFoundClient'
op|'('
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'detach_interface'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'deallocate_port_for_instance'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'error'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'mock_detach'
op|','
name|'mock_deallocate'
op|','
name|'mock_instance_update'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ex'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'neutron_exceptions'
op|'.'
name|'PortNotFoundClient'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_interface'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'error'
op|','
name|'ex'
op|')'
newline|'\n'
dedent|''
name|'mock_deallocate'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'port_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'warn_mock'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume
dedent|''
name|'def'
name|'test_attach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_bdm'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
op|')'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
op|')'
op|','
nl|'\n'
name|'fake_bdm'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'id'
op|'='
number|'42'
newline|'\n'
name|'fake_volume'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'fake-volume-id'"
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'return_value'
op|'='
name|'fake_volume'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'reserve_block_device_name'"
op|','
name|'return_value'
op|'='
name|'bdm'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'attach_volume'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_get'
op|','
name|'mock_check_attach'
op|','
name|'mock_reserve_vol'
op|','
name|'mock_reserve_bdm'
op|','
nl|'\n'
name|'mock_attach'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'fake-volume-id'"
op|','
nl|'\n'
string|"'/dev/vdb'"
op|','
string|"'ide'"
op|','
string|"'cdrom'"
op|')'
newline|'\n'
nl|'\n'
name|'mock_reserve_bdm'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'/dev/vdb'"
op|','
string|"'fake-volume-id'"
op|','
nl|'\n'
name|'disk_bus'
op|'='
string|"'ide'"
op|','
name|'device_type'
op|'='
string|"'cdrom'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock_get'
op|'.'
name|'call_args'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-volume-id'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock_check_attach'
op|'.'
name|'call_args'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'fake_volume'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_reserve_vol'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-volume-id'"
op|')'
newline|'\n'
name|'a'
op|','
name|'kw'
op|'='
name|'mock_attach'
op|'.'
name|'call_args'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'a'
op|'['
number|'2'
op|']'
op|'.'
name|'device_name'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'a'
op|'['
number|'2'
op|']'
op|'.'
name|'volume_id'
op|','
name|'uuids'
op|'.'
name|'volume_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_shelved_offloaded
dedent|''
dedent|''
name|'def'
name|'test_attach_volume_shelved_offloaded'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|','
nl|'\n'
string|"'_check_attach_and_reserve_volume'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'attach'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_attach_and_reserve'
op|','
name|'mock_attach'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_attach_volume_shelved_offloaded'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'fake-volume-id'"
op|','
nl|'\n'
string|"'/dev/vdb'"
op|','
string|"'ide'"
op|','
string|"'cdrom'"
op|')'
newline|'\n'
name|'mock_attach_and_reserve'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake-volume-id'"
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'mock_attach'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake-volume-id'"
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_attach'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_no_device
dedent|''
dedent|''
name|'def'
name|'test_attach_volume_no_device'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_check_attach'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve_volume
dedent|''
name|'def'
name|'fake_reserve_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_reserve_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_volume_get'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_attach_volume
dedent|''
name|'def'
name|'fake_rpc_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'bdm'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_rpc_attach_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_reserve_block_device_name
dedent|''
name|'def'
name|'fake_rpc_reserve_block_device_name'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'device'
op|','
nl|'\n'
name|'volume_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_rpc_reserve_block_device_name'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
name|'context'
op|'='
name|'context'
op|')'
newline|'\n'
name|'bdm'
op|'['
string|"'device_name'"
op|']'
op|'='
string|"'/dev/vdb'"
newline|'\n'
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
nl|'\n'
name|'fake_reserve_volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'reserve_block_device_name'"
op|','
nl|'\n'
name|'fake_rpc_reserve_block_device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'fake_rpc_attach_volume'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|','
name|'device'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_check_attach'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_reserve_volume'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_volume_get'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_rpc_reserve_block_device_name'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_rpc_attach_volume'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_volume
dedent|''
name|'def'
name|'test_detach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure volume can be detached from instance'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
comment|"# Set attach_status to 'fake' as nothing is reading the value."
nl|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'attach_status'"
op|':'
string|"'fake'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_check_detach
name|'def'
name|'fake_check_detach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_check_detach'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_begin_detaching
dedent|''
name|'def'
name|'fake_begin_detaching'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_begin_detaching'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_detach_volume
dedent|''
name|'def'
name|'fake_rpc_detach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_rpc_detach_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_detach'"
op|','
name|'fake_check_detach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'begin_detaching'"
op|','
name|'fake_begin_detaching'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'detach_volume'"
op|','
nl|'\n'
name|'fake_rpc_detach_volume'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_check_detach'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_begin_detaching'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_rpc_detach_volume'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|','
string|"'_check_and_begin_detach'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|','
string|"'_local_cleanup_bdm_volumes'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'get_by_volume_id'"
op|')'
newline|'\n'
DECL|member|test_detach_volume_shelved_offloaded
name|'def'
name|'test_detach_volume_shelved_offloaded'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_block_dev'
op|','
nl|'\n'
name|'mock_local_cleanup'
op|','
nl|'\n'
name|'mock_check_begin_detach'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'mock_block_dev'
op|'.'
name|'return_value'
op|'='
op|'['
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'context'
op|'='
name|'context'
op|')'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'attach_status'"
op|':'
string|"'fake'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_detach_volume_shelved_offloaded'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'volume'
op|')'
newline|'\n'
name|'mock_check_begin_detach'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'volume'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_local_cleanup'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_invalid_volume
dedent|''
name|'def'
name|'test_detach_invalid_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure exception is raised while detaching an un-attached volume'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f7000000-0000-0000-0000-000000000001'"
op|','
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'attach_status'"
op|':'
string|"'detached'"
op|','
string|"'status'"
op|':'
string|"'available'"
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidVolume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_unattached_volume
dedent|''
name|'def'
name|'test_detach_unattached_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure exception is raised when volume's idea of attached"
nl|'\n'
comment|"# instance doesn't match."
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f7000000-0000-0000-0000-000000000001'"
op|','
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'volume'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'attach_status'"
op|':'
string|"'attached'"
op|','
string|"'status'"
op|':'
string|"'in-use'"
op|','
nl|'\n'
string|"'attachments'"
op|':'
op|'{'
string|"'fake_uuid'"
op|':'
op|'{'
string|"'attachment_id'"
op|':'
string|"'fakeid'"
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeUnattached'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_suspended_instance_fails
dedent|''
name|'def'
name|'test_detach_suspended_instance_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'='
name|'self'
op|'.'
name|'_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'f7000000-0000-0000-0000-000000000001'"
op|','
nl|'\n'
string|"'locked'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
comment|'# Unused'
nl|'\n'
name|'volume'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'detach_volume'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_volume_libvirt_is_down
dedent|''
name|'def'
name|'test_detach_volume_libvirt_is_down'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure rollback during detach if libvirt goes down'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_bdm'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"test": "test"}\''
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_libvirt_driver_instance_exists
name|'def'
name|'fake_libvirt_driver_instance_exists'
op|'('
name|'_instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_libvirt_driver_instance_exists'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_libvirt_driver_detach_volume_fails
dedent|''
name|'def'
name|'fake_libvirt_driver_detach_volume_fails'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_libvirt_driver_detach_volume_fails'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'raise'
name|'AttributeError'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_roll_detaching
dedent|''
name|'def'
name|'fake_roll_detaching'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_roll_detaching'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'roll_detaching'"
op|','
name|'fake_roll_detaching'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"instance_exists"'
op|','
nl|'\n'
name|'fake_libvirt_driver_instance_exists'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"detach_volume"'
op|','
nl|'\n'
name|'fake_libvirt_driver_detach_volume_fails'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
nl|'\n'
string|"'get_by_volume_and_instance'"
op|')'
newline|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'.'
name|'get_by_volume_and_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
op|'**'
name|'fake_bdm'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_libvirt_driver_instance_exists'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_roll_detaching'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_detach_volume_not_found
dedent|''
name|'def'
name|'test_detach_volume_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that a volume can be detached even when it is removed'
nl|'\n'
comment|'# from an instance but remaining in bdm. See bug #1367964.'
nl|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'fake_bdm'
op|'='
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'fake-id'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"test": "test"}\''
op|'}'
op|')'
newline|'\n'
name|'bdm'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
op|'**'
name|'fake_bdm'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stub out fake_volume_get so cinder api does not raise exception'
nl|'\n'
comment|'# and manager gets to call bdm.destroy()'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.volume.cinder.API.get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'detach_volume'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'DiskNotFound'
op|'('
string|"'sdb'"
op|')'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|','
nl|'\n'
string|"'get_by_volume_and_instance'"
op|','
name|'return_value'
op|'='
name|'bdm'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'terminate_connection'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'bdm'
op|','
string|"'destroy'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_notify_about_instance_usage'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'detach'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'get_volume_connector'"
op|','
nl|'\n'
name|'return_value'
op|'='
string|"'fake-connector'"
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'mock_detach_volume'
op|','
name|'mock_volume'
op|','
name|'mock_terminate_connection'
op|','
nl|'\n'
name|'mock_destroy'
op|','
name|'mock_notify'
op|','
name|'mock_detach'
op|','
name|'mock_volume_connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'detach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-id'"
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_detach_volume'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'mock_terminate_connection'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake-id'"
op|','
nl|'\n'
string|"'fake-connector'"
op|')'
newline|'\n'
name|'mock_destroy'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'mock_detach'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|"'fake-id'"
op|','
nl|'\n'
name|'instance'
op|'.'
name|'uuid'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_with_volumes
dedent|''
dedent|''
name|'def'
name|'test_terminate_with_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that volumes get detached during instance termination.'
nl|'\n'
indent|'        '
name|'admin'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'fake'"
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
nl|'\n'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'admin'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"get"'
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stub out and record whether it gets detached'
nl|'\n'
name|'result'
op|'='
op|'{'
string|'"detached"'
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_detach
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id_param'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|'"detached"'
op|']'
op|'='
name|'volume_id_param'
op|'=='
name|'volume_id'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"detach"'
op|','
name|'fake_detach'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_terminate_connection
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"terminate_connection"'
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
nl|'\n'
comment|'# Kill the instance and check that it was detached'
nl|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'admin'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'admin'
op|','
name|'instance'
op|','
name|'bdms'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'['
string|'"detached"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_deletes_all_bdms
dedent|''
name|'def'
name|'test_terminate_deletes_all_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'img_bdm'
op|'='
op|'{'
string|"'context'"
op|':'
name|'admin'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'image'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'image_id'"
op|':'
string|"'fake_image'"
op|'}'
newline|'\n'
name|'vol_bdm'
op|'='
op|'{'
string|"'context'"
op|':'
name|'admin'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'fake_vol'"
op|'}'
newline|'\n'
name|'bdms'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'bdm'
name|'in'
name|'img_bdm'
op|','
name|'vol_bdm'
op|':'
newline|'\n'
indent|'            '
name|'bdm_obj'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
op|'**'
name|'bdm'
op|')'
newline|'\n'
name|'bdm_obj'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'bdms'
op|'.'
name|'append'
op|'('
name|'bdm_obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.volume.cinder.API.terminate_connection'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'MockAnything'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.volume.cinder.API.detach'"
op|','
name|'mox'
op|'.'
name|'MockAnything'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stub_out'
op|'('
string|"'nova.volume.cinder.API.get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_prep_block_device'"
op|','
name|'mox'
op|'.'
name|'MockAnything'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'admin'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
string|"'deallocate_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unlock
dedent|''
name|'def'
name|'test_unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
string|"'deallocate_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_security_group
dedent|''
name|'def'
name|'test_add_remove_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'.'
name|'uuid'
op|','
nl|'\n'
name|'want_objects'
op|'='
name|'True'
op|')'
newline|'\n'
name|'security_group_name'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'add_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'remove_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diagnostics
dedent|''
name|'def'
name|'test_get_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_diagnostics'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_diagnostics
dedent|''
name|'def'
name|'test_get_instance_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'get_instance_diagnostics'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'refresh_instance_security_rules'"
op|')'
newline|'\n'
DECL|member|test_refresh_instance_security_rules
name|'def'
name|'test_refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'mock_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'inst2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'_refresh_instance_security_rules'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'inst1'
op|','
name|'inst2'
op|']'
op|')'
newline|'\n'
name|'mock_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst1'
op|'.'
name|'host'
op|','
name|'inst1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
nl|'\n'
string|"'refresh_instance_security_rules'"
op|')'
newline|'\n'
DECL|member|test_refresh_instance_security_rules_empty
name|'def'
name|'test_refresh_instance_security_rules_empty'
op|'('
name|'self'
op|','
name|'mock_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'_refresh_instance_security_rules'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_refresh'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_api'
op|'.'
name|'SecurityGroupAPI'
op|','
nl|'\n'
string|"'_refresh_instance_security_rules'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
nl|'\n'
string|"'get_by_grantee_security_group_ids'"
op|')'
newline|'\n'
DECL|member|test_secgroup_refresh
name|'def'
name|'test_secgroup_refresh'
op|'('
name|'self'
op|','
name|'mock_get'
op|','
name|'mock_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instances'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_members_refresh'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ids'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ids'
op|')'
newline|'\n'
name|'mock_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instances'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_api'
op|'.'
name|'SecurityGroupAPI'
op|','
nl|'\n'
string|"'_refresh_instance_security_rules'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
nl|'\n'
string|"'get_by_security_group_id'"
op|')'
newline|'\n'
DECL|member|test_secrule_refresh
name|'def'
name|'test_secrule_refresh'
op|'('
name|'self'
op|','
name|'mock_get'
op|','
name|'mock_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instances'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'mock_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migrate
dedent|''
name|'def'
name|'test_live_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rpcapi'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_task_api'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'_record_action_start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpcapi'
op|','
string|"'live_migrate_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_record_action_start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'live-migration'"
op|')'
newline|'\n'
name|'rpcapi'
op|'.'
name|'live_migrate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'fake_dest_host'"
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'live_migrate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'True'
op|','
nl|'\n'
name|'host_name'
op|'='
string|"'fake_dest_host'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_evacuate
dedent|''
name|'def'
name|'test_evacuate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'services'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_spec'
op|'='
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_rebuild_instance
name|'def'
name|'fake_rebuild_instance'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'host'
op|'='
name|'kwargs'
op|'['
string|"'host'"
op|']'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_task_api'
op|','
nl|'\n'
string|"'rebuild_instance'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|','
nl|'\n'
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'servicegroup_api'
op|','
string|"'service_is_up'"
op|')'
newline|'\n'
DECL|function|do_test
name|'def'
name|'do_test'
op|'('
name|'service_is_up'
op|','
name|'get_by_instance_uuid'
op|','
name|'rebuild_instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'service_is_up'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'fake_spec'
newline|'\n'
name|'rebuild_instance'
op|'.'
name|'side_effect'
op|'='
name|'fake_rebuild_instance'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'evacuate'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest_host'"
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'rebuild_instance'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
nl|'\n'
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'bdms'
op|'='
name|'None'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'fake_spec'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest_host'"
op|')'
newline|'\n'
dedent|''
name|'do_test'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'.'
name|'refresh'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'.'
name|'host'
op|','
string|"'fake_dest_host'"
op|')'
newline|'\n'
name|'migs'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_by_filters'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'source_host'"
op|':'
string|"'fake_host'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'migs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake_host'"
op|','
name|'migs'
op|'['
number|'0'
op|']'
op|'.'
name|'source_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'accepted'"
op|','
name|'migs'
op|'['
number|'0'
op|']'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'compute.instance.evacuate'"
op|','
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
op|'.'
name|'event_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_evacuate_from_non_existing_host
dedent|''
name|'def'
name|'test_fail_evacuate_from_non_existing_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'inst'
op|'['
string|"'launched_at'"
op|']'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'FAKE_IMAGE_REF'
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'inst'
op|'['
string|"'host'"
op|']'
op|'='
string|"'fake_host'"
newline|'\n'
name|'inst'
op|'['
string|"'node'"
op|']'
op|'='
name|'NODENAME'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'type_id'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'architecture'"
op|']'
op|'='
name|'arch'
op|'.'
name|'X86_64'
newline|'\n'
name|'inst'
op|'['
string|"'os_type'"
op|']'
op|'='
string|"'Linux'"
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'evacuate'
op|','
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest_host'"
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_evacuate_from_running_host
dedent|''
name|'def'
name|'test_fail_evacuate_from_running_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'services'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_service_is_up
name|'def'
name|'fake_service_is_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'servicegroup_api'
op|','
string|"'service_is_up'"
op|','
nl|'\n'
name|'fake_service_is_up'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeServiceInUse'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'evacuate'
op|','
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest_host'"
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_evacuate_instance_in_wrong_state
dedent|''
name|'def'
name|'test_fail_evacuate_instance_in_wrong_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'states'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'DELETED'
op|']'
newline|'\n'
name|'instances'
op|'='
op|'['
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'state'
op|'}'
op|')'
nl|'\n'
name|'for'
name|'state'
name|'in'
name|'states'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'evacuate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest_host'"
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'admin_password'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_migrations
dedent|''
dedent|''
name|'def'
name|'test_get_migrations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'migration'
op|'='
name|'test_migration'
op|'.'
name|'fake_db_migration'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'host1'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|'"migration_get_all_by_filters"'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'migration_get_all_by_filters'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'migration'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'migrations'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_migrations'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'migrations'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'migrations'
op|'['
number|'0'
op|']'
op|'.'
name|'id'
op|','
name|'migration'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPIIpFilterTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAPIIpFilterTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|"'''Verifies the IP filtering in the compute API.'''"
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAPIIpFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_ip_filtering_instances
dedent|''
name|'def'
name|'_get_ip_filtering_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Utility function to get instances for the IP filtering tests.'''"
newline|'\n'
name|'info'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'aa:bb:cc:dd:ee:ff'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'network'"
op|':'
op|'{'
nl|'\n'
string|"'bridge'"
op|':'
string|"'br0'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'private'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.0.10'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'fixed'"
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.0.11'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'fixed'"
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'aa:bb:cc:dd:ee:ff'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'network'"
op|':'
op|'{'
nl|'\n'
string|"'bridge'"
op|':'
string|"'br1'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'private'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.164.0.0/24'"
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'192.164.0.10'"
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'fixed'"
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
op|']'
nl|'\n'
op|'}'
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'info1'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
name|'network_info'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'info'
op|')'
op|')'
newline|'\n'
name|'inst1'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'info_cache'
op|'='
name|'info1'
op|')'
newline|'\n'
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|'='
string|"'192.168.0.20'"
newline|'\n'
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'1'
op|']'
op|'['
string|"'address'"
op|']'
op|'='
string|"'192.168.0.21'"
newline|'\n'
name|'info'
op|'['
number|'1'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|'='
string|"'192.164.0.20'"
newline|'\n'
name|'info2'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
name|'network_info'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'info'
op|')'
op|')'
newline|'\n'
name|'inst2'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'id'
op|'='
number|'2'
op|','
name|'info_cache'
op|'='
name|'info2'
op|')'
newline|'\n'
name|'return'
name|'objects'
op|'.'
name|'InstanceList'
op|'('
name|'objects'
op|'='
op|'['
name|'inst1'
op|','
name|'inst2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_no_matches
dedent|''
name|'def'
name|'test_ip_filtering_no_matches'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_ip_filtering_instances'
op|'('
op|')'
newline|'\n'
name|'insts'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_ip_filter'
op|'('
name|'instances'
op|','
op|'{'
string|"'ip'"
op|':'
string|"'.*30'"
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'insts'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_one_match
dedent|''
name|'def'
name|'test_ip_filtering_one_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_ip_filtering_instances'
op|'('
op|')'
newline|'\n'
name|'for'
name|'val'
name|'in'
op|'('
string|"'192.168.0.10'"
op|','
string|"'192.168.0.1'"
op|','
string|"'192.164.0.10'"
op|','
string|"'.*10'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'insts'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_ip_filter'
op|'('
name|'instances'
op|','
op|'{'
string|"'ip'"
op|':'
name|'val'
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|']'
op|','
op|'['
name|'i'
op|'.'
name|'id'
name|'for'
name|'i'
name|'in'
name|'insts'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_one_match_limit
dedent|''
dedent|''
name|'def'
name|'test_ip_filtering_one_match_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_ip_filtering_instances'
op|'('
op|')'
newline|'\n'
name|'for'
name|'limit'
name|'in'
op|'('
name|'None'
op|','
number|'1'
op|','
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'insts'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_ip_filter'
op|'('
name|'instances'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'.*10'"
op|'}'
op|','
nl|'\n'
name|'limit'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|']'
op|','
op|'['
name|'i'
op|'.'
name|'id'
name|'for'
name|'i'
name|'in'
name|'insts'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_two_matches
dedent|''
dedent|''
name|'def'
name|'test_ip_filtering_two_matches'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_ip_filtering_instances'
op|'('
op|')'
newline|'\n'
name|'for'
name|'val'
name|'in'
op|'('
string|"'192.16'"
op|','
string|"'192.168'"
op|','
string|"'192.164'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'insts'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_ip_filter'
op|'('
name|'instances'
op|','
op|'{'
string|"'ip'"
op|':'
name|'val'
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'['
name|'i'
op|'.'
name|'id'
name|'for'
name|'i'
name|'in'
name|'insts'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_two_matches_limit
dedent|''
dedent|''
name|'def'
name|'test_ip_filtering_two_matches_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
name|'self'
op|'.'
name|'_get_ip_filtering_instances'
op|'('
op|')'
newline|'\n'
comment|'# Up to 2 match, based on the passed limit'
nl|'\n'
name|'for'
name|'limit'
name|'in'
op|'('
name|'None'
op|','
number|'1'
op|','
number|'2'
op|','
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'insts'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_ip_filter'
op|'('
name|'instances'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'192.168.0.*'"
op|'}'
op|','
nl|'\n'
name|'limit'
op|')'
newline|'\n'
name|'expected_ids'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|']'
newline|'\n'
name|'if'
name|'limit'
op|':'
newline|'\n'
indent|'                '
name|'expected_len'
op|'='
name|'min'
op|'('
name|'limit'
op|','
name|'len'
op|'('
name|'expected_ids'
op|')'
op|')'
newline|'\n'
name|'expected_ids'
op|'='
name|'expected_ids'
op|'['
op|':'
name|'expected_len'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_ids'
op|','
op|'['
name|'inst'
op|'.'
name|'id'
name|'for'
name|'inst'
name|'in'
name|'insts'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_no_limit_to_db
dedent|''
dedent|''
name|'def'
name|'test_ip_filtering_no_limit_to_db'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
comment|'# Limit is not supplied to the DB when using an IP filter'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.InstanceList.get_by_filters'"
op|')'
name|'as'
name|'m_get'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.10'"
op|'}'
op|','
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'m_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'m_get'
op|'.'
name|'call_args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'kwargs'
op|'['
string|"'limit'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_filtering_pass_limit_to_db
dedent|''
dedent|''
name|'def'
name|'test_ip_filtering_pass_limit_to_db'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
comment|'# No IP filter, verify that the limit is passed'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.InstanceList.get_by_filters'"
op|')'
name|'as'
name|'m_get'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
op|'}'
op|','
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'m_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'kwargs'
op|'='
name|'m_get'
op|'.'
name|'call_args'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'kwargs'
op|'['
string|"'limit'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_rpc_method
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_rpc_method'
op|'('
name|'context'
op|','
name|'method'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_service_entries
dedent|''
name|'def'
name|'_create_service_entries'
op|'('
name|'context'
op|','
name|'values'
op|'='
op|'['
op|'['
string|"'avail_zone1'"
op|','
op|'['
string|"'fake_host1'"
op|','
nl|'\n'
string|"'fake_host2'"
op|']'
op|']'
op|','
nl|'\n'
op|'['
string|"'avail_zone2'"
op|','
op|'['
string|"'fake_host3'"
op|']'
op|']'
op|']'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
op|'('
name|'avail_zone'
op|','
name|'hosts'
op|')'
name|'in'
name|'values'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'service_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'host'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPIAggrTestCase
dedent|''
name|'class'
name|'ComputeAPIAggrTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for unit coverage of aggregate-related methods\n    defined in nova.compute.api.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAPIAggrTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'compute_api'
op|'.'
name|'AggregateAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'api'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'client'
op|','
string|"'call'"
op|','
name|'fake_rpc_method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'api'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'client'
op|','
string|"'cast'"
op|','
name|'fake_rpc_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_aggregate_no_zone
dedent|''
name|'def'
name|'test_aggregate_no_zone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can create an aggregate without an availability  zone'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AggregateNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_az_for_aggregate
dedent|''
name|'def'
name|'test_check_az_for_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure all conflict hosts can be returned'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host1'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host2'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'aggr1'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host1'
op|')'
newline|'\n'
name|'aggr1'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'aggr1'
op|','
name|'None'
op|','
name|'None'
op|','
name|'fake_host2'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host2'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'aggr2'
op|','
name|'None'
op|','
name|'None'
op|','
name|'fake_host1'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'another_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionUpdate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate
dedent|''
name|'def'
name|'test_update_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure metadata can be updated.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
string|"'new_fake_aggregate'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'availability_zones'
op|'.'
name|'_get_cache'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'cache'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updateprop.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updateprop.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_no_az
dedent|''
name|'def'
name|'test_update_aggregate_no_az'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure metadata without availability zone can be'
nl|'\n'
comment|'# updated,even the aggregate contains hosts belong'
nl|'\n'
comment|'# to another availability zone'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'new_fake_aggregate'"
op|'}'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updateprop.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updateprop.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_az_change
dedent|''
name|'def'
name|'test_update_aggregate_az_change'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure availability zone can be updated,'
nl|'\n'
comment|'# when the aggregate is the only one with'
nl|'\n'
comment|'# availability zone'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr1'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'new_fake_zone'"
op|'}'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr1'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_az_fails
dedent|''
name|'def'
name|'test_update_aggregate_az_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure aggregate's availability zone can't be updated,"
nl|'\n'
comment|'# when aggregate has hosts in other availability zone'
nl|'\n'
indent|'        '
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'another_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionUpdate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'fake_host2'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
name|'aggr3'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate3'"
op|','
nl|'\n'
name|'None'
op|','
name|'fake_host2'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
name|'fake_zone'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr3'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'15'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'13'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'14'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_az_fails_with_nova_az
dedent|''
name|'def'
name|'test_update_aggregate_az_fails_with_nova_az'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure aggregate's availability zone can't be updated,"
nl|'\n'
comment|'# when aggregate has hosts in other availability zone'
nl|'\n'
indent|'        '
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'default_availability_zone'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'another_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionUpdate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_metadata
dedent|''
name|'def'
name|'test_update_aggregate_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure metadata can be updated.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'foo_key1'"
op|':'
string|"'foo_value1'"
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'fake_zone'"
op|'}'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'availability_zones'
op|'.'
name|'_get_cache'
op|'('
op|')'
op|'.'
name|'add'
op|'('
string|"'fake_key'"
op|','
string|"'fake_value'"
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'availability_zones'
op|'.'
name|'_get_cache'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|"'fake_key'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'metadata'
op|'['
string|"'foo_key1'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'expected_payload_meta_data'
op|'='
op|'{'
string|"'foo_key1'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'fake_zone'"
op|'}'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'aggregate.updatemetadata.start'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_payload_meta_data'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'meta_data'"
op|']'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'aggregate.updatemetadata.end'"
op|','
name|'msg'
op|'.'
name|'event_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_payload_meta_data'
op|','
name|'msg'
op|'.'
name|'payload'
op|'['
string|"'meta_data'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'expected'
op|'.'
name|'metadata'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
op|'{'
string|"'availability_zone'"
op|':'
string|"'fake_zone'"
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_metadata_no_az
dedent|''
name|'def'
name|'test_update_aggregate_metadata_no_az'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure metadata without availability zone can be'
nl|'\n'
comment|'# updated,even the aggregate contains hosts belong'
nl|'\n'
comment|'# to another availability zone'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'foo_key2'"
op|':'
string|"'foo_value3'"
op|'}'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'aggr2'
op|'.'
name|'metadata'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
op|'{'
string|"'foo_key2'"
op|':'
string|"'foo_value3'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_metadata_az_change
dedent|''
name|'def'
name|'test_update_aggregate_metadata_az_change'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure availability zone can be updated,'
nl|'\n'
comment|'# when the aggregate is the only one with'
nl|'\n'
comment|'# availability zone'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr1'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'new_fake_zone'"
op|'}'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr1'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_az_do_not_replace_existing_metadata
dedent|''
name|'def'
name|'test_update_aggregate_az_do_not_replace_existing_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that that update of the aggregate availability zone'
nl|'\n'
comment|'# does not replace the aggregate existing metadata'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'foo_key1'"
op|':'
string|"'foo_value1'"
op|'}'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'new_fake_zone'"
op|'}'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'aggr'
op|'.'
name|'metadata'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
nl|'\n'
op|'{'
string|"'availability_zone'"
op|':'
string|"'new_fake_zone'"
op|','
string|"'foo_key1'"
op|':'
string|"'foo_value1'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_metadata_az_fails
dedent|''
name|'def'
name|'test_update_aggregate_metadata_az_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure aggregate's availability zone can't be updated,"
nl|'\n'
comment|'# when aggregate has hosts in other availability zone'
nl|'\n'
indent|'        '
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate1'"
op|','
nl|'\n'
name|'fake_zone'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate2'"
op|','
name|'None'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'another_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionUpdateMeta'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'aggr3'
op|'='
name|'self'
op|'.'
name|'_init_aggregate_with_host'
op|'('
name|'None'
op|','
string|"'fake_aggregate3'"
op|','
nl|'\n'
name|'None'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
name|'fake_zone'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr3'
op|'.'
name|'id'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'15'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'13'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'14'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.updatemetadata.end'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_aggregate
dedent|''
name|'def'
name|'test_delete_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can delete an aggregate.'
nl|'\n'
indent|'        '
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.create.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.create.end'"
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.delete.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.delete.end'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AggregateNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_non_empty_aggregate
dedent|''
name|'def'
name|'test_delete_non_empty_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure InvalidAggregateAction is raised when non empty aggregate.'
nl|'\n'
indent|'        '
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
op|'['
string|"'fake_availability_zone'"
op|','
op|'['
string|"'fake_host'"
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_availability_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
string|"'fake_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionDelete'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate
dedent|''
name|'def'
name|'test_add_host_to_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can add a host to an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_add_aggregate_host
name|'def'
name|'fake_add_aggregate_host'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'='
name|'kwargs'
op|'['
string|'"aggregate"'
op|']'
op|'.'
name|'hosts'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'fake_host'
op|','
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'api'
op|'.'
name|'compute_rpcapi'
op|','
string|"'add_aggregate_host'"
op|','
nl|'\n'
name|'fake_add_aggregate_host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'availability_zones'
op|','
nl|'\n'
string|"'update_host_availability_zone_cache'"
op|')'
newline|'\n'
nl|'\n'
name|'availability_zones'
op|'.'
name|'update_host_availability_zone_cache'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.addhost.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.addhost.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'.'
name|'hosts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggr_with_no_az
dedent|''
name|'def'
name|'test_add_host_to_aggr_with_no_az'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'aggr_no_az'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate2'"
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'aggr_no_az'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr_no_az'
op|'.'
name|'id'
op|','
nl|'\n'
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'fake_host'
op|','
name|'aggr'
op|'.'
name|'hosts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'fake_host'
op|','
name|'aggr_no_az'
op|'.'
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_multi_az
dedent|''
name|'def'
name|'test_add_host_to_multi_az'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure we can't add a host to different availability zone"
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'.'
name|'hosts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'fake_zone2'
op|'='
string|'"another_zone"'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate2'"
op|','
name|'fake_zone2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionAdd'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'fake_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_multi_az_with_nova_agg
dedent|''
name|'def'
name|'test_add_host_to_multi_az_with_nova_agg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure we can't add a host if already existing in an agg with AZ set"
nl|'\n'
comment|'#  to default'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'default_availability_zone'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'.'
name|'hosts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'fake_zone2'
op|'='
string|'"another_zone"'
newline|'\n'
name|'aggr2'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate2'"
op|','
name|'fake_zone2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateActionAdd'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr2'
op|'.'
name|'id'
op|','
name|'fake_host'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate_multiple
dedent|''
name|'def'
name|'test_add_host_to_aggregate_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can add multiple hosts to an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'.'
name|'hosts'
op|')'
op|','
name|'len'
op|'('
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate_raise_not_found
dedent|''
name|'def'
name|'test_add_host_to_aggregate_raise_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure ComputeHostNotFound is raised when adding invalid host.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
string|"'invalid_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
op|'.'
name|'publisher_id'
op|','
nl|'\n'
string|"'compute.fake-mini'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_host_from_aggregate_active
dedent|''
name|'def'
name|'test_remove_host_from_aggregate_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can remove a host from an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
name|'host_to_remove'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_remove_aggregate_host
name|'def'
name|'fake_remove_aggregate_host'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'hosts'
op|'='
name|'kwargs'
op|'['
string|'"aggregate"'
op|']'
op|'.'
name|'hosts'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'host_to_remove'
op|','
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'api'
op|'.'
name|'compute_rpcapi'
op|','
string|"'remove_aggregate_host'"
op|','
nl|'\n'
name|'fake_remove_aggregate_host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'availability_zones'
op|','
nl|'\n'
string|"'update_host_availability_zone_cache'"
op|')'
newline|'\n'
name|'availability_zones'
op|'.'
name|'update_host_availability_zone_cache'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'host_to_remove'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'remove_host_from_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'.'
name|'id'
op|','
nl|'\n'
name|'host_to_remove'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.removehost.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
nl|'\n'
string|"'aggregate.removehost.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'.'
name|'hosts'
op|')'
op|'-'
number|'1'
op|','
name|'len'
op|'('
name|'expected'
op|'.'
name|'hosts'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_host_from_aggregate_raise_not_found
dedent|''
name|'def'
name|'test_remove_host_from_aggregate_raise_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure ComputeHostNotFound is raised when removing invalid host.'
nl|'\n'
indent|'        '
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
op|'['
string|"'fake_zone'"
op|','
op|'['
string|"'fake_host'"
op|']'
op|']'
op|']'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'remove_host_from_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'.'
name|'id'
op|','
string|"'invalid_host'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_aggregate_list
dedent|''
name|'def'
name|'test_aggregate_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aggregate'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'foo_key1'"
op|':'
string|"'foo_value1'"
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|'}'
newline|'\n'
name|'meta_aggregate'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate2'"
op|','
nl|'\n'
string|"'fake_zone2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'meta_aggregate'
op|'.'
name|'id'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'aggregate_list'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_aggregate_list'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'aggregate'
op|'.'
name|'id'
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'id'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'meta_aggregate'
op|'.'
name|'id'
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'id'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'fake_aggregate'"
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'name'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'fake_aggregate2'"
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'name'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'fake_zone'"
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'availability_zone'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'fake_zone2'"
op|','
nl|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'availability_zone'
op|','
name|'aggregate_list'
op|')'
op|')'
newline|'\n'
name|'test_agg_meta'
op|'='
name|'getattr'
op|'('
name|'aggregate_list'
op|'['
number|'1'
op|']'
op|','
string|"'metadata'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'foo_key1'"
op|','
name|'test_agg_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'foo_key2'"
op|','
name|'test_agg_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo_value1'"
op|','
name|'test_agg_meta'
op|'['
string|"'foo_key1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo_value2'"
op|','
name|'test_agg_meta'
op|'['
string|"'foo_key2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_aggregate_list_with_hosts
dedent|''
name|'def'
name|'test_aggregate_list_with_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'host_aggregate'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
nl|'\n'
name|'fake_zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'host_aggregate'
op|'.'
name|'id'
op|','
nl|'\n'
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'aggregate_list'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_aggregate_list'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'aggregate'
op|'='
name|'aggregate_list'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'values'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
number|'0'
op|']'
op|','
name|'getattr'
op|'('
name|'aggregate'
op|','
string|"'hosts'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPIAggrCallsSchedulerTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAPIAggrCallsSchedulerTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for making sure that all Aggregate API methods which are\n    updating the aggregates DB table also notifies the Scheduler by using\n    its client.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAPIAggrCallsSchedulerTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'compute_api'
op|'.'
name|'AggregateAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'update_aggregates'"
op|')'
newline|'\n'
DECL|member|test_create_aggregate
name|'def'
name|'test_create_aggregate'
op|'('
name|'self'
op|','
name|'update_aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'create'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'agg'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'update_aggregates'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'agg'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'update_aggregates'"
op|')'
newline|'\n'
DECL|member|test_update_aggregate
name|'def'
name|'test_update_aggregate'
op|'('
name|'self'
op|','
name|'update_aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'is_safe_to_update_az'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'='
name|'objects'
op|'.'
name|'Aggregate'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'get_by_id'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'agg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'update_aggregates'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'agg'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'update_aggregates'"
op|')'
newline|'\n'
DECL|member|test_update_aggregate_metadata
name|'def'
name|'test_update_aggregate_metadata'
op|'('
name|'self'
op|','
name|'update_aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'is_safe_to_update_az'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'='
name|'objects'
op|'.'
name|'Aggregate'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'.'
name|'update_metadata'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'get_by_id'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'agg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'update_aggregates'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'agg'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'delete_aggregate'"
op|')'
newline|'\n'
DECL|member|test_delete_aggregate
name|'def'
name|'test_delete_aggregate'
op|'('
name|'self'
op|','
name|'delete_aggregate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'is_safe_to_update_az'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'='
name|'objects'
op|'.'
name|'Aggregate'
op|'('
name|'hosts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'agg'
op|'.'
name|'destroy'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'get_by_id'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'agg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'delete_aggregate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'agg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'update_aggregates'"
op|')'
newline|'\n'
DECL|member|test_add_host_to_aggregate
name|'def'
name|'test_add_host_to_aggregate'
op|'('
name|'self'
op|','
name|'update_aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'is_safe_to_update_az'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'_update_az_cache_for_host'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'='
name|'objects'
op|'.'
name|'Aggregate'
op|'('
name|'name'
op|'='
string|"'fake'"
op|','
name|'metadata'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'agg'
op|'.'
name|'add_host'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Service'
op|','
string|"'get_by_compute_host'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'get_by_id'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'agg'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
string|"'fakehost'"
op|')'
newline|'\n'
dedent|''
name|'update_aggregates'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'agg'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'scheduler_client'
op|'.'
name|'SchedulerClient'
op|','
string|"'update_aggregates'"
op|')'
newline|'\n'
DECL|member|test_remove_host_from_aggregate
name|'def'
name|'test_remove_host_from_aggregate'
op|'('
name|'self'
op|','
name|'update_aggregates'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'_update_az_cache_for_host'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'agg'
op|'='
name|'objects'
op|'.'
name|'Aggregate'
op|'('
name|'name'
op|'='
string|"'fake'"
op|','
name|'metadata'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'agg'
op|'.'
name|'delete_host'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'test'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Service'
op|','
string|"'get_by_compute_host'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Aggregate'
op|','
string|"'get_by_id'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'agg'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'remove_host_from_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
string|"'fakehost'"
op|')'
newline|'\n'
dedent|''
name|'update_aggregates'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
name|'agg'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAggrTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAggrTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for unit coverage of aggregate-related methods\n    defined in nova.compute.manager.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAggrTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'test_aggr'"
op|'}'
newline|'\n'
name|'az'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'test_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'aggr'
op|'='
name|'db'
op|'.'
name|'aggregate_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|','
name|'metadata'
op|'='
name|'az'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_aggregate_host
dedent|''
name|'def'
name|'test_add_aggregate_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_driver_add_to_aggregate
indent|'        '
name|'def'
name|'fake_driver_add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'_ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_driver_add_to_aggregate'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'{'
string|'"foo"'
op|':'
string|'"bar"'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"add_to_aggregate"'
op|','
nl|'\n'
name|'fake_driver_add_to_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'host'
op|'='
string|'"host"'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|','
name|'slave_info'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_driver_add_to_aggregate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_aggregate_host
dedent|''
name|'def'
name|'test_remove_aggregate_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_driver_remove_from_aggregate
indent|'        '
name|'def'
name|'fake_driver_remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
op|'**'
name|'_ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_driver_remove_from_aggregate'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"host"'
op|','
name|'host'
op|','
string|'"host"'
op|')'
newline|'\n'
name|'return'
op|'{'
string|'"foo"'
op|':'
string|'"bar"'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"remove_from_aggregate"'
op|','
nl|'\n'
name|'fake_driver_remove_from_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|','
name|'host'
op|'='
string|'"host"'
op|','
nl|'\n'
name|'slave_info'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_driver_remove_from_aggregate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_aggregate_host_passes_slave_info_to_driver
dedent|''
name|'def'
name|'test_add_aggregate_host_passes_slave_info_to_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|driver_add_to_aggregate
indent|'        '
name|'def'
name|'driver_add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|','
name|'self'
op|'.'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
string|'"the_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"SLAVE_INFO"'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"slave_info"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"add_to_aggregate"'
op|','
nl|'\n'
name|'driver_add_to_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'host'
op|'='
string|'"the_host"'
op|','
nl|'\n'
name|'slave_info'
op|'='
string|'"SLAVE_INFO"'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_from_aggregate_passes_slave_info_to_driver
dedent|''
name|'def'
name|'test_remove_from_aggregate_passes_slave_info_to_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|driver_remove_from_aggregate
indent|'        '
name|'def'
name|'driver_remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|','
name|'self'
op|'.'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
string|'"the_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"SLAVE_INFO"'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"slave_info"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"remove_from_aggregate"'
op|','
nl|'\n'
name|'driver_remove_from_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|','
name|'host'
op|'='
string|'"the_host"'
op|','
nl|'\n'
name|'slave_info'
op|'='
string|'"SLAVE_INFO"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputePolicyTestCase
dedent|''
dedent|''
name|'class'
name|'ComputePolicyTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputePolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_actions_are_prefixed
dedent|''
name|'def'
name|'test_actions_are_prefixed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'policy'
op|','
string|"'enforce'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute:reboot'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'compute_api'
op|'.'
name|'check_policy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'reboot'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrapped_method
dedent|''
name|'def'
name|'test_wrapped_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'cell_name'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# force delete to fail'
nl|'\n'
name|'rules'
op|'='
op|'{'
string|'"compute:delete"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset rules to allow deletion'
nl|'\n'
name|'rules'
op|'='
op|'{'
string|'"compute:delete"'
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_fail
dedent|''
name|'def'
name|'test_create_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_attach_volume_fail
dedent|''
name|'def'
name|'test_create_attach_volume_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_network"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_volume"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
string|"'blah'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'blah'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_attach_network_fail
dedent|''
name|'def'
name|'test_create_attach_network_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_network"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_volume"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
string|"'blah'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'blah'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_fail
dedent|''
name|'def'
name|'test_get_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:get"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_fail
dedent|''
name|'def'
name|'test_get_all_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:get_all"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_host_fail
dedent|''
name|'def'
name|'test_force_host_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:forced_host"'
op|':'
op|'['
op|'['
string|'"role:fake"'
op|']'
op|']'
op|','
nl|'\n'
string|'"network:validate_networks"'
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
string|"'1'"
op|','
nl|'\n'
name|'availability_zone'
op|'='
string|"'1'"
op|','
name|'forced_host'
op|'='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_host_pass
dedent|''
name|'def'
name|'test_force_host_pass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:forced_host"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"network:validate_networks"'
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Flavor'
op|'('
name|'id'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
name|'memory_mb'
op|'='
number|'256'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'1'
op|','
name|'ephemeral_gb'
op|'='
number|'1'
op|','
name|'swap'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'host_instance'
op|','
name|'availability_zone'
op|'='
string|"'1'"
op|','
nl|'\n'
name|'forced_host'
op|'='
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DisabledInstanceTypesTestCase
dedent|''
dedent|''
name|'class'
name|'DisabledInstanceTypesTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Some instance-types are marked \'disabled\' which means that they will not\n    show up in customer-facing listings. We do, however, want those\n    instance-types to be available for emergency migrations and for rebuilding\n    of existing instances.\n\n    One legitimate use of the \'disabled\' field would be when phasing out a\n    particular instance-type. We still want customers to be able to use an\n    instance that of the old type, and we want Ops to be able perform\n    migrations against it, but we *don\'t* want customers building new\n    instances with the phased-out instance-type.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DisabledInstanceTypesTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_build_instance_from_visible_instance_type
dedent|''
name|'def'
name|'test_can_build_instance_from_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'inst_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
comment|'# Assert that exception.FlavorNotFound is not raised'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'uuids'
op|'.'
name|'image_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cannot_build_instance_from_disabled_instance_type
dedent|''
name|'def'
name|'test_cannot_build_instance_from_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'inst_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_resize_to_visible_instance_type
dedent|''
name|'def'
name|'test_can_resize_to_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'orig_get_flavor_by_flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
newline|'\n'
nl|'\n'
DECL|function|fake_get_flavor_by_flavor_id
name|'def'
name|'fake_get_flavor_by_flavor_id'
op|'('
name|'flavor_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
nl|'\n'
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'orig_get_flavor_by_flavor_id'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'read_deleted'
op|')'
newline|'\n'
name|'instance_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'instance_type'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor_by_flavor_id'"
op|','
nl|'\n'
name|'fake_get_flavor_by_flavor_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_stub_migrate_server'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cannot_resize_to_disabled_instance_type
dedent|''
name|'def'
name|'test_cannot_resize_to_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'orig_get_flavor_by_flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
newline|'\n'
nl|'\n'
DECL|function|fake_get_flavor_by_flavor_id
name|'def'
name|'fake_get_flavor_by_flavor_id'
op|'('
name|'flavor_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
nl|'\n'
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'orig_get_flavor_by_flavor_id'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'read_deleted'
op|')'
newline|'\n'
name|'instance_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'instance_type'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor_by_flavor_id'"
op|','
nl|'\n'
name|'fake_get_flavor_by_flavor_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeReschedulingTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeReschedulingTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests re-scheduling logic for new build requests."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeReschedulingTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
nl|'\n'
DECL|function|fake_update
name|'def'
name|'fake_update'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'updated_task_state'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'task_state'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|','
name|'fake_update'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|','
name|'request_spec'
op|'='
name|'None'
op|','
name|'filter_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'scheduler_method'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_task_api'
op|'.'
name|'resize_instance'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'dict'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance'
op|','
name|'scheduler_method'
op|','
nl|'\n'
name|'method_args'
op|','
name|'self'
op|'.'
name|'expected_task_state'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_filter_properties
dedent|''
name|'def'
name|'test_reschedule_no_filter_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no filter_properties will disable re-scheduling.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_retry_info
dedent|''
name|'def'
name|'test_reschedule_no_retry_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no retry info will also disable re-scheduling.'
nl|'\n'
indent|'        '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_request_spec
dedent|''
name|'def'
name|'test_reschedule_no_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no request spec will also disable re-scheduling.'
nl|'\n'
indent|'        '
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_success
dedent|''
name|'def'
name|'test_reschedule_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'num_instances'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"just need an exception"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'test'
op|'.'
name|'TestingException'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'exc_str'
op|'='
name|'traceback'
op|'.'
name|'format_exception_only'
op|'('
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'exc_info'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'updated_task_state'
op|','
name|'self'
op|'.'
name|'expected_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc_str'
op|','
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'exc'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InnerTestingException
dedent|''
dedent|''
name|'class'
name|'InnerTestingException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRescheduleResizeOrReraiseTestCase
dedent|''
name|'class'
name|'ComputeRescheduleResizeOrReraiseTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test logic and exception handling around rescheduling prep resize\n    requests\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeRescheduleResizeOrReraiseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
nl|'\n'
string|'"m1.tiny"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_resize_or_reraise_called
dedent|''
name|'def'
name|'test_reschedule_resize_or_reraise_called'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify the rescheduling logic gets called when there is an error\n        during prep_resize.\n        """'
newline|'\n'
name|'inst_obj'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'db'
op|','
string|"'migration_create'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule_resize_or_reraise'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'inst_obj'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_obj'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'reservations'
op|'='
op|'['
op|']'
op|','
name|'request_spec'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|','
name|'node'
op|'='
name|'None'
op|','
nl|'\n'
name|'clean_shutdown'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_fails_with_exception
dedent|''
name|'def'
name|'test_reschedule_fails_with_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Original exception should be raised if the _reschedule method\n        raises another exception\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'scheduler_hint'
op|'='
name|'dict'
op|'('
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'None'
op|','
name|'scheduler_hint'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_task_api'
op|'.'
name|'resize_instance'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'InnerTestingException'
op|'('
string|'"Inner"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_false
dedent|''
dedent|''
name|'def'
name|'test_reschedule_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Original exception should be raised if the resize is not\n        rescheduled.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'scheduler_hint'
op|'='
name|'dict'
op|'('
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'None'
op|','
name|'scheduler_hint'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_task_api'
op|'.'
name|'resize_instance'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'none_quotas'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_true
dedent|''
dedent|''
name|'def'
name|'test_reschedule_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If rescheduled, the original resize exception should be logged.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'scheduler_hint'
op|'='
name|'dict'
op|'('
name|'filter_properties'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'None'
op|','
name|'scheduler_hint'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_log_original_error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_task_api'
op|'.'
name|'resize_instance'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
name|'exc_info'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|','
name|'exc_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_type'
op|','
name|'self'
op|'.'
name|'none_quotas'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeInactiveImageTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ComputeInactiveImageTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeInactiveImageTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'id'
op|','
string|"'name'"
op|':'
string|"'fake_name'"
op|','
string|"'status'"
op|':'
string|"'deleted'"
op|','
nl|'\n'
string|"'min_ram'"
op|':'
number|'0'
op|','
string|"'min_disk'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'something_else'"
op|':'
string|"'meow'"
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_deleted_image
dedent|''
name|'def'
name|'test_create_instance_with_deleted_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure we can't start an instance with a deleted image."
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'uuids'
op|'.'
name|'image_instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|EvacuateHostTestCase
dedent|''
dedent|''
name|'class'
name|'EvacuateHostTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'EvacuateHostTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inst'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|','
string|"'node'"
op|':'
string|"'fakenode2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inst'
op|'.'
name|'task_state'
op|'='
name|'task_states'
op|'.'
name|'REBUILDING'
newline|'\n'
name|'self'
op|'.'
name|'inst'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_compute_info
name|'def'
name|'fake_get_compute_info'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cn'
op|'='
name|'objects'
op|'.'
name|'ComputeNode'
op|'('
name|'hypervisor_hostname'
op|'='
name|'self'
op|'.'
name|'rt'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'cn'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_info'"
op|','
nl|'\n'
name|'fake_get_compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'SpawnIsSynchronousFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'super'
op|'('
name|'EvacuateHostTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_rebuild
dedent|''
name|'def'
name|'_rebuild'
op|'('
name|'self'
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|','
name|'migration'
op|'='
name|'None'
op|','
nl|'\n'
name|'send_node'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network_api'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'limits'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'send_node'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'NODENAME'
newline|'\n'
name|'limits'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'network_api'
op|','
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'network_api'
op|','
string|"'setup_instance_network_on_host'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.context.RequestContext.elevated'"
op|','
name|'return_value'
op|'='
name|'ctxt'
op|')'
newline|'\n'
DECL|function|_test_rebuild
name|'def'
name|'_test_rebuild'
op|'('
name|'mock_context'
op|','
name|'mock_setup_instance_network_on_host'
op|','
nl|'\n'
name|'mock_setup_networks_on_host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'orig_image_ref'
op|'='
name|'None'
newline|'\n'
name|'image_ref'
op|'='
name|'None'
newline|'\n'
name|'injected_files'
op|'='
name|'None'
newline|'\n'
name|'bdms'
op|'='
name|'objects'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'inst'
op|','
name|'orig_image_ref'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'injected_files'
op|','
string|"'newpass'"
op|','
op|'{'
op|'}'
op|','
name|'bdms'
op|','
name|'recreate'
op|'='
name|'True'
op|','
nl|'\n'
name|'on_shared_storage'
op|'='
name|'on_shared_storage'
op|','
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'scheduled_node'
op|'='
name|'node'
op|','
name|'limits'
op|'='
name|'limits'
op|')'
newline|'\n'
name|'mock_setup_networks_on_host'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'inst'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'mock_setup_instance_network_on_host'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'inst'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_test_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_updated_target
dedent|''
name|'def'
name|'test_rebuild_on_host_updated_target'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario updates host and node."""'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_compute_info
name|'def'
name|'fake_get_compute_info'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'context'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake-mini'"
op|','
name|'host'
op|')'
newline|'\n'
name|'cn'
op|'='
name|'objects'
op|'.'
name|'ComputeNode'
op|'('
name|'hypervisor_hostname'
op|'='
name|'self'
op|'.'
name|'rt'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'return'
name|'cn'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_info'"
op|','
nl|'\n'
name|'fake_get_compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Should be on destination host'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'NODENAME'
op|','
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_updated_target_node_not_found
dedent|''
name|'def'
name|'test_rebuild_on_host_updated_target_node_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario where compute_node isn\'t found."""'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_compute_info
name|'def'
name|'fake_get_compute_info'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|'('
name|'host'
op|'='
name|'host'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_info'"
op|','
nl|'\n'
name|'fake_get_compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Should be on destination host'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_node_passed
dedent|''
name|'def'
name|'test_rebuild_on_host_node_passed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'patch_get_info'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_compute_info'"
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'with'
name|'patch_get_info'
name|'as'
name|'get_compute_info'
op|','
name|'patch_on_disk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'send_node'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'get_compute_info'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
comment|'# Should be on destination host and node set to what was passed in'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'node'"
op|']'
op|','
name|'NODENAME'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_instance_in_stopped_state
dedent|''
name|'def'
name|'test_rebuild_with_instance_in_stopped_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario updates vm_state to stopped\n        if instance is in stopped state\n        """'
newline|'\n'
comment|'# Initialize the VM to stopped state'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|'"vm_state"'
op|':'
name|'vm_states'
op|'.'
name|'STOPPED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inst'
op|'.'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'STOPPED'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the vm state is reset to stopped'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_wrong_shared_storage
dedent|''
name|'def'
name|'test_rebuild_with_wrong_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario does not update host."""'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidSharedStorage'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'False'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Should remain on original host'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
string|"'fake_host_2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_with_volumes
dedent|''
name|'def'
name|'test_rebuild_on_host_with_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario reconnects volumes."""'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'uuids'
op|'.'
name|'volume_id'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|"'{}'"
op|'}'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
string|"'fake_volume_id'"
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"get"'
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stub out and record whether it gets detached'
nl|'\n'
name|'result'
op|'='
op|'{'
string|'"detached"'
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_detach
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'instance_uuid'
op|','
name|'attachment_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|'"detached"'
op|']'
op|'='
name|'volume'
op|'['
string|'"id"'
op|']'
op|'=='
string|"'fake_volume_id'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"detach"'
op|','
name|'fake_detach'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_driver_detach_volume'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_driver_detach_volume'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance_obj'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_terminate_connection
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"terminate_connection"'
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure volumes attach, detach are called'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'detach'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_prep_block_device'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_prep_block_device'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'bdms'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'BDM entry for the attached volume is missing'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'bdm'
name|'in'
name|'bdms'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_with_shared_storage
dedent|''
dedent|''
name|'def'
name|'test_rebuild_on_host_with_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario on shared storage."""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'newpass'"
op|','
nl|'\n'
name|'network_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_without_shared_storage
dedent|''
name|'def'
name|'test_rebuild_on_host_without_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario without shared storage\n        (rebuild from image)\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
string|"'newpass'"
op|')'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_instance_exists
dedent|''
name|'def'
name|'test_rebuild_on_host_instance_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild if instance exists raises an exception."""'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst'
op|'.'
name|'uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'inst'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceExists'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_driver_does_not_support_recreate
dedent|''
name|'def'
name|'test_driver_does_not_support_recreate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'dict'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|','
nl|'\n'
name|'supports_recreate'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceRecreateNotSupported'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_on_shared_storage_not_provided_host_without_shared_storage
dedent|''
dedent|''
name|'def'
name|'test_on_shared_storage_not_provided_host_without_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
string|"'newpass'"
op|')'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_on_shared_storage_not_provided_host_with_shared_storage
dedent|''
name|'def'
name|'test_on_shared_storage_not_provided_host_with_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'newpass'"
op|','
nl|'\n'
name|'network_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'on_shared_storage'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_migration_passed_in
dedent|''
name|'def'
name|'test_rebuild_migration_passed_in'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'migration'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'spec'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|')'
newline|'\n'
nl|'\n'
name|'patch_spawn'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'with'
name|'patch_spawn'
op|','
name|'patch_on_disk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'migration'
op|'='
name|'migration'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'done'"
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_migration_node_passed_in
dedent|''
name|'def'
name|'test_rebuild_migration_node_passed_in'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'patch_spawn'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'with'
name|'patch_spawn'
op|','
name|'patch_on_disk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'send_node'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'migrations'
op|'='
name|'objects'
op|'.'
name|'MigrationList'
op|'.'
name|'get_in_progress_by_host_and_node'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
name|'NODENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'migrations'
op|')'
op|')'
newline|'\n'
name|'migration'
op|'='
name|'migrations'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"evacuation"'
op|','
name|'migration'
op|'.'
name|'migration_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"pre-migrating"'
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_migration_claim_fails
dedent|''
name|'def'
name|'test_rebuild_migration_claim_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'migration'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'spec'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|')'
newline|'\n'
nl|'\n'
name|'patch_spawn'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'patch_claim'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'NODENAME'
op|']'
op|','
string|"'rebuild_claim'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|'('
name|'reason'
op|'='
string|'"boom"'
op|')'
op|')'
newline|'\n'
name|'with'
name|'patch_spawn'
op|','
name|'patch_on_disk'
op|','
name|'patch_claim'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'BuildAbortException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|','
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'send_node'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"failed"'
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_fails_migration_failed
dedent|''
name|'def'
name|'test_rebuild_fails_migration_failed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'migration'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'spec'
op|'='
name|'objects'
op|'.'
name|'Migration'
op|')'
newline|'\n'
nl|'\n'
name|'patch_spawn'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'patch_claim'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'NODENAME'
op|']'
op|','
string|"'rebuild_claim'"
op|')'
newline|'\n'
name|'patch_rebuild'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
string|"'_do_rebuild_instance_with_claim'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
op|')'
newline|'\n'
name|'with'
name|'patch_spawn'
op|','
name|'patch_on_disk'
op|','
name|'patch_claim'
op|','
name|'patch_rebuild'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_rebuild'
op|','
name|'migration'
op|'='
name|'migration'
op|','
nl|'\n'
name|'send_node'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"failed"'
op|','
name|'migration'
op|'.'
name|'status'
op|')'
newline|'\n'
name|'migration'
op|'.'
name|'save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_numa_migration_context_honoured
dedent|''
name|'def'
name|'test_rebuild_numa_migration_context_honoured'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'numa_topology'
op|'='
op|'('
nl|'\n'
name|'test_instance_numa_topology'
op|'.'
name|'get_fake_obj_numa_topology'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(ndipanov): Make sure that we pass the topology from the context'
nl|'\n'
DECL|function|fake_spawn
name|'def'
name|'fake_spawn'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'numa_topology'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'inst'
op|'.'
name|'numa_topology'
op|'='
name|'numa_topology'
newline|'\n'
name|'patch_spawn'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'fake_spawn'
op|')'
newline|'\n'
name|'patch_on_disk'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'with'
name|'patch_spawn'
op|','
name|'patch_on_disk'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_rebuild'
op|'('
name|'send_node'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'inst'
op|'.'
name|'numa_topology'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'inst'
op|'.'
name|'migration_context'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeInjectedFilesTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeInjectedFilesTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
comment|'# Test that running instances with injected_files decodes files correctly'
nl|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeInjectedFilesTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance_obj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'self'
op|'.'
name|'_spawn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'SpawnIsSynchronousFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'admin_password'
op|','
name|'nw_info'
op|','
name|'block_device_info'
op|','
name|'db_api'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'expected'
op|','
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test
dedent|''
name|'def'
name|'_test'
op|'('
name|'self'
op|','
name|'injected_files'
op|','
name|'decoded_files'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expected'
op|'='
name|'decoded_files'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_injected_none
dedent|''
name|'def'
name|'test_injected_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test an input of None for injected_files'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test'
op|'('
name|'None'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_injected_empty
dedent|''
name|'def'
name|'test_injected_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test an input of [] for injected_files'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test'
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_injected_success
dedent|''
name|'def'
name|'test_injected_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test with valid b64 encoded content.'
nl|'\n'
indent|'        '
name|'injected_files'
op|'='
op|'['
nl|'\n'
op|'('
string|"'/a/b/c'"
op|','
name|'base64'
op|'.'
name|'b64encode'
op|'('
string|"b'foobarbaz'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'/d/e/f'"
op|','
name|'base64'
op|'.'
name|'b64encode'
op|'('
string|"b'seespotrun'"
op|')'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'decoded_files'
op|'='
op|'['
nl|'\n'
op|'('
string|"'/a/b/c'"
op|','
string|"'foobarbaz'"
op|')'
op|','
nl|'\n'
op|'('
string|"'/d/e/f'"
op|','
string|"'seespotrun'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_test'
op|'('
name|'injected_files'
op|','
name|'decoded_files'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_injected_invalid
dedent|''
name|'def'
name|'test_injected_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# test with invalid b64 encoded content'
nl|'\n'
indent|'        '
name|'injected_files'
op|'='
op|'['
nl|'\n'
op|'('
string|"'/a/b/c'"
op|','
name|'base64'
op|'.'
name|'b64encode'
op|'('
string|"b'foobarbaz'"
op|')'
op|')'
op|','
nl|'\n'
op|'('
string|"'/d/e/f'"
op|','
string|"'seespotrun'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Base64Exception'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'build_and_run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'injected_files'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CheckConfigDriveTestCase
dedent|''
dedent|''
name|'class'
name|'CheckConfigDriveTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(sirp): `TestCase` is far too heavyweight for this test, this should'
nl|'\n'
comment|'# probably derive from a `test.FastTestCase` that omits DB and env'
nl|'\n'
comment|'# handling'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CheckConfigDriveTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertCheck
dedent|''
name|'def'
name|'_assertCheck'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'config_drive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_config_drive'
op|'('
name|'config_drive'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertInvalid
dedent|''
name|'def'
name|'_assertInvalid'
op|'('
name|'self'
op|','
name|'config_drive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConfigDriveInvalidValue'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_config_drive'
op|','
nl|'\n'
name|'config_drive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_config_drive_false_values
dedent|''
name|'def'
name|'test_config_drive_false_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_assertCheck'
op|'('
string|"''"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
string|"''"
op|','
string|"'False'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
string|"''"
op|','
string|"'f'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
string|"''"
op|','
string|"'0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_config_drive_true_values
dedent|''
name|'def'
name|'test_config_drive_true_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_assertCheck'
op|'('
name|'True'
op|','
string|"'True'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
name|'True'
op|','
string|"'t'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertCheck'
op|'('
name|'True'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_config_drive_bogus_values_raise
dedent|''
name|'def'
name|'test_config_drive_bogus_values_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_assertInvalid'
op|'('
string|"'asd'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertInvalid'
op|'('
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CheckRequestedImageTestCase
dedent|''
dedent|''
name|'class'
name|'CheckRequestedImageTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CheckRequestedImageTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
nl|'\n'
string|"'fake_user_id'"
op|','
string|"'fake_project_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'64'
newline|'\n'
name|'self'
op|'.'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|member|test_no_image_specified
dedent|''
name|'def'
name|'test_no_image_specified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_status_must_be_active
dedent|''
name|'def'
name|'test_image_status_must_be_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|"'status'"
op|']'
op|'='
string|"'active'"
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_min_ram_check
dedent|''
name|'def'
name|'test_image_min_ram_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'active'"
op|','
name|'min_ram'
op|'='
string|"'65'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorMemoryTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|"'min_ram'"
op|']'
op|'='
string|"'64'"
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_min_disk_check
dedent|''
name|'def'
name|'test_image_min_disk_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'active'"
op|','
name|'min_disk'
op|'='
string|"'2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanMinDisk'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|"'min_disk'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_too_large
dedent|''
name|'def'
name|'test_image_too_large'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'active'"
op|','
name|'size'
op|'='
string|"'1073741825'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanImage'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'['
string|"'size'"
op|']'
op|'='
string|"'1073741824'"
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_root_gb_zero_disables_size_check
dedent|''
name|'def'
name|'test_root_gb_zero_disables_size_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'active'"
op|','
name|'size'
op|'='
string|"'1073741825'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_root_gb_zero_disables_min_disk
dedent|''
name|'def'
name|'test_root_gb_zero_disables_min_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
string|"'123'"
op|','
name|'status'
op|'='
string|"'active'"
op|','
name|'min_disk'
op|'='
string|"'2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_config_drive_option
dedent|''
name|'def'
name|'test_config_drive_option'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'status'"
op|':'
string|"'active'"
op|'}'
newline|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
op|'{'
string|"'img_config_drive'"
op|':'
string|"'optional'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
op|'{'
string|"'img_config_drive'"
op|':'
string|"'mandatory'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
op|'{'
string|"'img_config_drive'"
op|':'
string|"'bar'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidImageConfigDrive'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_blockdevicemapping
dedent|''
name|'def'
name|'test_volume_blockdevicemapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We should allow a root volume which is larger than the flavor root'
nl|'\n'
comment|'# disk.'
nl|'\n'
comment|'# We should allow a root volume created from an image whose min_disk is'
nl|'\n'
comment|'# larger than the flavor root disk.'
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
nl|'\n'
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'volume_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'volume'"
op|','
name|'destination_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_uuid'
op|','
name|'volume_size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_blockdevicemapping_min_disk
dedent|''
name|'def'
name|'test_volume_blockdevicemapping_min_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# A bdm object volume smaller than the image's min_disk should not be"
nl|'\n'
comment|'# allowed'
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
nl|'\n'
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'volume_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'image'"
op|','
name|'destination_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'image_id'
op|'='
name|'image_uuid'
op|','
name|'volume_id'
op|'='
name|'volume_uuid'
op|','
nl|'\n'
name|'volume_size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeSmallerThanMinDisk'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image_uuid'
op|','
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
nl|'\n'
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_blockdevicemapping_min_disk_no_size
dedent|''
name|'def'
name|'test_volume_blockdevicemapping_min_disk_no_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We should allow a root volume whose size is not given'
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
nl|'\n'
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|')'
newline|'\n'
nl|'\n'
name|'volume_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'volume'"
op|','
name|'destination_type'
op|'='
string|"'volume'"
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_uuid'
op|','
name|'volume_size'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_blockdevicemapping
dedent|''
name|'def'
name|'test_image_blockdevicemapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Test that we can succeed when passing bdms, and the root bdm isn't a"
nl|'\n'
comment|'# volume'
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
name|'min_disk'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'image'"
op|','
name|'destination_type'
op|'='
string|"'local'"
op|','
name|'image_id'
op|'='
name|'image_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_blockdevicemapping_too_big
dedent|''
name|'def'
name|'test_image_blockdevicemapping_too_big'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We should do a size check against flavor if we were passed bdms but'
nl|'\n'
comment|"# the root bdm isn't a volume"
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
op|'('
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'+'
number|'1'
op|')'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
nl|'\n'
name|'min_disk'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'image'"
op|','
name|'destination_type'
op|'='
string|"'local'"
op|','
name|'image_id'
op|'='
name|'image_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanImage'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_image_blockdevicemapping_min_disk
dedent|''
name|'def'
name|'test_image_blockdevicemapping_min_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We should do a min_disk check against flavor if we were passed bdms'
nl|'\n'
comment|"# but the root bdm isn't a volume"
nl|'\n'
indent|'        '
name|'image_uuid'
op|'='
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
name|'image'
op|'='
name|'dict'
op|'('
name|'id'
op|'='
name|'image_uuid'
op|','
name|'status'
op|'='
string|"'active'"
op|','
nl|'\n'
name|'size'
op|'='
number|'0'
op|','
name|'min_disk'
op|'='
name|'self'
op|'.'
name|'instance_type'
op|'.'
name|'root_gb'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'root_bdm'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|'('
nl|'\n'
name|'source_type'
op|'='
string|"'image'"
op|','
name|'destination_type'
op|'='
string|"'local'"
op|','
name|'image_id'
op|'='
name|'image_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorDiskSmallerThanMinDisk'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_check_requested_image'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'image'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'root_bdm'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeHooksTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeHooksTestCase'
op|'('
name|'test'
op|'.'
name|'BaseHookTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_delete_instance_has_hook
indent|'    '
name|'def'
name|'test_delete_instance_has_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'delete_func'
op|'='
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|'.'
name|'_delete_instance'
newline|'\n'
name|'self'
op|'.'
name|'assert_has_hook'
op|'('
string|"'delete_instance'"
op|','
name|'delete_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_has_hook
dedent|''
name|'def'
name|'test_create_instance_has_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'create_func'
op|'='
name|'compute_api'
op|'.'
name|'API'
op|'.'
name|'create'
newline|'\n'
name|'self'
op|'.'
name|'assert_has_hook'
op|'('
string|"'create_instance'"
op|','
name|'create_func'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instance_has_hook
dedent|''
name|'def'
name|'test_build_instance_has_hook'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'build_instance_func'
op|'='
op|'('
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|'.'
nl|'\n'
name|'_do_build_and_run_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_has_hook'
op|'('
string|"'build_instance'"
op|','
name|'build_instance_func'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

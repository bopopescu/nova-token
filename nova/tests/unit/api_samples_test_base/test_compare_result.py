begin_unit
comment|'# Copyright 2015 HPE, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'testtools'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'functional'
name|'import'
name|'api_samples_test_base'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCompareResult
name|'class'
name|'TestCompareResult'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Provide test coverage for result comparison logic in functional tests.\n\n        _compare_result two types of comparisons, template data and sample\n        data.\n\n        Template data means the response is checked against a regex that is\n        referenced by the template name. The template name is specified in\n        the format %(name)\n\n        Sample data is a normal value comparison.\n    """'
newline|'\n'
nl|'\n'
DECL|member|getApiSampleTestBaseHelper
name|'def'
name|'getApiSampleTestBaseHelper'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Build an instance without running any unwanted test methods"""'
newline|'\n'
nl|'\n'
comment|'# NOTE(auggy): TestCase takes a "test" method name to run in __init__'
nl|'\n'
comment|'# calling this way prevents additional test methods from running'
nl|'\n'
name|'ast_instance'
op|'='
name|'api_samples_test_base'
op|'.'
name|'ApiSampleTestBase'
op|'('
string|"'setUp'"
op|')'
newline|'\n'
nl|'\n'
comment|'# required by ApiSampleTestBase'
nl|'\n'
name|'ast_instance'
op|'.'
name|'api_major_version'
op|'='
string|"'v2'"
newline|'\n'
name|'ast_instance'
op|'.'
name|'_project_id'
op|'='
string|"'True'"
newline|'\n'
nl|'\n'
comment|'# automagically create magic methods usually handled by test classes'
nl|'\n'
name|'ast_instance'
op|'.'
name|'compute'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'ast_instance'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestCompareResult'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ast'
op|'='
name|'self'
op|'.'
name|'getApiSampleTestBaseHelper'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bare_strings_match
dedent|''
name|'def'
name|'test_bare_strings_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""compare 2 bare strings that match"""'
newline|'\n'
name|'sample_data'
op|'='
string|"u'foo'"
newline|'\n'
name|'response_data'
op|'='
string|"u'foo'"
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'sample_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(auggy): _compare_result will not return a matched value in the'
nl|'\n'
comment|"# case of bare strings. If they don't match it will throw an exception,"
nl|'\n'
comment|'# otherwise it returns "None".'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
name|'None'
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of 2 bare strings'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bare_strings_no_match
dedent|''
name|'def'
name|'test_bare_strings_no_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 bare strings that don\'t match"""'
newline|'\n'
name|'sample_data'
op|'='
string|"u'foo'"
newline|'\n'
name|'response_data'
op|'='
string|"u'bar'"
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'sample_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_template_strings_match
dedent|''
dedent|''
name|'def'
name|'test_template_strings_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""compare 2 template strings (contain %) that match"""'
newline|'\n'
name|'template_data'
op|'='
string|"u'%(id)s'"
newline|'\n'
name|'response_data'
op|'='
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of 2 template strings'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_template_strings_no_match
dedent|''
name|'def'
name|'test_template_strings_no_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 template strings (contain %) that don\'t match"""'
newline|'\n'
name|'template_data'
op|'='
string|"u'%(id)s'"
newline|'\n'
name|'response_data'
op|'='
string|"u'$58f295a-8543-45fa-804a-08f8356d616d'"
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result needs a consistent return value'
nl|'\n'
comment|'# In some cases it returns the value if it matched, in others it returns'
nl|'\n'
comment|"# None. In all cases, it throws an exception if there's no match."
nl|'\n'
DECL|member|test_bare_int_match
dedent|''
dedent|''
name|'def'
name|'test_bare_int_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 bare ints that match"""'
newline|'\n'
name|'sample_data'
op|'='
number|'42'
newline|'\n'
name|'response_data'
op|'='
number|'42'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'sample_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
name|'None'
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of 2 bare ints'"
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result should throw NoMatch for ints'
nl|'\n'
comment|'# this gets to objectify() and it throws a TypeError'
nl|'\n'
comment|'# versions are a case where ints are compared,'
nl|'\n'
comment|"# currently if the version in the json sample doesn't match what's in the"
nl|'\n'
comment|'# template, this throws a confusing "TypeError"'
nl|'\n'
DECL|member|test_bare_int_no_match
dedent|''
name|'def'
name|'test_bare_int_no_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 bare ints that don\'t match"""'
newline|'\n'
name|'sample_data'
op|'='
number|'42'
newline|'\n'
name|'response_data'
op|'='
number|'43'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'TypeError'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'sample_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result needs a consistent return value'
nl|'\n'
DECL|member|test_template_int_match
dedent|''
dedent|''
name|'def'
name|'test_template_int_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check template int against string containing digits"""'
newline|'\n'
name|'template_data'
op|'='
string|"u'%(int)s'"
newline|'\n'
name|'response_data'
op|'='
string|"u'42'"
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
name|'None'
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of template ints'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_template_int_no_match
dedent|''
name|'def'
name|'test_template_int_no_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check template int against a string containing no digits"""'
newline|'\n'
name|'template_data'
op|'='
string|"u'%(int)s'"
newline|'\n'
name|'response_data'
op|'='
string|"u'foo'"
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result should throw TypeError early for non-strings'
nl|'\n'
DECL|member|test_template_int_value
dedent|''
dedent|''
name|'def'
name|'test_template_int_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check an int value of a template int throws exception"""'
newline|'\n'
name|'template_data'
op|'='
string|"u'%(int_test)'"
newline|'\n'
name|'response_data'
op|'='
number|'42'
newline|'\n'
nl|'\n'
comment|'# use an int instead of a string as the subs value'
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
newline|'\n'
name|'subs'
op|'.'
name|'update'
op|'('
op|'{'
string|"'int_test'"
op|':'
number|'42'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# gets to expected = expected % subs'
nl|'\n'
comment|'# throws ValueError: incomplete format'
nl|'\n'
comment|'# If a string is required for that functionality,'
nl|'\n'
comment|'# the method should typecheck before it gets that deep in the code'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'excClass'
op|'='
name|'ValueError'
op|','
comment|'# this should be a TypeError'
nl|'\n'
name|'callableObj'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|','
nl|'\n'
name|'subs'
op|'='
name|'subs'
op|','
comment|'# subs can be defined by the caller, needs checking'
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result needs a consistent return value'
nl|'\n'
DECL|member|test_dict_match
dedent|''
name|'def'
name|'test_dict_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 matching dictionaries"""'
newline|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'%(id)s'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'%(password)s'"
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'4ZQ3bb6WYbC2'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of 2 dictionaries'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_no_match_value
dedent|''
name|'def'
name|'test_dict_no_match_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 dictionaries where one has a different value"""'
newline|'\n'
name|'sample_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'foo'"
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'4ZQ3bb6WYbC2'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'sample_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_no_match_extra_key
dedent|''
dedent|''
name|'def'
name|'test_dict_no_match_extra_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 dictionaries where one has an extra key"""'
newline|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'%(id)s'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'%(password)s'"
op|','
nl|'\n'
string|"u'foo'"
op|':'
string|"u'foo'"
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'858f295a-8543-45fa-804a-08f8356d616d'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'4ZQ3bb6WYbC2'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_result_type_mismatch
dedent|''
dedent|''
name|'def'
name|'test_dict_result_type_mismatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check expected is a dictionary and result is not a dictionary"""'
newline|'\n'
nl|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'server'"
op|':'
op|'{'
nl|'\n'
string|"u'id'"
op|':'
string|"u'%(id)s'"
op|','
nl|'\n'
string|"u'adminPass'"
op|':'
string|"u'%(password)s'"
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
string|"u'foo'"
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
comment|'# TODO(auggy): _compare_result needs a consistent return value'
nl|'\n'
DECL|member|test_list_match
dedent|''
dedent|''
name|'def'
name|'test_list_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check 2 matching lists"""'
newline|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(versioned_compute_endpoint)s/server/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(compute_endpoint)s/servers/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/v2/openstack/server/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/openstack/servers/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'expected'
op|'='
name|'None'
op|','
nl|'\n'
name|'observed'
op|'='
name|'result'
op|','
nl|'\n'
name|'message'
op|'='
string|"'Check _compare_result of 2 lists'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_match_extra_item_result
dedent|''
name|'def'
name|'test_list_match_extra_item_result'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check extra list items in result """'
newline|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(versioned_compute_endpoint)s/server/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(compute_endpoint)s/servers/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/v2/openstack/server/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/openstack/servers/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"u'foo'"
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_match_extra_item_template
dedent|''
dedent|''
name|'def'
name|'test_list_match_extra_item_template'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check extra list items in template """'
newline|'\n'
name|'template_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(versioned_compute_endpoint)s/server/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
string|"u'%(compute_endpoint)s/servers/%(uuid)s'"
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"u'foo'"
comment|'# extra field'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'response_data'
op|'='
op|'{'
nl|'\n'
string|"u'links'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/v2/openstack/server/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'self'"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'{'
nl|'\n'
string|"u'href'"
op|':'
nl|'\n'
op|'('
string|"u'http://openstack.example.com/openstack/servers/'"
nl|'\n'
string|"'858f295a-8543-45fa-804a-08f8356d616d'"
op|')'
op|','
nl|'\n'
string|"u'rel'"
op|':'
string|"u'bookmark'"
nl|'\n'
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'testtools'
op|'.'
name|'ExpectedException'
op|'('
name|'api_samples_test_base'
op|'.'
name|'NoMatch'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_compare_result'
op|'('
nl|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'ast'
op|'.'
name|'_get_regexes'
op|'('
op|')'
op|','
nl|'\n'
name|'expected'
op|'='
name|'template_data'
op|','
nl|'\n'
name|'result'
op|'='
name|'response_data'
op|','
nl|'\n'
name|'result_str'
op|'='
string|'"Test"'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

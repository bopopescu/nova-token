begin_unit
comment|'# Copyright (c) 2011 Citrix Systems, Inc.'
nl|'\n'
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nStubouts for the test suite\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'vmware'
name|'import'
name|'exceptions'
name|'as'
name|'vexc'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'test_flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'network_util'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_get_vim_object
name|'def'
name|'fake_get_vim_object'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stubs out the VMwareAPISession\'s get_vim_object method."""'
newline|'\n'
name|'return'
name|'fake'
op|'.'
name|'FakeVim'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|function|fake_vim_prop
name|'def'
name|'fake_vim_prop'
op|'('
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stubs out the VMwareAPISession\'s vim property access method."""'
newline|'\n'
name|'return'
name|'fake'
op|'.'
name|'get_fake_vim_object'
op|'('
name|'arg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_is_vim_object
dedent|''
name|'def'
name|'fake_is_vim_object'
op|'('
name|'arg'
op|','
name|'module'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stubs out the VMwareAPISession\'s is_vim_object method."""'
newline|'\n'
name|'return'
name|'isinstance'
op|'('
name|'module'
op|','
name|'fake'
op|'.'
name|'FakeVim'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_temp_method_exception
dedent|''
name|'def'
name|'fake_temp_method_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'vexc'
op|'.'
name|'VimFaultException'
op|'('
nl|'\n'
op|'['
name|'vexc'
op|'.'
name|'NOT_AUTHENTICATED'
op|']'
op|','
nl|'\n'
string|'"Session Empty/Not Authenticated"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_temp_session_exception
dedent|''
name|'def'
name|'fake_temp_session_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'raise'
name|'vexc'
op|'.'
name|'VimConnectionException'
op|'('
string|'"it\'s a fake!"'
op|','
nl|'\n'
string|'"Session Exception"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_session_file_exception
dedent|''
name|'def'
name|'fake_session_file_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fault_list'
op|'='
op|'['
name|'vexc'
op|'.'
name|'FILE_ALREADY_EXISTS'
op|']'
newline|'\n'
name|'raise'
name|'vexc'
op|'.'
name|'VimFaultException'
op|'('
name|'fault_list'
op|','
nl|'\n'
name|'Exception'
op|'('
string|"'fake'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_session_permission_exception
dedent|''
name|'def'
name|'fake_session_permission_exception'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fault_list'
op|'='
op|'['
name|'vexc'
op|'.'
name|'NO_PERMISSION'
op|']'
newline|'\n'
name|'fault_string'
op|'='
string|"'Permission to perform this operation was denied.'"
newline|'\n'
name|'details'
op|'='
op|'{'
string|"'privilegeId'"
op|':'
string|"'Resource.AssignVMToPool'"
op|','
string|"'object'"
op|':'
string|"'domain-c7'"
op|'}'
newline|'\n'
name|'raise'
name|'vexc'
op|'.'
name|'VimFaultException'
op|'('
name|'fault_list'
op|','
name|'fault_string'
op|','
name|'details'
op|'='
name|'details'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_fake_flavor_get
dedent|''
name|'def'
name|'_fake_flavor_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'instance_type'
name|'in'
name|'test_flavors'
op|'.'
name|'DEFAULT_FLAVORS'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance_type'
op|'['
string|"'id'"
op|']'
op|'=='
name|'id'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'instance_type'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'memory_mb'"
op|':'
number|'128'
op|','
string|"'root_gb'"
op|':'
number|'0'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'m1.micro'"
op|','
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'0'
op|','
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'flavorid'"
op|':'
string|"'1'"
op|','
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'2'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|set_stubs
dedent|''
name|'def'
name|'set_stubs'
op|'('
name|'stubs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Set the stubs."""'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_util'
op|','
string|"'get_network_with_the_name'"
op|','
nl|'\n'
name|'fake'
op|'.'
name|'fake_get_network'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'images'
op|','
string|"'upload_image'"
op|','
name|'fake'
op|'.'
name|'fake_upload_image'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'images'
op|','
string|"'fetch_image'"
op|','
name|'fake'
op|'.'
name|'fake_fetch_image'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'driver'
op|'.'
name|'VMwareAPISession'
op|','
string|'"vim"'
op|','
name|'fake_vim_prop'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'driver'
op|'.'
name|'VMwareAPISession'
op|','
string|'"_is_vim_object"'
op|','
nl|'\n'
name|'fake_is_vim_object'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'flavor_get'"
op|','
name|'_fake_flavor_get'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_suds_context
dedent|''
name|'def'
name|'fake_suds_context'
op|'('
name|'calls'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Generate a suds client which automatically mocks all SOAP method calls.\n\n    Calls are stored in <calls>, indexed by the name of the call. If you need\n    to mock the behaviour of specific API calls you can pre-populate <calls>\n    with appropriate Mock objects.\n    """'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
name|'calls'
name|'or'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|fake_factory
name|'class'
name|'fake_factory'
op|':'
newline|'\n'
DECL|member|create
indent|'        '
name|'def'
name|'create'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'mock'
op|'.'
name|'NonCallableMagicMock'
op|'('
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|class|fake_service
dedent|''
dedent|''
name|'class'
name|'fake_service'
op|':'
newline|'\n'
DECL|member|__getattr__
indent|'        '
name|'def'
name|'__getattr__'
op|'('
name|'self'
op|','
name|'attr_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'attr_name'
name|'in'
name|'calls'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'calls'
op|'['
name|'attr_name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_call'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'name'
op|'='
name|'attr_name'
op|')'
newline|'\n'
name|'calls'
op|'['
name|'attr_name'
op|']'
op|'='
name|'mock_call'
newline|'\n'
name|'return'
name|'mock_call'
newline|'\n'
nl|'\n'
DECL|class|fake_client
dedent|''
dedent|''
name|'class'
name|'fake_client'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'wdsl_url'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'service'
op|'='
name|'fake_service'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'factory'
op|'='
name|'fake_factory'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'suds.client.Client'"
op|','
name|'fake_client'
op|')'
op|','
nl|'\n'
nl|'\n'
comment|"# As we're not connecting to a real host there's no need to wait"
nl|'\n'
comment|'# between retries'
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'driver'
op|','
string|"'TIME_BETWEEN_API_CALL_RETRIES'"
op|','
number|'0'
op|')'
nl|'\n'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

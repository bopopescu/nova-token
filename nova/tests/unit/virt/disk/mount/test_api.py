begin_unit
comment|'# Copyright 2015 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'disk'
op|'.'
name|'mount'
name|'import'
name|'api'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|PARTITION
name|'PARTITION'
op|'='
number|'77'
newline|'\n'
DECL|variable|ORIG_DEVICE
name|'ORIG_DEVICE'
op|'='
string|'"/dev/null"'
newline|'\n'
DECL|variable|AUTOMAP_PARTITION
name|'AUTOMAP_PARTITION'
op|'='
string|'"/dev/nullp77"'
newline|'\n'
DECL|variable|MAP_PARTITION
name|'MAP_PARTITION'
op|'='
string|'"/dev/mapper/nullp77"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MountTestCase
name|'class'
name|'MountTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MountTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_map_dev
dedent|''
name|'def'
name|'_test_map_dev'
op|'('
name|'self'
op|','
name|'partition'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mount'
op|'='
name|'api'
op|'.'
name|'Mount'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'image'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'mount_dir'
op|')'
newline|'\n'
name|'mount'
op|'.'
name|'device'
op|'='
name|'ORIG_DEVICE'
newline|'\n'
name|'mount'
op|'.'
name|'partition'
op|'='
name|'partition'
newline|'\n'
name|'mount'
op|'.'
name|'map_dev'
op|'('
op|')'
newline|'\n'
name|'return'
name|'mount'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.utils.trycmd'"
op|')'
newline|'\n'
DECL|member|_test_map_dev_with_trycmd
name|'def'
name|'_test_map_dev_with_trycmd'
op|'('
name|'self'
op|','
name|'partition'
op|','
name|'trycmd'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'trycmd'
op|'.'
name|'return_value'
op|'='
op|'['
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev'
op|'('
name|'partition'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'trycmd'
op|'.'
name|'call_count'
op|')'
comment|"# don't care about args"
newline|'\n'
name|'return'
name|'mount'
newline|'\n'
nl|'\n'
DECL|member|_exists_effect
dedent|''
name|'def'
name|'_exists_effect'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
DECL|function|exists_effect
indent|'        '
name|'def'
name|'exists_effect'
op|'('
name|'filename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
name|'data'
op|'['
name|'filename'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'v'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'len'
op|'('
name|'v'
op|')'
op|'>'
number|'0'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'v'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Out of items for: %s"'
op|'%'
name|'filename'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'v'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Unexpected call with: %s"'
op|'%'
name|'filename'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'exists_effect'
newline|'\n'
nl|'\n'
DECL|member|_check_calls
dedent|''
name|'def'
name|'_check_calls'
op|'('
name|'self'
op|','
name|'exists'
op|','
name|'filenames'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'x'
op|')'
name|'for'
name|'x'
name|'in'
name|'filenames'
op|']'
op|','
nl|'\n'
name|'exists'
op|'.'
name|'call_args_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.exists'"
op|')'
newline|'\n'
DECL|member|test_map_dev_partition_search
name|'def'
name|'test_map_dev_partition_search'
op|'('
name|'self'
op|','
name|'exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exists'
op|'.'
name|'side_effect'
op|'='
name|'self'
op|'.'
name|'_exists_effect'
op|'('
op|'{'
nl|'\n'
name|'ORIG_DEVICE'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev'
op|'('
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_calls'
op|'('
name|'exists'
op|','
op|'['
name|'ORIG_DEVICE'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
string|'""'
op|','
name|'mount'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mount'
op|'.'
name|'mapped'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.exists'"
op|')'
newline|'\n'
DECL|member|test_map_dev_good
name|'def'
name|'test_map_dev_good'
op|'('
name|'self'
op|','
name|'exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exists'
op|'.'
name|'side_effect'
op|'='
name|'self'
op|'.'
name|'_exists_effect'
op|'('
op|'{'
nl|'\n'
name|'ORIG_DEVICE'
op|':'
name|'True'
op|','
nl|'\n'
name|'AUTOMAP_PARTITION'
op|':'
name|'False'
op|','
nl|'\n'
name|'MAP_PARTITION'
op|':'
op|'['
name|'False'
op|','
name|'True'
op|']'
op|'}'
op|')'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev_with_trycmd'
op|'('
name|'PARTITION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_calls'
op|'('
name|'exists'
op|','
nl|'\n'
op|'['
name|'ORIG_DEVICE'
op|','
name|'AUTOMAP_PARTITION'
op|','
name|'MAP_PARTITION'
op|','
name|'MAP_PARTITION'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'""'
op|','
name|'mount'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mount'
op|'.'
name|'mapped'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.exists'"
op|')'
newline|'\n'
DECL|member|test_map_dev_error
name|'def'
name|'test_map_dev_error'
op|'('
name|'self'
op|','
name|'exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exists'
op|'.'
name|'side_effect'
op|'='
name|'self'
op|'.'
name|'_exists_effect'
op|'('
op|'{'
nl|'\n'
name|'ORIG_DEVICE'
op|':'
name|'True'
op|','
nl|'\n'
name|'AUTOMAP_PARTITION'
op|':'
name|'False'
op|','
nl|'\n'
name|'MAP_PARTITION'
op|':'
name|'False'
op|'}'
op|')'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev_with_trycmd'
op|'('
name|'PARTITION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_calls'
op|'('
name|'exists'
op|','
nl|'\n'
op|'['
name|'ORIG_DEVICE'
op|','
name|'AUTOMAP_PARTITION'
op|','
name|'MAP_PARTITION'
op|','
name|'MAP_PARTITION'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
string|'""'
op|','
name|'mount'
op|'.'
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mount'
op|'.'
name|'mapped'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.exists'"
op|')'
newline|'\n'
DECL|member|test_map_dev_automap
name|'def'
name|'test_map_dev_automap'
op|'('
name|'self'
op|','
name|'exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exists'
op|'.'
name|'side_effect'
op|'='
name|'self'
op|'.'
name|'_exists_effect'
op|'('
op|'{'
nl|'\n'
name|'ORIG_DEVICE'
op|':'
name|'True'
op|','
nl|'\n'
name|'AUTOMAP_PARTITION'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev'
op|'('
name|'PARTITION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_calls'
op|'('
name|'exists'
op|','
nl|'\n'
op|'['
name|'ORIG_DEVICE'
op|','
name|'AUTOMAP_PARTITION'
op|','
name|'AUTOMAP_PARTITION'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'AUTOMAP_PARTITION'
op|','
name|'mount'
op|'.'
name|'mapped_device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mount'
op|'.'
name|'automapped'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mount'
op|'.'
name|'mapped'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'os.path.exists'"
op|')'
newline|'\n'
DECL|member|test_map_dev_else
name|'def'
name|'test_map_dev_else'
op|'('
name|'self'
op|','
name|'exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exists'
op|'.'
name|'side_effect'
op|'='
name|'self'
op|'.'
name|'_exists_effect'
op|'('
op|'{'
nl|'\n'
name|'ORIG_DEVICE'
op|':'
name|'True'
op|','
nl|'\n'
name|'AUTOMAP_PARTITION'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'mount'
op|'='
name|'self'
op|'.'
name|'_test_map_dev'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_calls'
op|'('
name|'exists'
op|','
op|'['
name|'ORIG_DEVICE'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ORIG_DEVICE'
op|','
name|'mount'
op|'.'
name|'mapped_device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mount'
op|'.'
name|'automapped'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mount'
op|'.'
name|'mapped'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

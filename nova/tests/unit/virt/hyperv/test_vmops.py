begin_unit
comment|'#  Copyright 2014 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'timeout'
name|'as'
name|'etimeout'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_concurrency'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'units'
newline|'\n'
name|'import'
name|'unittest2'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'test_base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'ioutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'vmops'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'vmutils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOpsTestCase
name|'class'
name|'VMOpsTestCase'
op|'('
name|'test_base'
op|'.'
name|'HyperVBaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit tests for the Hyper-V VMOps class."""'
newline|'\n'
nl|'\n'
DECL|variable|_FAKE_TIMEOUT
name|'_FAKE_TIMEOUT'
op|'='
number|'2'
newline|'\n'
DECL|variable|FAKE_SIZE
name|'FAKE_SIZE'
op|'='
number|'10'
newline|'\n'
DECL|variable|FAKE_DIR
name|'FAKE_DIR'
op|'='
string|"'fake_dir'"
newline|'\n'
DECL|variable|FAKE_ROOT_PATH
name|'FAKE_ROOT_PATH'
op|'='
string|"'C:\\\\path\\\\to\\\\fake.%s'"
newline|'\n'
DECL|variable|FAKE_CONFIG_DRIVE_ISO
name|'FAKE_CONFIG_DRIVE_ISO'
op|'='
string|"'configdrive.iso'"
newline|'\n'
DECL|variable|FAKE_CONFIG_DRIVE_VHD
name|'FAKE_CONFIG_DRIVE_VHD'
op|'='
string|"'configdrive.vhd'"
newline|'\n'
DECL|variable|FAKE_UUID
name|'FAKE_UUID'
op|'='
string|"'4f54fb69-d3a2-45b7-bb9b-b6e6b3d893b3'"
newline|'\n'
DECL|variable|FAKE_LOG
name|'FAKE_LOG'
op|'='
string|"'fake_log'"
newline|'\n'
nl|'\n'
DECL|variable|ISO9660
name|'ISO9660'
op|'='
string|"'iso9660'"
newline|'\n'
DECL|variable|_FAKE_CONFIGDRIVE_PATH
name|'_FAKE_CONFIGDRIVE_PATH'
op|'='
string|"'C:/fake_instance_dir/configdrive.vhd'"
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMOpsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
string|"'fake-context'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'='
name|'vmops'
op|'.'
name|'VMOps'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_hostutils'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.importutils.import_object'"
op|')'
newline|'\n'
DECL|member|test_load_vif_driver_class
name|'def'
name|'test_load_vif_driver_class'
op|'('
name|'self'
op|','
name|'mock_import_object'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_load_vif_driver_class'
op|'('
op|')'
newline|'\n'
name|'mock_import_object'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vif_driver_class_map'
op|'['
name|'CONF'
op|'.'
name|'network_api_class'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vif_driver'
op|','
nl|'\n'
name|'mock_import_object'
op|'.'
name|'return_value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.importutils.import_object'"
op|')'
newline|'\n'
DECL|member|test_load_vif_driver_class_error
name|'def'
name|'test_load_vif_driver_class_error'
op|'('
name|'self'
op|','
name|'mock_import_object'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_import_object'
op|'.'
name|'side_effect'
op|'='
name|'KeyError'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_load_vif_driver_class'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_instances
dedent|''
name|'def'
name|'test_list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'list_instances'
op|'.'
name|'return_value'
op|'='
op|'['
name|'mock_instance'
op|']'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'list_instances'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
op|'['
name|'mock_instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_get_info
dedent|''
name|'def'
name|'_test_get_info'
op|'('
name|'self'
op|','
name|'vm_exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_info'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'spec_set'
op|'='
name|'dict'
op|')'
newline|'\n'
name|'fake_info'
op|'='
op|'{'
string|"'EnabledState'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'MemoryUsage'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_MEM_KB'
op|','
nl|'\n'
string|"'NumberOfProcessors'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_NUM_CPU'
op|','
nl|'\n'
string|"'UpTime'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_CPU_NS'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|getitem
name|'def'
name|'getitem'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fake_info'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'mock_info'
op|'.'
name|'__getitem__'
op|'.'
name|'side_effect'
op|'='
name|'getitem'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'constants'
op|'.'
name|'HYPERV_POWER_STATE'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
name|'max_mem_kb'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_MEM_KB'
op|','
nl|'\n'
name|'mem_kb'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_MEM_KB'
op|','
nl|'\n'
name|'num_cpu'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_NUM_CPU'
op|','
nl|'\n'
name|'cpu_time_ns'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_CPU_NS'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'return_value'
op|'='
name|'vm_exists'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_summary_info'
op|'.'
name|'return_value'
op|'='
name|'mock_info'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'vm_exists'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_info'
op|','
name|'mock_instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_info'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_summary_info'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_info
dedent|''
dedent|''
name|'def'
name|'test_get_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_info'
op|'('
name|'vm_exists'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_info_exception
dedent|''
name|'def'
name|'test_get_info_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_info'
op|'('
name|'vm_exists'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_prepare_create_root_vhd_mocks
dedent|''
name|'def'
name|'_prepare_create_root_vhd_mocks'
op|'('
name|'self'
op|','
name|'use_cow_images'
op|','
name|'vhd_format'
op|','
nl|'\n'
name|'vhd_size'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_instance'
op|'.'
name|'root_gb'
op|'='
name|'self'
op|'.'
name|'FAKE_SIZE'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_cow_images'
op|'='
name|'use_cow_images'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_info'
op|'.'
name|'return_value'
op|'='
op|'{'
string|"'MaxInternalSize'"
op|':'
nl|'\n'
name|'vhd_size'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_format'
op|'.'
name|'return_value'
op|'='
name|'vhd_format'
newline|'\n'
name|'root_vhd_internal_size'
op|'='
name|'mock_instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
name|'get_size'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_internal_vhd_size_by_file_size'
newline|'\n'
name|'get_size'
op|'.'
name|'return_value'
op|'='
name|'root_vhd_internal_size'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'return'
name|'mock_instance'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.imagecache.ImageCache.get_cached_image'"
op|')'
newline|'\n'
DECL|member|_test_create_root_vhd_exception
name|'def'
name|'_test_create_root_vhd_exception'
op|'('
name|'self'
op|','
name|'mock_get_cached_image'
op|','
nl|'\n'
name|'vhd_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'self'
op|'.'
name|'_prepare_create_root_vhd_mocks'
op|'('
nl|'\n'
name|'use_cow_images'
op|'='
name|'False'
op|','
name|'vhd_format'
op|'='
name|'vhd_format'
op|','
nl|'\n'
name|'vhd_size'
op|'='
op|'('
name|'self'
op|'.'
name|'FAKE_SIZE'
op|'+'
number|'1'
op|')'
op|')'
newline|'\n'
name|'fake_vhd_path'
op|'='
name|'self'
op|'.'
name|'FAKE_ROOT_PATH'
op|'%'
name|'vhd_format'
newline|'\n'
name|'mock_get_cached_image'
op|'.'
name|'return_value'
op|'='
name|'fake_vhd_path'
newline|'\n'
name|'fake_root_path'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'.'
name|'return_value'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'VHDResizeException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_root_vhd'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'resize_vhd'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_root_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'remove'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_root_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.imagecache.ImageCache.get_cached_image'"
op|')'
newline|'\n'
DECL|member|_test_create_root_vhd_qcow
name|'def'
name|'_test_create_root_vhd_qcow'
op|'('
name|'self'
op|','
name|'mock_get_cached_image'
op|','
name|'vhd_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'self'
op|'.'
name|'_prepare_create_root_vhd_mocks'
op|'('
nl|'\n'
name|'use_cow_images'
op|'='
name|'True'
op|','
name|'vhd_format'
op|'='
name|'vhd_format'
op|','
nl|'\n'
name|'vhd_size'
op|'='
op|'('
name|'self'
op|'.'
name|'FAKE_SIZE'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'fake_vhd_path'
op|'='
name|'self'
op|'.'
name|'FAKE_ROOT_PATH'
op|'%'
name|'vhd_format'
newline|'\n'
name|'mock_get_cached_image'
op|'.'
name|'return_value'
op|'='
name|'fake_vhd_path'
newline|'\n'
nl|'\n'
name|'fake_root_path'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'.'
name|'return_value'
newline|'\n'
name|'root_vhd_internal_size'
op|'='
name|'mock_instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
name|'get_size'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_internal_vhd_size_by_file_size'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_root_vhd'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_root_path'
op|','
name|'response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'vhd_format'
op|')'
newline|'\n'
name|'differencing_vhd'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'create_differencing_vhd'
newline|'\n'
name|'differencing_vhd'
op|'.'
name|'assert_called_with'
op|'('
name|'fake_root_path'
op|','
name|'fake_vhd_path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_info'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_vhd_path'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'vhd_format'
name|'is'
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'get_size'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'resize_vhd'
op|'.'
name|'called'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'get_size'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_vhd_path'
op|','
nl|'\n'
name|'root_vhd_internal_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'resize_vhd'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_root_path'
op|','
name|'root_vhd_internal_size'
op|','
name|'is_file_max_size'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.imagecache.ImageCache.get_cached_image'"
op|')'
newline|'\n'
DECL|member|_test_create_root_vhd
name|'def'
name|'_test_create_root_vhd'
op|'('
name|'self'
op|','
name|'mock_get_cached_image'
op|','
name|'vhd_format'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'self'
op|'.'
name|'_prepare_create_root_vhd_mocks'
op|'('
nl|'\n'
name|'use_cow_images'
op|'='
name|'False'
op|','
name|'vhd_format'
op|'='
name|'vhd_format'
op|','
nl|'\n'
name|'vhd_size'
op|'='
op|'('
name|'self'
op|'.'
name|'FAKE_SIZE'
op|'-'
number|'1'
op|')'
op|')'
newline|'\n'
name|'fake_vhd_path'
op|'='
name|'self'
op|'.'
name|'FAKE_ROOT_PATH'
op|'%'
name|'vhd_format'
newline|'\n'
name|'mock_get_cached_image'
op|'.'
name|'return_value'
op|'='
name|'fake_vhd_path'
newline|'\n'
nl|'\n'
name|'fake_root_path'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'.'
name|'return_value'
newline|'\n'
name|'root_vhd_internal_size'
op|'='
name|'mock_instance'
op|'.'
name|'root_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
newline|'\n'
name|'get_size'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_internal_vhd_size_by_file_size'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_root_vhd'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_root_path'
op|','
name|'response'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_root_vhd_path'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'vhd_format'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'copyfile'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_vhd_path'
op|','
name|'fake_root_path'
op|')'
newline|'\n'
name|'get_size'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_vhd_path'
op|','
name|'root_vhd_internal_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'resize_vhd'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'fake_root_path'
op|','
name|'root_vhd_internal_size'
op|','
name|'is_file_max_size'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_root_vhd
dedent|''
name|'def'
name|'test_create_root_vhd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_root_vhd'
op|'('
name|'vhd_format'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_root_vhdx
dedent|''
name|'def'
name|'test_create_root_vhdx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_root_vhd'
op|'('
name|'vhd_format'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHDX'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_root_vhd_use_cow_images_true
dedent|''
name|'def'
name|'test_create_root_vhd_use_cow_images_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_root_vhd_qcow'
op|'('
name|'vhd_format'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_root_vhdx_use_cow_images_true
dedent|''
name|'def'
name|'test_create_root_vhdx_use_cow_images_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_root_vhd_qcow'
op|'('
name|'vhd_format'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHDX'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_root_vhdx_size_less_than_internal
dedent|''
name|'def'
name|'test_create_root_vhdx_size_less_than_internal'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_root_vhd_exception'
op|'('
nl|'\n'
name|'vhd_format'
op|'='
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_resize_needed_exception
dedent|''
name|'def'
name|'test_is_resize_needed_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'vmutils'
op|'.'
name|'VHDResizeException'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_is_resize_needed'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|'-'
number|'1'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_resize_needed_true
dedent|''
name|'def'
name|'test_is_resize_needed_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_is_resize_needed'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|'+'
number|'1'
op|','
name|'inst'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_resize_needed_false
dedent|''
name|'def'
name|'test_is_resize_needed_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_is_resize_needed'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|','
name|'self'
op|'.'
name|'FAKE_SIZE'
op|','
name|'inst'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_ephemeral_vhd
dedent|''
name|'def'
name|'test_create_ephemeral_vhd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_instance'
op|'.'
name|'ephemeral_gb'
op|'='
name|'self'
op|'.'
name|'FAKE_SIZE'
newline|'\n'
name|'best_supported'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_best_supported_vhd_format'
newline|'\n'
name|'best_supported'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_FORMAT'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_ephemeral_vhd_path'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|')'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'create_ephemeral_vhd'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_ephemeral_vhd_path'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_FORMAT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'create_dynamic_vhd'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'mock_instance'
op|'.'
name|'ephemeral_gb'
op|'*'
name|'units'
op|'.'
name|'Gi'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_FORMAT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.destroy'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.power_on'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.attach_config_drive'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._create_config_drive'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.configdrive.required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.create_instance'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.get_image_vm_generation'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.create_ephemeral_vhd'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._create_root_vhd'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.volumeops.VolumeOps.'"
nl|'\n'
string|"'ebs_root_in_block_devices'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._delete_disk_files'"
op|')'
newline|'\n'
DECL|member|_test_spawn
name|'def'
name|'_test_spawn'
op|'('
name|'self'
op|','
name|'mock_delete_disk_files'
op|','
nl|'\n'
name|'mock_ebs_root_in_block_devices'
op|','
name|'mock_create_root_vhd'
op|','
nl|'\n'
name|'mock_create_ephemeral_vhd'
op|','
name|'mock_get_image_vm_gen'
op|','
nl|'\n'
name|'mock_create_instance'
op|','
name|'mock_configdrive_required'
op|','
nl|'\n'
name|'mock_create_config_drive'
op|','
name|'mock_attach_config_drive'
op|','
nl|'\n'
name|'mock_power_on'
op|','
name|'mock_destroy'
op|','
name|'exists'
op|','
name|'boot_from_volume'
op|','
nl|'\n'
name|'configdrive_required'
op|','
name|'fail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_image_meta'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_root_path'
op|'='
name|'mock_create_root_vhd'
op|'.'
name|'return_value'
newline|'\n'
name|'fake_root_path'
op|'='
name|'None'
name|'if'
name|'boot_from_volume'
name|'else'
name|'fake_root_path'
newline|'\n'
name|'fake_ephemeral_path'
op|'='
name|'mock_create_ephemeral_vhd'
op|'.'
name|'return_value'
newline|'\n'
name|'fake_vm_gen'
op|'='
name|'mock_get_image_vm_gen'
op|'.'
name|'return_value'
newline|'\n'
name|'fake_config_drive_path'
op|'='
name|'mock_create_config_drive'
op|'.'
name|'return_value'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'return_value'
op|'='
name|'exists'
newline|'\n'
name|'mock_ebs_root_in_block_devices'
op|'.'
name|'return_value'
op|'='
name|'boot_from_volume'
newline|'\n'
name|'mock_create_root_vhd'
op|'.'
name|'return_value'
op|'='
name|'fake_root_path'
newline|'\n'
name|'mock_configdrive_required'
op|'.'
name|'return_value'
op|'='
name|'configdrive_required'
newline|'\n'
name|'mock_create_instance'
op|'.'
name|'side_effect'
op|'='
name|'fail'
newline|'\n'
name|'if'
name|'exists'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceExists'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock_instance'
op|','
name|'mock_image_meta'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'fail'
name|'is'
name|'vmutils'
op|'.'
name|'HyperVException'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock_instance'
op|','
name|'mock_image_meta'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|')'
newline|'\n'
name|'mock_destroy'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'mock_instance'
op|','
name|'mock_image_meta'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_delete_disk_files'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_ebs_root_in_block_devices'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'boot_from_volume'
op|':'
newline|'\n'
indent|'                '
name|'mock_create_root_vhd'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mock_instance'
op|')'
newline|'\n'
dedent|''
name|'mock_create_ephemeral_vhd'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_get_image_vm_gen'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_root_path'
op|','
nl|'\n'
name|'mock_image_meta'
op|')'
newline|'\n'
name|'mock_create_instance'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|','
nl|'\n'
name|'fake_root_path'
op|','
name|'fake_ephemeral_path'
op|','
name|'fake_vm_gen'
op|')'
newline|'\n'
name|'mock_configdrive_required'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
name|'if'
name|'configdrive_required'
op|':'
newline|'\n'
indent|'                '
name|'mock_create_config_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|')'
newline|'\n'
name|'mock_attach_config_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'fake_config_drive_path'
op|','
name|'fake_vm_gen'
op|')'
newline|'\n'
dedent|''
name|'mock_power_on'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn
dedent|''
dedent|''
name|'def'
name|'test_spawn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_spawn'
op|'('
name|'exists'
op|'='
name|'False'
op|','
name|'boot_from_volume'
op|'='
name|'False'
op|','
nl|'\n'
name|'configdrive_required'
op|'='
name|'True'
op|','
name|'fail'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_instance_exists
dedent|''
name|'def'
name|'test_spawn_instance_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_spawn'
op|'('
name|'exists'
op|'='
name|'True'
op|','
name|'boot_from_volume'
op|'='
name|'False'
op|','
nl|'\n'
name|'configdrive_required'
op|'='
name|'True'
op|','
name|'fail'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_create_instance_exception
dedent|''
name|'def'
name|'test_spawn_create_instance_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_spawn'
op|'('
name|'exists'
op|'='
name|'False'
op|','
name|'boot_from_volume'
op|'='
name|'False'
op|','
nl|'\n'
name|'configdrive_required'
op|'='
name|'True'
op|','
nl|'\n'
name|'fail'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_not_required
dedent|''
name|'def'
name|'test_spawn_not_required'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_spawn'
op|'('
name|'exists'
op|'='
name|'False'
op|','
name|'boot_from_volume'
op|'='
name|'False'
op|','
nl|'\n'
name|'configdrive_required'
op|'='
name|'False'
op|','
name|'fail'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_root_in_block
dedent|''
name|'def'
name|'test_spawn_root_in_block'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_spawn'
op|'('
name|'exists'
op|'='
name|'False'
op|','
name|'boot_from_volume'
op|'='
name|'True'
op|','
nl|'\n'
name|'configdrive_required'
op|'='
name|'False'
op|','
name|'fail'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_no_admin_permissions
dedent|''
name|'def'
name|'test_spawn_no_admin_permissions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'check_admin_permissions'
op|'.'
name|'side_effect'
op|'='
op|'('
nl|'\n'
name|'vmutils'
op|'.'
name|'HyperVException'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'mock'
op|'.'
name|'DEFAULT'
op|','
name|'mock'
op|'.'
name|'DEFAULT'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'INFO'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.volumeops.VolumeOps'"
nl|'\n'
string|"'.attach_volumes'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_attach_drive'"
op|')'
newline|'\n'
DECL|member|_test_create_instance
name|'def'
name|'_test_create_instance'
op|'('
name|'self'
op|','
name|'mock_attach_drive'
op|','
name|'mock_attach_volumes'
op|','
nl|'\n'
name|'fake_root_path'
op|','
name|'fake_ephemeral_path'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|','
nl|'\n'
name|'vm_gen'
op|'='
name|'constants'
op|'.'
name|'VM_GEN_1'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_vif_driver'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vif_driver'
op|'='
name|'mock_vif_driver'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enable_instance_metrics_collection'
op|'='
name|'enable_instance_metrics'
op|','
nl|'\n'
name|'group'
op|'='
string|"'hyperv'"
op|')'
newline|'\n'
name|'fake_network_info'
op|'='
op|'{'
string|"'id'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ID'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ADDRESS'
op|'}'
newline|'\n'
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'CONF'
op|'.'
name|'instances_path'
op|','
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'create_instance'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|','
nl|'\n'
name|'network_info'
op|'='
op|'['
name|'fake_network_info'
op|']'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|','
nl|'\n'
name|'root_vhd_path'
op|'='
name|'fake_root_path'
op|','
nl|'\n'
name|'eph_vhd_path'
op|'='
name|'fake_ephemeral_path'
op|','
nl|'\n'
name|'vm_gen'
op|'='
name|'vm_gen'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'create_vm'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'mock_instance'
op|'.'
name|'memory_mb'
op|','
nl|'\n'
name|'mock_instance'
op|'.'
name|'vcpus'
op|','
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'limit_cpu_features'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'dynamic_memory_ratio'
op|','
name|'vm_gen'
op|','
name|'instance_path'
op|','
nl|'\n'
op|'['
name|'mock_instance'
op|'.'
name|'uuid'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
op|']'
newline|'\n'
name|'ctrl_type'
op|'='
name|'vmops'
op|'.'
name|'VM_GENERATIONS_CONTROLLER_TYPES'
op|'['
name|'vm_gen'
op|']'
newline|'\n'
name|'ctrl_disk_addr'
op|'='
number|'0'
newline|'\n'
name|'if'
name|'fake_root_path'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'fake_root_path'
op|','
nl|'\n'
number|'0'
op|','
name|'ctrl_disk_addr'
op|','
name|'ctrl_type'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'DISK'
op|')'
op|')'
newline|'\n'
dedent|''
name|'ctrl_disk_addr'
op|'='
number|'1'
newline|'\n'
name|'if'
name|'fake_ephemeral_path'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'.'
name|'append'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock_instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|','
number|'0'
op|','
name|'ctrl_disk_addr'
op|','
nl|'\n'
name|'ctrl_type'
op|','
name|'constants'
op|'.'
name|'DISK'
op|')'
op|')'
newline|'\n'
dedent|''
name|'mock_attach_drive'
op|'.'
name|'has_calls'
op|'('
name|'expected'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'create_scsi_controller'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'ebs_root'
op|'='
name|'vm_gen'
name|'is'
name|'not'
name|'constants'
op|'.'
name|'VM_GEN_2'
name|'and'
name|'fake_root_path'
name|'is'
name|'None'
newline|'\n'
name|'mock_attach_volumes'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'DEV_INFO'
op|','
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'ebs_root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'create_nic'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ID'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'ADDRESS'
op|')'
newline|'\n'
name|'mock_vif_driver'
op|'.'
name|'plug'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|','
nl|'\n'
name|'fake_network_info'
op|')'
newline|'\n'
name|'mock_enable'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'enable_vm_metrics_collection'
newline|'\n'
name|'if'
name|'enable_instance_metrics'
op|':'
newline|'\n'
indent|'            '
name|'mock_enable'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance
dedent|''
dedent|''
name|'def'
name|'test_create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_ephemeral_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_EPHEMERAL_PATH'
newline|'\n'
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_ROOT_PATH'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'fake_ephemeral_path'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_no_root_path
dedent|''
name|'def'
name|'test_create_instance_no_root_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_ephemeral_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_EPHEMERAL_PATH'
newline|'\n'
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'fake_ephemeral_path'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_no_ephemeral_path
dedent|''
name|'def'
name|'test_create_instance_no_ephemeral_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_ROOT_PATH'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_no_path
dedent|''
name|'def'
name|'test_create_instance_no_path'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_enable_instance_metrics_false
dedent|''
name|'def'
name|'test_create_instance_enable_instance_metrics_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_ephemeral_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_EPHEMERAL_PATH'
newline|'\n'
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_ROOT_PATH'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'fake_ephemeral_path'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_gen2
dedent|''
name|'def'
name|'test_create_instance_gen2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_instance'
op|'('
name|'fake_root_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'fake_ephemeral_path'
op|'='
name|'None'
op|','
nl|'\n'
name|'enable_instance_metrics'
op|'='
name|'False'
op|','
nl|'\n'
name|'vm_gen'
op|'='
name|'constants'
op|'.'
name|'VM_GEN_2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_drive_vm_to_scsi
dedent|''
name|'def'
name|'test_attach_drive_vm_to_scsi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_attach_drive'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DRIVE_ADDR'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_CTRL_DISK_ADDR'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'CTRL_TYPE_SCSI'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'attach_scsi_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'DISK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_drive_vm_to_ide
dedent|''
name|'def'
name|'test_attach_drive_vm_to_ide'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_attach_drive'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DRIVE_ADDR'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_CTRL_DISK_ADDR'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'CTRL_TYPE_IDE'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'attach_ide_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DRIVE_ADDR'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_CTRL_DISK_ADDR'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'DISK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_get_image_vm_gen_except
dedent|''
name|'def'
name|'_check_get_image_vm_gen_except'
op|'('
name|'self'
op|','
name|'image_prop'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
op|'{'
string|'"properties"'
op|':'
op|'{'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN'
op|':'
name|'image_prop'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_hostutils'
op|'.'
name|'get_supported_vm_types'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_1'
op|','
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_image_vm_generation'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_vm_generation_default
dedent|''
name|'def'
name|'test_get_image_vm_generation_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
op|'{'
string|'"properties"'
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_hostutils'
op|'.'
name|'get_default_vm_generation'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_hostutils'
op|'.'
name|'get_supported_vm_types'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_1'
op|','
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|']'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_image_vm_generation'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'constants'
op|'.'
name|'VM_GEN_1'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_vm_generation_gen2
dedent|''
name|'def'
name|'test_get_image_vm_generation_gen2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
op|'{'
string|'"properties"'
op|':'
op|'{'
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN'
op|':'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_hostutils'
op|'.'
name|'get_supported_vm_types'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_1'
op|','
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_format'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'constants'
op|'.'
name|'DISK_FORMAT_VHDX'
op|')'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_image_vm_generation'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'constants'
op|'.'
name|'VM_GEN_2'
op|','
name|'response'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_vm_generation_bad_prop
dedent|''
name|'def'
name|'test_get_image_vm_generation_bad_prop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_check_get_image_vm_gen_except'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_IMAGE_PROP'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_vm_generation_not_vhdx
dedent|''
name|'def'
name|'test_get_image_vm_generation_not_vhdx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vhdutils'
op|'.'
name|'get_vhd_format'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'constants'
op|'.'
name|'DISK_FORMAT_VHD'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_get_image_vm_gen_except'
op|'('
name|'constants'
op|'.'
name|'IMAGE_PROP_VM_GEN_2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.api.metadata.base.InstanceMetadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.configdrive.ConfigDriveBuilder'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.utils.execute'"
op|')'
newline|'\n'
DECL|member|_test_create_config_drive
name|'def'
name|'_test_create_config_drive'
op|'('
name|'self'
op|','
name|'mock_execute'
op|','
name|'mock_ConfigDriveBuilder'
op|','
nl|'\n'
name|'mock_InstanceMetadata'
op|','
name|'config_drive_format'
op|','
nl|'\n'
name|'config_drive_cdrom'
op|','
name|'side_effect'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'config_drive_format'
op|'='
name|'config_drive_format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'config_drive_cdrom'
op|'='
name|'config_drive_cdrom'
op|','
name|'group'
op|'='
string|"'hyperv'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'config_drive_inject_password'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'hyperv'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'FAKE_DIR'
op|')'
newline|'\n'
name|'mock_ConfigDriveBuilder'
op|'('
op|')'
op|'.'
name|'__enter__'
op|'('
op|')'
op|'.'
name|'make_drive'
op|'.'
name|'side_effect'
op|'='
op|'['
nl|'\n'
name|'side_effect'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'config_drive_format'
op|'!='
name|'self'
op|'.'
name|'ISO9660'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'UnsupportedConfigDriveFormatException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_config_drive'
op|','
nl|'\n'
name|'mock_instance'
op|','
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'NET_INFO'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'side_effect'
name|'is'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_config_drive'
op|','
nl|'\n'
name|'mock_instance'
op|','
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'NET_INFO'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_config_drive'
op|'('
name|'mock_instance'
op|','
nl|'\n'
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'NET_INFO'
op|')'
newline|'\n'
name|'mock_InstanceMetadata'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'content'
op|'='
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FILE'
op|']'
op|','
nl|'\n'
name|'extra_md'
op|'='
op|'{'
string|"'admin_pass'"
op|':'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'PASSWORD'
op|'}'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'NET_INFO'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_ConfigDriveBuilder'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'instance_md'
op|'='
name|'mock_InstanceMetadata'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_make_drive'
op|'='
name|'mock_ConfigDriveBuilder'
op|'('
op|')'
op|'.'
name|'__enter__'
op|'('
op|')'
op|'.'
name|'make_drive'
newline|'\n'
name|'path_iso'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'FAKE_DIR'
op|','
name|'self'
op|'.'
name|'FAKE_CONFIG_DRIVE_ISO'
op|')'
newline|'\n'
name|'path_vhd'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'FAKE_DIR'
op|','
name|'self'
op|'.'
name|'FAKE_CONFIG_DRIVE_VHD'
op|')'
newline|'\n'
name|'mock_make_drive'
op|'.'
name|'assert_called_once_with'
op|'('
name|'path_iso'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'config_drive_cdrom'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
name|'path_vhd'
newline|'\n'
name|'mock_execute'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'CONF'
op|'.'
name|'hyperv'
op|'.'
name|'qemu_img_cmd'
op|','
nl|'\n'
string|"'convert'"
op|','
string|"'-f'"
op|','
string|"'raw'"
op|','
string|"'-O'"
op|','
string|"'vpc'"
op|','
nl|'\n'
name|'path_iso'
op|','
name|'path_vhd'
op|','
name|'attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'remove'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'FAKE_DIR'
op|','
name|'self'
op|'.'
name|'FAKE_CONFIG_DRIVE_ISO'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
name|'path_iso'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_config_drive_cdrom
dedent|''
dedent|''
name|'def'
name|'test_create_config_drive_cdrom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_config_drive'
op|'('
name|'config_drive_format'
op|'='
name|'self'
op|'.'
name|'ISO9660'
op|','
nl|'\n'
name|'config_drive_cdrom'
op|'='
name|'True'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_config_drive_vhd
dedent|''
name|'def'
name|'test_create_config_drive_vhd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_config_drive'
op|'('
name|'config_drive_format'
op|'='
name|'self'
op|'.'
name|'ISO9660'
op|','
nl|'\n'
name|'config_drive_cdrom'
op|'='
name|'False'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_config_drive_other_drive_format
dedent|''
name|'def'
name|'test_create_config_drive_other_drive_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_config_drive'
op|'('
name|'config_drive_format'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'OTHER'
op|','
nl|'\n'
name|'config_drive_cdrom'
op|'='
name|'False'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_config_drive_execution_error
dedent|''
name|'def'
name|'test_create_config_drive_execution_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_create_config_drive'
op|'('
nl|'\n'
name|'config_drive_format'
op|'='
name|'self'
op|'.'
name|'ISO9660'
op|','
nl|'\n'
name|'config_drive_cdrom'
op|'='
name|'False'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_config_drive_exception
dedent|''
name|'def'
name|'test_attach_config_drive_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDiskFormat'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'attach_config_drive'
op|','
nl|'\n'
name|'instance'
op|','
string|"'C:/fake_instance_dir/configdrive.xxx'"
op|','
nl|'\n'
name|'constants'
op|'.'
name|'VM_GEN_1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_attach_drive'"
op|')'
newline|'\n'
DECL|member|test_attach_config_drive
name|'def'
name|'test_attach_config_drive'
op|'('
name|'self'
op|','
name|'mock_attach_drive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'attach_config_drive'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_FAKE_CONFIGDRIVE_PATH'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'VM_GEN_1'
op|')'
newline|'\n'
name|'mock_attach_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_CONFIGDRIVE_PATH'
op|','
nl|'\n'
number|'1'
op|','
number|'0'
op|','
name|'constants'
op|'.'
name|'CTRL_TYPE_IDE'
op|','
name|'constants'
op|'.'
name|'DISK'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_attach_drive'"
op|')'
newline|'\n'
DECL|member|test_attach_config_drive_gen2
name|'def'
name|'test_attach_config_drive_gen2'
op|'('
name|'self'
op|','
name|'mock_attach_drive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'attach_config_drive'
op|'('
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_FAKE_CONFIGDRIVE_PATH'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'VM_GEN_2'
op|')'
newline|'\n'
name|'mock_attach_drive'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_CONFIGDRIVE_PATH'
op|','
nl|'\n'
number|'1'
op|','
number|'0'
op|','
name|'constants'
op|'.'
name|'CTRL_TYPE_SCSI'
op|','
name|'constants'
op|'.'
name|'DISK'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_disk_files
dedent|''
name|'def'
name|'test_delete_disk_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_delete_disk_files'
op|'('
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'create_dir'
op|'='
name|'False'
op|','
name|'remove_dir'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.volumeops.VolumeOps.disconnect_volumes'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._delete_disk_files'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.power_off'"
op|')'
newline|'\n'
DECL|member|test_destroy
name|'def'
name|'test_destroy'
op|'('
name|'self'
op|','
name|'mock_power_off'
op|','
name|'mock_delete_disk_files'
op|','
nl|'\n'
name|'mock_disconnect_volumes'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_BD_INFO'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'assert_called_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_power_off'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'destroy_vm'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_disconnect_volumes'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_BD_INFO'
op|')'
newline|'\n'
name|'mock_delete_disk_files'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_inexistent_instance
dedent|''
name|'def'
name|'test_destroy_inexistent_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'destroy_vm'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps.power_off'"
op|')'
newline|'\n'
DECL|member|test_destroy_exception
name|'def'
name|'test_destroy_exception'
op|'('
name|'self'
op|','
name|'mock_power_off'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'destroy_vm'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'vm_exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'destroy'
op|','
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_HARD'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft_failed
name|'def'
name|'test_reboot_soft_failed'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps.power_on"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft_exception
name|'def'
name|'test_reboot_soft_exception'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|','
name|'mock_power_on'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'mock_power_on'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
string|'"Expected failure"'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_soft_shutdown'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'mock_power_on'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_reboot
dedent|''
name|'def'
name|'_test_reboot'
op|'('
name|'self'
op|','
name|'reboot_type'
op|','
name|'vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|','
string|"'_set_vm_state'"
op|')'
name|'as'
name|'mock_set_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
op|'{'
op|'}'
op|','
name|'reboot_type'
op|')'
newline|'\n'
name|'mock_set_state'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._wait_for_power_off"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown
name|'def'
name|'test_soft_shutdown'
op|'('
name|'self'
op|','
name|'mock_wait_for_power_off'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'soft_shutdown_vm'
newline|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"time.sleep"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown_failed
name|'def'
name|'test_soft_shutdown_failed'
op|'('
name|'self'
op|','
name|'mock_sleep'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'soft_shutdown_vm'
newline|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
nl|'\n'
string|'"Expected failure."'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._wait_for_power_off"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown_wait
name|'def'
name|'test_soft_shutdown_wait'
op|'('
name|'self'
op|','
name|'mock_wait_for_power_off'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'side_effect'
op|'='
op|'['
name|'False'
op|','
name|'True'
op|']'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|'-'
number|'1'
op|')'
op|']'
newline|'\n'
name|'mock_shutdown_vm'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'soft_shutdown_vm'
newline|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._wait_for_power_off"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown_wait_timeout
name|'def'
name|'test_soft_shutdown_wait_timeout'
op|'('
name|'self'
op|','
name|'mock_wait_for_power_off'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|','
number|'1.5'
op|')'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
number|'1.5'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|'-'
number|'1.5'
op|')'
op|']'
newline|'\n'
name|'mock_shutdown_vm'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'soft_shutdown_vm'
newline|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_pause
name|'def'
name|'test_pause'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'pause'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_PAUSED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_unpause
name|'def'
name|'test_unpause'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'unpause'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_suspend
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'suspend'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_SUSPENDED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_resume
name|'def'
name|'test_resume'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'resume'
op|'('
name|'instance'
op|'='
name|'mock_instance'
op|')'
newline|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_power_off
dedent|''
name|'def'
name|'_test_power_off'
op|'('
name|'self'
op|','
name|'timeout'
op|','
name|'set_state_expected'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|','
string|"'_set_vm_state'"
op|')'
name|'as'
name|'mock_set_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'set_state_expected'
op|':'
newline|'\n'
indent|'                '
name|'mock_set_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_off_hard
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_power_off_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_power_off'
op|'('
name|'timeout'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_power_off_exception
name|'def'
name|'test_power_off_exception'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_test_power_off'
op|'('
name|'timeout'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._set_vm_state"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_power_off_soft
name|'def'
name|'test_power_off_soft'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|','
name|'mock_set_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|','
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'mock_soft_shutdown'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|','
number|'1'
op|','
name|'vmops'
op|'.'
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_set_state'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_power_off_unexisting_instance
name|'def'
name|'test_power_off_unexisting_instance'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
newline|'\n'
name|'self'
op|'.'
name|'_test_power_off'
op|'('
name|'timeout'
op|'='
number|'1'
op|','
name|'set_state_expected'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_power_on
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_on'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.volumeops.VolumeOps'"
nl|'\n'
string|"'.fix_instance_volume_disk_paths'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.VMOps._set_vm_state'"
op|')'
newline|'\n'
DECL|member|test_power_on_having_block_devices
name|'def'
name|'test_power_on_having_block_devices'
op|'('
name|'self'
op|','
name|'mock_set_vm_state'
op|','
nl|'\n'
name|'mock_fix_instance_vol_paths'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'power_on'
op|'('
name|'mock_instance'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'block_device_info'
op|')'
newline|'\n'
nl|'\n'
name|'mock_fix_instance_vol_paths'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'block_device_info'
op|')'
newline|'\n'
name|'mock_set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'log_vm_serial_output'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_delete_vm_console_log'"
op|')'
newline|'\n'
DECL|member|_test_set_vm_state
name|'def'
name|'_test_set_vm_state'
op|'('
name|'self'
op|','
name|'mock_delete_vm_console_log'
op|','
nl|'\n'
name|'mock_log_vm_output'
op|','
name|'state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_set_vm_state'
op|'('
name|'mock_instance'
op|','
name|'state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'set_vm_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock_instance'
op|'.'
name|'name'
op|','
name|'state'
op|')'
newline|'\n'
name|'if'
name|'state'
name|'in'
op|'('
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_delete_vm_console_log'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'state'
name|'in'
op|'('
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_log_vm_output'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|'.'
name|'name'
op|','
nl|'\n'
name|'mock_instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_vm_state_disabled
dedent|''
dedent|''
name|'def'
name|'test_set_vm_state_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_set_vm_state'
op|'('
name|'state'
op|'='
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_vm_state_enabled
dedent|''
name|'def'
name|'test_set_vm_state_enabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_set_vm_state'
op|'('
name|'state'
op|'='
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_vm_state_reboot
dedent|''
name|'def'
name|'test_set_vm_state_reboot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_set_vm_state'
op|'('
name|'state'
op|'='
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_vm_state_exception
dedent|''
name|'def'
name|'test_set_vm_state_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'set_vm_state'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_set_vm_state'
op|','
nl|'\n'
name|'mock_instance'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'STATE'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vm_state
dedent|''
name|'def'
name|'test_get_vm_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'summary_info'
op|'='
op|'{'
string|"'EnabledState'"
op|':'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|','
nl|'\n'
string|"'get_vm_summary_info'"
op|')'
name|'as'
name|'mock_get_summary_info'
op|':'
newline|'\n'
indent|'            '
name|'mock_get_summary_info'
op|'.'
name|'return_value'
op|'='
name|'summary_info'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_get_vm_state'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_get_vm_state'"
op|')'
newline|'\n'
DECL|member|test_wait_for_power_off_true
name|'def'
name|'test_wait_for_power_off_true'
op|'('
name|'self'
op|','
name|'mock_get_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_state'
op|'.'
name|'return_value'
op|'='
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_wait_for_power_off'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'vmops'
op|'.'
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'mock_get_state'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'etimeout'
op|','
string|'"with_timeout"'
op|')'
newline|'\n'
DECL|member|test_wait_for_power_off_false
name|'def'
name|'test_wait_for_power_off_false'
op|'('
name|'self'
op|','
name|'mock_with_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_with_timeout'
op|'.'
name|'side_effect'
op|'='
name|'etimeout'
op|'.'
name|'Timeout'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_wait_for_power_off'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'vmops'
op|'.'
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ioutils'
op|','
string|"'IOThread'"
op|')'
newline|'\n'
DECL|member|_test_log_vm_serial_output
name|'def'
name|'_test_log_vm_serial_output'
op|'('
name|'self'
op|','
name|'mock_io_thread'
op|','
nl|'\n'
name|'worker_running'
op|'='
name|'False'
op|','
nl|'\n'
name|'worker_exists'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'log_path'
op|','
op|')'
newline|'\n'
name|'fake_instance_uuid'
op|'='
string|"'fake-uuid'"
newline|'\n'
name|'fake_existing_worker'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'fake_existing_worker'
op|'.'
name|'is_active'
op|'.'
name|'return_value'
op|'='
name|'worker_running'
newline|'\n'
name|'fake_log_writers'
op|'='
op|'{'
name|'fake_instance_uuid'
op|':'
name|'fake_existing_worker'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vm_log_writers'
op|'='
op|'('
nl|'\n'
name|'fake_log_writers'
name|'if'
name|'worker_exists'
name|'else'
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'log_vm_serial_output'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'instance_name'
op|','
nl|'\n'
name|'fake_instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
op|'('
name|'worker_exists'
name|'and'
name|'worker_running'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected_pipe_path'
op|'='
string|"r'\\\\.\\pipe\\%s'"
op|'%'
name|'fake_instance_uuid'
newline|'\n'
name|'expected_current_worker'
op|'='
name|'mock_io_thread'
op|'.'
name|'return_value'
newline|'\n'
name|'expected_current_worker'
op|'.'
name|'start'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'mock_io_thread'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'expected_pipe_path'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'log_path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_MAX_CONSOLE_LOG_FILE_SIZE'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'expected_current_worker'
op|'='
name|'fake_existing_worker'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_current_worker'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vm_log_writers'
op|'['
name|'fake_instance_uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_log_vm_serial_output_unexisting_worker
dedent|''
name|'def'
name|'test_log_vm_serial_output_unexisting_worker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_log_vm_serial_output'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_log_vm_serial_output_worker_stopped
dedent|''
name|'def'
name|'test_log_vm_serial_output_worker_stopped'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_log_vm_serial_output'
op|'('
name|'worker_exists'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_log_vm_serial_output_worker_running
dedent|''
name|'def'
name|'test_log_vm_serial_output_worker_running'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_log_vm_serial_output'
op|'('
name|'worker_exists'
op|'='
name|'True'
op|','
nl|'\n'
name|'worker_running'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_copy_vm_console_logs
dedent|''
name|'def'
name|'test_copy_vm_console_logs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_local_paths'
op|'='
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH_ARCHIVED'
op|')'
newline|'\n'
name|'fake_remote_paths'
op|'='
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_REMOTE_PATH'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_REMOTE_PATH_ARCHIVED'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'side_effect'
op|'='
op|'['
nl|'\n'
name|'fake_local_paths'
op|','
name|'fake_remote_paths'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'.'
name|'side_effect'
op|'='
op|'['
name|'True'
op|','
name|'False'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'copy_vm_console_logs'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST'
op|')'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'remote_server'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH_ARCHIVED'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'exists'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'copy'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_REMOTE_PATH'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'ioutils'
op|','
string|"'IOThread'"
op|')'
newline|'\n'
DECL|member|test_log_vm_serial_output
name|'def'
name|'test_log_vm_serial_output'
op|'('
name|'self'
op|','
name|'fake_iothread'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'log_vm_serial_output'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'self'
op|'.'
name|'FAKE_UUID'
op|')'
newline|'\n'
nl|'\n'
name|'pipe_path'
op|'='
string|"r'\\\\.\\pipe\\%s'"
op|'%'
name|'self'
op|'.'
name|'FAKE_UUID'
newline|'\n'
name|'fake_iothread'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'pipe_path'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_MAX_CONSOLE_LOG_FILE_SIZE'
op|')'
newline|'\n'
name|'fake_iothread'
op|'.'
name|'return_value'
op|'.'
name|'start'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'unittest2'
op|'.'
name|'skip'
op|'('
string|"'mock_open in 1.2 read only works once 1475661'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.path.exists"'
op|')'
newline|'\n'
DECL|member|test_get_console_output
name|'def'
name|'test_get_console_output'
op|'('
name|'self'
op|','
name|'fake_path_exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'fake_path_exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH_ARCHIVED'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.open'"
op|','
nl|'\n'
name|'mock'
op|'.'
name|'mock_open'
op|'('
name|'read_data'
op|'='
name|'self'
op|'.'
name|'FAKE_LOG'
op|')'
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_log'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_console_output'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
comment|'# get_vm_console_log_paths returns 2 paths.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FAKE_LOG'
op|'*'
number|'2'
op|','
name|'instance_log'
op|')'
newline|'\n'
nl|'\n'
name|'expected_calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH_ARCHIVED'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|')'
op|']'
newline|'\n'
name|'fake_path_exists'
op|'.'
name|'assert_has_calls'
op|'('
name|'expected_calls'
op|','
name|'any_order'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"__builtin__.open"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.path.exists"'
op|')'
newline|'\n'
DECL|member|test_get_console_output_exception
name|'def'
name|'test_get_console_output_exception'
op|'('
name|'self'
op|','
name|'fake_path_exists'
op|','
name|'fake_open'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_vm'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_open'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
newline|'\n'
name|'fake_path_exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fake_console_log_path'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fake_console_log_archived'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.open'"
op|','
name|'fake_open'
op|','
name|'create'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_console_output'
op|','
nl|'\n'
name|'fake_vm'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'fileutils'
op|','
string|"'delete_if_exists'"
op|')'
newline|'\n'
DECL|member|test_delete_vm_console_log
name|'def'
name|'test_delete_vm_console_log'
op|'('
name|'self'
op|','
name|'mock_delete_if_exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_vm_console_log_paths'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|','
op|')'
newline|'\n'
name|'mock_log_writer'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vm_log_writers'
op|'['
name|'mock_instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|'='
name|'mock_log_writer'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_delete_vm_console_log'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'mock_log_writer'
op|'.'
name|'join'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'mock_delete_if_exists'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_PATH'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_vm_com_port_pipe
dedent|''
name|'def'
name|'test_create_vm_com_port_pipe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'pipe_path'
op|'='
string|"r'\\\\.\\pipe\\%s'"
op|'%'
name|'mock_instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_vm_com_port_pipe'
op|'('
name|'mock_instance'
op|')'
newline|'\n'
nl|'\n'
name|'get_vm_serial_port'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_serial_port_connection'
newline|'\n'
name|'get_vm_serial_port'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_instance'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'update_connection'
op|'='
name|'pipe_path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|'"log_vm_serial_output"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.path.basename"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.path.exists"'
op|')'
newline|'\n'
DECL|member|test_restart_vm_log_writers
name|'def'
name|'test_restart_vm_log_writers'
op|'('
name|'self'
op|','
name|'mock_exists'
op|','
name|'mock_basename'
op|','
nl|'\n'
name|'mock_log_vm_output'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_active_instances'
op|'.'
name|'return_value'
op|'='
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME_OTHER'
op|']'
newline|'\n'
name|'mock_exists'
op|'.'
name|'side_effect'
op|'='
op|'['
name|'True'
op|','
name|'False'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'restart_vm_log_writers'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME_OTHER'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
name|'get_vm_serial_port'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_serial_port_connection'
newline|'\n'
name|'get_vm_serial_port'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'mock_log_vm_output'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'mock_basename'
op|'.'
name|'return_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_instance_uuids
dedent|''
name|'def'
name|'test_list_instance_uuids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_uuid'
op|'='
string|"'4f54fb69-d3a2-45b7-bb9b-b6e6b3d893b3'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|','
nl|'\n'
string|"'list_instance_notes'"
op|')'
name|'as'
name|'mock_list_notes'
op|':'
newline|'\n'
indent|'            '
name|'mock_list_notes'
op|'.'
name|'return_value'
op|'='
op|'['
op|'('
string|"'fake_name'"
op|','
op|'['
name|'fake_uuid'
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
newline|'\n'
name|'mock_list_notes'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
op|'['
name|'fake_uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_copy_vm_dvd_disks
dedent|''
name|'def'
name|'test_copy_vm_dvd_disks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_paths'
op|'='
op|'['
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DVD_PATH1'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DVD_PATH2'
op|']'
newline|'\n'
name|'mock_copy'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'copyfile'
newline|'\n'
name|'mock_get_dvd_disk_paths'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|'.'
name|'get_vm_dvd_disk_paths'
newline|'\n'
name|'mock_get_dvd_disk_paths'
op|'.'
name|'return_value'
op|'='
name|'fake_paths'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST_PATH'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'copy_vm_dvd_disks'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST_HOST'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get_dvd_disk_paths'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_pathutils'
op|'.'
name|'get_instance_dir'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
nl|'\n'
name|'remote_server'
op|'='
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST_HOST'
op|')'
newline|'\n'
name|'mock_copy'
op|'.'
name|'has_calls'
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DVD_PATH1'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST_PATH'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DVD_PATH2'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_DEST_PATH'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

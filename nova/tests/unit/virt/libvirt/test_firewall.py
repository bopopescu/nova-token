begin_unit
comment|'#    Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'#    Copyright 2012 University Of Minho'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'mox3'
name|'import'
name|'mox'
newline|'\n'
name|'from'
name|'oslo_concurrency'
op|'.'
name|'fixture'
name|'import'
name|'lockutils'
name|'as'
name|'lock_fixture'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'fakelibvirt'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'host'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'netutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'virtapi'
newline|'\n'
nl|'\n'
DECL|variable|_fake_network_info
name|'_fake_network_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
newline|'\n'
DECL|variable|_fake_stub_out_get_nw_info
name|'_fake_stub_out_get_nw_info'
op|'='
name|'fake_network'
op|'.'
name|'stub_out_nw_api_get_instance_nw_info'
newline|'\n'
DECL|variable|_ipv4_like
name|'_ipv4_like'
op|'='
name|'fake_network'
op|'.'
name|'ipv4_like'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterFakes
name|'class'
name|'NWFilterFakes'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|nwfilterLookupByName
dedent|''
name|'def'
name|'nwfilterLookupByName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'raise'
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'Filter Not Found'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|filterDefineXMLMock
dedent|''
name|'def'
name|'filterDefineXMLMock'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
DECL|class|FakeNWFilterInternal
indent|'        '
name|'class'
name|'FakeNWFilterInternal'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'name'
op|','
name|'u'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'uuid'
op|'='
name|'u'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'parent'
newline|'\n'
name|'self'
op|'.'
name|'xml'
op|'='
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|XMLDesc
dedent|''
name|'def'
name|'XMLDesc'
op|'('
name|'self'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'xml'
newline|'\n'
nl|'\n'
DECL|member|undefine
dedent|''
name|'def'
name|'undefine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'parent'
op|'.'
name|'filters'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'tree'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'tree'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'u'
op|'='
name|'tree'
op|'.'
name|'find'
op|'('
string|"'uuid'"
op|')'
newline|'\n'
name|'if'
name|'u'
name|'is'
name|'None'
op|':'
newline|'\n'
DECL|variable|u
indent|'            '
name|'u'
op|'='
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|'.'
name|'hex'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
DECL|variable|u
indent|'            '
name|'u'
op|'='
name|'u'
op|'.'
name|'text'
newline|'\n'
dedent|''
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
op|'='
name|'FakeNWFilterInternal'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'u'
op|','
name|'xml'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
op|'.'
name|'uuid'
op|'!='
name|'u'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
nl|'\n'
string|'"Mismatching name \'%s\' with uuid \'%s\' vs \'%s\'"'
nl|'\n'
op|'%'
op|'('
name|'name'
op|','
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
op|'.'
name|'uuid'
op|','
name|'u'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
op|'.'
name|'xml'
op|'='
name|'xml'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirtAPI
dedent|''
dedent|''
name|'class'
name|'FakeVirtAPI'
op|'('
name|'virtapi'
op|'.'
name|'VirtAPI'
op|')'
op|':'
newline|'\n'
DECL|member|provider_fw_rule_get_all
indent|'    '
name|'def'
name|'provider_fw_rule_get_all'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallTestCase
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'lock_fixture'
op|'.'
name|'ExternalLockFixture'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fakelibvirt'
op|'.'
name|'FakeLibvirtFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'IptablesFirewallDriver'
op|'('
nl|'\n'
name|'FakeVirtAPI'
op|'('
op|')'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|in_rules
dedent|''
name|'in_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.10 on Sat Feb 19 00:03:19 2011'"
op|','
nl|'\n'
string|"'*nat'"
op|','
nl|'\n'
string|"':PREROUTING ACCEPT [1170:189210]'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [844:71028]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [5149:405186]'"
op|','
nl|'\n'
string|"':POSTROUTING ACCEPT [5063:386098]'"
op|','
nl|'\n'
string|"'# Completed on Tue Dec 18 15:50:25 2012'"
op|','
nl|'\n'
string|"'# Generated by iptables-save v1.4.12 on Tue Dec 18 15:50:25 201;'"
op|','
nl|'\n'
string|"'*mangle'"
op|','
nl|'\n'
string|"':PREROUTING ACCEPT [241:39722]'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [230:39282]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [266:26558]'"
op|','
nl|'\n'
string|"':POSTROUTING ACCEPT [267:26590]'"
op|','
nl|'\n'
string|"'-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM '"
nl|'\n'
string|"'--checksum-fill'"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Tue Dec 18 15:50:25 2012'"
op|','
nl|'\n'
string|"'# Generated by iptables-save v1.4.4 on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [969615:281627771]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [915599:63811649]'"
op|','
nl|'\n'
string|"':nova-block-ipv4 - [0:0]'"
op|','
nl|'\n'
string|"'[0:0] -A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT '"
op|','
nl|'\n'
string|"'[0:0] -A FORWARD -d 192.168.122.0/24 -o virbr0 -m state --state RELATED'"
nl|'\n'
string|"',ESTABLISHED -j ACCEPT '"
op|','
nl|'\n'
string|"'[0:0] -A FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'[0:0] -A FORWARD -i virbr0 -o virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'[0:0] -A FORWARD -o virbr0 -j REJECT '"
nl|'\n'
string|"'--reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'[0:0] -A FORWARD -i virbr0 -j REJECT '"
nl|'\n'
string|"'--reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|in6_filter_rules
name|'in6_filter_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by ip6tables-save v1.4.4 on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [349155:75810423]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [349256:75777230]'"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_ref
name|'def'
name|'_create_instance_ref'
op|'('
name|'self'
op|','
nl|'\n'
name|'uuid'
op|'='
string|'"74526555-9166-4893-a203-126bdcab0d67"'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'id'
op|'='
number|'7'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuid'
op|','
nl|'\n'
name|'user_id'
op|'='
string|'"fake"'
op|','
nl|'\n'
name|'project_id'
op|'='
string|'"fake"'
op|','
nl|'\n'
name|'image_ref'
op|'='
string|"'155d900f-4e14-4e4c-a73d-069cbf4541e6'"
op|','
nl|'\n'
name|'instance_type_id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'info_cache'
op|'.'
name|'deleted'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
string|'"get_by_security_group_id"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|','
string|'"get_by_instance"'
op|')'
newline|'\n'
DECL|member|test_static_filters
name|'def'
name|'test_static_filters'
op|'('
name|'self'
op|','
name|'mock_secrule'
op|','
name|'mock_instlist'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'UUID'
op|'='
string|'"2674993b-6adb-4733-abd9-a7c10cc1f146"'
newline|'\n'
name|'SRC_UUID'
op|'='
string|'"0e0a76b2-7c52-4bc0-9a60-d83017e42c1a"'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
name|'UUID'
op|')'
newline|'\n'
name|'src_instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
name|'SRC_UUID'
op|')'
newline|'\n'
nl|'\n'
name|'secgroup'
op|'='
name|'objects'
op|'.'
name|'SecurityGroup'
op|'('
name|'id'
op|'='
number|'1'
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'project_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'name'
op|'='
string|"'testgroup'"
op|','
nl|'\n'
name|'description'
op|'='
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
name|'src_secgroup'
op|'='
name|'objects'
op|'.'
name|'SecurityGroup'
op|'('
name|'id'
op|'='
number|'2'
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'project_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'name'
op|'='
string|"'testsourcegroup'"
op|','
nl|'\n'
name|'description'
op|'='
string|"'src group'"
op|')'
newline|'\n'
nl|'\n'
name|'r1'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRule'
op|'('
name|'parent_group_id'
op|'='
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'protocol'
op|'='
string|"'icmp'"
op|','
nl|'\n'
name|'from_port'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'to_port'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.11.0/24'"
op|','
nl|'\n'
name|'grantee_group'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'r2'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRule'
op|'('
name|'parent_group_id'
op|'='
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'protocol'
op|'='
string|"'icmp'"
op|','
nl|'\n'
name|'from_port'
op|'='
number|'8'
op|','
nl|'\n'
name|'to_port'
op|'='
op|'-'
number|'1'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.11.0/24'"
op|','
nl|'\n'
name|'grantee_group'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'r3'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRule'
op|'('
name|'parent_group_id'
op|'='
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'from_port'
op|'='
number|'80'
op|','
nl|'\n'
name|'to_port'
op|'='
number|'81'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.10.0/24'"
op|','
nl|'\n'
name|'grantee_group'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'r4'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRule'
op|'('
name|'parent_group_id'
op|'='
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'from_port'
op|'='
number|'80'
op|','
nl|'\n'
name|'to_port'
op|'='
number|'81'
op|','
nl|'\n'
name|'cidr'
op|'='
name|'None'
op|','
nl|'\n'
name|'grantee_group'
op|'='
name|'src_secgroup'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'src_secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'r5'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRule'
op|'('
name|'parent_group_id'
op|'='
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'protocol'
op|'='
name|'None'
op|','
nl|'\n'
name|'cidr'
op|'='
name|'None'
op|','
nl|'\n'
name|'grantee_group'
op|'='
name|'src_secgroup'
op|','
nl|'\n'
name|'group_id'
op|'='
name|'src_secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'secgroup_list'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
name|'secgroup_list'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'secgroup'
op|')'
newline|'\n'
name|'src_secgroup_list'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
name|'src_secgroup_list'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'src_secgroup'
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'secgroup_list'
newline|'\n'
name|'src_instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'src_secgroup_list'
newline|'\n'
nl|'\n'
name|'mock_secrule'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|'('
nl|'\n'
name|'objects'
op|'='
op|'['
name|'r1'
op|','
name|'r2'
op|','
name|'r3'
op|','
name|'r4'
op|','
name|'r5'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_fake_instlist
name|'def'
name|'_fake_instlist'
op|'('
name|'ctxt'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'id'
op|'=='
name|'src_secgroup'
op|'['
string|"'id'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'insts'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'('
op|')'
newline|'\n'
name|'insts'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'src_instance_ref'
op|')'
newline|'\n'
name|'return'
name|'insts'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'insts'
op|'='
name|'objects'
op|'.'
name|'InstanceList'
op|'('
op|')'
newline|'\n'
name|'insts'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'return'
name|'insts'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'mock_instlist'
op|'.'
name|'side_effect'
op|'='
name|'_fake_instlist'
newline|'\n'
nl|'\n'
DECL|function|fake_iptables_execute
name|'def'
name|'fake_iptables_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'ip6tables-save'"
op|','
string|"'-c'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in6_filter_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'iptables-save'"
op|','
string|"'-c'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'iptables-restore'"
op|','
string|"'-c'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'ip6tables-restore'"
op|','
string|"'-c'"
op|','
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out6_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'network_model'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'execute'
op|'='
name|'fake_iptables_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'get_nw_info_for_instance'"
op|','
nl|'\n'
name|'lambda'
name|'instance'
op|':'
name|'network_model'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_model'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_model'
op|')'
newline|'\n'
nl|'\n'
name|'in_rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'l'
op|':'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'in_rules'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'in_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'nova'"
name|'not'
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'rule'
op|','
name|'self'
op|'.'
name|'out_rules'
op|','
nl|'\n'
string|"'Rule went missing: %s'"
op|'%'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
comment|'# last two octets change'
nl|'\n'
indent|'            '
name|'if'
name|'re'
op|'.'
name|'search'
op|'('
string|"'-d 192.168.[0-9]{1,3}.[0-9]{1,3} -j'"
op|','
name|'rule'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_chain'
op|','
string|'"The instance chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'security_group_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-A %s -j'"
op|'%'
name|'instance_chain'
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'security_group_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'security_group_chain'
op|','
nl|'\n'
string|'"The security group chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\[0\\:0\\] -A .* -j ACCEPT -p icmp '"
nl|'\n'
string|"'-s 192.168.11.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\[0\\:0\\] -A .* -j ACCEPT -p icmp -m icmp '"
nl|'\n'
string|"'--icmp-type 8 -s 192.168.11.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP Echo Request acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'network_model'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ip'
op|'['
string|"'version'"
op|']'
op|'!='
number|'4'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\[0\\:0\\] -A .* -j ACCEPT -p tcp -m multiport '"
nl|'\n'
string|"'--dports 80:81 -s %s'"
op|'%'
name|'ip'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\[0\\:0\\] -A .* -j ACCEPT -s '"
nl|'\n'
string|"'%s'"
op|'%'
name|'ip'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"Protocol/port-less acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\[0\\:0\\] -A .* -j ACCEPT -p tcp '"
nl|'\n'
string|"'-m multiport --dports 80:81 -s 192.168.10.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_with_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_with_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'True'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_without_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_without_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'False'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|','
string|'"get_by_instance"'
op|')'
newline|'\n'
DECL|member|test_multinic_iptables
name|'def'
name|'test_multinic_iptables'
op|'('
name|'self'
op|','
name|'mock_secrule'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_secrule'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ipv4_rules_per_addr'
op|'='
number|'1'
newline|'\n'
name|'ipv4_addr_per_network'
op|'='
number|'2'
newline|'\n'
name|'ipv6_rules_per_addr'
op|'='
number|'1'
newline|'\n'
name|'ipv6_addr_per_network'
op|'='
number|'1'
newline|'\n'
name|'networks_count'
op|'='
number|'5'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
name|'networks_count'
op|','
nl|'\n'
name|'ipv4_addr_per_network'
op|')'
newline|'\n'
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
string|"'1.1.1.1'"
newline|'\n'
name|'ipv4_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'ipv6_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'inst_ipv4'
op|','
name|'inst_ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_rules'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'ipv4'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv4_network_rules'
op|'='
name|'len'
op|'('
name|'ipv4'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv4'
op|')'
op|'-'
name|'ipv4_len'
newline|'\n'
name|'ipv6_network_rules'
op|'='
name|'len'
op|'('
name|'ipv6'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv6'
op|')'
op|'-'
name|'ipv6_len'
newline|'\n'
comment|'# Extra rules are for the DHCP request'
nl|'\n'
name|'rules'
op|'='
op|'('
name|'ipv4_rules_per_addr'
op|'*'
name|'ipv4_addr_per_network'
op|'*'
nl|'\n'
name|'networks_count'
op|')'
op|'+'
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ipv4_network_rules'
op|','
name|'rules'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ipv6_network_rules'
op|','
nl|'\n'
name|'ipv6_rules_per_addr'
op|'*'
name|'ipv6_addr_per_network'
op|'*'
name|'networks_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_do_refresh_security_group_rules
dedent|''
name|'def'
name|'test_do_refresh_security_group_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'fw'
op|','
nl|'\n'
string|"'instance_rules'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'fw'
op|','
nl|'\n'
string|"'add_filters_for_instance'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|','
nl|'\n'
string|"'has_chain'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_rules'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance_ref'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_rules'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'has_chain'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance_ref'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_info'
op|'['
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
op|'('
name|'instance_ref'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'do_refresh_security_group_rules'
op|'('
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_do_refresh_security_group_rules_instance_gone
dedent|''
name|'def'
name|'test_do_refresh_security_group_rules_instance_gone'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance1'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'None'
op|','
name|'id'
op|'='
number|'1'
op|','
name|'uuid'
op|'='
string|"'fake-uuid1'"
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'None'
op|','
name|'id'
op|'='
number|'2'
op|','
name|'uuid'
op|'='
string|"'fake-uuid2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_info'
op|'='
op|'{'
number|'1'
op|':'
op|'('
name|'instance1'
op|','
string|"'netinfo1'"
op|')'
op|','
nl|'\n'
number|'2'
op|':'
op|'('
name|'instance2'
op|','
string|"'netinfo2'"
op|')'
op|'}'
newline|'\n'
name|'mock_filter'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'dict'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|','
op|'{'
string|"'filter'"
op|':'
name|'mock_filter'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_filter'
op|'.'
name|'has_chain'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'fw'
op|','
string|"'instance_rules'"
op|')'
name|'as'
name|'mock_ir'
op|':'
newline|'\n'
indent|'                '
name|'mock_ir'
op|'.'
name|'return_value'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'do_refresh_security_group_rules'
op|'('
string|"'secgroup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_ir'
op|'.'
name|'call_count'
op|')'
newline|'\n'
comment|'# NOTE(danms): Make sure that it is checking has_chain each time,'
nl|'\n'
comment|'# continuing to process all the instances, and never adding the'
nl|'\n'
comment|'# new chains back if has_chain() is False'
nl|'\n'
dedent|''
name|'mock_filter'
op|'.'
name|'has_chain'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
string|"'inst-1'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'inst-2'"
op|')'
op|']'
op|','
nl|'\n'
name|'any_order'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_filter'
op|'.'
name|'add_chain'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterDefineXML"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'InstanceList'
op|','
string|'"get_by_security_group_id"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|','
string|'"get_by_instance"'
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_undefines_nwfilter
name|'def'
name|'test_unfilter_instance_undefines_nwfilter'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_secrule'
op|','
nl|'\n'
name|'mock_instlist'
op|','
nl|'\n'
name|'mock_define'
op|','
nl|'\n'
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
name|'mock_define'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_secrule'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'original_filter_count'
op|'='
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# should undefine just the instance filter'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original_filter_count'
op|'-'
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FakeVirtAPI'
op|','
string|'"provider_fw_rule_get_all"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|','
string|'"get_by_instance"'
op|')'
newline|'\n'
DECL|member|test_provider_firewall_rules
name|'def'
name|'test_provider_firewall_rules'
op|'('
name|'self'
op|','
name|'mock_secrule'
op|','
name|'mock_fwrules'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_secrule'
op|'.'
name|'return_value'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupRuleList'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# setup basic instance data'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# FRAGILE: peeks at how the firewall names chains'
nl|'\n'
name|'chain_name'
op|'='
string|"'inst-%s'"
op|'%'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# create a firewall via setup_basic_filtering like libvirt_conn.spawn'
nl|'\n'
comment|'# should have a chain with 0 rules'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'provider'"
op|','
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'chains'
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# add a rule angd send the update message, check for 1 rule'
nl|'\n'
name|'mock_fwrules'
op|'.'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add another, refresh, and make sure number of rules goes to two'
nl|'\n'
name|'mock_fwrules'
op|'.'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'udp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create the instance filter and make sure it has a jump rule'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'inst_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
name|'chain_name'
op|']'
newline|'\n'
name|'jump_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'inst_rules'
name|'if'
string|"'-j'"
name|'in'
name|'rule'
op|'.'
name|'rule'
op|']'
newline|'\n'
name|'provjump_rules'
op|'='
op|'['
op|']'
newline|'\n'
comment|"# IptablesTable doesn't make rules unique internally"
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'jump_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'provider'"
name|'in'
name|'rule'
op|'.'
name|'rule'
name|'and'
name|'rule'
name|'not'
name|'in'
name|'provjump_rules'
op|':'
newline|'\n'
indent|'                '
name|'provjump_rules'
op|'.'
name|'append'
op|'('
name|'rule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'provjump_rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# remove a rule from the db, cast to compute to refresh rule'
nl|'\n'
name|'mock_fwrules'
op|'.'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'protocol'"
op|':'
string|"'udp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|','
string|"'libvirt'"
op|','
name|'fakelibvirt'
op|')'
newline|'\n'
DECL|class|NWFilterTestCase
name|'class'
name|'NWFilterTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NWFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fakelibvirt'
op|'.'
name|'FakeLibvirtFixture'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'NWFilterFirewall'
op|'('
nl|'\n'
name|'FakeVirtAPI'
op|'('
op|')'
op|','
nl|'\n'
name|'host'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_security_group
dedent|''
name|'def'
name|'_create_security_group'
op|'('
name|'self'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'secgroup'
op|'='
name|'objects'
op|'.'
name|'SecurityGroup'
op|'('
name|'id'
op|'='
number|'1'
op|','
nl|'\n'
name|'user_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'project_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'name'
op|'='
string|"'testgroup'"
op|','
nl|'\n'
name|'description'
op|'='
string|"'test group description'"
op|')'
newline|'\n'
nl|'\n'
name|'secgroup_list'
op|'='
name|'objects'
op|'.'
name|'SecurityGroupList'
op|'('
op|')'
newline|'\n'
name|'secgroup_list'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'secgroup'
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'security_groups'
op|'='
name|'secgroup_list'
newline|'\n'
nl|'\n'
name|'return'
name|'secgroup'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'('
nl|'\n'
name|'id'
op|'='
number|'7'
op|','
nl|'\n'
name|'uuid'
op|'='
string|'"74526555-9166-4893-a203-126bdcab0d67"'
op|','
nl|'\n'
name|'user_id'
op|'='
string|'"fake"'
op|','
nl|'\n'
name|'project_id'
op|'='
string|'"fake"'
op|','
nl|'\n'
name|'image_ref'
op|'='
string|"'155d900f-4e14-4e4c-a73d-069cbf4541e6'"
op|','
nl|'\n'
name|'instance_type_id'
op|'='
number|'1'
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'info_cache'
op|'='
name|'objects'
op|'.'
name|'InstanceInfoCache'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'.'
name|'info_cache'
op|'.'
name|'deleted'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterDefineXML"'
op|')'
newline|'\n'
DECL|member|test_creates_base_rule_first
name|'def'
name|'test_creates_base_rule_first'
op|'('
name|'self'
op|','
name|'mock_define'
op|')'
op|':'
newline|'\n'
comment|'# These come pre-defined by libvirt'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'defined_filters'
op|'='
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'f'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_define
dedent|''
name|'def'
name|'fake_define'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'filterref'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ref'
op|'='
name|'f'
op|'.'
name|'getAttribute'
op|'('
string|"'filter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'ref'
op|','
name|'self'
op|'.'
name|'defined_filters'
op|','
nl|'\n'
op|'('
string|"'%s referenced filter that does '"
op|'+'
nl|'\n'
string|"'not yet exist: %s'"
op|')'
op|'%'
op|'('
name|'name'
op|','
name|'ref'
op|')'
op|')'
newline|'\n'
name|'dependencies'
op|'='
op|'['
name|'ref'
op|']'
op|'+'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'ref'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'+='
name|'dependencies'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'defined_filters'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_define'
op|'.'
name|'side_effect'
op|'='
name|'fake_define'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_security_group'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_ensure_all_called
name|'def'
name|'_ensure_all_called'
op|'('
name|'mac'
op|','
name|'allow_dhcp'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_filter'
op|'='
string|"'nova-instance-%s-%s'"
op|'%'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mac'
op|'.'
name|'translate'
op|'('
op|'{'
name|'ord'
op|'('
string|"':'"
op|')'
op|':'
name|'None'
op|'}'
op|')'
op|')'
newline|'\n'
name|'requiredlist'
op|'='
op|'['
string|"'no-arp-spoofing'"
op|','
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-mac-spoofing'"
op|']'
newline|'\n'
name|'required_not_list'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
name|'allow_dhcp'
op|':'
newline|'\n'
indent|'                '
name|'requiredlist'
op|'.'
name|'append'
op|'('
string|"'allow-dhcp-server'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'required_not_list'
op|'.'
name|'append'
op|'('
string|"'allow-dhcp-server'"
op|')'
newline|'\n'
dedent|''
name|'for'
name|'required'
name|'in'
name|'requiredlist'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'required'
op|','
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'instance_filter'
op|']'
op|','
nl|'\n'
string|'"Instance\'s filter does not include %s"'
op|'%'
nl|'\n'
name|'required'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'required_not'
name|'in'
name|'required_not_list'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'required_not'
op|','
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'instance_filter'
op|']'
op|','
nl|'\n'
string|'"Instance filter includes %s"'
op|'%'
name|'required_not'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# since there is one (network_info) there is one vif'
nl|'\n'
comment|"# pass this vif's mac to _ensure_all_called()"
nl|'\n'
comment|'# to set the instance_filter properly'
nl|'\n'
name|'mac'
op|'='
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
string|"'1.1.1.1'"
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'allow_dhcp'
op|'='
name|'True'
newline|'\n'
name|'_ensure_all_called'
op|'('
name|'mac'
op|','
name|'allow_dhcp'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'allow_dhcp'
op|'='
name|'False'
newline|'\n'
name|'_ensure_all_called'
op|'('
name|'mac'
op|','
name|'allow_dhcp'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterDefineXML"'
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_undefines_nwfilters
name|'def'
name|'test_unfilter_instance_undefines_nwfilters'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_define'
op|','
nl|'\n'
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
name|'mock_define'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_security_group'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'original_filter_count'
op|'='
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original_filter_count'
op|'-'
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'greenthread'
op|','
string|"'sleep'"
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_retry_and_error
name|'def'
name|'test_unfilter_instance_retry_and_error'
op|'('
name|'self'
op|','
name|'mock_sleep'
op|','
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
comment|"# Tests that we try to undefine the network filter when it's in use"
nl|'\n'
comment|'# until we hit a timeout. We try two times and sleep once in between.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'live_migration_retry_count'
op|'='
number|'2'
op|')'
newline|'\n'
name|'in_use'
op|'='
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'nwfilter is in use'"
op|')'
newline|'\n'
name|'in_use'
op|'.'
name|'err'
op|'='
op|'('
name|'fakelibvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|','
op|')'
newline|'\n'
name|'mock_undefine'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'in_use'
op|')'
newline|'\n'
name|'fakefilter'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'undefine'
op|'='
name|'mock_undefine'
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'return_value'
op|'='
name|'fakefilter'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|','
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|','
nl|'\n'
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_lookup'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_undefine'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'mock_sleep'
op|'.'
name|'assert_called_once_with'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'greenthread'
op|','
string|"'sleep'"
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_retry_not_found
name|'def'
name|'test_unfilter_instance_retry_not_found'
op|'('
name|'self'
op|','
name|'mock_sleep'
op|','
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
comment|'# Tests that we exit if the nw filter is not found.'
nl|'\n'
indent|'        '
name|'in_use'
op|'='
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'nwfilter is in use'"
op|')'
newline|'\n'
name|'in_use'
op|'.'
name|'err'
op|'='
op|'('
name|'fakelibvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|','
op|')'
newline|'\n'
name|'not_found'
op|'='
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'no nwfilter with matching name'"
op|')'
newline|'\n'
name|'not_found'
op|'.'
name|'err'
op|'='
op|'('
name|'fakelibvirt'
op|'.'
name|'VIR_ERR_NO_NWFILTER'
op|','
op|')'
newline|'\n'
name|'mock_undefine'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'side_effect'
op|'='
op|'('
name|'in_use'
op|','
name|'not_found'
op|')'
op|')'
newline|'\n'
name|'fakefilter'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'undefine'
op|'='
name|'mock_undefine'
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'return_value'
op|'='
name|'fakefilter'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_lookup'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_undefine'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'mock_sleep'
op|'.'
name|'assert_called_once_with'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'greenthread'
op|','
string|"'sleep'"
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_retry_and_pass
name|'def'
name|'test_unfilter_instance_retry_and_pass'
op|'('
name|'self'
op|','
name|'mock_sleep'
op|','
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
comment|'# Tests that we retry on in-use error but pass if undefine() works'
nl|'\n'
comment|'# while looping.'
nl|'\n'
indent|'        '
name|'in_use'
op|'='
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'nwfilter is in use'"
op|')'
newline|'\n'
name|'in_use'
op|'.'
name|'err'
op|'='
op|'('
name|'fakelibvirt'
op|'.'
name|'VIR_ERR_OPERATION_INVALID'
op|','
op|')'
newline|'\n'
name|'mock_undefine'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'side_effect'
op|'='
op|'('
name|'in_use'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
name|'fakefilter'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'undefine'
op|'='
name|'mock_undefine'
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'return_value'
op|'='
name|'fakefilter'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_lookup'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'mock_undefine'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'mock_sleep'
op|'.'
name|'assert_called_once_with'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_redefining_nwfilters
dedent|''
name|'def'
name|'test_redefining_nwfilters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_security_group'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterDefineXML"'
op|')'
newline|'\n'
DECL|member|test_nwfilter_parameters
name|'def'
name|'test_nwfilter_parameters'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_define'
op|','
nl|'\n'
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
name|'mock_define'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_security_group'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'vif'
op|'='
name|'network_info'
op|'['
number|'0'
op|']'
newline|'\n'
name|'nic_id'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'instance_filter_name'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'nic_id'
op|')'
newline|'\n'
name|'f'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'instance_filter_name'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'f'
op|'.'
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'fref'
name|'in'
name|'tree'
op|'.'
name|'findall'
op|'('
string|"'filterref'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'parameters'
op|'='
name|'fref'
op|'.'
name|'findall'
op|'('
string|"'./parameter'"
op|')'
newline|'\n'
name|'for'
name|'parameter'
name|'in'
name|'parameters'
op|':'
newline|'\n'
indent|'                '
name|'subnet_v4'
op|','
name|'subnet_v6'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
newline|'\n'
name|'if'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'IP'"
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_ipv4_like'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
nl|'\n'
string|"'192.168'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'DHCPSERVER'"
op|':'
newline|'\n'
indent|'                    '
name|'dhcp_server'
op|'='
name|'subnet_v4'
op|'.'
name|'get'
op|'('
string|"'dhcp_server'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'dhcp_server'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'RASERVER'"
op|':'
newline|'\n'
indent|'                    '
name|'ra_server'
op|'='
name|'subnet_v6'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
op|'+'
string|'"/128"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'ra_server'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'PROJNET'"
op|':'
newline|'\n'
indent|'                    '
name|'ipv4_cidr'
op|'='
name|'subnet_v4'
op|'['
string|"'cidr'"
op|']'
newline|'\n'
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'ipv4_cidr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'net'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'PROJMASK'"
op|':'
newline|'\n'
indent|'                    '
name|'ipv4_cidr'
op|'='
name|'subnet_v4'
op|'['
string|"'cidr'"
op|']'
newline|'\n'
name|'net'
op|','
name|'mask'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_mask'
op|'('
name|'ipv4_cidr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'mask'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'PROJNET6'"
op|':'
newline|'\n'
indent|'                    '
name|'ipv6_cidr'
op|'='
name|'subnet_v6'
op|'['
string|"'cidr'"
op|']'
newline|'\n'
name|'net'
op|','
name|'prefix'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
name|'ipv6_cidr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'net'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|'=='
string|"'PROJMASK6'"
op|':'
newline|'\n'
indent|'                    '
name|'ipv6_cidr'
op|'='
name|'subnet_v6'
op|'['
string|"'cidr'"
op|']'
newline|'\n'
name|'net'
op|','
name|'prefix'
op|'='
name|'netutils'
op|'.'
name|'get_net_and_prefixlen'
op|'('
name|'ipv6_cidr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parameter'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
name|'prefix'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'exception'
op|'.'
name|'InvalidParameterValue'
op|'('
string|"'unknown parameter '"
nl|'\n'
string|"'in filter'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterLookupByName"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"nwfilterDefineXML"'
op|')'
newline|'\n'
DECL|member|test_multinic_base_filter_selection
name|'def'
name|'test_multinic_base_filter_selection'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_define'
op|','
nl|'\n'
name|'mock_lookup'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'mock_lookup'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
name|'mock_define'
op|'.'
name|'side_effect'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_security_group'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|','
number|'2'
op|')'
newline|'\n'
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'dhcp_server'"
op|']'
op|'='
string|"'1.1.1.1'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|assert_filterref
name|'def'
name|'assert_filterref'
op|'('
name|'instance'
op|','
name|'vif'
op|','
name|'expected'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'expected'
name|'or'
op|'['
op|']'
newline|'\n'
name|'nic_id'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|'.'
name|'replace'
op|'('
string|"':'"
op|','
string|"''"
op|')'
newline|'\n'
name|'filter_name'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_instance_filter_name'
op|'('
name|'instance'
op|','
name|'nic_id'
op|')'
newline|'\n'
name|'f'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'filter_name'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'f'
op|'.'
name|'xml'
op|')'
newline|'\n'
name|'frefs'
op|'='
op|'['
name|'fr'
op|'.'
name|'get'
op|'('
string|"'filter'"
op|')'
name|'for'
name|'fr'
name|'in'
name|'tree'
op|'.'
name|'findall'
op|'('
string|"'filterref'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'expected'
op|')'
op|','
name|'set'
op|'('
name|'frefs'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'assert_filterref'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'expected'
op|'='
op|'['
string|"'nova-base'"
op|']'
op|')'
newline|'\n'
name|'assert_filterref'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'expected'
op|'='
op|'['
string|"'nova-nodhcp'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'LOG'
op|','
string|"'debug'"
op|')'
newline|'\n'
DECL|member|test_get_filter_uuid_unicode_exception_logging
name|'def'
name|'test_get_filter_uuid_unicode_exception_logging'
op|'('
name|'self'
op|','
name|'debug'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_conn'
op|','
string|"'nwfilterLookupByName'"
op|')'
name|'as'
name|'look'
op|':'
newline|'\n'
indent|'            '
name|'look'
op|'.'
name|'side_effect'
op|'='
name|'fakelibvirt'
op|'.'
name|'libvirtError'
op|'('
string|'u"\\U0001F4A9"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_get_filter_uuid'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'debug'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'u"Cannot find UUID for filter \'%(name)s\': \'%(e)s\'"'
op|','
nl|'\n'
name|'debug'
op|'.'
name|'call_args_list'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

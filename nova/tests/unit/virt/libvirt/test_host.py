begin_unit
comment|'#    Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'#    Copyright 2012 University Of Minho'
nl|'\n'
comment|'#    Copyright 2014 Red Hat, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenthread'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'fakelibvirt'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'event'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'host'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'libvirt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|libvirt
indent|'    '
name|'libvirt'
op|'='
name|'fakelibvirt'
newline|'\n'
dedent|''
name|'host'
op|'.'
name|'libvirt'
op|'='
name|'libvirt'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostTestCase
name|'class'
name|'HostTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'HostTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fakelibvirt'
op|'.'
name|'FakeLibvirtFixture'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"registerCloseCallback"'
op|')'
newline|'\n'
DECL|member|test_close_callback
name|'def'
name|'test_close_callback'
op|'('
name|'self'
op|','
name|'mock_close'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'close_callback'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|set_close_callback
name|'def'
name|'set_close_callback'
op|'('
name|'cb'
op|','
name|'opaque'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'close_callback'
op|'='
name|'cb'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_close'
op|'.'
name|'side_effect'
op|'='
name|'set_close_callback'
newline|'\n'
comment|'# verify that the driver registers for the close callback'
nl|'\n'
name|'self'
op|'.'
name|'host'
op|'.'
name|'get_connection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'close_callback'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"registerCloseCallback"'
op|')'
newline|'\n'
DECL|member|test_close_callback_bad_signature
name|'def'
name|'test_close_callback_bad_signature'
op|'('
name|'self'
op|','
name|'mock_close'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Validates that a connection to libvirt exist,\n           even when registerCloseCallback method has a different\n           number of arguments in the libvirt python library.\n        '''"
newline|'\n'
name|'mock_close'
op|'.'
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'dd'"
op|')'
newline|'\n'
name|'connection'
op|'='
name|'self'
op|'.'
name|'host'
op|'.'
name|'get_connection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'connection'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"registerCloseCallback"'
op|')'
newline|'\n'
DECL|member|test_close_callback_not_defined
name|'def'
name|'test_close_callback_not_defined'
op|'('
name|'self'
op|','
name|'mock_close'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Validates that a connection to libvirt exist,\n           even when registerCloseCallback method missing from\n           the libvirt python library.\n        '''"
newline|'\n'
name|'mock_close'
op|'.'
name|'side_effect'
op|'='
name|'AttributeError'
op|'('
string|"'dd'"
op|')'
newline|'\n'
nl|'\n'
name|'connection'
op|'='
name|'self'
op|'.'
name|'host'
op|'.'
name|'get_connection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'connection'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"getLibVersion"'
op|')'
newline|'\n'
DECL|member|test_broken_connection
name|'def'
name|'test_broken_connection'
op|'('
name|'self'
op|','
name|'mock_ver'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'error'
op|','
name|'domain'
op|')'
name|'in'
op|'('
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
op|','
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|')'
op|','
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
op|','
name|'libvirt'
op|'.'
name|'VIR_FROM_RPC'
op|')'
op|','
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'VIR_ERR_INTERNAL_ERROR'
op|','
name|'libvirt'
op|'.'
name|'VIR_FROM_RPC'
op|')'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'conn'
op|'='
name|'self'
op|'.'
name|'host'
op|'.'
name|'_connect'
op|'('
string|'"qemu:///system"'
op|','
name|'False'
op|')'
newline|'\n'
name|'mock_ver'
op|'.'
name|'side_effect'
op|'='
name|'fakelibvirt'
op|'.'
name|'make_libvirtError'
op|'('
nl|'\n'
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
string|'"Connection broken"'
op|','
nl|'\n'
name|'error_code'
op|'='
name|'error'
op|','
nl|'\n'
name|'error_domain'
op|'='
name|'domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'host'
op|'.'
name|'_test_connection'
op|'('
name|'conn'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'host'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_connect_auth_cb_exception
name|'def'
name|'test_connect_auth_cb_exception'
op|'('
name|'self'
op|','
name|'log_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'creds'
op|'='
name|'dict'
op|'('
name|'authname'
op|'='
string|"'nova'"
op|','
name|'password'
op|'='
string|"'verybadpass'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'host'
op|'.'
name|'_connect_auth_cb'
op|','
name|'creds'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'log_mock'
op|'.'
name|'method_calls'
op|')'
op|','
nl|'\n'
string|"'LOG should not be used in _connect_auth_cb.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_event_dispatch
dedent|''
name|'def'
name|'test_event_dispatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Validate that the libvirt self-pipe for forwarding'
nl|'\n'
comment|'# events between threads is working sanely'
nl|'\n'
DECL|function|handler
indent|'        '
name|'def'
name|'handler'
op|'('
name|'event'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'got_events'
op|'.'
name|'append'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'handler'
op|')'
newline|'\n'
name|'got_events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'hostimpl'
op|'.'
name|'_init_events_pipe'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'event1'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STARTED'
op|')'
newline|'\n'
name|'event2'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_PAUSED'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_queue_event'
op|'('
name|'event1'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_queue_event'
op|'('
name|'event2'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_dispatch_events'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'want_events'
op|'='
op|'['
name|'event1'
op|','
name|'event2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'want_events'
op|','
name|'got_events'
op|')'
newline|'\n'
nl|'\n'
name|'event3'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_RESUMED'
op|')'
newline|'\n'
name|'event4'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
nl|'\n'
name|'hostimpl'
op|'.'
name|'_queue_event'
op|'('
name|'event3'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_queue_event'
op|'('
name|'event4'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_dispatch_events'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'want_events'
op|'='
op|'['
name|'event1'
op|','
name|'event2'
op|','
name|'event3'
op|','
name|'event4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'want_events'
op|','
name|'got_events'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_event_lifecycle
dedent|''
name|'def'
name|'test_event_lifecycle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'got_events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Validate that libvirt events are correctly translated'
nl|'\n'
comment|'# to Nova events'
nl|'\n'
DECL|function|handler
name|'def'
name|'handler'
op|'('
name|'event'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'got_events'
op|'.'
name|'append'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'handler'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'hostimpl'
op|'.'
name|'get_connection'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'hostimpl'
op|'.'
name|'_init_events_pipe'
op|'('
op|')'
newline|'\n'
name|'fake_dom_xml'
op|'='
string|'"""\n                <domain type=\'kvm\'>\n                  <uuid>cef19ce0-0ca2-11df-855d-b19fbce37686</uuid>\n                  <devices>\n                    <disk type=\'file\'>\n                      <source file=\'filename\'/>\n                    </disk>\n                  </devices>\n                </domain>\n            """'
newline|'\n'
name|'dom'
op|'='
name|'fakelibvirt'
op|'.'
name|'Domain'
op|'('
name|'conn'
op|','
nl|'\n'
name|'fake_dom_xml'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'hostimpl'
op|'.'
name|'_event_lifecycle_callback'
op|'('
name|'conn'
op|','
nl|'\n'
name|'dom'
op|','
nl|'\n'
name|'libvirt'
op|'.'
name|'VIR_DOMAIN_EVENT_STOPPED'
op|','
nl|'\n'
number|'0'
op|','
nl|'\n'
name|'hostimpl'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_dispatch_events'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'got_events'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'got_events'
op|'['
number|'0'
op|']'
op|','
name|'event'
op|'.'
name|'LifecycleEvent'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got_events'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|','
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'got_events'
op|'['
number|'0'
op|']'
op|'.'
name|'transition'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_event_emit_delayed_call_now
dedent|''
name|'def'
name|'test_event_emit_delayed_call_now'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'got_events'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|handler
name|'def'
name|'handler'
op|'('
name|'event'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'got_events'
op|'.'
name|'append'
op|'('
name|'event'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"qemu:///system"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'handler'
op|')'
newline|'\n'
name|'ev'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_event_emit_delayed'
op|'('
name|'ev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'got_events'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ev'
op|','
name|'got_events'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'greenthread'
op|','
string|"'spawn_after'"
op|')'
newline|'\n'
DECL|member|test_event_emit_delayed_call_delayed
name|'def'
name|'test_event_emit_delayed_call_delayed'
op|'('
name|'self'
op|','
name|'spawn_after_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"xen:///"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'lambda'
name|'e'
op|':'
name|'None'
op|')'
newline|'\n'
name|'ev'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
op|','
nl|'\n'
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_event_emit_delayed'
op|'('
name|'ev'
op|')'
newline|'\n'
name|'spawn_after_mock'
op|'.'
name|'assert_called_once_with'
op|'('
number|'15'
op|','
name|'hostimpl'
op|'.'
name|'_event_emit'
op|','
name|'ev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'greenthread'
op|','
string|"'spawn_after'"
op|')'
newline|'\n'
DECL|member|test_event_emit_delayed_call_delayed_pending
name|'def'
name|'test_event_emit_delayed_call_delayed_pending'
op|'('
name|'self'
op|','
name|'spawn_after_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"xen:///"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'lambda'
name|'e'
op|':'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'uuid'
op|'='
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_events_delayed'
op|'['
name|'uuid'
op|']'
op|'='
name|'None'
newline|'\n'
name|'ev'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
name|'uuid'
op|','
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STOPPED'
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_event_emit_delayed'
op|'('
name|'ev'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'spawn_after_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_event_delayed_cleanup
dedent|''
name|'def'
name|'test_event_delayed_cleanup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostimpl'
op|'='
name|'host'
op|'.'
name|'Host'
op|'('
string|'"xen:///"'
op|','
nl|'\n'
name|'lifecycle_event_handler'
op|'='
name|'lambda'
name|'e'
op|':'
name|'None'
op|')'
newline|'\n'
name|'uuid'
op|'='
string|'"cef19ce0-0ca2-11df-855d-b19fbce37686"'
newline|'\n'
name|'ev'
op|'='
name|'event'
op|'.'
name|'LifecycleEvent'
op|'('
nl|'\n'
name|'uuid'
op|','
name|'event'
op|'.'
name|'EVENT_LIFECYCLE_STARTED'
op|')'
newline|'\n'
name|'gt_mock'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_events_delayed'
op|'['
name|'uuid'
op|']'
op|'='
name|'gt_mock'
newline|'\n'
name|'hostimpl'
op|'.'
name|'_event_delayed_cleanup'
op|'('
name|'ev'
op|')'
newline|'\n'
name|'gt_mock'
op|'.'
name|'cancel'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'uuid'
op|','
name|'hostimpl'
op|'.'
name|'_events_delayed'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"domainEventRegisterAny"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'host'
op|'.'
name|'Host'
op|','
string|'"_connect"'
op|')'
newline|'\n'
DECL|member|test_get_connection_serial
name|'def'
name|'test_get_connection_serial'
op|'('
name|'self'
op|','
name|'mock_conn'
op|','
name|'mock_event'
op|')'
op|':'
newline|'\n'
DECL|function|get_conn_currency
indent|'        '
name|'def'
name|'get_conn_currency'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'.'
name|'get_connection'
op|'('
op|')'
op|'.'
name|'getLibVersion'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|connect_with_block
dedent|''
name|'def'
name|'connect_with_block'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
comment|'# enough to allow another connect to run'
nl|'\n'
indent|'            '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connect_calls'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'fakelibvirt'
op|'.'
name|'openAuth'
op|'('
string|'"qemu:///system"'
op|','
nl|'\n'
op|'['
op|'['
op|']'
op|','
name|'lambda'
op|':'
number|'1'
op|','
name|'None'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_register
dedent|''
name|'def'
name|'fake_register'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_calls'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connect_calls'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'register_calls'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_conn'
op|'.'
name|'side_effect'
op|'='
name|'connect_with_block'
newline|'\n'
name|'mock_event'
op|'.'
name|'side_effect'
op|'='
name|'fake_register'
newline|'\n'
nl|'\n'
comment|'# call serially'
nl|'\n'
name|'get_conn_currency'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'get_conn_currency'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'connect_calls'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'register_calls'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'fakelibvirt'
op|'.'
name|'virConnect'
op|','
string|'"domainEventRegisterAny"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'host'
op|'.'
name|'Host'
op|','
string|'"_connect"'
op|')'
newline|'\n'
DECL|member|test_get_connection_concurrency
name|'def'
name|'test_get_connection_concurrency'
op|'('
name|'self'
op|','
name|'mock_conn'
op|','
name|'mock_event'
op|')'
op|':'
newline|'\n'
DECL|function|get_conn_currency
indent|'        '
name|'def'
name|'get_conn_currency'
op|'('
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host'
op|'.'
name|'get_connection'
op|'('
op|')'
op|'.'
name|'getLibVersion'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|connect_with_block
dedent|''
name|'def'
name|'connect_with_block'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
comment|'# enough to allow another connect to run'
nl|'\n'
indent|'            '
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connect_calls'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'fakelibvirt'
op|'.'
name|'openAuth'
op|'('
string|'"qemu:///system"'
op|','
nl|'\n'
op|'['
op|'['
op|']'
op|','
name|'lambda'
op|':'
number|'1'
op|','
name|'None'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_register
dedent|''
name|'def'
name|'fake_register'
op|'('
op|'*'
name|'a'
op|','
op|'**'
name|'k'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'register_calls'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'connect_calls'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'register_calls'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'mock_conn'
op|'.'
name|'side_effect'
op|'='
name|'connect_with_block'
newline|'\n'
name|'mock_event'
op|'.'
name|'side_effect'
op|'='
name|'fake_register'
newline|'\n'
nl|'\n'
comment|'# call concurrently'
nl|'\n'
name|'thr1'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'get_conn_currency'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'thr2'
op|'='
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'get_conn_currency'
op|','
name|'self'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
comment|'# let threads run'
nl|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'thr1'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'thr2'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'connect_calls'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'register_calls'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

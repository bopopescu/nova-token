begin_unit
comment|'# Copyright 2015 Red Hat, Inc.'
nl|'\n'
comment|'# Copyright 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for the ironic driver."""'
newline|'\n'
nl|'\n'
name|'from'
name|'ironicclient'
name|'import'
name|'exc'
name|'as'
name|'ironic_exception'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_service'
name|'import'
name|'loopingcall'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'testtools'
op|'.'
name|'matchers'
name|'import'
name|'HasLength'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'metadata'
name|'import'
name|'base'
name|'as'
name|'instance_metadata'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
name|'as'
name|'nova_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'utils'
name|'as'
name|'ironic_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'configdrive'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'hardware'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'client_wrapper'
name|'as'
name|'cw'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'driver'
name|'as'
name|'ironic_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'ironic_states'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
DECL|variable|IRONIC_FLAGS
name|'IRONIC_FLAGS'
op|'='
name|'dict'
op|'('
nl|'\n'
DECL|variable|api_version
name|'api_version'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|group
name|'group'
op|'='
string|"'ironic'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FAKE_CLIENT
name|'FAKE_CLIENT'
op|'='
name|'ironic_utils'
op|'.'
name|'FakeClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeClientWrapper
name|'class'
name|'FakeClientWrapper'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|')'
op|':'
newline|'\n'
DECL|member|_get_client
indent|'    '
name|'def'
name|'_get_client'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FAKE_CLIENT'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeLoopingCall
dedent|''
dedent|''
name|'class'
name|'FakeLoopingCall'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wait'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start'
op|'.'
name|'return_value'
op|'='
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_properties
dedent|''
dedent|''
name|'def'
name|'_get_properties'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
string|"'cpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'cpu_arch'"
op|':'
string|"'x86_64'"
op|','
nl|'\n'
string|"'capabilities'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_instance_info
dedent|''
name|'def'
name|'_get_instance_info'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'1024'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
number|'10'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_stats
dedent|''
name|'def'
name|'_get_stats'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
string|"'cpu_arch'"
op|':'
string|"'x86_64'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FAKE_CLIENT_WRAPPER
dedent|''
name|'FAKE_CLIENT_WRAPPER'
op|'='
name|'FakeClientWrapper'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|','
string|"'IronicClientWrapper'"
op|','
name|'lambda'
op|'*'
name|'_'
op|':'
name|'FAKE_CLIENT_WRAPPER'
op|')'
newline|'\n'
DECL|class|IronicDriverTestCase
name|'class'
name|'IronicDriverTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|','
string|"'IronicClientWrapper'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'_'
op|':'
name|'FAKE_CLIENT_WRAPPER'
op|')'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IronicDriverTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
op|'**'
name|'IRONIC_FLAGS'
op|')'
newline|'\n'
nl|'\n'
comment|'# set client log config to exercise the code that manipulates it'
nl|'\n'
name|'CONF'
op|'.'
name|'set_override'
op|'('
string|"'client_log_level'"
op|','
string|"'DEBUG'"
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'virtapi'
op|'='
name|'fake'
op|'.'
name|'FakeVirtAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# mock retries configs to avoid sleeps and make tests run quicker'
nl|'\n'
name|'CONF'
op|'.'
name|'set_default'
op|'('
string|"'api_max_retries'"
op|','
name|'default'
op|'='
number|'1'
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'set_default'
op|'('
string|"'api_retry_interval'"
op|','
name|'default'
op|'='
number|'0'
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_public_api_signatures
dedent|''
name|'def'
name|'test_public_api_signatures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertPublicAPISignatures'
op|'('
name|'driver'
op|'.'
name|'ComputeDriver'
op|'('
name|'None'
op|')'
op|','
name|'self'
op|'.'
name|'driver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_driver_loading
dedent|''
name|'def'
name|'test_validate_driver_loading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_driver_capabilities
dedent|''
name|'def'
name|'test_driver_capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|"'has_imagecache'"
op|']'
op|','
nl|'\n'
string|"'Driver capabilities for \\'has_imagecache\\''"
nl|'\n'
string|"'is invalid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'capabilities'
op|'['
string|"'supports_recreate'"
op|']'
op|','
nl|'\n'
string|"'Driver capabilities for \\'supports_recreate\\''"
nl|'\n'
string|"'is invalid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__get_hypervisor_type
dedent|''
name|'def'
name|'test__get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ironic'"
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_get_hypervisor_type'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__get_hypervisor_version
dedent|''
name|'def'
name|'test__get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_get_hypervisor_version'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test__validate_instance_and_node
name|'def'
name|'test__validate_instance_and_node'
op|'('
name|'self'
op|','
name|'mock_gbiui'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'ironicclient'
op|'='
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_gbiui'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'result'
op|'='
name|'ironic_driver'
op|'.'
name|'_validate_instance_and_node'
op|'('
name|'ironicclient'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'uuid'
op|','
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test__validate_instance_and_node_failed
name|'def'
name|'test__validate_instance_and_node_failed'
op|'('
name|'self'
op|','
name|'mock_gbiui'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ironicclient'
op|'='
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|'('
op|')'
newline|'\n'
name|'mock_gbiui'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'ironic_driver'
op|'.'
name|'_validate_instance_and_node'
op|','
nl|'\n'
name|'ironicclient'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__wait_for_active_pass
name|'def'
name|'test__wait_for_active_pass'
op|'('
name|'self'
op|','
name|'fake_validate'
op|','
name|'fake_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'DEPLOYING'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_active'
op|'('
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__wait_for_active_done
name|'def'
name|'test__wait_for_active_done'
op|'('
name|'self'
op|','
name|'fake_validate'
op|','
name|'fake_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_active'
op|','
nl|'\n'
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__wait_for_active_fail
name|'def'
name|'test__wait_for_active_fail'
op|'('
name|'self'
op|','
name|'fake_validate'
op|','
name|'fake_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'DEPLOYFAIL'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_active'
op|','
nl|'\n'
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
name|'fake_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'refresh'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|_wait_for_active_abort
name|'def'
name|'_wait_for_active_abort'
op|'('
name|'self'
op|','
name|'instance_params'
op|','
name|'fake_validate'
op|','
nl|'\n'
name|'fake_refresh'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
op|'**'
name|'instance_params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_active'
op|','
nl|'\n'
name|'FAKE_CLIENT'
op|','
name|'instance'
op|')'
newline|'\n'
comment|"# Assert _validate_instance_and_node wasn't called"
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'fake_validate'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'fake_refresh'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__wait_for_active_abort_deleting
dedent|''
name|'def'
name|'test__wait_for_active_abort_deleting'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_wait_for_active_abort'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'DELETING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__wait_for_active_abort_deleted
dedent|''
name|'def'
name|'test__wait_for_active_abort_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_wait_for_active_abort'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'DELETED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__wait_for_active_abort_error
dedent|''
name|'def'
name|'test__wait_for_active_abort_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_wait_for_active_abort'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__wait_for_power_state_pass
name|'def'
name|'test__wait_for_power_state_pass'
op|'('
name|'self'
op|','
name|'fake_validate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'target_power_state'
op|'='
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_power_state'
op|'('
nl|'\n'
name|'FAKE_CLIENT'
op|','
name|'instance'
op|','
string|"'fake message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_validate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__wait_for_power_state_ok
name|'def'
name|'test__wait_for_power_state_ok'
op|'('
name|'self'
op|','
name|'fake_validate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'target_power_state'
op|'='
name|'ironic_states'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'loopingcall'
op|'.'
name|'LoopingCallDone'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_wait_for_power_state'
op|','
nl|'\n'
name|'FAKE_CLIENT'
op|','
name|'instance'
op|','
string|"'fake message'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_validate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test__node_resource
dedent|''
name|'def'
name|'_test__node_resource'
op|'('
name|'self'
op|','
name|'has_inst_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'='
name|'_get_stats'
op|'('
op|')'
newline|'\n'
name|'if'
name|'has_inst_info'
op|':'
newline|'\n'
indent|'            '
name|'instance_info'
op|'='
name|'_get_instance_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance_info'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'instance_info'
op|'='
name|'instance_info'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'wantkeys'
op|'='
op|'['
string|'"hypervisor_hostname"'
op|','
string|'"hypervisor_type"'
op|','
nl|'\n'
string|'"hypervisor_version"'
op|','
string|'"cpu_info"'
op|','
nl|'\n'
string|'"vcpus"'
op|','
string|'"vcpus_used"'
op|','
nl|'\n'
string|'"memory_mb"'
op|','
string|'"memory_mb_used"'
op|','
nl|'\n'
string|'"local_gb"'
op|','
string|'"local_gb_used"'
op|','
nl|'\n'
string|'"disk_available_least"'
op|','
nl|'\n'
string|'"supported_instances"'
op|','
nl|'\n'
string|'"stats"'
op|','
nl|'\n'
string|'"numa_topology"'
op|']'
newline|'\n'
name|'wantkeys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'gotkeys'
op|'='
name|'result'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'gotkeys'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'wantkeys'
op|','
name|'gotkeys'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'has_inst_info'
op|':'
newline|'\n'
indent|'            '
name|'props_dict'
op|'='
name|'instance_info'
newline|'\n'
name|'expected_cpus'
op|'='
name|'instance_info'
op|'['
string|"'vcpus'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'props_dict'
op|'='
name|'props'
newline|'\n'
name|'expected_cpus'
op|'='
name|'props'
op|'['
string|"'cpus'"
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_cpus'
op|','
name|'result'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_cpus'
op|','
name|'result'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props_dict'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'result'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props_dict'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'result'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props_dict'
op|'['
string|"'local_gb'"
op|']'
op|','
name|'result'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props_dict'
op|'['
string|"'local_gb'"
op|']'
op|','
name|'result'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_uuid'
op|','
name|'result'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stats'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'result'
op|'['
string|"'numa_topology'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource
dedent|''
name|'def'
name|'test__node_resource'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test__node_resource'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_no_instance_info
dedent|''
name|'def'
name|'test__node_resource_no_instance_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test__node_resource'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_canonicalizes_arch
dedent|''
name|'def'
name|'test__node_resource_canonicalizes_arch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
string|"'i386'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'i686'"
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'i386'"
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|'['
string|"'cpu_arch'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_unknown_arch
dedent|''
name|'def'
name|'test__node_resource_unknown_arch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'del'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_exposes_capabilities
dedent|''
name|'def'
name|'test__node_resource_exposes_capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'capabilities'"
op|']'
op|'='
string|"'test:capability, test2:value2'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'stats'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'stats'
op|'.'
name|'get'
op|'('
string|"'capabilities'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'capability'"
op|','
name|'stats'
op|'.'
name|'get'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'value2'"
op|','
name|'stats'
op|'.'
name|'get'
op|'('
string|"'test2'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_no_capabilities
dedent|''
name|'def'
name|'test__node_resource_no_capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'capabilities'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|'.'
name|'get'
op|'('
string|"'capabilities'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_malformed_capabilities
dedent|''
name|'def'
name|'test__node_resource_malformed_capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'capabilities'"
op|']'
op|'='
string|"'test:capability,:no_key,no_val:'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'stats'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'capability'"
op|','
name|'stats'
op|'.'
name|'get'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_available
dedent|''
name|'def'
name|'test__node_resource_available'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'='
name|'_get_stats'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props'
op|'['
string|"'cpus'"
op|']'
op|','
name|'result'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'result'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props'
op|'['
string|"'local_gb'"
op|']'
op|','
name|'result'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_uuid'
op|','
name|'result'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stats'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
nl|'\n'
string|"'_node_resources_unavailable'"
op|')'
newline|'\n'
DECL|member|test__node_resource_unavailable_node_res
name|'def'
name|'test__node_resource_unavailable_node_res'
op|'('
name|'self'
op|','
name|'mock_res_unavail'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_res_unavail'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'='
name|'_get_stats'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'result'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_uuid'
op|','
name|'result'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stats'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
nl|'\n'
string|"'_node_resources_used'"
op|')'
newline|'\n'
DECL|member|test__node_resource_used_node_res
name|'def'
name|'test__node_resource_used_node_res'
op|'('
name|'self'
op|','
name|'mock_res_used'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_res_used'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'stats'
op|'='
name|'_get_stats'
op|'('
op|')'
newline|'\n'
name|'instance_info'
op|'='
name|'_get_instance_info'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|','
nl|'\n'
name|'instance_info'
op|'='
name|'instance_info'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'vcpus'"
op|']'
op|','
name|'result'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'vcpus'"
op|']'
op|','
name|'result'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'result'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'memory_mb'"
op|']'
op|','
name|'result'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'local_gb'"
op|']'
op|','
name|'result'
op|'['
string|"'local_gb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|'['
string|"'local_gb'"
op|']'
op|','
name|'result'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node_uuid'
op|','
name|'result'
op|'['
string|"'hypervisor_hostname'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'stats'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'stats'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test__parse_node_properties
name|'def'
name|'test__parse_node_properties'
op|'('
name|'self'
op|','
name|'mock_warning'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
comment|'# raw_cpu_arch is included because extra_specs filters do not'
nl|'\n'
comment|'# canonicalized the arch'
nl|'\n'
name|'props'
op|'['
string|"'raw_cpu_arch'"
op|']'
op|'='
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
newline|'\n'
name|'parsed'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_parse_node_properties'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'props'
op|','
name|'parsed'
op|')'
newline|'\n'
comment|"# Assert we didn't log any warning since all properties are"
nl|'\n'
comment|'# correct'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_warning'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test__parse_node_properties_bad_values
name|'def'
name|'test__parse_node_properties_bad_values'
op|'('
name|'self'
op|','
name|'mock_warning'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'cpus'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'props'
op|'['
string|"'memory_mb'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'props'
op|'['
string|"'local_gb'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
comment|'# raw_cpu_arch is included because extra_specs filters do not'
nl|'\n'
comment|'# canonicalized the arch'
nl|'\n'
name|'props'
op|'['
string|"'raw_cpu_arch'"
op|']'
op|'='
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
newline|'\n'
name|'parsed'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_parse_node_properties'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'expected_props'
op|'='
name|'props'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'expected_props'
op|'['
string|"'cpus'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_props'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_props'
op|'['
string|"'local_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'expected_props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_props'
op|','
name|'parsed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'mock_warning'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test__parse_node_instance_info
name|'def'
name|'test__parse_node_instance_info'
op|'('
name|'self'
op|','
name|'mock_warning'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'instance_info'
op|'='
name|'_get_instance_info'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_info'
op|'='
name|'instance_info'
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_parse_node_instance_info'
op|'('
name|'node'
op|','
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_info'
op|','
name|'parsed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_warning'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test__parse_node_instance_info_bad_values
name|'def'
name|'test__parse_node_instance_info_bad_values'
op|'('
name|'self'
op|','
name|'mock_warning'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'instance_info'
op|'='
name|'_get_instance_info'
op|'('
op|')'
newline|'\n'
name|'instance_info'
op|'['
string|"'vcpus'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'instance_info'
op|'['
string|"'memory_mb'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'instance_info'
op|'['
string|"'local_gb'"
op|']'
op|'='
string|"'bad-value'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_info'
op|'='
name|'instance_info'
op|')'
newline|'\n'
name|'parsed'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_parse_node_instance_info'
op|'('
name|'node'
op|','
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'vcpus'"
op|':'
name|'props'
op|'['
string|"'cpus'"
op|']'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
name|'props'
op|'['
string|"'memory_mb'"
op|']'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
name|'props'
op|'['
string|"'local_gb'"
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'parsed'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'mock_warning'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'LOG'
op|','
string|"'warning'"
op|')'
newline|'\n'
DECL|member|test__parse_node_properties_canonicalize_cpu_arch
name|'def'
name|'test__parse_node_properties_canonicalize_cpu_arch'
op|'('
name|'self'
op|','
name|'mock_warning'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
string|"'amd64'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
comment|'# raw_cpu_arch is included because extra_specs filters do not'
nl|'\n'
comment|'# canonicalized the arch'
nl|'\n'
name|'props'
op|'['
string|"'raw_cpu_arch'"
op|']'
op|'='
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
newline|'\n'
name|'parsed'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_parse_node_properties'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'expected_props'
op|'='
name|'props'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
comment|'# Make sure it cpu_arch was canonicalized'
nl|'\n'
name|'expected_props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
string|"'x86_64'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_props'
op|','
name|'parsed'
op|')'
newline|'\n'
comment|"# Assert we didn't log any warning since all properties are"
nl|'\n'
comment|'# correct'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_warning'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'prepare_instance_filter'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'setup_basic_filtering'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'apply_instance_filter'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test__start_firewall
name|'def'
name|'test__start_firewall'
op|'('
name|'self'
op|','
name|'mock_aif'
op|','
name|'mock_sbf'
op|','
name|'mock_pif'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_inst'
op|'='
string|"'fake-inst'"
newline|'\n'
name|'fake_net_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_start_firewall'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
nl|'\n'
name|'mock_aif'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
name|'mock_sbf'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
name|'mock_pif'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'unfilter_instance'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test__stop_firewall
name|'def'
name|'test__stop_firewall'
op|'('
name|'self'
op|','
name|'mock_ui'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_inst'
op|'='
string|"'fake-inst'"
newline|'\n'
name|'fake_net_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_stop_firewall'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
name|'mock_ui'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_inst'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_instance_exists
name|'def'
name|'test_instance_exists'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'node.get_by_instance_uuid'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_instance_exists_fail
name|'def'
name|'test_instance_exists_fail'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_call'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'node.get_by_instance_uuid'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_list_instances
name|'def'
name|'test_list_instances'
op|'('
name|'self'
op|','
name|'mock_inst_by_uuid'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'id'
op|'='
name|'i'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'nodes'
op|'.'
name|'append'
op|'('
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'instance_uuid'
op|'='
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_inst_by_uuid'
op|'.'
name|'side_effect'
op|'='
name|'instances'
newline|'\n'
name|'mock_call'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_with'
op|'('
string|'"node.list"'
op|','
name|'associated'
op|'='
name|'True'
op|','
name|'limit'
op|'='
number|'0'
op|')'
newline|'\n'
name|'expected_calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instances'
op|'['
number|'1'
op|']'
op|'.'
name|'uuid'
op|')'
op|']'
newline|'\n'
name|'mock_inst_by_uuid'
op|'.'
name|'assert_has_calls'
op|'('
name|'expected_calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'instance-00000000'"
op|','
string|"'instance-00000001'"
op|']'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'response'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_list_instances_fail
name|'def'
name|'test_list_instances_fail'
op|'('
name|'self'
op|','
name|'mock_inst_by_uuid'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_call'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_with'
op|'('
string|'"node.list"'
op|','
name|'associated'
op|'='
name|'True'
op|','
name|'limit'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_inst_by_uuid'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'response'
op|','
name|'HasLength'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_list_instance_uuids
name|'def'
name|'test_list_instance_uuids'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'num_nodes'
op|'='
number|'2'
newline|'\n'
name|'nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'num_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'.'
name|'append'
op|'('
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_call'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
name|'uuids'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_with'
op|'('
string|"'node.list'"
op|','
name|'associated'
op|'='
name|'True'
op|','
name|'limit'
op|'='
number|'0'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
name|'n'
op|'.'
name|'instance_uuid'
name|'for'
name|'n'
name|'in'
name|'nodes'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'uuids'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_node_is_available_empty_cache_empty_list
name|'def'
name|'test_node_is_available_empty_cache_empty_list'
op|'('
name|'self'
op|','
name|'mock_get'
op|','
nl|'\n'
name|'mock_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_list'
op|'.'
name|'assert_called_with'
op|'('
name|'detail'
op|'='
name|'True'
op|','
name|'limit'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_node_is_available_empty_cache
name|'def'
name|'test_node_is_available_empty_cache'
op|'('
name|'self'
op|','
name|'mock_get'
op|','
name|'mock_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
op|'['
name|'node'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'mock_list'
op|'.'
name|'assert_called_with'
op|'('
name|'detail'
op|'='
name|'True'
op|','
name|'limit'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_node_is_available_with_cache
name|'def'
name|'test_node_is_available_with_cache'
op|'('
name|'self'
op|','
name|'mock_get'
op|','
name|'mock_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
op|'['
name|'node'
op|']'
newline|'\n'
comment|'# populate the cache'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# prove that zero calls are made after populating cache'
nl|'\n'
name|'mock_list'
op|'.'
name|'reset_mock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_list'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resources_unavailable
dedent|''
name|'def'
name|'test__node_resources_unavailable'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_dicts'
op|'='
op|'['
nl|'\n'
comment|'# a node in maintenance /w no instance and power OFF'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'maintenance'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|'}'
op|','
nl|'\n'
comment|'# a node in maintenance /w no instance and ERROR power state'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'maintenance'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|'}'
op|','
nl|'\n'
comment|'# a node not in maintenance /w no instance and bad power state'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|'}'
op|','
nl|'\n'
comment|'# a node not in maintenance or bad power state, bad provision state'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'MANAGEABLE'
op|'}'
op|','
nl|'\n'
comment|'# a node in cleaning'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'CLEANING'
op|'}'
op|','
nl|'\n'
comment|'# a node in cleaning, waiting for a clean step to finish'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'CLEANWAIT'
op|'}'
op|','
nl|'\n'
comment|'# a node in deleting'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'DELETING'
op|'}'
op|','
nl|'\n'
comment|'# a node in deleted'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'DELETED'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|'**'
name|'n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resources_unavailable'
op|'('
name|'node'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'ok_state'
name|'in'
op|'('
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|','
name|'ironic_states'
op|'.'
name|'NOSTATE'
op|')'
op|':'
newline|'\n'
comment|'# these are both ok and should present as available'
nl|'\n'
indent|'            '
name|'avail_node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'power_state'
op|'='
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ok_state'
op|')'
newline|'\n'
name|'unavailable'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resources_unavailable'
op|'('
name|'avail_node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'unavailable'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resources_used
dedent|''
dedent|''
name|'def'
name|'test__node_resources_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_dicts'
op|'='
op|'['
nl|'\n'
comment|'# a node in maintenance /w instance and active'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'provision_state'"
op|':'
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|'**'
name|'n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resources_used'
op|'('
name|'node'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'unused_node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'AVAILABLE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resources_used'
op|'('
name|'unused_node'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
DECL|member|test_get_available_nodes
name|'def'
name|'test_get_available_nodes'
op|'('
name|'self'
op|','
name|'mock_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_dicts'
op|'='
op|'['
nl|'\n'
comment|'# a node in maintenance /w no instance and power OFF'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'maintenance'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|'}'
op|','
nl|'\n'
comment|'# a node /w instance and power ON'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|'}'
op|','
nl|'\n'
comment|'# a node not in maintenance /w no instance and bad power state'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'ERROR'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'nodes'
op|'='
op|'['
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|'**'
name|'n'
op|')'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|']'
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
name|'available_nodes'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
newline|'\n'
name|'expected_uuids'
op|'='
op|'['
name|'n'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected_uuids'
op|')'
op|','
name|'sorted'
op|'('
name|'available_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_node_resource'"
op|')'
newline|'\n'
DECL|member|test_get_available_resource
name|'def'
name|'test_get_available_resource'
op|'('
name|'self'
op|','
name|'mock_nr'
op|','
name|'mock_list'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'node_2'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_resource'
op|'='
string|"'fake-resource'"
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
comment|'# ensure cache gets populated without the node we want'
nl|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
op|'['
name|'node_2'
op|']'
newline|'\n'
name|'mock_nr'
op|'.'
name|'return_value'
op|'='
name|'fake_resource'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_resource'
op|','
name|'result'
op|')'
newline|'\n'
name|'mock_nr'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_node_resource'"
op|')'
newline|'\n'
DECL|member|test_get_available_resource_with_cache
name|'def'
name|'test_get_available_resource_with_cache'
op|'('
name|'self'
op|','
name|'mock_nr'
op|','
name|'mock_list'
op|','
nl|'\n'
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'fake_resource'
op|'='
string|"'fake-resource'"
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
op|'['
name|'node'
op|']'
newline|'\n'
name|'mock_nr'
op|'.'
name|'return_value'
op|'='
name|'fake_resource'
newline|'\n'
comment|'# populate the cache'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
name|'refresh'
op|'='
name|'True'
op|')'
newline|'\n'
name|'mock_list'
op|'.'
name|'reset_mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_resource'
op|','
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_list'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'mock_get'
op|'.'
name|'call_count'
op|')'
newline|'\n'
name|'mock_nr'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_info
name|'def'
name|'test_get_info'
op|'('
name|'self'
op|','
name|'mock_gbiu'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'properties'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'cpus'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'power_state'
op|'='
name|'ironic_states'
op|'.'
name|'POWER_ON'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'properties'
op|'='
name|'properties'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'power_state'
op|')'
newline|'\n'
nl|'\n'
name|'mock_gbiu'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
nl|'\n'
comment|'# ironic_states.POWER_ON should be mapped to'
nl|'\n'
comment|'# nova_states.RUNNING'
nl|'\n'
name|'memory_kib'
op|'='
name|'properties'
op|'['
string|"'memory_mb'"
op|']'
op|'*'
number|'1024'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
string|"'fake-context'"
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'nova_states'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
name|'max_mem_kb'
op|'='
name|'memory_kib'
op|','
nl|'\n'
name|'mem_kb'
op|'='
name|'memory_kib'
op|','
nl|'\n'
name|'num_cpu'
op|'='
name|'properties'
op|'['
string|"'cpus'"
op|']'
op|')'
op|','
nl|'\n'
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_info_http_not_found
name|'def'
name|'test_get_info_http_not_found'
op|'('
name|'self'
op|','
name|'mock_gbiu'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_gbiu'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hardware'
op|'.'
name|'InstanceInfo'
op|'('
name|'state'
op|'='
name|'nova_states'
op|'.'
name|'NOSTATE'
op|')'
op|','
nl|'\n'
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
DECL|member|test_macs_for_instance
name|'def'
name|'test_macs_for_instance'
op|'('
name|'self'
op|','
name|'mock_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
name|'port'
op|'.'
name|'address'
op|']'
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_macs_for_instance_http_not_found
name|'def'
name|'test_macs_for_instance_http_not_found'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_wait_for_active'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_add_driver_fields'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
DECL|member|_test_spawn
name|'def'
name|'_test_spawn'
op|'('
name|'self'
op|','
name|'mock_sf'
op|','
name|'mock_pvifs'
op|','
name|'mock_adf'
op|','
name|'mock_wait_active'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_looping'
op|','
name|'mock_save'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'fake_flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
name|'ephemeral_gb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'fake_flavor'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_adf'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
nl|'\n'
name|'test'
op|'.'
name|'MatchType'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'fake_flavor'
op|')'
newline|'\n'
name|'mock_pvifs'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_sf'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
nl|'\n'
string|"'active'"
op|','
name|'configdrive'
op|'='
name|'mock'
op|'.'
name|'ANY'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'instance'
op|'.'
name|'default_ephemeral_device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_save'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
name|'mock_looping'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_wait_active'
op|','
nl|'\n'
name|'FAKE_CLIENT_WRAPPER'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'fake_looping_call'
op|'.'
name|'start'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'interval'
op|'='
name|'CONF'
op|'.'
name|'ironic'
op|'.'
name|'api_retry_interval'
op|')'
newline|'\n'
name|'fake_looping_call'
op|'.'
name|'wait'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_generate_configdrive'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
DECL|member|test_spawn
name|'def'
name|'test_spawn'
op|'('
name|'self'
op|','
name|'mock_required_by'
op|','
name|'mock_configdrive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_test_spawn'
op|'('
op|')'
newline|'\n'
comment|'# assert configdrive was not generated'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_configdrive'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_generate_configdrive'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
DECL|member|test_spawn_with_configdrive
name|'def'
name|'test_spawn_with_configdrive'
op|'('
name|'self'
op|','
name|'mock_required_by'
op|','
name|'mock_configdrive'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_test_spawn'
op|'('
op|')'
newline|'\n'
comment|'# assert configdrive was generated'
nl|'\n'
name|'mock_configdrive'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
name|'mock'
op|'.'
name|'ANY'
op|','
nl|'\n'
name|'extra_md'
op|'='
op|'{'
op|'}'
op|','
name|'files'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_wait_for_active'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_add_driver_fields'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
DECL|member|test_spawn_destroyed_after_failure
name|'def'
name|'test_spawn_destroyed_after_failure'
op|'('
name|'self'
op|','
name|'mock_sf'
op|','
name|'mock_pvifs'
op|','
name|'mock_adf'
op|','
nl|'\n'
name|'mock_wait_active'
op|','
name|'mock_destroy'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'fake_flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
name|'ephemeral_gb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'fake_flavor'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
nl|'\n'
name|'deploy_exc'
op|'='
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'fake_looping_call'
op|'.'
name|'wait'
op|'.'
name|'side_effect'
op|'='
name|'deploy_exc'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_destroy'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__add_driver_fields_good
name|'def'
name|'test__add_driver_fields_good'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta_object'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_add_driver_fields'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'flavor'
op|')'
newline|'\n'
name|'expected_patch'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/image_source'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'image_meta'
op|'.'
name|'id'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/root_gb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'root_gb'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/swap_mb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'flavor'
op|'['
string|"'swap'"
op|']'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/display_name'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'instance'
op|'.'
name|'display_name'
op|','
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/vcpus'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'vcpus'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/memory_mb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'memory_mb'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/local_gb'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'node'
op|'.'
name|'properties'
op|'.'
name|'get'
op|'('
string|"'local_gb'"
op|','
number|'0'
op|')'
op|')'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_uuid'"
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'instance'
op|'.'
name|'uuid'
op|'}'
op|']'
newline|'\n'
name|'mock_update'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
name|'expected_patch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__add_driver_fields_fail
name|'def'
name|'test__add_driver_fields_fail'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_update'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'BadRequest'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta_object'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_add_driver_fields'
op|','
nl|'\n'
name|'node'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__cleanup_deploy_good_with_flavor
name|'def'
name|'test__cleanup_deploy_good_with_flavor'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
name|'extra_specs'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_cleanup_deploy'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'flavor'
op|')'
newline|'\n'
name|'expected_patch'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_uuid'"
op|','
string|"'op'"
op|':'
string|"'remove'"
op|'}'
op|']'
newline|'\n'
name|'mock_update'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
name|'expected_patch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__cleanup_deploy_instance_already_removed
name|'def'
name|'test__cleanup_deploy_instance_already_removed'
op|'('
name|'self'
op|','
name|'mock_update'
op|','
nl|'\n'
name|'mock_validate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_validate'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
nl|'\n'
name|'instance_id'
op|'='
string|"'fake-instance'"
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
name|'extra_specs'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_cleanup_deploy'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'flavor'
op|')'
newline|'\n'
comment|'# assert node.update is not called'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_update'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'mock_validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__cleanup_deploy_without_flavor
name|'def'
name|'test__cleanup_deploy_without_flavor'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
name|'extra_specs'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_cleanup_deploy'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'expected_patch'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_uuid'"
op|','
string|"'op'"
op|':'
string|"'remove'"
op|'}'
op|']'
newline|'\n'
name|'mock_update'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
name|'expected_patch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test__cleanup_deploy_fail
name|'def'
name|'test__cleanup_deploy_fail'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_update'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'BadRequest'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
name|'extra_specs'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_cleanup_deploy'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
DECL|member|test_spawn_node_driver_validation_fail
name|'def'
name|'test_spawn_node_driver_validation_fail'
op|'('
name|'self'
op|','
name|'mock_node'
op|','
nl|'\n'
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
nl|'\n'
name|'power'
op|'='
name|'False'
op|','
name|'deploy'
op|'='
name|'False'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ValidationError'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_cleanup_deploy'"
op|')'
newline|'\n'
DECL|member|test_spawn_node_prepare_for_deploy_fail
name|'def'
name|'test_spawn_node_prepare_for_deploy_fail'
op|'('
name|'self'
op|','
name|'mock_cleanup_deploy'
op|','
nl|'\n'
name|'mock_pvifs'
op|','
name|'mock_sf'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|TestException
name|'class'
name|'TestException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_sf'
op|'.'
name|'side_effect'
op|'='
name|'TestException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TestException'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_cleanup_deploy'
op|'.'
name|'assert_called_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
DECL|variable|flavor
name|'flavor'
op|'='
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_cleanup_deploy'"
op|')'
newline|'\n'
DECL|member|test_spawn_node_trigger_deploy_fail
name|'def'
name|'test_spawn_node_trigger_deploy_fail'
op|'('
name|'self'
op|','
name|'mock_cleanup_deploy'
op|','
nl|'\n'
name|'mock_pvifs'
op|','
name|'mock_sf'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_cleanup_deploy'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_cleanup_deploy'"
op|')'
newline|'\n'
DECL|member|test_spawn_node_trigger_deploy_fail2
name|'def'
name|'test_spawn_node_trigger_deploy_fail2'
op|'('
name|'self'
op|','
name|'mock_cleanup_deploy'
op|','
nl|'\n'
name|'mock_pvifs'
op|','
name|'mock_sf'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'BadRequest'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ironic_exception'
op|'.'
name|'BadRequest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_cleanup_deploy'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'flavor'
op|'='
name|'flavor'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
DECL|member|test_spawn_node_trigger_deploy_fail3
name|'def'
name|'test_spawn_node_trigger_deploy_fail3'
op|'('
name|'self'
op|','
name|'mock_destroy'
op|','
nl|'\n'
name|'mock_pvifs'
op|','
name|'mock_sf'
op|','
nl|'\n'
name|'mock_node'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'validate'
op|'.'
name|'return_value'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_validation'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'.'
name|'wait'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'BadRequest'
newline|'\n'
name|'fake_net_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ironic_exception'
op|'.'
name|'BadRequest'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|','
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|','
name|'fake_net_info'
op|')'
newline|'\n'
name|'mock_destroy'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
nl|'\n'
name|'fake_net_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'required_by'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_wait_for_active'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_start_firewall'"
op|')'
newline|'\n'
DECL|member|test_spawn_sets_default_ephemeral_device
name|'def'
name|'test_spawn_sets_default_ephemeral_device'
op|'('
name|'self'
op|','
name|'mock_sf'
op|','
name|'mock_pvifs'
op|','
nl|'\n'
name|'mock_wait'
op|','
name|'mock_node'
op|','
nl|'\n'
name|'mock_save'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'mock_required_by'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_required_by'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
name|'ephemeral_gb'
op|'='
number|'1'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'return_value'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'image_meta'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'mock_save'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'/dev/sda1'"
op|','
name|'instance'
op|'.'
name|'default_ephemeral_device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_cleanup_deploy'"
op|')'
newline|'\n'
DECL|member|_test_destroy
name|'def'
name|'_test_destroy'
op|'('
name|'self'
op|','
name|'state'
op|','
name|'mock_cleanup_deploy'
op|','
name|'mock_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'network_info'
op|'='
string|"'foo'"
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'state'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_set_provision_state
name|'def'
name|'fake_set_provision_state'
op|'('
op|'*'
name|'_'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'node'
op|'.'
name|'provision_state'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'side_effect'
op|'='
name|'fake_set_provision_state'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'network_info'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'assert_called_with'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_cleanup_deploy'
op|'.'
name|'assert_called_with'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|','
nl|'\n'
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# For states that makes sense check if set_provision_state has'
nl|'\n'
comment|'# been called'
nl|'\n'
name|'if'
name|'state'
name|'in'
name|'ironic_driver'
op|'.'
name|'_UNPROVISION_STATES'
op|':'
newline|'\n'
indent|'            '
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'node_uuid'
op|','
string|"'deleted'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy
dedent|''
dedent|''
name|'def'
name|'test_destroy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'state'
name|'in'
name|'ironic_states'
op|'.'
name|'PROVISION_STATE_LIST'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_test_destroy'
op|'('
name|'state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_provision_state'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test_destroy_trigger_undeploy_fail
name|'def'
name|'test_destroy_trigger_undeploy_fail'
op|'('
name|'self'
op|','
name|'fake_validate'
op|','
name|'mock_sps'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_sps'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|_test__unprovision_instance
name|'def'
name|'_test__unprovision_instance'
op|'('
name|'self'
op|','
name|'mock_validate_inst'
op|','
name|'state'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_ironic_client'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'state'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'mock_validate_inst'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_unprovision'
op|'('
name|'fake_ironic_client'
op|','
name|'instance'
op|','
name|'node'
op|')'
newline|'\n'
name|'mock_validate_inst'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_ironic_client'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'fake_ironic_client'
op|'.'
name|'call'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|'"node.set_provision_state"'
op|','
name|'node'
op|'.'
name|'uuid'
op|','
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__unprovision_cleaning
dedent|''
name|'def'
name|'test__unprovision_cleaning'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test__unprovision_instance'
op|'('
name|'state'
op|'='
name|'ironic_states'
op|'.'
name|'CLEANING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__unprovision_cleanwait
dedent|''
name|'def'
name|'test__unprovision_cleanwait'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test__unprovision_instance'
op|'('
name|'state'
op|'='
name|'ironic_states'
op|'.'
name|'CLEANWAIT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__unprovision_fail_max_retries
name|'def'
name|'test__unprovision_fail_max_retries'
op|'('
name|'self'
op|','
name|'mock_validate_inst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CONF'
op|'.'
name|'set_default'
op|'('
string|"'api_max_retries'"
op|','
name|'default'
op|'='
number|'2'
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
name|'fake_ironic_client'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'driver'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'mock_validate_inst'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_unprovision'
op|','
nl|'\n'
name|'fake_ironic_client'
op|','
name|'instance'
op|','
name|'node'
op|')'
newline|'\n'
name|'expected_calls'
op|'='
op|'('
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instance'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_validate_inst'
op|'.'
name|'assert_has_calls'
op|'('
name|'expected_calls'
op|')'
newline|'\n'
name|'fake_ironic_client'
op|'.'
name|'call'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|'"node.set_provision_state"'
op|','
name|'node'
op|'.'
name|'uuid'
op|','
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test__unprovision_instance_not_found
name|'def'
name|'test__unprovision_instance_not_found'
op|'('
name|'self'
op|','
name|'mock_validate_inst'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_ironic_client'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'driver'
op|'='
string|"'fake'"
op|','
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'mock_validate_inst'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
nl|'\n'
name|'instance_id'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_unprovision'
op|'('
name|'fake_ironic_client'
op|','
name|'instance'
op|','
name|'node'
op|')'
newline|'\n'
name|'mock_validate_inst'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_ironic_client'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'fake_ironic_client'
op|'.'
name|'call'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
string|'"node.set_provision_state"'
op|','
name|'node'
op|'.'
name|'uuid'
op|','
string|'"deleted"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
DECL|member|test_destroy_unassociate_fail
name|'def'
name|'test_destroy_unassociate_fail'
op|'('
name|'self'
op|','
name|'mock_node'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'provision_state'
op|'='
name|'ironic_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'update'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NovaException'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'set_provision_state'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
nl|'\n'
string|"'deleted'"
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'get_by_instance_uuid'
op|'.'
name|'assert_called_with'
op|'('
name|'instance'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
DECL|member|test_reboot
name|'def'
name|'test_reboot'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'side_effect'
op|'='
op|'['
name|'node'
op|','
name|'node'
op|']'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_sp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
string|"'reboot'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
DECL|member|test_power_off
name|'def'
name|'test_power_off'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_power_on_off'
op|'('
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'method_name'
op|'='
string|"'power_off'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
DECL|member|test_power_on
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_power_on_off'
op|'('
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'method_name'
op|'='
string|"'power_on'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_power_on_off
dedent|''
name|'def'
name|'_test_power_on_off'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|','
name|'mock_looping'
op|','
nl|'\n'
name|'method_name'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'fake_validate'
op|'.'
name|'side_effect'
op|'='
op|'['
name|'node'
op|','
name|'node'
op|']'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# Call the method under test here'
nl|'\n'
name|'if'
name|'method_name'
op|'=='
string|"'power_on'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_sp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
string|"'on'"
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'method_name'
op|'=='
string|"'power_off'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'mock_sp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
string|"'off'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list_ports'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_unplug_vifs'"
op|')'
newline|'\n'
DECL|member|test_plug_vifs_with_port
name|'def'
name|'test_plug_vifs_with_port'
op|'('
name|'self'
op|','
name|'mock_uvifs'
op|','
name|'mock_port_udt'
op|','
name|'mock_lp'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_lp'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port_id'
op|'='
name|'six'
op|'.'
name|'text_type'
op|'('
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'expected_patch'
op|'='
op|'['
op|'{'
string|"'op'"
op|':'
string|"'add'"
op|','
nl|'\n'
string|"'path'"
op|':'
string|"'/extra/vif_port_id'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'port_id'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_plug_vifs'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# asserts'
nl|'\n'
name|'mock_uvifs'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mock_lp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_port_udt'
op|'.'
name|'assert_called_with'
op|'('
name|'port'
op|'.'
name|'uuid'
op|','
name|'expected_patch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_plug_vifs'"
op|')'
newline|'\n'
DECL|member|test_plug_vifs
name|'def'
name|'test_plug_vifs'
op|'('
name|'self'
op|','
name|'mock__plug_vifs'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock__plug_vifs'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list_ports'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_unplug_vifs'"
op|')'
newline|'\n'
DECL|member|test_plug_vifs_count_mismatch
name|'def'
name|'test_plug_vifs_count_mismatch'
op|'('
name|'self'
op|','
name|'mock_uvifs'
op|','
name|'mock_lp'
op|','
nl|'\n'
name|'mock_port_udt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_lp'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
comment|'# len(network_info) > len(ports)'
nl|'\n'
name|'network_info'
op|'='
op|'('
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|'+'
nl|'\n'
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_plug_vifs'
op|','
name|'node'
op|','
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# asserts'
nl|'\n'
name|'mock_uvifs'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mock_lp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
comment|'# assert port.update() was not called'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_port_udt'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list_ports'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_unplug_vifs'"
op|')'
newline|'\n'
DECL|member|test_plug_vifs_no_network_info
name|'def'
name|'test_plug_vifs_no_network_info'
op|'('
name|'self'
op|','
name|'mock_uvifs'
op|','
name|'mock_lp'
op|','
nl|'\n'
name|'mock_port_udt'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'mock_lp'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_plug_vifs'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# asserts'
nl|'\n'
name|'mock_uvifs'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mock_lp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
comment|'# assert port.update() was not called'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_port_udt'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
DECL|member|test_unplug_vifs
name|'def'
name|'test_unplug_vifs'
op|'('
name|'self'
op|','
name|'mock_node'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
name|'extra'
op|'='
op|'{'
string|"'vif_port_id'"
op|':'
string|"'fake-vif'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'expected_patch'
op|'='
op|'['
op|'{'
string|"'op'"
op|':'
string|"'remove'"
op|','
string|"'path'"
op|':'
nl|'\n'
string|"'/extra/vif_port_id'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# asserts'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
name|'detail'
op|'='
name|'True'
op|')'
newline|'\n'
name|'mock_update'
op|'.'
name|'assert_called_once_with'
op|'('
name|'port'
op|'.'
name|'uuid'
op|','
name|'expected_patch'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|','
string|"'node'"
op|')'
newline|'\n'
DECL|member|test_unplug_vifs_port_not_associated
name|'def'
name|'test_unplug_vifs_port_not_associated'
op|'('
name|'self'
op|','
name|'mock_node'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'port'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_port'
op|'('
name|'extra'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'return_value'
op|'='
op|'['
name|'port'
op|']'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'mock_node'
op|'.'
name|'get'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|')'
newline|'\n'
name|'mock_node'
op|'.'
name|'list_ports'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
name|'detail'
op|'='
name|'True'
op|')'
newline|'\n'
comment|'# assert port.update() was not called'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_update'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'port'
op|','
string|"'update'"
op|')'
newline|'\n'
DECL|member|test_unplug_vifs_no_network_info
name|'def'
name|'test_unplug_vifs_no_network_info'
op|'('
name|'self'
op|','
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# assert port.update() was not called'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_update'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'unfilter_instance'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_unfilter_instance
name|'def'
name|'test_unfilter_instance'
op|'('
name|'self'
op|','
name|'mock_ui'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mock_ui'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'setup_basic_filtering'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
string|"'prepare_instance_filter'"
op|','
nl|'\n'
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_ensure_filtering_rules_for_instance
name|'def'
name|'test_ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|','
name|'mock_pif'
op|','
name|'mock_sbf'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
name|'mock_sbf'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'mock_pif'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
nl|'\n'
string|"'refresh_instance_security_rules'"
op|','
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_refresh_instance_security_rules
name|'def'
name|'test_refresh_instance_security_rules'
op|'('
name|'self'
op|','
name|'mock_risr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'mock_risr'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
nl|'\n'
string|"'refresh_provider_fw_rules'"
op|','
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_refresh_provider_fw_rules
name|'def'
name|'test_refresh_provider_fw_rules'
op|'('
name|'self'
op|','
name|'mock_rpfr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'mock_rpfr'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'firewall'
op|'.'
name|'NoopFirewallDriver'
op|','
nl|'\n'
string|"'refresh_instance_security_rules'"
op|','
name|'create'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_refresh_security_group_rules
name|'def'
name|'test_refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'mock_risr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_group'
op|'='
string|"'fake-security-group-members'"
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'refresh_instance_security_rules'
op|'('
name|'fake_group'
op|')'
newline|'\n'
name|'mock_risr'
op|'.'
name|'assert_called_once_with'
op|'('
name|'fake_group'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_wait_for_active'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'loopingcall'
op|','
string|"'FixedIntervalLoopingCall'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_provision_state'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_add_driver_fields'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
DECL|member|_test_rebuild
name|'def'
name|'_test_rebuild'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
name|'mock_get'
op|','
name|'mock_driver_fields'
op|','
nl|'\n'
name|'mock_set_pstate'
op|','
name|'mock_looping'
op|','
name|'mock_wait_active'
op|','
nl|'\n'
name|'preserve'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
number|'5'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
name|'flavor_id'
op|'='
number|'5'
newline|'\n'
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
name|'flavor_id'
op|'='
name|'flavor_id'
op|','
name|'name'
op|'='
string|"'baremetal'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
nl|'\n'
name|'fake_looping_call'
op|'='
name|'FakeLoopingCall'
op|'('
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'return_value'
op|'='
name|'fake_looping_call'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rebuild'
op|'('
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'image_meta'
op|'='
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
name|'None'
op|','
nl|'\n'
name|'detach_block_devices'
op|'='
name|'None'
op|','
name|'attach_block_devices'
op|'='
name|'None'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'preserve'
op|')'
newline|'\n'
nl|'\n'
name|'mock_save'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'expected_task_state'
op|'='
op|'['
name|'task_states'
op|'.'
name|'REBUILDING'
op|']'
op|')'
newline|'\n'
name|'mock_driver_fields'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'node'
op|','
name|'instance'
op|','
nl|'\n'
name|'test'
op|'.'
name|'MatchType'
op|'('
name|'objects'
op|'.'
name|'ImageMeta'
op|')'
op|','
nl|'\n'
name|'flavor'
op|','
name|'preserve'
op|')'
newline|'\n'
name|'mock_set_pstate'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
nl|'\n'
name|'ironic_states'
op|'.'
name|'REBUILD'
op|')'
newline|'\n'
name|'mock_looping'
op|'.'
name|'assert_called_once_with'
op|'('
name|'mock_wait_active'
op|','
nl|'\n'
name|'FAKE_CLIENT_WRAPPER'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
name|'fake_looping_call'
op|'.'
name|'start'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'interval'
op|'='
name|'CONF'
op|'.'
name|'ironic'
op|'.'
name|'api_retry_interval'
op|')'
newline|'\n'
name|'fake_looping_call'
op|'.'
name|'wait'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_preserve_ephemeral
dedent|''
name|'def'
name|'test_rebuild_preserve_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_rebuild'
op|'('
name|'preserve'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_no_preserve_ephemeral
dedent|''
name|'def'
name|'test_rebuild_no_preserve_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_rebuild'
op|'('
name|'preserve'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_provision_state'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_add_driver_fields'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|')'
newline|'\n'
DECL|member|test_rebuild_failures
name|'def'
name|'test_rebuild_failures'
op|'('
name|'self'
op|','
name|'mock_save'
op|','
name|'mock_get'
op|','
name|'mock_driver_fields'
op|','
nl|'\n'
name|'mock_set_pstate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
number|'5'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
name|'flavor_id'
op|'='
number|'5'
newline|'\n'
name|'flavor'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'('
name|'flavor_id'
op|'='
name|'flavor_id'
op|','
name|'name'
op|'='
string|"'baremetal'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|','
nl|'\n'
name|'instance_type_id'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'flavor'
op|'='
name|'flavor'
newline|'\n'
nl|'\n'
name|'exceptions'
op|'='
op|'['
nl|'\n'
name|'exception'
op|'.'
name|'NovaException'
op|'('
op|')'
op|','
nl|'\n'
name|'ironic_exception'
op|'.'
name|'BadRequest'
op|'('
op|')'
op|','
nl|'\n'
name|'ironic_exception'
op|'.'
name|'InternalServerError'
op|'('
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'e'
name|'in'
name|'exceptions'
op|':'
newline|'\n'
indent|'            '
name|'mock_set_pstate'
op|'.'
name|'side_effect'
op|'='
name|'e'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceDeployFailure'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'rebuild'
op|','
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|'='
name|'instance'
op|','
name|'image_meta'
op|'='
name|'image_meta'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
name|'None'
op|','
nl|'\n'
name|'detach_block_devices'
op|'='
name|'None'
op|','
name|'attach_block_devices'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance_metadata'
op|','
string|"'InstanceMetadata'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'configdrive'
op|','
string|"'ConfigDriveBuilder'"
op|')'
newline|'\n'
DECL|class|IronicDriverGenerateConfigDriveTestCase
name|'class'
name|'IronicDriverGenerateConfigDriveTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|','
string|"'IronicClientWrapper'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'_'
op|':'
name|'FAKE_CLIENT_WRAPPER'
op|')'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IronicDriverGenerateConfigDriveTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
op|'**'
name|'IRONIC_FLAGS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'virtapi'
op|'='
name|'fake'
op|'.'
name|'FakeVirtAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_info'
op|'='
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_configdrive
dedent|''
name|'def'
name|'test_generate_configdrive'
op|'('
name|'self'
op|','
name|'mock_cd_builder'
op|','
name|'mock_instance_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_instance_meta'
op|'.'
name|'return_value'
op|'='
string|"'fake-instance'"
newline|'\n'
name|'mock_make_drive'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'make_drive'
op|'='
name|'lambda'
op|'*'
name|'_'
op|':'
name|'None'
op|')'
newline|'\n'
name|'mock_cd_builder'
op|'.'
name|'return_value'
op|'.'
name|'__enter__'
op|'.'
name|'return_value'
op|'='
name|'mock_make_drive'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_generate_configdrive'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'node'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network_info'
op|')'
newline|'\n'
name|'mock_cd_builder'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance_md'
op|'='
string|"'fake-instance'"
op|')'
newline|'\n'
name|'mock_instance_meta'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_info'
op|','
name|'extra_md'
op|'='
op|'{'
op|'}'
op|','
name|'content'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_configdrive_fail
dedent|''
name|'def'
name|'test_generate_configdrive_fail'
op|'('
name|'self'
op|','
name|'mock_cd_builder'
op|','
nl|'\n'
name|'mock_instance_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_cd_builder'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'ConfigDriveMountFailed'
op|'('
nl|'\n'
name|'operation'
op|'='
string|"'foo'"
op|','
name|'error'
op|'='
string|"'error'"
op|')'
newline|'\n'
name|'mock_instance_meta'
op|'.'
name|'return_value'
op|'='
string|"'fake-instance'"
newline|'\n'
name|'mock_make_drive'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
name|'make_drive'
op|'='
name|'lambda'
op|'*'
name|'_'
op|':'
name|'None'
op|')'
newline|'\n'
name|'mock_cd_builder'
op|'.'
name|'return_value'
op|'.'
name|'__enter__'
op|'.'
name|'return_value'
op|'='
name|'mock_make_drive'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConfigDriveMountFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_generate_configdrive'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'node'
op|','
name|'self'
op|'.'
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'mock_cd_builder'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance_md'
op|'='
string|"'fake-instance'"
op|')'
newline|'\n'
name|'mock_instance_meta'
op|'.'
name|'assert_called_once_with'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'network_info'
op|'='
name|'self'
op|'.'
name|'network_info'
op|','
name|'extra_md'
op|'='
op|'{'
op|'}'
op|','
name|'content'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

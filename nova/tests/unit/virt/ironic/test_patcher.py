begin_unit
comment|'# Copyright 2014 Red Hat, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'utils'
name|'as'
name|'ironic_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'patcher'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IronicDriverFieldsTestCase
name|'class'
name|'IronicDriverFieldsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IronicDriverFieldsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'image_meta'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_image_meta'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_flavor'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|')'
newline|'\n'
comment|'# Generic expected patches'
nl|'\n'
name|'self'
op|'.'
name|'_expected_deploy_patch'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/image_source'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'self'
op|'.'
name|'image_meta'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/root_gb'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'instance'
op|'['
string|"'root_gb'"
op|']'
op|')'
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/swap_mb'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'flavor'
op|'['
string|"'swap'"
op|']'
op|')'
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_expected_cleanup_patch'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_create_generic
dedent|''
name|'def'
name|'test_create_generic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'pxe_fake'"
op|')'
newline|'\n'
name|'patcher_obj'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'patcher_obj'
op|','
name|'patcher'
op|'.'
name|'GenericDriverFields'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch
dedent|''
name|'def'
name|'test_generic_get_deploy_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'self'
op|'.'
name|'_expected_deploy_patch'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch_capabilities
dedent|''
name|'def'
name|'test_generic_get_deploy_patch_capabilities'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
op|'['
string|"'capabilities:boot_mode'"
op|']'
op|'='
string|"'bios'"
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/capabilities'"
op|','
nl|'\n'
string|"'value'"
op|':'
string|'\'{"boot_mode": "bios"}\''
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|']'
newline|'\n'
name|'expected'
op|'+='
name|'self'
op|'.'
name|'_expected_deploy_patch'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch_capabilities_op
dedent|''
name|'def'
name|'test_generic_get_deploy_patch_capabilities_op'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
op|'['
string|"'capabilities:boot_mode'"
op|']'
op|'='
string|"'<in> bios'"
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/capabilities'"
op|','
nl|'\n'
string|"'value'"
op|':'
string|'\'{"boot_mode": "<in> bios"}\''
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|']'
newline|'\n'
name|'expected'
op|'+='
name|'self'
op|'.'
name|'_expected_deploy_patch'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch_capabilities_nested_key
dedent|''
name|'def'
name|'test_generic_get_deploy_patch_capabilities_nested_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'['
string|"'extra_specs'"
op|']'
op|'['
string|"'capabilities:key1:key2'"
op|']'
op|'='
string|"'<in> bios'"
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/capabilities'"
op|','
nl|'\n'
string|"'value'"
op|':'
string|'\'{"key1:key2": "<in> bios"}\''
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|']'
newline|'\n'
name|'expected'
op|'+='
name|'self'
op|'.'
name|'_expected_deploy_patch'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch_ephemeral
dedent|''
name|'def'
name|'test_generic_get_deploy_patch_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'CONF'
op|'.'
name|'set_override'
op|'('
string|"'default_ephemeral_format'"
op|','
string|"'testfmt'"
op|')'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'ephemeral_gb'
op|'='
number|'10'
op|')'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/ephemeral_gb'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'instance'
op|'.'
name|'ephemeral_gb'
op|')'
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/ephemeral_format'"
op|','
nl|'\n'
string|"'value'"
op|':'
string|"'testfmt'"
op|','
nl|'\n'
string|"'op'"
op|':'
string|"'add'"
op|'}'
op|']'
newline|'\n'
name|'expected'
op|'+='
name|'self'
op|'.'
name|'_expected_deploy_patch'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_deploy_patch_preserve_ephemeral
dedent|''
name|'def'
name|'test_generic_get_deploy_patch_preserve_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'for'
name|'preserve'
name|'in'
op|'['
name|'True'
op|','
name|'False'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_deploy_patch'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'image_meta'
op|','
name|'self'
op|'.'
name|'flavor'
op|','
nl|'\n'
name|'preserve_ephemeral'
op|'='
name|'preserve'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'path'"
op|':'
string|"'/instance_info/preserve_ephemeral'"
op|','
nl|'\n'
string|"'value'"
op|':'
name|'str'
op|'('
name|'preserve'
op|')'
op|','
string|"'op'"
op|':'
string|"'add'"
op|','
op|'}'
op|']'
newline|'\n'
name|'expected'
op|'+='
name|'self'
op|'.'
name|'_expected_deploy_patch'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'patch'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_get_cleanup_patch
dedent|''
dedent|''
name|'def'
name|'test_generic_get_cleanup_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'patch'
op|'='
name|'patcher'
op|'.'
name|'create'
op|'('
name|'node'
op|')'
op|'.'
name|'get_cleanup_patch'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'None'
op|','
nl|'\n'
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'_expected_cleanup_patch'
op|','
name|'patch'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

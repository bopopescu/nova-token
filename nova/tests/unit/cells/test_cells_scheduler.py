begin_unit
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For CellsScheduler\n"""'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'filters'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'weights'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'conf'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'utils'
name|'as'
name|'scheduler_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'cells'
name|'import'
name|'fakes'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'uuidsentinel'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'nova'
op|'.'
name|'conf'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeFilterClass1
name|'class'
name|'FakeFilterClass1'
op|'('
name|'filters'
op|'.'
name|'BaseCellFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeFilterClass2
dedent|''
name|'class'
name|'FakeFilterClass2'
op|'('
name|'filters'
op|'.'
name|'BaseCellFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeWeightClass1
dedent|''
name|'class'
name|'FakeWeightClass1'
op|'('
name|'weights'
op|'.'
name|'BaseCellWeigher'
op|')'
op|':'
newline|'\n'
DECL|member|_weigh_object
indent|'    '
name|'def'
name|'_weigh_object'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeWeightClass2
dedent|''
dedent|''
name|'class'
name|'FakeWeightClass2'
op|'('
name|'weights'
op|'.'
name|'BaseCellWeigher'
op|')'
op|':'
newline|'\n'
DECL|member|_weigh_object
indent|'    '
name|'def'
name|'_weigh_object'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'weight_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CellsSchedulerTestCase
dedent|''
dedent|''
name|'class'
name|'CellsSchedulerTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case for CellsScheduler class."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CellsSchedulerTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_filter_classes'
op|'='
op|'['
op|']'
op|','
name|'scheduler_weight_classes'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_cells_scheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_init_cells_scheduler
dedent|''
name|'def'
name|'_init_cells_scheduler'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fakes'
op|'.'
name|'init'
op|'('
name|'self'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'='
name|'fakes'
op|'.'
name|'get_message_runner'
op|'('
string|"'api-cell'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'scheduler'
newline|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'state_manager'
newline|'\n'
name|'self'
op|'.'
name|'my_cell_state'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_my_state'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_uuids'
op|'.'
name|'append'
op|'('
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'instance_uuids'
op|'='
name|'instance_uuids'
newline|'\n'
name|'self'
op|'.'
name|'instances'
op|'='
op|'['
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'uuid'
op|','
name|'id'
op|'='
name|'id'
op|')'
nl|'\n'
name|'for'
name|'id'
op|','
name|'uuid'
name|'in'
name|'enumerate'
op|'('
name|'instance_uuids'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instance_uuids'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'self'
op|'.'
name|'instances'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|','
nl|'\n'
string|"'image'"
op|':'
string|"'fake_image'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'='
op|'{'
nl|'\n'
string|"'instances'"
op|':'
name|'self'
op|'.'
name|'instances'
op|','
nl|'\n'
string|"'image'"
op|':'
string|"'fake_image'"
op|','
nl|'\n'
string|"'filter_properties'"
op|':'
op|'{'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
op|','
nl|'\n'
string|"'security_groups'"
op|':'
string|"'fake_sec_groups'"
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
string|"'fake_bdm'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_create_instances_here
dedent|''
name|'def'
name|'test_create_instances_here'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Just grab the first instance type'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'objects'
op|'.'
name|'Flavor'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
number|'1'
op|')'
newline|'\n'
name|'image'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'instance_uuids'
op|'='
name|'self'
op|'.'
name|'instance_uuids'
newline|'\n'
name|'instance_props'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'removed'"
op|','
nl|'\n'
string|"'security_groups'"
op|':'
string|"'removed'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
string|"'removed'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'instance-00000001'"
op|','
nl|'\n'
string|"'hostname'"
op|':'
string|"'meow'"
op|','
nl|'\n'
string|"'display_name'"
op|':'
string|"'moo'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"'fake_image_ref'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
nl|'\n'
comment|'# Test these as lists'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'moo'"
op|':'
string|"'cow'"
op|'}'
op|','
nl|'\n'
string|"'system_metadata'"
op|':'
op|'{'
string|"'meow'"
op|':'
string|"'cat'"
op|'}'
op|','
nl|'\n'
string|"'flavor'"
op|':'
name|'inst_type'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
string|"'uuids'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
nl|'\n'
name|'objects'
op|'.'
name|'BlockDeviceMapping'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
op|'**'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
name|'block_device'
op|'.'
name|'create_image_bdm'
op|'('
string|"'fake_image_ref'"
op|')'
op|','
nl|'\n'
name|'anon'
op|'='
name|'True'
op|')'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|_fake_instance_update_at_top
name|'def'
name|'_fake_instance_update_at_top'
op|'('
name|'_ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'uuids'"
op|']'
op|'.'
name|'append'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'msg_runner'
op|','
string|"'instance_update_at_top'"
op|','
nl|'\n'
name|'_fake_instance_update_at_top'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'_create_instances_here'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'instance_uuids'
op|','
nl|'\n'
name|'instance_props'
op|','
name|'inst_type'
op|','
name|'image'
op|','
nl|'\n'
op|'['
string|"'default'"
op|']'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'uuids'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'count'
op|','
name|'instance_uuid'
name|'in'
name|'enumerate'
op|'('
name|'instance_uuids'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'meta'
op|'='
name|'utils'
op|'.'
name|'instance_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'cow'"
op|','
name|'meta'
op|'['
string|"'moo'"
op|']'
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'instance_sys_meta'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'cat'"
op|','
name|'sys_meta'
op|'['
string|"'meow'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'meow'"
op|','
name|'instance'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'moo-%d'"
op|'%'
op|'('
name|'count'
op|'+'
number|'1'
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'display_name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fake_image_ref'"
op|','
name|'instance'
op|'['
string|"'image_ref'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.objects.Instance.update'"
op|')'
newline|'\n'
DECL|member|test_create_instances_here_pops_problematic_properties
name|'def'
name|'test_create_instances_here_pops_problematic_properties'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_update'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
name|'uuidsentinel'
op|'.'
name|'instance'
op|','
nl|'\n'
string|"'metadata'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
string|"'bar'"
op|','
nl|'\n'
string|"'security_groups'"
op|':'
string|"'not secure'"
op|','
nl|'\n'
string|"'flavor'"
op|':'
string|"'chocolate'"
op|','
nl|'\n'
string|"'pci_requests'"
op|':'
string|"'no thanks'"
op|','
nl|'\n'
string|"'ec2_ids'"
op|':'
string|"'prime'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'compute_api'
op|','
nl|'\n'
string|"'create_db_entry_for_new_instance'"
op|')'
newline|'\n'
DECL|function|test
name|'def'
name|'test'
op|'('
name|'mock_create_db'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'_create_instances_here'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
op|'['
name|'uuidsentinel'
op|'.'
name|'instance'
op|']'
op|','
name|'values'
op|','
nl|'\n'
name|'objects'
op|'.'
name|'Flavor'
op|'('
op|')'
op|','
string|"'foo'"
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'test'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(danms): Make sure that only the expected properties'
nl|'\n'
comment|'# are applied to the instance object. The complex ones that'
nl|'\n'
comment|'# would have been mangled over RPC should be removed.'
nl|'\n'
name|'mock_update'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidsentinel'
op|'.'
name|'instance'
op|','
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instances_selects_child_cell
dedent|''
name|'def'
name|'test_build_instances_selects_child_cell'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure there's no capacity info so we're sure to"
nl|'\n'
comment|'# select a child cell'
nl|'\n'
indent|'        '
name|'our_cell_info'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_my_state'
op|'('
op|')'
newline|'\n'
name|'our_cell_info'
op|'.'
name|'capacities'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
string|"'times'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
name|'orig_fn'
op|'='
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
newline|'\n'
nl|'\n'
DECL|function|msg_runner_build_instances
name|'def'
name|'msg_runner_build_instances'
op|'('
name|'ctxt'
op|','
name|'target_cell'
op|','
name|'build_inst_kwargs'
op|')'
op|':'
newline|'\n'
comment|'# This gets called twice.  Once for our running it'
nl|'\n'
comment|"# in this cell.. and then it'll get called when the"
nl|'\n'
comment|'# child cell is picked.  So, first time.. just run it'
nl|'\n'
comment|'# like normal.'
nl|'\n'
indent|'            '
name|'if'
name|'not'
name|'call_info'
op|'['
string|"'times'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'call_info'
op|'['
string|"'times'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'orig_fn'
op|'('
name|'ctxt'
op|','
name|'target_cell'
op|','
name|'build_inst_kwargs'
op|')'
newline|'\n'
dedent|''
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'ctxt'
newline|'\n'
name|'call_info'
op|'['
string|"'target_cell'"
op|']'
op|'='
name|'target_cell'
newline|'\n'
name|'call_info'
op|'['
string|"'build_inst_kwargs'"
op|']'
op|'='
name|'build_inst_kwargs'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'msg_runner'
op|','
string|"'build_instances'"
op|','
nl|'\n'
name|'msg_runner_build_instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'my_cell_state'
op|','
nl|'\n'
name|'self'
op|'.'
name|'build_inst_kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'build_inst_kwargs'"
op|']'
op|')'
newline|'\n'
name|'child_cells'
op|'='
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'get_child_cells'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'call_info'
op|'['
string|"'target_cell'"
op|']'
op|','
name|'child_cells'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instances_selects_current_cell
dedent|''
name|'def'
name|'test_build_instances_selects_current_cell'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure there's no child cells so that we will be"
nl|'\n'
comment|'# selected'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'child_cells'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'build_inst_kwargs'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_create_instances_here
name|'def'
name|'fake_create_instances_here'
op|'('
name|'ctxt'
op|','
name|'instance_uuids'
op|','
nl|'\n'
name|'instance_properties'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'ctxt'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|'='
name|'instance_uuids'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'='
name|'instance_properties'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
name|'call_info'
op|'['
string|"'image'"
op|']'
op|'='
name|'image'
newline|'\n'
name|'call_info'
op|'['
string|"'security_groups'"
op|']'
op|'='
name|'security_groups'
newline|'\n'
name|'call_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
name|'block_device_mapping'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'instances'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_build_instances
dedent|''
name|'def'
name|'fake_rpc_build_instances'
op|'('
name|'ctxt'
op|','
op|'**'
name|'build_inst_kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'build_inst_kwargs'"
op|']'
op|'='
name|'build_inst_kwargs'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_create_instances_here'"
op|','
nl|'\n'
name|'fake_create_instances_here'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'compute_task_api'
op|','
nl|'\n'
string|"'build_instances'"
op|','
name|'fake_rpc_build_instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'my_cell_state'
op|','
nl|'\n'
name|'build_inst_kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'['
string|"'instances'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'['
string|"'filter_properties'"
op|']'
op|'['
string|"'instance_type'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'['
string|"'image'"
op|']'
op|','
name|'call_info'
op|'['
string|"'image'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'['
string|"'security_groups'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'security_groups'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'build_inst_kwargs'
op|'['
string|"'block_device_mapping'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'build_inst_kwargs'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'build_inst_kwargs'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_instances_retries_when_no_cells_avail
dedent|''
name|'def'
name|'test_build_instances_retries_when_no_cells_avail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_retries'
op|'='
number|'7'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
string|"'num_tries'"
op|':'
number|'0'
op|','
string|"'errored_uuids'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_grab_target_cells
name|'def'
name|'fake_grab_target_cells'
op|'('
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'num_tries'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'raise'
name|'exception'
op|'.'
name|'NoCellsAvailable'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_sleep
dedent|''
name|'def'
name|'fake_sleep'
op|'('
name|'_secs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_save
dedent|''
name|'def'
name|'fake_instance_save'
op|'('
name|'inst'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'inst'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'call_info'
op|'['
string|"'errored_uuids'"
op|']'
op|'.'
name|'append'
op|'('
name|'inst'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_grab_target_cells'"
op|','
nl|'\n'
name|'fake_grab_target_cells'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'time'
op|','
string|"'sleep'"
op|','
name|'fake_sleep'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|','
name|'fake_instance_save'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'my_cell_state'
op|','
nl|'\n'
name|'self'
op|'.'
name|'build_inst_kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'8'
op|','
name|'call_info'
op|'['
string|"'num_tries'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'errored_uuids'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_method_on_random_exception
dedent|''
name|'def'
name|'test_schedule_method_on_random_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_retries'
op|'='
number|'7'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
op|'['
name|'objects'
op|'.'
name|'Instance'
op|'('
name|'uuid'
op|'='
name|'uuid'
op|')'
name|'for'
name|'uuid'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'instance_uuids'
op|']'
newline|'\n'
name|'method_kwargs'
op|'='
op|'{'
nl|'\n'
string|"'image'"
op|':'
string|"'fake_image'"
op|','
nl|'\n'
string|"'instances'"
op|':'
name|'instances'
op|','
nl|'\n'
string|"'filter_properties'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
string|"'num_tries'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'errored_uuids1'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'errored_uuids2'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_grab_target_cells
name|'def'
name|'fake_grab_target_cells'
op|'('
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'num_tries'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_save
dedent|''
name|'def'
name|'fake_instance_save'
op|'('
name|'inst'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'inst'
op|'.'
name|'vm_state'
op|')'
newline|'\n'
name|'call_info'
op|'['
string|"'errored_uuids1'"
op|']'
op|'.'
name|'append'
op|'('
name|'inst'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_update_at_top
dedent|''
name|'def'
name|'fake_instance_update_at_top'
op|'('
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
name|'call_info'
op|'['
string|"'errored_uuids2'"
op|']'
op|'.'
name|'append'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_grab_target_cells'"
op|','
nl|'\n'
name|'fake_grab_target_cells'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'objects'
op|'.'
name|'Instance'
op|','
string|"'save'"
op|','
name|'fake_instance_save'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'msg_runner'
op|','
string|"'instance_update_at_top'"
op|','
nl|'\n'
name|'fake_instance_update_at_top'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'my_cell_state'
op|','
nl|'\n'
name|'method_kwargs'
op|')'
newline|'\n'
comment|"# Shouldn't retry"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'num_tries'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'errored_uuids1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'errored_uuids2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filter_schedule_skipping
dedent|''
name|'def'
name|'test_filter_schedule_skipping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# if a filter handles scheduling, short circuit'
nl|'\n'
nl|'\n'
DECL|function|_grab
indent|'        '
name|'def'
name|'_grab'
op|'('
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_grab_target_cells'"
op|','
name|'_grab'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_test
name|'def'
name|'_test'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"shouldn\'t be called"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'_schedule_build_to_cells'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'_test'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'test'
op|'.'
name|'TestingException'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Scheduling did not properly short circuit"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cells_filter_args_correct
dedent|''
dedent|''
name|'def'
name|'test_cells_filter_args_correct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Re-init our fakes with some filters.'
nl|'\n'
indent|'        '
name|'our_path'
op|'='
string|"'nova.tests.unit.cells.test_cells_scheduler'"
newline|'\n'
name|'cls_names'
op|'='
op|'['
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeFilterClass1'"
op|','
nl|'\n'
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeFilterClass2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_filter_classes'
op|'='
name|'cls_names'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_cells_scheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure there's no child cells so that we will be"
nl|'\n'
comment|'# selected.  Makes stubbing easier.'
nl|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'child_cells'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_create_instances_here
name|'def'
name|'fake_create_instances_here'
op|'('
name|'ctxt'
op|','
name|'instance_uuids'
op|','
nl|'\n'
name|'instance_properties'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'ctxt'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|'='
name|'instance_uuids'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'='
name|'instance_properties'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
name|'call_info'
op|'['
string|"'image'"
op|']'
op|'='
name|'image'
newline|'\n'
name|'call_info'
op|'['
string|"'security_groups'"
op|']'
op|'='
name|'security_groups'
newline|'\n'
name|'call_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
name|'block_device_mapping'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_build_instances
dedent|''
name|'def'
name|'fake_rpc_build_instances'
op|'('
name|'ctxt'
op|','
op|'**'
name|'host_sched_kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'host_sched_kwargs'"
op|']'
op|'='
name|'host_sched_kwargs'
newline|'\n'
nl|'\n'
DECL|function|fake_get_filtered_objs
dedent|''
name|'def'
name|'fake_get_filtered_objs'
op|'('
name|'filters'
op|','
name|'cells'
op|','
name|'filt_properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'filt_objects'"
op|']'
op|'='
name|'filters'
newline|'\n'
name|'call_info'
op|'['
string|"'filt_cells'"
op|']'
op|'='
name|'cells'
newline|'\n'
name|'call_info'
op|'['
string|"'filt_props'"
op|']'
op|'='
name|'filt_properties'
newline|'\n'
name|'return'
name|'cells'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_create_instances_here'"
op|','
nl|'\n'
name|'fake_create_instances_here'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'compute_task_api'
op|','
nl|'\n'
string|"'build_instances'"
op|','
name|'fake_rpc_build_instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
name|'filter_handler'
op|'='
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'filter_handler'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'filter_handler'
op|','
string|"'get_filtered_objects'"
op|','
nl|'\n'
name|'fake_get_filtered_objs'
op|')'
newline|'\n'
nl|'\n'
name|'host_sched_kwargs'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'fake_image'"
op|','
nl|'\n'
string|"'instances'"
op|':'
name|'self'
op|'.'
name|'instances'
op|','
nl|'\n'
string|"'filter_properties'"
op|':'
nl|'\n'
op|'{'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
op|','
nl|'\n'
string|"'security_groups'"
op|':'
string|"'fake_sec_groups'"
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
string|"'fake_bdm'"
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'my_cell_state'
op|','
name|'host_sched_kwargs'
op|')'
newline|'\n'
comment|'# Our cell was selected.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'instance_type'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'image'"
op|']'
op|','
name|'call_info'
op|'['
string|"'image'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host_sched_kwargs'
op|','
name|'call_info'
op|'['
string|"'host_sched_kwargs'"
op|']'
op|')'
newline|'\n'
comment|'# Filter args are correct'
nl|'\n'
name|'expected_filt_props'
op|'='
op|'{'
string|"'context'"
op|':'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
string|"'scheduler'"
op|':'
name|'self'
op|'.'
name|'scheduler'
op|','
nl|'\n'
string|"'routing_path'"
op|':'
name|'self'
op|'.'
name|'my_cell_state'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'host_sched_kwargs'"
op|':'
name|'host_sched_kwargs'
op|','
nl|'\n'
string|"'request_spec'"
op|':'
name|'self'
op|'.'
name|'request_spec'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_filt_props'
op|','
name|'call_info'
op|'['
string|"'filt_props'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'FakeFilterClass1'
op|','
name|'FakeFilterClass2'
op|']'
op|','
nl|'\n'
op|'['
name|'obj'
op|'.'
name|'__class__'
name|'for'
name|'obj'
name|'in'
name|'call_info'
op|'['
string|"'filt_objects'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'self'
op|'.'
name|'my_cell_state'
op|']'
op|','
name|'call_info'
op|'['
string|"'filt_cells'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cells_filter_returning_none
dedent|''
name|'def'
name|'test_cells_filter_returning_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Re-init our fakes with some filters.'
nl|'\n'
indent|'        '
name|'our_path'
op|'='
string|"'nova.tests.unit.cells.test_cells_scheduler'"
newline|'\n'
name|'cls_names'
op|'='
op|'['
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeFilterClass1'"
op|','
nl|'\n'
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeFilterClass2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_filter_classes'
op|'='
name|'cls_names'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_cells_scheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure there's no child cells so that we will be"
nl|'\n'
comment|'# selected.  Makes stubbing easier.'
nl|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'child_cells'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
string|"'scheduled'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_create_instances_here
name|'def'
name|'fake_create_instances_here'
op|'('
name|'ctxt'
op|','
name|'request_spec'
op|')'
op|':'
newline|'\n'
comment|'# Should not be called'
nl|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'scheduled'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_get_filtered_objs
dedent|''
name|'def'
name|'fake_get_filtered_objs'
op|'('
name|'filter_classes'
op|','
name|'cells'
op|','
name|'filt_properties'
op|')'
op|':'
newline|'\n'
comment|'# Should cause scheduling to be skipped.  Means that the'
nl|'\n'
comment|'# filter did it.'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_create_instances_here'"
op|','
nl|'\n'
name|'fake_create_instances_here'
op|')'
newline|'\n'
name|'filter_handler'
op|'='
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'filter_handler'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'filter_handler'
op|','
string|"'get_filtered_objects'"
op|','
nl|'\n'
name|'fake_get_filtered_objs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'my_cell_state'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'call_info'
op|'['
string|"'scheduled'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cells_weight_args_correct
dedent|''
name|'def'
name|'test_cells_weight_args_correct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Re-init our fakes with some filters.'
nl|'\n'
indent|'        '
name|'our_path'
op|'='
string|"'nova.tests.unit.cells.test_cells_scheduler'"
newline|'\n'
name|'cls_names'
op|'='
op|'['
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeWeightClass1'"
op|','
nl|'\n'
name|'our_path'
op|'+'
string|"'.'"
op|'+'
string|"'FakeWeightClass2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_weight_classes'
op|'='
name|'cls_names'
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_init_cells_scheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure there's no child cells so that we will be"
nl|'\n'
comment|'# selected.  Makes stubbing easier.'
nl|'\n'
name|'self'
op|'.'
name|'state_manager'
op|'.'
name|'child_cells'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'call_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_create_instances_here
name|'def'
name|'fake_create_instances_here'
op|'('
name|'ctxt'
op|','
name|'instance_uuids'
op|','
nl|'\n'
name|'instance_properties'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'security_groups'
op|','
nl|'\n'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|'='
name|'ctxt'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|'='
name|'instance_uuids'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'='
name|'instance_properties'
newline|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|'='
name|'instance_type'
newline|'\n'
name|'call_info'
op|'['
string|"'image'"
op|']'
op|'='
name|'image'
newline|'\n'
name|'call_info'
op|'['
string|"'security_groups'"
op|']'
op|'='
name|'security_groups'
newline|'\n'
name|'call_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|'='
name|'block_device_mapping'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_build_instances
dedent|''
name|'def'
name|'fake_rpc_build_instances'
op|'('
name|'ctxt'
op|','
op|'**'
name|'host_sched_kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'host_sched_kwargs'"
op|']'
op|'='
name|'host_sched_kwargs'
newline|'\n'
nl|'\n'
DECL|function|fake_get_weighed_objs
dedent|''
name|'def'
name|'fake_get_weighed_objs'
op|'('
name|'weighers'
op|','
name|'cells'
op|','
name|'filt_properties'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'weighers'"
op|']'
op|'='
name|'weighers'
newline|'\n'
name|'call_info'
op|'['
string|"'weight_cells'"
op|']'
op|'='
name|'cells'
newline|'\n'
name|'call_info'
op|'['
string|"'weight_props'"
op|']'
op|'='
name|'filt_properties'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeightedCell'
op|'('
name|'cells'
op|'['
number|'0'
op|']'
op|','
number|'0.0'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_build_request_spec
dedent|''
name|'def'
name|'fake_build_request_spec'
op|'('
name|'ctxt'
op|','
name|'image'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
op|'{'
nl|'\n'
string|"'num_instances'"
op|':'
name|'len'
op|'('
name|'instances'
op|')'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instances'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
string|"'image'"
op|':'
name|'image'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
newline|'\n'
name|'return'
name|'request_spec'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|','
string|"'_create_instances_here'"
op|','
nl|'\n'
name|'fake_create_instances_here'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'scheduler_utils'
op|','
string|"'build_request_spec'"
op|','
nl|'\n'
name|'fake_build_request_spec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'compute_task_api'
op|','
nl|'\n'
string|"'build_instances'"
op|','
name|'fake_rpc_build_instances'
op|')'
newline|'\n'
name|'weight_handler'
op|'='
name|'self'
op|'.'
name|'scheduler'
op|'.'
name|'weight_handler'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weight_handler'
op|','
string|"'get_weighed_objects'"
op|','
nl|'\n'
name|'fake_get_weighed_objs'
op|')'
newline|'\n'
nl|'\n'
name|'host_sched_kwargs'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'fake_image'"
op|','
nl|'\n'
string|"'instances'"
op|':'
name|'self'
op|'.'
name|'instances'
op|','
nl|'\n'
string|"'filter_properties'"
op|':'
nl|'\n'
op|'{'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
op|','
nl|'\n'
string|"'security_groups'"
op|':'
string|"'fake_sec_groups'"
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
string|"'fake_bdm'"
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'msg_runner'
op|'.'
name|'build_instances'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'my_cell_state'
op|','
name|'host_sched_kwargs'
op|')'
newline|'\n'
comment|'# Our cell was selected.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'call_info'
op|'['
string|"'ctxt'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance_uuids'
op|','
name|'call_info'
op|'['
string|"'instance_uuids'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'instance_type'"
op|']'
op|','
nl|'\n'
name|'call_info'
op|'['
string|"'instance_type'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'request_spec'
op|'['
string|"'image'"
op|']'
op|','
name|'call_info'
op|'['
string|"'image'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host_sched_kwargs'
op|','
name|'call_info'
op|'['
string|"'host_sched_kwargs'"
op|']'
op|')'
newline|'\n'
comment|'# Weight args are correct'
nl|'\n'
name|'expected_filt_props'
op|'='
op|'{'
string|"'context'"
op|':'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
string|"'scheduler'"
op|':'
name|'self'
op|'.'
name|'scheduler'
op|','
nl|'\n'
string|"'routing_path'"
op|':'
name|'self'
op|'.'
name|'my_cell_state'
op|'.'
name|'name'
op|','
nl|'\n'
string|"'host_sched_kwargs'"
op|':'
name|'host_sched_kwargs'
op|','
nl|'\n'
string|"'request_spec'"
op|':'
name|'self'
op|'.'
name|'request_spec'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'fake_type'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_filt_props'
op|','
name|'call_info'
op|'['
string|"'weight_props'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'FakeWeightClass1'
op|','
name|'FakeWeightClass2'
op|']'
op|','
nl|'\n'
op|'['
name|'obj'
op|'.'
name|'__class__'
name|'for'
name|'obj'
name|'in'
name|'call_info'
op|'['
string|"'weighers'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'self'
op|'.'
name|'my_cell_state'
op|']'
op|','
name|'call_info'
op|'['
string|"'weight_cells'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2012 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'policy'
name|'as'
name|'common_policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'paths'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_policy'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RealPolicyFixture
name|'class'
name|'RealPolicyFixture'
op|'('
name|'fixtures'
op|'.'
name|'Fixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Load the live policy for tests.\n\n    A base policy fixture that starts with the assumption that you\'d\n    like to load and enforce the shipped default policy in tests.\n\n    Provides interfaces to tinker with both the contents and location\n    of the policy file before loading to allow overrides. To do this\n    implement ``_prepare_policy`` in the subclass, and adjust the\n    ``policy_file`` accordingly.\n\n    """'
newline|'\n'
DECL|member|_prepare_policy
name|'def'
name|'_prepare_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow changing of the policy before we get started"""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RealPolicyFixture'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# policy_file can be overridden by subclasses'
nl|'\n'
name|'self'
op|'.'
name|'policy_file'
op|'='
name|'paths'
op|'.'
name|'state_path_def'
op|'('
string|"'etc/nova/policy.json'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_prepare_policy'
op|'('
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'set_override'
op|'('
string|"'policy_file'"
op|','
name|'self'
op|'.'
name|'policy_file'
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'init'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|set_rules
dedent|''
name|'def'
name|'set_rules'
op|'('
name|'self'
op|','
name|'rules'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'_ENFORCER'
newline|'\n'
name|'policy'
op|'.'
name|'set_rules'
op|'('
op|'{'
name|'k'
op|':'
name|'common_policy'
op|'.'
name|'parse_rule'
op|'('
name|'v'
op|')'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'rules'
op|'.'
name|'items'
op|'('
op|')'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PolicyFixture
dedent|''
dedent|''
name|'class'
name|'PolicyFixture'
op|'('
name|'RealPolicyFixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Load a fake policy from nova.tests.unit.fake_policy\n\n    This overrides the policy with a completely fake and synthetic\n    policy file.\n\n    NOTE(sdague): the use of this is deprecated, and we should unwind\n    the tests so that they can function with the real policy. This is\n    mostly legacy because our default test instances and default test\n    contexts don\'t match up. It appears that in many cases fake_policy\n    was just modified to whatever makes tests pass, which makes it\n    dangerous to be used in tree. Long term a NullPolicy fixture might\n    be better in those cases.\n\n    """'
newline|'\n'
DECL|member|_prepare_policy
name|'def'
name|'_prepare_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'policy_dir'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'TempDir'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'policy_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'policy_dir'
op|'.'
name|'path'
op|','
nl|'\n'
string|"'policy.json'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'policy_file'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'.'
name|'write'
op|'('
name|'fake_policy'
op|'.'
name|'policy_data'
op|')'
newline|'\n'
dedent|''
name|'CONF'
op|'.'
name|'set_override'
op|'('
string|"'policy_dirs'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RoleBasedPolicyFixture
dedent|''
dedent|''
name|'class'
name|'RoleBasedPolicyFixture'
op|'('
name|'RealPolicyFixture'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Load a modified policy which allows all actions only be a single roll.\n\n    This fixture can be used for testing role based permissions as it\n    provides a version of the policy which stomps over all previous\n    declaration and makes every action only available to a single\n    role.\n\n    NOTE(sdague): we could probably do this simpler by only loading a\n    single default rule.\n\n    """'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'role'
op|'='
string|'"admin"'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RoleBasedPolicyFixture'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'role'
op|'='
name|'role'
newline|'\n'
nl|'\n'
DECL|member|_prepare_policy
dedent|''
name|'def'
name|'_prepare_policy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'policy'
op|'='
name|'jsonutils'
op|'.'
name|'load'
op|'('
name|'open'
op|'('
name|'CONF'
op|'.'
name|'policy_file'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Convert all actions to require specified role'
nl|'\n'
name|'for'
name|'action'
op|','
name|'rule'
name|'in'
name|'policy'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'policy'
op|'['
name|'action'
op|']'
op|'='
string|"'role:%s'"
op|'%'
name|'self'
op|'.'
name|'role'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'policy_dir'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'TempDir'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'policy_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'policy_dir'
op|'.'
name|'path'
op|','
nl|'\n'
string|"'policy.json'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'policy_file'
op|','
string|"'w'"
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'jsonutils'
op|'.'
name|'dump'
op|'('
name|'policy'
op|','
name|'f'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nUnit Tests for remote procedure calls using kombu\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'impl_kombu'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'rpc'
name|'import'
name|'common'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.tests.rpc'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcKombuTestCase
name|'class'
name|'RpcKombuTestCase'
op|'('
name|'common'
op|'.'
name|'_BaseRpcTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'rpc'
op|'='
name|'impl_kombu'
newline|'\n'
name|'super'
op|'('
name|'RpcKombuTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RpcKombuTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reusing_connection
dedent|''
name|'def'
name|'test_reusing_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that reusing a connection returns same one."""'
newline|'\n'
name|'conn_context'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
name|'new'
op|'='
name|'False'
op|')'
newline|'\n'
name|'conn1'
op|'='
name|'conn_context'
op|'.'
name|'connection'
newline|'\n'
name|'conn_context'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'conn_context'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
name|'new'
op|'='
name|'False'
op|')'
newline|'\n'
name|'conn2'
op|'='
name|'conn_context'
op|'.'
name|'connection'
newline|'\n'
name|'conn_context'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conn1'
op|','
name|'conn2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_topic_send_receive
dedent|''
name|'def'
name|'test_topic_send_receive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test sending to a topic exchange/queue"""'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
string|"'topic test message'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'received_message'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|_callback
name|'def'
name|'_callback'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'received_message'
op|'='
name|'message'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'.'
name|'declare_topic_consumer'
op|'('
string|"'a_topic'"
op|','
name|'_callback'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'topic_send'
op|'('
string|"'a_topic'"
op|','
name|'message'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'consume'
op|'('
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'received_message'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_direct_send_receive
dedent|''
name|'def'
name|'test_direct_send_receive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test sending to a direct exchange/queue"""'
newline|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
string|"'direct test message'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'received_message'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|_callback
name|'def'
name|'_callback'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'received_message'
op|'='
name|'message'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'.'
name|'declare_direct_consumer'
op|'('
string|"'a_direct'"
op|','
name|'_callback'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'direct_send'
op|'('
string|"'a_direct'"
op|','
name|'message'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'consume'
op|'('
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'received_message'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_test'
op|'('
string|'"kombu memory transport seems buggy with fanout queues "'
nl|'\n'
string|'"as this test passes when you use rabbit (fake_rabbit=False)"'
op|')'
newline|'\n'
DECL|member|test_fanout_send_receive
name|'def'
name|'test_fanout_send_receive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test sending to a fanout exchange and consuming from 2 queues"""'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
op|')'
newline|'\n'
name|'conn2'
op|'='
name|'self'
op|'.'
name|'rpc'
op|'.'
name|'create_connection'
op|'('
op|')'
newline|'\n'
name|'message'
op|'='
string|"'fanout test message'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'received_message'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|_callback
name|'def'
name|'_callback'
op|'('
name|'message'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'received_message'
op|'='
name|'message'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'.'
name|'declare_fanout_consumer'
op|'('
string|"'a_fanout'"
op|','
name|'_callback'
op|')'
newline|'\n'
name|'conn2'
op|'.'
name|'declare_fanout_consumer'
op|'('
string|"'a_fanout'"
op|','
name|'_callback'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'fanout_send'
op|'('
string|"'a_fanout'"
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'.'
name|'consume'
op|'('
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'received_message'
op|','
name|'message'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'received_message'
op|'='
name|'None'
newline|'\n'
name|'conn2'
op|'.'
name|'consume'
op|'('
name|'limit'
op|'='
number|'1'
op|')'
newline|'\n'
name|'conn2'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'received_message'
op|','
name|'message'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

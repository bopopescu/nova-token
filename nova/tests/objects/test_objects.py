begin_unit
comment|'#    Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'inspect'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pprint'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
name|'from'
name|'testtools'
name|'import'
name|'matchers'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'rpcapi'
name|'as'
name|'conductor_rpcapi'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_notifier'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'log'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyOwnedObject
name|'class'
name|'MyOwnedObject'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'baz'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyObj
dedent|''
name|'class'
name|'MyObj'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.6'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'bar'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'missing'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'readonly'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|','
name|'read_only'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'rel_object'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyOwnedObject'"
op|','
name|'nullable'
op|'='
name|'True'
op|')'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_from_db_object
name|'def'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'obj'
op|','
name|'db_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'db_obj'
op|'['
string|"'foo'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'bar'
op|'='
name|'db_obj'
op|'['
string|"'bar'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'missing'
op|'='
name|'db_obj'
op|'['
string|"'missing'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'readonly'
op|'='
number|'1'
newline|'\n'
name|'return'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|obj_load_attr
dedent|''
name|'def'
name|'obj_load_attr'
op|'('
name|'self'
op|','
name|'attrname'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'setattr'
op|'('
name|'self'
op|','
name|'attrname'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|query
name|'def'
name|'query'
op|'('
name|'cls'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'cls'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'obj'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|marco
name|'def'
name|'marco'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'polo'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|_update_test
name|'def'
name|'_update_test'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'context'
op|'.'
name|'project_id'
op|'=='
string|"'alternate'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bar'
op|'='
string|"'alternate-context'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'bar'
op|'='
string|"'updated'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|refresh
name|'def'
name|'refresh'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'foo'
op|'='
number|'321'
newline|'\n'
name|'self'
op|'.'
name|'bar'
op|'='
string|"'refreshed'"
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|modify_save_modify
name|'def'
name|'modify_save_modify'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'bar'
op|'='
string|"'meow'"
newline|'\n'
name|'self'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
number|'42'
newline|'\n'
name|'self'
op|'.'
name|'rel_object'
op|'='
name|'MyOwnedObject'
op|'('
name|'baz'
op|'='
number|'42'
op|')'
newline|'\n'
nl|'\n'
DECL|member|obj_make_compatible
dedent|''
name|'def'
name|'obj_make_compatible'
op|'('
name|'self'
op|','
name|'primitive'
op|','
name|'target_version'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(danms): Simulate an older version that had a different'
nl|'\n'
comment|"# format for the 'bar' attribute"
nl|'\n'
indent|'        '
name|'if'
name|'target_version'
op|'=='
string|"'1.1'"
name|'and'
string|"'bar'"
name|'in'
name|'primitive'
op|':'
newline|'\n'
indent|'            '
name|'primitive'
op|'['
string|"'bar'"
op|']'
op|'='
string|"'old%s'"
op|'%'
name|'primitive'
op|'['
string|"'bar'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyObjDiffVers
dedent|''
dedent|''
dedent|''
name|'class'
name|'MyObjDiffVers'
op|'('
name|'MyObj'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.5'"
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'MyObj'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyObj2
dedent|''
dedent|''
name|'class'
name|'MyObj2'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'MyObj'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|query
name|'def'
name|'query'
op|'('
name|'cls'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RandomMixInWithNoFields
dedent|''
dedent|''
name|'class'
name|'RandomMixInWithNoFields'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used to test object inheritance using a mixin that has no fields."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSubclassedObject
dedent|''
name|'class'
name|'TestSubclassedObject'
op|'('
name|'RandomMixInWithNoFields'
op|','
name|'MyObj'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'    '
name|'fields'
op|'='
op|'{'
string|"'new_field'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMetaclass
dedent|''
name|'class'
name|'TestMetaclass'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_obj_tracking
indent|'    '
name|'def'
name|'test_obj_tracking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'six'
op|'.'
name|'add_metaclass'
op|'('
name|'base'
op|'.'
name|'NovaObjectMetaclass'
op|')'
newline|'\n'
DECL|class|NewBaseClass
name|'class'
name|'NewBaseClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'cls'
op|'.'
name|'__name__'
newline|'\n'
nl|'\n'
DECL|class|Fake1TestObj1
dedent|''
dedent|''
name|'class'
name|'Fake1TestObj1'
op|'('
name|'NewBaseClass'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'fake1'"
newline|'\n'
nl|'\n'
DECL|class|Fake1TestObj2
dedent|''
dedent|''
name|'class'
name|'Fake1TestObj2'
op|'('
name|'Fake1TestObj1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|Fake1TestObj3
dedent|''
name|'class'
name|'Fake1TestObj3'
op|'('
name|'Fake1TestObj1'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
nl|'\n'
DECL|class|Fake2TestObj1
dedent|''
name|'class'
name|'Fake2TestObj1'
op|'('
name|'NewBaseClass'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|obj_name
name|'def'
name|'obj_name'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'fake2'"
newline|'\n'
nl|'\n'
DECL|class|Fake1TestObj4
dedent|''
dedent|''
name|'class'
name|'Fake1TestObj4'
op|'('
name|'Fake1TestObj3'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
nl|'\n'
DECL|class|Fake2TestObj2
dedent|''
name|'class'
name|'Fake2TestObj2'
op|'('
name|'Fake2TestObj1'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
nl|'\n'
DECL|class|Fake1TestObj5
dedent|''
name|'class'
name|'Fake1TestObj5'
op|'('
name|'Fake1TestObj1'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'            '
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
nl|'\n'
comment|'# Newest versions first in the list. Duplicate versions take the'
nl|'\n'
comment|'# newest object.'
nl|'\n'
dedent|''
name|'expected'
op|'='
op|'{'
string|"'fake1'"
op|':'
op|'['
name|'Fake1TestObj4'
op|','
name|'Fake1TestObj5'
op|','
name|'Fake1TestObj2'
op|']'
op|','
nl|'\n'
string|"'fake2'"
op|':'
op|'['
name|'Fake2TestObj2'
op|','
name|'Fake2TestObj1'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'NewBaseClass'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
comment|'# The following should work, also.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake1TestObj1'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake1TestObj2'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake1TestObj3'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake1TestObj4'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake1TestObj5'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake2TestObj1'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'Fake2TestObj2'
op|'.'
name|'_obj_classes'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_field_checking
dedent|''
name|'def'
name|'test_field_checking'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|create_class
indent|'        '
name|'def'
name|'create_class'
op|'('
name|'field'
op|')'
op|':'
newline|'\n'
DECL|class|TestField
indent|'            '
name|'class'
name|'TestField'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|VERSION
indent|'                '
name|'VERSION'
op|'='
string|"'1.5'"
newline|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'field'
op|'('
op|')'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'TestField'
newline|'\n'
nl|'\n'
dedent|''
name|'create_class'
op|'('
name|'fields'
op|'.'
name|'IPV4AndV6AddressField'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ObjectFieldInvalid'
op|','
nl|'\n'
name|'create_class'
op|','
name|'fields'
op|'.'
name|'IPV4AndV6Address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ObjectFieldInvalid'
op|','
nl|'\n'
name|'create_class'
op|','
name|'int'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjToPrimitive
dedent|''
dedent|''
name|'class'
name|'TestObjToPrimitive'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_list
indent|'    '
name|'def'
name|'test_obj_to_primitive_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyObjElement
indent|'        '
name|'class'
name|'MyObjElement'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'foo'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'super'
op|'('
name|'MyObjElement'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'foo'
newline|'\n'
nl|'\n'
DECL|class|MyList
dedent|''
dedent|''
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObjElement'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mylist'
op|'='
name|'MyList'
op|'('
op|')'
newline|'\n'
name|'mylist'
op|'.'
name|'objects'
op|'='
op|'['
name|'MyObjElement'
op|'('
number|'1'
op|')'
op|','
name|'MyObjElement'
op|'('
number|'2'
op|')'
op|','
name|'MyObjElement'
op|'('
number|'3'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
nl|'\n'
op|'['
name|'x'
op|'['
string|"'foo'"
op|']'
name|'for'
name|'x'
name|'in'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'mylist'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_dict
dedent|''
name|'def'
name|'test_obj_to_primitive_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'myobj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|','
name|'bar'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
string|"'bar'"
op|':'
string|"'foo'"
op|'}'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'myobj'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_recursive
dedent|''
name|'def'
name|'test_obj_to_primitive_recursive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyList
indent|'        '
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyObj'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'mylist'
op|'='
name|'MyList'
op|'('
name|'objects'
op|'='
op|'['
name|'MyObj'
op|'('
op|')'
op|','
name|'MyObj'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'value'
name|'in'
name|'enumerate'
op|'('
name|'mylist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'value'
op|'.'
name|'foo'
op|'='
name|'i'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|'{'
string|"'foo'"
op|':'
number|'0'
op|'}'
op|','
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|']'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'mylist'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_to_primitive_with_ip_addr
dedent|''
name|'def'
name|'test_obj_to_primitive_with_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|TestObject
indent|'        '
name|'class'
name|'TestObject'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'addr'"
op|':'
name|'fields'
op|'.'
name|'IPAddressField'
op|'('
op|')'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'fields'
op|'.'
name|'IPNetworkField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'TestObject'
op|'('
name|'addr'
op|'='
string|"'1.2.3.4'"
op|','
name|'cidr'
op|'='
string|"'1.1.1.1/16'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'addr'"
op|':'
string|"'1.2.3.4'"
op|','
string|"'cidr'"
op|':'
string|"'1.1.1.1/16'"
op|'}'
op|','
nl|'\n'
name|'base'
op|'.'
name|'obj_to_primitive'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjMakeList
dedent|''
dedent|''
name|'class'
name|'TestObjMakeList'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_list
indent|'    '
name|'def'
name|'test_obj_make_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyList
indent|'        '
name|'class'
name|'MyList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'db_objs'
op|'='
op|'['
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
string|"'bar'"
op|':'
string|"'baz'"
op|','
string|"'missing'"
op|':'
string|"'banana'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'foo'"
op|':'
number|'2'
op|','
string|"'bar'"
op|':'
string|"'bat'"
op|','
string|"'missing'"
op|':'
string|"'apple'"
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'mylist'
op|'='
name|'base'
op|'.'
name|'obj_make_list'
op|'('
string|"'ctxt'"
op|','
name|'MyList'
op|'('
op|')'
op|','
name|'MyObj'
op|','
name|'db_objs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'mylist'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ctxt'"
op|','
name|'mylist'
op|'.'
name|'_context'
op|')'
newline|'\n'
name|'for'
name|'index'
op|','
name|'item'
name|'in'
name|'enumerate'
op|'('
name|'mylist'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'foo'"
op|']'
op|','
name|'item'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'bar'"
op|']'
op|','
name|'item'
op|'.'
name|'bar'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_objs'
op|'['
name|'index'
op|']'
op|'['
string|"'missing'"
op|']'
op|','
name|'item'
op|'.'
name|'missing'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compare_obj
dedent|''
dedent|''
dedent|''
name|'def'
name|'compare_obj'
op|'('
name|'test'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'None'
op|','
name|'allow_missing'
op|'='
name|'None'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Compare a NovaObject and a dict-like database object.\n\n    This automatically converts TZ-aware datetimes and iterates over\n    the fields of the object.\n\n    :param:test: The TestCase doing the comparison\n    :param:obj: The NovaObject to examine\n    :param:db_obj: The dict-like database object to use as reference\n    :param:subs: A dict of objkey=dbkey field substitutions\n    :param:allow_missing: A list of fields that may not be in db_obj\n    :param:comparators: Map of comparator functions to use for certain fields\n    """'
newline|'\n'
nl|'\n'
name|'if'
name|'subs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'subs'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'if'
name|'allow_missing'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'allow_missing'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'if'
name|'comparators'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'comparators'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'obj'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'key'
name|'in'
name|'allow_missing'
name|'and'
name|'not'
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'continue'
newline|'\n'
dedent|''
name|'obj_val'
op|'='
name|'obj'
op|'['
name|'key'
op|']'
newline|'\n'
name|'db_key'
op|'='
name|'subs'
op|'.'
name|'get'
op|'('
name|'key'
op|','
name|'key'
op|')'
newline|'\n'
name|'db_val'
op|'='
name|'db_obj'
op|'['
name|'db_key'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'obj_val'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj_val'
op|'='
name|'obj_val'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'key'
name|'in'
name|'comparators'
op|':'
newline|'\n'
indent|'            '
name|'comparator'
op|'='
name|'comparators'
op|'['
name|'key'
op|']'
newline|'\n'
name|'comparator'
op|'('
name|'db_val'
op|','
name|'obj_val'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'test'
op|'.'
name|'assertEqual'
op|'('
name|'db_val'
op|','
name|'obj_val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_BaseTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'_BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remote_object_calls'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake-user'"
op|','
string|"'fake-project'"
op|')'
newline|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|compare_obj
dedent|''
name|'def'
name|'compare_obj'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'None'
op|','
name|'allow_missing'
op|'='
name|'None'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compare_obj'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'db_obj'
op|','
name|'subs'
op|'='
name|'subs'
op|','
name|'allow_missing'
op|'='
name|'allow_missing'
op|','
nl|'\n'
name|'comparators'
op|'='
name|'comparators'
op|')'
newline|'\n'
nl|'\n'
DECL|member|json_comparator
dedent|''
name|'def'
name|'json_comparator'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'obj_val'
op|')'
op|':'
newline|'\n'
comment|'# json-ify an object field for comparison with its db str'
nl|'\n'
comment|'# equivalent'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'obj_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|str_comparator
dedent|''
name|'def'
name|'str_comparator'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'obj_val'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Compare an object field to a string in the db by performing\n        a simple coercion on the object field value.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'str'
op|'('
name|'obj_val'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertNotIsInstance
dedent|''
name|'def'
name|'assertNotIsInstance'
op|'('
name|'self'
op|','
name|'obj'
op|','
name|'cls'
op|','
name|'msg'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Python < v2.7 compatibility.  Assert \'not isinstance(obj, cls)."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'='
name|'super'
op|'('
name|'_BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'assertNotIsInstance'
newline|'\n'
dedent|''
name|'except'
name|'AttributeError'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'obj'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'Not'
op|'('
name|'matchers'
op|'.'
name|'IsInstance'
op|'('
name|'cls'
op|')'
op|')'
op|','
nl|'\n'
name|'message'
op|'='
name|'msg'
name|'or'
string|"''"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'f'
op|'('
name|'obj'
op|','
name|'cls'
op|','
name|'msg'
op|'='
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_LocalTest
dedent|''
dedent|''
dedent|''
name|'class'
name|'_LocalTest'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_LocalTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# Just in case'
nl|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|assertRemotes
dedent|''
name|'def'
name|'assertRemotes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'remote_object_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'contextlib'
op|'.'
name|'contextmanager'
newline|'\n'
DECL|function|things_temporarily_local
name|'def'
name|'things_temporarily_local'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# Temporarily go non-remote so the conductor handles'
nl|'\n'
comment|'# this request directly'
nl|'\n'
indent|'    '
name|'_api'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
newline|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'None'
newline|'\n'
name|'yield'
newline|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'_api'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_RemoteTest
dedent|''
name|'class'
name|'_RemoteTest'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_testable_conductor
indent|'    '
name|'def'
name|'_testable_conductor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conductor_service'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'remote_object_calls'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'orig_object_class_action'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
op|'.'
name|'object_class_action'
newline|'\n'
name|'orig_object_action'
op|'='
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
op|'.'
name|'object_action'
newline|'\n'
nl|'\n'
DECL|function|fake_object_class_action
name|'def'
name|'fake_object_class_action'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remote_object_calls'
op|'.'
name|'append'
op|'('
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'objname'"
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'objmethod'"
op|')'
op|')'
op|')'
newline|'\n'
name|'with'
name|'things_temporarily_local'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'orig_object_class_action'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'result'
op|','
name|'context'
op|'='
name|'args'
op|'['
number|'0'
op|']'
op|')'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'result'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
name|'else'
name|'result'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
op|','
string|"'object_class_action'"
op|','
nl|'\n'
name|'fake_object_class_action'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_object_action
name|'def'
name|'fake_object_action'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'remote_object_calls'
op|'.'
name|'append'
op|'('
op|'('
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'objinst'"
op|')'
op|','
nl|'\n'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'objmethod'"
op|')'
op|')'
op|')'
newline|'\n'
name|'with'
name|'things_temporarily_local'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'result'
op|'='
name|'orig_object_action'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'result'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'conductor_service'
op|'.'
name|'manager'
op|','
string|"'object_action'"
op|','
nl|'\n'
name|'fake_object_action'
op|')'
newline|'\n'
nl|'\n'
comment|'# Things are remoted by default in this session'
nl|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'indirection_api'
op|'='
name|'conductor_rpcapi'
op|'.'
name|'ConductorAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# To make sure local and remote contexts match'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|'.'
name|'RequestContextSerializer'
op|','
nl|'\n'
string|"'serialize_context'"
op|','
nl|'\n'
name|'lambda'
name|'s'
op|','
name|'c'
op|':'
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|'.'
name|'RequestContextSerializer'
op|','
nl|'\n'
string|"'deserialize_context'"
op|','
nl|'\n'
name|'lambda'
name|'s'
op|','
name|'c'
op|':'
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_RemoteTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_testable_conductor'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertRemotes
dedent|''
name|'def'
name|'assertRemotes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'self'
op|'.'
name|'remote_object_calls'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TestObject
dedent|''
dedent|''
name|'class'
name|'_TestObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|test_object_attrs_in_init
indent|'    '
name|'def'
name|'test_object_attrs_in_init'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Spot check a few'
nl|'\n'
indent|'        '
name|'objects'
op|'.'
name|'Instance'
newline|'\n'
name|'objects'
op|'.'
name|'InstanceInfoCache'
newline|'\n'
name|'objects'
op|'.'
name|'SecurityGroup'
newline|'\n'
comment|'# Now check the test one in this file. Should be newest version'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'objects'
op|'.'
name|'MyObj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_type_error
dedent|''
name|'def'
name|'test_hydration_type_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
string|"'a'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration
dedent|''
name|'def'
name|'test_hydration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'real_method'
op|'='
name|'MyObj'
op|'.'
name|'_obj_from_primitive'
newline|'\n'
nl|'\n'
DECL|function|_obj_from_primitive
name|'def'
name|'_obj_from_primitive'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'real_method'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'MyObj'
op|','
string|"'_obj_from_primitive'"
op|')'
name|'as'
name|'ofp'
op|':'
newline|'\n'
indent|'            '
name|'ofp'
op|'.'
name|'side_effect'
op|'='
name|'_obj_from_primitive'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'ofp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'None'
op|','
string|"'1.5'"
op|','
name|'primitive'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_version_different
dedent|''
name|'def'
name|'test_hydration_version_different'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.2'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.2'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hydration_bad_ns
dedent|''
name|'def'
name|'test_hydration_bad_ns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'primitive'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|','
nl|'\n'
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|','
name|'primitive'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dehydration
dedent|''
name|'def'
name|'test_dehydration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_property
dedent|''
name|'def'
name|'test_object_property'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_property_type_error
dedent|''
name|'def'
name|'test_object_property_type_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fail
name|'def'
name|'fail'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'foo'
op|'='
string|"'a'"
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'fail'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_dict_syntax
dedent|''
name|'def'
name|'test_object_dict_syntax'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'['
string|"'foo'"
op|']'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'obj'
op|'.'
name|'items'
op|'('
op|')'
op|','
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'bar'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'foo'"
op|','
number|'123'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'list'
op|'('
name|'obj'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
op|','
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'['
op|'('
string|"'bar'"
op|','
string|"'bar'"
op|')'
op|','
op|'('
string|"'foo'"
op|','
number|'123'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_load
dedent|''
name|'def'
name|'test_load'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_load_in_base
dedent|''
name|'def'
name|'test_load_in_base'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Foo
indent|'        '
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foobar'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
op|')'
newline|'\n'
comment|"# NOTE(danms): Can't use assertRaisesRegexp() because of py26"
nl|'\n'
name|'raised'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'.'
name|'foobar'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
name|'as'
name|'ex'
op|':'
newline|'\n'
DECL|variable|raised
indent|'            '
name|'raised'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'raised'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'foobar'"
op|','
name|'six'
op|'.'
name|'text_type'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_loaded_in_primitive
dedent|''
name|'def'
name|'test_loaded_in_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.changes'"
op|':'
op|'['
string|"'bar'"
op|']'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
op|'{'
string|"'foo'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'bar'"
op|':'
string|"'loaded!'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changes_in_primitive
dedent|''
name|'def'
name|'test_changes_in_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nova_object.changes'"
op|','
name|'primitive'
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'MyObj'
op|'.'
name|'obj_from_primitive'
op|'('
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj2'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj2'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name
dedent|''
name|'def'
name|'test_obj_class_from_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.5'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name_latest_compatible
dedent|''
name|'def'
name|'test_obj_class_from_name_latest_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'obj'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unknown_objtype
dedent|''
name|'def'
name|'test_unknown_objtype'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'UnsupportedObjectError'
op|','
nl|'\n'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|','
string|"'foo'"
op|','
string|"'1.0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_class_from_name_supported_version
dedent|''
name|'def'
name|'test_obj_class_from_name_supported_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'error'
op|'='
name|'None'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_class_from_name'
op|'('
string|"'MyObj'"
op|','
string|"'1.25'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
name|'as'
name|'error'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'error'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'1.6'"
op|','
name|'error'
op|'.'
name|'kwargs'
op|'['
string|"'supported'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_alternate_context
dedent|''
name|'def'
name|'test_with_alternate_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'foo'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'ctxt2'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'bar'"
op|','
string|"'alternate'"
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'ctxt1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|'('
name|'ctxt2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'alternate-context'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_orphaned_object
dedent|''
name|'def'
name|'test_orphaned_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_context'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'OrphanedObjectError'
op|','
nl|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_1
dedent|''
name|'def'
name|'test_changed_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_2
dedent|''
name|'def'
name|'test_changed_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'save'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_3
dedent|''
name|'def'
name|'test_changed_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'321'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'refreshed'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_4
dedent|''
name|'def'
name|'test_changed_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
string|"'something'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'bar'"
op|']'
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'modify_save_modify'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|','
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'rel_object'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'meow'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'obj'
op|'.'
name|'rel_object'
op|','
name|'MyOwnedObject'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_changed_with_sub_object
dedent|''
name|'def'
name|'test_changed_with_sub_object'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|ParentObject
indent|'        '
name|'class'
name|'ParentObject'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
string|"'bar'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'MyObj'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'obj'
op|'='
name|'ParentObject'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'bar'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
name|'bar'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'bar'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_static_result
dedent|''
name|'def'
name|'test_static_result'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'obj'
op|'.'
name|'marco'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
string|"'polo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_updates
dedent|''
name|'def'
name|'test_updates'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'foo'
op|','
number|'1'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'_update_test'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'updated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_base_attributes
dedent|''
name|'def'
name|'test_base_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dt'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'1955'
op|','
number|'11'
op|','
number|'5'
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'created_at'
op|'='
name|'dt'
op|','
name|'updated_at'
op|'='
name|'dt'
op|','
name|'deleted_at'
op|'='
name|'None'
op|','
nl|'\n'
name|'deleted'
op|'='
name|'False'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'nova_object.name'"
op|':'
string|"'MyObj'"
op|','
nl|'\n'
string|"'nova_object.namespace'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'nova_object.version'"
op|':'
string|"'1.6'"
op|','
nl|'\n'
string|"'nova_object.changes'"
op|':'
nl|'\n'
op|'['
string|"'deleted'"
op|','
string|"'created_at'"
op|','
string|"'deleted_at'"
op|','
string|"'updated_at'"
op|']'
op|','
nl|'\n'
string|"'nova_object.data'"
op|':'
nl|'\n'
op|'{'
string|"'created_at'"
op|':'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'dt'
op|')'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'timeutils'
op|'.'
name|'isotime'
op|'('
name|'dt'
op|')'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'False'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_contains
dedent|''
name|'def'
name|'test_contains'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'foo'"
op|','
name|'obj'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'foo'"
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'does_not_exist'"
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_attr_is_set
dedent|''
name|'def'
name|'test_obj_attr_is_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'bar'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'obj_attr_is_set'
op|','
string|"'bang'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'1'
op|')'
newline|'\n'
comment|'# Foo has value, should not get the default'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'foo'"
op|','
number|'2'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Foo has value, should return the value without error'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'foo'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# Bar is not loaded, so we should get the default'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|','
string|"'not-loaded'"
op|')'
op|','
string|"'not-loaded'"
op|')'
newline|'\n'
comment|'# Bar without a default should lazy-load'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|')'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
comment|'# Bar now has a default, but loaded value should be returned'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'get'
op|'('
string|"'bar'"
op|','
string|"'not-loaded'"
op|')'
op|','
string|"'loaded!'"
op|')'
newline|'\n'
comment|'# Invalid attribute should raise AttributeError'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'get'
op|','
string|"'nothing'"
op|')'
newline|'\n'
comment|'# ...even with a default'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'AttributeError'
op|','
name|'obj'
op|'.'
name|'get'
op|','
string|"'nothing'"
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_inheritance
dedent|''
name|'def'
name|'test_object_inheritance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_fields'
op|'='
name|'base'
op|'.'
name|'NovaPersistentObject'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'myobj_fields'
op|'='
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|','
string|"'missing'"
op|','
nl|'\n'
string|"'readonly'"
op|','
string|"'rel_object'"
op|']'
op|'+'
name|'base_fields'
newline|'\n'
name|'myobj3_fields'
op|'='
op|'['
string|"'new_field'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'issubclass'
op|'('
name|'TestSubclassedObject'
op|','
name|'MyObj'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'myobj_fields'
op|')'
op|','
name|'len'
op|'('
name|'MyObj'
op|'.'
name|'fields'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'myobj_fields'
op|')'
op|','
name|'set'
op|'('
name|'MyObj'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'myobj_fields'
op|')'
op|'+'
name|'len'
op|'('
name|'myobj3_fields'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'TestSubclassedObject'
op|'.'
name|'fields'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'myobj_fields'
op|')'
op|'|'
name|'set'
op|'('
name|'myobj3_fields'
op|')'
op|','
nl|'\n'
name|'set'
op|'('
name|'TestSubclassedObject'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_changes
dedent|''
name|'def'
name|'test_get_changes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'foo'
op|'='
number|'123'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'123'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'bar'
op|'='
string|"'test'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'foo'"
op|':'
number|'123'
op|','
string|"'bar'"
op|':'
string|"'test'"
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'obj'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_fields
dedent|''
name|'def'
name|'test_obj_fields'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|TestObj
indent|'        '
name|'class'
name|'TestObj'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'Integer'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
DECL|variable|obj_extra_fields
name|'obj_extra_fields'
op|'='
op|'['
string|"'bar'"
op|']'
newline|'\n'
nl|'\n'
op|'@'
name|'property'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'this is bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'obj'
op|'='
name|'TestObj'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|','
name|'obj'
op|'.'
name|'obj_fields'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_constructor
dedent|''
name|'def'
name|'test_obj_constructor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'123'
op|','
name|'obj'
op|'.'
name|'foo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'abc'"
op|','
name|'obj'
op|'.'
name|'bar'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_read_only
dedent|''
name|'def'
name|'test_obj_read_only'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|','
name|'foo'
op|'='
number|'123'
op|','
name|'bar'
op|'='
string|"'abc'"
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'readonly'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ReadOnlyFieldError'
op|','
name|'setattr'
op|','
nl|'\n'
name|'obj'
op|','
string|"'readonly'"
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_repr
dedent|''
name|'def'
name|'test_obj_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
name|'MyObj'
op|'('
name|'foo'
op|'='
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'MyObj(bar=<?>,created_at=<?>,deleted=<?>,'"
nl|'\n'
string|"'deleted_at=<?>,foo=123,missing=<?>,readonly=<?>,'"
nl|'\n'
string|"'rel_object=<?>,updated_at=<?>)'"
op|','
name|'repr'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObject
dedent|''
dedent|''
name|'class'
name|'TestObject'
op|'('
name|'_LocalTest'
op|','
name|'_TestObject'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestRemoteObject
dedent|''
name|'class'
name|'TestRemoteObject'
op|'('
name|'_RemoteTest'
op|','
name|'_TestObject'
op|')'
op|':'
newline|'\n'
DECL|member|test_major_version_mismatch
indent|'    '
name|'def'
name|'test_major_version_mismatch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'2.0'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|','
nl|'\n'
name|'MyObj2'
op|'.'
name|'query'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_minor_version_greater
dedent|''
name|'def'
name|'test_minor_version_greater'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.7'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'IncompatibleObjectVersion'
op|','
nl|'\n'
name|'MyObj2'
op|'.'
name|'query'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_minor_version_less
dedent|''
name|'def'
name|'test_minor_version_less'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.2'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj2'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'obj'
op|'.'
name|'bar'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRemotes'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compat
dedent|''
name|'def'
name|'test_compat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MyObj2'
op|'.'
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj2'
op|'.'
name|'query'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'oldbar'"
op|','
name|'obj'
op|'.'
name|'bar'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectListBase
dedent|''
dedent|''
name|'class'
name|'TestObjectListBase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_list_like_operations
indent|'    '
name|'def'
name|'test_list_like_operations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|MyElement
indent|'        '
name|'class'
name|'MyElement'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'foo'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'super'
op|'('
name|'MyElement'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'foo'
op|'='
name|'foo'
newline|'\n'
nl|'\n'
DECL|class|Foo
dedent|''
dedent|''
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'MyElement'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'objlist'
op|'='
name|'Foo'
op|'('
name|'context'
op|'='
string|"'foo'"
op|','
nl|'\n'
DECL|variable|objects
name|'objects'
op|'='
op|'['
name|'MyElement'
op|'('
number|'1'
op|')'
op|','
name|'MyElement'
op|'('
number|'2'
op|')'
op|','
name|'MyElement'
op|'('
number|'3'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'objlist'
op|')'
op|','
name|'objlist'
op|'.'
name|'objects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'objlist'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'objlist'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|','
name|'objlist'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'list'
op|'('
name|'objlist'
op|'['
op|':'
number|'1'
op|']'
op|')'
op|','
op|'['
name|'objlist'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'objlist'
op|'['
op|':'
number|'1'
op|']'
op|'.'
name|'_context'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'objlist'
op|'['
number|'2'
op|']'
op|','
name|'objlist'
op|'.'
name|'objects'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'objlist'
op|'.'
name|'count'
op|'('
name|'objlist'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'objlist'
op|'.'
name|'index'
op|'('
name|'objlist'
op|'.'
name|'objects'
op|'['
number|'1'
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'objlist'
op|'.'
name|'sort'
op|'('
name|'key'
op|'='
name|'lambda'
name|'x'
op|':'
name|'x'
op|'.'
name|'foo'
op|','
name|'reverse'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
number|'3'
op|','
number|'2'
op|','
number|'1'
op|']'
op|','
nl|'\n'
op|'['
name|'x'
op|'.'
name|'foo'
name|'for'
name|'x'
name|'in'
name|'objlist'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serialization
dedent|''
name|'def'
name|'test_serialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Foo
indent|'        '
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'Bar'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|Bar
dedent|''
name|'class'
name|'Bar'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'Field'
op|'('
name|'fields'
op|'.'
name|'String'
op|'('
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
name|'objects'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
string|"'abc'"
op|':'
newline|'\n'
DECL|variable|bar
indent|'            '
name|'bar'
op|'='
name|'Bar'
op|'('
name|'foo'
op|'='
name|'i'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'bar'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'obj2'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'obj_from_primitive'
op|'('
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'obj'
name|'is'
name|'obj2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'x'
op|'.'
name|'foo'
name|'for'
name|'x'
name|'in'
name|'obj'
op|']'
op|','
nl|'\n'
op|'['
name|'y'
op|'.'
name|'foo'
name|'for'
name|'y'
name|'in'
name|'obj2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_object_list_version_mappings
dedent|''
name|'def'
name|'_test_object_list_version_mappings'
op|'('
name|'self'
op|','
name|'list_obj_class'
op|')'
op|':'
newline|'\n'
comment|'# Figure out what sort of object this list is for'
nl|'\n'
indent|'        '
name|'list_field'
op|'='
name|'list_obj_class'
op|'.'
name|'fields'
op|'['
string|"'objects'"
op|']'
newline|'\n'
name|'item_obj_field'
op|'='
name|'list_field'
op|'.'
name|'_type'
op|'.'
name|'_element_type'
newline|'\n'
name|'item_obj_name'
op|'='
name|'item_obj_field'
op|'.'
name|'_type'
op|'.'
name|'_obj_name'
newline|'\n'
nl|'\n'
comment|'# Look through all object classes of this type and make sure that'
nl|'\n'
comment|'# the versions we find are covered by the parent list class'
nl|'\n'
name|'for'
name|'item_class'
name|'in'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'['
name|'item_obj_name'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
nl|'\n'
name|'item_class'
op|'.'
name|'VERSION'
op|','
nl|'\n'
name|'list_obj_class'
op|'.'
name|'child_versions'
op|'.'
name|'values'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_version_mappings
dedent|''
dedent|''
name|'def'
name|'test_object_version_mappings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Find all object list classes and make sure that they at least handle'
nl|'\n'
comment|'# all the current object versions'
nl|'\n'
indent|'        '
name|'for'
name|'obj_classes'
name|'in'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'obj_class'
name|'in'
name|'obj_classes'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'issubclass'
op|'('
name|'obj_class'
op|','
name|'base'
op|'.'
name|'ObjectListBase'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_test_object_list_version_mappings'
op|'('
name|'obj_class'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_changes
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_list_changes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Foo
indent|'        '
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'Bar'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|Bar
dedent|''
name|'class'
name|'Bar'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
name|'objects'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'objects'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'Bar'
op|'('
name|'foo'
op|'='
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'objects'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
comment|'# This should still look dirty because the child is dirty'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|'['
string|"'objects'"
op|']'
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'objects'
op|'['
number|'0'
op|']'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
comment|'# This should now look clean because the child is clean'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_initialize_objects
dedent|''
name|'def'
name|'test_initialize_objects'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Foo
indent|'        '
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'Bar'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|Bar
dedent|''
name|'class'
name|'Bar'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'obj'
op|'.'
name|'objects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
op|')'
op|','
name|'obj'
op|'.'
name|'obj_what_changed'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_repr
dedent|''
name|'def'
name|'test_obj_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Foo
indent|'        '
name|'class'
name|'Foo'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'Bar'"
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|class|Bar
dedent|''
name|'class'
name|'Bar'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
DECL|variable|fields
indent|'            '
name|'fields'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'obj'
op|'='
name|'Foo'
op|'('
name|'objects'
op|'='
op|'['
name|'Bar'
op|'('
name|'uuid'
op|'='
string|"'fake-uuid'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Foo(objects=[Bar(fake-uuid)])'"
op|','
name|'repr'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectSerializer
dedent|''
dedent|''
name|'class'
name|'TestObjectSerializer'
op|'('
name|'_BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_serialize_entity_primitive
indent|'    '
name|'def'
name|'test_serialize_entity_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'for'
name|'thing'
name|'in'
op|'('
number|'1'
op|','
string|"'foo'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'None'
op|','
name|'thing'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_primitive
dedent|''
dedent|''
name|'def'
name|'test_deserialize_entity_primitive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'for'
name|'thing'
name|'in'
op|'('
number|'1'
op|','
string|"'foo'"
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|','
op|'{'
string|"'foo'"
op|':'
string|"'bar'"
op|'}'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'None'
op|','
name|'thing'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deserialize_entity_newer_version
dedent|''
dedent|''
name|'def'
name|'test_deserialize_entity_newer_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'.'
name|'object_backport'
op|'.'
name|'return_value'
op|'='
string|"'backported'"
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'.'
name|'VERSION'
op|'='
string|"'1.25'"
newline|'\n'
name|'primitive'
op|'='
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'backported'"
op|','
name|'result'
op|')'
newline|'\n'
name|'ser'
op|'.'
name|'_conductor'
op|'.'
name|'object_backport'
op|'.'
name|'assert_called_with'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'primitive'
op|','
nl|'\n'
string|"'1.6'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_serialization
dedent|''
name|'def'
name|'test_object_serialization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'nova_object.name'"
op|','
name|'primitive'
op|')'
newline|'\n'
name|'obj2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'obj2'
op|','
name|'MyObj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'obj2'
op|'.'
name|'_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_object_serialization_iterables
dedent|''
name|'def'
name|'test_object_serialization_iterables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ser'
op|'='
name|'base'
op|'.'
name|'NovaObjectSerializer'
op|'('
op|')'
newline|'\n'
name|'obj'
op|'='
name|'MyObj'
op|'('
op|')'
newline|'\n'
name|'for'
name|'iterable'
name|'in'
op|'('
name|'list'
op|','
name|'tuple'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'='
name|'iterable'
op|'('
op|'['
name|'obj'
op|']'
op|')'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'primitive'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'primitive'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'item'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
dedent|''
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'thing2'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'thing2'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'item'
op|','
name|'MyObj'
op|')'
newline|'\n'
comment|'# dict case'
nl|'\n'
dedent|''
dedent|''
name|'thing'
op|'='
op|'{'
string|"'key'"
op|':'
name|'obj'
op|'}'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'primitive'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'primitive'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertNotIsInstance'
op|'('
name|'item'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
dedent|''
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'thing2'
op|')'
op|')'
newline|'\n'
name|'for'
name|'item'
name|'in'
name|'thing2'
op|'.'
name|'itervalues'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'item'
op|','
name|'MyObj'
op|')'
newline|'\n'
nl|'\n'
comment|'# object-action updates dict case'
nl|'\n'
dedent|''
name|'thing'
op|'='
op|'{'
string|"'foo'"
op|':'
name|'obj'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|'}'
newline|'\n'
name|'primitive'
op|'='
name|'ser'
op|'.'
name|'serialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'thing'
op|','
name|'primitive'
op|')'
newline|'\n'
name|'thing2'
op|'='
name|'ser'
op|'.'
name|'deserialize_entity'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'thing'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'thing2'
op|'['
string|"'foo'"
op|']'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# NOTE(danms): The hashes in this list should only be changed if'
nl|'\n'
comment|'# they come with a corresponding version bump in the affected'
nl|'\n'
comment|'# objects'
nl|'\n'
DECL|variable|object_data
dedent|''
dedent|''
name|'object_data'
op|'='
op|'{'
nl|'\n'
string|"'Agent'"
op|':'
string|"'1.0-c4ff8a833aee8ae44ab8aed1a171273d'"
op|','
nl|'\n'
string|"'AgentList'"
op|':'
string|"'1.0-31f07426a729311a42ff7f6246e76e25'"
op|','
nl|'\n'
string|"'Aggregate'"
op|':'
string|"'1.1-f5d477be06150529a9b2d27cc49030b5'"
op|','
nl|'\n'
string|"'AggregateList'"
op|':'
string|"'1.2-4b02a285b8612bfb86a96ff80052fb0a'"
op|','
nl|'\n'
string|"'BlockDeviceMapping'"
op|':'
string|"'1.2-9968ffe513e7672484b0f528b034cd0f'"
op|','
nl|'\n'
string|"'BlockDeviceMappingList'"
op|':'
string|"'1.3-de607d5ae2f379c75c49a125bb3b4515'"
op|','
nl|'\n'
string|"'ComputeNode'"
op|':'
string|"'1.5-57ce5a07c727ffab6c51723bb8dccbfe'"
op|','
nl|'\n'
string|"'ComputeNodeList'"
op|':'
string|"'1.4-a993fa58c16f423c72496c7555e99987'"
op|','
nl|'\n'
string|"'DNSDomain'"
op|':'
string|"'1.0-5bdc288d7c3b723ce86ede998fd5c9ba'"
op|','
nl|'\n'
string|"'DNSDomainList'"
op|':'
string|"'1.0-cfb3e7e82be661501c31099523154db4'"
op|','
nl|'\n'
string|"'EC2InstanceMapping'"
op|':'
string|"'1.0-627baaf4b12c9067200979bdc4558a99'"
op|','
nl|'\n'
string|"'EC2SnapshotMapping'"
op|':'
string|"'1.0-26cf315be1f8abab4289d4147671c836'"
op|','
nl|'\n'
string|"'EC2VolumeMapping'"
op|':'
string|"'1.0-2f8c3bf077c65a425294ec2b361c9143'"
op|','
nl|'\n'
string|"'FixedIP'"
op|':'
string|"'1.2-082fb26772ce2db783ce4934edca4652'"
op|','
nl|'\n'
string|"'FixedIPList'"
op|':'
string|"'1.2-d073a985508addd78b35ea421eb8da7c'"
op|','
nl|'\n'
string|"'Flavor'"
op|':'
string|"'1.1-096cfd023c35d07542cf732fb29b45e4'"
op|','
nl|'\n'
string|"'FlavorList'"
op|':'
string|"'1.1-a3d5551267cb8f62ff38ded125900721'"
op|','
nl|'\n'
string|"'FloatingIP'"
op|':'
string|"'1.2-27eb68b7c9c620dd5f0561b5a3be0e82'"
op|','
nl|'\n'
string|"'FloatingIPList'"
op|':'
string|"'1.3-bbc671d6259032ee362ff6ee3600d749'"
op|','
nl|'\n'
string|"'Instance'"
op|':'
string|"'1.14-1154dc29398bc3c57f053b8e449bb03d'"
op|','
nl|'\n'
string|"'InstanceAction'"
op|':'
string|"'1.1-6b1d0a6dbd522b5a83c20757ec659663'"
op|','
nl|'\n'
string|"'InstanceActionEvent'"
op|':'
string|"'1.1-42dbdba74bd06e0619ca75cd3397cd1b'"
op|','
nl|'\n'
string|"'InstanceActionEventList'"
op|':'
string|"'1.0-1d5cc958171d6ce07383c2ad6208318e'"
op|','
nl|'\n'
string|"'InstanceActionList'"
op|':'
string|"'1.0-368410fdb8d69ae20c495308535d6266'"
op|','
nl|'\n'
string|"'InstanceExternalEvent'"
op|':'
string|"'1.0-f1134523654407a875fd59b80f759ee7'"
op|','
nl|'\n'
string|"'InstanceFault'"
op|':'
string|"'1.2-313438e37e9d358f3566c85f6ddb2d3e'"
op|','
nl|'\n'
string|"'InstanceFaultList'"
op|':'
string|"'1.1-aeb598ffd0cd6aa61fca7adf0f5e900d'"
op|','
nl|'\n'
string|"'InstanceGroup'"
op|':'
string|"'1.7-b31ea31fdb452ab7810adbe789244f91'"
op|','
nl|'\n'
string|"'InstanceGroupList'"
op|':'
string|"'1.2-a474822eebc3e090012e581adcc1fa09'"
op|','
nl|'\n'
string|"'InstanceInfoCache'"
op|':'
string|"'1.5-ef64b604498bfa505a8c93747a9d8b2f'"
op|','
nl|'\n'
string|"'InstanceList'"
op|':'
string|"'1.8-16db4c93fe5b80564413b9a4f547e0d1'"
op|','
nl|'\n'
string|"'InstanceNUMACell'"
op|':'
string|"'1.0-17e6ee0a24cb6651d1b084efa3027bda'"
op|','
nl|'\n'
string|"'InstanceNUMATopology'"
op|':'
string|"'1.0-a4264388d42c21a692cb74ed8fa8bb4d'"
op|','
nl|'\n'
string|"'KeyPair'"
op|':'
string|"'1.1-3410f51950d052d861c11946a6ae621a'"
op|','
nl|'\n'
string|"'KeyPairList'"
op|':'
string|"'1.0-71132a568cc5d078ba1748a9c02c87b8'"
op|','
nl|'\n'
string|"'Migration'"
op|':'
string|"'1.1-67c47726c2c71422058cd9d149d6d3ed'"
op|','
nl|'\n'
string|"'MigrationList'"
op|':'
string|"'1.1-8c5f678edc72a592d591a13b35e54353'"
op|','
nl|'\n'
string|"'MyObj'"
op|':'
string|"'1.6-55bfc22259fd3df239e4a49fa3552c93'"
op|','
nl|'\n'
string|"'MyOwnedObject'"
op|':'
string|"'1.0-0f3d6c028543d7f3715d121db5b8e298'"
op|','
nl|'\n'
string|"'Network'"
op|':'
string|"'1.2-2ea21ede5e45bb80e7b7ac7106915c4e'"
op|','
nl|'\n'
string|"'NetworkList'"
op|':'
string|"'1.2-aa4ad23f035b97a41732ea8b3445fc5e'"
op|','
nl|'\n'
string|"'PciDevice'"
op|':'
string|"'1.1-523c46f960d93f78db55f0280b09441e'"
op|','
nl|'\n'
string|"'PciDeviceList'"
op|':'
string|"'1.0-43d6c4ea0dd77955e97b23d937a3f925'"
op|','
nl|'\n'
string|"'Quotas'"
op|':'
string|"'1.1-7897deef00e6cd3095c8916f68d24418'"
op|','
nl|'\n'
string|"'QuotasNoOp'"
op|':'
string|"'1.1-4b06fd721c586b907ddd6543a00d6c2f'"
op|','
nl|'\n'
string|"'S3ImageMapping'"
op|':'
string|"'1.0-9225943a44a91ad0349b9fd8bd3f3ce2'"
op|','
nl|'\n'
string|"'SecurityGroup'"
op|':'
string|"'1.1-bba0e72865e0953793e796571692453b'"
op|','
nl|'\n'
string|"'SecurityGroupList'"
op|':'
string|"'1.0-528e6448adfeeb78921ebeda499ab72f'"
op|','
nl|'\n'
string|"'SecurityGroupRule'"
op|':'
string|"'1.1-a9175baf7664439af1a16c2010b55576'"
op|','
nl|'\n'
string|"'SecurityGroupRuleList'"
op|':'
string|"'1.1-667fca3a9928f23d2d10e61962c55f3c'"
op|','
nl|'\n'
string|"'Service'"
op|':'
string|"'1.3-5a3df338c669e1148251431370b440ef'"
op|','
nl|'\n'
string|"'ServiceList'"
op|':'
string|"'1.1-818bc6a463721e42fbb4fbf6f68c4eeb'"
op|','
nl|'\n'
string|"'TestSubclassedObject'"
op|':'
string|"'1.6-c63feb2f2533b7d075490c04a2cc10dd'"
op|','
nl|'\n'
string|"'VirtualInterface'"
op|':'
string|"'1.0-10fdac4c704102b6d57d6936d6d790d2'"
op|','
nl|'\n'
string|"'VirtualInterfaceList'"
op|':'
string|"'1.0-accbf02628a8063c1d885077a2bf49b6'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|object_relationships
name|'object_relationships'
op|'='
op|'{'
nl|'\n'
string|"'BlockDeviceMapping'"
op|':'
op|'{'
string|"'Instance'"
op|':'
string|"'1.14'"
op|'}'
op|','
nl|'\n'
string|"'FixedIP'"
op|':'
op|'{'
string|"'Instance'"
op|':'
string|"'1.14'"
op|','
string|"'Network'"
op|':'
string|"'1.2'"
op|','
nl|'\n'
string|"'VirtualInterface'"
op|':'
string|"'1.0'"
op|'}'
op|','
nl|'\n'
string|"'FloatingIP'"
op|':'
op|'{'
string|"'FixedIP'"
op|':'
string|"'1.2'"
op|'}'
op|','
nl|'\n'
string|"'Instance'"
op|':'
op|'{'
string|"'InstanceFault'"
op|':'
string|"'1.2'"
op|','
nl|'\n'
string|"'InstanceInfoCache'"
op|':'
string|"'1.5'"
op|','
nl|'\n'
string|"'InstanceNUMATopology'"
op|':'
string|"'1.0'"
op|','
nl|'\n'
string|"'PciDeviceList'"
op|':'
string|"'1.0'"
op|','
nl|'\n'
string|"'SecurityGroupList'"
op|':'
string|"'1.0'"
op|'}'
op|','
nl|'\n'
string|"'MyObj'"
op|':'
op|'{'
string|"'MyOwnedObject'"
op|':'
string|"'1.0'"
op|'}'
op|','
nl|'\n'
string|"'SecurityGroupRule'"
op|':'
op|'{'
string|"'SecurityGroup'"
op|':'
string|"'1.1'"
op|'}'
op|','
nl|'\n'
string|"'Service'"
op|':'
op|'{'
string|"'ComputeNode'"
op|':'
string|"'1.5'"
op|'}'
op|','
nl|'\n'
string|"'TestSubclassedObject'"
op|':'
op|'{'
string|"'MyOwnedObject'"
op|':'
string|"'1.0'"
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestObjectVersions
name|'class'
name|'TestObjectVersions'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestObjectVersions'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_find_remotable_method
dedent|''
name|'def'
name|'_find_remotable_method'
op|'('
name|'self'
op|','
name|'cls'
op|','
name|'thing'
op|','
name|'parent_was_remotable'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Follow a chain of remotable things down to the original function."""'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'classmethod'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'cls'
op|','
name|'thing'
op|'.'
name|'__get__'
op|'('
name|'None'
op|','
name|'cls'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'thing'
op|')'
name|'and'
name|'hasattr'
op|'('
name|'thing'
op|','
string|"'remotable'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'cls'
op|','
name|'thing'
op|'.'
name|'original_fn'
op|','
nl|'\n'
name|'parent_was_remotable'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'parent_was_remotable'
op|':'
newline|'\n'
comment|'# We must be the first non-remotable thing underneath a stack of'
nl|'\n'
comment|'# remotable things (i.e. the actual implementation method)'
nl|'\n'
indent|'            '
name|'return'
name|'thing'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# This means the top-level thing never hit a remotable layer'
nl|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_fingerprint
dedent|''
dedent|''
name|'def'
name|'_get_fingerprint'
op|'('
name|'self'
op|','
name|'obj_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj_class'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fields'
op|'='
name|'obj_class'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'fields'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'methods'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'name'
name|'in'
name|'dir'
op|'('
name|'obj_class'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'thing'
op|'='
name|'getattr'
op|'('
name|'obj_class'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'thing'
op|')'
name|'or'
name|'isinstance'
op|'('
name|'thing'
op|','
name|'classmethod'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'method'
op|'='
name|'self'
op|'.'
name|'_find_remotable_method'
op|'('
name|'obj_class'
op|','
name|'thing'
op|')'
newline|'\n'
name|'if'
name|'method'
op|':'
newline|'\n'
indent|'                    '
name|'methods'
op|'.'
name|'append'
op|'('
op|'('
name|'name'
op|','
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'method'
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'methods'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(danms): Things that need a version bump are any fields'
nl|'\n'
comment|'# and their types, or the signatures of any remotable methods.'
nl|'\n'
comment|'# Of course, these are just the mechanical changes we can detect,'
nl|'\n'
comment|'# but many other things may require a version bump (method behavior'
nl|'\n'
comment|'# and return value changes, for example).'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'obj_class'
op|','
string|"'child_versions'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'relevant_data'
op|'='
op|'('
name|'fields'
op|','
name|'methods'
op|','
name|'obj_class'
op|'.'
name|'child_versions'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'relevant_data'
op|'='
op|'('
name|'fields'
op|','
name|'methods'
op|')'
newline|'\n'
dedent|''
name|'fingerprint'
op|'='
string|"'%s-%s'"
op|'%'
op|'('
name|'obj_class'
op|'.'
name|'VERSION'
op|','
nl|'\n'
name|'hashlib'
op|'.'
name|'md5'
op|'('
name|'str'
op|'('
name|'relevant_data'
op|')'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'fingerprint'
newline|'\n'
nl|'\n'
DECL|member|test_versions
dedent|''
name|'def'
name|'test_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fingerprints'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'fingerprints'
op|'['
name|'obj_name'
op|']'
op|'='
name|'self'
op|'.'
name|'_get_fingerprint'
op|'('
name|'obj_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'os'
op|'.'
name|'getenv'
op|'('
string|"'GENERATE_HASHES'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'file'
op|'('
string|"'object_hashes.txt'"
op|','
string|"'w'"
op|')'
op|'.'
name|'write'
op|'('
nl|'\n'
name|'pprint'
op|'.'
name|'pformat'
op|'('
name|'fingerprints'
op|')'
op|')'
newline|'\n'
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
nl|'\n'
string|"'Generated hashes in object_hashes.txt'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stored'
op|'='
name|'set'
op|'('
name|'object_data'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'computed'
op|'='
name|'set'
op|'('
name|'fingerprints'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'changed'
op|'='
name|'stored'
op|'-'
name|'computed'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'actual'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'hash'
name|'in'
name|'changed'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
name|'name'
op|']'
op|'='
name|'object_data'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'actual'
op|'['
name|'name'
op|']'
op|'='
name|'fingerprints'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|','
nl|'\n'
string|"'Some objects have changed; please make sure the '"
nl|'\n'
string|"'versions have been bumped, and then update their '"
nl|'\n'
string|"'hashes here.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_build_tree
dedent|''
name|'def'
name|'_build_tree'
op|'('
name|'self'
op|','
name|'tree'
op|','
name|'obj_class'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj_name'
op|'='
name|'obj_class'
op|'.'
name|'obj_name'
op|'('
op|')'
newline|'\n'
name|'if'
name|'obj_name'
name|'in'
name|'tree'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'name'
op|','
name|'field'
name|'in'
name|'obj_class'
op|'.'
name|'fields'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'isinstance'
op|'('
name|'field'
op|'.'
name|'_type'
op|','
name|'fields'
op|'.'
name|'Object'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'sub_obj_name'
op|'='
name|'field'
op|'.'
name|'_type'
op|'.'
name|'_obj_name'
newline|'\n'
name|'sub_obj_class'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'['
name|'sub_obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'tree'
op|','
name|'sub_obj_class'
op|')'
newline|'\n'
name|'tree'
op|'.'
name|'setdefault'
op|'('
name|'obj_name'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'tree'
op|'['
name|'obj_name'
op|']'
op|'['
name|'sub_obj_name'
op|']'
op|'='
name|'sub_obj_class'
op|'.'
name|'VERSION'
newline|'\n'
nl|'\n'
DECL|member|test_relationships
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_relationships'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tree'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'obj_name'
name|'in'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_build_tree'
op|'('
name|'tree'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'stored'
op|'='
name|'set'
op|'('
op|'['
op|'('
name|'x'
op|','
name|'str'
op|'('
name|'y'
op|')'
op|')'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'object_relationships'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'computed'
op|'='
name|'set'
op|'('
op|'['
op|'('
name|'x'
op|','
name|'str'
op|'('
name|'y'
op|')'
op|')'
name|'for'
name|'x'
op|','
name|'y'
name|'in'
name|'tree'
op|'.'
name|'items'
op|'('
op|')'
op|']'
op|')'
newline|'\n'
name|'changed'
op|'='
name|'stored'
op|'-'
name|'computed'
newline|'\n'
name|'expected'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'actual'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'name'
op|','
name|'deps'
name|'in'
name|'changed'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'['
name|'name'
op|']'
op|'='
name|'object_relationships'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
name|'actual'
op|'['
name|'name'
op|']'
op|'='
name|'tree'
op|'.'
name|'get'
op|'('
name|'name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|','
nl|'\n'
string|"'Some objects have changed dependencies. '"
nl|'\n'
string|"'Please make sure to bump the versions of '"
nl|'\n'
string|"'parent objects and provide a rule in their '"
nl|'\n'
string|"'obj_make_compatible() routines to backlevel '"
nl|'\n'
string|"'the child object.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_obj_make_compatible
dedent|''
name|'def'
name|'test_obj_make_compatible'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Iterate all object classes and verify that we can run'
nl|'\n'
comment|'# obj_make_compatible with every older version than current.'
nl|'\n'
comment|"# This doesn't actually test the data conversions, but it at least"
nl|'\n'
comment|"# makes sure the method doesn't blow up on something basic like"
nl|'\n'
comment|'# expecting the wrong version format.'
nl|'\n'
indent|'        '
name|'for'
name|'obj_name'
name|'in'
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|':'
newline|'\n'
indent|'            '
name|'obj_class'
op|'='
name|'base'
op|'.'
name|'NovaObject'
op|'.'
name|'_obj_classes'
op|'['
name|'obj_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'version'
op|'='
name|'utils'
op|'.'
name|'convert_version_to_tuple'
op|'('
name|'obj_class'
op|'.'
name|'VERSION'
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'version'
op|'['
number|'1'
op|']'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'test_version'
op|'='
string|"'%d.%d'"
op|'%'
op|'('
name|'version'
op|'['
number|'0'
op|']'
op|','
name|'n'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'testing obj: %s version: %s'"
op|'%'
nl|'\n'
op|'('
name|'obj_name'
op|','
name|'test_version'
op|')'
op|')'
newline|'\n'
name|'obj_class'
op|'('
op|')'
op|'.'
name|'obj_to_primitive'
op|'('
name|'target_version'
op|'='
name|'test_version'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

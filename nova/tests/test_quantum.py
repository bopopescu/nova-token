begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Nicira, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'session'
name|'import'
name|'get_session'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'manager'
name|'as'
name|'quantum_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_connection'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'manager'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# this class can be used for unit functional/testing on nova,'
nl|'\n'
comment|'# as it does not actually make remote calls to the Quantum service'
nl|'\n'
DECL|class|FakeQuantumClientConnection
name|'class'
name|'FakeQuantumClientConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'nets'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_networks_for_tenant
dedent|''
name|'def'
name|'get_networks_for_tenant'
op|'('
name|'self'
op|','
name|'tenant_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net_ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'net_id'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'net_ids'
op|'.'
name|'append'
op|'('
name|'net_id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'networks'"
op|':'
name|'net_ids'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|create_network
dedent|''
name|'def'
name|'create_network'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'network_name'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'net-name'"
op|':'
name|'network_name'
op|','
nl|'\n'
string|"'tenant-id'"
op|':'
name|'tenant_id'
op|','
nl|'\n'
string|"'ports'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'return'
name|'uuid'
newline|'\n'
nl|'\n'
DECL|member|delete_network
dedent|''
name|'def'
name|'delete_network'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|network_exists
dedent|''
dedent|''
name|'def'
name|'network_exists'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_network_name
dedent|''
dedent|''
name|'def'
name|'get_network_name'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'net-name'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_confirm_not_attached
dedent|''
name|'def'
name|'_confirm_not_attached'
op|'('
name|'self'
op|','
name|'interface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'p'
name|'in'
name|'n'
op|'['
string|"'ports'"
op|']'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'p'
op|'['
string|"'attachment-id'"
op|']'
op|'=='
name|'interface_id'
op|':'
newline|'\n'
indent|'                    '
name|'raise'
name|'Exception'
op|'('
name|'_'
op|'('
string|'"interface \'%s\' is already attached"'
op|'%'
nl|'\n'
name|'interface_id'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_and_attach_port
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'create_and_attach_port'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|','
nl|'\n'
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'network_exists'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"network %(net_id)s does not exist for tenant %(tenant_id)"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_confirm_not_attached'
op|'('
name|'interface_id'
op|')'
newline|'\n'
name|'uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'ports'"
op|']'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|'"port-state"'
op|':'
string|'"ACTIVE"'
op|','
nl|'\n'
string|'"attachment-id"'
op|':'
name|'interface_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|detach_and_delete_port
dedent|''
name|'def'
name|'detach_and_delete_port'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'port_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'network_exists'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
op|'('
nl|'\n'
name|'_'
op|'('
string|'"network %(net_id)s does not exist "'
nl|'\n'
string|'"for tenant %(tenant_id)s"'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
dedent|''
name|'del'
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_id'
op|']'
op|'['
string|"'ports'"
op|']'
op|'['
name|'port_id'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_port_by_attachment
dedent|''
name|'def'
name|'get_port_by_attachment'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'attachment_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'nid'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'nid'
op|'=='
name|'net_id'
name|'and'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'port_id'
op|','
name|'p'
name|'in'
name|'n'
op|'['
string|"'ports'"
op|']'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'if'
name|'p'
op|'['
string|"'attachment-id'"
op|']'
op|'=='
name|'attachment_id'
op|':'
newline|'\n'
indent|'                        '
name|'return'
name|'port_id'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|get_attached_ports
dedent|''
name|'def'
name|'get_attached_ports'
op|'('
name|'self'
op|','
name|'tenant_id'
op|','
name|'net_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ports'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'nid'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'nid'
op|'=='
name|'net_id'
name|'and'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'port_id'
op|','
name|'p'
name|'in'
name|'n'
op|'['
string|"'ports'"
op|']'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'ports'
op|'.'
name|'append'
op|'('
op|'{'
string|"'port-id'"
op|':'
name|'port_id'
op|','
nl|'\n'
string|"'attachment'"
op|':'
name|'p'
op|'['
string|"'attachment-id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'ports'
newline|'\n'
nl|'\n'
DECL|member|get_networks
dedent|''
name|'def'
name|'get_networks'
op|'('
name|'self'
op|','
name|'tenant_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nets'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'nid'
op|','
name|'n'
name|'in'
name|'self'
op|'.'
name|'nets'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'n'
op|'['
string|"'tenant-id'"
op|']'
op|'=='
name|'tenant_id'
op|':'
newline|'\n'
indent|'                '
name|'x'
op|'='
op|'{'
string|"'id'"
op|':'
name|'nid'
op|'}'
newline|'\n'
name|'nets'
op|'.'
name|'append'
op|'('
name|'x'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|networks
dedent|''
dedent|''
name|'networks'
op|'='
op|'['
op|'{'
string|"'label'"
op|':'
string|"'project1-net1'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:1db8::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:1db8::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'192.168.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vpn_public_address'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project1'"
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|"'project2-net1'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.1.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:1db9::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:1db9::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.1.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.1.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'192.168.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project2'"
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|'"public"'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.0.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:1dba::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:1dba::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'10.0.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|'"project2-net2"'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'9.0.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:1dbb::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:1dbb::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'9.0.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'9.0.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'9.0.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'9.0.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|'"fake_project2"'
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'2'
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# this is a base class to be used by all other Quantum Test classes'
nl|'\n'
DECL|class|QuantumNovaTestCase
name|'class'
name|'QuantumNovaTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'QuantumNovaTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'='
name|'quantum_manager'
op|'.'
name|'QuantumManager'
op|'('
nl|'\n'
name|'ipam_lib'
op|'='
string|'"nova.network.quantum.nova_ipam_lib"'
op|','
nl|'\n'
name|'q_conn'
op|'='
name|'FakeQuantumClientConnection'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tests seem to create some networks by default, which'
nl|'\n'
comment|"# we don't want.  So we delete them."
nl|'\n'
nl|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|"'fake_project1'"
op|')'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctx'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_delete_safe'
op|'('
name|'ctx'
op|','
name|'n'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Other unit tests (e.g., test_compute.py) have a nasty'
nl|'\n'
comment|'# habit of of creating fixed IPs and not cleaning up, which'
nl|'\n'
comment|'# can confuse these tests, so we remove all existing fixed'
nl|'\n'
comment|'# ips before starting.'
nl|'\n'
dedent|''
name|'session'
op|'='
name|'get_session'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'query'
op|'('
name|'models'
op|'.'
name|'FixedIp'
op|')'
op|'.'
name|'all'
op|'('
op|')'
newline|'\n'
name|'with'
name|'session'
op|'.'
name|'begin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'fip_ref'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'session'
op|'.'
name|'delete'
op|'('
name|'fip_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_network
dedent|''
dedent|''
dedent|''
name|'def'
name|'_create_network'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'n'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'nwks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'ctx'
op|','
nl|'\n'
name|'label'
op|'='
name|'n'
op|'['
string|"'label'"
op|']'
op|','
name|'cidr'
op|'='
name|'n'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'n'
op|'['
string|"'multi_host'"
op|']'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'1'
op|','
name|'network_size'
op|'='
number|'256'
op|','
nl|'\n'
name|'cidr_v6'
op|'='
name|'n'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'n'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'n'
op|'['
string|"'gateway_v6'"
op|']'
op|','
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
name|'dns1'
op|'='
name|'n'
op|'['
string|"'dns1'"
op|']'
op|','
nl|'\n'
name|'dns2'
op|'='
name|'n'
op|'['
string|"'dns2'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'n'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'priority'
op|'='
name|'n'
op|'['
string|"'priority'"
op|']'
op|')'
newline|'\n'
name|'n'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'nwks'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumNovaIPAMTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaIPAMTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_create_and_delete_nets
indent|'    '
name|'def'
name|'test_create_and_delete_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_nets
dedent|''
name|'def'
name|'_create_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_nets
dedent|''
dedent|''
name|'def'
name|'_delete_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'n'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'db_nets'
op|'='
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'db_nets'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'x'
op|'['
string|"'label'"
op|']'
op|'=='
name|'n'
op|'['
string|"'label'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'n'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'x'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'delete_network'
op|'('
name|'ctx'
op|','
name|'None'
op|','
name|'n'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_and_deallocate_instance_static
dedent|''
dedent|''
name|'def'
name|'test_allocate_and_deallocate_instance_static'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'arg1'
op|','
name|'arg2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func2
dedent|''
name|'def'
name|'func2'
op|'('
name|'arg1'
op|','
name|'arg2'
op|','
name|'arg3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func1
dedent|''
name|'def'
name|'func1'
op|'('
name|'arg1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp_hostfile_with_text'
op|'='
name|'func'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'restart_dhcp'
op|'='
name|'func2'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'kill_dhcp'
op|'='
name|'func1'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'nw_info'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'cidrs'
op|'='
op|'['
string|"'10.'"
op|','
string|"'192.'"
op|']'
newline|'\n'
name|'addrs'
op|'='
op|'['
string|"'10.'"
op|','
string|"'192.'"
op|']'
newline|'\n'
name|'cidrs_v6'
op|'='
op|'['
string|"'2001:1dba:'"
op|','
string|"'2001:1db8:'"
op|']'
newline|'\n'
name|'addrs_v6'
op|'='
op|'['
string|"'2001:1dba:'"
op|','
string|"'2001:1db8:'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|check_for_startswith
name|'def'
name|'check_for_startswith'
op|'('
name|'choices'
op|','
name|'choice'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'v'
name|'in'
name|'choices'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'choice'
op|'.'
name|'startswith'
op|'('
name|'v'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'choices'
op|'.'
name|'remove'
op|'('
name|'v'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|"# we don't know which order the NICs will be in until we"
nl|'\n'
comment|'# introduce the notion of priority'
nl|'\n'
dedent|''
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'subnet'
name|'in'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'cidr'
op|'='
name|'subnet'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
comment|'# v4 cidr'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'cidrs'
op|','
name|'cidr'
op|')'
op|')'
newline|'\n'
comment|'# v4 address'
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'addrs'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# v6 cidr'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'cidrs_v6'
op|','
name|'cidr'
op|')'
op|')'
newline|'\n'
comment|'# v6 address'
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'addrs_v6'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_and_deallocate_instance_dynamic
dedent|''
name|'def'
name|'test_allocate_and_deallocate_instance_dynamic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project2"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'net_ids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_networks_for_tenant'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net_id'
op|','
name|'None'
op|')'
name|'for'
name|'net_id'
name|'in'
nl|'\n'
name|'net_ids'
op|'['
string|"'networks'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'validate_networks'
op|'('
name|'ctx'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'arg1'
op|','
name|'arg2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func1
dedent|''
name|'def'
name|'func1'
op|'('
name|'arg1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func2
dedent|''
name|'def'
name|'func2'
op|'('
name|'arg1'
op|','
name|'arg2'
op|','
name|'arg3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp_hostfile_with_text'
op|'='
name|'func'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'restart_dhcp'
op|'='
name|'func2'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'kill_dhcp'
op|'='
name|'func1'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'nw_info'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'cidrs'
op|'='
op|'['
string|"'9.'"
op|','
string|"'192.'"
op|']'
newline|'\n'
name|'addrs'
op|'='
op|'['
string|"'9.'"
op|','
string|"'192.'"
op|']'
newline|'\n'
name|'cidrs_v6'
op|'='
op|'['
string|"'2001:1dbb:'"
op|','
string|"'2001:1db9:'"
op|']'
newline|'\n'
name|'addrs_v6'
op|'='
op|'['
string|"'2001:1dbb:'"
op|','
string|"'2001:1db9:'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|check_for_startswith
name|'def'
name|'check_for_startswith'
op|'('
name|'choices'
op|','
name|'choice'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'v'
name|'in'
name|'choices'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'choice'
op|'.'
name|'startswith'
op|'('
name|'v'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'choices'
op|'.'
name|'remove'
op|'('
name|'v'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|"# we don't know which order the NICs will be in until we"
nl|'\n'
comment|'# introduce the notion of priority'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'subnet'
name|'in'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'cidr'
op|'='
name|'subnet'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
comment|'# v4 cidr'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'cidrs'
op|','
name|'cidr'
op|')'
op|')'
newline|'\n'
comment|'# v4 address'
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'addrs'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# v6 cidr'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'cidrs_v6'
op|','
name|'cidr'
op|')'
op|')'
newline|'\n'
comment|'# v6 address'
nl|'\n'
name|'address'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'check_for_startswith'
op|'('
name|'addrs_v6'
op|','
name|'address'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_bad_network
dedent|''
name|'def'
name|'test_validate_bad_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|"'fake_project1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'validate_networks'
op|','
name|'ctx'
op|','
op|'['
op|'('
string|'""'
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumNovaMACGenerationTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaMACGenerationTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_local_mac_address_creation
indent|'    '
name|'def'
name|'test_local_mac_address_creation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'False'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|'"generate_mac_address"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'net_ids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_networks_for_tenant'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net_id'
op|','
name|'None'
op|')'
name|'for'
name|'net_id'
name|'in'
name|'net_ids'
op|'['
string|"'networks'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_melange_mac_address_creation
dedent|''
name|'def'
name|'test_melange_mac_address_creation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'net_ids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_networks_for_tenant'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net_id'
op|','
name|'None'
op|')'
name|'for'
name|'net_id'
name|'in'
name|'net_ids'
op|'['
string|"'networks'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumNovaPortSecurityTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaPortSecurityTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_port_securty
indent|'    '
name|'def'
name|'test_port_securty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_use_port_security'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'net_ids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_networks_for_tenant'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net_id'
op|','
name|'None'
op|')'
name|'for'
name|'net_id'
name|'in'
name|'net_ids'
op|'['
string|"'networks'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'oldfunc'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
newline|'\n'
nl|'\n'
comment|'# Make sure we get the appropriate mac set in allowed_address_pairs'
nl|'\n'
comment|'# if port security is enabled.'
nl|'\n'
DECL|function|_instrumented_create_and_attach_port
name|'def'
name|'_instrumented_create_and_attach_port'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
nl|'\n'
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'allowed_address_pairs'"
name|'in'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'pairs'
op|'='
name|'kwargs'
op|'['
string|"'allowed_address_pairs'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'pairs'
op|'['
number|'0'
op|']'
op|'['
string|"'mac_address'"
op|']'
op|'=='
name|'fake_mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'oldfunc'
newline|'\n'
name|'return'
name|'oldfunc'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'_instrumented_create_and_attach_port'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_port_securty_negative
dedent|''
name|'def'
name|'test_port_securty_negative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_use_port_security'
op|'='
name|'False'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'net_ids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_networks_for_tenant'
op|'('
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net_id'
op|','
name|'None'
op|')'
name|'for'
name|'net_id'
name|'in'
name|'net_ids'
op|'['
string|"'networks'"
op|']'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'oldfunc'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
newline|'\n'
nl|'\n'
comment|'# Make sure no pairs are passed in if port security is turned off'
nl|'\n'
DECL|function|_instrumented_create_and_attach_port
name|'def'
name|'_instrumented_create_and_attach_port'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
nl|'\n'
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'allowed_address_pairs'"
name|'in'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'pairs'
op|'='
name|'kwargs'
op|'['
string|"'allowed_address_pairs'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'pairs'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'oldfunc'
newline|'\n'
name|'return'
name|'oldfunc'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'_instrumented_create_and_attach_port'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

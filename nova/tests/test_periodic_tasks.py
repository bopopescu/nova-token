begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 OpenStack LLC'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'testtools'
name|'import'
name|'matchers'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ManagerMetaTestCase
name|'class'
name|'ManagerMetaTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for the meta class which manages the creation of periodic tasks.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_meta
name|'def'
name|'test_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Manager
indent|'        '
name|'class'
name|'Manager'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|__metaclass__
indent|'            '
name|'__metaclass__'
op|'='
name|'manager'
op|'.'
name|'ManagerMeta'
newline|'\n'
nl|'\n'
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|member|foo
name|'def'
name|'foo'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'foo'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'4'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'enabled'
op|'='
name|'False'
op|')'
newline|'\n'
DECL|member|baz
name|'def'
name|'baz'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'baz'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'m'
op|'.'
name|'_periodic_tasks'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'m'
op|'.'
name|'_periodic_spacing'
op|'['
string|"'foo'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'m'
op|'.'
name|'_periodic_spacing'
op|'['
string|"'bar'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
nl|'\n'
name|'m'
op|'.'
name|'_periodic_spacing'
op|','
name|'matchers'
op|'.'
name|'Not'
op|'('
name|'matchers'
op|'.'
name|'Contains'
op|'('
string|"'baz'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Manager
dedent|''
dedent|''
name|'class'
name|'Manager'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests the periodic tasks portion of the manager class."""'
newline|'\n'
nl|'\n'
DECL|member|test_periodic_tasks_with_idle
name|'def'
name|'test_periodic_tasks_with_idle'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Manager
indent|'        '
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'200'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'m'
op|'.'
name|'_periodic_tasks'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'200'
op|','
name|'m'
op|'.'
name|'_periodic_spacing'
op|'['
string|"'bar'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now a single pass of the periodic tasks'
nl|'\n'
name|'idle'
op|'='
name|'m'
op|'.'
name|'periodic_tasks'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertAlmostEqual'
op|'('
number|'60'
op|','
name|'idle'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_periodic_tasks_constant
dedent|''
name|'def'
name|'test_periodic_tasks_constant'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Manager
indent|'        '
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'0'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'idle'
op|'='
name|'m'
op|'.'
name|'periodic_tasks'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertAlmostEqual'
op|'('
number|'60'
op|','
name|'idle'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_periodic_tasks_idle_calculation
dedent|''
name|'def'
name|'test_periodic_tasks_idle_calculation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Manager
indent|'        '
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'10'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'m'
op|'.'
name|'periodic_tasks'
op|'('
name|'None'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
name|'idle'
op|'='
name|'m'
op|'.'
name|'periodic_tasks'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'idle'
op|','
name|'matchers'
op|'.'
name|'GreaterThan'
op|'('
number|'9.7'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'idle'
op|','
name|'matchers'
op|'.'
name|'LessThan'
op|'('
number|'9.9'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_periodic_tasks_disabled
dedent|''
name|'def'
name|'test_periodic_tasks_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|Manager
indent|'        '
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'idle'
op|'='
name|'m'
op|'.'
name|'periodic_tasks'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertAlmostEqual'
op|'('
number|'60'
op|','
name|'idle'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_external_running_here
dedent|''
name|'def'
name|'test_external_running_here'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'run_external_periodic_tasks'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Manager
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'200'
op|','
name|'external_process_ok'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'m'
op|'.'
name|'_periodic_tasks'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_external_running_elsewhere
dedent|''
name|'def'
name|'test_external_running_elsewhere'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'run_external_periodic_tasks'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|class|Manager
name|'class'
name|'Manager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'manager'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'200'
op|','
name|'external_process_ok'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|bar
name|'def'
name|'bar'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'bar'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'m'
op|'='
name|'Manager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'m'
op|'.'
name|'_periodic_tasks'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Compute\n"""'
newline|'\n'
name|'from'
name|'copy'
name|'import'
name|'copy'
newline|'\n'
name|'from'
name|'webob'
name|'import'
name|'exc'
newline|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'manager'
name|'as'
name|'compute_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'state_checker'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'fake'
name|'as'
name|'fake_image'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'client'
name|'as'
name|'quantum_client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'test_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'driver'
name|'as'
name|'scheduler_driver'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'volume'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.tests.compute'"
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'stub_network'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeTime
name|'class'
name|'FakeTime'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|sleep
dedent|''
name|'def'
name|'sleep'
op|'('
name|'self'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'counter'
op|'+='
name|'t'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|orig_rpc_call
dedent|''
dedent|''
name|'orig_rpc_call'
op|'='
name|'rpc'
op|'.'
name|'call'
newline|'\n'
DECL|variable|orig_rpc_cast
name|'orig_rpc_cast'
op|'='
name|'rpc'
op|'.'
name|'cast'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rpc_call_wrapper
name|'def'
name|'rpc_call_wrapper'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stub out the scheduler creating the instance entry"""'
newline|'\n'
name|'if'
name|'topic'
op|'=='
name|'FLAGS'
op|'.'
name|'scheduler_topic'
name|'and'
name|'msg'
op|'['
string|"'method'"
op|']'
op|'=='
string|"'run_instance'"
op|':'
newline|'\n'
indent|'        '
name|'request_spec'
op|'='
name|'msg'
op|'['
string|"'args'"
op|']'
op|'['
string|"'request_spec'"
op|']'
newline|'\n'
name|'scheduler'
op|'='
name|'scheduler_driver'
op|'.'
name|'Scheduler'
newline|'\n'
name|'num_instances'
op|'='
name|'request_spec'
op|'.'
name|'get'
op|'('
string|"'num_instances'"
op|','
number|'1'
op|')'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'num_instances'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'scheduler'
op|'('
op|')'
op|'.'
name|'create_instance_db_entry'
op|'('
nl|'\n'
name|'context'
op|','
name|'request_spec'
op|')'
newline|'\n'
name|'encoded'
op|'='
name|'scheduler_driver'
op|'.'
name|'encode_instance'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'encoded'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'instances'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'do_cast'
op|':'
newline|'\n'
indent|'            '
name|'orig_rpc_cast'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'orig_rpc_call'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rpc_cast_wrapper
dedent|''
dedent|''
dedent|''
name|'def'
name|'rpc_cast_wrapper'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Stub out the scheduler creating the instance entry in\n    the reservation_id case.\n    """'
newline|'\n'
name|'rpc_call_wrapper'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|nop_report_driver_status
dedent|''
name|'def'
name|'nop_report_driver_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseTestCase
dedent|''
name|'class'
name|'BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'connection_type'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'stub_network'
op|'='
name|'True'
op|','
nl|'\n'
name|'notification_driver'
op|'='
string|"'nova.notifier.test_notifier'"
op|','
nl|'\n'
name|'network_manager'
op|'='
string|"'nova.network.manager.FlatManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'='
name|'mox'
op|'.'
name|'Mox'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'total_waits'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'min_disk'"
op|':'
name|'None'
op|','
string|"'min_ram'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
number|'1'
op|','
string|"'ramdisk_id'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'rpc_call_wrapper'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|','
name|'rpc_cast_wrapper'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_fake_instance
dedent|''
name|'def'
name|'_create_fake_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|','
name|'type_name'
op|'='
string|"'m1.tiny'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance"""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'['
string|"'launch_time'"
op|']'
op|'='
string|"'10'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
name|'type_name'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'type_id'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|','
name|'type_name'
op|'='
string|"'m1.tiny'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance. Returns uuid"""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|','
name|'type_name'
op|'='
name|'type_name'
op|')'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_type
dedent|''
name|'def'
name|'_create_instance_type'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance type"""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
string|"'m1.small'"
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
string|"'1024'"
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'local_gb'"
op|']'
op|'='
string|"'20'"
newline|'\n'
name|'inst'
op|'['
string|"'flavorid'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'swap'"
op|']'
op|'='
string|"'2048'"
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_quota'"
op|']'
op|'='
number|'100'
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_cap'"
op|']'
op|'='
number|'200'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_type_create'
op|'('
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_group
dedent|''
name|'def'
name|'_create_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_img_ref_associates_config_drive
indent|'    '
name|'def'
name|'test_create_instance_with_img_ref_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure create associates a config drive."""'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'.'
name|'config_drive'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_config_drive
dedent|''
dedent|''
name|'def'
name|'test_create_instance_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure create associates a config drive."""'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'.'
name|'config_drive'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_state
dedent|''
dedent|''
name|'def'
name|'_assert_state'
op|'('
name|'self'
op|','
name|'state_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""assert the instance is in the state defined by state_dict"""'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'vm_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'task_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'power_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'power_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_to_schedule_persists
dedent|''
dedent|''
name|'def'
name|'test_fail_to_schedule_persists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check the persistence of the ERROR(scheduling) state"""'
newline|'\n'
name|'self'
op|'.'
name|'_create_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'error_list'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_setup_block_device_mapping_fail
dedent|''
name|'def'
name|'test_run_instance_setup_block_device_mapping_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" block device mapping failure test.\n\n        Make sure that when there is a block device mapping problem,\n        the instance goes to ERROR state, keeping the task state\n        """'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Failed to block device mapping"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_setup_block_device_mapping'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|'}'
op|')'
newline|'\n'
name|'error_list'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'BLOCK_DEVICE_MAPPING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_spawn_fail
dedent|''
name|'def'
name|'test_run_instance_spawn_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" spawn failure test.\n\n        Make sure that when there is a spawning problem,\n        the instance goes to ERROR state, keeping the task state"""'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"Failed to spawn"'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SPAWNING'
op|'}'
op|')'
newline|'\n'
name|'error_list'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SPAWNING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_terminate_on_error_state
dedent|''
name|'def'
name|'test_can_terminate_on_error_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure that the instance can be terminated in ERROR state"""'
newline|'\n'
name|'elevated'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
comment|'#check failed to schedule --> terminate'
nl|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'elevated'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate
dedent|''
name|'def'
name|'test_run_terminate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure it is possible to  run and terminate instance"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After terminating instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_timestamps
dedent|''
name|'def'
name|'test_run_terminate_timestamps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure timestamps are set for launched and destroyed"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'launch'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'>'
name|'launch'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'terminate'
op|'='
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|'"only"'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'<'
name|'terminate'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|'>'
name|'terminate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be stopped"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be started"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue
dedent|''
name|'def'
name|'test_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be rescued and unrescued"""'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'rescued'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'unrescued'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rescue
name|'def'
name|'fake_rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'rescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'rescue'"
op|','
name|'fake_rescue'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_unrescue
name|'def'
name|'fake_unrescue'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'unrescue'"
op|','
nl|'\n'
name|'fake_unrescue'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'rescued'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unrescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_on
dedent|''
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be powered on"""'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'power_on'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_on
name|'def'
name|'fake_driver_power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_on'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'driver'
op|'.'
name|'ComputeDriver'
op|','
string|"'power_on'"
op|','
nl|'\n'
name|'fake_driver_power_on'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'power_on_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_on'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_off
dedent|''
name|'def'
name|'test_power_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be powered off"""'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'power_off'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_off
name|'def'
name|'fake_driver_power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_off'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'driver'
op|'.'
name|'ComputeDriver'
op|','
string|"'power_off'"
op|','
nl|'\n'
name|'fake_driver_power_off'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'power_off_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_off'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pause
dedent|''
name|'def'
name|'test_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be paused and unpaused"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unpause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend
dedent|''
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure instance can be suspended and resumed"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be rebuilt"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft
dedent|''
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be soft rebooted"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"SOFT"'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'power_state'"
op|']'
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be hard rebooted"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"HARD"'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'power_state'"
op|']'
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password
dedent|''
name|'def'
name|'test_set_admin_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can have its admin password set"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'set_admin_password'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_file
dedent|''
name|'def'
name|'test_inject_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure we can write a file to an instance"""'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'inject'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_inject_file
name|'def'
name|'fake_driver_inject_file'
op|'('
name|'self2'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'path'
op|','
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'contents'
op|','
string|'"File Contents"'
op|')'
newline|'\n'
name|'called'
op|'['
string|"'inject'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'inject_file'"
op|','
nl|'\n'
name|'fake_driver_inject_file'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'inject_file'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|'"/tmp/test"'
op|','
nl|'\n'
string|'"File Contents"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'inject'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure we can inject network info"""'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'inject'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_inject_network
name|'def'
name|'fake_driver_inject_network'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'inject'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'inject_network_info'"
op|','
nl|'\n'
name|'fake_driver_inject_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'inject'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure we can reset networking on an instance"""'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'reset'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_reset_network
name|'def'
name|'fake_driver_reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'reset'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'reset_network'"
op|','
nl|'\n'
name|'fake_driver_reset_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'reset'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_agent_update
dedent|''
name|'def'
name|'test_agent_update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can have its agent updated"""'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'agent_update'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_agent_update
name|'def'
name|'fake_driver_agent_update'
op|'('
name|'self2'
op|','
name|'instance'
op|','
name|'url'
op|','
name|'md5hash'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'agent_update'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'url'
op|','
string|"'http://fake/url/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'md5hash'
op|','
string|"'fakehash'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeConnection'
op|','
string|"'agent_update'"
op|','
nl|'\n'
name|'fake_driver_agent_update'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'agent_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'http://fake/url/'"
op|','
string|"'fakehash'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'agent_update'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot
dedent|''
name|'def'
name|'test_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be snapshotted"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'name'
op|'='
string|'"myfakesnapshot"'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails
dedent|''
name|'def'
name|'test_snapshot_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure task_state is set to None if snapshot fails"""'
newline|'\n'
DECL|function|fake_snapshot
name|'def'
name|'fake_snapshot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
string|'"I don\'t want to create a snapshot"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'snapshot'"
op|','
name|'fake_snapshot'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|'"failing_snapshot"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_state
dedent|''
name|'def'
name|'_assert_state'
op|'('
name|'self'
op|','
name|'state_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert state of VM is equal to state passed as parameter"""'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'vm_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'task_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'power_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'power_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can get console output from instance"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ajax_console
dedent|''
name|'def'
name|'test_ajax_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can get console output from instance"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_ajax_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'set'
op|'('
op|'['
string|"'token'"
op|','
string|"'host'"
op|','
string|"'port'"
op|']'
op|')'
op|'.'
name|'issubset'
op|'('
name|'console'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console
dedent|''
name|'def'
name|'test_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can a vnc console for an instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diagnostics
dedent|''
name|'def'
name|'test_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can get diagnostics for an instance."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'diagnostics'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diagnostics'
op|','
string|"'FAKE_DIAGNOSTICS'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_add_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'network'
op|'.'
name|'API'
op|','
string|"'add_fixed_ip_to_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_remove_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'network'
op|'.'
name|'API'
op|','
string|"'remove_fixed_ip_from_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_usage_notification
dedent|''
name|'def'
name|'test_run_instance_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure run instance generates apropriate usage notification"""'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.create'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'inst_ref'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'state'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'utils'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_usage_notification
dedent|''
name|'def'
name|'test_terminate_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure terminate_instance generates apropriate usage notification"""'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.exists'"
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.delete'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'inst_ref'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'utils'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_existing
dedent|''
name|'def'
name|'test_run_instance_existing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure failure when running an instance that already exists"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_set_to_error_on_uncaught_exception
dedent|''
name|'def'
name|'test_instance_set_to_error_on_uncaught_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that instance is set to error state when exception is raised"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumServerException'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'stub_network'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumServerException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_network_is_deallocated_on_spawn_failure
dedent|''
name|'def'
name|'test_network_is_deallocated_on_spawn_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""When a spawn fails the network must be deallocated"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_setup_block_device_mapping"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'rpc'
op|'.'
name|'common'
op|'.'
name|'RemoteError'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc'
op|'.'
name|'common'
op|'.'
name|'RemoteError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_lock
dedent|''
name|'def'
name|'test_get_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'locked'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure locked instance cannot be changed"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'non_admin_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# decorator should return False (fail) with locked nonadmin context'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'lock_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'ret_val'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'non_admin_context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_val'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# decorator should return None (success) with unlocked nonadmin context'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unlock_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'ret_val'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'non_admin_context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_val'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize
dedent|''
name|'def'
name|'test_finish_resize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Contrived test to ensure finish_resize doesn\'t raise anything"""'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
string|"'get_instance_nw_info'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'int'
op|'('
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'KeyError'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# Only catch key errors. We want other reasons for the test to'
nl|'\n'
comment|"# fail to actually error out so we don't obscure anything"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_handles_error
dedent|''
name|'def'
name|'test_finish_resize_handles_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we don\'t leave the instance in RESIZE on error"""'
newline|'\n'
nl|'\n'
DECL|function|throw_up
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
dedent|''
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'throw_up'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
string|"'get_instance_nw_info'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'int'
op|'('
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_notification
dedent|''
name|'def'
name|'test_resize_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure notifications on instance migrate/resize"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
number|'1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
nl|'\n'
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.resize.prep'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'utils'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance
dedent|''
name|'def'
name|'test_resize_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be migrated/resized"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
number|'1'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize
dedent|''
name|'def'
name|'test_finish_revert_resize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the flavor is reverted to the original on revert"""'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_revert_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
string|"'get_instance_nw_info'"
op|','
name|'fake'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
comment|'# Confirm the instance size before the resize starts'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'new_instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
name|'context'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'new_instance_type_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'int'
op|'('
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prove that the instance size is now the new size'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Finally, revert and confirm the old flavor has been applied'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_revert_resize'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|','
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_by_flavor_id
dedent|''
name|'def'
name|'test_get_by_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'type'
op|'['
string|"'name'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_same_source_fails
dedent|''
name|'def'
name|'test_resize_same_source_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance fails to migrate when source and destination are\n        the same host"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_handles_migration_error
dedent|''
name|'def'
name|'test_resize_instance_handles_migration_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure vm_state is ERROR when error occurs"""'
newline|'\n'
DECL|function|raise_migration_failure
name|'def'
name|'raise_migration_failure'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'Exception'
op|'('
name|'reason'
op|'='
string|"'test failure'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'raise_migration_failure'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_other_managers
dedent|''
name|'def'
name|'_setup_other_managers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'volume_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'volume_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_manager'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_driver'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_driver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_instance_has_no_fixed_ip
dedent|''
name|'def'
name|'test_pre_live_migration_instance_has_no_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm raising exception if instance doesn\'t have fixed_ip."""'
newline|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'topic'
op|'='
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pre_live_migration'
op|','
nl|'\n'
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'time'
op|'='
name|'FakeTime'
op|'('
op|')'
op|')'
newline|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_works_correctly
dedent|''
name|'def'
name|'test_pre_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm setup_compute_volume is called when volume is mounted."""'
newline|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'topic'
op|'='
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
op|'{'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'dummy_nw_info'
op|'='
op|'['
op|'['
name|'None'
op|','
op|'{'
string|"'ips'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'c'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dummy_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'plug_vifs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
op|','
name|'dummy_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'ensure_filtering_rules_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
op|','
name|'dummy_nw_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pre_live_migration'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_dest_raises_exception
dedent|''
name|'def'
name|'test_live_migration_dest_raises_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm exception when pre_live_migration fails."""'
newline|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'inst_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'topic'
op|'='
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
comment|'# creating volume testdata'
nl|'\n'
name|'volume_id'
op|'='
number|'1'
newline|'\n'
name|'db'
op|'.'
name|'volume_create'
op|'('
name|'c'
op|','
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
string|"'volume_id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'c'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'volume_topic'
op|','
op|'{'
string|'"method"'
op|':'
string|'"check_for_export"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'topic'
op|','
op|'{'
string|'"method"'
op|':'
string|'"pre_live_migration"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'disk'"
op|':'
name|'None'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'rpc'
op|'.'
name|'common'
op|'.'
name|'RemoteError'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
comment|'# mocks for rollback'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'topic'
op|','
op|'{'
string|'"method"'
op|':'
string|'"remove_volume_connection"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'c'
op|','
name|'topic'
op|','
op|'{'
string|'"method"'
op|':'
string|'"rollback_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'inst_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc'
op|'.'
name|'RemoteError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|','
nl|'\n'
name|'c'
op|','
name|'instance_id'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'for'
name|'bdms'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'c'
op|','
name|'bdms'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'db'
op|'.'
name|'volume_destroy'
op|'('
name|'c'
op|','
name|'volume_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_works_correctly
dedent|''
name|'def'
name|'test_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm live_migration() works as expected correctly."""'
newline|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'topic'
op|'='
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# create'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'topic'
op|','
op|'{'
string|'"method"'
op|':'
string|'"pre_live_migration"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'block_migration'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'disk'"
op|':'
name|'None'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm post_live_migration() works as expected correctly."""'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'flo_addr'
op|'='
string|"'1.2.1.2'"
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'i_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'c'
op|','
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
name|'v_ref'
op|'='
name|'db'
op|'.'
name|'volume_create'
op|'('
name|'c'
op|','
op|'{'
string|"'size'"
op|':'
number|'1'
op|','
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|')'
newline|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'c'
op|','
op|'{'
string|"'address'"
op|':'
string|"'1.1.1.1'"
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_id'
op|'}'
op|')'
newline|'\n'
name|'fix_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'c'
op|','
name|'fix_addr'
op|')'
newline|'\n'
name|'flo_ref'
op|'='
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'c'
op|','
op|'{'
string|"'address'"
op|':'
name|'flo_addr'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'fix_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unfilter_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'i_ref'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'db'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'FLAGS'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"post_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|','
string|"'block_migration'"
op|':'
name|'False'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unplug_vifs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'i_ref'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'post_live_migration'
op|'('
name|'c'
op|','
name|'i_ref'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure every data is rewritten to destinatioin hostname.'
nl|'\n'
name|'i_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'i_ref'
op|'['
string|"'host'"
op|']'
op|'=='
name|'dest'
op|')'
newline|'\n'
name|'flo_refs'
op|'='
name|'db'
op|'.'
name|'floating_ip_get_all_by_host'
op|'('
name|'c'
op|','
name|'dest'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
name|'len'
op|'('
name|'flo_refs'
op|')'
op|'!='
number|'0'
name|'and'
name|'flo_refs'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|'=='
name|'flo_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
name|'and'
name|'c2'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_destroy'
op|'('
name|'c'
op|','
name|'v_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_destroy'
op|'('
name|'c'
op|','
name|'flo_addr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_kill_vm
dedent|''
name|'def'
name|'test_run_kill_vm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Detect when a vm is terminated behind the scenes"""'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_report_driver_status'"
op|','
name|'nop_report_driver_status'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'instance_name'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'test_remove_vm'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Force the compute manager to do its periodic poll'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'ctxt'
op|','
name|'raise_on_error'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After force-killing instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault
dedent|''
name|'def'
name|'test_add_instance_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'404'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'HTTPNotFound'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"'Error Details'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_instance_fault'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|','
number|'404'
op|','
nl|'\n'
string|"'HTTPNotFound'"
op|','
string|"'Error Details'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_error
dedent|''
name|'def'
name|'test_add_instance_fault_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'NotImplementedError'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"''"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_http_exception
dedent|''
name|'def'
name|'test_add_instance_fault_http_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'404'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'HTTPNotFound'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"'Error Details'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'exc'
op|'.'
name|'HTTPNotFound'
op|'('
string|'"Error Details"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPITestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAPITestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
number|'1'
op|','
string|"'ramdisk_id'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_check_vm_state_filtered_function
dedent|''
name|'def'
name|'test_check_vm_state_filtered_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test the check_vm_state mechanism for filtered functions.\n\n        Checks that the filtered_function is correctly filtered\n        in the right states only for the api_check_vm_states flag set to True.\n\n        Note that the filtered_function takes the same number of arguments\n        than the real functions that are decorated in the compute api.\n        """'
newline|'\n'
op|'@'
name|'compute'
op|'.'
name|'api'
op|'.'
name|'check_vm_state'
op|'('
string|"'filtered_function'"
op|')'
newline|'\n'
DECL|function|filtered_function
name|'def'
name|'filtered_function'
op|'('
name|'api'
op|','
name|'context'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"filtered_function executed"'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|function|filtered_assume_right_state
dedent|''
name|'def'
name|'filtered_assume_right_state'
op|'('
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'api_check_vm_states'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'filtered_function'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|filtered_assume_wrong_state
dedent|''
name|'def'
name|'filtered_assume_wrong_state'
op|'('
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'api_check_vm_states'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'filtered_function'
op|','
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'api_check_vm_states'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'filtered_function'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that the filtered_function is correctly filtered'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_execute_allowed_and_blocked'
op|'('
string|"'filtered_function'"
op|','
nl|'\n'
name|'filtered_assume_right_state'
op|','
nl|'\n'
name|'filtered_assume_wrong_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_vm_state_non_filtered_function
dedent|''
name|'def'
name|'test_check_vm_state_non_filtered_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test the check_vm_state mechanism for non filtered functions.\n\n        Checks that if a function that is decorated with the check_vm_state\n        but it is not defined in any blocked dictionary, it will always\n        be executed\n        """'
newline|'\n'
op|'@'
name|'compute'
op|'.'
name|'api'
op|'.'
name|'check_vm_state'
op|'('
string|"'non_filtered_function'"
op|')'
newline|'\n'
DECL|function|non_filtered_function
name|'def'
name|'non_filtered_function'
op|'('
name|'api'
op|','
name|'context'
op|','
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"non_filtered_function executed"'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|function|non_filtered_assume_executed
dedent|''
name|'def'
name|'non_filtered_assume_executed'
op|'('
name|'instance_ref'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'api_check_vm_states'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'non_filtered_function'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# check that the non_filtered_function is never filtered'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_execute_allowed_and_blocked'
op|'('
string|"'non_filtered_function'"
op|','
nl|'\n'
name|'non_filtered_assume_executed'
op|','
nl|'\n'
name|'non_filtered_assume_executed'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_execute_allowed_and_blocked
dedent|''
name|'def'
name|'_execute_allowed_and_blocked'
op|'('
name|'self'
op|','
name|'func_name'
op|','
name|'f_allowed'
op|','
name|'f_blocked'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Execute f_allowed and f_blocked functions for all the scenarios.\n\n        Get an allowed vm_state, a blocked vm_state, an allowed task_state,\n        and a blocked task_state for the function defined by func_name to be\n        executed. Then it executes the function f_allowed or f_blocked\n        accordingly, passing as parameter a new instance id. Theses functions\n        have to run the func_name function and assert the expected result\n        """'
newline|'\n'
nl|'\n'
comment|'# define blocked and allowed states'
nl|'\n'
name|'blocked_tsk'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
name|'ok_task'
op|'='
name|'task_states'
op|'.'
name|'NETWORKING'
newline|'\n'
name|'blocked_vm'
op|'='
name|'vm_states'
op|'.'
name|'BUILDING'
newline|'\n'
name|'ok_vm'
op|'='
name|'vm_states'
op|'.'
name|'RESCUED'
newline|'\n'
name|'blocked_comb'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'ok_comb'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'PAUSED'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
comment|'# To guarantee a 100% test coverage we create fake lists.'
nl|'\n'
name|'fake_block_for_task_state'
op|'='
op|'{'
string|"'filtered_function'"
op|':'
op|'['
name|'blocked_tsk'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'fake_block_for_vm_state'
op|'='
op|'{'
string|"'filtered_function'"
op|':'
op|'['
name|'blocked_vm'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'fake_block_for_combination'
op|'='
op|'{'
string|"'filtered_function'"
op|':'
op|'['
name|'blocked_comb'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'state_checker'
op|','
string|"'block_for_task_state'"
op|','
nl|'\n'
name|'fake_block_for_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'state_checker'
op|','
string|"'block_for_vm_state'"
op|','
nl|'\n'
name|'fake_block_for_vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'state_checker'
op|','
string|"'block_for_combination'"
op|','
nl|'\n'
name|'fake_block_for_combination'
op|')'
newline|'\n'
nl|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'blocked_tsk'
op|'}'
op|')'
newline|'\n'
name|'f_blocked'
op|'('
name|'i_ref'
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'ok_task'
op|'}'
op|')'
newline|'\n'
name|'f_allowed'
op|'('
name|'i_ref'
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'blocked_vm'
op|'}'
op|')'
newline|'\n'
name|'f_blocked'
op|'('
name|'i_ref'
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'ok_vm'
op|'}'
op|')'
newline|'\n'
name|'f_allowed'
op|'('
name|'i_ref'
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
name|'blocked_comb'
op|')'
newline|'\n'
name|'f_blocked'
op|'('
name|'i_ref'
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
name|'ok_comb'
op|')'
newline|'\n'
name|'f_allowed'
op|'('
name|'i_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_ram
dedent|''
name|'def'
name|'test_create_with_too_little_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test an instance type with too little memory"""'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'img'
op|'='
name|'copy'
op|'('
name|'self'
op|'.'
name|'fake_image'
op|')'
newline|'\n'
name|'img'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'return'
name|'img'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeMemoryTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type memory and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_disk
dedent|''
name|'def'
name|'test_create_with_too_little_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test an instance type with too little disk space"""'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'img'
op|'='
name|'copy'
op|'('
name|'self'
op|'.'
name|'fake_image'
op|')'
newline|'\n'
name|'img'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'return'
name|'img'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeDiskTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type disk space and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_just_enough_ram_and_disk
dedent|''
name|'def'
name|'test_create_just_enough_ram_and_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test an instance type with just enough ram and disk space"""'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'img'
op|'='
name|'copy'
op|'('
name|'self'
op|'.'
name|'fake_image'
op|')'
newline|'\n'
name|'img'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'img'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'return'
name|'img'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_no_ram_and_disk_reqs
dedent|''
name|'def'
name|'test_create_with_no_ram_and_disk_reqs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test an instance type with no min_ram or min_disk"""'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'local_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'copy'
op|'('
name|'self'
op|'.'
name|'fake_image'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_defaults_display_name
dedent|''
name|'def'
name|'test_create_instance_defaults_display_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that an instance cannot be created without a display_name."""'
newline|'\n'
name|'cases'
op|'='
op|'['
name|'dict'
op|'('
op|')'
op|','
name|'dict'
op|'('
name|'display_name'
op|'='
name|'None'
op|')'
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
op|'**'
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_security_groups
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_instance_associates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure create associates security groups"""'
newline|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'instances'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_invalid_security_group_raises
dedent|''
dedent|''
name|'def'
name|'test_create_instance_with_invalid_security_group_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'pre_build_len'
op|'='
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'SecurityGroupNotFoundForProject'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'this_is_a_fake_sec_group'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pre_build_len'
op|','
nl|'\n'
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_hostname_generator
dedent|''
name|'def'
name|'test_default_hostname_generator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
op|'('
name|'None'
op|','
string|"'server-1'"
op|')'
op|','
op|'('
string|"'Hello, Server!'"
op|','
string|"'hello-server'"
op|')'
op|','
nl|'\n'
op|'('
string|"'<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>'"
op|','
string|"'hello'"
op|')'
op|','
nl|'\n'
op|'('
string|"'hello_server'"
op|','
string|"'hello-server'"
op|')'
op|']'
newline|'\n'
name|'for'
name|'display_name'
op|','
name|'hostname'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'display_name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
name|'hostname'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_instance_disassociates_security_groups
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_destroy_instance_disassociates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure destroying disassociates security groups"""'
newline|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'instances'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_security_group_disassociates_instances
dedent|''
dedent|''
name|'def'
name|'test_destroy_security_group_disassociates_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure destroying security groups disassociates instances"""'
newline|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'admin_deleted_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
nl|'\n'
name|'read_deleted'
op|'='
string|'"only"'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'admin_deleted_context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'instances'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'STARTING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'STOPPING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete
dedent|''
name|'def'
name|'test_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_soft
dedent|''
name|'def'
name|'test_delete_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_delete
dedent|''
name|'def'
name|'test_force_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be deleted after a soft delete"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'force_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend
dedent|''
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be suspended"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'suspend'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resume
dedent|''
name|'def'
name|'test_resume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be resumed (if suspended)"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pause
dedent|''
name|'def'
name|'test_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be paused"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'pause'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unpause
dedent|''
name|'def'
name|'test_unpause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be unpaused"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unpause'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_restore
dedent|''
name|'def'
name|'test_restore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be restored from a soft delete"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'restore'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|'"image_ref"'
op|']'
newline|'\n'
name|'password'
op|'='
string|'"new_password"'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'image_ref'
op|','
name|'password'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft
dedent|''
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be soft rebooted"""'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"SOFT"'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be hard rebooted"""'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"HARD"'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_create
dedent|''
name|'def'
name|'test_hostname_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance hostname is set during creation."""'
newline|'\n'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
op|'('
name|'instances'
op|','
name|'_'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
string|"'test host'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test-host'"
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password
dedent|''
name|'def'
name|'test_set_admin_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can have its admin password set"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'set_admin_password'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue_unrescue
dedent|''
name|'def'
name|'test_rescue_unrescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rescue'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unrescue'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot
dedent|''
name|'def'
name|'test_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Can\'t backup an instance which is already being backed up."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_backup
dedent|''
name|'def'
name|'test_backup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Can\'t backup an instance which is already being backed up."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'backup'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'backup1'"
op|','
string|"'DAILY'"
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'backup1'"
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'backup_type'"
op|']'
op|','
string|"'DAILY'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'backup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_backup_conflict
dedent|''
name|'def'
name|'test_backup_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Can\'t backup an instance which is already being backed up."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'instance_values'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'instance_values'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'backup'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_conflict
dedent|''
name|'def'
name|'test_snapshot_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Can\'t snapshot an instance which is already being snapshotted."""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'instance_values'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'instance_values'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_confirm_through_api
dedent|''
name|'def'
name|'test_resize_confirm_through_api'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure invalid flavors raise"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a fake migration record (manager does this)'
nl|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
comment|'# set the state that the instance gets when resize finishes'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'RESIZE_VERIFY'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_revert_through_api
dedent|''
name|'def'
name|'test_resize_revert_through_api'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure invalid flavors raise"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a fake migration record (manager does this)'
nl|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'revert_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_invalid_flavor_fails
dedent|''
name|'def'
name|'test_resize_invalid_flavor_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure invalid flavors raise"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
nl|'\n'
name|'context'
op|','
name|'instance'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_same_size_fails
dedent|''
name|'def'
name|'test_resize_same_size_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure invalid flavors raise"""'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CannotResizeToSameSize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate
dedent|''
name|'def'
name|'test_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|'# Migrate simply calls resize() without a flavor_id.'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_request_spec
dedent|''
name|'def'
name|'test_resize_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_cast
indent|'        '
name|'def'
name|'_fake_cast'
op|'('
name|'context'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
name|'args'
op|'['
string|"'args'"
op|']'
op|'['
string|"'request_spec'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'original_host'"
op|']'
op|','
string|"'host2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'avoid_original_host'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'_cast_scheduler_message'"
op|','
nl|'\n'
name|'_fake_cast'
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_request_spec_noavoid
dedent|''
dedent|''
name|'def'
name|'test_resize_request_spec_noavoid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_cast
indent|'        '
name|'def'
name|'_fake_cast'
op|'('
name|'context'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
name|'args'
op|'['
string|"'args'"
op|']'
op|'['
string|"'request_spec'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'original_host'"
op|']'
op|','
string|"'host2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'avoid_original_host'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'_cast_scheduler_message'"
op|','
nl|'\n'
name|'_fake_cast'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'allow_resize_to_same_host'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip
dedent|''
dedent|''
name|'def'
name|'test_associate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure we can associate a floating ip with an instance"""'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'associate'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_associate_ip_network_api
name|'def'
name|'fake_associate_ip_network_api'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'floating_address'
op|','
nl|'\n'
name|'fixed_address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'associate'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'nw_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_nw_info
name|'def'
name|'fake_get_nw_info'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'nw_info'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'network'
op|'.'
name|'API'
op|','
string|"'associate_floating_ip'"
op|','
nl|'\n'
name|'fake_associate_ip_network_api'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'network'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'address'
op|'='
string|"'0.1.2.3'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'associate'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip_no_fixed_ip
dedent|''
name|'def'
name|'test_associate_floating_ip_no_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Should fail if instance has no fixed ip."""'
newline|'\n'
nl|'\n'
DECL|function|fake_get_nw_info
name|'def'
name|'fake_get_nw_info'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'network'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'address'
op|'='
string|"'0.1.2.3'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ApiError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'associate_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test get instance"""'
newline|'\n'
name|'self'
op|'.'
name|'maxDiff'
op|'='
name|'None'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'exp_instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'name'"
op|']'
op|'='
name|'exp_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_db_get
name|'def'
name|'fake_db_get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'exp_instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|','
name|'fake_db_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'c'
op|','
name|'exp_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_with_integer_id
dedent|''
name|'def'
name|'test_get_with_integer_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test get instance with an integer id"""'
newline|'\n'
name|'self'
op|'.'
name|'maxDiff'
op|'='
name|'None'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'exp_instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'name'"
op|']'
op|'='
name|'exp_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_db_get
name|'def'
name|'fake_db_get'
op|'('
name|'context'
op|','
name|'instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'exp_instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get'"
op|','
name|'fake_db_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'c'
op|','
name|'exp_instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_name_regexp
dedent|''
name|'def'
name|'test_get_all_by_name_regexp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by name (display_name)"""'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'display_name'"
op|':'
string|"'woot'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'woot.*'"
op|'}'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'.*oot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'n.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'noth.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_instance_name_regexp
dedent|''
name|'def'
name|'test_get_all_by_instance_name_regexp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by name"""'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%d'"
op|')'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'id'"
op|':'
number|'10'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'instance_name'"
op|':'
string|"'instance.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'instance_name'"
op|':'
string|"'.*\\-\\d$'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'instance_name'"
op|':'
string|"'i.*2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_multiple_options_at_once
dedent|''
name|'def'
name|'test_get_all_by_multiple_options_at_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching by multiple options at once"""'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'network_manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_uuids_by_ip_filter'"
op|','
nl|'\n'
name|'network_manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_manager'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'instance_get_id_to_uuid_mapping'"
op|','
nl|'\n'
name|'db'
op|'.'
name|'instance_get_id_to_uuid_mapping'
op|')'
newline|'\n'
nl|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'display_name'"
op|':'
string|"'woot'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'20'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'30'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip ends up matching 2nd octet here.. so all 3 match ip'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
string|"'name'"
op|':'
string|"'not.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# ip ends up matching any ip with a '1' in the last octet.."
nl|'\n'
comment|'# so instance 1 and 3.. but name should only match #1'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1$'"
op|','
string|"'name'"
op|':'
string|"'^woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# same as above but no match on name (name matches instance1'
nl|'\n'
comment|"# but the ip query doesn't"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.2$'"
op|','
string|"'name'"
op|':'
string|"'^woot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip matches all 3... ipv6 matches #2+#3...name matches #3'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'not.*'"
op|','
nl|'\n'
string|"'ip6'"
op|':'
string|"'^.*12.*34.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_image
dedent|''
name|'def'
name|'test_get_all_by_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by image"""'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'123'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
op|'['
string|"'1234'"
op|','
string|"'4567'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_flavor
dedent|''
name|'def'
name|'test_get_all_by_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by image"""'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): Migrations set up the instance_types table'
nl|'\n'
comment|'# for us.  Therefore, we assume the following is true for'
nl|'\n'
comment|'# these tests:'
nl|'\n'
comment|'# instance_type_id 1 == flavor 3'
nl|'\n'
comment|'# instance_type_id 2 == flavor 1'
nl|'\n'
comment|'# instance_type_id 3 == flavor 4'
nl|'\n'
comment|'# instance_type_id 4 == flavor 5'
nl|'\n'
comment|'# instance_type_id 5 == flavor 2'
nl|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|','
nl|'\n'
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'99'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'instance1'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_state
dedent|''
name|'def'
name|'test_get_all_by_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by state"""'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
op|'['
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_metadata
dedent|''
name|'def'
name|'test_get_all_by_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by metadata"""'
newline|'\n'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance0'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance4'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# get all instances'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# wrong key/value combination'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# non-existing keys'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key5'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# find existing instance'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance4'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criterias as a dict'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criterias as a list'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'['
op|'{'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance0'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_metadata
dedent|''
name|'def'
name|'test_instance_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test searching instances by state"""'
newline|'\n'
name|'_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|','
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'new_metadata'
op|'='
op|'{'
string|"'key2'"
op|':'
string|"'bah'"
op|','
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
name|'new_metadata'
op|','
name|'delete'
op|'='
name|'True'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'new_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
string|"'key2'"
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'_context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_parse_db_block_device_mapping
name|'def'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attr_list'
op|'='
op|'('
string|"'delete_on_termination'"
op|','
string|"'device_name'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'virtual_name'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
string|"'snapshot_id'"
op|')'
newline|'\n'
name|'bdm'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'attr_list'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'bdm_ref'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'val'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
DECL|member|test_update_block_device_mapping
dedent|''
name|'def'
name|'test_update_block_device_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'swap_size'
op|'='
number|'1'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
name|'swap_size'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'mappings'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'sdc2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral2'"
op|','
string|"'device'"
op|':'
string|"'sdc3'"
op|'}'
op|']'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
nl|'\n'
comment|'# root'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x12345678'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# overwrite swap'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x23456789'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x3456789A'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# overwrite ephemeral'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x456789AB'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x56789ABC'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# volume'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x87654321'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0x98765432'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
number|'0xA9875463'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_update_image_block_device_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_type'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'mappings'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
op|'['
name|'self'
op|'.'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
nl|'\n'
name|'for'
name|'bdm_ref'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# NOTE(yamahata): ATM only ephemeral0 is supported.'
nl|'\n'
comment|"#                 they're ignored for now"
nl|'\n'
comment|"#{'virtual_name': 'ephemeral1', 'device_name': '/dev/sdc2'},"
nl|'\n'
comment|"#{'virtual_name': 'ephemeral2', 'device_name': '/dev/sdc3'}"
nl|'\n'
op|']'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertDictListMatch'
op|'('
name|'bdms'
op|','
name|'expected_result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_update_block_device_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'id'"
op|']'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'self'
op|'.'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
nl|'\n'
name|'for'
name|'bdm_ref'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x12345678'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x23456789'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x3456789A'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x456789AB'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x56789ABC'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x87654321'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0x98765432'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
number|'0xA9875463'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|'}'
op|']'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertDictListMatch'
op|'('
name|'bdms'
op|','
name|'expected_result'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_size
dedent|''
name|'def'
name|'test_volume_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'local_size'
op|'='
number|'2'
newline|'\n'
name|'swap_size'
op|'='
number|'3'
newline|'\n'
name|'inst_type'
op|'='
op|'{'
string|"'local_gb'"
op|':'
name|'local_size'
op|','
string|"'swap'"
op|':'
name|'swap_size'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'ephemeral0'"
op|')'
op|','
nl|'\n'
name|'local_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'ephemeral1'"
op|')'
op|','
nl|'\n'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'swap'"
op|')'
op|','
nl|'\n'
name|'swap_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_id_one_instance
dedent|''
name|'def'
name|'test_reservation_id_one_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building an instance has a reservation_id that\n        matches return value from create"""'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_ids_two_instances
dedent|''
dedent|''
name|'def'
name|'test_reservation_ids_two_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building 2 instances at once results in a\n        reservation_id being returned equal to reservation id set\n        in both instances\n        """'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'resv_id'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'refs'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_specified_reservation_id
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_with_specified_reservation_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building instances with a specified\n        reservation_id results in the correct reservation_id\n        being set\n        """'
newline|'\n'
nl|'\n'
comment|'# We need admin context to be able to specify our own'
nl|'\n'
comment|'# reservation_ids.'
nl|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
comment|'# 1 instance'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'1'
op|','
name|'max_count'
op|'='
number|'1'
op|','
name|'reservation_id'
op|'='
string|"'meow'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resv_id'
op|','
string|"'meow'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# 2 instances'
nl|'\n'
dedent|''
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|','
name|'reservation_id'
op|'='
string|"'woof'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'resv_id'
op|','
string|"'woof'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'refs'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_name_template
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_instance_name_template'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test the instance_name template"""'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%d'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'i_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%d'"
op|'%'
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%s'"
op|'%'
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(id)d-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'%d-%s'"
op|'%'
nl|'\n'
op|'('
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# not allowed.. default is uuid'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(name)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_fixed_ip
dedent|''
name|'def'
name|'test_add_remove_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'add_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_invalid
dedent|''
name|'def'
name|'test_attach_volume_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ApiError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'/dev/invalid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume
dedent|''
name|'def'
name|'test_attach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_id'
op|'='
number|'1'
newline|'\n'
name|'instance_uuid'
op|'='
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
newline|'\n'
name|'volume_id'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'for'
name|'device'
name|'in'
op|'('
string|"'/dev/sda'"
op|','
string|"'/dev/xvda'"
op|')'
op|':'
newline|'\n'
comment|'# creating mocks'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'volume_api'
op|','
nl|'\n'
string|"'check_attach'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
op|'{'
string|'"method"'
op|':'
string|'"attach_volume"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'mountpoint'"
op|':'
name|'device'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'volume_api'
op|'.'
name|'check_attach'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'volume_id'
op|'='
name|'volume_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|','
string|"'status'"
op|':'
string|"'available'"
op|','
nl|'\n'
string|"'attach_status'"
op|':'
string|"'detached'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'instance_id'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'volume_id'
op|','
name|'device'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console
dedent|''
dedent|''
name|'def'
name|'test_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can a vnc console for an instance."""'
newline|'\n'
DECL|function|vnc_rpc_call_wrapper
name|'def'
name|'vnc_rpc_call_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'token'"
op|':'
string|"'asdf'"
op|','
string|"'host'"
op|':'
string|"'0.0.0.0'"
op|','
string|"'port'"
op|':'
number|'8080'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'vnc_rpc_call_wrapper'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ajax_console
dedent|''
name|'def'
name|'test_ajax_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure we can a vnc console for an instance."""'
newline|'\n'
DECL|function|ajax_rpc_call_wrapper
name|'def'
name|'ajax_rpc_call_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'token'"
op|':'
string|"'asdf'"
op|','
string|"'host'"
op|':'
string|"'0.0.0.0'"
op|','
string|"'port'"
op|':'
number|'8080'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'ajax_rpc_call_wrapper'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_ajax_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume
dedent|''
name|'def'
name|'test_attach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance can be soft rebooted"""'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'volume'
op|'.'
name|'api'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unlock
dedent|''
name|'def'
name|'test_unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_lock
dedent|''
name|'def'
name|'test_get_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
string|"'locked'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_security_group
dedent|''
name|'def'
name|'test_add_remove_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'security_group_name'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'add_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'remove_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diagnostics
dedent|''
name|'def'
name|'test_get_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_actions
dedent|''
name|'def'
name|'test_get_actions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'expected'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
number|'5'
op|','
nl|'\n'
string|"'action'"
op|':'
string|"'rebuild'"
op|','
nl|'\n'
string|"'error'"
op|':'
string|"''"
op|','
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_get_actions
name|'def'
name|'fake_get_actions'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'expected'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_get_actions'"
op|','
nl|'\n'
name|'fake_get_actions'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'actual'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_actions'
op|'('
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_file
dedent|''
name|'def'
name|'test_inject_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure we can write a file to an instance"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'inject_file'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"/tmp/test"'
op|','
string|'"File Contents"'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright [2010] [Anso Labs, LLC]'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'vendor'
newline|'\n'
name|'from'
name|'twisted'
op|'.'
name|'internet'
name|'import'
name|'defer'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'node'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ModelTestCase
name|'class'
name|'ModelTestCase'
op|'('
name|'test'
op|'.'
name|'TrialTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
name|'super'
op|'('
name|'ModelTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'fake_libvirt'
op|'='
name|'True'
op|','
nl|'\n'
name|'fake_storage'
op|'='
name|'True'
op|','
nl|'\n'
name|'fake_users'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'model'
op|'.'
name|'Instance'
op|'('
string|"'i-test'"
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'model'
op|'.'
name|'Host'
op|'('
string|"'testhost'"
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_instance
dedent|''
name|'def'
name|'create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'model'
op|'.'
name|'Instance'
op|'('
string|"'i-test'"
op|')'
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-test'"
newline|'\n'
name|'inst'
op|'['
string|"'launch_time'"
op|']'
op|'='
string|"'10'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
string|"'fake'"
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
string|"'fake'"
newline|'\n'
name|'inst'
op|'['
string|"'instance_type'"
op|']'
op|'='
string|"'m1.tiny'"
newline|'\n'
name|'inst'
op|'['
string|"'node_name'"
op|']'
op|'='
name|'FLAGS'
op|'.'
name|'node_name'
newline|'\n'
name|'inst'
op|'['
string|"'mac_address'"
op|']'
op|'='
name|'utils'
op|'.'
name|'generate_mac'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'inst'
newline|'\n'
nl|'\n'
DECL|member|create_host
dedent|''
name|'def'
name|'create_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'model'
op|'.'
name|'Host'
op|'('
string|"'testhost'"
op|')'
newline|'\n'
name|'host'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'host'
newline|'\n'
nl|'\n'
DECL|member|create_worker
dedent|''
name|'def'
name|'create_worker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'worker'
op|'='
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
newline|'\n'
name|'worker'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'return'
name|'worker'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_create_instance
name|'def'
name|'test_create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" store with create_instace, then test that a load finds it """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_instance'
op|'('
op|')'
newline|'\n'
name|'old'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Instance'
op|'('
name|'instance'
op|'.'
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'False'
op|','
name|'old'
op|'.'
name|'new_record'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_delete_instance
name|'def'
name|'test_delete_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then destroy, then make sure loads a new record """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_instance'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'newinst'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Instance'
op|'('
string|"'i-test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'newinst'
op|'.'
name|'new_record'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_instance_added_to_set
name|'def'
name|'test_instance_added_to_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then check that it is listed for the project """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_instance'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'model'
op|'.'
name|'InstanceDirectory'
op|'('
op|')'
op|'.'
name|'all'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'identifier'
op|'=='
string|"'i-test'"
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'found'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_instance_associates_project
name|'def'
name|'test_instance_associates_project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then check that it is listed for the project """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_instance'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'model'
op|'.'
name|'InstanceDirectory'
op|'('
op|')'
op|'.'
name|'by_project'
op|'('
name|'instance'
op|'.'
name|'project'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'identifier'
op|'=='
string|"'i-test'"
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'found'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_host_class_finds_hosts
name|'def'
name|'test_host_class_finds_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'testhost'"
op|','
name|'model'
op|'.'
name|'Host'
op|'.'
name|'lookup'
op|'('
string|"'testhost'"
op|')'
op|'.'
name|'identifier'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_host_class_doesnt_find_missing_hosts
name|'def'
name|'test_host_class_doesnt_find_missing_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rv'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Host'
op|'.'
name|'lookup'
op|'('
string|"'woahnelly'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'rv'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_create_host
name|'def'
name|'test_create_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" store with create_host, then test that a load finds it """'
newline|'\n'
name|'host'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_host'
op|'('
op|')'
newline|'\n'
name|'old'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Host'
op|'('
name|'host'
op|'.'
name|'identifier'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'False'
op|','
name|'old'
op|'.'
name|'new_record'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_delete_host
name|'def'
name|'test_delete_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then destroy, then make sure loads a new record """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_host'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'newinst'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Host'
op|'('
string|"'testhost'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'newinst'
op|'.'
name|'new_record'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_host_added_to_set
name|'def'
name|'test_host_added_to_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then check that it is included in list """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_host'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'model'
op|'.'
name|'Host'
op|'.'
name|'all'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'identifier'
op|'=='
string|"'testhost'"
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'found'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_create_worker_two_args
name|'def'
name|'test_create_worker_two_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create a worker with two arguments """'
newline|'\n'
name|'w'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
op|'.'
name|'new_record'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_create_worker_single_arg
name|'def'
name|'test_create_worker_single_arg'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create a worker using the combined host:bin format """'
newline|'\n'
name|'w'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Worker'
op|'('
string|'"testhost:nova-testworker"'
op|')'
newline|'\n'
name|'w'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost:nova-testworker'"
op|')'
op|'.'
name|'new_record'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_equality_of_worker_single_and_double_args
name|'def'
name|'test_equality_of_worker_single_and_double_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create a worker using the combined host:bin arg, find with 2 """'
newline|'\n'
name|'w'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Worker'
op|'('
string|'"testhost:nova-testworker"'
op|')'
newline|'\n'
name|'w'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
op|'.'
name|'new_record'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_equality_worker_of_double_and_single_args
name|'def'
name|'test_equality_worker_of_double_and_single_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create a worker using the combined host:bin arg, find with 2 """'
newline|'\n'
name|'w'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'False'
op|','
nl|'\n'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost:nova-testworker'"
op|')'
op|'.'
name|'new_record'
op|'('
op|')'
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_delete_worker
name|'def'
name|'test_delete_worker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then destroy, then make sure loads a new record """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'yield'
name|'instance'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'newinst'
op|'='
name|'yield'
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'newinst'
op|'.'
name|'new_record'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_worker_heartbeat
name|'def'
name|'test_worker_heartbeat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" Create a worker, sleep, heartbeat, check for update """'
newline|'\n'
name|'w'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'ts'
op|'='
name|'w'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
name|'yield'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'2'
op|')'
newline|'\n'
name|'w'
op|'.'
name|'heartbeat'
op|'('
op|')'
newline|'\n'
name|'w2'
op|'='
name|'model'
op|'.'
name|'Worker'
op|'('
string|"'testhost'"
op|','
string|"'nova-testworker'"
op|')'
newline|'\n'
name|'ts2'
op|'='
name|'w2'
op|'['
string|"'updated_at'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
op|'('
name|'ts2'
op|'>'
name|'ts'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_worker_added_to_set
name|'def'
name|'test_worker_added_to_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then check that it is included in list """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'model'
op|'.'
name|'Worker'
op|'.'
name|'all'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'identifier'
op|'=='
string|"'testhost:nova-testworker'"
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'found'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'defer'
op|'.'
name|'inlineCallbacks'
newline|'\n'
DECL|member|test_worker_associates_host
name|'def'
name|'test_worker_associates_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'""" create, then check that it is listed for the host """'
newline|'\n'
name|'instance'
op|'='
name|'yield'
name|'self'
op|'.'
name|'create_worker'
op|'('
op|')'
newline|'\n'
name|'found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'model'
op|'.'
name|'Worker'
op|'.'
name|'by_host'
op|'('
string|"'testhost'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'x'
op|'.'
name|'identifier'
op|'=='
string|"'testhost:nova-testworker'"
op|':'
newline|'\n'
indent|'                '
name|'found'
op|'='
name|'True'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'True'
op|','
name|'found'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

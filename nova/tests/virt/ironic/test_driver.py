begin_unit
comment|'# Copyright 2014 Red Hat, Inc.'
nl|'\n'
comment|'# Copyright 2013 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for the ironic driver."""'
newline|'\n'
nl|'\n'
name|'from'
name|'ironicclient'
name|'import'
name|'exc'
name|'as'
name|'ironic_exception'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
name|'as'
name|'nova_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
name|'as'
name|'nova_context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'utils'
name|'as'
name|'ironic_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'virt'
name|'import'
name|'test_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'client_wrapper'
name|'as'
name|'cw'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'driver'
name|'as'
name|'ironic_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'ironic'
name|'import'
name|'ironic_states'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
DECL|variable|IRONIC_FLAGS
name|'IRONIC_FLAGS'
op|'='
name|'dict'
op|'('
nl|'\n'
DECL|variable|api_version
name|'api_version'
op|'='
number|'1'
op|','
nl|'\n'
DECL|variable|group
name|'group'
op|'='
string|"'ironic'"
op|','
nl|'\n'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|FAKE_CLIENT
name|'FAKE_CLIENT'
op|'='
name|'ironic_utils'
op|'.'
name|'FakeClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeClientWrapper
name|'class'
name|'FakeClientWrapper'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|')'
op|':'
newline|'\n'
DECL|member|_get_client
indent|'    '
name|'def'
name|'_get_client'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FAKE_CLIENT'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeLoopingCall
dedent|''
dedent|''
name|'class'
name|'FakeLoopingCall'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'wait'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'start'
op|'.'
name|'return_value'
op|'='
name|'self'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_properties
dedent|''
dedent|''
name|'def'
name|'_get_properties'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
string|"'cpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'local_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'cpu_arch'"
op|':'
string|"'x86_64'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_stats
dedent|''
name|'def'
name|'_get_stats'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
op|'{'
string|"'cpu_arch'"
op|':'
string|"'x86_64'"
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FAKE_CLIENT_WRAPPER
dedent|''
name|'FAKE_CLIENT_WRAPPER'
op|'='
name|'FakeClientWrapper'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|','
string|"'IronicClientWrapper'"
op|','
name|'lambda'
op|'*'
name|'_'
op|':'
name|'FAKE_CLIENT_WRAPPER'
op|')'
newline|'\n'
DECL|class|IronicDriverTestCase
name|'class'
name|'IronicDriverTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|','
name|'test_driver'
op|'.'
name|'DriverAPITestHelper'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IronicDriverTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
op|'**'
name|'IRONIC_FLAGS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'virtapi'
op|'='
name|'fake'
op|'.'
name|'FakeVirtAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'nova_context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# mock retries configs to avoid sleeps and make tests run quicker'
nl|'\n'
name|'CONF'
op|'.'
name|'set_default'
op|'('
string|"'api_max_retries'"
op|','
name|'default'
op|'='
number|'1'
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'set_default'
op|'('
string|"'api_retry_interval'"
op|','
name|'default'
op|'='
number|'0'
op|','
name|'group'
op|'='
string|"'ironic'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_public_api_signatures
dedent|''
name|'def'
name|'test_public_api_signatures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertPublicAPISignatures'
op|'('
name|'self'
op|'.'
name|'driver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_driver_loading
dedent|''
name|'def'
name|'test_validate_driver_loading'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsInstance'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__get_hypervisor_type
dedent|''
name|'def'
name|'test__get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ironic'"
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_get_hypervisor_type'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__get_hypervisor_version
dedent|''
name|'def'
name|'test__get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_get_hypervisor_version'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_canonicalizes_arch
dedent|''
name|'def'
name|'test__node_resource_canonicalizes_arch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
op|'='
string|"'i386'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'i686'"
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__node_resource_unknown_arch
dedent|''
name|'def'
name|'test__node_resource_unknown_arch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'props'
op|'='
name|'_get_properties'
op|'('
op|')'
newline|'\n'
name|'del'
name|'props'
op|'['
string|"'cpu_arch'"
op|']'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'uuid'
op|'='
name|'node_uuid'
op|','
name|'properties'
op|'='
name|'props'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_node_resource'
op|'('
name|'node'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'result'
op|'['
string|"'supported_instances'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_instance_exists
name|'def'
name|'test_instance_exists'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
string|"'fake-uuid'"
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'node.get_by_instance_uuid'"
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_instance_exists_fail
name|'def'
name|'test_instance_exists_fail'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_call'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
newline|'\n'
name|'instance_uuid'
op|'='
string|"'fake-uuid'"
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'instance_exists'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'node.get_by_instance_uuid'"
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance_obj'
op|'.'
name|'Instance'
op|','
string|"'get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_list_instances
name|'def'
name|'test_list_instances'
op|'('
name|'self'
op|','
name|'mock_inst_by_uuid'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'id'
op|'='
name|'i'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'nodes'
op|'.'
name|'append'
op|'('
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'instance_uuid'
op|'='
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_inst_by_uuid'
op|'.'
name|'side_effect'
op|'='
name|'instances'
newline|'\n'
name|'mock_call'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_with'
op|'('
string|'"node.list"'
op|','
name|'associated'
op|'='
name|'True'
op|')'
newline|'\n'
name|'expected_calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'.'
name|'uuid'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
name|'instances'
op|'['
number|'1'
op|']'
op|'.'
name|'uuid'
op|')'
op|']'
newline|'\n'
name|'mock_inst_by_uuid'
op|'.'
name|'assert_has_calls'
op|'('
name|'expected_calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'instance-00000000'"
op|','
string|"'instance-00000001'"
op|']'
op|','
nl|'\n'
name|'sorted'
op|'('
name|'response'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'cw'
op|'.'
name|'IronicClientWrapper'
op|','
string|"'call'"
op|')'
newline|'\n'
DECL|member|test_list_instance_uuids
name|'def'
name|'test_list_instance_uuids'
op|'('
name|'self'
op|','
name|'mock_call'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'num_nodes'
op|'='
number|'2'
newline|'\n'
name|'nodes'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'range'
op|'('
name|'num_nodes'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nodes'
op|'.'
name|'append'
op|'('
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'mock_call'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
name|'uuids'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
newline|'\n'
name|'mock_call'
op|'.'
name|'assert_called_with'
op|'('
string|"'node.list'"
op|','
name|'associated'
op|'='
name|'True'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
name|'n'
op|'.'
name|'instance_uuid'
name|'for'
name|'n'
name|'in'
name|'nodes'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected'
op|')'
op|','
name|'sorted'
op|'('
name|'uuids'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
DECL|member|test_node_is_available
name|'def'
name|'test_node_is_available'
op|'('
name|'self'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
name|'mock_get'
op|'.'
name|'assert_called_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
name|'mock_get'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'driver'
op|'.'
name|'node_is_available'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'list'"
op|')'
newline|'\n'
DECL|member|test_get_available_nodes
name|'def'
name|'test_get_available_nodes'
op|'('
name|'self'
op|','
name|'mock_list'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_dicts'
op|'='
op|'['
nl|'\n'
comment|'# a node in maintenance /w no instance and power OFF'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'maintenance'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_OFF'
op|'}'
op|','
nl|'\n'
comment|'# a node /w instance and power ON'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'POWER_ON'
op|'}'
op|','
nl|'\n'
comment|'# a node not in maintenance /w no instance and bad power state'
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'ironic_states'
op|'.'
name|'ERROR'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'nodes'
op|'='
op|'['
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|'**'
name|'n'
op|')'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|']'
newline|'\n'
name|'mock_list'
op|'.'
name|'return_value'
op|'='
name|'nodes'
newline|'\n'
name|'available_nodes'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_nodes'
op|'('
op|')'
newline|'\n'
name|'expected_uuids'
op|'='
op|'['
name|'n'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'n'
name|'in'
name|'node_dicts'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'expected_uuids'
op|')'
op|','
name|'sorted'
op|'('
name|'available_nodes'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|'.'
name|'IronicDriver'
op|','
string|"'_node_resource'"
op|')'
newline|'\n'
DECL|member|test_get_available_resource
name|'def'
name|'test_get_available_resource'
op|'('
name|'self'
op|','
name|'mock_nr'
op|','
name|'mock_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'fake_resource'
op|'='
string|"'fake-resource'"
newline|'\n'
name|'mock_get'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'mock_nr'
op|'.'
name|'return_value'
op|'='
name|'fake_resource'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_resource'
op|','
name|'result'
op|')'
newline|'\n'
name|'mock_nr'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_info
name|'def'
name|'test_get_info'
op|'('
name|'self'
op|','
name|'mock_gbiu'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'properties'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'cpus'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'power_state'
op|'='
name|'ironic_states'
op|'.'
name|'POWER_ON'
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'instance_uuid'
op|'='
name|'instance_uuid'
op|','
nl|'\n'
name|'properties'
op|'='
name|'properties'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'power_state'
op|')'
newline|'\n'
nl|'\n'
name|'mock_gbiu'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
nl|'\n'
comment|'# ironic_states.POWER_ON should be mapped to'
nl|'\n'
comment|'# nova_states.RUNNING'
nl|'\n'
name|'memory_kib'
op|'='
name|'properties'
op|'['
string|"'memory_mb'"
op|']'
op|'*'
number|'1024'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'state'"
op|':'
name|'nova_states'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
name|'memory_kib'
op|','
nl|'\n'
string|"'mem'"
op|':'
name|'memory_kib'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
name|'properties'
op|'['
string|"'cpus'"
op|']'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
string|"'fake-context'"
op|','
nl|'\n'
name|'uuid'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'get_by_instance_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_info_http_not_found
name|'def'
name|'test_get_info_http_not_found'
op|'('
name|'self'
op|','
name|'mock_gbiu'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_gbiu'
op|'.'
name|'side_effect'
op|'='
name|'ironic_exception'
op|'.'
name|'NotFound'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'state'"
op|':'
name|'nova_states'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'mem'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_info'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
DECL|member|test_reboot
name|'def'
name|'test_reboot'
op|'('
name|'self'
op|','
name|'mock_val_inst'
op|','
name|'mock_set_power'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
op|')'
newline|'\n'
name|'mock_val_inst'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'node'
op|'.'
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'mock_set_power'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node'
op|'.'
name|'uuid'
op|','
string|"'reboot'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
DECL|member|test_power_off
name|'def'
name|'test_power_off'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_off'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'mock_sp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
string|"'off'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ironic_driver'
op|','
string|"'_validate_instance_and_node'"
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'FAKE_CLIENT'
op|'.'
name|'node'
op|','
string|"'set_power_state'"
op|')'
newline|'\n'
DECL|member|test_power_on
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|','
name|'mock_sp'
op|','
name|'fake_validate'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node_uuid'
op|'='
string|"'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'"
newline|'\n'
name|'node'
op|'='
name|'ironic_utils'
op|'.'
name|'get_test_node'
op|'('
name|'driver'
op|'='
string|"'fake'"
op|','
name|'uuid'
op|'='
name|'node_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'fake_validate'
op|'.'
name|'return_value'
op|'='
name|'node'
newline|'\n'
nl|'\n'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
nl|'\n'
name|'node'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'power_on'
op|'('
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'get_test_network_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_sp'
op|'.'
name|'assert_called_once_with'
op|'('
name|'node_uuid'
op|','
string|"'on'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#  Copyright 2014 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'timeout'
name|'as'
name|'etimeout'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'pathutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'vmops'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'hyperv'
name|'import'
name|'vmutils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMOpsTestCase
name|'class'
name|'VMOpsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit tests for the Hyper-V VMOps class."""'
newline|'\n'
nl|'\n'
DECL|variable|_FAKE_TIMEOUT
name|'_FAKE_TIMEOUT'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'test_case_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMOpsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'test_case_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMOpsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
string|"'fake-context'"
newline|'\n'
nl|'\n'
comment|'# utilsfactory will check the host OS version via get_hostutils,'
nl|'\n'
comment|'# in order to return the proper Utils Class, so it must be mocked.'
nl|'\n'
name|'patched_func'
op|'='
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'utilsfactory'
op|','
nl|'\n'
string|'"get_hostutils"'
op|')'
newline|'\n'
name|'patched_func'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'patched_func'
op|'.'
name|'stop'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'='
name|'vmops'
op|'.'
name|'VMOps'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_config_drive
dedent|''
name|'def'
name|'test_attach_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDiskFormat'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'attach_config_drive'
op|','
nl|'\n'
name|'instance'
op|','
string|"'C:/fake_instance_dir/configdrive.xxx'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_HARD'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_ENABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft_failed
name|'def'
name|'test_reboot_soft_failed'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|','
nl|'\n'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_REBOOT'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps.power_on"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._soft_shutdown"'
op|')'
newline|'\n'
DECL|member|test_reboot_soft_exception
name|'def'
name|'test_reboot_soft_exception'
op|'('
name|'self'
op|','
name|'mock_soft_shutdown'
op|','
name|'mock_power_on'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_soft_shutdown'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'mock_power_on'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
string|'"Expected failure"'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
name|'vmops'
op|'.'
name|'REBOOT_TYPE_SOFT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_soft_shutdown'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'mock_power_on'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_reboot
dedent|''
name|'def'
name|'_test_reboot'
op|'('
name|'self'
op|','
name|'reboot_type'
op|','
name|'vm_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|','
string|"'_set_vm_state'"
op|')'
name|'as'
name|'mock_set_state'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'reboot'
op|'('
name|'instance'
op|','
op|'{'
op|'}'
op|','
name|'reboot_type'
op|')'
newline|'\n'
name|'mock_set_state'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|','
name|'vm_state'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmutils.VMUtils.soft_shutdown_vm"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmops.VMOps._wait_for_power_off"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown
name|'def'
name|'test_soft_shutdown'
op|'('
name|'self'
op|','
name|'mock_wait_for_power_off'
op|','
name|'mock_shutdown_vm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'mock_wait_for_power_off'
op|'.'
name|'assert_called_once_with'
op|'('
nl|'\n'
name|'instance'
op|'.'
name|'name'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"nova.virt.hyperv.vmutils.VMUtils.soft_shutdown_vm"'
op|')'
newline|'\n'
DECL|member|test_soft_shutdown_failed
name|'def'
name|'test_soft_shutdown_failed'
op|'('
name|'self'
op|','
name|'mock_shutdown_vm'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
op|'('
nl|'\n'
string|'"Expected failure."'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_soft_shutdown'
op|'('
name|'instance'
op|','
name|'self'
op|'.'
name|'_FAKE_TIMEOUT'
op|')'
newline|'\n'
nl|'\n'
name|'mock_shutdown_vm'
op|'.'
name|'assert_called_once_with'
op|'('
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vm_state
dedent|''
name|'def'
name|'test_get_vm_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'summary_info'
op|'='
op|'{'
string|"'EnabledState'"
op|':'
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_vmutils'
op|','
nl|'\n'
string|"'get_vm_summary_info'"
op|')'
name|'as'
name|'mock_get_summary_info'
op|':'
newline|'\n'
indent|'            '
name|'mock_get_summary_info'
op|'.'
name|'return_value'
op|'='
name|'summary_info'
newline|'\n'
nl|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_get_vm_state'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'response'
op|','
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'VMOps'
op|','
string|"'_get_vm_state'"
op|')'
newline|'\n'
DECL|member|test_wait_for_power_off_true
name|'def'
name|'test_wait_for_power_off_true'
op|'('
name|'self'
op|','
name|'mock_get_state'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_get_state'
op|'.'
name|'return_value'
op|'='
name|'constants'
op|'.'
name|'HYPERV_VM_STATE_DISABLED'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_wait_for_power_off'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'vmops'
op|'.'
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'mock_get_state'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'vmops'
op|'.'
name|'etimeout'
op|','
string|'"with_timeout"'
op|')'
newline|'\n'
DECL|member|test_wait_for_power_off_false
name|'def'
name|'test_wait_for_power_off_false'
op|'('
name|'self'
op|','
name|'mock_with_timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mock_with_timeout'
op|'.'
name|'side_effect'
op|'='
name|'etimeout'
op|'.'
name|'Timeout'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_wait_for_power_off'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'FAKE_VM_NAME'
op|','
name|'vmops'
op|'.'
name|'SHUTDOWN_TIME_INCREMENT'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"__builtin__.open"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|'"os.path.exists"'
op|')'
newline|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'pathutils'
op|'.'
name|'PathUtils'
op|','
string|"'get_vm_console_log_paths'"
op|')'
newline|'\n'
DECL|member|test_get_console_output_exception
name|'def'
name|'test_get_console_output_exception'
op|'('
name|'self'
op|','
nl|'\n'
name|'fake_get_vm_log_path'
op|','
nl|'\n'
name|'fake_path_exists'
op|','
nl|'\n'
name|'fake_open'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_vm'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_open'
op|'.'
name|'side_effect'
op|'='
name|'vmutils'
op|'.'
name|'HyperVException'
newline|'\n'
name|'fake_path_exists'
op|'.'
name|'return_value'
op|'='
name|'True'
newline|'\n'
name|'fake_get_vm_log_path'
op|'.'
name|'return_value'
op|'='
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fake_console_log_path'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'fake_console_log_archived'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.virt.hyperv.vmops.open'"
op|','
name|'fake_open'
op|','
name|'create'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'vmutils'
op|'.'
name|'HyperVException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'get_console_output'
op|','
nl|'\n'
name|'fake_vm'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

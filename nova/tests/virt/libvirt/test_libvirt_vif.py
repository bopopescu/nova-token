begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Copyright 2012 Nicira, Inc'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'fakelibvirt'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'config'
name|'as'
name|'vconfig'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'vif'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_default_mapping
name|'def'
name|'get_default_mapping'
op|'('
name|'exclude'
op|'='
name|'None'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'mapping_body'
op|'='
op|'{'
nl|'\n'
string|"'mac'"
op|':'
string|"'ca:fe:de:ad:be:ef'"
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
string|"'ip'"
op|':'
string|"'101.168.1.9'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
string|"'191.168.1.1'"
op|','
nl|'\n'
string|"'vif_uuid'"
op|':'
string|"'vif-xxx-yyy-zzz'"
op|','
nl|'\n'
string|"'vif_devname'"
op|':'
string|"'tap-xxx-yyy-zzz'"
nl|'\n'
op|'}'
newline|'\n'
name|'mapping_body'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'if'
name|'exclude'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
name|'in'
name|'exclude'
op|':'
newline|'\n'
indent|'            '
name|'del'
name|'mapping_body'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'mapping_body'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_default_net
dedent|''
name|'def'
name|'get_default_net'
op|'('
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'body'
op|'='
op|'{'
nl|'\n'
string|"'cidr'"
op|':'
string|"'101.168.1.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'101:1db9::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'101:1db9::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
number|'99'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'101.168.1.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'101.168.1.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'network-id-xxx-yyy-zzz'"
nl|'\n'
op|'}'
newline|'\n'
name|'body'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'body'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVifTestCase
dedent|''
name|'class'
name|'LibvirtVifTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|net_bridge
indent|'    '
name|'net_bridge'
op|'='
name|'get_default_net'
op|'('
name|'bridge'
op|'='
string|"'br0'"
op|','
name|'bridge_interface'
op|'='
string|"'eth0'"
op|')'
newline|'\n'
DECL|variable|net_bridge_neutron
name|'net_bridge_neutron'
op|'='
name|'get_default_net'
op|'('
name|'bridge_interface'
op|'='
string|"'eth0'"
op|')'
newline|'\n'
DECL|variable|net_ovs
name|'net_ovs'
op|'='
name|'get_default_net'
op|'('
name|'bridge'
op|'='
string|"'br0'"
op|')'
newline|'\n'
DECL|variable|net_8021
name|'net_8021'
op|'='
name|'get_default_net'
op|'('
name|'interface'
op|'='
string|"'eth0'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_bridge
name|'mapping_bridge'
op|'='
name|'get_default_mapping'
op|'('
name|'gateway_v6'
op|'='
name|'net_bridge'
op|'['
string|"'gateway_v6'"
op|']'
op|','
nl|'\n'
DECL|variable|vif_type
name|'vif_type'
op|'='
nl|'\n'
name|'network_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|')'
newline|'\n'
DECL|variable|mapping_bridge_neutron
name|'mapping_bridge_neutron'
op|'='
name|'get_default_mapping'
op|'('
nl|'\n'
DECL|variable|gateway_v6
name|'gateway_v6'
op|'='
name|'net_bridge'
op|'['
string|"'gateway_v6'"
op|']'
op|')'
newline|'\n'
DECL|variable|mapping_ovs
name|'mapping_ovs'
op|'='
name|'get_default_mapping'
op|'('
name|'gateway_v6'
op|'='
name|'net_ovs'
op|'['
string|"'gateway_v6'"
op|']'
op|','
nl|'\n'
DECL|variable|vif_type
name|'vif_type'
op|'='
name|'network_model'
op|'.'
name|'VIF_TYPE_OVS'
op|','
nl|'\n'
DECL|variable|ovs_interfaceid
name|'ovs_interfaceid'
op|'='
string|"'aaa-bbb-ccc'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_ivs
name|'mapping_ivs'
op|'='
name|'get_default_mapping'
op|'('
name|'gateway_v6'
op|'='
name|'net_ovs'
op|'['
string|"'gateway_v6'"
op|']'
op|','
nl|'\n'
DECL|variable|vif_type
name|'vif_type'
op|'='
name|'network_model'
op|'.'
name|'VIF_TYPE_IVS'
op|','
nl|'\n'
DECL|variable|ivs_interfaceid
name|'ivs_interfaceid'
op|'='
string|"'aaa-bbb-ccc'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_ovs_legacy
name|'mapping_ovs_legacy'
op|'='
name|'get_default_mapping'
op|'('
op|'['
string|"'vif_devname'"
op|']'
op|','
nl|'\n'
DECL|variable|gateway_v6
name|'gateway_v6'
op|'='
name|'net_ovs'
op|'['
string|"'gateway_v6'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_8021qbh
name|'mapping_8021qbh'
op|'='
name|'get_default_mapping'
op|'('
nl|'\n'
op|'['
string|"'ips'"
op|','
string|"'dhcp_server'"
op|']'
op|','
name|'vif_type'
op|'='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBH'
op|','
nl|'\n'
DECL|variable|qbh_params
name|'qbh_params'
op|'='
name|'network_model'
op|'.'
name|'VIF8021QbhParams'
op|'('
name|'profileid'
op|'='
string|'"xxx-yyy-zzz"'
op|')'
op|','
op|')'
newline|'\n'
nl|'\n'
DECL|variable|net_iovisor
name|'net_iovisor'
op|'='
name|'get_default_net'
op|'('
name|'interface'
op|'='
string|"'eth0'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_iovisor
name|'mapping_iovisor'
op|'='
name|'get_default_mapping'
op|'('
nl|'\n'
op|'['
string|"'ips'"
op|','
string|"'dhcp_server'"
op|']'
op|','
name|'vif_type'
op|'='
name|'network_model'
op|'.'
name|'VIF_TYPE_IOVISOR'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_8021qbg
name|'mapping_8021qbg'
op|'='
name|'get_default_mapping'
op|'('
nl|'\n'
op|'['
string|"'ips'"
op|','
string|"'dhcp_server'"
op|']'
op|','
name|'vif_type'
op|'='
name|'network_model'
op|'.'
name|'VIF_TYPE_802_QBG'
op|','
nl|'\n'
DECL|variable|qbg_params
name|'qbg_params'
op|'='
name|'network_model'
op|'.'
name|'VIF8021QbgParams'
op|'('
name|'managerid'
op|'='
string|'"xxx-yyy-zzz"'
op|','
nl|'\n'
DECL|variable|typeid
name|'typeid'
op|'='
string|'"aaa-bbb-ccc"'
op|','
nl|'\n'
DECL|variable|typeidversion
name|'typeidversion'
op|'='
string|'"1"'
op|','
nl|'\n'
DECL|variable|instanceid
name|'instanceid'
op|'='
string|'"ddd-eee-fff"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|mapping_none
name|'mapping_none'
op|'='
name|'get_default_mapping'
op|'('
name|'gateway_v6'
op|'='
name|'net_bridge'
op|'['
string|"'gateway_v6'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|instance
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'instance-name'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'instance-uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|bandwidth
name|'bandwidth'
op|'='
op|'{'
nl|'\n'
string|"'quota:vif_inbound_peak'"
op|':'
string|"'102400'"
op|','
nl|'\n'
string|"'quota:vif_outbound_peak'"
op|':'
string|"'102400'"
op|','
nl|'\n'
string|"'quota:vif_inbound_average'"
op|':'
string|"'102400'"
op|','
nl|'\n'
string|"'quota:vif_outbound_average'"
op|':'
string|"'102400'"
op|','
nl|'\n'
string|"'quota:vif_inbound_burst'"
op|':'
string|"'102400'"
op|','
nl|'\n'
string|"'quota:vif_inbound_burst'"
op|':'
string|"'102400'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVifTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'allow_same_net_traffic'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'executes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'executes'
op|'.'
name|'append'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_conn
dedent|''
name|'def'
name|'_get_conn'
op|'('
name|'self'
op|','
name|'uri'
op|'='
string|'"qemu:///session"'
op|','
name|'ver'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
DECL|function|__inner
indent|'        '
name|'def'
name|'__inner'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'ver'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'fakelibvirt'
op|'.'
name|'Connection'
op|'('
name|'uri'
op|','
name|'False'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'fakelibvirt'
op|'.'
name|'Connection'
op|'('
name|'uri'
op|','
name|'False'
op|','
name|'ver'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'__inner'
newline|'\n'
nl|'\n'
DECL|member|_get_node
dedent|''
name|'def'
name|'_get_node'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'return'
name|'ret'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_assertMacEquals
dedent|''
name|'def'
name|'_assertMacEquals'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'mapping'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mac'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'mac'
op|','
name|'mapping'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertTypeEquals
dedent|''
name|'def'
name|'_assertTypeEquals'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'type'
op|','
name|'attr'
op|','
name|'source'
op|','
name|'br_want'
op|','
nl|'\n'
name|'prefix'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
name|'type'
op|')'
newline|'\n'
name|'br_name'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
name|'attr'
op|')'
op|'.'
name|'get'
op|'('
name|'source'
op|')'
newline|'\n'
name|'if'
name|'prefix'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'br_name'
op|','
name|'br_want'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'br_name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertTypeAndMacEquals
dedent|''
dedent|''
name|'def'
name|'_assertTypeAndMacEquals'
op|'('
name|'self'
op|','
name|'node'
op|','
name|'type'
op|','
name|'attr'
op|','
name|'source'
op|','
name|'mapping'
op|','
nl|'\n'
name|'br_want'
op|'='
name|'None'
op|','
name|'size'
op|'='
number|'0'
op|','
name|'prefix'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ret'
op|'='
name|'node'
op|'.'
name|'findall'
op|'('
string|'"filterref"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
name|'size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeEquals'
op|'('
name|'node'
op|','
name|'type'
op|','
name|'attr'
op|','
name|'source'
op|','
name|'br_want'
op|','
nl|'\n'
name|'prefix'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertMacEquals'
op|'('
name|'node'
op|','
name|'mapping'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assertModel
dedent|''
name|'def'
name|'_assertModel'
op|'('
name|'self'
op|','
name|'xml'
op|','
name|'model_want'
op|'='
name|'None'
op|','
name|'driver_want'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'if'
name|'model_want'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'node'
op|'.'
name|'findall'
op|'('
string|'"model"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'model'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"model"'
op|')'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'model'
op|','
name|'model_want'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'driver_want'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'ret'
op|'='
name|'node'
op|'.'
name|'findall'
op|'('
string|'"driver"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'driver'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"driver"'
op|')'
op|'.'
name|'get'
op|'('
string|'"name"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'driver'
op|','
name|'driver_want'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_conf
dedent|''
dedent|''
name|'def'
name|'_get_conf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuest'
op|'('
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'virt_type'
op|'='
string|'"qemu"'
newline|'\n'
name|'conf'
op|'.'
name|'name'
op|'='
string|'"fake-name"'
newline|'\n'
name|'conf'
op|'.'
name|'uuid'
op|'='
string|'"fake-uuid"'
newline|'\n'
name|'conf'
op|'.'
name|'memory'
op|'='
number|'100'
op|'*'
number|'1024'
newline|'\n'
name|'conf'
op|'.'
name|'vcpus'
op|'='
number|'4'
newline|'\n'
name|'return'
name|'conf'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_xml
dedent|''
name|'def'
name|'_get_instance_xml'
op|'('
name|'self'
op|','
name|'driver'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'image_meta'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'default_inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'extra_specs'
op|'='
name|'default_inst_type'
op|'['
string|"'extra_specs'"
op|']'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'quota_bandwith'
op|'='
name|'self'
op|'.'
name|'bandwidth'
op|'.'
name|'items'
op|'('
op|')'
newline|'\n'
name|'default_inst_type'
op|'['
string|"'extra_specs'"
op|']'
op|'='
name|'dict'
op|'('
name|'extra_specs'
op|'+'
name|'quota_bandwith'
op|')'
newline|'\n'
name|'conf'
op|'='
name|'self'
op|'.'
name|'_get_conf'
op|'('
op|')'
newline|'\n'
name|'nic'
op|'='
name|'driver'
op|'.'
name|'get_config'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'default_inst_type'
op|')'
newline|'\n'
name|'conf'
op|'.'
name|'add_device'
op|'('
name|'nic'
op|')'
newline|'\n'
name|'return'
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multiple_nics
dedent|''
name|'def'
name|'test_multiple_nics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conf'
op|'='
name|'self'
op|'.'
name|'_get_conf'
op|'('
op|')'
newline|'\n'
comment|'# Tests multiple nic configuration and that target_dev is'
nl|'\n'
comment|'# set for each'
nl|'\n'
name|'nics'
op|'='
op|'['
op|'{'
string|"'net_type'"
op|':'
string|"'bridge'"
op|','
nl|'\n'
string|"'mac_addr'"
op|':'
string|"'00:00:00:00:00:0b'"
op|','
nl|'\n'
string|"'source_dev'"
op|':'
string|"'b_source_dev'"
op|','
nl|'\n'
string|"'target_dev'"
op|':'
string|"'b_target_dev'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'net_type'"
op|':'
string|"'ethernet'"
op|','
nl|'\n'
string|"'mac_addr'"
op|':'
string|"'00:00:00:00:00:0e'"
op|','
nl|'\n'
string|"'source_dev'"
op|':'
string|"'e_source_dev'"
op|','
nl|'\n'
string|"'target_dev'"
op|':'
string|"'e_target_dev'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'net_type'"
op|':'
string|"'direct'"
op|','
nl|'\n'
string|"'mac_addr'"
op|':'
string|"'00:00:00:00:00:0d'"
op|','
nl|'\n'
string|"'source_dev'"
op|':'
string|"'d_source_dev'"
op|','
nl|'\n'
string|"'target_dev'"
op|':'
string|"'d_target_dev'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'nic'
name|'in'
name|'nics'
op|':'
newline|'\n'
indent|'            '
name|'nic_conf'
op|'='
name|'vconfig'
op|'.'
name|'LibvirtConfigGuestInterface'
op|'('
op|')'
newline|'\n'
name|'nic_conf'
op|'.'
name|'net_type'
op|'='
name|'nic'
op|'['
string|"'net_type'"
op|']'
newline|'\n'
name|'nic_conf'
op|'.'
name|'target_dev'
op|'='
name|'nic'
op|'['
string|"'target_dev'"
op|']'
newline|'\n'
name|'nic_conf'
op|'.'
name|'mac_addr'
op|'='
name|'nic'
op|'['
string|"'mac_addr'"
op|']'
newline|'\n'
name|'nic_conf'
op|'.'
name|'source_dev'
op|'='
name|'nic'
op|'['
string|"'source_dev'"
op|']'
newline|'\n'
name|'conf'
op|'.'
name|'add_device'
op|'('
name|'nic_conf'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'xml'
op|'='
name|'conf'
op|'.'
name|'to_xml'
op|'('
op|')'
newline|'\n'
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'nic'
name|'in'
name|'nics'
op|':'
newline|'\n'
indent|'            '
name|'path'
op|'='
string|'"./devices/interface/[@type=\'%s\']"'
op|'%'
name|'nic'
op|'['
string|"'net_type'"
op|']'
newline|'\n'
name|'node'
op|'='
name|'doc'
op|'.'
name|'find'
op|'('
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nic'
op|'['
string|"'net_type'"
op|']'
op|','
name|'node'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nic'
op|'['
string|"'mac_addr'"
op|']'
op|','
nl|'\n'
name|'node'
op|'.'
name|'find'
op|'('
string|'"mac"'
op|')'
op|'.'
name|'get'
op|'('
string|'"address"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nic'
op|'['
string|"'target_dev'"
op|']'
op|','
nl|'\n'
name|'node'
op|'.'
name|'find'
op|'('
string|'"target"'
op|')'
op|'.'
name|'get'
op|'('
string|'"dev"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_novirtio
dedent|''
dedent|''
name|'def'
name|'test_model_novirtio'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'False'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'kvm'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertModel'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_kvm
dedent|''
name|'def'
name|'test_model_kvm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'True'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'kvm'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_assertModel'
op|'('
name|'xml'
op|','
string|'"virtio"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_kvm_custom
dedent|''
name|'def'
name|'test_model_kvm_custom'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'True'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'kvm'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
string|"'hw_vif_model'"
op|':'
string|"'e1000'"
op|'}'
op|'}'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertModel'
op|'('
name|'xml'
op|','
string|'"e1000"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_kvm_bogus
dedent|''
name|'def'
name|'test_model_kvm_bogus'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'True'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'kvm'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'image_meta'
op|'='
op|'{'
string|"'properties'"
op|':'
op|'{'
string|"'hw_vif_model'"
op|':'
string|"'acme'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'UnsupportedHardware'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_instance_xml'
op|','
nl|'\n'
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_qemu
dedent|''
name|'def'
name|'test_model_qemu'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'True'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'qemu'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|')'
newline|'\n'
nl|'\n'
name|'doc'
op|'='
name|'etree'
op|'.'
name|'fromstring'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'doc'
op|'.'
name|'findall'
op|'('
string|"'./devices/interface/bandwidth'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ret'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_assertModel'
op|'('
name|'xml'
op|','
string|'"virtio"'
op|','
string|'"qemu"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_model_xen
dedent|''
name|'def'
name|'test_model_xen'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_use_virtio_for_bridges'
op|'='
name|'True'
op|','
nl|'\n'
name|'libvirt_type'
op|'='
string|"'xen'"
op|')'
newline|'\n'
nl|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
string|'"xen:///system"'
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertModel'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_driver_none
dedent|''
name|'def'
name|'test_generic_driver_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_instance_xml'
op|','
nl|'\n'
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_none'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_bridge_driver
dedent|''
name|'def'
name|'_check_bridge_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'br_want'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"bridge"'
op|','
string|'"source"'
op|','
string|'"bridge"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|','
name|'br_want'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bridge_driver
dedent|''
name|'def'
name|'test_bridge_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtBridgeDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_bridge_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_driver_bridge
dedent|''
name|'def'
name|'test_generic_driver_bridge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_bridge_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_neutron_bridge_driver
dedent|''
name|'def'
name|'test_neutron_bridge_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'NeutronLinuxBridgeVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'br_want'
op|'='
string|"'brq'"
op|'+'
name|'self'
op|'.'
name|'net_bridge_neutron'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'br_want'
op|'='
name|'br_want'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_check_bridge_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_bridge_neutron'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_bridge_neutron'
op|','
nl|'\n'
name|'br_want'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_ivs_ethernet_driver
dedent|''
name|'def'
name|'_check_ivs_ethernet_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'dev_prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"ethernet"'
op|','
string|'"target"'
op|','
string|'"dev"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ivs'
op|','
name|'prefix'
op|'='
name|'dev_prefix'
op|')'
newline|'\n'
name|'script'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"script"'
op|')'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'script'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_ovs_ethernet_driver
dedent|''
name|'def'
name|'_check_ovs_ethernet_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'dev_prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"ethernet"'
op|','
string|'"target"'
op|','
string|'"dev"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs'
op|','
name|'prefix'
op|'='
name|'dev_prefix'
op|')'
newline|'\n'
name|'script'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"script"'
op|')'
op|'.'
name|'get'
op|'('
string|'"path"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'script'
op|','
string|'""'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ovs_ethernet_driver_legacy
dedent|''
name|'def'
name|'test_ovs_ethernet_driver_legacy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtOpenVswitchDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_ovs_ethernet_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs_legacy'
op|','
nl|'\n'
string|'"nic"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ovs_ethernet_driver
dedent|''
name|'def'
name|'test_ovs_ethernet_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_ovs_ethernet_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs'
op|','
nl|'\n'
string|'"tap"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ivs_ethernet_driver
dedent|''
name|'def'
name|'test_ivs_ethernet_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_ivs_ethernet_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ivs'
op|','
nl|'\n'
string|'"tap"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_ivs_virtualport_driver
dedent|''
name|'def'
name|'_check_ivs_virtualport_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'want_iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"ethernet"'
op|','
string|'"target"'
op|','
string|'"dev"'
op|','
nl|'\n'
name|'mapping'
op|','
name|'mapping'
op|'['
string|"'vif_devname'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_ovs_virtualport_driver
dedent|''
name|'def'
name|'_check_ovs_virtualport_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'want_iface_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"bridge"'
op|','
string|'"source"'
op|','
string|'"bridge"'
op|','
nl|'\n'
name|'mapping'
op|','
string|'"br0"'
op|')'
newline|'\n'
name|'vp'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"virtualport"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vp'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"openvswitch"'
op|')'
newline|'\n'
name|'iface_id_found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'p_elem'
name|'in'
name|'vp'
op|'.'
name|'findall'
op|'('
string|'"parameters"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'iface_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"interfaceid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'iface_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'iface_id'
op|','
name|'want_iface_id'
op|')'
newline|'\n'
name|'iface_id_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'iface_id_found'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ovs_virtualport_driver
dedent|''
name|'def'
name|'test_ovs_virtualport_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtOpenVswitchVirtualPortDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9011'
op|')'
op|')'
newline|'\n'
name|'want_iface_id'
op|'='
string|"'vif-xxx-yyy-zzz'"
newline|'\n'
name|'self'
op|'.'
name|'_check_ovs_virtualport_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs_legacy'
op|','
nl|'\n'
name|'want_iface_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_ovs_virtualport_driver
dedent|''
name|'def'
name|'test_generic_ovs_virtualport_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9011'
op|')'
op|')'
newline|'\n'
name|'want_iface_id'
op|'='
name|'self'
op|'.'
name|'mapping_ovs'
op|'['
string|"'ovs_interfaceid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_check_ovs_virtualport_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs'
op|','
nl|'\n'
name|'want_iface_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_ivs_virtualport_driver
dedent|''
name|'def'
name|'test_generic_ivs_virtualport_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
name|'ver'
op|'='
number|'9011'
op|')'
op|')'
newline|'\n'
name|'want_iface_id'
op|'='
name|'self'
op|'.'
name|'mapping_ivs'
op|'['
string|"'ivs_interfaceid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_check_ivs_virtualport_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ivs'
op|','
nl|'\n'
name|'want_iface_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_neutron_hybrid_driver
dedent|''
name|'def'
name|'_check_neutron_hybrid_driver'
op|'('
name|'self'
op|','
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|','
name|'br_want'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.IptablesFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
name|'net'
op|','
name|'mapping'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"bridge"'
op|','
string|'"source"'
op|','
string|'"bridge"'
op|','
nl|'\n'
name|'mapping'
op|','
name|'br_want'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quantum_hybrid_driver
dedent|''
name|'def'
name|'test_quantum_hybrid_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'br_want'
op|'='
string|'"qbr"'
op|'+'
name|'self'
op|'.'
name|'mapping_ovs'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
name|'br_want'
op|'='
name|'br_want'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtHybridOVSBridgeDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_neutron_hybrid_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs_legacy'
op|','
nl|'\n'
name|'br_want'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_hybrid_driver
dedent|''
name|'def'
name|'test_generic_hybrid_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'br_want'
op|'='
string|'"qbr"'
op|'+'
name|'self'
op|'.'
name|'mapping_ovs'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
name|'br_want'
op|'='
name|'br_want'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_check_neutron_hybrid_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ovs'
op|','
nl|'\n'
name|'br_want'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ivs_hybrid_driver
dedent|''
name|'def'
name|'test_ivs_hybrid_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'br_want'
op|'='
string|'"qbr"'
op|'+'
name|'self'
op|'.'
name|'mapping_ivs'
op|'['
string|"'vif_uuid'"
op|']'
newline|'\n'
name|'br_want'
op|'='
name|'br_want'
op|'['
op|':'
name|'network_model'
op|'.'
name|'NIC_NAME_LEN'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_check_neutron_hybrid_driver'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_ovs'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_ivs'
op|','
nl|'\n'
name|'br_want'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_8021qbh_driver
dedent|''
name|'def'
name|'test_generic_8021qbh_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_8021'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_8021qbh'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeEquals'
op|'('
name|'node'
op|','
string|'"direct"'
op|','
string|'"source"'
op|','
string|'"dev"'
op|','
string|'"eth0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertMacEquals'
op|'('
name|'node'
op|','
name|'self'
op|'.'
name|'mapping_8021qbh'
op|')'
newline|'\n'
name|'vp'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"virtualport"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vp'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"802.1Qbh"'
op|')'
newline|'\n'
name|'profile_id_found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'p_elem'
name|'in'
name|'vp'
op|'.'
name|'findall'
op|'('
string|'"parameters"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'wantparams'
op|'='
name|'self'
op|'.'
name|'mapping_8021qbh'
op|'['
string|"'qbh_params'"
op|']'
newline|'\n'
name|'profile_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"profileid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'profile_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'profile_id'
op|','
nl|'\n'
name|'wantparams'
op|'['
string|"'profileid'"
op|']'
op|')'
newline|'\n'
name|'profile_id_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'profile_id_found'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_generic_iovisor_driver
name|'def'
name|'test_generic_iovisor_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'firewall_driver'
op|'='
string|'"nova.virt.firewall.NoopFirewallDriver"'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_iovisor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_iovisor'
op|')'
newline|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeAndMacEquals'
op|'('
name|'node'
op|','
string|'"ethernet"'
op|','
string|'"target"'
op|','
string|'"dev"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_iovisor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_iovisor'
op|'['
string|"'vif_devname'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generic_8021qbg_driver
dedent|''
dedent|''
name|'def'
name|'test_generic_8021qbg_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'d'
op|'='
name|'vif'
op|'.'
name|'LibvirtGenericVIFDriver'
op|'('
name|'self'
op|'.'
name|'_get_conn'
op|'('
op|')'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'_get_instance_xml'
op|'('
name|'d'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_8021'
op|','
nl|'\n'
name|'self'
op|'.'
name|'mapping_8021qbg'
op|')'
newline|'\n'
nl|'\n'
name|'node'
op|'='
name|'self'
op|'.'
name|'_get_node'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertTypeEquals'
op|'('
name|'node'
op|','
string|'"direct"'
op|','
string|'"source"'
op|','
string|'"dev"'
op|','
string|'"eth0"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assertMacEquals'
op|'('
name|'node'
op|','
name|'self'
op|'.'
name|'mapping_8021qbg'
op|')'
newline|'\n'
nl|'\n'
name|'vp'
op|'='
name|'node'
op|'.'
name|'find'
op|'('
string|'"virtualport"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vp'
op|'.'
name|'get'
op|'('
string|'"type"'
op|')'
op|','
string|'"802.1Qbg"'
op|')'
newline|'\n'
name|'manager_id_found'
op|'='
name|'False'
newline|'\n'
name|'type_id_found'
op|'='
name|'False'
newline|'\n'
name|'typeversion_id_found'
op|'='
name|'False'
newline|'\n'
name|'instance_id_found'
op|'='
name|'False'
newline|'\n'
name|'for'
name|'p_elem'
name|'in'
name|'vp'
op|'.'
name|'findall'
op|'('
string|'"parameters"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'wantparams'
op|'='
name|'self'
op|'.'
name|'mapping_8021qbg'
op|'['
string|"'qbg_params'"
op|']'
newline|'\n'
name|'manager_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"managerid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"typeid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'typeversion_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"typeidversion"'
op|','
name|'None'
op|')'
newline|'\n'
name|'instance_id'
op|'='
name|'p_elem'
op|'.'
name|'get'
op|'('
string|'"instanceid"'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'manager_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'manager_id'
op|','
nl|'\n'
name|'wantparams'
op|'['
string|"'managerid'"
op|']'
op|')'
newline|'\n'
name|'manager_id_found'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'type_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'type_id'
op|','
nl|'\n'
name|'wantparams'
op|'['
string|"'typeid'"
op|']'
op|')'
newline|'\n'
name|'type_id_found'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'typeversion_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'typeversion_id'
op|','
nl|'\n'
name|'wantparams'
op|'['
string|"'typeidversion'"
op|']'
op|')'
newline|'\n'
name|'typeversion_id_found'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
name|'instance_id'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_id'
op|','
nl|'\n'
name|'wantparams'
op|'['
string|"'instanceid'"
op|']'
op|')'
newline|'\n'
name|'instance_id_found'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'manager_id_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'type_id_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'typeversion_id_found'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_id_found'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

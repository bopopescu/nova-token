begin_unit
comment|'# Copyright 2013 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'stubs'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'ds_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'error_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'fake'
name|'as'
name|'vmwareapi_fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vim_util'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'vmwareapi'
name|'import'
name|'vmops'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VMwareVMOpsTestCase
name|'class'
name|'VMwareVMOpsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VMwareVMOpsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'vmwareapi_fake'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'set_stubs'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_cache_subdirectory_name'
op|'='
string|"'vmware_base'"
op|','
nl|'\n'
name|'my_ip'
op|'='
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_session'
op|'='
name|'driver'
op|'.'
name|'VMwareAPISession'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instance'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
string|"'uuid'"
op|':'
string|"'fake_uuid'"
op|'}'
newline|'\n'
nl|'\n'
name|'subnet_4'
op|'='
name|'network_model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'192.168.0.1/24'"
op|','
nl|'\n'
name|'dns'
op|'='
op|'['
name|'network_model'
op|'.'
name|'IP'
op|'('
string|"'192.168.0.1'"
op|')'
op|']'
op|','
nl|'\n'
name|'gateway'
op|'='
nl|'\n'
name|'network_model'
op|'.'
name|'IP'
op|'('
string|"'192.168.0.1'"
op|')'
op|','
nl|'\n'
name|'ips'
op|'='
op|'['
nl|'\n'
name|'network_model'
op|'.'
name|'IP'
op|'('
string|"'192.168.0.100'"
op|')'
op|']'
op|','
nl|'\n'
name|'routes'
op|'='
name|'None'
op|')'
newline|'\n'
name|'subnet_6'
op|'='
name|'network_model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'dead:beef::1/64'"
op|','
nl|'\n'
name|'dns'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway'
op|'='
nl|'\n'
name|'network_model'
op|'.'
name|'IP'
op|'('
string|"'dead:beef::1'"
op|')'
op|','
nl|'\n'
name|'ips'
op|'='
op|'['
name|'network_model'
op|'.'
name|'IP'
op|'('
nl|'\n'
string|"'dead:beef::dcad:beff:feef:0'"
op|')'
op|']'
op|','
nl|'\n'
name|'routes'
op|'='
name|'None'
op|')'
newline|'\n'
name|'network'
op|'='
name|'network_model'
op|'.'
name|'Network'
op|'('
name|'id'
op|'='
number|'0'
op|','
nl|'\n'
name|'bridge'
op|'='
string|"'fa0'"
op|','
nl|'\n'
name|'label'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'subnets'
op|'='
op|'['
name|'subnet_4'
op|','
name|'subnet_6'
op|']'
op|','
nl|'\n'
name|'vlan'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
nl|'\n'
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
name|'None'
op|','
nl|'\n'
name|'address'
op|'='
string|"'DE:AD:BE:EF:00:00'"
op|','
nl|'\n'
name|'network'
op|'='
name|'network'
op|','
nl|'\n'
name|'type'
op|'='
name|'None'
op|','
nl|'\n'
name|'devname'
op|'='
name|'None'
op|','
nl|'\n'
name|'ovs_interfaceid'
op|'='
name|'None'
op|','
nl|'\n'
name|'rxtx_cap'
op|'='
number|'3'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
name|'pure_IPv6_network'
op|'='
name|'network_model'
op|'.'
name|'Network'
op|'('
name|'id'
op|'='
number|'0'
op|','
nl|'\n'
name|'bridge'
op|'='
string|"'fa0'"
op|','
nl|'\n'
name|'label'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'subnets'
op|'='
op|'['
name|'subnet_6'
op|']'
op|','
nl|'\n'
name|'vlan'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pure_IPv6_network_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
nl|'\n'
name|'network_model'
op|'.'
name|'VIF'
op|'('
name|'id'
op|'='
name|'None'
op|','
nl|'\n'
name|'address'
op|'='
string|"'DE:AD:BE:EF:00:00'"
op|','
nl|'\n'
name|'network'
op|'='
name|'pure_IPv6_network'
op|','
nl|'\n'
name|'type'
op|'='
name|'None'
op|','
nl|'\n'
name|'devname'
op|'='
name|'None'
op|','
nl|'\n'
name|'ovs_interfaceid'
op|'='
name|'None'
op|','
nl|'\n'
name|'rxtx_cap'
op|'='
number|'3'
op|')'
nl|'\n'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_disk_format_none
dedent|''
name|'def'
name|'test_get_disk_format_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'format'
op|','
name|'is_iso'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_get_disk_format'
op|'('
op|'{'
string|"'disk_format'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'is_iso'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_disk_format_iso
dedent|''
name|'def'
name|'test_get_disk_format_iso'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'format'
op|','
name|'is_iso'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_get_disk_format'
op|'('
op|'{'
string|"'disk_format'"
op|':'
string|"'iso'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'iso'"
op|','
name|'format'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'is_iso'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_disk_format_bad
dedent|''
name|'def'
name|'test_get_disk_format_bad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDiskFormat'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_get_disk_format'
op|','
nl|'\n'
op|'{'
string|"'disk_format'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_machine_id_str
dedent|''
name|'def'
name|'test_get_machine_id_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'_get_machine_id_str'
op|'('
name|'self'
op|'.'
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
nl|'\n'
string|"'DE:AD:BE:EF:00:00;192.168.0.100;255.255.255.0;'"
nl|'\n'
string|"'192.168.0.1;192.168.0.255;192.168.0.1#'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'_get_machine_id_str'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'pure_IPv6_network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'DE:AD:BE:EF:00:00;;;;;#'"
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_nf
dedent|''
name|'def'
name|'test_use_linked_clone_override_nf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
name|'None'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'value'
op|','
string|'"No overrides present but still overridden!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_nt
dedent|''
name|'def'
name|'test_use_linked_clone_override_nt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
name|'None'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'value'
op|','
string|'"No overrides present but still overridden!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_ny
dedent|''
name|'def'
name|'test_use_linked_clone_override_ny'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
name|'None'
op|','
string|'"yes"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'value'
op|','
string|'"No overrides present but still overridden!"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_ft
dedent|''
name|'def'
name|'test_use_linked_clone_override_ft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'value'
op|','
nl|'\n'
string|'"image level metadata failed to override global"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_nt
dedent|''
name|'def'
name|'test_use_linked_clone_override_nt'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
string|'"no"'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'value'
op|','
nl|'\n'
string|'"image level metadata failed to override global"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_use_linked_clone_override_yf
dedent|''
name|'def'
name|'test_use_linked_clone_override_yf'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'.'
name|'decide_linked_clone'
op|'('
string|'"yes"'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'value'
op|','
nl|'\n'
string|'"image level metadata failed to override global"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_create_folder_mocks
dedent|''
name|'def'
name|'_setup_create_folder_mocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|')'
newline|'\n'
name|'base_name'
op|'='
string|"'folder'"
newline|'\n'
name|'ds_name'
op|'='
string|'"datastore"'
newline|'\n'
name|'ds_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ds_ref'
op|'.'
name|'value'
op|'='
number|'1'
newline|'\n'
name|'dc_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_datastore_dc_mapping'
op|'['
name|'ds_ref'
op|'.'
name|'value'
op|']'
op|'='
name|'vmops'
op|'.'
name|'DcInfo'
op|'('
nl|'\n'
name|'ref'
op|'='
name|'dc_ref'
op|','
nl|'\n'
name|'name'
op|'='
string|"'fake-name'"
op|','
nl|'\n'
name|'vmFolder'
op|'='
string|"'fake-folder'"
op|')'
newline|'\n'
name|'path'
op|'='
name|'ds_util'
op|'.'
name|'build_datastore_path'
op|'('
name|'ds_name'
op|','
name|'base_name'
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'return'
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'ops'
op|','
name|'path'
op|','
name|'dc_ref'
newline|'\n'
nl|'\n'
DECL|member|test_create_folder_if_missing
dedent|''
name|'def'
name|'test_create_folder_if_missing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'ops'
op|','
name|'path'
op|','
name|'dc'
op|'='
name|'self'
op|'.'
name|'_setup_create_folder_mocks'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
string|"'folder'"
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'.'
name|'assert_called_with'
op|'('
name|'ops'
op|'.'
name|'_session'
op|','
name|'path'
op|','
name|'dc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_folder_if_missing_exception
dedent|''
name|'def'
name|'test_create_folder_if_missing_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ds_name'
op|','
name|'ds_ref'
op|','
name|'ops'
op|','
name|'path'
op|','
name|'dc'
op|'='
name|'self'
op|'.'
name|'_setup_create_folder_mocks'
op|'('
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'.'
name|'side_effect'
op|'='
name|'error_util'
op|'.'
name|'FileAlreadyExistsException'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'('
name|'ds_name'
op|','
name|'ds_ref'
op|','
string|"'folder'"
op|')'
newline|'\n'
name|'ds_util'
op|'.'
name|'mkdir'
op|'.'
name|'assert_called_with'
op|'('
name|'ops'
op|'.'
name|'_session'
op|','
name|'path'
op|','
name|'dc'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ds_util'
op|','
string|"'file_exists'"
op|','
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|test_check_if_folder_file_exists_with_existing
name|'def'
name|'test_check_if_folder_file_exists_with_existing'
op|'('
name|'self'
op|','
nl|'\n'
name|'mock_exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_ds_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_check_if_folder_file_exists'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock_ds_ref'
op|','
string|'"datastore"'
op|','
nl|'\n'
string|'"folder"'
op|','
string|'"some_file"'
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'datastore'"
op|','
nl|'\n'
name|'mock_ds_ref'
op|','
nl|'\n'
string|"'vmware_base'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'ds_util'
op|','
string|"'file_exists'"
op|','
name|'return_value'
op|'='
name|'False'
op|')'
newline|'\n'
DECL|member|test_check_if_folder_file_exists_no_existing
name|'def'
name|'test_check_if_folder_file_exists_no_existing'
op|'('
name|'self'
op|','
name|'mock_exists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'mock_ds_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_check_if_folder_file_exists'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock_ds_ref'
op|','
string|'"datastore"'
op|','
nl|'\n'
string|'"folder"'
op|','
string|'"some_file"'
op|')'
newline|'\n'
name|'ops'
op|'.'
name|'_create_folder_if_missing'
op|'.'
name|'assert_called_once_with'
op|'('
string|"'datastore'"
op|','
nl|'\n'
name|'mock_ds_ref'
op|','
nl|'\n'
string|"'vmware_base'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_valid_vms_from_retrieve_result
dedent|''
name|'def'
name|'test_get_valid_vms_from_retrieve_result'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_objects'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'FakeRetrieveResult'
op|'('
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
op|')'
newline|'\n'
name|'vms'
op|'='
name|'ops'
op|'.'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'fake_objects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'vms'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_valid_vms_from_retrieve_result_with_invalid
dedent|''
name|'def'
name|'test_get_valid_vms_from_retrieve_result_with_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVMOps'
op|'('
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|','
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
op|')'
newline|'\n'
name|'fake_objects'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'FakeRetrieveResult'
op|'('
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
op|')'
newline|'\n'
name|'invalid_vm1'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
newline|'\n'
name|'invalid_vm1'
op|'.'
name|'set'
op|'('
string|"'runtime.connectionState'"
op|','
string|"'orphaned'"
op|')'
newline|'\n'
name|'invalid_vm2'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'VirtualMachine'
op|'('
op|')'
newline|'\n'
name|'invalid_vm2'
op|'.'
name|'set'
op|'('
string|"'runtime.connectionState'"
op|','
string|"'inaccessible'"
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'invalid_vm1'
op|')'
newline|'\n'
name|'fake_objects'
op|'.'
name|'add_object'
op|'('
name|'invalid_vm2'
op|')'
newline|'\n'
name|'vms'
op|'='
name|'ops'
op|'.'
name|'_get_valid_vms_from_retrieve_result'
op|'('
name|'fake_objects'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'vms'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_vm_snapshot
dedent|''
name|'def'
name|'test_delete_vm_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_call_method
indent|'        '
name|'def'
name|'fake_call_method'
op|'('
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'RemoveSnapshot_Task'"
op|','
name|'method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"fake_vm_snapshot"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'removeChildren'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'consolidate'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
string|"'fake_remove_snapshot_task'"
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'_wait_for_task'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'_call_method'"
op|','
name|'fake_call_method'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'_wait_for_task'
op|','
name|'_call_method'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_delete_vm_snapshot'
op|'('
name|'self'
op|'.'
name|'_instance'
op|','
nl|'\n'
string|'"fake_vm_ref"'
op|','
string|'"fake_vm_snapshot"'
op|')'
newline|'\n'
name|'_wait_for_task'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'fake_remove_snapshot_task'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_vm_snapshot
dedent|''
dedent|''
name|'def'
name|'test_create_vm_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'method_list'
op|'='
op|'['
string|"'CreateSnapshot_Task'"
op|','
string|"'get_dynamic_property'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_call_method
name|'def'
name|'fake_call_method'
op|'('
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected_method'
op|'='
name|'method_list'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_method'
op|','
name|'method'
op|')'
newline|'\n'
name|'if'
op|'('
name|'expected_method'
op|'=='
string|"'CreateSnapshot_Task'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'args'
op|'['
number|'0'
op|']'
op|','
string|'"fake_vm_ref"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'memory'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'kwargs'
op|'['
string|"'quiesce'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'return'
string|"'fake_snapshot_task'"
newline|'\n'
dedent|''
name|'elif'
op|'('
name|'expected_method'
op|'=='
string|"'get_dynamic_property'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'task_info'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'task_info'
op|'.'
name|'result'
op|'='
string|'"fake_snapshot_ref"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'fake_snapshot_task'"
op|','
string|"'Task'"
op|','
string|"'info'"
op|')'
op|','
name|'args'
op|')'
newline|'\n'
name|'return'
name|'task_info'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'_wait_for_task'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'_call_method'"
op|','
name|'fake_call_method'
op|')'
nl|'\n'
op|')'
name|'as'
op|'('
name|'_wait_for_task'
op|','
name|'_call_method'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'snap'
op|'='
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_create_vm_snapshot'
op|'('
name|'self'
op|'.'
name|'_instance'
op|','
nl|'\n'
string|'"fake_vm_ref"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"fake_snapshot_ref"'
op|','
name|'snap'
op|')'
newline|'\n'
name|'_wait_for_task'
op|'.'
name|'assert_has_calls'
op|'('
op|'['
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
string|"'fake_snapshot_task'"
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_instance_progress
dedent|''
dedent|''
name|'def'
name|'test_update_instance_progress'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'('
name|'context'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
op|','
nl|'\n'
name|'uuid'
op|'='
string|"'fake-uuid'"
op|')'
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'instance'
op|','
string|"'save'"
op|')'
name|'as'
name|'mock_save'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_vmops'
op|'.'
name|'_update_instance_progress'
op|'('
name|'instance'
op|'.'
name|'_context'
op|','
nl|'\n'
name|'instance'
op|','
number|'5'
op|','
number|'10'
op|')'
newline|'\n'
name|'mock_save'
op|'.'
name|'assert_called_once_with'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'50'
op|','
name|'instance'
op|'.'
name|'progress'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_get_datacenter_ref_and_name
dedent|''
name|'def'
name|'_test_get_datacenter_ref_and_name'
op|'('
name|'self'
op|','
name|'ds_ref_exists'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ds_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'instance_ds_ref'
op|'.'
name|'value'
op|'='
string|'"ds-1"'
newline|'\n'
name|'_vcvmops'
op|'='
name|'vmops'
op|'.'
name|'VMwareVCVMOps'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'ds_ref_exists'
op|':'
newline|'\n'
indent|'            '
name|'ds_ref'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
op|')'
newline|'\n'
name|'ds_ref'
op|'.'
name|'value'
op|'='
string|'"ds-1"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'ds_ref'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_call_method
dedent|''
name|'def'
name|'fake_call_method'
op|'('
name|'module'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_object1'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'FakeRetrieveResult'
op|'('
op|')'
newline|'\n'
name|'fake_object1'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'Datacenter'
op|'('
nl|'\n'
name|'ds_ref'
op|'='
name|'ds_ref'
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'ds_ref'
op|':'
newline|'\n'
comment|'# Token is set for the fake_object1, so it will continue to'
nl|'\n'
comment|'# fetch the next object.'
nl|'\n'
indent|'                '
name|'setattr'
op|'('
name|'fake_object1'
op|','
string|"'token'"
op|','
string|"'token-0'"
op|')'
newline|'\n'
name|'if'
name|'method'
op|'=='
string|'"continue_to_get_objects"'
op|':'
newline|'\n'
indent|'                    '
name|'fake_object2'
op|'='
name|'vmwareapi_fake'
op|'.'
name|'FakeRetrieveResult'
op|'('
op|')'
newline|'\n'
name|'fake_object2'
op|'.'
name|'add_object'
op|'('
name|'vmwareapi_fake'
op|'.'
name|'Datacenter'
op|'('
op|')'
op|')'
newline|'\n'
name|'return'
name|'fake_object2'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'fake_object1'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'self'
op|'.'
name|'_session'
op|','
string|"'_call_method'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'fake_call_method'
op|')'
name|'as'
name|'fake_call'
op|':'
newline|'\n'
indent|'            '
name|'dc_info'
op|'='
name|'_vcvmops'
op|'.'
name|'get_datacenter_ref_and_name'
op|'('
name|'instance_ds_ref'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'ds_ref'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'_vcvmops'
op|'.'
name|'_datastore_dc_mapping'
op|')'
op|')'
newline|'\n'
name|'fake_call'
op|'.'
name|'assert_called_once_with'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
nl|'\n'
string|'"Datacenter"'
op|','
op|'['
string|'"name"'
op|','
string|'"datastore"'
op|','
string|'"vmFolder"'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"ha-datacenter"'
op|','
name|'dc_info'
op|'.'
name|'name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'calls'
op|'='
op|'['
name|'mock'
op|'.'
name|'call'
op|'('
name|'vim_util'
op|','
string|'"get_objects"'
op|','
string|'"Datacenter"'
op|','
nl|'\n'
op|'['
string|'"name"'
op|','
string|'"datastore"'
op|','
string|'"vmFolder"'
op|']'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'call'
op|'('
name|'vim_util'
op|','
string|'"continue_to_get_objects"'
op|','
nl|'\n'
string|'"token-0"'
op|')'
op|']'
newline|'\n'
name|'fake_call'
op|'.'
name|'assert_has_calls'
op|'('
name|'calls'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'dc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_datacenter_ref_and_name
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_get_datacenter_ref_and_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_datacenter_ref_and_name'
op|'('
name|'ds_ref_exists'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_datacenter_ref_and_name_with_no_datastore
dedent|''
name|'def'
name|'test_get_datacenter_ref_and_name_with_no_datastore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_datacenter_ref_and_name'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2013 Boris Pavlovic (boris@pavlovic.me).'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'changeset'
name|'import'
name|'UniqueConstraint'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'MetaData'
op|','
name|'Table'
op|','
name|'Column'
op|','
name|'Integer'
op|','
name|'BigInteger'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'test_migrations'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestMigrationUtils
name|'class'
name|'TestMigrationUtils'
op|'('
name|'test_migrations'
op|'.'
name|'BaseMigrationTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Class for testing utils that are used in db migrations."""'
newline|'\n'
nl|'\n'
DECL|member|test_utils_drop_unique_constraint
name|'def'
name|'test_utils_drop_unique_constraint'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table_name'
op|'='
string|'"__test_tmp_table__"'
newline|'\n'
name|'uc_name'
op|'='
string|"'uniq_foo'"
newline|'\n'
name|'values'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'a'"
op|':'
number|'3'
op|','
string|"'foo'"
op|':'
number|'10'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'a'"
op|':'
number|'2'
op|','
string|"'foo'"
op|':'
number|'20'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'a'"
op|':'
number|'1'
op|','
string|"'foo'"
op|':'
number|'30'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'test_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'id'"
op|','
name|'Integer'
op|','
name|'primary_key'
op|'='
name|'True'
op|','
nl|'\n'
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'a'"
op|','
name|'Integer'
op|')'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'foo'"
op|','
name|'Integer'
op|')'
op|','
nl|'\n'
name|'UniqueConstraint'
op|'('
string|"'a'"
op|','
name|'name'
op|'='
string|"'uniq_a'"
op|')'
op|','
nl|'\n'
name|'UniqueConstraint'
op|'('
string|"'foo'"
op|','
name|'name'
op|'='
name|'uc_name'
op|')'
op|')'
newline|'\n'
name|'test_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'test_table'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'values'
op|')'
newline|'\n'
comment|'# NOTE(boris-42): This method is generic UC dropper.'
nl|'\n'
name|'utils'
op|'.'
name|'drop_unique_constraint'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'test_table'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'order_by'
op|'('
name|'test_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'rows'
op|'='
name|'engine'
op|'.'
name|'execute'
op|'('
name|'s'
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'values'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
name|'values'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'v'
op|'['
string|"'id'"
op|']'
op|','
name|'v'
op|'['
string|"'a'"
op|']'
op|','
name|'v'
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'rows'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Update data about Table from DB.'
nl|'\n'
dedent|''
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'test_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'constraints'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'c'
op|':'
name|'c'
op|'.'
name|'name'
op|'=='
name|'uc_name'
op|','
nl|'\n'
name|'test_table'
op|'.'
name|'constraints'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'constraints'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'test_table'
op|'.'
name|'constraints'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'test_table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_util_drop_unique_constraint_with_not_supported_sqlite_type
dedent|''
dedent|''
name|'def'
name|'test_util_drop_unique_constraint_with_not_supported_sqlite_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table_name'
op|'='
string|'"__test_tmp_table__"'
newline|'\n'
name|'uc_name'
op|'='
string|"'uniq_foo'"
newline|'\n'
name|'values'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'a'"
op|':'
number|'3'
op|','
string|"'foo'"
op|':'
number|'10'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'a'"
op|':'
number|'2'
op|','
string|"'foo'"
op|':'
number|'20'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'a'"
op|':'
number|'1'
op|','
string|"'foo'"
op|':'
number|'30'
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'test_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'id'"
op|','
name|'Integer'
op|','
name|'primary_key'
op|'='
name|'True'
op|','
nl|'\n'
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'a'"
op|','
name|'Integer'
op|')'
op|','
nl|'\n'
name|'Column'
op|'('
string|"'foo'"
op|','
name|'BigInteger'
op|','
name|'default'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'UniqueConstraint'
op|'('
string|"'a'"
op|','
name|'name'
op|'='
string|"'uniq_a'"
op|')'
op|','
nl|'\n'
name|'UniqueConstraint'
op|'('
string|"'foo'"
op|','
name|'name'
op|'='
name|'uc_name'
op|')'
op|')'
newline|'\n'
name|'test_table'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'test_table'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'values'
op|')'
newline|'\n'
name|'if'
name|'key'
op|'=='
string|'"sqlite"'
op|':'
newline|'\n'
comment|'# NOTE(boris-42): Missing info about column `foo` that has'
nl|'\n'
comment|'#                 unsupported type BigInteger.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'drop_unique_constraint'
op|','
nl|'\n'
name|'engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Wrong type of foo instance. it should be'
nl|'\n'
comment|'#                 instance of sqlalchemy.Column.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'drop_unique_constraint'
op|','
nl|'\n'
name|'engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
string|"'foo'"
op|','
nl|'\n'
name|'foo'
op|'='
name|'Integer'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'foo'
op|'='
name|'Column'
op|'('
string|"'foo'"
op|','
name|'BigInteger'
op|','
name|'default'
op|'='
number|'0'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'drop_unique_constraint'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
name|'uc_name'
op|','
string|"'foo'"
op|','
nl|'\n'
name|'foo'
op|'='
name|'foo'
op|')'
newline|'\n'
nl|'\n'
name|'s'
op|'='
name|'test_table'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'order_by'
op|'('
name|'test_table'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'rows'
op|'='
name|'engine'
op|'.'
name|'execute'
op|'('
name|'s'
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'values'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'v'
op|'='
name|'values'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
name|'v'
op|'['
string|"'id'"
op|']'
op|','
name|'v'
op|'['
string|"'a'"
op|']'
op|','
name|'v'
op|'['
string|"'foo'"
op|']'
op|')'
op|','
name|'rows'
op|'['
name|'i'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(boris-42): Update data about Table from DB.'
nl|'\n'
dedent|''
name|'meta'
op|'='
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'test_table'
op|'='
name|'Table'
op|'('
name|'table_name'
op|','
name|'meta'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
name|'constraints'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'c'
op|':'
name|'c'
op|'.'
name|'name'
op|'=='
name|'uc_name'
op|','
nl|'\n'
name|'test_table'
op|'.'
name|'constraints'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'constraints'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'test_table'
op|'.'
name|'constraints'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'test_table'
op|'.'
name|'drop'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

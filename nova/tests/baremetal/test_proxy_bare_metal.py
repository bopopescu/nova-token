begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 University of Southern California'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'__builtin__'
newline|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_utils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
name|'import'
name|'dom'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
name|'import'
name|'proxy'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Same fake_domains is used by different classes,'
nl|'\n'
comment|'# but different fake_file is used by different classes for unit test.'
nl|'\n'
DECL|variable|fake_domains
name|'fake_domains'
op|'='
op|'['
op|'{'
string|"'status'"
op|':'
number|'1'
op|','
string|"'name'"
op|':'
string|"'instance-00000001'"
op|','
nl|'\n'
string|"'memory_kb'"
op|':'
number|'16777216'
op|','
string|"'kernel_id'"
op|':'
string|"'1896115634'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"''"
op|','
string|"'image_id'"
op|':'
string|"'1552326678'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'node_id'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'02:16:3e:01:4e:c9'"
op|','
nl|'\n'
string|"'ip_address'"
op|':'
string|"'10.5.1.2'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DomainReadWriteTestCase
name|'class'
name|'DomainReadWriteTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DomainReadWriteTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'baremetal_driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_domain_with_empty_list
dedent|''
name|'def'
name|'test_read_domain_with_empty_list'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read a file that contains no domains"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'__builtin__'
op|','
string|"'open'"
op|')'
newline|'\n'
name|'fake_file'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|"'[]'"
op|')'
newline|'\n'
name|'open'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
string|"'r'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_file'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'domains'
op|'='
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_domain
dedent|''
name|'def'
name|'test_read_domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Read a file that contains at least one domain"""'
newline|'\n'
name|'fake_file'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
string|'\'\'\'[{"status": 1,\n         "image_id": "1552326678", "vcpus": 1, "node_id": 6,\n         "name": "instance-00000001", "memory_kb": 16777216,\n         "mac_address": "02:16:3e:01:4e:c9", "kernel_id": "1896115634",\n         "ramdisk_id": "", "ip_address": "10.5.1.2"}]\'\'\''
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'__builtin__'
op|','
string|"'open'"
op|')'
newline|'\n'
name|'open'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
string|"'r'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_file'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'domains'
op|'='
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|','
name|'fake_domains'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_no_file
dedent|''
name|'def'
name|'test_read_no_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Try to read when the file does not exist\n\n        This should through and IO exception"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'__builtin__'
op|','
string|"'open'"
op|')'
newline|'\n'
name|'open'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
nl|'\n'
string|"'r'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'IOError'
op|'('
number|'2'
op|','
string|"'No such file or directory'"
op|','
nl|'\n'
string|"'/tftpboot/test_fake_dom_file'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'dom'
op|'.'
name|'read_domains'
op|','
nl|'\n'
string|"'/tftpboot/test_fake_dom_file'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertJSONEquals
dedent|''
name|'def'
name|'assertJSONEquals'
op|'('
name|'self'
op|','
name|'x'
op|','
name|'y'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if two json strings represent the equivalent Python object"""'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'x'
op|')'
op|','
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'y'
op|')'
op|')'
newline|'\n'
name|'return'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'x'
op|')'
op|'=='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'y'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_write_domain
dedent|''
name|'def'
name|'test_write_domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Write the domain to file"""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'__builtin__'
op|','
string|"'open'"
op|')'
newline|'\n'
name|'mock_file'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'file'
op|')'
newline|'\n'
name|'expected_json'
op|'='
string|'\'\'\'[{"status": 1,\n               "image_id": "1552326678", "vcpus": 1, "node_id": 6,\n               "name": "instance-00000001", "memory_kb": 16777216,\n               "mac_address": "02:16:3e:01:4e:c9", "kernel_id": "1896115634",\n               "ramdisk_id": "", "ip_address": "10.5.1.2"}]\'\'\''
newline|'\n'
name|'open'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
string|"'w'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'mock_file'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check if the argument to file.write() represents the same'
nl|'\n'
comment|'# Python object as expected_json'
nl|'\n'
comment|"# We can't do an exact string comparison"
nl|'\n'
comment|'# because of ordering and whitespace'
nl|'\n'
name|'mock_file'
op|'.'
name|'write'
op|'('
name|'mox'
op|'.'
name|'Func'
op|'('
name|'functools'
op|'.'
name|'partial'
op|'('
name|'self'
op|'.'
name|'assertJSONEquals'
op|','
nl|'\n'
name|'expected_json'
op|')'
op|')'
op|')'
newline|'\n'
name|'mock_file'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
name|'fake_domains'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BareMetalDomTestCase
dedent|''
dedent|''
name|'class'
name|'BareMetalDomTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BareMetalDomTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'baremetal_driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
comment|'# Stub out utils.execute'
nl|'\n'
name|'fake_utils'
op|'.'
name|'stub_out_utils_execute'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BareMetalDomTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset the singleton state'
nl|'\n'
name|'dom'
op|'.'
name|'BareMetalDom'
op|'.'
name|'_instance'
op|'='
name|'None'
newline|'\n'
name|'dom'
op|'.'
name|'BareMetalDom'
op|'.'
name|'_is_init'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test_read_domain_only_once
dedent|''
name|'def'
name|'test_read_domain_only_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm that the domain is read from a file only once,\n        even if the object is instantiated multiple times"""'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'read_domains'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'write_domains'"
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Instantiate multiple instances'
nl|'\n'
name|'x'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
name|'x'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
name|'x'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_init_no_domains
dedent|''
name|'def'
name|'test_init_no_domains'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
comment|'# Create the mock objects'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'read_domains'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'write_domains'"
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Code under test'
nl|'\n'
name|'bmdom'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Expectd values'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bmdom'
op|'.'
name|'fake_dom_nums'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_init_remove_non_running_domain
dedent|''
name|'def'
name|'test_init_remove_non_running_domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check to see that all entries in the domain list are removed\n        except for the one that is in the running state"""'
newline|'\n'
nl|'\n'
name|'domains'
op|'='
op|'['
name|'dict'
op|'('
name|'node_id'
op|'='
number|'1'
op|','
name|'name'
op|'='
string|"'i-00000001'"
op|','
nl|'\n'
name|'status'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'2'
op|','
name|'name'
op|'='
string|"'i-00000002'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'3'
op|','
name|'name'
op|'='
string|"'i-00000003'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'PAUSED'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'5'
op|','
name|'name'
op|'='
string|"'i-00000004'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'7'
op|','
name|'name'
op|'='
string|"'i-00000005'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'CRASHED'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'8'
op|','
name|'name'
op|'='
string|"'i-00000006'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'SUSPENDED'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'node_id'
op|'='
number|'9'
op|','
name|'name'
op|'='
string|"'i-00000007'"
op|','
name|'status'
op|'='
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Create the mock objects'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'read_domains'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'write_domains'"
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'domains'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
name|'domains'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Code under test'
nl|'\n'
name|'bmdom'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bmdom'
op|'.'
name|'domains'
op|','
op|'['
op|'{'
string|"'node_id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'i-00000002'"
op|','
nl|'\n'
string|"'status'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bmdom'
op|'.'
name|'fake_dom_nums'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_find_domain
dedent|''
name|'def'
name|'test_find_domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domain'
op|'='
op|'{'
string|"'status'"
op|':'
number|'1'
op|','
string|"'name'"
op|':'
string|"'instance-00000001'"
op|','
nl|'\n'
string|"'memory_kb'"
op|':'
number|'16777216'
op|','
string|"'kernel_id'"
op|':'
string|"'1896115634'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"''"
op|','
string|"'image_id'"
op|':'
string|"'1552326678'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'node_id'"
op|':'
number|'6'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'02:16:3e:01:4e:c9'"
op|','
nl|'\n'
string|"'ip_address'"
op|':'
string|"'10.5.1.2'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# Create the mock objects'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'read_domains'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'write_domains'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Expected calls'
nl|'\n'
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/'"
nl|'\n'
string|"'test_fake_dom_file'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_domains'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
name|'fake_domains'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Code under test'
nl|'\n'
name|'bmdom'
op|'='
name|'dom'
op|'.'
name|'BareMetalDom'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Expected values'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'bmdom'
op|'.'
name|'find_domain'
op|'('
string|"'instance-00000001'"
op|')'
op|','
name|'domain'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProxyBareMetalTestCase
dedent|''
dedent|''
name|'class'
name|'ProxyBareMetalTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|test_ip
indent|'    '
name|'test_ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
DECL|variable|test_instance
name|'test_instance'
op|'='
op|'{'
string|"'memory_kb'"
op|':'
string|"'1024000'"
op|','
nl|'\n'
string|"'basepath'"
op|':'
string|"'/some/path'"
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
string|"'br100'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'02:12:34:46:56:67'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'br101'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"'123456'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
string|"'5'"
op|'}'
comment|'# m1.small'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ProxyBareMetalTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'baremetal_driver'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'fake_utils'
op|'.'
name|'stub_out_utils_execute'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_info
dedent|''
name|'def'
name|'test_get_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create the mock objects'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'read_domains'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'dom'
op|','
string|"'write_domains'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Expected calls'
nl|'\n'
name|'dom'
op|'.'
name|'read_domains'
op|'('
string|"'/tftpboot/'"
nl|'\n'
string|"'test_fake_dom_file'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_domains'
op|')'
newline|'\n'
name|'dom'
op|'.'
name|'write_domains'
op|'('
string|"'/tftpboot/test_fake_dom_file'"
op|','
name|'fake_domains'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Code under test'
nl|'\n'
name|'conn'
op|'='
name|'proxy'
op|'.'
name|'get_connection'
op|'('
name|'True'
op|')'
newline|'\n'
comment|'# TODO(mikalstill): this is not a very good fake instance'
nl|'\n'
name|'info'
op|'='
name|'conn'
op|'.'
name|'get_info'
op|'('
op|'{'
string|"'name'"
op|':'
string|"'instance-00000001'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Expected values'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'mem'"
op|']'
op|','
number|'16777216'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'state'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'num_cpu'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'cpu_time'"
op|']'
op|','
number|'100'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
string|"'max_mem'"
op|']'
op|','
number|'16777216'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

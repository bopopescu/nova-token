begin_unit
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'rpc'
name|'import'
name|'amqp'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.tests.rpc'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RpcAMQPTestCase
name|'class'
name|'RpcAMQPTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RpcAMQPTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'rpc'
op|'.'
name|'create_connection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'receiver'
op|'='
name|'TestReceiver'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'='
name|'rpc'
op|'.'
name|'create_consumer'
op|'('
name|'self'
op|'.'
name|'conn'
op|','
nl|'\n'
string|"'test'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'receiver'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consumer'
op|'.'
name|'attach_to_eventlet'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_connectionpool_single
dedent|''
name|'def'
name|'test_connectionpool_single'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that ConnectionPool recycles a single connection."""'
newline|'\n'
name|'conn1'
op|'='
name|'amqp'
op|'.'
name|'ConnectionPool'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'amqp'
op|'.'
name|'ConnectionPool'
op|'.'
name|'put'
op|'('
name|'conn1'
op|')'
newline|'\n'
name|'conn2'
op|'='
name|'amqp'
op|'.'
name|'ConnectionPool'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'amqp'
op|'.'
name|'ConnectionPool'
op|'.'
name|'put'
op|'('
name|'conn2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conn1'
op|','
name|'conn2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestReceiver
dedent|''
dedent|''
name|'class'
name|'TestReceiver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Simple Proxy class so the consumer has methods to call.\n\n    Uses static methods because we aren\'t actually storing any state.\n\n    """'
newline|'\n'
nl|'\n'
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|echo
name|'def'
name|'echo'
op|'('
name|'context'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Simply returns whatever value is sent in."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Received %s"'
op|')'
op|','
name|'value'
op|')'
newline|'\n'
name|'return'
name|'value'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|context
name|'def'
name|'context'
op|'('
name|'context'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns dictionary version of context."""'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'_'
op|'('
string|'"Received %s"'
op|')'
op|','
name|'context'
op|')'
newline|'\n'
name|'return'
name|'context'
op|'.'
name|'to_dict'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|echo_three_times
name|'def'
name|'echo_three_times'
op|'('
name|'context'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'.'
name|'reply'
op|'('
name|'value'
op|')'
newline|'\n'
name|'context'
op|'.'
name|'reply'
op|'('
name|'value'
op|'+'
number|'1'
op|')'
newline|'\n'
name|'context'
op|'.'
name|'reply'
op|'('
name|'value'
op|'+'
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|echo_three_times_yield
name|'def'
name|'echo_three_times_yield'
op|'('
name|'context'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'yield'
name|'value'
newline|'\n'
name|'yield'
name|'value'
op|'+'
number|'1'
newline|'\n'
name|'yield'
name|'value'
op|'+'
number|'2'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|fail
name|'def'
name|'fail'
op|'('
name|'context'
op|','
name|'value'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raises an exception with the value sent in."""'
newline|'\n'
name|'raise'
name|'Exception'
op|'('
name|'value'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

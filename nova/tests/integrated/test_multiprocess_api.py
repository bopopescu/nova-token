begin_unit
comment|'# Copyright (c) 2012 Intel, LLC'
nl|'\n'
comment|'# Copyright (c) 2012 OpenStack Foundation'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTest multiprocess enabled API service.\n"""'
newline|'\n'
name|'import'
name|'errno'
newline|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'signal'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'integrated'
op|'.'
name|'api'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'integrated'
name|'import'
name|'integrated_helpers'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MultiprocessWSGITest
name|'class'
name|'MultiprocessWSGITest'
op|'('
name|'integrated_helpers'
op|'.'
name|'_IntegratedTestBase'
op|')'
op|':'
newline|'\n'
DECL|variable|_api_version
indent|'    '
name|'_api_version'
op|'='
string|"'v2'"
newline|'\n'
nl|'\n'
DECL|member|_start_api_service
name|'def'
name|'_start_api_service'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Process will be started in _spawn()'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'osapi'
op|'='
name|'service'
op|'.'
name|'WSGIService'
op|'('
string|'"osapi_compute"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_url'
op|'='
string|"'http://%(host)s:%(port)s/%(api_version)s'"
op|'%'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'host'
op|','
string|"'port'"
op|':'
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'port'
op|','
nl|'\n'
string|"'api_version'"
op|':'
name|'self'
op|'.'
name|'_api_version'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'auth_url = %s'"
op|'%'
name|'self'
op|'.'
name|'auth_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_flags
dedent|''
name|'def'
name|'_get_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'workers'
op|'='
number|'2'
newline|'\n'
name|'f'
op|'='
name|'super'
op|'('
name|'MultiprocessWSGITest'
op|','
name|'self'
op|')'
op|'.'
name|'_get_flags'
op|'('
op|')'
newline|'\n'
name|'f'
op|'['
string|"'osapi_compute_workers'"
op|']'
op|'='
name|'self'
op|'.'
name|'workers'
newline|'\n'
name|'return'
name|'f'
newline|'\n'
nl|'\n'
DECL|member|_spawn
dedent|''
name|'def'
name|'_spawn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pid'
op|'='
name|'os'
op|'.'
name|'fork'
op|'('
op|')'
newline|'\n'
name|'if'
name|'pid'
op|'=='
number|'0'
op|':'
newline|'\n'
comment|"# NOTE(johannes): We can't let the child processes exit back"
nl|'\n'
comment|"# into the unit test framework since then we'll have multiple"
nl|'\n'
comment|'# processes running the same tests (and possibly forking more'
nl|'\n'
comment|'# processes that end up in the same situation). So we need'
nl|'\n'
comment|'# to catch all exceptions and make sure nothing leaks out, in'
nl|'\n'
comment|'# particular SystemExit, which is raised by sys.exit(). We use'
nl|'\n'
comment|"# os._exit() which doesn't have this problem."
nl|'\n'
indent|'            '
name|'status'
op|'='
number|'0'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'launcher'
op|'='
name|'service'
op|'.'
name|'process_launcher'
op|'('
op|')'
newline|'\n'
name|'launcher'
op|'.'
name|'launch_service'
op|'('
name|'self'
op|'.'
name|'osapi'
op|','
name|'workers'
op|'='
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'workers'
op|')'
newline|'\n'
name|'launcher'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'SystemExit'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'                '
name|'status'
op|'='
name|'exc'
op|'.'
name|'code'
newline|'\n'
dedent|''
name|'except'
name|'BaseException'
op|':'
newline|'\n'
comment|'# We need to be defensive here too'
nl|'\n'
indent|'                '
name|'try'
op|':'
newline|'\n'
indent|'                    '
name|'traceback'
op|'.'
name|'print_exc'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'BaseException'
op|':'
newline|'\n'
indent|'                    '
name|'LOG'
op|'.'
name|'error'
op|'('
string|'"Couldn\'t print traceback"'
op|')'
newline|'\n'
dedent|''
name|'status'
op|'='
number|'2'
newline|'\n'
nl|'\n'
comment|'# Really exit'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'_exit'
op|'('
name|'status'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'pid'
op|'='
name|'pid'
newline|'\n'
nl|'\n'
comment|'# Wait at most 10 seconds to spawn workers'
nl|'\n'
name|'cond'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'workers'
op|'=='
name|'len'
op|'('
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
op|')'
newline|'\n'
name|'timeout'
op|'='
number|'10'
newline|'\n'
name|'self'
op|'.'
name|'_wait'
op|'('
name|'cond'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
name|'workers'
op|'='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'workers'
op|')'
op|','
name|'self'
op|'.'
name|'workers'
op|')'
newline|'\n'
name|'return'
name|'workers'
newline|'\n'
nl|'\n'
DECL|member|_wait
dedent|''
name|'def'
name|'_wait'
op|'('
name|'self'
op|','
name|'cond'
op|','
name|'timeout'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start'
op|'='
name|'time'
op|'.'
name|'time'
op|'('
op|')'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'cond'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'if'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'-'
name|'start'
op|'>'
name|'timeout'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'.1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'pid'
op|':'
newline|'\n'
comment|'# Make sure all processes are stopped'
nl|'\n'
indent|'            '
name|'os'
op|'.'
name|'kill'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
comment|'# Make sure we reap our test process'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'_reap_test'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'fixtures'
op|'.'
name|'TimeoutException'
op|':'
newline|'\n'
comment|'# If the child gets stuck or is too slow in existing'
nl|'\n'
comment|'# after receiving the SIGTERM, gracefully handle the'
nl|'\n'
comment|'# timeout exception and try harder to kill it. We need'
nl|'\n'
comment|'# to do this otherwise the child process can hold up'
nl|'\n'
comment|'# the test run'
nl|'\n'
indent|'                '
name|'os'
op|'.'
name|'kill'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGKILL'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'super'
op|'('
name|'MultiprocessWSGITest'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reap_test
dedent|''
name|'def'
name|'_reap_test'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pid'
op|','
name|'status'
op|'='
name|'os'
op|'.'
name|'waitpid'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'pid'
op|'='
name|'None'
newline|'\n'
name|'return'
name|'status'
newline|'\n'
nl|'\n'
DECL|member|_get_workers
dedent|''
name|'def'
name|'_get_workers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(hartsocks): use of ps checks the process table for child pid'
nl|'\n'
comment|'# entries these processes may be ended but not reaped so ps may'
nl|'\n'
comment|'# show processes that are still being cleaned out of the table.'
nl|'\n'
indent|'        '
name|'f'
op|'='
name|'os'
op|'.'
name|'popen'
op|'('
string|"'ps ax -o pid,ppid,command'"
op|')'
newline|'\n'
comment|'# Skip ps header'
nl|'\n'
name|'f'
op|'.'
name|'readline'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'processes'
op|'='
op|'['
name|'tuple'
op|'('
name|'int'
op|'('
name|'p'
op|')'
name|'for'
name|'p'
name|'in'
name|'l'
op|'.'
name|'strip'
op|'('
op|')'
op|'.'
name|'split'
op|'('
op|')'
op|'['
op|':'
number|'2'
op|']'
op|')'
nl|'\n'
name|'for'
name|'l'
name|'in'
name|'f'
op|'.'
name|'readlines'
op|'('
op|')'
op|']'
newline|'\n'
name|'return'
op|'['
name|'p'
name|'for'
name|'p'
op|','
name|'pp'
name|'in'
name|'processes'
name|'if'
name|'pp'
op|'=='
name|'self'
op|'.'
name|'pid'
op|']'
newline|'\n'
nl|'\n'
DECL|member|wait_on_process_until_end
dedent|''
name|'def'
name|'wait_on_process_until_end'
op|'('
name|'self'
op|','
name|'worker_pid'
op|')'
op|':'
newline|'\n'
comment|'# NOTE: the testing framework itself has a'
nl|'\n'
comment|'# built in test timeout function so a test'
nl|'\n'
comment|'# stuck in an infinite loop will eventually'
nl|'\n'
comment|'# be killed by the test framework.'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'waiting on process %r to exit'"
op|'%'
name|'worker_pid'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
comment|"# poll the process until it isn't there to poll"
nl|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'kill'
op|'('
name|'worker_pid'
op|','
number|'0'
op|')'
newline|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'0.1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
name|'err'
op|':'
newline|'\n'
comment|'# by watching specifically for errno.ESRCH'
nl|'\n'
comment|'# we guarantee this loop continues until'
nl|'\n'
comment|'# the process table has cleared the pid.'
nl|'\n'
comment|'# Child process table entries hang around'
nl|'\n'
comment|'# for several cycles in case a parent process'
nl|'\n'
comment|'# needs to check their exit state.'
nl|'\n'
indent|'                '
name|'if'
name|'err'
op|'.'
name|'errno'
op|'=='
name|'errno'
op|'.'
name|'ESRCH'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'process %r has exited'"
op|'%'
name|'worker_pid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_killed_worker_recover
dedent|''
name|'def'
name|'test_killed_worker_recover'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_workers'
op|'='
name|'self'
op|'.'
name|'_spawn'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'worker_pid'
op|'='
name|'start_workers'
op|'['
number|'0'
op|']'
newline|'\n'
comment|'# kill one worker and check if new worker can come up'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'pid of first child is %s'"
op|'%'
name|'worker_pid'
op|')'
newline|'\n'
nl|'\n'
comment|'# signal child'
nl|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'worker_pid'
op|','
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'wait_on_process_until_end'
op|'('
name|'worker_pid'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure worker pids don't match"
nl|'\n'
name|'end_workers'
op|'='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|"'workers: %r'"
op|'%'
name|'end_workers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'start_workers'
op|','
name|'end_workers'
op|')'
newline|'\n'
nl|'\n'
comment|'# check if api service still works'
nl|'\n'
name|'flavors'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'flavors'
op|')'
op|'>'
number|'0'
op|','
string|"'Num of flavors > 0.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_terminate_with_signal
dedent|''
name|'def'
name|'_terminate_with_signal'
op|'('
name|'self'
op|','
name|'sig'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_spawn'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# check if api service is working'
nl|'\n'
name|'flavors'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'flavors'
op|')'
op|'>'
number|'0'
op|','
string|"'Num of flavors > 0.'"
op|')'
newline|'\n'
nl|'\n'
name|'worker_pids'
op|'='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
string|'"sent launcher_process pid: %r signal: %r"'
op|'%'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
name|'sig'
op|')'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
name|'sig'
op|')'
newline|'\n'
nl|'\n'
comment|'# did you know the test framework has a timeout of its own?'
nl|'\n'
comment|'# if a test takes too long, the test will be killed.'
nl|'\n'
name|'for'
name|'pid'
name|'in'
name|'worker_pids'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'wait_on_process_until_end'
op|'('
name|'pid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'workers'
op|'='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'workers'
op|','
string|"'OS processes left %r'"
op|'%'
name|'workers'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_sigkill
dedent|''
name|'def'
name|'test_terminate_sigkill'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_terminate_with_signal'
op|'('
name|'signal'
op|'.'
name|'SIGKILL'
op|')'
newline|'\n'
name|'status'
op|'='
name|'self'
op|'.'
name|'_reap_test'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'WIFSIGNALED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'WTERMSIG'
op|'('
name|'status'
op|')'
op|','
name|'signal'
op|'.'
name|'SIGKILL'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_sigterm
dedent|''
name|'def'
name|'test_terminate_sigterm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_terminate_with_signal'
op|'('
name|'signal'
op|'.'
name|'SIGTERM'
op|')'
newline|'\n'
name|'status'
op|'='
name|'self'
op|'.'
name|'_reap_test'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'WIFEXITED'
op|'('
name|'status'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'os'
op|'.'
name|'WEXITSTATUS'
op|'('
name|'status'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_restart_sighup
dedent|''
name|'def'
name|'test_restart_sighup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'start_workers'
op|'='
name|'self'
op|'.'
name|'_spawn'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'kill'
op|'('
name|'self'
op|'.'
name|'pid'
op|','
name|'signal'
op|'.'
name|'SIGHUP'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait at most 5 seconds to restart a worker'
nl|'\n'
name|'cond'
op|'='
name|'lambda'
op|':'
name|'start_workers'
op|'=='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
name|'timeout'
op|'='
number|'5'
newline|'\n'
name|'self'
op|'.'
name|'_wait'
op|'('
name|'cond'
op|','
name|'timeout'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure worker pids match'
nl|'\n'
name|'end_workers'
op|'='
name|'self'
op|'.'
name|'_get_workers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'start_workers'
op|','
name|'end_workers'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'MultiprocessWSGITestV3'
op|'('
name|'client'
op|'.'
name|'TestOpenStackClientV3Mixin'
op|','
nl|'\n'
DECL|class|MultiprocessWSGITestV3
name|'MultiprocessWSGITest'
op|')'
op|':'
newline|'\n'
DECL|variable|_api_version
indent|'    '
name|'_api_version'
op|'='
string|"'v3'"
newline|'\n'
dedent|''
endmarker|''
end_unit

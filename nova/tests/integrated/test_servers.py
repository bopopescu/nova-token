begin_unit
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'zlib'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'utils'
name|'import'
name|'timeutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'integrated'
op|'.'
name|'api'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'integrated'
name|'import'
name|'integrated_helpers'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServersTest
name|'class'
name|'ServersTest'
op|'('
name|'integrated_helpers'
op|'.'
name|'_IntegratedTestBase'
op|')'
op|':'
newline|'\n'
DECL|variable|_api_version
indent|'    '
name|'_api_version'
op|'='
string|"'v2'"
newline|'\n'
DECL|variable|_force_delete_parameter
name|'_force_delete_parameter'
op|'='
string|"'forceDelete'"
newline|'\n'
DECL|variable|_image_ref_parameter
name|'_image_ref_parameter'
op|'='
string|"'imageRef'"
newline|'\n'
DECL|variable|_flavor_ref_parameter
name|'_flavor_ref_parameter'
op|'='
string|"'flavorRef'"
newline|'\n'
DECL|variable|_access_ipv4_parameter
name|'_access_ipv4_parameter'
op|'='
string|"'accessIPv4'"
newline|'\n'
DECL|variable|_access_ipv6_parameter
name|'_access_ipv6_parameter'
op|'='
string|"'accessIPv6'"
newline|'\n'
DECL|variable|_return_resv_id_parameter
name|'_return_resv_id_parameter'
op|'='
string|"'return_reservation_id'"
newline|'\n'
DECL|variable|_min_count_parameter
name|'_min_count_parameter'
op|'='
string|"'min_count'"
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ServersTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
string|"'nova.conductor.manager.ConductorManager'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_state_change
dedent|''
name|'def'
name|'_wait_for_state_change'
op|'('
name|'self'
op|','
name|'server'
op|','
name|'from_status'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
number|'50'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'server'
op|'['
string|"'status'"
op|']'
op|'!='
name|'from_status'
op|':'
newline|'\n'
indent|'                '
name|'break'
newline|'\n'
dedent|''
name|'time'
op|'.'
name|'sleep'
op|'('
number|'.1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'server'
newline|'\n'
nl|'\n'
DECL|member|_restart_compute_service
dedent|''
name|'def'
name|'_restart_compute_service'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""restart compute service. NOTE: fake driver forgets all instances."""'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'kill'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'compute'"
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_servers
dedent|''
name|'def'
name|'test_get_servers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Simple check that listing servers works.'
nl|'\n'
indent|'        '
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
op|')'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"server: %s"'
op|'%'
name|'server'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_server_with_error
dedent|''
dedent|''
name|'def'
name|'test_create_server_with_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a server which will enter error state.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|function|throw_error
name|'def'
name|'throw_error'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'BuildAbortException'
op|'('
name|'reason'
op|'='
string|"''"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'spawn'"
op|','
name|'throw_error'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
op|'{'
string|'"server"'
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ERROR'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_and_delete_server
dedent|''
name|'def'
name|'test_create_and_delete_server'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates and deletes a server.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create server'
nl|'\n'
comment|'# Build the server data gradually, checking errors along the way'
nl|'\n'
name|'server'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'good_server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Without an imageRef, this throws 500.'
nl|'\n'
comment|'# TODO(justinsb): Check whatever the spec says should be thrown here'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'client'
op|'.'
name|'OpenStackApiException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|','
name|'post'
op|')'
newline|'\n'
nl|'\n'
comment|'# With an invalid imageRef, this throws 500.'
nl|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|'='
name|'self'
op|'.'
name|'get_invalid_image'
op|'('
op|')'
newline|'\n'
comment|'# TODO(justinsb): Check whatever the spec says should be thrown here'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'client'
op|'.'
name|'OpenStackApiException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|','
name|'post'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add a valid imageRef'
nl|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|'='
name|'good_server'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_image_ref_parameter'
op|')'
newline|'\n'
nl|'\n'
comment|'# Without flavorRef, this throws 500'
nl|'\n'
comment|'# TODO(justinsb): Check whatever the spec says should be thrown here'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'client'
op|'.'
name|'OpenStackApiException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|','
name|'post'
op|')'
newline|'\n'
nl|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_flavor_ref_parameter'
op|']'
op|'='
name|'good_server'
op|'.'
name|'get'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_flavor_ref_parameter'
op|')'
newline|'\n'
nl|'\n'
comment|'# Without a name, this throws 500'
nl|'\n'
comment|'# TODO(justinsb): Check whatever the spec says should be thrown here'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'client'
op|'.'
name|'OpenStackApiException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|','
name|'post'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set a valid server name'
nl|'\n'
name|'server'
op|'['
string|"'name'"
op|']'
op|'='
name|'good_server'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|"# Check it's there"
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# It should also be in the all-servers list'
nl|'\n'
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
op|')'
newline|'\n'
name|'server_ids'
op|'='
op|'['
name|'s'
op|'['
string|"'id'"
op|']'
name|'for'
name|'s'
name|'in'
name|'servers'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'created_server_id'
op|','
name|'server_ids'
op|')'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
comment|'# It should be available...'
nl|'\n'
comment|"# TODO(justinsb): Mock doesn't yet do this..."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
name|'detail'
op|'='
name|'True'
op|')'
newline|'\n'
name|'for'
name|'server'
name|'in'
name|'servers'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"image"'
op|','
name|'server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"flavor"'
op|','
name|'server'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_force_reclaim
dedent|''
name|'def'
name|'_force_reclaim'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that compute manager thinks the instance is'
nl|'\n'
comment|'# old enough to be expired'
nl|'\n'
indent|'        '
name|'the_past'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'override_time'
op|'='
name|'the_past'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reclaim_queued_deletes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deferred_delete
dedent|''
name|'def'
name|'test_deferred_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates, deletes and waits for server to be reclaimed.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'1'
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create server'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Wait for it to finish being created'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'created_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
nl|'\n'
comment|'# It should be available...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cannot restore unless instance is deleted'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'client'
op|'.'
name|'OpenStackApiException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server_action'
op|','
name|'created_server_id'
op|','
nl|'\n'
op|'{'
string|"'restore'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete the server'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for queued deletion'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'ACTIVE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'SOFT_DELETED'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_force_reclaim'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for real deletion'
nl|'\n'
name|'self'
op|'.'
name|'_wait_for_deletion'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deferred_delete_restore
dedent|''
name|'def'
name|'test_deferred_delete_restore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates, deletes and restores a server.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'3600'
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create server'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Wait for it to finish being created'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'created_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
nl|'\n'
comment|'# It should be available...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete the server'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for queued deletion'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'ACTIVE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'SOFT_DELETED'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Restore server'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server_action'
op|'('
name|'created_server_id'
op|','
op|'{'
string|"'restore'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for server to become active again'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'DELETED'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deferred_delete_force
dedent|''
name|'def'
name|'test_deferred_delete_force'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates, deletes and force deletes a server.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reclaim_instance_interval'
op|'='
number|'3600'
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create server'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Wait for it to finish being created'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'created_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
nl|'\n'
comment|'# It should be available...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete the server'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for queued deletion'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'ACTIVE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'SOFT_DELETED'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Force delete server'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server_action'
op|'('
name|'created_server_id'
op|','
nl|'\n'
op|'{'
name|'self'
op|'.'
name|'_force_delete_parameter'
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Wait for real deletion'
nl|'\n'
name|'self'
op|'.'
name|'_wait_for_deletion'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_wait_for_deletion
dedent|''
name|'def'
name|'_wait_for_deletion'
op|'('
name|'self'
op|','
name|'server_id'
op|')'
op|':'
newline|'\n'
comment|'# Wait (briefly) for deletion'
nl|'\n'
indent|'        '
name|'for'
name|'_retries'
name|'in'
name|'range'
op|'('
number|'50'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'server_id'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'client'
op|'.'
name|'OpenStackApiNotFoundException'
op|':'
newline|'\n'
indent|'                '
name|'found_server'
op|'='
name|'None'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Got 404, proceeding"'
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Found_server=%s"'
op|'%'
name|'found_server'
op|')'
newline|'\n'
nl|'\n'
comment|"# TODO(justinsb): Mock doesn't yet do accurate state changes"
nl|'\n'
comment|"# if found_server['status'] != 'deleting':"
nl|'\n'
comment|'#    break'
nl|'\n'
name|'time'
op|'.'
name|'sleep'
op|'('
number|'.1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Should be gone'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'found_server'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_server
dedent|''
name|'def'
name|'_delete_server'
op|'('
name|'self'
op|','
name|'server_id'
op|')'
op|':'
newline|'\n'
comment|'# Delete the server'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_server'
op|'('
name|'server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_wait_for_deletion'
op|'('
name|'server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_server_with_metadata
dedent|''
name|'def'
name|'test_create_server_with_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates a server with metadata.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Build the server data gradually, checking errors along the way'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'30'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'key_%s'"
op|'%'
name|'i'
op|']'
op|'='
string|"'value_%s'"
op|'%'
name|'i'
newline|'\n'
nl|'\n'
dedent|''
name|'server'
op|'['
string|"'metadata'"
op|']'
op|'='
name|'metadata'
newline|'\n'
nl|'\n'
name|'post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The server should also be in the all-servers details list'
nl|'\n'
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
name|'detail'
op|'='
name|'True'
op|')'
newline|'\n'
name|'server_map'
op|'='
name|'dict'
op|'('
op|'('
name|'server'
op|'['
string|"'id'"
op|']'
op|','
name|'server'
op|')'
name|'for'
name|'server'
name|'in'
name|'servers'
op|')'
newline|'\n'
name|'found_server'
op|'='
name|'server_map'
op|'.'
name|'get'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'found_server'
op|')'
newline|'\n'
comment|'# Details do include metadata'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# The server should also be in the all-servers summary list'
nl|'\n'
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
name|'detail'
op|'='
name|'False'
op|')'
newline|'\n'
name|'server_map'
op|'='
name|'dict'
op|'('
op|'('
name|'server'
op|'['
string|"'id'"
op|']'
op|','
name|'server'
op|')'
name|'for'
name|'server'
name|'in'
name|'servers'
op|')'
newline|'\n'
name|'found_server'
op|'='
name|'server_map'
op|'.'
name|'get'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'found_server'
op|')'
newline|'\n'
comment|'# Summary should not include metadata'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup'
nl|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_and_rebuild_server
dedent|''
name|'def'
name|'test_create_and_rebuild_server'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Rebuild a server with metadata.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# create a server with initially has no metadata'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'server_post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'30'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
string|"'key_%s'"
op|'%'
name|'i'
op|']'
op|'='
string|"'value_%s'"
op|'%'
name|'i'
newline|'\n'
nl|'\n'
dedent|''
name|'server_post'
op|'['
string|"'server'"
op|']'
op|'['
string|"'metadata'"
op|']'
op|'='
name|'metadata'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'server_post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'created_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
nl|'\n'
comment|'# rebuild the server with metadata and other server attributes'
nl|'\n'
name|'post'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'post'
op|'['
string|"'rebuild'"
op|']'
op|'='
op|'{'
nl|'\n'
name|'self'
op|'.'
name|'_image_ref_parameter'
op|':'
string|'"76fa36fc-c930-4bf3-8c8a-ea2a2420deb6"'
op|','
nl|'\n'
string|'"name"'
op|':'
string|'"blah"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_access_ipv4_parameter'
op|':'
string|'"172.19.0.2"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_access_ipv6_parameter'
op|':'
string|'"fe80::2"'
op|','
nl|'\n'
string|'"metadata"'
op|':'
op|'{'
string|"'some'"
op|':'
string|"'thing'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'post'
op|'['
string|"'rebuild'"
op|']'
op|'.'
name|'update'
op|'('
name|'self'
op|'.'
name|'_get_access_ips_params'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server_action'
op|'('
name|'created_server_id'
op|','
name|'post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"rebuilt server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'some'"
op|':'
string|"'thing'"
op|'}'
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'blah'"
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'post'
op|'['
string|"'rebuild'"
op|']'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|','
nl|'\n'
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'image'"
op|')'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_access_ips'
op|'('
name|'found_server'
op|')'
newline|'\n'
nl|'\n'
comment|'# rebuild the server with empty metadata and nothing else'
nl|'\n'
name|'post'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'post'
op|'['
string|"'rebuild'"
op|']'
op|'='
op|'{'
nl|'\n'
name|'self'
op|'.'
name|'_image_ref_parameter'
op|':'
string|'"76fa36fc-c930-4bf3-8c8a-ea2a2420deb6"'
op|','
nl|'\n'
string|'"metadata"'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server_action'
op|'('
name|'created_server_id'
op|','
name|'post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"rebuilt server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
op|'}'
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'metadata'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'blah'"
op|','
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'post'
op|'['
string|"'rebuild'"
op|']'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|','
nl|'\n'
name|'found_server'
op|'.'
name|'get'
op|'('
string|"'image'"
op|')'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_access_ips'
op|'('
name|'found_server'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup'
nl|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_access_ips_params
dedent|''
name|'def'
name|'_get_access_ips_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
name|'self'
op|'.'
name|'_access_ipv4_parameter'
op|':'
string|'"172.19.0.2"'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_access_ipv6_parameter'
op|':'
string|'"fe80::2"'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_verify_access_ips
dedent|''
name|'def'
name|'_verify_access_ips'
op|'('
name|'self'
op|','
name|'server'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'172.19.0.2'"
op|','
nl|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_access_ipv4_parameter'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'fe80::2'"
op|','
name|'server'
op|'['
name|'self'
op|'.'
name|'_access_ipv6_parameter'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rename_server
dedent|''
name|'def'
name|'test_rename_server'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test building and renaming a server.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a server'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'server_id'
op|')'
newline|'\n'
nl|'\n'
comment|"# Rename the server to 'new-name'"
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'put_server'
op|'('
name|'server_id'
op|','
op|'{'
string|"'server'"
op|':'
op|'{'
string|"'name'"
op|':'
string|"'new-name'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the name of the server'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server'
op|'['
string|"'name'"
op|']'
op|','
string|"'new-name'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup'
nl|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_multiple_servers
dedent|''
name|'def'
name|'test_create_multiple_servers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates multiple servers and checks for reservation_id.'
nl|'\n'
nl|'\n'
comment|"# Create 2 servers, setting 'return_reservation_id, which should"
nl|'\n'
comment|'# return a reservation_id'
nl|'\n'
indent|'        '
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_min_count_parameter'
op|']'
op|'='
number|'2'
newline|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_return_resv_id_parameter'
op|']'
op|'='
name|'True'
newline|'\n'
name|'post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'post'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'reservation_id'"
op|','
name|'response'
op|')'
newline|'\n'
name|'reservation_id'
op|'='
name|'response'
op|'['
string|"'reservation_id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'reservation_id'
op|','
op|'['
string|"''"
op|','
name|'None'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create 1 more server, which should not return a reservation_id'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'post'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# lookup servers created by the first request.'
nl|'\n'
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
name|'detail'
op|'='
name|'True'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'reservation_id'"
op|':'
name|'reservation_id'
op|'}'
op|')'
newline|'\n'
name|'server_map'
op|'='
name|'dict'
op|'('
op|'('
name|'server'
op|'['
string|"'id'"
op|']'
op|','
name|'server'
op|')'
name|'for'
name|'server'
name|'in'
name|'servers'
op|')'
newline|'\n'
name|'found_server'
op|'='
name|'server_map'
op|'.'
name|'get'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
comment|'# The server from the 2nd request should not be there.'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'found_server'
op|')'
newline|'\n'
comment|'# Should have found 2 servers.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'server_map'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup'
nl|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'for'
name|'server_id'
name|'in'
name|'server_map'
op|'.'
name|'iterkeys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'server_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_server_with_injected_files
dedent|''
dedent|''
name|'def'
name|'test_create_server_with_injected_files'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Creates a server with injected_files.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'personality'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
comment|'# Inject a text file'
nl|'\n'
name|'data'
op|'='
string|"'Hello, World!'"
newline|'\n'
name|'personality'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'path'"
op|':'
string|"'/helloworld.txt'"
op|','
nl|'\n'
string|"'contents'"
op|':'
name|'data'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Inject a binary file'
nl|'\n'
name|'data'
op|'='
name|'zlib'
op|'.'
name|'compress'
op|'('
string|"'Hello, World!'"
op|')'
newline|'\n'
name|'personality'
op|'.'
name|'append'
op|'('
op|'{'
nl|'\n'
string|"'path'"
op|':'
string|"'/helloworld.zip'"
op|','
nl|'\n'
string|"'contents'"
op|':'
name|'data'
op|'.'
name|'encode'
op|'('
string|"'base64'"
op|')'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create server'
nl|'\n'
name|'server'
op|'='
name|'self'
op|'.'
name|'_build_minimal_create_server_request'
op|'('
op|')'
newline|'\n'
name|'server'
op|'['
string|"'personality'"
op|']'
op|'='
name|'personality'
newline|'\n'
nl|'\n'
name|'post'
op|'='
op|'{'
string|"'server'"
op|':'
name|'server'
op|'}'
newline|'\n'
nl|'\n'
name|'created_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'post_server'
op|'('
name|'post'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"created_server: %s"'
op|'%'
name|'created_server'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'created_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'created_server_id'
op|'='
name|'created_server'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|"# Check it's there"
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'created_server_id'
op|','
name|'found_server'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'found_server'
op|'='
name|'self'
op|'.'
name|'_wait_for_state_change'
op|'('
name|'found_server'
op|','
string|"'BUILD'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'ACTIVE'"
op|','
name|'found_server'
op|'['
string|"'status'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Cleanup'
nl|'\n'
name|'self'
op|'.'
name|'_delete_server'
op|'('
name|'created_server_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ServersTestV3
dedent|''
dedent|''
name|'class'
name|'ServersTestV3'
op|'('
name|'client'
op|'.'
name|'TestOpenStackClientV3Mixin'
op|','
name|'ServersTest'
op|')'
op|':'
newline|'\n'
DECL|variable|_force_delete_parameter
indent|'    '
name|'_force_delete_parameter'
op|'='
string|"'forceDelete'"
newline|'\n'
DECL|variable|_api_version
name|'_api_version'
op|'='
string|"'v3'"
newline|'\n'
DECL|variable|_image_ref_parameter
name|'_image_ref_parameter'
op|'='
string|"'imageRef'"
newline|'\n'
DECL|variable|_flavor_ref_parameter
name|'_flavor_ref_parameter'
op|'='
string|"'flavorRef'"
newline|'\n'
DECL|variable|_access_ipv4_parameter
name|'_access_ipv4_parameter'
op|'='
name|'None'
newline|'\n'
DECL|variable|_access_ipv6_parameter
name|'_access_ipv6_parameter'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_get_access_ips_params
name|'def'
name|'_get_access_ips_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_verify_access_ips
dedent|''
name|'def'
name|'_verify_access_ips'
op|'('
name|'self'
op|','
name|'server'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(alexxu): access_ips was demoted as extensions in v3 api.'
nl|'\n'
comment|'# So skips verifying access_ips'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

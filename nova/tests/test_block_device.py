begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Isaku Yamahata'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTests for Block Device utility functions.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BlockDeviceTestCase
name|'class'
name|'BlockDeviceTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_properties
indent|'    '
name|'def'
name|'test_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'root_device0'
op|'='
string|"'/dev/sda'"
newline|'\n'
name|'root_device1'
op|'='
string|"'/dev/sdb'"
newline|'\n'
name|'mappings'
op|'='
op|'['
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
nl|'\n'
string|"'device'"
op|':'
name|'root_device0'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'properties0'
op|'='
op|'{'
string|"'mappings'"
op|':'
name|'mappings'
op|'}'
newline|'\n'
name|'properties1'
op|'='
op|'{'
string|"'mappings'"
op|':'
name|'mappings'
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'root_device1'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
op|'{'
op|'}'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
name|'properties0'
op|')'
op|','
nl|'\n'
name|'root_device0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
name|'properties1'
op|')'
op|','
nl|'\n'
name|'root_device1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ephemeral
dedent|''
name|'def'
name|'test_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'ephemeral'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'ephemeral0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'ephemeral1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'ephemeral11'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'root'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'swap'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_ephemeral'
op|'('
string|"'/dev/sda1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
string|"'ephemeral0'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
string|"'ephemeral1'"
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'ephemeral_num'
op|'('
string|"'ephemeral11'"
op|')'
op|','
number|'11'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'ephemeral'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'ephemeral0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'ephemeral1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'swap'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'root'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'block_device'
op|'.'
name|'is_swap_or_ephemeral'
op|'('
string|"'/dev/sda1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mappings_prepend_dev
dedent|''
name|'def'
name|'test_mappings_prepend_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mapping'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'sda'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'sdb'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdc'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'sdd'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral2'"
op|','
string|"'device'"
op|':'
string|"'sde'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'sda'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'/dev/sdb'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'/dev/sdc'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'/dev/sdd'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral2'"
op|','
string|"'device'"
op|':'
string|"'/dev/sde'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'prepended'
op|'='
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'prepended'
op|'.'
name|'sort'
op|'('
op|')'
op|','
name|'expected'
op|'.'
name|'sort'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_strip_dev
dedent|''
name|'def'
name|'test_strip_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
string|"'/dev/sda'"
op|')'
op|','
string|"'sda'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'block_device'
op|'.'
name|'strip_dev'
op|'('
string|"'sda'"
op|')'
op|','
string|"'sda'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

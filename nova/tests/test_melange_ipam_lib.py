begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2012 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_ipam_lib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MelangeIpamLibTestCase
name|'class'
name|'MelangeIpamLibTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MelangeIpamLibTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'='
name|'melange_ipam_lib'
op|'.'
name|'QuantumMelangeIPAMLib'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'m_conn'
op|'='
name|'self'
op|'.'
name|'m_conn'
newline|'\n'
nl|'\n'
DECL|member|_block_list
dedent|''
name|'def'
name|'_block_list'
op|'('
name|'self'
op|','
name|'id'
op|'='
string|"'id'"
op|','
name|'cidr'
op|'='
string|"'cidr'"
op|','
name|'network_id'
op|'='
string|"'network_id'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
string|"'ip_blocks'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
name|'id'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'cidr'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_id'
op|'}'
op|']'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_fixed_ips_extracts_address
dedent|''
name|'def'
name|'test_allocate_fixed_ips_extracts_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'allocate_ip'
op|'('
string|"'quantum_net_id'"
op|','
string|"'network_tenant_id'"
op|','
nl|'\n'
string|"'vif_ref_uuid'"
op|','
string|"'project_id'"
op|','
nl|'\n'
string|"'vif_ref_address'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'address'"
op|':'
string|"'ip_address'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ips'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'allocate_fixed_ips'
op|'('
string|"'context'"
op|','
nl|'\n'
string|"'project_id'"
op|','
nl|'\n'
string|"'quantum_net_id'"
op|','
nl|'\n'
string|"'network_tenant_id'"
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'vif_ref_uuid'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'vif_ref_address'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ips'
op|'['
number|'0'
op|']'
op|','
string|"'ip_address'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_subnets_by_net_id_deletes_block
dedent|''
name|'def'
name|'test_delete_subnets_by_net_id_deletes_block'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'elevated'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
string|"'project_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_block_list'
op|'('
name|'id'
op|'='
string|"'block_id'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'delete_block'
op|'('
string|"'block_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
string|"'elevated'"
op|','
string|"'network_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'network_id'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_delete_safe'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_delete_safe'
op|'('
name|'context'
op|','
string|"'network_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'delete_subnets_by_net_id'
op|'('
name|'context'
op|','
string|"'network_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_networks_by_tenant_gets_all_networks
dedent|''
name|'def'
name|'test_get_networks_by_tenant_gets_all_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'block_list'
op|'='
name|'self'
op|'.'
name|'_block_list'
op|'('
name|'network_id'
op|'='
string|"'net_1'"
op|')'
newline|'\n'
name|'block_list'
op|'['
string|"'ip_blocks'"
op|']'
op|'+='
name|'self'
op|'.'
name|'_block_list'
op|'('
nl|'\n'
name|'network_id'
op|'='
string|"'net_2'"
op|')'
op|'['
string|"'ip_blocks'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
string|"'tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'block_list'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
string|"'admin_context'"
op|','
string|"'net_1'"
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'network1'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
string|"'admin_context'"
op|','
string|"'net_2'"
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'network2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_networks_by_tenant'
op|'('
string|"'admin_context'"
op|','
string|"'tenant_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
op|'['
string|"'network1'"
op|','
string|"'network2'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_global_networks
dedent|''
name|'def'
name|'test_get_global_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|'='
string|"'quantum_default_tenant_id'"
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'ipam'
op|','
string|"'get_networks_by_tenant'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_networks_by_tenant'
op|'('
string|"'admin_context'"
op|','
nl|'\n'
string|"'quantum_default_tenant_id'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_global_networks'
op|'('
string|"'admin_context'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_project_networks
dedent|''
name|'def'
name|'test_get_project_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'elevated'"
op|')'
newline|'\n'
nl|'\n'
name|'networks'
op|'='
op|'['
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'project_id'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all'
op|'('
string|"'elevated'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'networks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_project_networks'
op|'('
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
op|'['
name|'networks'
op|'['
number|'0'
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_project_and_global_net_ids__by_priority
dedent|''
name|'def'
name|'test_get_project_and_global_net_ids__by_priority'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'elevated'"
op|')'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|'='
string|"'default_tenant_id'"
newline|'\n'
nl|'\n'
name|'net1'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'net1_uuid'"
op|','
string|"'priority'"
op|':'
string|"'net1_priority'"
op|'}'
newline|'\n'
name|'net2'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'net2_uuid'"
op|','
string|"'priority'"
op|':'
string|"'net2_priority'"
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'ipam'
op|','
string|"'get_networks_by_tenant'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_networks_by_tenant'
op|'('
string|"'elevated'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'net1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_networks_by_tenant'
op|'('
string|"'elevated'"
op|','
nl|'\n'
string|"'default_tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'net2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
name|'context'
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_tenant_id_by_net_id_returns_id
dedent|''
name|'def'
name|'test_get_tenant_id_by_net_id_returns_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|'='
string|"'qdti'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'qdti'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_tenant_id_by_net_id'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
string|"'qdti'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_tenant_id_by_net_id_returns_none_if_none_found
dedent|''
name|'def'
name|'test_get_tenant_id_by_net_id_returns_none_if_none_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|'='
string|"'qdti'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'qdti'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'KeyError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'KeyError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
name|'None'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'KeyError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_tenant_id_by_net_id'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_subnets_by_net_id
dedent|''
name|'def'
name|'test_get_subnets_by_net_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ips'
op|'='
op|'['
op|'{'
string|"'ip_block'"
op|':'
op|'{'
string|"'network_id'"
op|':'
string|"'network_id'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'cidr'"
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'gateway'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'broadcast'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'netmask'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'dns1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'dns2'"
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
number|'4'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ips'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_subnets_by_net_id'
op|'('
string|"'context'"
op|','
string|"'tenant_id'"
op|','
nl|'\n'
string|"'net_id'"
op|','
string|"'vif_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'value'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
string|"'cidr'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_routes_by_ip_block
dedent|''
name|'def'
name|'test_get_routes_by_ip_block'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_routes'
op|'('
string|"'block_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_routes_by_ip_block'
op|'('
string|"'context'"
op|','
string|"'block_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_v4_ips_by_interface
dedent|''
name|'def'
name|'test_get_v4_ips_by_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'ipam'
op|','
string|"'_get_ips_by_interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'_get_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_v4_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_v6_ips_by_interface
dedent|''
name|'def'
name|'test_get_v6_ips_by_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'ipam'
op|','
string|"'_get_ips_by_interface'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'_get_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_v6_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_ips_by_interface
dedent|''
name|'def'
name|'test_get_ips_by_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ips'
op|'='
op|'['
op|'{'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|'}'
op|','
op|'{'
string|"'address'"
op|':'
string|"'2001::CAFE'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'_get_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'tenant_id'"
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
op|'['
string|'"10.10.10.10"'
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'_get_ips_by_interface'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'vif_id'"
op|','
nl|'\n'
string|"'tenant_id'"
op|','
number|'6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'values'
op|','
op|'['
string|'"2001::CAFE"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_ids_by_ip_address
dedent|''
name|'def'
name|'test_get_instance_ids_by_ip_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ips'
op|'='
op|'['
op|'{'
string|"'used_by_device'"
op|':'
string|"'some_vif_uuid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips_by_address'
op|'('
string|"'ip'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ips'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'uuid'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_instance_ids_by_ip_address'
op|'('
string|"'context'"
op|','
string|"'ip'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'uuid'
op|','
op|'['
string|"'some_vif_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_verify_subnet_exists
dedent|''
name|'def'
name|'test_verify_subnet_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'blocks'
op|'='
op|'{'
string|"'ip_blocks'"
op|':'
op|'['
op|'{'
string|"'network_id'"
op|':'
string|"'quantum_net_id'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_blocks'
op|'('
string|"'tenant_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'blocks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'value'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'verify_subnet_exists'
op|'('
string|"'context'"
op|','
string|"'tenant_id'"
op|','
nl|'\n'
string|"'quantum_net_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'value'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_ips_by_vif
dedent|''
name|'def'
name|'test_deallocate_ips_by_vif'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'deallocate_ips'
op|'('
string|"'net_id'"
op|','
string|"'uuid'"
op|','
string|"'tenant_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'deallocate_ips_by_vif'
op|'('
string|"'context'"
op|','
string|"'tenant_id'"
op|','
string|"'net_id'"
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'uuid'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_allocated_ips
dedent|''
name|'def'
name|'test_get_allocated_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ips'
op|'='
op|'['
op|'{'
string|"'address'"
op|':'
string|"'ip_address'"
op|','
string|"'interface_id'"
op|':'
string|"'interface_id'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'get_allocated_ips_for_network'
op|'('
string|"'subnet_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_allocated_ips'
op|'('
string|"'context'"
op|','
string|"'subnet_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_vif
dedent|''
name|'def'
name|'test_create_vif'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'m_conn'
op|'.'
name|'create_vif'
op|'('
string|"'vif_id'"
op|','
string|"'instance_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'create_vif'
op|'('
string|"'vif_id'"
op|','
string|"'instance_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ips_by_fixed_address
dedent|''
name|'def'
name|'test_get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'value'
op|'='
name|'self'
op|'.'
name|'ipam'
op|'.'
name|'get_floating_ips_by_fixed_address'
op|'('
string|"'context'"
op|','
nl|'\n'
string|"'fixed_address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'value'
op|','
op|'['
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

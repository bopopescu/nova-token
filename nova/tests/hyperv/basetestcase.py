begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#  Copyright 2012 Cloudbase Solutions Srl'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTestCase for MockProxy based tests and related classes.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'gzip'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'pickle'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'hyperv'
name|'import'
name|'mockproxy'
newline|'\n'
nl|'\n'
DECL|variable|gen_test_mocks_key
name|'gen_test_mocks_key'
op|'='
string|"'NOVA_GENERATE_TEST_MOCKS'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseTestCase
name|'class'
name|'BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""TestCase for MockProxy based tests."""'
newline|'\n'
nl|'\n'
DECL|member|run
name|'def'
name|'run'
op|'('
name|'self'
op|','
name|'result'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_currentResult'
op|'='
name|'result'
newline|'\n'
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'run'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mps'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# python-subunit will wrap test results with a decorator.'
nl|'\n'
comment|'# Need to access the decorated member of results to get the'
nl|'\n'
comment|'# actual test result when using python-subunit.'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'self'
op|'.'
name|'_currentResult'
op|','
string|"'decorated'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'_currentResult'
op|'.'
name|'decorated'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'self'
op|'.'
name|'_currentResult'
newline|'\n'
dedent|''
name|'has_errors'
op|'='
name|'len'
op|'('
op|'['
name|'test'
name|'for'
op|'('
name|'test'
op|','
name|'msgs'
op|')'
name|'in'
name|'result'
op|'.'
name|'errors'
nl|'\n'
name|'if'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|'=='
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|']'
op|')'
op|'>'
number|'0'
newline|'\n'
name|'failed'
op|'='
name|'len'
op|'('
op|'['
name|'test'
name|'for'
op|'('
name|'test'
op|','
name|'msgs'
op|')'
name|'in'
name|'result'
op|'.'
name|'failures'
nl|'\n'
name|'if'
name|'test'
op|'.'
name|'id'
op|'('
op|')'
op|'=='
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|']'
op|')'
op|'>'
number|'0'
newline|'\n'
nl|'\n'
name|'if'
name|'not'
name|'has_errors'
name|'and'
name|'not'
name|'failed'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_save_mock_proxies'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_mock
dedent|''
dedent|''
name|'def'
name|'_save_mock'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'self'
op|'.'
name|'_get_stub_file_path'
op|'('
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'pickle'
op|'.'
name|'dump'
op|'('
name|'mock'
op|','
name|'gzip'
op|'.'
name|'open'
op|'('
name|'path'
op|','
string|"'wb'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_stub_file_path
dedent|''
name|'def'
name|'_get_stub_file_path'
op|'('
name|'self'
op|','
name|'test_name'
op|','
name|'mock_name'
op|')'
op|':'
newline|'\n'
comment|'# test naming differs between platforms'
nl|'\n'
indent|'        '
name|'prefix'
op|'='
string|"'nova.tests.'"
newline|'\n'
name|'if'
name|'test_name'
op|'.'
name|'startswith'
op|'('
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'test_name'
op|'='
name|'test_name'
op|'['
name|'len'
op|'('
name|'prefix'
op|')'
op|':'
op|']'
newline|'\n'
dedent|''
name|'file_name'
op|'='
string|"'{0}_{1}.p.gz'"
op|'.'
name|'format'
op|'('
name|'test_name'
op|','
name|'mock_name'
op|')'
newline|'\n'
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'mockproxy'
op|'.'
name|'__file__'
op|')'
op|','
nl|'\n'
string|'"stubs"'
op|','
name|'file_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_mock
dedent|''
name|'def'
name|'_load_mock'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'path'
op|'='
name|'self'
op|'.'
name|'_get_stub_file_path'
op|'('
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'pickle'
op|'.'
name|'load'
op|'('
name|'gzip'
op|'.'
name|'open'
op|'('
name|'path'
op|','
string|"'rb'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|_load_mock_or_create_proxy
dedent|''
dedent|''
name|'def'
name|'_load_mock_or_create_proxy'
op|'('
name|'self'
op|','
name|'module_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'m'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'not'
name|'gen_test_mocks_key'
name|'in'
name|'os'
op|'.'
name|'environ'
name|'or'
name|'os'
op|'.'
name|'environ'
op|'['
name|'gen_test_mocks_key'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
name|'not'
name|'in'
op|'['
string|"'true'"
op|','
string|"'yes'"
op|','
string|"'1'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'self'
op|'.'
name|'_load_mock'
op|'('
name|'module_name'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'__import__'
op|'('
name|'module_name'
op|')'
newline|'\n'
name|'module'
op|'='
name|'sys'
op|'.'
name|'modules'
op|'['
name|'module_name'
op|']'
newline|'\n'
name|'m'
op|'='
name|'mockproxy'
op|'.'
name|'MockProxy'
op|'('
name|'module'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_mps'
op|'['
name|'module_name'
op|']'
op|'='
name|'m'
newline|'\n'
dedent|''
name|'return'
name|'m'
newline|'\n'
nl|'\n'
DECL|member|_inject_mocks_in_modules
dedent|''
name|'def'
name|'_inject_mocks_in_modules'
op|'('
name|'self'
op|','
name|'objects_to_mock'
op|','
name|'modules_to_test'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'module_name'
name|'in'
name|'objects_to_mock'
op|':'
newline|'\n'
indent|'            '
name|'mp'
op|'='
name|'self'
op|'.'
name|'_load_mock_or_create_proxy'
op|'('
name|'module_name'
op|')'
newline|'\n'
name|'for'
name|'mt'
name|'in'
name|'modules_to_test'
op|':'
newline|'\n'
indent|'                '
name|'module_local_name'
op|'='
name|'module_name'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'setattr'
op|'('
name|'mt'
op|','
name|'module_local_name'
op|','
name|'mp'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_save_mock_proxies
dedent|''
dedent|''
dedent|''
name|'def'
name|'_save_mock_proxies'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'mp'
name|'in'
name|'self'
op|'.'
name|'_mps'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'m'
op|'='
name|'mp'
op|'.'
name|'get_mock'
op|'('
op|')'
newline|'\n'
name|'if'
name|'m'
op|'.'
name|'has_values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_save_mock'
op|'('
name|'name'
op|','
name|'m'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

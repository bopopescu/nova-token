begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'__builtin__'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'hashlib'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'os'
op|'.'
name|'path'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'socket'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'from'
name|'eventlet'
name|'import'
name|'greenpool'
newline|'\n'
name|'import'
name|'iso8601'
newline|'\n'
name|'import'
name|'lockfile'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExecuteTestCase
name|'class'
name|'ExecuteTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_retry_on_failure
indent|'    '
name|'def'
name|'test_retry_on_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fd'
op|','
name|'tmpfilename'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'_'
op|','
name|'tmpfilename2'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fp'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'w+'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
string|'\'\'\'#!/bin/sh\n# If stdin fails to get passed during one of the runs, make a note.\nif ! grep -q foo\nthen\n    echo \'failure\' > "$1"\nfi\n# If stdin has failed to get passed during this or a previous run, exit early.\nif grep failure "$1"\nthen\n    exit 1\nfi\nruns="$(cat $1)"\nif [ -z "$runs" ]\nthen\n    runs=0\nfi\nruns=$(($runs + 1))\necho $runs > "$1"\nexit 1\n\'\'\''
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'tmpfilename'
op|','
number|'0755'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|','
nl|'\n'
name|'tmpfilename'
op|','
name|'tmpfilename2'
op|','
name|'attempts'
op|'='
number|'10'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'foo'"
op|','
nl|'\n'
name|'delay_on_retry'
op|'='
name|'False'
op|')'
newline|'\n'
name|'fp'
op|'='
name|'open'
op|'('
name|'tmpfilename2'
op|','
string|"'r+'"
op|')'
newline|'\n'
name|'runs'
op|'='
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEquals'
op|'('
name|'runs'
op|'.'
name|'strip'
op|'('
op|')'
op|','
string|"'failure'"
op|','
string|"'stdin did not '"
nl|'\n'
string|"'always get passed '"
nl|'\n'
string|"'correctly'"
op|')'
newline|'\n'
name|'runs'
op|'='
name|'int'
op|'('
name|'runs'
op|'.'
name|'strip'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'runs'
op|','
number|'10'
op|','
nl|'\n'
string|"'Ran %d times instead of 10.'"
op|'%'
op|'('
name|'runs'
op|','
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tmpfilename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tmpfilename2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unknown_kwargs_raises_error
dedent|''
dedent|''
name|'def'
name|'test_unknown_kwargs_raises_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|','
nl|'\n'
string|"'/usr/bin/env'"
op|','
string|"'true'"
op|','
nl|'\n'
name|'this_is_not_a_valid_kwarg'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_exit_code_boolean
dedent|''
name|'def'
name|'test_check_exit_code_boolean'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'/usr/bin/env'"
op|','
string|"'false'"
op|','
name|'check_exit_code'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ProcessExecutionError'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'execute'
op|','
nl|'\n'
string|"'/usr/bin/env'"
op|','
string|"'false'"
op|','
name|'check_exit_code'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_retry_on_success
dedent|''
name|'def'
name|'test_no_retry_on_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fd'
op|','
name|'tmpfilename'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'_'
op|','
name|'tmpfilename2'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'fp'
op|'='
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'fd'
op|','
string|"'w+'"
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'write'
op|'('
string|'\'\'\'#!/bin/sh\n# If we\'ve already run, bail out.\ngrep -q foo "$1" && exit 1\n# Mark that we\'ve run before.\necho foo > "$1"\n# Check that stdin gets passed correctly.\ngrep foo\n\'\'\''
op|')'
newline|'\n'
name|'fp'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'os'
op|'.'
name|'chmod'
op|'('
name|'tmpfilename'
op|','
number|'0755'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
name|'tmpfilename'
op|','
nl|'\n'
name|'tmpfilename2'
op|','
nl|'\n'
name|'process_input'
op|'='
string|"'foo'"
op|','
nl|'\n'
name|'attempts'
op|'='
number|'2'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tmpfilename'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'tmpfilename2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetFromPathTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'GetFromPathTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_tolerates_nones
indent|'    '
name|'def'
name|'test_tolerates_nones'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_does_select
dedent|''
name|'def'
name|'test_does_select'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
string|"'a_1'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'a_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|'}'
op|']'
op|','
nl|'\n'
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|','
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|','
string|"'c_2'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c/d"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"c/a/b/d"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"i/r/t"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flattens_lists
dedent|''
name|'def'
name|'test_flattens_lists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bad_xpath
dedent|''
name|'def'
name|'test_bad_xpath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"/a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"/a/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"//"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"//a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"a//a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"a//a/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'f'
op|','
op|'['
op|']'
op|','
string|'"a/a/"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_real_failure1
dedent|''
name|'def'
name|'test_real_failure1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Real world failure case...'
nl|'\n'
comment|"#  We weren't coping when the input was a Dictionary instead of a List"
nl|'\n'
comment|'# This led to test_accepts_dictionaries'
nl|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'inst'
op|'='
op|'{'
string|"'fixed_ip'"
op|':'
op|'{'
string|"'floating_ips'"
op|':'
op|'['
op|'{'
string|"'address'"
op|':'
string|"'1.2.3.4'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.0.3'"
op|'}'
op|','
nl|'\n'
string|"'hostname'"
op|':'
string|"''"
op|'}'
newline|'\n'
nl|'\n'
name|'private_ips'
op|'='
name|'f'
op|'('
name|'inst'
op|','
string|"'fixed_ip/address'"
op|')'
newline|'\n'
name|'public_ips'
op|'='
name|'f'
op|'('
name|'inst'
op|','
string|"'fixed_ip/floating_ips/address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'192.168.0.3'"
op|']'
op|','
name|'private_ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'1.2.3.4'"
op|']'
op|','
name|'public_ips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_accepts_dictionaries
dedent|''
name|'def'
name|'test_accepts_dictionaries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'f'
op|'='
name|'utils'
op|'.'
name|'get_from_path'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'f'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GenericUtilsTestCase
dedent|''
dedent|''
name|'class'
name|'GenericUtilsTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_parse_server_string
indent|'    '
name|'def'
name|'test_parse_server_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'::1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[::1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'::1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'2001:db8::192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'[2001:db8::192.168.1.1]:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'2001:db8::192.168.1.1'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.1'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.2:8773'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.2'"
op|','
string|"'8773'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'192.168.1.3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'192.168.1.3'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"'8443'"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.example.com'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"'www.example.com'"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
comment|'# error case'
nl|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'parse_server_string'
op|'('
string|"'www.exa:mple.com:8443'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'('
string|"''"
op|','
string|"''"
op|')'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_unicode_sanitization
dedent|''
name|'def'
name|'test_hostname_unicode_sanitization'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'u"\\u7684.test.example.com"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_periods
dedent|''
name|'def'
name|'test_hostname_sanitize_periods'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"....test.example.com..."'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_dashes
dedent|''
name|'def'
name|'test_hostname_sanitize_dashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"----test.example.com---"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"test.example.com"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_sanitize_characters
dedent|''
name|'def'
name|'test_hostname_sanitize_characters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"(#@&$!(@*--#&91)(__=+--test-host.example!!.com-0+"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"91----test-host.example.com-0"'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_translate
dedent|''
name|'def'
name|'test_hostname_translate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostname'
op|'='
string|'"<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"hello"'
op|','
name|'utils'
op|'.'
name|'sanitize_hostname'
op|'('
name|'hostname'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bool_from_str
dedent|''
name|'def'
name|'test_bool_from_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'-1'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'true'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'True'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'tRuE'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'False'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'false'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'0'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
name|'None'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'bool_from_str'
op|'('
string|"'junk'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_glance_url
dedent|''
name|'def'
name|'test_generate_glance_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'generated_url'
op|'='
name|'utils'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'actual_url'
op|'='
string|'"http://%s:%d"'
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'glance_host'
op|','
name|'FLAGS'
op|'.'
name|'glance_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'generated_url'
op|','
name|'actual_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_cached_file
dedent|''
name|'def'
name|'test_read_cached_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|'"getmtime"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'cache_data'
op|'='
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|','
name|'cache_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'cache_data'
op|'['
string|'"data"'
op|']'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_modified_cached_file
dedent|''
name|'def'
name|'test_read_modified_cached_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|'"getmtime"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'__builtin__'
op|','
string|"'open'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getmtime'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'fake_contents'
op|'='
string|'"lorem ipsum"'
newline|'\n'
name|'fake_file'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'fake_file'
op|'.'
name|'read'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_contents'
op|')'
newline|'\n'
name|'fake_context_manager'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'fake_context_manager'
op|'.'
name|'__enter__'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_file'
op|')'
newline|'\n'
name|'fake_context_manager'
op|'.'
name|'__exit__'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'__builtin__'
op|'.'
name|'open'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_context_manager'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'cache_data'
op|'='
op|'{'
string|'"data"'
op|':'
number|'1123'
op|','
string|'"mtime"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'reload_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|test_reload
name|'def'
name|'test_reload'
op|'('
name|'reloaded_data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reloaded_data'
op|','
name|'fake_contents'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reload_called'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'data'
op|'='
name|'utils'
op|'.'
name|'read_cached_file'
op|'('
string|'"/this/is/a/fake"'
op|','
name|'cache_data'
op|','
nl|'\n'
name|'reload_func'
op|'='
name|'test_reload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|','
name|'fake_contents'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'reload_called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_generate_password
dedent|''
name|'def'
name|'test_generate_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'utils'
op|'.'
name|'generate_password'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
name|'if'
name|'c'
name|'in'
string|"'0123456789'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'abcdefghijklmnopqrstuvwxyz'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
op|'['
name|'c'
name|'for'
name|'c'
name|'in'
name|'password'
nl|'\n'
name|'if'
name|'c'
name|'in'
string|"'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_file_as_root
dedent|''
name|'def'
name|'test_read_file_as_root'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'1'
op|']'
op|'=='
string|"'bad'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ProcessExecutionError'
newline|'\n'
dedent|''
name|'return'
string|"'fakecontents'"
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'contents'
op|'='
name|'utils'
op|'.'
name|'read_file_as_root'
op|'('
string|"'good'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'contents'
op|','
string|"'fakecontents'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FileNotFound'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'read_file_as_root'
op|','
string|"'bad'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_strcmp_const_time
dedent|''
name|'def'
name|'test_strcmp_const_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'strcmp_const_time'
op|'('
string|"'abc123'"
op|','
string|"'abc123'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'strcmp_const_time'
op|'('
string|"'a'"
op|','
string|"'aaaaa'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'utils'
op|'.'
name|'strcmp_const_time'
op|'('
string|"'ABC123'"
op|','
string|"'abc123'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_temporary_chown
dedent|''
name|'def'
name|'test_temporary_chown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_execute
indent|'        '
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'args'
op|'['
number|'0'
op|']'
op|'=='
string|"'chown'"
op|':'
newline|'\n'
indent|'                '
name|'fake_execute'
op|'.'
name|'uid'
op|'='
name|'args'
op|'['
number|'1'
op|']'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
name|'with'
name|'tempfile'
op|'.'
name|'NamedTemporaryFile'
op|'('
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'            '
name|'with'
name|'utils'
op|'.'
name|'temporary_chown'
op|'('
name|'f'
op|'.'
name|'name'
op|','
name|'owner_uid'
op|'='
number|'2'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_execute'
op|'.'
name|'uid'
op|','
name|'os'
op|'.'
name|'getuid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsUUIDLikeTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'IsUUIDLikeTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|assertUUIDLike
indent|'    '
name|'def'
name|'assertUUIDLike'
op|'('
name|'self'
op|','
name|'val'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'result'
op|'='
name|'utils'
op|'.'
name|'is_uuid_like'
op|'('
name|'val'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_good_uuid
dedent|''
name|'def'
name|'test_good_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
newline|'\n'
name|'self'
op|'.'
name|'assertUUIDLike'
op|'('
name|'val'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_integer_passed
dedent|''
name|'def'
name|'test_integer_passed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertUUIDLike'
op|'('
name|'val'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_non_uuid_string_passed
dedent|''
name|'def'
name|'test_non_uuid_string_passed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
string|"'foo-fooo'"
newline|'\n'
name|'self'
op|'.'
name|'assertUUIDLike'
op|'('
name|'val'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_non_uuid_string_passed2
dedent|''
name|'def'
name|'test_non_uuid_string_passed2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'val'
op|'='
string|"'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'"
newline|'\n'
name|'self'
op|'.'
name|'assertUUIDLike'
op|'('
name|'val'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_gen_valid_uuid
dedent|''
name|'def'
name|'test_gen_valid_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertUUIDLike'
op|'('
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MonkeyPatchTestCase
dedent|''
dedent|''
name|'class'
name|'MonkeyPatchTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for utils.monkey_patch()."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'MonkeyPatchTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'example_package'
op|'='
string|"'nova.tests.monkey_patch_example.'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
nl|'\n'
name|'monkey_patch'
op|'='
name|'True'
op|','
nl|'\n'
name|'monkey_patch_modules'
op|'='
op|'['
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a'"
op|'+'
string|"':'"
nl|'\n'
op|'+'
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_decorator'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_monkey_patch
dedent|''
name|'def'
name|'test_monkey_patch'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'monkey_patch'
op|'('
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|'='
op|'['
op|']'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_a'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
name|'import'
name|'example_b'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_a'
op|'.'
name|'example_function_a'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleA'
op|'='
name|'example_a'
op|'.'
name|'ExampleClassA'
op|'('
op|')'
newline|'\n'
name|'exampleA'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_a'
op|'='
name|'exampleA'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_a'
op|','
number|'8'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'Example function'"
op|','
name|'example_b'
op|'.'
name|'example_function_b'
op|'('
op|')'
op|')'
newline|'\n'
name|'exampleB'
op|'='
name|'example_b'
op|'.'
name|'ExampleClassB'
op|'('
op|')'
newline|'\n'
name|'exampleB'
op|'.'
name|'example_method'
op|'('
op|')'
newline|'\n'
name|'ret_b'
op|'='
name|'exampleB'
op|'.'
name|'example_method_add'
op|'('
number|'3'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret_b'
op|','
number|'8'
op|')'
newline|'\n'
name|'package_a'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_a.'"
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'package_a'
op|'+'
string|"'example_function_a'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'package_a'
op|'+'
string|"'ExampleClassA.example_method_add'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'package_b'
op|'='
name|'self'
op|'.'
name|'example_package'
op|'+'
string|"'example_b.'"
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'package_b'
op|'+'
string|"'example_function_b'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'package_b'
op|'+'
string|"'ExampleClassB.example_method_add'"
nl|'\n'
name|'in'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'monkey_patch_example'
op|'.'
name|'CALLED_FUNCTION'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecationTest
dedent|''
dedent|''
name|'class'
name|'DeprecationTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DeprecationTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_warn_deprecated_class
name|'def'
name|'fake_warn_deprecated_class'
op|'('
name|'cls'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'warn'
op|'='
op|'('
string|"'class'"
op|','
name|'cls'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_warn_deprecated_function
dedent|''
name|'def'
name|'fake_warn_deprecated_function'
op|'('
name|'func'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'warn'
op|'='
op|'('
string|"'function'"
op|','
name|'func'
op|','
name|'msg'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'warn_deprecated_class'"
op|','
nl|'\n'
name|'fake_warn_deprecated_class'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'warn_deprecated_function'"
op|','
nl|'\n'
name|'fake_warn_deprecated_function'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'warn'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_function_no_message
dedent|''
name|'def'
name|'test_deprecated_function_no_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|test_function
indent|'        '
name|'def'
name|'test_function'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'decorated'
op|'='
name|'utils'
op|'.'
name|'deprecated'
op|'('
op|')'
op|'('
name|'test_function'
op|')'
newline|'\n'
nl|'\n'
name|'decorated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'function'"
op|','
name|'test_function'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_function_with_message
dedent|''
name|'def'
name|'test_deprecated_function_with_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|test_function
indent|'        '
name|'def'
name|'test_function'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'decorated'
op|'='
name|'utils'
op|'.'
name|'deprecated'
op|'('
string|"'string'"
op|')'
op|'('
name|'test_function'
op|')'
newline|'\n'
nl|'\n'
name|'decorated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'function'"
op|','
name|'test_function'
op|','
string|"'string'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_class_no_message
dedent|''
name|'def'
name|'test_deprecated_class_no_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'TestClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_class_with_message
dedent|''
name|'def'
name|'test_deprecated_class_with_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
string|"'string'"
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'TestClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"'string'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_classmethod_no_message
dedent|''
name|'def'
name|'test_deprecated_classmethod_no_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|class_method
name|'def'
name|'class_method'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'TestClass'
op|'.'
name|'class_method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_classmethod_with_message
dedent|''
name|'def'
name|'test_deprecated_classmethod_with_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
string|"'string'"
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|class_method
name|'def'
name|'class_method'
op|'('
name|'cls'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'TestClass'
op|'.'
name|'class_method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"'string'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_staticmethod_no_message
dedent|''
name|'def'
name|'test_deprecated_staticmethod_no_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|static_method
name|'def'
name|'static_method'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'TestClass'
op|'.'
name|'static_method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_staticmethod_with_message
dedent|''
name|'def'
name|'test_deprecated_staticmethod_with_message'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
string|"'string'"
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|static_method
name|'def'
name|'static_method'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'TestClass'
op|'.'
name|'static_method'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"'string'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deprecated_instancemethod
dedent|''
name|'def'
name|'test_deprecated_instancemethod'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'utils'
op|'.'
name|'deprecated'
op|'('
op|')'
newline|'\n'
DECL|class|TestClass
name|'class'
name|'TestClass'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|instance_method
indent|'            '
name|'def'
name|'instance_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# Instantiate the class...'
nl|'\n'
dedent|''
dedent|''
name|'obj'
op|'='
name|'TestClass'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
op|'('
string|"'class'"
op|','
name|'TestClass'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reset warn...'
nl|'\n'
name|'self'
op|'.'
name|'warn'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# Call the instance method...'
nl|'\n'
name|'obj'
op|'.'
name|'instance_method'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that did *not* generate a warning'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'warn'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_service_is_up
dedent|''
name|'def'
name|'test_service_is_up'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fts_func'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'fromtimestamp'
newline|'\n'
name|'fake_now'
op|'='
number|'1000'
newline|'\n'
name|'down_time'
op|'='
number|'5'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'service_down_time'
op|'='
name|'down_time'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'utcnow'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Up (equal)'
nl|'\n'
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fts_func'
op|'('
name|'fake_now'
op|')'
op|')'
newline|'\n'
name|'service'
op|'='
op|'{'
string|"'updated_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|')'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
comment|'# Up'
nl|'\n'
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fts_func'
op|'('
name|'fake_now'
op|')'
op|')'
newline|'\n'
name|'service'
op|'='
op|'{'
string|"'updated_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|'+'
number|'1'
op|')'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|'+'
number|'1'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
comment|'# Down'
nl|'\n'
name|'utils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fts_func'
op|'('
name|'fake_now'
op|')'
op|')'
newline|'\n'
name|'service'
op|'='
op|'{'
string|"'updated_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|'-'
number|'1'
op|')'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'fts_func'
op|'('
name|'fake_now'
op|'-'
name|'down_time'
op|'-'
number|'1'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'utils'
op|'.'
name|'service_is_up'
op|'('
name|'service'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xhtml_escape
dedent|''
name|'def'
name|'test_xhtml_escape'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&quot;foo&quot;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'\'"foo"\''
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'&apos;foo&apos;'"
op|','
name|'utils'
op|'.'
name|'xhtml_escape'
op|'('
string|'"\'foo\'"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hash_file
dedent|''
name|'def'
name|'test_hash_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
string|"'Mary had a little lamb, its fleece as white as snow'"
newline|'\n'
name|'flo'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'data'
op|')'
newline|'\n'
name|'h1'
op|'='
name|'utils'
op|'.'
name|'hash_file'
op|'('
name|'flo'
op|')'
newline|'\n'
name|'h2'
op|'='
name|'hashlib'
op|'.'
name|'sha1'
op|'('
name|'data'
op|')'
op|'.'
name|'hexdigest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'h1'
op|','
name|'h2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Iso8601TimeTest
dedent|''
dedent|''
name|'class'
name|'Iso8601TimeTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_instaneous
indent|'    '
name|'def'
name|'_instaneous'
op|'('
name|'self'
op|','
name|'timestamp'
op|','
name|'yr'
op|','
name|'mon'
op|','
name|'day'
op|','
name|'hr'
op|','
name|'min'
op|','
name|'sec'
op|','
name|'micro'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'year'
op|','
name|'yr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'month'
op|','
name|'mon'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'day'
op|','
name|'day'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'hour'
op|','
name|'hr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'minute'
op|','
name|'min'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'second'
op|','
name|'sec'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'timestamp'
op|'.'
name|'microsecond'
op|','
name|'micro'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_test
dedent|''
name|'def'
name|'_do_test'
op|'('
name|'self'
op|','
name|'str'
op|','
name|'yr'
op|','
name|'mon'
op|','
name|'day'
op|','
name|'hr'
op|','
name|'min'
op|','
name|'sec'
op|','
name|'micro'
op|','
name|'shift'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'DAY_SECONDS'
op|'='
number|'24'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'timestamp'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instaneous'
op|'('
name|'timestamp'
op|','
name|'yr'
op|','
name|'mon'
op|','
name|'day'
op|','
name|'hr'
op|','
name|'min'
op|','
name|'sec'
op|','
name|'micro'
op|')'
newline|'\n'
name|'offset'
op|'='
name|'timestamp'
op|'.'
name|'tzinfo'
op|'.'
name|'utcoffset'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'offset'
op|'.'
name|'seconds'
op|'+'
name|'offset'
op|'.'
name|'days'
op|'*'
name|'DAY_SECONDS'
op|','
name|'shift'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zulu
dedent|''
name|'def'
name|'test_zulu'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07Z'"
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'0'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zulu_micros
dedent|''
name|'def'
name|'test_zulu_micros'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07.123Z'"
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'123000'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_offset_east
dedent|''
name|'def'
name|'test_offset_east'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07+04:30'"
newline|'\n'
name|'offset'
op|'='
number|'4.5'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'0'
op|','
name|'offset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_offset_east_micros
dedent|''
name|'def'
name|'test_offset_east_micros'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07.42+04:30'"
newline|'\n'
name|'offset'
op|'='
number|'4.5'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'420000'
op|','
name|'offset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_offset_west
dedent|''
name|'def'
name|'test_offset_west'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07-05:30'"
newline|'\n'
name|'offset'
op|'='
op|'-'
number|'5.5'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'0'
op|','
name|'offset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_offset_west_micros
dedent|''
name|'def'
name|'test_offset_west_micros'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07.654321-05:30'"
newline|'\n'
name|'offset'
op|'='
op|'-'
number|'5.5'
op|'*'
number|'60'
op|'*'
number|'60'
newline|'\n'
name|'self'
op|'.'
name|'_do_test'
op|'('
name|'str'
op|','
number|'2012'
op|','
number|'02'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'7'
op|','
number|'654321'
op|','
name|'offset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compare
dedent|''
name|'def'
name|'test_compare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zulu'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T20:53:07'"
op|')'
newline|'\n'
name|'east'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T20:53:07-01:00'"
op|')'
newline|'\n'
name|'west'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T20:53:07+01:00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'east'
op|'>'
name|'west'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'east'
op|'>'
name|'zulu'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'zulu'
op|'>'
name|'west'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compare_micros
dedent|''
name|'def'
name|'test_compare_micros'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zulu'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T20:53:07.6544'"
op|')'
newline|'\n'
name|'east'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T19:53:07.654321-01:00'"
op|')'
newline|'\n'
name|'west'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
string|"'2012-02-14T21:53:07.655+01:00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'east'
op|'<'
name|'west'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'east'
op|'<'
name|'zulu'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'zulu'
op|'<'
name|'west'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zulu_roundtrip
dedent|''
name|'def'
name|'test_zulu_roundtrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07Z'"
newline|'\n'
name|'zulu'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'zulu'
op|'.'
name|'tzinfo'
op|','
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'UTC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'zulu'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_east_roundtrip
dedent|''
name|'def'
name|'test_east_roundtrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07-07:00'"
newline|'\n'
name|'east'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'east'
op|'.'
name|'tzinfo'
op|'.'
name|'tzname'
op|'('
name|'None'
op|')'
op|','
string|"'-07:00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'east'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_west_roundtrip
dedent|''
name|'def'
name|'test_west_roundtrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07+11:30'"
newline|'\n'
name|'west'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'west'
op|'.'
name|'tzinfo'
op|'.'
name|'tzname'
op|'('
name|'None'
op|')'
op|','
string|"'+11:30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'west'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_now_roundtrip
dedent|''
name|'def'
name|'test_now_roundtrip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
name|'utils'
op|'.'
name|'isotime'
op|'('
op|')'
newline|'\n'
name|'now'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'now'
op|'.'
name|'tzinfo'
op|','
name|'iso8601'
op|'.'
name|'iso8601'
op|'.'
name|'UTC'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'utils'
op|'.'
name|'isotime'
op|'('
name|'now'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_zulu_normalize
dedent|''
name|'def'
name|'test_zulu_normalize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07Z'"
newline|'\n'
name|'zulu'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'normed'
op|'='
name|'utils'
op|'.'
name|'normalize_time'
op|'('
name|'zulu'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instaneous'
op|'('
name|'normed'
op|','
number|'2012'
op|','
number|'2'
op|','
number|'14'
op|','
number|'20'
op|','
number|'53'
op|','
number|'07'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_east_normalize
dedent|''
name|'def'
name|'test_east_normalize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07-07:00'"
newline|'\n'
name|'east'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'normed'
op|'='
name|'utils'
op|'.'
name|'normalize_time'
op|'('
name|'east'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instaneous'
op|'('
name|'normed'
op|','
number|'2012'
op|','
number|'2'
op|','
number|'15'
op|','
number|'03'
op|','
number|'53'
op|','
number|'07'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_west_normalize
dedent|''
name|'def'
name|'test_west_normalize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'str'
op|'='
string|"'2012-02-14T20:53:07+21:00'"
newline|'\n'
name|'west'
op|'='
name|'utils'
op|'.'
name|'parse_isotime'
op|'('
name|'str'
op|')'
newline|'\n'
name|'normed'
op|'='
name|'utils'
op|'.'
name|'normalize_time'
op|'('
name|'west'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_instaneous'
op|'('
name|'normed'
op|','
number|'2012'
op|','
number|'2'
op|','
number|'13'
op|','
number|'23'
op|','
number|'53'
op|','
number|'07'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestGreenLocks
dedent|''
dedent|''
name|'class'
name|'TestGreenLocks'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_concurrent_green_lock_succeeds
indent|'    '
name|'def'
name|'test_concurrent_green_lock_succeeds'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify spawn_n greenthreads with two locks run concurrently.\n\n        This succeeds with spawn but fails with spawn_n because lockfile\n        gets the same thread id for both spawn_n threads. Our workaround\n        of using the GreenLockFile will work even if the issue is fixed.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
name|'False'
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'tempdir'
op|'('
op|')'
name|'as'
name|'tmpdir'
op|':'
newline|'\n'
nl|'\n'
DECL|function|locka
indent|'            '
name|'def'
name|'locka'
op|'('
name|'wait'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'a'
op|'='
name|'utils'
op|'.'
name|'GreenLockFile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|"'a'"
op|')'
op|')'
newline|'\n'
name|'a'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'wait'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'a'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'completed'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|lockb
dedent|''
name|'def'
name|'lockb'
op|'('
name|'wait'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'b'
op|'='
name|'utils'
op|'.'
name|'GreenLockFile'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'tmpdir'
op|','
string|"'b'"
op|')'
op|')'
newline|'\n'
name|'b'
op|'.'
name|'acquire'
op|'('
op|')'
newline|'\n'
name|'wait'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'b'
op|'.'
name|'release'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'wait1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'wait2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'='
name|'greenpool'
op|'.'
name|'GreenPool'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'locka'
op|','
name|'wait1'
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'spawn_n'
op|'('
name|'lockb'
op|','
name|'wait2'
op|')'
newline|'\n'
name|'wait2'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'wait1'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'pool'
op|'.'
name|'waitall'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'completed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestLockCleanup
dedent|''
dedent|''
name|'class'
name|'TestLockCleanup'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""unit tests for utils.cleanup_file_locks()"""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestLockCleanup'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'pid'
op|'='
name|'os'
op|'.'
name|'getpid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'dead_pid'
op|'='
name|'self'
op|'.'
name|'_get_dead_pid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tempdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'lock_path'
op|'='
name|'self'
op|'.'
name|'tempdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'lock_name'
op|'='
string|"'nova-testlock'"
newline|'\n'
name|'self'
op|'.'
name|'lock_file'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
nl|'\n'
name|'self'
op|'.'
name|'lock_name'
op|'+'
string|"'.lock'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostname'
op|'='
name|'socket'
op|'.'
name|'gethostname'
op|'('
op|')'
newline|'\n'
name|'print'
name|'self'
op|'.'
name|'pid'
op|','
name|'self'
op|'.'
name|'dead_pid'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'OSError'
name|'as'
op|'('
name|'errno'
op|','
name|'strerror'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'errno'
op|'=='
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'self'
op|'.'
name|'tempdir'
op|')'
newline|'\n'
name|'super'
op|'('
name|'TestLockCleanup'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_dead_pid
dedent|''
name|'def'
name|'_get_dead_pid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""get a pid for a process that does not exist"""'
newline|'\n'
nl|'\n'
name|'candidate_pid'
op|'='
name|'self'
op|'.'
name|'pid'
op|'-'
number|'1'
newline|'\n'
name|'while'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
string|"'/proc'"
op|','
name|'str'
op|'('
name|'candidate_pid'
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'candidate_pid'
op|'-='
number|'1'
newline|'\n'
name|'if'
name|'candidate_pid'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
number|'0'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'candidate_pid'
newline|'\n'
nl|'\n'
DECL|member|_get_sentinel_name
dedent|''
name|'def'
name|'_get_sentinel_name'
op|'('
name|'self'
op|','
name|'hostname'
op|','
name|'pid'
op|','
name|'thread'
op|'='
string|"'MainThread'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
nl|'\n'
string|"'%s.%s-%d'"
op|'%'
op|'('
name|'hostname'
op|','
name|'thread'
op|','
name|'pid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_sentinel
dedent|''
name|'def'
name|'_create_sentinel'
op|'('
name|'self'
op|','
name|'hostname'
op|','
name|'pid'
op|','
name|'thread'
op|'='
string|"'MainThread'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'name'
op|'='
name|'self'
op|'.'
name|'_get_sentinel_name'
op|'('
name|'hostname'
op|','
name|'pid'
op|','
name|'thread'
op|')'
newline|'\n'
name|'open'
op|'('
name|'name'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'return'
name|'name'
newline|'\n'
nl|'\n'
DECL|member|test_clean_stale_locks
dedent|''
name|'def'
name|'test_clean_stale_locks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify locks for dead processes are cleaned up"""'
newline|'\n'
nl|'\n'
comment|"# create sentinels for two processes, us and a 'dead' one"
nl|'\n'
comment|'# no active lock'
nl|'\n'
name|'sentinel1'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|')'
newline|'\n'
name|'sentinel2'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'dead_pid'
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'cleanup_file_locks'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel2'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clean_stale_locks_active
dedent|''
name|'def'
name|'test_clean_stale_locks_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify locks for dead processes are cleaned with an active lock """'
newline|'\n'
nl|'\n'
comment|"# create sentinels for two processes, us and a 'dead' one"
nl|'\n'
comment|'# create an active lock for us'
nl|'\n'
name|'sentinel1'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|')'
newline|'\n'
name|'sentinel2'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'dead_pid'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'link'
op|'('
name|'sentinel1'
op|','
name|'self'
op|'.'
name|'lock_file'
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'cleanup_file_locks'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel2'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clean_stale_with_threads
dedent|''
name|'def'
name|'test_clean_stale_with_threads'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify locks for multiple threads are cleaned up """'
newline|'\n'
nl|'\n'
comment|"# create sentinels for four threads in our process, and a 'dead'"
nl|'\n'
comment|'# process.  no lock.'
nl|'\n'
name|'sentinel1'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-1'"
op|')'
newline|'\n'
name|'sentinel2'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-2'"
op|')'
newline|'\n'
name|'sentinel3'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-3'"
op|')'
newline|'\n'
name|'sentinel4'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-4'"
op|')'
newline|'\n'
name|'sentinel5'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'dead_pid'
op|','
nl|'\n'
string|"'Default-1'"
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'cleanup_file_locks'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel4'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel5'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel2'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel3'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clean_stale_with_threads_active
dedent|''
name|'def'
name|'test_clean_stale_with_threads_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify locks for multiple threads are cleaned up """'
newline|'\n'
nl|'\n'
comment|"# create sentinels for four threads in our process, and a 'dead'"
nl|'\n'
comment|'# process'
nl|'\n'
name|'sentinel1'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-1'"
op|')'
newline|'\n'
name|'sentinel2'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-2'"
op|')'
newline|'\n'
name|'sentinel3'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-3'"
op|')'
newline|'\n'
name|'sentinel4'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'pid'
op|','
string|"'Default-4'"
op|')'
newline|'\n'
name|'sentinel5'
op|'='
name|'self'
op|'.'
name|'_create_sentinel'
op|'('
name|'self'
op|'.'
name|'hostname'
op|','
name|'self'
op|'.'
name|'dead_pid'
op|','
nl|'\n'
string|"'Default-1'"
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'link'
op|'('
name|'sentinel1'
op|','
name|'self'
op|'.'
name|'lock_file'
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'cleanup_file_locks'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel4'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'sentinel5'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel1'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel2'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel3'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'sentinel4'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'self'
op|'.'
name|'lock_file'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_clean_bogus_lockfiles
dedent|''
name|'def'
name|'test_clean_bogus_lockfiles'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify lockfiles are cleaned """'
newline|'\n'
nl|'\n'
name|'lock1'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
string|"'nova-testlock1.lock'"
op|')'
newline|'\n'
name|'lock2'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
string|"'nova-testlock2.lock'"
op|')'
newline|'\n'
name|'lock3'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'lock_path'
op|','
string|"'testlock3.lock'"
op|')'
newline|'\n'
nl|'\n'
name|'open'
op|'('
name|'lock1'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'open'
op|'('
name|'lock2'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'open'
op|'('
name|'lock3'
op|','
string|"'wb'"
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'utils'
op|'.'
name|'cleanup_file_locks'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'lock1'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'lock2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'lock3'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'lock3'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AuditPeriodTest
dedent|''
dedent|''
name|'class'
name|'AuditPeriodTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'#a fairly random time to test with'
nl|'\n'
name|'self'
op|'.'
name|'test_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
name|'second'
op|'='
number|'23'
op|','
nl|'\n'
name|'minute'
op|'='
number|'12'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'set_time_override'
op|'('
name|'override_time'
op|'='
name|'self'
op|'.'
name|'test_time'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'utils'
op|'.'
name|'clear_time_override'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'AuditPeriodTest'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour
dedent|''
name|'def'
name|'test_hour'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_before_current
dedent|''
name|'def'
name|'test_hour_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'10'
op|','
nl|'\n'
name|'hour'
op|'='
number|'8'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hour_with_offset_after_current
dedent|''
name|'def'
name|'test_hour_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'hour@30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'minute'
op|'='
number|'30'
op|','
nl|'\n'
name|'hour'
op|'='
number|'7'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day
dedent|''
name|'def'
name|'test_day'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_before_current
dedent|''
name|'def'
name|'test_day_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'6'
op|','
nl|'\n'
name|'day'
op|'='
number|'5'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_day_with_offset_after_current
dedent|''
name|'def'
name|'test_day_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'day@10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'3'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'hour'
op|'='
number|'10'
op|','
nl|'\n'
name|'day'
op|'='
number|'4'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month
dedent|''
name|'def'
name|'test_month'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_before_current
dedent|''
name|'def'
name|'test_month_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'2'
op|','
nl|'\n'
name|'month'
op|'='
number|'3'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_month_with_offset_after_current
dedent|''
name|'def'
name|'test_month_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'month@15'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'15'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year
dedent|''
name|'def'
name|'test_year'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'1'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_before_current
dedent|''
name|'def'
name|'test_year_with_offset_before_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'2'
op|','
nl|'\n'
name|'year'
op|'='
number|'2012'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_year_with_offset_after_current
dedent|''
name|'def'
name|'test_year_with_offset_after_current'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'begin'
op|','
name|'end'
op|'='
name|'utils'
op|'.'
name|'last_completed_audit_period'
op|'('
name|'unit'
op|'='
string|"'year@6'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'begin'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2010'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'end'
op|','
name|'datetime'
op|'.'
name|'datetime'
op|'('
nl|'\n'
name|'day'
op|'='
number|'1'
op|','
nl|'\n'
name|'month'
op|'='
number|'6'
op|','
nl|'\n'
name|'year'
op|'='
number|'2011'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MiniXPathTestCase
name|'class'
name|'MiniXPathTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_tolerates_nones
indent|'    '
name|'def'
name|'test_tolerates_nones'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
name|'None'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_does_select
dedent|''
name|'def'
name|'test_does_select'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
string|"'a_1'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'a_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
name|'None'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|']'
op|','
nl|'\n'
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
name|'None'
op|'}'
op|']'
op|','
nl|'\n'
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|'}'
op|']'
op|','
nl|'\n'
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'c'"
op|':'
string|"'c_1'"
op|'}'
op|','
op|'{'
string|"'c'"
op|':'
string|"'c_2'"
op|'}'
op|']'
op|','
nl|'\n'
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'c_1'"
op|','
string|"'c_2'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c/d"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"c/a/b/d"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"i/r/t"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flattens_lists
dedent|''
name|'def'
name|'test_flattens_lists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
op|','
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'['
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bad_xpath
dedent|''
name|'def'
name|'test_bad_xpath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"/a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"/a/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"//"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"//a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"a//a"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"a//a/"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Error'
op|','
name|'xp'
op|','
op|'['
op|']'
op|','
string|'"a/a/"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_real_failure1
dedent|''
name|'def'
name|'test_real_failure1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Real world failure case...'
nl|'\n'
comment|"#  We weren't coping when the input was a Dictionary instead of a List"
nl|'\n'
comment|'# This led to test_accepts_dictionaries'
nl|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'inst'
op|'='
op|'{'
string|"'fixed_ip'"
op|':'
op|'{'
string|"'floating_ips'"
op|':'
op|'['
op|'{'
string|"'address'"
op|':'
string|"'1.2.3.4'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.0.3'"
op|'}'
op|','
nl|'\n'
string|"'hostname'"
op|':'
string|"''"
op|'}'
newline|'\n'
nl|'\n'
name|'private_ips'
op|'='
name|'xp'
op|'('
name|'inst'
op|','
string|"'fixed_ip/address'"
op|')'
newline|'\n'
name|'public_ips'
op|'='
name|'xp'
op|'('
name|'inst'
op|','
string|"'fixed_ip/floating_ips/address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'192.168.0.3'"
op|']'
op|','
name|'private_ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'1.2.3.4'"
op|']'
op|','
name|'public_ips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_accepts_dictionaries
dedent|''
name|'def'
name|'test_accepts_dictionaries'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xp'
op|'='
name|'utils'
op|'.'
name|'minixpath_select'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
op|'{'
string|"'b'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|'}'
op|','
op|'{'
string|"'b'"
op|':'
op|'['
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|','
number|'5'
op|','
number|'6'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b/c"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'input'
op|'='
op|'{'
string|"'a'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|','
op|'{'
string|"'b'"
op|':'
string|"'b_1'"
op|'}'
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
op|'['
string|"'b_1'"
op|']'
op|','
name|'xp'
op|'('
name|'input'
op|','
string|'"a/b"'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

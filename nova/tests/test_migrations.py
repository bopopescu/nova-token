begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010-2011 OpenStack Foundation'
nl|'\n'
comment|'# Copyright 2012-2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTests for database migrations. This test case reads the configuration\nfile test_migrations.conf for database connection settings\nto use in the tests. For each connection found in the config file,\nthe test case runs a series of test cases to ensure that migrations work\nproperly both upgrading and downgrading, and that no data loss occurs\nif possible.\n\nThere are also "opportunistic" tests for both mysql and postgresql in here,\nwhich allows testing against all 3 databases (sqlite in memory, mysql, pg) in\na properly configured unit test environment.\n\nFor the opportunistic testing you need to set up a db named \'openstack_citest\'\nwith user \'openstack_citest\' and password \'openstack_citest\' on localhost.\nThe test will then use that db and u/p combo to run the tests.\n\nFor postgres on Ubuntu this can be done with the following commands:\n\nsudo -u postgres psql\npostgres=# create user openstack_citest with createdb login password\n      \'openstack_citest\';\npostgres=# create database openstack_citest with owner openstack_citest;\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'collections'
newline|'\n'
name|'import'
name|'commands'
newline|'\n'
name|'import'
name|'ConfigParser'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
name|'import'
name|'repository'
newline|'\n'
name|'import'
name|'netaddr'
newline|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'dialects'
name|'import'
name|'postgresql'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'dialects'
name|'import'
name|'sqlite'
newline|'\n'
name|'import'
name|'sqlalchemy'
op|'.'
name|'exc'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'lockutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_connect_string
name|'def'
name|'_get_connect_string'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Try to get a connection with a very specific set of values, if we get\n    these then we\'ll run the tests, otherwise they are skipped\n    """'
newline|'\n'
name|'if'
name|'backend'
op|'=='
string|'"postgres"'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
string|'"postgresql+psycopg2"'
newline|'\n'
dedent|''
name|'elif'
name|'backend'
op|'=='
string|'"mysql"'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
string|'"mysql+mysqldb"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
string|'"Unrecognized backend: \'%s\'"'
op|'%'
name|'backend'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
string|'"%(backend)s://%(user)s:%(passwd)s@localhost/%(database)s"'
nl|'\n'
op|'%'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_backend_avail
dedent|''
name|'def'
name|'_is_backend_avail'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'connect_uri'
op|'='
name|'_get_connect_string'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_uri'
op|')'
newline|'\n'
name|'connection'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# intentionally catch all to handle exceptions even if we don't"
nl|'\n'
comment|'# have any backend code loaded.'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_have_mysql
dedent|''
dedent|''
name|'def'
name|'_have_mysql'
op|'('
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'present'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MYSQL_PRESENT'"
op|')'
newline|'\n'
name|'if'
name|'present'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_is_backend_avail'
op|'('
string|"'mysql'"
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'present'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"''"
op|','
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_have_postgresql
dedent|''
name|'def'
name|'_have_postgresql'
op|'('
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'present'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_POSTGRESQL_PRESENT'"
op|')'
newline|'\n'
name|'if'
name|'present'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_is_backend_avail'
op|'('
string|"'postgres'"
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'present'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"''"
op|','
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_table
dedent|''
name|'def'
name|'get_table'
op|'('
name|'engine'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Returns an sqlalchemy table dynamically from db.\n\n    Needed because the models don\'t work for us in migrations\n    as models will be far out of sync with the current data."""'
newline|'\n'
name|'metadata'
op|'='
name|'sqlalchemy'
op|'.'
name|'schema'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'.'
name|'bind'
op|'='
name|'engine'
newline|'\n'
name|'return'
name|'sqlalchemy'
op|'.'
name|'Table'
op|'('
name|'name'
op|','
name|'metadata'
op|','
name|'autoload'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_mysql_connection_info
dedent|''
name|'def'
name|'get_mysql_connection_info'
op|'('
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'database'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'loc_pieces'
op|'='
name|'conn_pieces'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'loc_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
name|'auth_pieces'
op|'='
name|'loc_pieces'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'user'
op|'='
name|'auth_pieces'
op|'['
number|'0'
op|']'
newline|'\n'
name|'password'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'auth_pieces'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'auth_pieces'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'password'
op|'='
string|'"-p\\"%s\\""'
op|'%'
name|'auth_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pgsql_connection_info
dedent|''
name|'def'
name|'get_pgsql_connection_info'
op|'('
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'database'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'loc_pieces'
op|'='
name|'conn_pieces'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'loc_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'auth_pieces'
op|'='
name|'loc_pieces'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'user'
op|'='
name|'auth_pieces'
op|'['
number|'0'
op|']'
newline|'\n'
name|'password'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'auth_pieces'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'auth_pieces'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommonTestsMixIn
dedent|''
name|'class'
name|'CommonTestsMixIn'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""These tests are shared between TestNovaMigrations and\n    TestBaremetalMigrations.\n\n    BaseMigrationTestCase is effectively an abstract class, meant to be derived\n    from and not directly tested against; that\'s why these `test_` methods need\n    to be on a Mixin, so that they won\'t be picked up as valid tests for\n    BaseMigrationTestCase.\n    """'
newline|'\n'
DECL|member|test_walk_versions
name|'def'
name|'test_walk_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'snake_walk'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mysql_opportunistically
dedent|''
dedent|''
name|'def'
name|'test_mysql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_mysql_opportunistically'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mysql_connect_fail
dedent|''
name|'def'
name|'test_mysql_connect_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can trigger a mysql connection failure and we fail\n        gracefully to ensure we don\'t break people without mysql\n        """'
newline|'\n'
name|'if'
name|'_is_backend_avail'
op|'('
string|"'mysql'"
op|','
string|'"openstack_cifail"'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Shouldn\'t have connected"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_postgresql_opportunistically
dedent|''
dedent|''
name|'def'
name|'test_postgresql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_postgresql_opportunistically'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_postgresql_connect_fail
dedent|''
name|'def'
name|'test_postgresql_connect_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can trigger a postgres connection failure and we fail\n        gracefully to ensure we don\'t break people without postgres\n        """'
newline|'\n'
name|'if'
name|'_is_backend_avail'
op|'('
string|"'postgres'"
op|','
string|'"openstack_cifail"'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Shouldn\'t have connected"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseMigrationTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'BaseMigrationTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class fort testing migrations and migration utils."""'
newline|'\n'
DECL|variable|USER
name|'USER'
op|'='
name|'None'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
name|'None'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'test_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'snake_walk'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'migration'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Load test databases from the config file. Only do this'
nl|'\n'
comment|'# once. No need to re-run this on each test...'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'config_path is %s'"
op|'%'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cp'
op|'='
name|'ConfigParser'
op|'.'
name|'RawConfigParser'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'defaults'
op|'='
name|'cp'
op|'.'
name|'defaults'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'defaults'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
op|'='
name|'value'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'snake_walk'
op|'='
name|'cp'
op|'.'
name|'getboolean'
op|'('
string|"'walk_style'"
op|','
string|"'snake_walk'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConfigParser'
op|'.'
name|'ParsingError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to read test_migrations.conf config "'
nl|'\n'
string|'"file. Got error: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to find test_migrations.conf config "'
nl|'\n'
string|'"file."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'engines'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'test_databases'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'engines'
op|'['
name|'key'
op|']'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|'# We start each test case with a completely blank slate.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_reset_databases'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# We destroy the test data store between each test case,'
nl|'\n'
comment|'# and recreate it, which ensures that we have no side-effects'
nl|'\n'
comment|'# from the tests'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_reset_databases'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute_cmd
dedent|''
name|'def'
name|'execute_cmd'
op|'('
name|'self'
op|','
name|'cmd'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'status'
op|','
name|'output'
op|'='
name|'commands'
op|'.'
name|'getstatusoutput'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'status'
op|','
nl|'\n'
string|'"Failed to run: %s\\n%s"'
op|'%'
op|'('
name|'cmd'
op|','
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'lockutils'
op|'.'
name|'synchronized'
op|'('
string|"'pgadmin'"
op|','
string|"'nova-'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_reset_pg
name|'def'
name|'_reset_pg'
op|'('
name|'self'
op|','
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_pgsql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGPASSWORD'"
op|']'
op|'='
name|'password'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGUSER'"
op|']'
op|'='
name|'user'
newline|'\n'
comment|"# note(boris-42): We must create and drop database, we can't"
nl|'\n'
comment|'# drop database which we have connected to, so for such'
nl|'\n'
comment|'# operations there is a special database template1.'
nl|'\n'
name|'sqlcmd'
op|'='
op|'('
string|'"psql -w -U %(user)s -h %(host)s -c"'
nl|'\n'
string|'" \'%(sql)s\' -d template1"'
op|')'
newline|'\n'
nl|'\n'
name|'sql'
op|'='
op|'('
string|'"drop database if exists %(database)s;"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'droptable'
op|'='
name|'sqlcmd'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'droptable'
op|')'
newline|'\n'
nl|'\n'
name|'sql'
op|'='
op|'('
string|'"create database %(database)s;"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'createtable'
op|'='
name|'sqlcmd'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'createtable'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGPASSWORD'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGUSER'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reset_databases
dedent|''
name|'def'
name|'_reset_databases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'conn_string'
op|'='
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
newline|'\n'
name|'conn_pieces'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'conn_string'
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'if'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'sqlite'"
op|')'
op|':'
newline|'\n'
comment|'# We can just delete the SQLite database, which is'
nl|'\n'
comment|'# the easiest and cleanest solution'
nl|'\n'
indent|'                '
name|'db_path'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'db_path'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'db_path'
op|')'
newline|'\n'
comment|'# No need to recreate the SQLite DB. SQLite will'
nl|'\n'
comment|"# create it for us if it's not there..."
nl|'\n'
dedent|''
dedent|''
name|'elif'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'mysql'"
op|')'
op|':'
newline|'\n'
comment|'# We can execute the MySQL client to destroy and re-create'
nl|'\n'
comment|'# the MYSQL database, which is easier and less error-prone'
nl|'\n'
comment|'# than using SQLAlchemy to do this via MetaData...trust me.'
nl|'\n'
indent|'                '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'sql'
op|'='
op|'('
string|'"drop database if exists %(database)s; "'
nl|'\n'
string|'"create database %(database)s;"'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'cmd'
op|'='
op|'('
string|'"mysql -u \\"%(user)s\\" %(password)s -h %(host)s "'
nl|'\n'
string|'"-e \\"%(sql)s\\""'
op|')'
op|'%'
name|'locals'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'postgresql'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_reset_pg'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_mysql_opportunistically
dedent|''
dedent|''
dedent|''
name|'def'
name|'_test_mysql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that table creation on mysql only builds InnoDB tables'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'_have_mysql'
op|'('
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"mysql not available"'
op|')'
newline|'\n'
comment|"# add this to the global lists to make reset work with it, it's removed"
nl|'\n'
comment|'# automatically in tearDown so no need to clean it up here.'
nl|'\n'
dedent|''
name|'connect_string'
op|'='
name|'_get_connect_string'
op|'('
string|'"mysql"'
op|','
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
newline|'\n'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'connect_string'
op|')'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_string'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|'='
name|'engine'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|'='
name|'connect_string'
newline|'\n'
nl|'\n'
comment|'# build a fully populated mysql database with all the tables'
nl|'\n'
name|'self'
op|'.'
name|'_reset_databases'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'connection'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
comment|'# sanity check'
nl|'\n'
name|'total'
op|'='
name|'connection'
op|'.'
name|'execute'
op|'('
string|'"SELECT count(*) "'
nl|'\n'
string|'"from information_schema.TABLES "'
nl|'\n'
string|'"where TABLE_SCHEMA=\'%(database)s\'"'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'total'
op|'.'
name|'scalar'
op|'('
op|')'
op|'>'
number|'0'
op|','
string|'"No tables found. Wrong schema?"'
op|')'
newline|'\n'
nl|'\n'
name|'noninnodb'
op|'='
name|'connection'
op|'.'
name|'execute'
op|'('
string|'"SELECT count(*) "'
nl|'\n'
string|'"from information_schema.TABLES "'
nl|'\n'
string|'"where TABLE_SCHEMA=\'%(database)s\' "'
nl|'\n'
string|'"and ENGINE!=\'InnoDB\' "'
nl|'\n'
string|'"and TABLE_NAME!=\'migrate_version\'"'
op|'%'
nl|'\n'
name|'locals'
op|'('
op|')'
op|')'
newline|'\n'
name|'count'
op|'='
name|'noninnodb'
op|'.'
name|'scalar'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'count'
op|','
number|'0'
op|','
string|'"%d non InnoDB tables created"'
op|'%'
name|'count'
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_postgresql_opportunistically
dedent|''
name|'def'
name|'_test_postgresql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test postgresql database migration walk'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'_have_postgresql'
op|'('
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"postgresql not available"'
op|')'
newline|'\n'
comment|"# add this to the global lists to make reset work with it, it's removed"
nl|'\n'
comment|'# automatically in tearDown so no need to clean it up here.'
nl|'\n'
dedent|''
name|'connect_string'
op|'='
name|'_get_connect_string'
op|'('
string|'"postgres"'
op|','
name|'self'
op|'.'
name|'USER'
op|','
nl|'\n'
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_string'
op|')'
newline|'\n'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'connect_string'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|'='
name|'engine'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|'='
name|'connect_string'
newline|'\n'
nl|'\n'
comment|'# build a fully populated postgresql database with all the tables'
nl|'\n'
name|'self'
op|'.'
name|'_reset_databases'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_walk_versions
dedent|''
name|'def'
name|'_walk_versions'
op|'('
name|'self'
op|','
name|'engine'
op|'='
name|'None'
op|','
name|'snake_walk'
op|'='
name|'False'
op|','
name|'downgrade'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'# Determine latest version script from the repo, then'
nl|'\n'
comment|'# upgrade from 1 through to the latest, with no data'
nl|'\n'
comment|'# in the databases. This just checks that the schema itself'
nl|'\n'
comment|'# upgrades successfully.'
nl|'\n'
nl|'\n'
comment|'# Place the database under version control'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'version_control'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|','
nl|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'INIT_VERSION'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'latest version is %s'"
op|'%'
name|'self'
op|'.'
name|'REPOSITORY'
op|'.'
name|'latest'
op|')'
newline|'\n'
name|'versions'
op|'='
name|'range'
op|'('
name|'self'
op|'.'
name|'INIT_VERSION'
op|'+'
number|'1'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|'.'
name|'latest'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'version'
name|'in'
name|'versions'
op|':'
newline|'\n'
comment|'# upgrade -> downgrade -> upgrade'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'snake_walk'
op|':'
newline|'\n'
indent|'                '
name|'downgraded'
op|'='
name|'self'
op|'.'
name|'_migrate_down'
op|'('
nl|'\n'
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|','
name|'with_data'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'downgraded'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'downgrade'
op|':'
newline|'\n'
comment|'# Now walk it back down to 0 from the latest, testing'
nl|'\n'
comment|'# the downgrade paths.'
nl|'\n'
indent|'            '
name|'for'
name|'version'
name|'in'
name|'reversed'
op|'('
name|'versions'
op|')'
op|':'
newline|'\n'
comment|'# downgrade -> upgrade -> downgrade'
nl|'\n'
indent|'                '
name|'downgraded'
op|'='
name|'self'
op|'.'
name|'_migrate_down'
op|'('
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'snake_walk'
name|'and'
name|'downgraded'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_migrate_down'
op|'('
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_down
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_migrate_down'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'downgrade'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|','
name|'version'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(sirp): some migrations, namely release-level'
nl|'\n'
comment|"# migrations, don't support a downgrade."
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): `version` is what we're downgrading to (i.e. the 'target'"
nl|'\n'
comment|'# version). So if we have any downgrade checks, they need to be run for'
nl|'\n'
comment|'# the previous (higher numbered) migration.'
nl|'\n'
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'            '
name|'post_downgrade'
op|'='
name|'getattr'
op|'('
nl|'\n'
name|'self'
op|','
string|'"_post_downgrade_%03d"'
op|'%'
op|'('
name|'version'
op|'+'
number|'1'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'post_downgrade'
op|':'
newline|'\n'
indent|'                '
name|'post_downgrade'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_migrate_up
dedent|''
name|'def'
name|'_migrate_up'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""migrate up to a new version of the db.\n\n        We allow for data insertion and post checks at every\n        migration version with special _pre_upgrade_### and\n        _check_### functions in the main test.\n        """'
newline|'\n'
comment|"# NOTE(sdague): try block is here because it's impossible to debug"
nl|'\n'
comment|'# where a failed data migration happens otherwise'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'None'
newline|'\n'
name|'pre_upgrade'
op|'='
name|'getattr'
op|'('
nl|'\n'
name|'self'
op|','
string|'"_pre_upgrade_%03d"'
op|'%'
name|'version'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'pre_upgrade'
op|':'
newline|'\n'
indent|'                    '
name|'data'
op|'='
name|'pre_upgrade'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'upgrade'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'                '
name|'check'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"_check_%03d"'
op|'%'
name|'version'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'check'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'('
name|'engine'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
string|'"Failed to migrate to version %s on engine %s"'
op|'%'
nl|'\n'
op|'('
name|'version'
op|','
name|'engine'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNovaMigrations
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestNovaMigrations'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'CommonTestsMixIn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test sqlalchemy-migrate migrations."""'
newline|'\n'
DECL|variable|USER
name|'USER'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
string|'"openstack_citest"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNovaMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'test_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNovaMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'migration'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration'
op|'='
name|'__import__'
op|'('
string|"'nova.db.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'INIT_VERSION'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
name|'self'
op|'.'
name|'migration'
op|'.'
name|'INIT_VERSION'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'migration_api'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'temp'
op|'='
name|'__import__'
op|'('
string|"'nova.db.sqlalchemy.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'versioning_api'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'temp'
op|'.'
name|'versioning_api'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_134
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_134'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'1d739808-d7ec-4944-b252-f8363e119755'"
op|','
nl|'\n'
string|"'mac'"
op|':'
string|"'00:00:00:00:00:01'"
op|','
nl|'\n'
string|"'start_period'"
op|':'
name|'now'
op|','
nl|'\n'
string|"'last_refreshed'"
op|':'
name|'now'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
number|'10'
op|')'
op|','
nl|'\n'
string|"'bw_in'"
op|':'
number|'100000'
op|','
nl|'\n'
string|"'bw_out'"
op|':'
number|'200000'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'1d739808-d7ec-4944-b252-f8363e119756'"
op|','
nl|'\n'
string|"'mac'"
op|':'
string|"'2a:f2:48:31:c1:60'"
op|','
nl|'\n'
string|"'start_period'"
op|':'
name|'now'
op|','
nl|'\n'
string|"'last_refreshed'"
op|':'
name|'now'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
number|'20'
op|')'
op|','
nl|'\n'
string|"'bw_in'"
op|':'
number|'1000000000'
op|','
nl|'\n'
string|"'bw_out'"
op|':'
number|'200000000'
op|','
nl|'\n'
op|'}'
op|','
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'3'
op|','
nl|'\n'
comment|'# This is intended to be the same as above.'
nl|'\n'
string|"'uuid'"
op|':'
string|"'1d739808-d7ec-4944-b252-f8363e119756'"
op|','
nl|'\n'
string|"'mac'"
op|':'
string|"'00:00:00:00:00:02'"
op|','
nl|'\n'
string|"'start_period'"
op|':'
name|'now'
op|','
nl|'\n'
string|"'last_refreshed'"
op|':'
name|'now'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
number|'30'
op|')'
op|','
nl|'\n'
string|"'bw_in'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'bw_out'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'bw_usage_cache'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bw_usage_cache'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'bw_usage_cache'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_134
dedent|''
name|'def'
name|'_check_134'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bw_usage_cache'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bw_usage_cache'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Checks if both columns have been successfuly created.'
nl|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'last_ctr_in'"
op|','
name|'bw_usage_cache'
op|'.'
name|'c'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'last_ctr_out'"
op|','
name|'bw_usage_cache'
op|'.'
name|'c'
op|')'
newline|'\n'
nl|'\n'
comment|'# Checks if all rows have been inserted.'
nl|'\n'
name|'bw_items'
op|'='
name|'bw_usage_cache'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bw_items'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'bw'
op|'='
name|'bw_usage_cache'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'bw_usage_cache'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# New columns have 'NULL' as default value."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bw'
op|'['
string|"'last_ctr_in'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'bw'
op|'['
string|"'last_ctr_out'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|'['
number|'0'
op|']'
op|'['
string|"'mac'"
op|']'
op|','
name|'bw'
op|'['
string|"'mac'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 141, update migrations instance uuid'
nl|'\n'
DECL|member|_pre_upgrade_141
dedent|''
name|'def'
name|'_pre_upgrade_141'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
nl|'\n'
op|'}'
newline|'\n'
name|'migrations'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'migrations'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'migrations'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'result'
op|'='
name|'migrations'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'data'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|"'id'"
op|']'
op|'='
name|'result'
op|'.'
name|'inserted_primary_key'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_141
dedent|''
name|'def'
name|'_check_141'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'migrations'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'migrations'"
op|')'
newline|'\n'
name|'row'
op|'='
name|'migrations'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'migrations'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'data'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
comment|'# Check that change to String(36) went alright'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'row'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 146, availability zone transition'
nl|'\n'
DECL|member|_pre_upgrade_146
dedent|''
name|'def'
name|'_pre_upgrade_146'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'custom_az'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'name'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'aggregates'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregates'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'aggregates'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'data'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
comment|"# NOTE(sdague) it's important you don't insert keys by value in"
nl|'\n'
comment|"# postgresql, because its autoincrement counter won't get updated"
nl|'\n'
name|'data'
op|'['
string|"'id'"
op|']'
op|'='
name|'result'
op|'.'
name|'inserted_primary_key'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_146
dedent|''
name|'def'
name|'_check_146'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aggregate_md'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_metadata'"
op|')'
newline|'\n'
name|'md'
op|'='
name|'aggregate_md'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'aggregate_md'
op|'.'
name|'c'
op|'.'
name|'aggregate_id'
op|'=='
name|'data'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|'['
string|"'availability_zone'"
op|']'
op|','
name|'md'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_146
dedent|''
name|'def'
name|'_post_downgrade_146'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
comment|'# Downgrade should delete availability_zone aggregate_metadata entries'
nl|'\n'
indent|'        '
name|'aggregate_md'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_metadata'"
op|')'
newline|'\n'
name|'num_azs'
op|'='
name|'aggregate_md'
op|'.'
name|'count'
op|'('
op|')'
op|'.'
name|'where'
op|'('
nl|'\n'
name|'aggregate_md'
op|'.'
name|'c'
op|'.'
name|'key'
op|'=='
string|"'availability_zone'"
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'scalar'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'num_azs'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 147, availability zone transition for services'
nl|'\n'
DECL|member|_pre_upgrade_147
dedent|''
name|'def'
name|'_pre_upgrade_147'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'az'
op|'='
string|"'test_zone'"
newline|'\n'
name|'host1'
op|'='
string|"'compute-host1'"
newline|'\n'
name|'host2'
op|'='
string|"'compute-host2'"
newline|'\n'
comment|'# start at id == 2 because we already inserted one'
nl|'\n'
name|'data'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'host'"
op|':'
name|'host1'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'availability_zone'"
op|':'
name|'az'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'host'"
op|':'
string|"'sched-host'"
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-scheduler'"
op|','
string|"'topic'"
op|':'
string|"'scheduler'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'availability_zone'"
op|':'
string|"'ignore_me'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'host'"
op|':'
name|'host2'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'availability_zone'"
op|':'
name|'az'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'services'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'services'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'services'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_pre_upgrade_147_no_duplicate_aggregate_hosts'
op|'('
name|'engine'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_147_no_duplicate_aggregate_hosts
dedent|''
name|'def'
name|'_pre_upgrade_147_no_duplicate_aggregate_hosts'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'engine'
op|'.'
name|'execute'
op|'('
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_metadata'"
op|')'
op|'.'
name|'insert'
op|'('
op|')'
op|','
op|'['
nl|'\n'
op|'{'
string|"'aggregate_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'key'"
op|':'
string|"'availability_zone'"
op|','
nl|'\n'
string|"'value'"
op|':'
string|"'custom_az'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_hosts'"
op|')'
op|'.'
name|'insert'
op|'('
op|')'
op|','
op|'['
nl|'\n'
op|'{'
string|"'aggregate_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'compute-host3'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'get_table'
op|'('
name|'engine'
op|','
string|"'services'"
op|')'
op|'.'
name|'insert'
op|'('
op|')'
op|','
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'99'
op|','
string|"'host'"
op|':'
string|"'compute-host3'"
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'availability_zone'"
op|':'
string|"'custom_az'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_147
dedent|''
name|'def'
name|'_check_147'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aggregate_md'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_metadata'"
op|')'
newline|'\n'
name|'aggregate_hosts'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_hosts'"
op|')'
newline|'\n'
comment|'# NOTE(sdague): hard coded to id == 2, because we added to'
nl|'\n'
comment|'# aggregate_metadata previously'
nl|'\n'
name|'for'
name|'item'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'md'
op|'='
name|'aggregate_md'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'aggregate_md'
op|'.'
name|'c'
op|'.'
name|'aggregate_id'
op|'=='
number|'2'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'if'
name|'item'
op|'['
string|"'binary'"
op|']'
op|'=='
string|'"nova-compute"'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'item'
op|'['
string|"'availability_zone'"
op|']'
op|','
name|'md'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'host'
op|'='
name|'aggregate_hosts'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'aggregate_hosts'
op|'.'
name|'c'
op|'.'
name|'aggregate_id'
op|'=='
number|'2'
nl|'\n'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|'['
string|"'host'"
op|']'
op|','
name|'data'
op|'['
number|'0'
op|']'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(sdague): id 3 is just non-existent'
nl|'\n'
name|'host'
op|'='
name|'aggregate_hosts'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'aggregate_hosts'
op|'.'
name|'c'
op|'.'
name|'aggregate_id'
op|'=='
number|'3'
nl|'\n'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_147_no_duplicate_aggregate_hosts'
op|'('
name|'engine'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_147_no_duplicate_aggregate_hosts
dedent|''
name|'def'
name|'_check_147_no_duplicate_aggregate_hosts'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'aggregate_hosts'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'aggregate_hosts'"
op|')'
newline|'\n'
name|'agg1_hosts'
op|'='
op|'['
name|'h'
op|'['
string|"'host'"
op|']'
name|'for'
name|'h'
name|'in'
name|'aggregate_hosts'
op|'.'
name|'select'
op|'('
nl|'\n'
name|'aggregate_hosts'
op|'.'
name|'c'
op|'.'
name|'aggregate_id'
op|'=='
number|'1'
nl|'\n'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'compute-host3'"
op|']'
op|','
name|'agg1_hosts'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 149, changes IPAddr storage format'
nl|'\n'
DECL|member|_pre_upgrade_149
dedent|''
name|'def'
name|'_pre_upgrade_149'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'provider_fw_rules'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'provider_fw_rules'"
op|')'
newline|'\n'
name|'console_pools'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'console_pools'"
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'provider_fw_rules'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"127.0.0.1/30"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/16"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/32"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"2001:db8::1:2/48"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"::1/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:0000:0000:2013:0000:6535:abcd:ef11/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:1020:0000:2013:0000:6535:abcd:ef11/128"'
op|'}'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'console_pools'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'128.100.100.100'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'2002:2002:2002:2002:2002:2002:2002:2002'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'::1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'0000:0000:0000:2013:0000:6535:abcd:ef11'"
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'provider_fw_rules'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|'['
string|"'provider_fw_rules'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'pool'
name|'in'
name|'data'
op|'['
string|"'console_pools'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'engine'
op|'.'
name|'execute'
op|'('
name|'console_pools'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'pool'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_149
dedent|''
name|'def'
name|'_check_149'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'provider_fw_rules'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'provider_fw_rules'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'provider_fw_rules'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'iplist'
op|'='
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'x'
op|'['
string|"'cidr'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
name|'data'
op|'['
string|"'provider_fw_rules'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'row'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPNetwork'
op|'('
name|'row'
op|'['
string|"'cidr'"
op|']'
op|')'
op|')'
op|','
name|'iplist'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'console_pools'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'console_pools'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'console_pools'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'iplist'
op|'='
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'x'
op|'['
string|"'address'"
op|']'
op|')'
op|')'
op|','
nl|'\n'
name|'data'
op|'['
string|"'console_pools'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'row'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'str'
op|'('
name|'netaddr'
op|'.'
name|'IPAddress'
op|'('
name|'row'
op|'['
string|"'address'"
op|']'
op|')'
op|')'
op|','
name|'iplist'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 151 - changes period_beginning and period_ending to DateTime'
nl|'\n'
DECL|member|_pre_upgrade_151
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_151'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'task_log'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'task_log'"
op|')'
newline|'\n'
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'task_name'"
op|':'
string|"'The name of the task'"
op|','
nl|'\n'
string|"'state'"
op|':'
string|"'The state of the task'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'compute-host1'"
op|','
nl|'\n'
string|"'period_beginning'"
op|':'
name|'str'
op|'('
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2013'
op|','
number|'02'
op|','
number|'11'
op|')'
op|')'
op|','
nl|'\n'
string|"'period_ending'"
op|':'
name|'str'
op|'('
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2013'
op|','
number|'02'
op|','
number|'12'
op|')'
op|')'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'The task_log message'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'result'
op|'='
name|'task_log'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'data'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'data'
op|'['
string|"'id'"
op|']'
op|'='
name|'result'
op|'.'
name|'inserted_primary_key'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_151
dedent|''
name|'def'
name|'_check_151'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'task_log'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'task_log'"
op|')'
newline|'\n'
name|'row'
op|'='
name|'task_log'
op|'.'
name|'select'
op|'('
name|'task_log'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'data'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'row'
op|'['
string|"'period_beginning'"
op|']'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'row'
op|'['
string|"'period_ending'"
op|']'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'data'
op|'['
string|"'period_beginning'"
op|']'
op|','
name|'str'
op|'('
name|'row'
op|'['
string|"'period_beginning'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'data'
op|'['
string|"'period_ending'"
op|']'
op|','
name|'str'
op|'('
name|'row'
op|'['
string|"'period_ending'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 152 - convert deleted from boolean to int'
nl|'\n'
DECL|member|_pre_upgrade_152
dedent|''
name|'def'
name|'_pre_upgrade_152'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host1'
op|'='
string|"'compute-host1'"
newline|'\n'
name|'host2'
op|'='
string|"'compute-host2'"
newline|'\n'
comment|'# NOTE(sdague): start at #4 because services data already in table'
nl|'\n'
comment|'# from 147'
nl|'\n'
name|'services_data'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'4'
op|','
string|"'host'"
op|':'
name|'host1'
op|','
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'topic'"
op|':'
string|"'compute'"
op|','
string|"'deleted'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'5'
op|','
string|"'host'"
op|':'
name|'host1'
op|','
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
string|"'topic'"
op|':'
string|"'compute'"
op|','
string|"'deleted'"
op|':'
name|'True'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'volumes_data'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'first'"
op|','
string|"'host'"
op|':'
name|'host1'
op|','
string|"'deleted'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'second'"
op|','
string|"'host'"
op|':'
name|'host2'
op|','
string|"'deleted'"
op|':'
name|'True'
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'services'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'services'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'services'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'services_data'
op|')'
newline|'\n'
nl|'\n'
name|'volumes'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'volumes'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'volumes'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'volumes_data'
op|')'
newline|'\n'
name|'return'
name|'dict'
op|'('
name|'services'
op|'='
name|'services_data'
op|','
name|'volumes'
op|'='
name|'volumes_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_152
dedent|''
name|'def'
name|'_check_152'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'services'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'services'"
op|')'
newline|'\n'
name|'service'
op|'='
name|'services'
op|'.'
name|'select'
op|'('
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'4'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'service'
op|'.'
name|'deleted'
op|')'
newline|'\n'
name|'service'
op|'='
name|'services'
op|'.'
name|'select'
op|'('
name|'services'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'5'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'service'
op|'.'
name|'id'
op|','
name|'service'
op|'.'
name|'deleted'
op|')'
newline|'\n'
nl|'\n'
name|'volumes'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'volumes'"
op|')'
newline|'\n'
name|'volume'
op|'='
name|'volumes'
op|'.'
name|'select'
op|'('
name|'volumes'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
string|'"first"'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'""'
op|','
name|'volume'
op|'.'
name|'deleted'
op|')'
newline|'\n'
name|'volume'
op|'='
name|'volumes'
op|'.'
name|'select'
op|'('
name|'volumes'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
string|'"second"'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'volume'
op|'.'
name|'id'
op|','
name|'volume'
op|'.'
name|'deleted'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 153, copy flavor information into system_metadata'
nl|'\n'
DECL|member|_pre_upgrade_153
dedent|''
name|'def'
name|'_pre_upgrade_153'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_types'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'10'
op|','
name|'name'
op|'='
string|"'type1'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"1"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'11'
op|','
name|'name'
op|'='
string|"'type2'"
op|','
name|'memory_mb'
op|'='
number|'512'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'5'
op|','
name|'flavorid'
op|'='
string|'"2"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.5'
op|','
name|'vcpu_weight'
op|'='
number|'2'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'12'
op|','
name|'name'
op|'='
string|"'type3'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"3"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'13'
op|','
name|'name'
op|'='
string|"'type4'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"4"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
name|'None'
op|','
name|'disabled'
op|'='
name|'True'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'14'
op|','
name|'name'
op|'='
string|"'type5'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"5"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'True'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'fake_instances'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m153-uuid1'"
op|','
name|'instance_type_id'
op|'='
number|'10'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m153-uuid2'"
op|','
name|'instance_type_id'
op|'='
number|'11'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m153-uuid3'"
op|','
name|'instance_type_id'
op|'='
number|'12'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m153-uuid4'"
op|','
name|'instance_type_id'
op|'='
number|'13'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
comment|'# NOTE(danms): no use of type5'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instances'"
op|')'
newline|'\n'
name|'instance_types'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_types'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'instance_types'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'fake_types'
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'instances'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'fake_instances'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'fake_types'
op|','
name|'fake_instances'
newline|'\n'
nl|'\n'
DECL|member|_check_153
dedent|''
name|'def'
name|'_check_153'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_types'
op|','
name|'fake_instances'
op|'='
name|'data'
newline|'\n'
comment|'# NOTE(danms): Fetch all the tables and data from scratch after change'
nl|'\n'
name|'instances'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instances'"
op|')'
newline|'\n'
name|'instance_types'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_types'"
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_system_metadata'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Collect all system metadata, indexed by instance_uuid'
nl|'\n'
name|'metadata'
op|'='
name|'collections'
op|'.'
name|'defaultdict'
op|'('
name|'dict'
op|')'
newline|'\n'
name|'for'
name|'values'
name|'in'
name|'sys_meta'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'metadata'
op|'['
name|'values'
op|'['
string|"'instance_uuid'"
op|']'
op|']'
op|'['
name|'values'
op|'['
string|"'key'"
op|']'
op|']'
op|'='
name|'values'
op|'['
string|"'value'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Taken from nova/compute/api.py'
nl|'\n'
dedent|''
name|'instance_type_props'
op|'='
op|'['
string|"'id'"
op|','
string|"'name'"
op|','
string|"'memory_mb'"
op|','
string|"'vcpus'"
op|','
nl|'\n'
string|"'root_gb'"
op|','
string|"'ephemeral_gb'"
op|','
string|"'flavorid'"
op|','
nl|'\n'
string|"'swap'"
op|','
string|"'rxtx_factor'"
op|','
string|"'vcpu_weight'"
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'fake_instances'
op|':'
newline|'\n'
indent|'            '
name|'inst_sys_meta'
op|'='
name|'metadata'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
newline|'\n'
name|'inst_type'
op|'='
name|'fake_types'
op|'['
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
op|'-'
number|'10'
op|']'
newline|'\n'
name|'for'
name|'prop'
name|'in'
name|'instance_type_props'
op|':'
newline|'\n'
indent|'                '
name|'prop_name'
op|'='
string|"'instance_type_%s'"
op|'%'
name|'prop'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'prop_name'
op|','
name|'inst_sys_meta'
op|')'
newline|'\n'
name|'if'
name|'prop'
op|'=='
string|'"vcpu_weight"'
op|':'
newline|'\n'
comment|'# NOTE(danms) vcpu_weight can be NULL'
nl|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_sys_meta'
op|'['
name|'prop_name'
op|']'
op|','
nl|'\n'
name|'inst_type'
op|'['
name|'prop'
op|']'
name|'and'
name|'str'
op|'('
name|'inst_type'
op|'['
name|'prop'
op|']'
op|')'
nl|'\n'
name|'or'
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'inst_sys_meta'
op|'['
name|'prop_name'
op|']'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'inst_type'
op|'['
name|'prop'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 154, add shadow tables for deleted data'
nl|'\n'
comment|'# There are 53 shadow tables but we only test one'
nl|'\n'
comment|'# There are additional tests in test_db_api.py'
nl|'\n'
DECL|member|_pre_upgrade_154
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_154'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'schema'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'engine'
op|')'
newline|'\n'
name|'table_names'
op|'='
name|'meta'
op|'.'
name|'tables'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'for'
name|'table_name'
name|'in'
name|'table_names'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'table_name'
op|'.'
name|'startswith'
op|'('
string|'"_shadow"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_154
dedent|''
dedent|''
name|'def'
name|'_check_154'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta'
op|'='
name|'sqlalchemy'
op|'.'
name|'schema'
op|'.'
name|'MetaData'
op|'('
op|')'
newline|'\n'
name|'meta'
op|'.'
name|'reflect'
op|'('
name|'engine'
op|')'
newline|'\n'
name|'table_names'
op|'='
name|'set'
op|'('
name|'meta'
op|'.'
name|'tables'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'for'
name|'table_name'
name|'in'
name|'table_names'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'table_name'
op|'.'
name|'startswith'
op|'('
string|'"shadow_"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'shadow_name'
op|'='
name|'table_name'
newline|'\n'
name|'base_name'
op|'='
name|'table_name'
op|'.'
name|'replace'
op|'('
string|'"shadow_"'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'base_name'
op|','
name|'table_names'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'base_name'
op|'='
name|'table_name'
newline|'\n'
name|'shadow_name'
op|'='
string|'"shadow_"'
op|'+'
name|'table_name'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'shadow_name'
op|','
name|'table_names'
op|')'
newline|'\n'
dedent|''
name|'shadow_table'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
name|'shadow_name'
op|')'
newline|'\n'
name|'base_table'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
name|'base_name'
op|')'
newline|'\n'
name|'base_columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'shadow_columns'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'base_table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'                '
name|'base_columns'
op|'.'
name|'append'
op|'('
name|'column'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'column'
name|'in'
name|'shadow_table'
op|'.'
name|'columns'
op|':'
newline|'\n'
indent|'                '
name|'shadow_columns'
op|'.'
name|'append'
op|'('
name|'column'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'ii'
op|','
name|'base_column'
name|'in'
name|'enumerate'
op|'('
name|'base_columns'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'shadow_column'
op|'='
name|'shadow_columns'
op|'['
name|'ii'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'base_column'
op|'.'
name|'name'
op|','
name|'shadow_column'
op|'.'
name|'name'
op|')'
newline|'\n'
comment|'# NullType needs a special case.  We end up with NullType on sqlite'
nl|'\n'
comment|'# where bigint is not defined.'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'base_column'
op|'.'
name|'type'
op|','
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'NullType'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'shadow_column'
op|'.'
name|'type'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'NullType'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Identical types do not test equal because sqlalchemy does not'
nl|'\n'
comment|'# override __eq__, but if we stringify them then they do.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'base_column'
op|'.'
name|'type'
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'shadow_column'
op|'.'
name|'type'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 156 - introduce CIDR type'
nl|'\n'
DECL|member|_pre_upgrade_156
dedent|''
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_156'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
comment|'# assume the same data as from 149'
nl|'\n'
indent|'        '
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'provider_fw_rules'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"127.0.0.1/30"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/16"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/32"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"2001:db8::1:2/48"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"::1/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:0000:0000:2013:0000:6535:abcd:ef11/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:1020:0000:2013:0000:6535:abcd:ef11/128"'
op|'}'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'console_pools'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'128.100.100.100'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'2002:2002:2002:2002:2002:2002:2002:2002'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'::1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'0000:0000:0000:2013:0000:6535:abcd:ef11'"
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_156
dedent|''
name|'def'
name|'_check_156'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
comment|'# recheck the 149 data'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_check_149'
op|'('
name|'engine'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_158
dedent|''
name|'def'
name|'_pre_upgrade_158'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'networks'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'networks'"
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'vlan'"
op|':'
number|'1'
op|','
string|"'deleted'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'vlan'"
op|':'
number|'1'
op|','
string|"'deleted'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'vlan'"
op|':'
number|'1'
op|','
string|"'deleted'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'item'
name|'in'
name|'data'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'item'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_158
dedent|''
name|'def'
name|'_check_158'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'networks'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'networks'"
op|')'
newline|'\n'
name|'rows'
op|'='
name|'networks'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'networks'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'networks'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_159
dedent|''
name|'def'
name|'_pre_upgrade_159'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'{'
nl|'\n'
string|"'provider_fw_rules'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"127.0.0.1/30"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/16"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"128.128.128.128/32"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"2001:db8::1:2/48"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'1234'
op|','
string|"'cidr'"
op|':'
string|'"::1/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:0000:0000:2013:0000:6535:abcd:ef11/64"'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
string|"'from_port'"
op|':'
number|'1234'
op|','
string|"'to_port'"
op|':'
number|'1234'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|'"0000:1020:0000:2013:0000:6535:abcd:ef11/128"'
op|'}'
op|','
nl|'\n'
op|']'
op|','
nl|'\n'
string|"'console_pools'"
op|':'
nl|'\n'
op|'['
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'128.100.100.100'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'2002:2002:2002:2002:2002:2002:2002:2002'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'::1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'0000:0000:0000:2013:0000:6535:abcd:ef11'"
op|'}'
nl|'\n'
op|']'
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
comment|'# migration 159 - revert ip column size'
nl|'\n'
DECL|member|_check_159
dedent|''
name|'def'
name|'_check_159'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dialect'
op|'='
name|'engine'
op|'.'
name|'url'
op|'.'
name|'get_dialect'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(maurosr): check if column length is 39 again (it currently makes'
nl|'\n'
comment|'# sense only for mysql)'
nl|'\n'
name|'if'
name|'dialect'
name|'not'
name|'in'
op|'['
name|'postgresql'
op|'.'
name|'dialect'
op|','
name|'sqlite'
op|'.'
name|'dialect'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'console_pools'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'console_pools'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console_pools'
op|'.'
name|'columns'
op|'['
string|"'address'"
op|']'
op|'.'
name|'type'
op|'.'
name|'length'
op|','
number|'39'
op|')'
newline|'\n'
comment|'# recheck the 149 data'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_149'
op|'('
name|'engine'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_159
dedent|''
name|'def'
name|'_post_downgrade_159'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dialect'
op|'='
name|'engine'
op|'.'
name|'url'
op|'.'
name|'get_dialect'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(maurosr): check if column length is 43 again (it currently makes'
nl|'\n'
comment|'# sense only for mysql)'
nl|'\n'
name|'if'
name|'dialect'
name|'not'
name|'in'
op|'['
name|'postgresql'
op|'.'
name|'dialect'
op|','
name|'sqlite'
op|'.'
name|'dialect'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'console_pools'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'console_pools'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console_pools'
op|'.'
name|'columns'
op|'['
string|"'address'"
op|']'
op|'.'
name|'type'
op|'.'
name|'length'
op|','
number|'43'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 160, fix system_metadata NULL deleted entries to be 0'
nl|'\n'
DECL|member|_pre_upgrade_160
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_160'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instances'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m160-uuid1'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m160-uuid2'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m160-uuid3'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'fake_sys_meta'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'instance_uuid'
op|'='
string|"'m160-uuid1'"
op|','
name|'key'
op|'='
string|"'foo'"
op|','
name|'value'
op|'='
string|"'bar'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_uuid'
op|'='
string|"'m160-uuid2'"
op|','
name|'key'
op|'='
string|"'foo2'"
op|','
name|'value'
op|'='
string|"'bar2'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'instance_uuid'
op|'='
string|"'m160-uuid3'"
op|','
name|'key'
op|'='
string|"'foo3'"
op|','
name|'value'
op|'='
string|"'bar3'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instances'"
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_system_metadata'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'instances'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'fake_instances'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create the metadata entries'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'sm'
name|'in'
name|'fake_sys_meta'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'sys_meta'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'sm'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'sm'
op|'['
string|"'id'"
op|']'
op|'='
name|'result'
op|'.'
name|'inserted_primary_key'
op|'['
number|'0'
op|']'
newline|'\n'
name|'data'
op|'['
name|'sm'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'sm'
newline|'\n'
nl|'\n'
comment|"# Make sure the entries in the DB for 'deleted' are None."
nl|'\n'
dedent|''
name|'our_ids'
op|'='
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'sys_meta'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'sys_meta'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'in_'
op|'('
name|'our_ids'
op|')'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'list'
op|'('
name|'results'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'our_ids'
op|')'
op|','
name|'len'
op|'('
name|'results'
op|')'
op|')'
newline|'\n'
name|'for'
name|'result'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'deleted'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_160
dedent|''
name|'def'
name|'_check_160'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'our_ids'
op|'='
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_system_metadata'"
op|')'
newline|'\n'
name|'results'
op|'='
name|'sys_meta'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'sys_meta'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'in_'
op|'('
name|'our_ids'
op|')'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'list'
op|'('
name|'results'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'our_ids'
op|')'
op|','
name|'len'
op|'('
name|'results'
op|')'
op|')'
newline|'\n'
name|'for'
name|'result'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'            '
name|'the_id'
op|'='
name|'result'
op|'['
string|"'id'"
op|']'
newline|'\n'
comment|'# Make sure this is now 0.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'deleted'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
comment|'# Make sure nothing else changed.'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'data'
op|'['
name|'the_id'
op|']'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
name|'result'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 161, fix system_metadata "None" values should be NULL'
nl|'\n'
DECL|member|_pre_upgrade_161
dedent|''
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_161'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instances'
op|'='
op|'['
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'m161-uuid1'"
op|')'
op|']'
newline|'\n'
name|'sm_base'
op|'='
name|'dict'
op|'('
name|'instance_uuid'
op|'='
string|"'m161-uuid1'"
op|','
name|'value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'now'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'.'
name|'replace'
op|'('
name|'microsecond'
op|'='
number|'0'
op|')'
newline|'\n'
name|'fake_sys_meta'
op|'='
op|'['
nl|'\n'
comment|'# Should be fixed'
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_foo'"
op|','
name|'value'
op|'='
string|"'None'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_bar'"
op|','
name|'value'
op|'='
string|"'88 mph'"
op|')'
op|','
nl|'\n'
nl|'\n'
comment|'# Should be unaffected'
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_name'"
op|','
name|'value'
op|'='
string|"'None'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_flavorid'"
op|','
name|'value'
op|'='
string|"'None'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'foo'"
op|','
name|'value'
op|'='
string|"'None'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_bat'"
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'sm_base'
op|','
name|'key'
op|'='
string|"'instance_type_baz'"
op|','
name|'created_at'
op|'='
name|'now'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instances'"
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_system_metadata'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'instances'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'fake_instances'
op|')'
newline|'\n'
nl|'\n'
name|'data'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'sm'
name|'in'
name|'fake_sys_meta'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'='
name|'sys_meta'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'values'
op|'('
name|'sm'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'sm'
op|'['
string|"'id'"
op|']'
op|'='
name|'result'
op|'.'
name|'inserted_primary_key'
op|'['
number|'0'
op|']'
newline|'\n'
name|'data'
op|'['
name|'sm'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'sm'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_161
dedent|''
name|'def'
name|'_check_161'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'our_ids'
op|'='
name|'data'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_system_metadata'"
op|')'
newline|'\n'
name|'results'
op|'='
name|'sys_meta'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'sys_meta'
op|'.'
name|'c'
op|'.'
name|'id'
op|'.'
name|'in_'
op|'('
name|'our_ids'
op|')'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'list'
op|'('
name|'results'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'our_ids'
op|')'
op|','
name|'len'
op|'('
name|'results'
op|')'
op|')'
newline|'\n'
name|'for'
name|'result'
name|'in'
name|'results'
op|':'
newline|'\n'
indent|'            '
name|'the_id'
op|'='
name|'result'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'key'
op|'='
name|'result'
op|'['
string|"'key'"
op|']'
newline|'\n'
name|'value'
op|'='
name|'result'
op|'['
string|"'value'"
op|']'
newline|'\n'
name|'original'
op|'='
name|'data'
op|'['
name|'the_id'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'key'
op|'=='
string|"'instance_type_baz'"
op|':'
newline|'\n'
comment|'# Neither value nor created_at should have been altered'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'value'"
op|']'
op|','
name|'original'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'created_at'"
op|']'
op|','
name|'original'
op|'['
string|"'created_at'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
op|'['
string|"'instance_type_name'"
op|','
string|"'instance_type_flavorid'"
op|']'
op|':'
newline|'\n'
comment|'# These should not have their values changed, but should'
nl|'\n'
comment|'# have corrected created_at stamps'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'value'"
op|']'
op|','
name|'original'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'result'
op|'['
string|"'created_at'"
op|']'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'.'
name|'startswith'
op|'('
string|"'instance_type'"
op|')'
op|':'
newline|'\n'
comment|'# Values like instance_type_% should be stamped and values'
nl|'\n'
comment|"# converted from 'None' to None where appropriate"
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'value'"
op|']'
op|','
nl|'\n'
name|'None'
name|'if'
name|'original'
op|'['
string|"'value'"
op|']'
op|'=='
string|"'None'"
nl|'\n'
name|'else'
name|'original'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'result'
op|'['
string|"'created_at'"
op|']'
op|','
nl|'\n'
name|'datetime'
op|'.'
name|'datetime'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# None of the non-instance_type values should have'
nl|'\n'
comment|"# been touched. Since we didn't set created_at on any"
nl|'\n'
comment|'# of them, they should all still be None.'
nl|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'value'"
op|']'
op|','
name|'original'
op|'['
string|"'value'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
string|"'created_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_172
dedent|''
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_172'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_types'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_types'"
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'21'
op|','
name|'name'
op|'='
string|"'uc_name0'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"uc_flavor1"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'22'
op|','
name|'name'
op|'='
string|"'uc_name1'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"uc_flavor1"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'23'
op|','
name|'name'
op|'='
string|"'uc_name2'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"uc_flavor2"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
number|'24'
op|','
name|'name'
op|'='
string|"'uc_name2'"
op|','
name|'memory_mb'
op|'='
number|'128'
op|','
name|'vcpus'
op|'='
number|'1'
op|','
nl|'\n'
name|'root_gb'
op|'='
number|'10'
op|','
name|'ephemeral_gb'
op|'='
number|'0'
op|','
name|'flavorid'
op|'='
string|'"uc_flavor3"'
op|','
name|'swap'
op|'='
number|'0'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'vcpu_weight'
op|'='
number|'1'
op|','
name|'disabled'
op|'='
name|'False'
op|','
nl|'\n'
name|'is_public'
op|'='
name|'True'
op|','
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'instance_types'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_172
dedent|''
name|'def'
name|'_check_172'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_types'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_types'"
op|')'
newline|'\n'
nl|'\n'
name|'not_deleted'
op|'='
name|'instance_types'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'instance_types'
op|'.'
name|'c'
op|'.'
name|'id'
newline|'\n'
nl|'\n'
comment|'# There is only one instance_type with flavor `uc_flavor1`'
nl|'\n'
name|'uc_flavor1_rows'
op|'='
name|'instance_types'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'instance_types'
op|'.'
name|'c'
op|'.'
name|'flavorid'
op|'=='
string|"'uc_flavor1'"
op|')'
op|'.'
name|'where'
op|'('
name|'not_deleted'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'uc_flavor1_rows'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# There is only one instance_type with name `uc_name2`'
nl|'\n'
name|'uc_name2_rows'
op|'='
name|'instance_types'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'instance_types'
op|'.'
name|'c'
op|'.'
name|'name'
op|'=='
string|"'uc_name2'"
op|')'
op|'.'
name|'where'
op|'('
name|'not_deleted'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'uc_name2_rows'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# migration 173, add unique constraint to keypairs'
nl|'\n'
DECL|member|_pre_upgrade_173
dedent|''
name|'def'
name|'_pre_upgrade_173'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'created_at'
op|'='
op|'['
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
number|'0'
op|','
number|'7'
op|')'
op|']'
newline|'\n'
name|'fake_keypairs'
op|'='
op|'['
name|'dict'
op|'('
name|'name'
op|'='
string|"'key1'"
op|','
name|'user_id'
op|'='
string|"'1a'"
op|','
nl|'\n'
name|'created_at'
op|'='
name|'created_at'
op|'['
number|'0'
op|']'
op|','
nl|'\n'
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'name'
op|'='
string|"'key1'"
op|','
name|'user_id'
op|'='
string|"'1a'"
op|','
nl|'\n'
name|'created_at'
op|'='
name|'created_at'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'deleted'
op|'='
number|'0'
op|')'
op|','
nl|'\n'
name|'dict'
op|'('
name|'name'
op|'='
string|"'key1'"
op|','
name|'user_id'
op|'='
string|"'1a'"
op|','
nl|'\n'
name|'created_at'
op|'='
name|'created_at'
op|'['
number|'2'
op|']'
op|','
nl|'\n'
name|'deleted'
op|'='
number|'0'
op|')'
nl|'\n'
op|']'
newline|'\n'
name|'keypairs'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'key_pairs'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'keypairs'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'fake_keypairs'
op|')'
newline|'\n'
name|'return'
name|'fake_keypairs'
newline|'\n'
nl|'\n'
DECL|member|_check_173
dedent|''
name|'def'
name|'_check_173'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keypairs'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'key_pairs'"
op|')'
newline|'\n'
comment|'# Unique constraints are not listed in table.constraints for any db.'
nl|'\n'
comment|'# So, simply add a duplicate keypair to check if unique constraint'
nl|'\n'
comment|'# is applied to the key_pairs table or not.'
nl|'\n'
name|'insert'
op|'='
name|'keypairs'
op|'.'
name|'insert'
op|'('
op|')'
newline|'\n'
name|'duplicate_keypair'
op|'='
name|'dict'
op|'('
name|'name'
op|'='
string|"'key4'"
op|','
name|'user_id'
op|'='
string|"'4a'"
op|','
nl|'\n'
name|'created_at'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'.'
name|'now'
op|'('
op|')'
op|','
nl|'\n'
name|'deleted'
op|'='
number|'0'
op|')'
newline|'\n'
name|'insert'
op|'.'
name|'execute'
op|'('
name|'duplicate_keypair'
op|')'
newline|'\n'
comment|'# Insert again'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sqlalchemy'
op|'.'
name|'exc'
op|'.'
name|'IntegrityError'
op|','
name|'insert'
op|'.'
name|'execute'
op|','
nl|'\n'
name|'duplicate_keypair'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get all unique records'
nl|'\n'
name|'rows'
op|'='
name|'keypairs'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'keypairs'
op|'.'
name|'c'
op|'.'
name|'deleted'
op|'!='
name|'keypairs'
op|'.'
name|'c'
op|'.'
name|'id'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
comment|'# Ensure the number of unique keypairs is correct'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBaremetalMigrations
dedent|''
dedent|''
name|'class'
name|'TestBaremetalMigrations'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'CommonTestsMixIn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test sqlalchemy-migrate migrations."""'
newline|'\n'
DECL|variable|USER
name|'USER'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
string|'"openstack_baremetal_citest"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaremetalMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'test_baremetal_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'BAREMETAL_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaremetalMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'migration'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration'
op|'='
name|'__import__'
op|'('
string|"'nova.virt.baremetal.db.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'INIT_VERSION'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
name|'self'
op|'.'
name|'migration'
op|'.'
name|'INIT_VERSION'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'migration_api'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'temp'
op|'='
name|'__import__'
op|'('
string|"'nova.virt.baremetal.db.sqlalchemy.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'versioning_api'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'temp'
op|'.'
name|'versioning_api'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_002
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_002'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'key'"
op|':'
string|"'fake-key'"
op|','
string|"'image_path'"
op|':'
string|"'/dev/null'"
op|','
nl|'\n'
string|"'pxe_config_path'"
op|':'
string|"'/dev/null/'"
op|','
string|"'root_mb'"
op|':'
number|'0'
op|','
string|"'swap_mb'"
op|':'
number|'0'
op|'}'
op|']'
newline|'\n'
name|'table'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_deployments'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'table'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_002
dedent|''
name|'def'
name|'_check_002'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sqlalchemy'
op|'.'
name|'exc'
op|'.'
name|'NoSuchTableError'
op|','
nl|'\n'
name|'get_table'
op|','
name|'engine'
op|','
string|"'bm_deployments'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_004
dedent|''
name|'def'
name|'_post_downgrade_004'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'instance_name'"
op|','
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'bm_nodes'
op|'.'
name|'columns'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_005
dedent|''
name|'def'
name|'_check_005'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'columns'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'bm_nodes'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'prov_vlan_id'"
op|','
name|'columns'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'registration_status'"
op|','
name|'columns'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

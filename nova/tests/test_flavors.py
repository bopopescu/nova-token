begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Ken Pepple'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nUnit Tests for flavors code\n"""'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'session'
name|'as'
name|'sql_session'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|DEFAULT_FLAVORS
name|'DEFAULT_FLAVORS'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'1'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
string|"'name'"
op|':'
string|"'m1.tiny'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"'1'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'2'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'memory_mb'"
op|':'
number|'2048'
op|','
string|"'root_gb'"
op|':'
number|'20'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
string|"'name'"
op|':'
string|"'m1.small'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"'2'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'5'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'memory_mb'"
op|':'
number|'4096'
op|','
string|"'root_gb'"
op|':'
number|'40'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
string|"'name'"
op|':'
string|"'m1.medium'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'2'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"'3'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'memory_mb'"
op|':'
number|'8192'
op|','
string|"'root_gb'"
op|':'
number|'80'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
string|"'name'"
op|':'
string|"'m1.large'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'4'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"'4'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'memory_mb'"
op|':'
number|'16384'
op|','
string|"'root_gb'"
op|':'
number|'160'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'m1.xlarge'"
op|','
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
string|"'disabled'"
op|':'
name|'False'
op|','
string|"'vcpus'"
op|':'
number|'8'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'0'
op|','
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"'5'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'4'
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceTypeTestCase
name|'class'
name|'InstanceTypeTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test cases for flavor  code."""'
newline|'\n'
DECL|member|_generate_name
name|'def'
name|'_generate_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""return a name not in the DB."""'
newline|'\n'
name|'nonexistent_flavor'
op|'='
name|'str'
op|'('
name|'int'
op|'('
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'all_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
name|'while'
name|'nonexistent_flavor'
name|'in'
name|'all_flavors'
op|':'
newline|'\n'
indent|'            '
name|'nonexistent_flavor'
op|'+='
string|'"z"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'nonexistent_flavor'
newline|'\n'
nl|'\n'
DECL|member|_generate_flavorid
dedent|''
dedent|''
name|'def'
name|'_generate_flavorid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""return a flavorid not in the DB."""'
newline|'\n'
name|'nonexistent_flavor'
op|'='
number|'2700'
newline|'\n'
name|'flavor_ids'
op|'='
op|'['
name|'value'
op|'['
string|'"id"'
op|']'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
nl|'\n'
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
op|'.'
name|'iteritems'
op|'('
op|')'
op|']'
newline|'\n'
name|'while'
name|'nonexistent_flavor'
name|'in'
name|'flavor_ids'
op|':'
newline|'\n'
indent|'            '
name|'nonexistent_flavor'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'nonexistent_flavor'
newline|'\n'
nl|'\n'
DECL|member|_existing_flavor
dedent|''
dedent|''
name|'def'
name|'_existing_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""return first flavor name."""'
newline|'\n'
name|'return'
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_type_access
dedent|''
name|'def'
name|'test_add_instance_type_access'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
string|"'flavor1'"
newline|'\n'
name|'type_ref'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'some flavor'"
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
nl|'\n'
name|'flavorid'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'access_ref'
op|'='
name|'flavors'
op|'.'
name|'add_flavor_access'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'project_id'
op|','
nl|'\n'
name|'ctxt'
op|'='
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'access_ref'
op|'['
string|'"project_id"'
op|']'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'access_ref'
op|'['
string|'"instance_type_id"'
op|']'
op|','
name|'type_ref'
op|'['
string|'"id"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_flavor_access_already_exists
dedent|''
name|'def'
name|'test_add_flavor_access_already_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
string|"'flavor1'"
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'some flavor'"
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
name|'flavorid'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'add_flavor_access'
op|'('
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|'='
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorAccessExists'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'add_flavor_access'
op|','
nl|'\n'
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_flavor_access_invalid_flavor
dedent|''
name|'def'
name|'test_add_flavor_access_invalid_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
string|"'no_such_flavor'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'add_flavor_access'
op|','
nl|'\n'
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_flavor_access
dedent|''
name|'def'
name|'test_remove_flavor_access'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
string|"'flavor1'"
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'some flavor'"
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
name|'flavorid'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'add_flavor_access'
op|'('
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'remove_flavor_access'
op|'('
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'projects'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_access_by_flavor_id'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'projects'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_flavor_access_doesnt_exists
dedent|''
name|'def'
name|'test_remove_flavor_access_doesnt_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'user_id'
op|','
name|'project_id'
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
string|"'flavor1'"
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'some flavor'"
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
name|'flavorid'
op|'='
name|'flavor_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorAccessNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'remove_flavor_access'
op|','
nl|'\n'
name|'flavor_id'
op|','
name|'project_id'
op|','
name|'ctxt'
op|'='
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_instance_types
dedent|''
name|'def'
name|'test_get_all_instance_types'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensures that all flavors can be retrieved.'
nl|'\n'
indent|'        '
name|'session'
op|'='
name|'sql_session'
op|'.'
name|'get_session'
op|'('
op|')'
newline|'\n'
name|'total_instance_types'
op|'='
name|'session'
op|'.'
name|'query'
op|'('
name|'models'
op|'.'
name|'InstanceTypes'
op|')'
op|'.'
name|'count'
op|'('
op|')'
newline|'\n'
name|'inst_types'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'total_instance_types'
op|','
name|'len'
op|'('
name|'inst_types'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_non_existent_inst_type_shouldnt_delete
dedent|''
name|'def'
name|'test_non_existent_inst_type_shouldnt_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensures that flavor creation fails with invalid args.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFoundByName'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'destroy'
op|','
nl|'\n'
string|"'unknown_flavor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_destroy_with_no_name
dedent|''
name|'def'
name|'test_will_not_destroy_with_no_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure destroy said path of no name raises error.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFoundByName'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'destroy'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_get_bad_default_instance_type
dedent|''
name|'def'
name|'test_will_not_get_bad_default_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensures error raised on bad default flavor.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'default_flavor'
op|'='
string|"'unknown_flavor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_default_flavor'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_get_flavor_by_id
dedent|''
name|'def'
name|'test_will_get_flavor_by_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'default_instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'instance_type_id'
op|'='
name|'default_instance_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'fetched'
op|'='
name|'flavors'
op|'.'
name|'get_flavor'
op|'('
name|'instance_type_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'default_instance_type'
op|','
name|'fetched'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_get_flavor_by_unknown_id
dedent|''
name|'def'
name|'test_will_not_get_flavor_by_unknown_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure get by name returns default flavor with no name.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_flavor'
op|','
number|'10000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_get_flavor_with_bad_id
dedent|''
name|'def'
name|'test_will_not_get_flavor_with_bad_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure get by name returns default flavor with bad name.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_flavor'
op|','
string|"'asdf'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flavor_get_by_None_name_returns_default
dedent|''
name|'def'
name|'test_flavor_get_by_None_name_returns_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure get by name returns default flavor with no name.'
nl|'\n'
indent|'        '
name|'default'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'actual'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'default'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_get_flavor_with_bad_name
dedent|''
name|'def'
name|'test_will_not_get_flavor_with_bad_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure get by name returns default flavor with bad name.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|','
number|'10000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_not_get_instance_by_unknown_flavor_id
dedent|''
name|'def'
name|'test_will_not_get_instance_by_unknown_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure get by flavor raises error with wrong flavorid.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|','
nl|'\n'
string|"'unknown_flavor'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_will_get_instance_by_flavor_id
dedent|''
name|'def'
name|'test_will_get_instance_by_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'default_instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'flavorid'
op|'='
name|'default_instance_type'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'fetched'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
name|'flavorid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'default_instance_type'
op|','
name|'fetched'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_read_deleted_types_using_flavor_id
dedent|''
name|'def'
name|'test_can_read_deleted_types_using_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure deleted flavors can be read when querying flavor_id.'
nl|'\n'
indent|'        '
name|'inst_type_name'
op|'='
string|'"test"'
newline|'\n'
name|'inst_type_flavor_id'
op|'='
string|'"test1"'
newline|'\n'
nl|'\n'
name|'inst_type'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
name|'inst_type_name'
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
nl|'\n'
name|'inst_type_flavor_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_type_name'
op|','
name|'inst_type'
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jk0): The deleted flavor will show up here because the context'
nl|'\n'
comment|'# in get_flavor_by_flavor_id() is set to use read_deleted by'
nl|'\n'
comment|'# default.'
nl|'\n'
name|'flavors'
op|'.'
name|'destroy'
op|'('
name|'inst_type'
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
name|'deleted_inst_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
nl|'\n'
name|'inst_type_flavor_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_type_name'
op|','
name|'deleted_inst_type'
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_read_deleted_false_converting_flavorid
dedent|''
name|'def'
name|'test_read_deleted_false_converting_flavorid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure deleted flavors are not returned when not needed (for\n        example when creating a server and attempting to translate from\n        flavorid to instance_type_id.\n        """'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|'"instance_type1"'
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
string|'"test1"'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'destroy'
op|'('
string|'"instance_type1"'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|'"instance_type1_redo"'
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'100'
op|','
string|'"test1"'
op|')'
newline|'\n'
nl|'\n'
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_flavor_id'
op|'('
nl|'\n'
string|'"test1"'
op|','
name|'read_deleted'
op|'='
string|'"no"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"instance_type1_redo"'
op|','
name|'instance_type'
op|'['
string|'"name"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_flavors_sorted_list_sort
dedent|''
name|'def'
name|'test_get_all_flavors_sorted_list_sort'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test default sort'
nl|'\n'
indent|'        '
name|'all_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors_sorted_list'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'DEFAULT_FLAVORS'
op|','
name|'all_flavors'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test sorted by name'
nl|'\n'
name|'all_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors_sorted_list'
op|'('
name|'sort_key'
op|'='
string|"'name'"
op|')'
newline|'\n'
name|'expected'
op|'='
name|'sorted'
op|'('
name|'DEFAULT_FLAVORS'
op|','
name|'key'
op|'='
name|'lambda'
name|'item'
op|':'
name|'item'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'all_flavors'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_flavors_sorted_list_limit
dedent|''
name|'def'
name|'test_get_all_flavors_sorted_list_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'limited_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors_sorted_list'
op|'('
name|'limit'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'limited_flavors'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_flavors_sorted_list_marker
dedent|''
name|'def'
name|'test_get_all_flavors_sorted_list_marker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'all_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors_sorted_list'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the 3rd result as the marker'
nl|'\n'
name|'marker_flavorid'
op|'='
name|'all_flavors'
op|'['
number|'2'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'marked_flavors'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors_sorted_list'
op|'('
nl|'\n'
name|'marker'
op|'='
name|'marker_flavorid'
op|')'
newline|'\n'
comment|'# We expect everything /after/ the 3rd result'
nl|'\n'
name|'expected_results'
op|'='
name|'all_flavors'
op|'['
number|'3'
op|':'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_results'
op|','
name|'marked_flavors'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceTypeToolsTest
dedent|''
dedent|''
name|'class'
name|'InstanceTypeToolsTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_dict_to_metadata
indent|'    '
name|'def'
name|'_dict_to_metadata'
op|'('
name|'self'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
op|'{'
string|"'key'"
op|':'
name|'key'
op|','
string|"'value'"
op|':'
name|'value'
op|'}'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'data'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_test_extract_flavor
dedent|''
name|'def'
name|'_test_extract_flavor'
op|'('
name|'self'
op|','
name|'prefix'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|','
nl|'\n'
name|'prefix'
op|')'
newline|'\n'
name|'instance'
op|'='
op|'{'
string|"'system_metadata'"
op|':'
name|'self'
op|'.'
name|'_dict_to_metadata'
op|'('
name|'metadata'
op|')'
op|'}'
newline|'\n'
name|'_instance_type'
op|'='
name|'flavors'
op|'.'
name|'extract_flavor'
op|'('
name|'instance'
op|','
name|'prefix'
op|')'
newline|'\n'
nl|'\n'
name|'props'
op|'='
name|'flavors'
op|'.'
name|'system_metadata_flavor_props'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'instance_type'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'props'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'instance_type'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type'
op|','
name|'_instance_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_extract_flavor
dedent|''
name|'def'
name|'test_extract_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_extract_flavor'
op|'('
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_extract_flavor_prefix
dedent|''
name|'def'
name|'test_extract_flavor_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_extract_flavor'
op|'('
string|"'foo_'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_save_flavor_info
dedent|''
name|'def'
name|'test_save_flavor_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'example'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'example_prefix'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'flavors'
op|'.'
name|'system_metadata_flavor_props'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'example'
op|'['
string|"'instance_type_%s'"
op|'%'
name|'key'
op|']'
op|'='
name|'instance_type'
op|'['
name|'key'
op|']'
newline|'\n'
name|'example_prefix'
op|'['
string|"'fooinstance_type_%s'"
op|'%'
name|'key'
op|']'
op|'='
name|'instance_type'
op|'['
name|'key'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'example'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'example_prefix'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_flavor_info
dedent|''
name|'def'
name|'test_delete_flavor_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
name|'metadata'
op|','
name|'instance_type'
op|','
string|"'_'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'delete_flavor_info'
op|'('
name|'metadata'
op|','
string|"''"
op|','
string|"'_'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceTypeFilteringTest
dedent|''
dedent|''
name|'class'
name|'InstanceTypeFilteringTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test cases for the filter option available for instance_type_get_all."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InstanceTypeFilteringTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertFilterResults
dedent|''
name|'def'
name|'assertFilterResults'
op|'('
name|'self'
op|','
name|'filters'
op|','
name|'expected'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_types'
op|'='
name|'db'
op|'.'
name|'flavor_get_all'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'filters'
op|'='
name|'filters'
op|')'
newline|'\n'
name|'inst_names'
op|'='
op|'['
name|'i'
op|'['
string|"'name'"
op|']'
name|'for'
name|'i'
name|'in'
name|'inst_types'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_names'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_filters
dedent|''
name|'def'
name|'test_no_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filters'
op|'='
name|'None'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'m1.tiny'"
op|','
string|"'m1.small'"
op|','
string|"'m1.medium'"
op|','
string|"'m1.large'"
op|','
nl|'\n'
string|"'m1.xlarge'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFilterResults'
op|'('
name|'filters'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_min_memory_mb_filter
dedent|''
name|'def'
name|'test_min_memory_mb_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Exclude tiny instance which is 512 MB.'
nl|'\n'
indent|'        '
name|'filters'
op|'='
name|'dict'
op|'('
name|'min_memory_mb'
op|'='
number|'513'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'m1.small'"
op|','
string|"'m1.medium'"
op|','
string|"'m1.large'"
op|','
string|"'m1.xlarge'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFilterResults'
op|'('
name|'filters'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_min_root_gb_filter
dedent|''
name|'def'
name|'test_min_root_gb_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Exclude everything but large and xlarge which have >= 80 GB.'
nl|'\n'
indent|'        '
name|'filters'
op|'='
name|'dict'
op|'('
name|'min_root_gb'
op|'='
number|'80'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'m1.large'"
op|','
string|"'m1.xlarge'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFilterResults'
op|'('
name|'filters'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_min_memory_mb_AND_root_gb_filter
dedent|''
name|'def'
name|'test_min_memory_mb_AND_root_gb_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Exclude everything but large and xlarge which have >= 80 GB.'
nl|'\n'
indent|'        '
name|'filters'
op|'='
name|'dict'
op|'('
name|'min_memory_mb'
op|'='
number|'16384'
op|','
name|'min_root_gb'
op|'='
number|'80'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
string|"'m1.xlarge'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertFilterResults'
op|'('
name|'filters'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CreateInstanceTypeTest
dedent|''
dedent|''
name|'class'
name|'CreateInstanceTypeTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|assertInvalidInput
indent|'    '
name|'def'
name|'assertInvalidInput'
op|'('
name|'self'
op|','
op|'*'
name|'create_args'
op|','
op|'**'
name|'create_kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
name|'flavors'
op|'.'
name|'create'
op|','
nl|'\n'
op|'*'
name|'create_args'
op|','
op|'**'
name|'create_kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_name_with_special_characters
dedent|''
name|'def'
name|'test_name_with_special_characters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Names can contain [a-zA-Z0-9_.- ]'
nl|'\n'
indent|'        '
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'_foo.bar-123'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure instance types raises InvalidInput for invalid characters.'
nl|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'foobar#'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_name_length_checks
dedent|''
name|'def'
name|'test_name_length_checks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'MAX_LEN'
op|'='
number|'255'
newline|'\n'
nl|'\n'
comment|'# Flavor name with 255 characters or less is valid.'
nl|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'a'"
op|'*'
name|'MAX_LEN'
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# Flavor name which is more than 255 characters will cause error.'
nl|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'a'"
op|'*'
op|'('
name|'MAX_LEN'
op|'+'
number|'1'
op|')'
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# Flavor name which is empty should cause an error'
nl|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"''"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_memory_must_be_positive_integer
dedent|''
name|'def'
name|'test_memory_must_be_positive_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
string|"'foo'"
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
op|'-'
number|'1'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'0'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'1'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vcpus_must_be_positive_integer
dedent|''
name|'def'
name|'test_vcpus_must_be_positive_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor`'"
op|','
number|'64'
op|','
string|"'foo'"
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
op|'-'
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'0'
op|','
number|'120'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_root_gb_must_be_nonnegative_integer
dedent|''
name|'def'
name|'test_root_gb_must_be_nonnegative_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'0'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap_must_be_nonnegative_integer
dedent|''
name|'def'
name|'test_swap_must_be_nonnegative_integer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'swap'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'swap'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'swap'
op|'='
number|'0'
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'swap'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rxtx_factor_must_be_positive_float
dedent|''
name|'def'
name|'test_rxtx_factor_must_be_positive_float'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'rxtx_factor'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'rxtx_factor'
op|'='
op|'-'
number|'1.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'rxtx_factor'
op|'='
number|'0.0'
op|')'
newline|'\n'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'rxtx_factor'
op|'='
number|'1.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1.0'
op|','
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'rxtx_factor'
op|'='
number|'1.1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1.1'
op|','
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_is_public_must_be_valid_bool_string
dedent|''
name|'def'
name|'test_is_public_must_be_valid_bool_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertInvalidInput'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'TRUE'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'False'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor3'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'Yes'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor4'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'No'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor5'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'Y'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor6'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'N'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor7'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'1'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor8'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'0'"
op|')'
newline|'\n'
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor9'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'is_public'
op|'='
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flavorid_populated
dedent|''
name|'def'
name|'test_flavorid_populated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor1'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNot'
op|'('
name|'None'
op|','
name|'flavor1'
op|'['
string|"'flavorid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'flavor2'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'flavorid'
op|'='
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNot'
op|'('
name|'None'
op|','
name|'flavor2'
op|'['
string|"'flavorid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'flavor3'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor3'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'flavorid'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo'"
op|','
name|'flavor3'
op|'['
string|"'flavorid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_values
dedent|''
name|'def'
name|'test_default_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavor1'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNot'
op|'('
name|'None'
op|','
name|'flavor1'
op|'['
string|"'flavorid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor1'
op|'['
string|"'ephemeral_gb'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor1'
op|'['
string|"'swap'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor1'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
number|'1.0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_basic_create
dedent|''
name|'def'
name|'test_basic_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance types can be created.'
nl|'\n'
indent|'        '
name|'original_list'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Create new type and make sure values stick'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor'
op|'['
string|"'name'"
op|']'
op|','
string|"'flavor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor'
op|'['
string|"'memory_mb'"
op|']'
op|','
number|'64'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor'
op|'['
string|"'vcpus'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flavor'
op|'['
string|"'root_gb'"
op|']'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure new type shows up in list'
nl|'\n'
name|'new_list'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'len'
op|'('
name|'original_list'
op|')'
op|','
name|'len'
op|'('
name|'new_list'
op|')'
op|','
nl|'\n'
string|"'flavor was not created'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_then_delete
dedent|''
name|'def'
name|'test_create_then_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'original_list'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure new type shows up in list'
nl|'\n'
name|'new_list'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'len'
op|'('
name|'original_list'
op|')'
op|','
name|'len'
op|'('
name|'new_list'
op|')'
op|','
nl|'\n'
string|"'instance type was not created'"
op|')'
newline|'\n'
nl|'\n'
name|'flavors'
op|'.'
name|'destroy'
op|'('
string|"'flavor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'get_flavor'
op|','
name|'flavor'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deleted instance should not be in list anymore'
nl|'\n'
name|'new_list'
op|'='
name|'flavors'
op|'.'
name|'get_all_flavors'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original_list'
op|','
name|'new_list'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_duplicate_names_fail
dedent|''
name|'def'
name|'test_duplicate_names_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensures that name duplicates raise InstanceTypeCreateFailed.'
nl|'\n'
indent|'        '
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor'"
op|','
number|'256'
op|','
number|'1'
op|','
number|'120'
op|','
number|'200'
op|','
string|"'flavor1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeExists'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'create'
op|','
nl|'\n'
string|"'flavor'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_duplicate_flavorids_fail
dedent|''
name|'def'
name|'test_duplicate_flavorids_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensures that flavorid duplicates raise InstanceTypeCreateFailed.'
nl|'\n'
indent|'        '
name|'flavors'
op|'.'
name|'create'
op|'('
string|"'flavor1'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'flavorid'
op|'='
string|"'flavorid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeIdExists'
op|','
nl|'\n'
name|'flavors'
op|'.'
name|'create'
op|','
nl|'\n'
string|"'flavor2'"
op|','
number|'64'
op|','
number|'1'
op|','
number|'120'
op|','
name|'flavorid'
op|'='
string|"'flavorid'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

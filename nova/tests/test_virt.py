begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Copyright 2010 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
op|'.'
name|'ElementTree'
name|'import'
name|'fromstring'
name|'as'
name|'xml_to_tree'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'parseString'
name|'as'
name|'xml_to_dom'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'libvirt_conn'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'instances_path'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|libxml2
name|'libxml2'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|class|LibvirtConnTestCase
name|'class'
name|'LibvirtConnTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'fake_call'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|variable|test_ip
dedent|''
name|'test_ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
DECL|variable|test_instance
name|'test_instance'
op|'='
op|'{'
string|"'memory_kb'"
op|':'
string|"'1024000'"
op|','
nl|'\n'
string|"'basepath'"
op|':'
string|"'/some/path'"
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
string|"'br100'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'02:12:34:46:56:67'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'br101'"
op|','
nl|'\n'
string|"'instance_type'"
op|':'
string|"'m1.small'"
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_driver_dependent_test_setup
name|'def'
name|'_driver_dependent_test_setup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Setup method.\n        Call this method at the top of each testcase method, \n        if the testcase is necessary libvirt and cheetah.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'global'
name|'libvirt'
newline|'\n'
name|'global'
name|'libxml2'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'libxml2'
op|'='
name|'__import__'
op|'('
string|"'libxml2'"
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'logging'
op|'.'
name|'warn'
op|'('
string|'"""This test has not been done since """'
nl|'\n'
string|'"""using driver-dependent library Cheetah/libvirt/libxml2."""'
op|')'
newline|'\n'
name|'raise'
name|'e'
newline|'\n'
nl|'\n'
comment|'# inebitable mocks for calling '
nl|'\n'
comment|'#nova.virt.libvirt_conn.LibvirtConnection.__init__'
nl|'\n'
dedent|''
name|'nwmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'NWFilterFirewall'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|','
string|"'NWFilterFirewall'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'NWFilterFirewall'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'nwmock'
op|')'
newline|'\n'
nl|'\n'
name|'obj'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
newline|'\n'
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|','
string|"'utils'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'firewall_driver'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fwmock'
op|')'
newline|'\n'
name|'return'
name|'nwmock'
op|','
name|'fwmock'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri
dedent|''
name|'def'
name|'test_xml_and_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_rescue
dedent|''
name|'def'
name|'test_xml_and_uri_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
name|'expect_kernel'
op|'='
name|'True'
op|','
nl|'\n'
name|'expect_ramdisk'
op|'='
name|'True'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_uri
dedent|''
name|'def'
name|'_check_xml_and_uri'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'expect_ramdisk'
op|','
name|'expect_kernel'
op|','
nl|'\n'
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'project'
op|'='
name|'self'
op|'.'
name|'project'
op|','
nl|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_network_host'
op|'('
name|'user_context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'type_uri_map'
op|'='
op|'{'
string|"'qemu'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'qemu'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'kvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'('
string|"'uml:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'uml'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'uml'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'('
string|"'xen:///'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'linux'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'hypervisor_type'
name|'in'
op|'['
string|"'qemu'"
op|','
string|"'kvm'"
op|','
string|"'xen'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'check_list'
op|'='
name|'type_uri_map'
op|'['
name|'hypervisor_type'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'rescue-kernel'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'rescue-ramdisk'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'expect_kernel'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'kernel'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expect_ramdisk'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'ramdisk'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'common_checks'
op|'='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'tag'
op|','
string|"'domain'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
nl|'\n'
string|"'./devices/interface/filterref/parameter'"
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'IP'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
nl|'\n'
string|"'./devices/interface/filterref/parameter'"
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'value'"
op|')'
op|','
string|"'10.11.12.13'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/interface/filterref/parameter'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'name'"
op|')'
op|','
string|"'DHCPSERVER'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/interface/filterref/parameter'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'value'"
op|')'
op|','
string|"'10.0.0.1'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/serial/source'"
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'path'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'console.log'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./memory'"
op|')'
op|'.'
name|'text'
op|','
string|"'2097152'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'rescue-disk'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'disk'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'disk'"
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'='
name|'libvirt_type'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'uri'
op|'='
name|'conn'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uri'
op|','
name|'expected_uri'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'rescue'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'common_checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed common check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# This test is supposed to make sure we don't override a specifically set uri"
nl|'\n'
comment|'# '
nl|'\n'
comment|'# Deliberately not just assigning this string to FLAGS.libvirt_uri and'
nl|'\n'
comment|'# checking against that later on. This way we make sure the'
nl|'\n'
comment|"# implementation doesn't fiddle around with the FLAGS."
nl|'\n'
dedent|''
dedent|''
name|'testuri'
op|'='
string|"'something completely different'"
newline|'\n'
name|'FLAGS'
op|'.'
name|'libvirt_uri'
op|'='
name|'testuri'
newline|'\n'
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'='
name|'libvirt_type'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'uri'
op|'='
name|'conn'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uri'
op|','
name|'testuri'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vcpu_total
dedent|''
dedent|''
name|'def'
name|'test_get_vcpu_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if get_vcpu_total returns appropriate cpu value \n        Connection/OS/driver differenct does not matter for this method,\n        everyone can execute for checking.\n        """'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
number|'0'
op|'<'
name|'conn'
op|'.'
name|'get_vcpu_total'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test_get_memory_mb_total
dedent|''
name|'def'
name|'test_get_memory_mb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if get_memory_mb returns appropriate memory value"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
number|'0'
op|'<'
name|'conn'
op|'.'
name|'get_memory_mb_total'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_local_gb_total
dedent|''
name|'def'
name|'test_get_local_gb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if get_local_gb_total returns appropriate disk value"""'
newline|'\n'
comment|'# Note(masumotok): cannot test b/c FLAGS.instances_path is'
nl|'\n'
comment|'#                  inevitable for this test.. '
nl|'\n'
comment|'#try:'
nl|'\n'
comment|'#    self._driver_dependent_test_setup()'
nl|'\n'
comment|'#except:'
nl|'\n'
comment|'#    return'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#self.mox.ReplayAll()'
nl|'\n'
comment|'#conn = libvirt_conn.LibvirtConnection(False)'
nl|'\n'
comment|'#self.assertTrue(0 < conn.get_local_gb_total())'
nl|'\n'
comment|'#self.mox.UnsetStubs()'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_get_vcpu_used
dedent|''
name|'def'
name|'test_get_vcpu_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if get_local_gb_total returns appropriate disk value"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"vcpus"'
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'vcpus'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
string|"''"
op|','
op|'['
op|'('
string|"'dummycpu'"
op|')'
op|','
op|'('
string|"'dummycpu'"
op|')'
op|']'
op|']'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'vcpus'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
string|"''"
op|','
op|'['
op|'('
string|"'dummycpu'"
op|')'
op|','
op|'('
string|"'dummycpu'"
op|')'
op|']'
op|']'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vdmock'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vdmock'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'conn'
op|'.'
name|'get_vcpu_used'
op|'('
op|')'
op|'=='
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_memory_mb_used
dedent|''
name|'def'
name|'test_get_memory_mb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if get_memory_mb returns appropriate memory value"""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
number|'0'
op|'<'
name|'conn'
op|'.'
name|'get_memory_mb_used'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_local_gb_used
dedent|''
name|'def'
name|'test_get_local_gb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Check if get_local_gb_total returns appropriate disk value"""'
newline|'\n'
comment|'# Note(masumotok): cannot test b/c FLAGS.instances_path is'
nl|'\n'
comment|'#                  inevitable for this test.. '
nl|'\n'
comment|'#try:'
nl|'\n'
comment|'#    self._driver_dependent_test_setup()'
nl|'\n'
comment|'#except:'
nl|'\n'
comment|'#    return'
nl|'\n'
nl|'\n'
comment|'#self.mox.ReplayAll()'
nl|'\n'
comment|'#conn = libvirt_conn.LibvirtConnection(False)'
nl|'\n'
comment|'#self.assertTrue(0 < conn.get_local_gb_used())'
nl|'\n'
comment|'#self.mox.UnsetStubs()'
nl|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_get_cpu_info_works_correctly
dedent|''
name|'def'
name|'test_get_cpu_info_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if get_cpu_info works correctly.\n        (in case libvirt.getCapabilities() works correctly)\n        """'
newline|'\n'
name|'xml'
op|'='
op|'('
string|'"""<cpu><arch>x86_64</arch><model>Nehalem</model>"""'
nl|'\n'
string|'"""<vendor>Intel</vendor><topology sockets=\'2\' """'
nl|'\n'
string|'"""cores=\'4\' threads=\'2\'/><feature name=\'rdtscp\'/>"""'
nl|'\n'
string|'"""<feature name=\'dca\'/><feature name=\'xtpr\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm2\'/><feature name=\'est\'/>"""'
nl|'\n'
string|'"""<feature name=\'vmx\'/><feature name=\'ds_cpl\'/>"""'
nl|'\n'
string|'"""<feature name=\'monitor\'/><feature name=\'pbe\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm\'/><feature name=\'ht\'/>"""'
nl|'\n'
string|'"""<feature name=\'ss\'/><feature name=\'acpi\'/>"""'
nl|'\n'
string|'"""<feature name=\'ds\'/><feature name=\'vme\'/></cpu>"""'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
number|'0'
op|'<'
name|'len'
op|'('
name|'conn'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_cpu_info_inappropreate_xml
dedent|''
name|'def'
name|'test_get_cpu_info_inappropreate_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if get_cpu_info raises exception\n        in case libvirt.getCapabilities() returns wrong xml\n        (in case of xml doesnt have <cpu> tag)\n        """'
newline|'\n'
name|'xml'
op|'='
op|'('
string|'"""<cccccpu><arch>x86_64</arch><model>Nehalem</model>"""'
nl|'\n'
string|'"""<vendor>Intel</vendor><topology sockets=\'2\' """'
nl|'\n'
string|'"""cores=\'4\' threads=\'2\'/><feature name=\'rdtscp\'/>"""'
nl|'\n'
string|'"""<feature name=\'dca\'/><feature name=\'xtpr\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm2\'/><feature name=\'est\'/>"""'
nl|'\n'
string|'"""<feature name=\'vmx\'/><feature name=\'ds_cpl\'/>"""'
nl|'\n'
string|'"""<feature name=\'monitor\'/><feature name=\'pbe\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm\'/><feature name=\'ht\'/>"""'
nl|'\n'
string|'"""<feature name=\'ss\'/><feature name=\'acpi\'/>"""'
nl|'\n'
string|'"""<feature name=\'ds\'/><feature name=\'vme\'/></cccccpu>"""'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Invalid xml'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_cpu_info_inappropreate_xml2
dedent|''
name|'def'
name|'test_get_cpu_info_inappropreate_xml2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Check if get_cpu_info raises exception\n        in case libvirt.getCapabilities() returns wrong xml\n        (in case of xml doesnt have inproper <topology> tag\n        meaning missing "socket" attribute)\n        """'
newline|'\n'
name|'xml'
op|'='
op|'('
string|'"""<cpu><arch>x86_64</arch><model>Nehalem</model>"""'
nl|'\n'
string|'"""<vendor>Intel</vendor><topology """'
nl|'\n'
string|'"""cores=\'4\' threads=\'2\'/><feature name=\'rdtscp\'/>"""'
nl|'\n'
string|'"""<feature name=\'dca\'/><feature name=\'xtpr\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm2\'/><feature name=\'est\'/>"""'
nl|'\n'
string|'"""<feature name=\'vmx\'/><feature name=\'ds_cpl\'/>"""'
nl|'\n'
string|'"""<feature name=\'monitor\'/><feature name=\'pbe\'/>"""'
nl|'\n'
string|'"""<feature name=\'tm\'/><feature name=\'ht\'/>"""'
nl|'\n'
string|'"""<feature name=\'ss\'/><feature name=\'acpi\'/>"""'
nl|'\n'
string|'"""<feature name=\'ds\'/><feature name=\'vme\'/></cpu>"""'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Invalid xml: topology'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compare_cpu_works_correctly
dedent|''
name|'def'
name|'test_compare_cpu_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Calling libvirt.compute_cpu() and works correctly """'
newline|'\n'
nl|'\n'
name|'t'
op|'='
op|'('
string|'"""{"arch":"%s", "model":"%s", "vendor":"%s", """'
nl|'\n'
string|'""""topology":{"cores":"%s", "threads":"%s", """'
nl|'\n'
string|'""""sockets":"%s"}, "features":[%s]}"""'
op|')'
newline|'\n'
name|'cpu_info'
op|'='
name|'t'
op|'%'
op|'('
string|"'x86'"
op|','
string|"'model'"
op|','
string|"'vendor'"
op|','
string|"'2'"
op|','
string|"'1'"
op|','
string|"'4'"
op|','
string|'\'"tm"\''
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
number|'0'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'None'
op|'=='
name|'conn'
op|'.'
name|'compare_cpu'
op|'('
name|'cpu_info'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compare_cpu_raises_exception
dedent|''
name|'def'
name|'test_compare_cpu_raises_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Libvirt-related exception occurs when calling\n        libvirt.compare_cpu().\n        """'
newline|'\n'
name|'t'
op|'='
op|'('
string|'"""{"arch":"%s", "model":"%s", "vendor":"%s", """'
nl|'\n'
string|'""""topology":{"cores":"%s", "threads":"%s", """'
nl|'\n'
string|'""""sockets":"%s"}, "features":[%s]}"""'
op|')'
newline|'\n'
name|'cpu_info'
op|'='
name|'t'
op|'%'
op|'('
string|"'x86'"
op|','
string|"'model'"
op|','
string|"'vendor'"
op|','
string|"'2'"
op|','
string|"'1'"
op|','
string|"'4'"
op|','
string|'\'"tm"\''
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
number|'0'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'conn'
op|'.'
name|'compare_cpu'
op|','
name|'cpu_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_compare_cpu_no_compatibility
dedent|''
name|'def'
name|'test_compare_cpu_no_compatibility'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""libvirt.compare_cpu() return less than 0.(no compatibility)"""'
newline|'\n'
nl|'\n'
name|'t'
op|'='
op|'('
string|'"""{"arch":"%s", "model":"%s", "vendor":"%s", """'
nl|'\n'
string|'""""topology":{"cores":"%s", "threads":"%s", """'
nl|'\n'
string|'""""sockets":"%s"}, "features":[%s]}"""'
op|')'
newline|'\n'
name|'cpu_info'
op|'='
name|'t'
op|'%'
op|'('
string|"'x86'"
op|','
string|"'model'"
op|','
string|"'vendor'"
op|','
string|"'2'"
op|','
string|"'1'"
op|','
string|"'4'"
op|','
string|'\'"tm"\''
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
number|'0'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'conn'
op|'.'
name|'compare_cpu'
op|','
name|'cpu_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_filtering_rules_for_instance_works_correctly
dedent|''
name|'def'
name|'test_ensure_filtering_rules_for_instance_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure_filtering_rules_for_instance works as expected correctly"""'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'models'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'nwmock'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'fwmock'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'n'
op|'='
string|"'nova-instance-%s'"
op|'%'
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_filtering_rules_for_instance_timeout
dedent|''
name|'def'
name|'test_ensure_filtering_rules_for_instance_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure_filtering_fules_for_instance finishes with timeout"""'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'models'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'nwmock'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'fwmock'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'n'
op|'='
string|"'nova-instance-%s'"
op|'%'
name|'instance_ref'
op|'.'
name|'name'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_timeout_sec'
op|'*'
number|'2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'('
name|'n'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Timeout migrating for'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_works_correctly
dedent|''
name|'def'
name|'test_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""_live_migration works as expected correctly """'
newline|'\n'
nl|'\n'
DECL|class|dummyCall
name|'class'
name|'dummyCall'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|f
indent|'            '
name|'f'
op|'='
name|'None'
newline|'\n'
DECL|member|start
name|'def'
name|'start'
op|'('
name|'self'
op|','
name|'interval'
op|'='
number|'0'
op|','
name|'now'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_ref'
op|'='
name|'models'
op|'.'
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'1'
op|')'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"migrateToURI"'
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vdmock'
op|')'
newline|'\n'
comment|'# below description is also ok.'
nl|'\n'
comment|'#self.mox.StubOutWithMock(libvirt_conn.LibvirtConnection._conn, '
nl|'\n'
comment|'#    "lookupByName", use_mock_anything=True)'
nl|'\n'
nl|'\n'
name|'libvirt_conn'
op|'.'
name|'utils'
op|'.'
name|'LoopingCall'
op|'('
name|'f'
op|'='
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dummyCall'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'conn'
op|'.'
name|'_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_raises_exception
dedent|''
name|'def'
name|'test_live_migration_raises_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _live_migration raises exception, then this testcase confirms\n        state_description/state for the instances/volumes are recovered. \n        """'
newline|'\n'
DECL|class|Instance
name|'class'
name|'Instance'
op|'('
name|'models'
op|'.'
name|'NovaBase'
op|')'
op|':'
newline|'\n'
DECL|variable|id
indent|'            '
name|'id'
op|'='
number|'0'
newline|'\n'
DECL|variable|volumes
name|'volumes'
op|'='
name|'None'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
string|"'name'"
newline|'\n'
nl|'\n'
dedent|''
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'instance_ref'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'1'
op|')'
newline|'\n'
name|'instance_ref'
op|'.'
name|'__setitem__'
op|'('
string|"'volumes'"
op|','
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|','
nl|'\n'
DECL|variable|use_mock_anything
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"migrateToURI"'
op|','
nl|'\n'
DECL|variable|use_mock_anything
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
name|'dest'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vdmock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_set_state'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
string|"'running'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'volume_update'"
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'instance_ref'
op|'.'
name|'volumes'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'ctxt'
op|','
name|'v'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
op|'.'
name|'InAnyOrder'
op|'('
string|"'g1'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'conn'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""_post_live_migration works as expected correctly """'
newline|'\n'
nl|'\n'
name|'dest'
op|'='
string|"'dummydest'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'hostname'"
op|':'
string|"'i-00000001'"
op|','
string|"'host'"
op|':'
name|'dest'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
string|"'dummyip'"
op|','
string|"'floating_ip'"
op|':'
string|"'dummyflip'"
op|','
nl|'\n'
string|"'volumes'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'network_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'host'"
op|':'
name|'dest'
op|'}'
newline|'\n'
name|'floating_ip_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'address'"
op|':'
string|"'1.1.1.1'"
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'fwmock'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
name|'instance_ref'
op|'['
string|"'fixed_ip'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_fixed_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixed_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_get_network'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'ctxt'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'fl_ip'
op|'='
name|'instance_ref'
op|'['
string|"'floating_ip'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_floating_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fl_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'floating_ip'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'floating_ip_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'floating_ip_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_update'
op|'('
name|'ctxt'
op|','
name|'floating_ip_ref'
op|'['
string|"'address'"
op|']'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'state_description'"
op|':'
string|"'running'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'volume_update'"
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'ctxt'
op|','
name|'v'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'_post_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_no_floating_ip
dedent|''
name|'def'
name|'test_post_live_migration_no_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _post_live_migration works as expected correctly \n        (in case instance doesnt have floaitng ip)\n        """'
newline|'\n'
name|'dest'
op|'='
string|"'dummydest'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'hostname'"
op|':'
string|"'i-00000001'"
op|','
string|"'host'"
op|':'
name|'dest'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
string|"'dummyip'"
op|','
string|"'floating_ip'"
op|':'
string|"'dummyflip'"
op|','
nl|'\n'
string|"'volumes'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'network_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'host'"
op|':'
name|'dest'
op|'}'
newline|'\n'
name|'floating_ip_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'address'"
op|':'
string|"'1.1.1.1'"
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'fwmock'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
name|'instance_ref'
op|'['
string|"'fixed_ip'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_fixed_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixed_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_get_network'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'ctxt'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_floating_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LOG'
op|','
string|"'info'"
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'post livemigration operation is started..'"
op|')'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'floating_ip is not found for %s'"
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
comment|'# Checking last messages are ignored. may be no need to check so strictly?'
nl|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'state_description'"
op|':'
string|"'running'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'volume_update'"
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'ctxt'
op|','
name|'v'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'_post_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_no_floating_ip_with_exception
dedent|''
name|'def'
name|'test_post_live_migration_no_floating_ip_with_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        _post_live_migration works as expected correctly \n        (in case instance doesnt have floaitng ip, and raise exception)\n        """'
newline|'\n'
name|'dest'
op|'='
string|"'dummydest'"
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'hostname'"
op|':'
string|"'i-00000001'"
op|','
string|"'host'"
op|':'
name|'dest'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
string|"'dummyip'"
op|','
string|"'floating_ip'"
op|':'
string|"'dummyflip'"
op|','
nl|'\n'
string|"'volumes'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'network_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'host'"
op|':'
name|'dest'
op|'}'
newline|'\n'
name|'floating_ip_ref'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'address'"
op|':'
string|"'1.1.1.1'"
op|'}'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'nwmock'
op|','
name|'fwmock'
op|'='
name|'self'
op|'.'
name|'_driver_dependent_test_setup'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
dedent|''
name|'fwmock'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
name|'instance_ref'
op|'['
string|"'fixed_ip'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_fixed_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixed_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_get_network'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'network_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'ctxt'
op|','
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_floating_address'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt_conn'
op|'.'
name|'LOG'
op|','
string|"'info'"
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'post livemigration operation is started..'"
op|')'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|"'floating_ip is not found for %s'"
op|')'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
comment|'# the last message is ignored. may be no need to check so strictly?'
nl|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'libvirt_conn'
op|'.'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'state_description'"
op|':'
string|"'running'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
string|"'host'"
op|':'
name|'dest'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'volume_update'"
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'instance_ref'
op|'['
string|"'volumes'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'volume_update'
op|'('
name|'ctxt'
op|','
name|'v'
op|'['
string|"'id'"
op|']'
op|','
op|'{'
string|"'status'"
op|':'
string|"'in-use'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'libvirt_conn'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'_post_live_migration'
op|'('
name|'ctxt'
op|','
name|'instance_ref'
op|','
name|'dest'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallTestCase
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'libvirt_conn'
op|'.'
name|'IptablesFirewallDriver'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_p
dedent|''
name|'def'
name|'_p'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
string|"'iptables-restore'"
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"' '"
op|'.'
name|'join'
op|'('
name|'args'
op|')'
op|','
name|'kwargs'
op|'['
string|"'stdin'"
op|']'
newline|'\n'
dedent|''
name|'if'
string|"'iptables-save'"
name|'in'
name|'args'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
DECL|variable|in_rules
dedent|''
dedent|''
name|'in_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.4 on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [969615:281627771]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [915599:63811649]'"
op|','
nl|'\n'
string|"':nova-block-ipv4 - [0:0]'"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -d 192.168.122.0/24 -o virbr0 -m state --state RELATED'"
nl|'\n'
string|"',ESTABLISHED -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -o virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_static_filters
name|'def'
name|'test_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'fw'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'_p'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|'}'
op|')'
newline|'\n'
name|'ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
nl|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'admin_ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'admin_ctxt'
op|','
name|'ip'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'secgroup'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'test group'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'8'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'81'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.10.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'add_instance'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'out_rules'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'modify_rules'
op|'('
name|'self'
op|'.'
name|'in_rules'
op|')'
newline|'\n'
nl|'\n'
name|'in_rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'l'
op|':'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|','
name|'self'
op|'.'
name|'in_rules'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'in_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
string|"'nova'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rule'
name|'in'
name|'out_rules'
op|','
nl|'\n'
string|"'Rule went missing: %s'"
op|'%'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-d 10.11.12.13 -j'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'instance_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_chain'
op|','
string|'"The instance chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'security_group_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-A %s -j'"
op|'%'
name|'instance_chain'
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'security_group_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'security_group_chain'
op|','
nl|'\n'
string|'"The security group chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'-A %s -p icmp -s 192.168.11.0/24 -j ACCEPT'"
op|'%'
name|'security_group_chain'
name|'in'
name|'out_rules'
op|','
nl|'\n'
string|'"ICMP acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'-A %s -p icmp -s 192.168.11.0/24 -m icmp --icmp-type'"
nl|'\n'
string|"' 8 -j ACCEPT'"
op|'%'
name|'security_group_chain'
name|'in'
name|'out_rules'
op|','
nl|'\n'
string|'"ICMP Echo Request acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'-A %s -p tcp -s 192.168.10.0/24 -m multiport '"
nl|'\n'
string|"'--dports 80:81 -j ACCEPT'"
op|'%'
name|'security_group_chain'
name|'in'
name|'out_rules'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterTestCase
dedent|''
dedent|''
name|'class'
name|'NWFilterTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NWFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Mock
name|'class'
name|'Mock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
DECL|variable|admin
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'libvirt_conn'
op|'.'
name|'NWFilterFirewall'
op|'('
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cidr_rule_nwfilter_xml
dedent|''
name|'def'
name|'test_cidr_rule_nwfilter_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake'"
op|','
nl|'\n'
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'='
name|'xml_to_dom'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'tagName'
op|','
string|"'filter'"
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'rule'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rules'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|"# It's supposed to allow inbound traffic."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'action'"
op|')'
op|','
string|"'accept'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'direction'"
op|')'
op|','
string|"'in'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Must be lower priority than the base filter (which blocks everything)'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'int'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'priority'"
op|')'
op|')'
op|'<'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
name|'ip_conditions'
op|'='
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'tcp'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ip_conditions'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'srcipaddr'"
op|')'
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'srcipmask'"
op|')'
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'dstportstart'"
op|')'
op|','
string|"'80'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'dstportend'"
op|')'
op|','
string|"'81'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|teardown_security_group
dedent|''
name|'def'
name|'teardown_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'delete_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_and_return_security_group
dedent|''
name|'def'
name|'setup_and_return_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_creates_base_rule_first
dedent|''
name|'def'
name|'test_creates_base_rule_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# These come pre-defined by libvirt'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'defined_filters'
op|'='
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'f'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_filterDefineXMLMock
dedent|''
name|'def'
name|'_filterDefineXMLMock'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'xml_to_dom'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'filterref'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ref'
op|'='
name|'f'
op|'.'
name|'getAttribute'
op|'('
string|"'filter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ref'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|','
nl|'\n'
op|'('
string|"'%s referenced filter that does '"
op|'+'
nl|'\n'
string|"'not yet exist: %s'"
op|')'
op|'%'
op|'('
name|'name'
op|','
name|'ref'
op|')'
op|')'
newline|'\n'
name|'dependencies'
op|'='
op|'['
name|'ref'
op|']'
op|'+'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'ref'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'+='
name|'dependencies'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'defined_filters'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'_filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|'}'
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_ensure_all_called
name|'def'
name|'_ensure_all_called'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_filter'
op|'='
string|"'nova-instance-%s'"
op|'%'
name|'instance_ref'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'secgroup_filter'
op|'='
string|"'nova-secgroup-%s'"
op|'%'
name|'self'
op|'.'
name|'security_group'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'for'
name|'required'
name|'in'
op|'['
name|'secgroup_filter'
op|','
string|"'allow-dhcp-server'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-mac-spoofing'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'required'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'instance_filter'
op|']'
op|','
nl|'\n'
string|'"Instance\'s filter does not include %s"'
op|'%'
nl|'\n'
name|'required'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'setup_and_return_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'_ensure_all_called'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

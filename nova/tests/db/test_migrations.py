begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010-2011 OpenStack Foundation'
nl|'\n'
comment|'# Copyright 2012-2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTests for database migrations. This test case reads the configuration\nfile test_migrations.conf for database connection settings\nto use in the tests. For each connection found in the config file,\nthe test case runs a series of test cases to ensure that migrations work\nproperly both upgrading and downgrading, and that no data loss occurs\nif possible.\n\nThere are also "opportunistic" tests for both mysql and postgresql in here,\nwhich allows testing against all 3 databases (sqlite in memory, mysql, pg) in\na properly configured unit test environment.\n\nFor the opportunistic testing you need to set up a db named \'openstack_citest\'\nwith user \'openstack_citest\' and password \'openstack_citest\' on localhost.\nThe test will then use that db and u/p combo to run the tests.\n\nFor postgres on Ubuntu this can be done with the following commands:\n\nsudo -u postgres psql\npostgres=# create user openstack_citest with createdb login password\n      \'openstack_citest\';\npostgres=# create database openstack_citest with owner openstack_citest;\npostgres=# create database openstack_baremetal_citest with owner\n            openstack_citest;\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'ConfigParser'
newline|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'urlparse'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
name|'import'
name|'repository'
newline|'\n'
name|'import'
name|'sqlalchemy'
newline|'\n'
name|'import'
name|'sqlalchemy'
op|'.'
name|'exc'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'utils'
name|'as'
name|'db_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'gettextutils'
name|'import'
name|'_'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_get_connect_string
name|'def'
name|'_get_connect_string'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Try to get a connection with a very specific set of values, if we get\n    these then we\'ll run the tests, otherwise they are skipped\n    """'
newline|'\n'
name|'if'
name|'backend'
op|'=='
string|'"postgres"'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
string|'"postgresql+psycopg2"'
newline|'\n'
dedent|''
name|'elif'
name|'backend'
op|'=='
string|'"mysql"'
op|':'
newline|'\n'
indent|'        '
name|'backend'
op|'='
string|'"mysql+mysqldb"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'raise'
name|'Exception'
op|'('
string|'"Unrecognized backend: \'%s\'"'
op|'%'
name|'backend'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
string|'"%s://%s:%s@localhost/%s"'
op|'%'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_is_backend_avail
dedent|''
name|'def'
name|'_is_backend_avail'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'try'
op|':'
newline|'\n'
indent|'        '
name|'connect_uri'
op|'='
name|'_get_connect_string'
op|'('
name|'backend'
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_uri'
op|')'
newline|'\n'
name|'connection'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|"# intentionally catch all to handle exceptions even if we don't"
nl|'\n'
comment|'# have any backend code loaded.'
nl|'\n'
indent|'        '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_have_mysql
dedent|''
dedent|''
name|'def'
name|'_have_mysql'
op|'('
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'present'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MYSQL_PRESENT'"
op|')'
newline|'\n'
name|'if'
name|'present'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_is_backend_avail'
op|'('
string|"'mysql'"
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'present'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"''"
op|','
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_have_postgresql
dedent|''
name|'def'
name|'_have_postgresql'
op|'('
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'present'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_POSTGRESQL_PRESENT'"
op|')'
newline|'\n'
name|'if'
name|'present'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'_is_backend_avail'
op|'('
string|"'postgres'"
op|','
name|'user'
op|','
name|'passwd'
op|','
name|'database'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'present'
op|'.'
name|'lower'
op|'('
op|')'
name|'in'
op|'('
string|"''"
op|','
string|"'true'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_mysql_connection_info
dedent|''
name|'def'
name|'get_mysql_connection_info'
op|'('
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'database'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'loc_pieces'
op|'='
name|'conn_pieces'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'loc_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
name|'auth_pieces'
op|'='
name|'loc_pieces'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'user'
op|'='
name|'auth_pieces'
op|'['
number|'0'
op|']'
newline|'\n'
name|'password'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'auth_pieces'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'auth_pieces'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'password'
op|'='
string|'"-p\\"%s\\""'
op|'%'
name|'auth_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_pgsql_connection_info
dedent|''
name|'def'
name|'get_pgsql_connection_info'
op|'('
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'database'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'loc_pieces'
op|'='
name|'conn_pieces'
op|'.'
name|'netloc'
op|'.'
name|'split'
op|'('
string|"'@'"
op|')'
newline|'\n'
name|'host'
op|'='
name|'loc_pieces'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'auth_pieces'
op|'='
name|'loc_pieces'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"':'"
op|')'
newline|'\n'
name|'user'
op|'='
name|'auth_pieces'
op|'['
number|'0'
op|']'
newline|'\n'
name|'password'
op|'='
string|'""'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'auth_pieces'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'        '
name|'password'
op|'='
name|'auth_pieces'
op|'['
number|'1'
op|']'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'return'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommonTestsMixIn
dedent|''
name|'class'
name|'CommonTestsMixIn'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""These tests are shared between TestNovaMigrations and\n    TestBaremetalMigrations.\n\n    BaseMigrationTestCase is effectively an abstract class, meant to be derived\n    from and not directly tested against; that\'s why these `test_` methods need\n    to be on a Mixin, so that they won\'t be picked up as valid tests for\n    BaseMigrationTestCase.\n    """'
newline|'\n'
DECL|member|test_walk_versions
name|'def'
name|'test_walk_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
comment|'# We start each walk with a completely blank slate.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reset_database'
op|'('
name|'key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'snake_walk'
op|','
name|'self'
op|'.'
name|'downgrade'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mysql_opportunistically
dedent|''
dedent|''
name|'def'
name|'test_mysql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_mysql_opportunistically'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mysql_connect_fail
dedent|''
name|'def'
name|'test_mysql_connect_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can trigger a mysql connection failure and we fail\n        gracefully to ensure we don\'t break people without mysql\n        """'
newline|'\n'
name|'if'
name|'_is_backend_avail'
op|'('
string|"'mysql'"
op|','
string|'"openstack_cifail"'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Shouldn\'t have connected"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_postgresql_opportunistically
dedent|''
dedent|''
name|'def'
name|'test_postgresql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_postgresql_opportunistically'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_postgresql_connect_fail
dedent|''
name|'def'
name|'test_postgresql_connect_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can trigger a postgres connection failure and we fail\n        gracefully to ensure we don\'t break people without postgres\n        """'
newline|'\n'
name|'if'
name|'_is_backend_avail'
op|'('
string|"'postgres'"
op|','
string|'"openstack_cifail"'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Shouldn\'t have connected"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseMigrationTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'BaseMigrationTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for testing migrations and migration utils. This sets up\n    and configures the databases to run tests against.\n    """'
newline|'\n'
nl|'\n'
comment|'# NOTE(jhesketh): It is expected that tests clean up after themselves.'
nl|'\n'
comment|'# This is necessary for concurrency to allow multiple tests to work on'
nl|'\n'
comment|'# one database.'
nl|'\n'
comment|'# The full migration walk tests however do call the old _reset_databases()'
nl|'\n'
comment|'# to throw away whatever was there so they need to operate on their own'
nl|'\n'
comment|"# database that we know isn't accessed concurrently."
nl|'\n'
comment|'# Hence, BaseWalkMigrationTestCase overwrites the engine list.'
nl|'\n'
nl|'\n'
DECL|variable|USER
name|'USER'
op|'='
name|'None'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
name|'None'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|TIMEOUT_SCALING_FACTOR
name|'TIMEOUT_SCALING_FACTOR'
op|'='
number|'2'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'test_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'snake_walk'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'downgrade'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'migration'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseMigrationTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_load_config'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_config
dedent|''
name|'def'
name|'_load_config'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Load test databases from the config file. Only do this'
nl|'\n'
comment|'# once. No need to re-run this on each test...'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'config_path is %s'"
op|'%'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cp'
op|'='
name|'ConfigParser'
op|'.'
name|'RawConfigParser'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'config'
op|'='
name|'cp'
op|'.'
name|'options'
op|'('
string|"'unit_tests'"
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'config'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
op|'='
name|'cp'
op|'.'
name|'get'
op|'('
string|"'unit_tests'"
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'snake_walk'
op|'='
name|'cp'
op|'.'
name|'getboolean'
op|'('
string|"'walk_style'"
op|','
string|"'snake_walk'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'downgrade'
op|'='
name|'cp'
op|'.'
name|'getboolean'
op|'('
string|"'walk_style'"
op|','
string|"'downgrade'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'except'
name|'ConfigParser'
op|'.'
name|'ParsingError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to read test_migrations.conf config "'
nl|'\n'
string|'"file. Got error: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to find test_migrations.conf config "'
nl|'\n'
string|'"file."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'engines'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'test_databases'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'engines'
op|'['
name|'key'
op|']'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(jhesketh): We only need to make sure the databases are created'
nl|'\n'
comment|'# not necessarily clean of tables.'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_databases'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|execute_cmd
dedent|''
name|'def'
name|'execute_cmd'
op|'('
name|'self'
op|','
name|'cmd'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'out'
op|','
name|'err'
op|'='
name|'processutils'
op|'.'
name|'trycmd'
op|'('
name|'cmd'
op|','
name|'shell'
op|'='
name|'True'
op|','
name|'discard_warnings'
op|'='
name|'True'
op|')'
newline|'\n'
name|'output'
op|'='
name|'out'
name|'or'
name|'err'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
name|'output'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"''"
op|','
name|'err'
op|','
nl|'\n'
string|'"Failed to run: %s\\n%s"'
op|'%'
op|'('
name|'cmd'
op|','
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'pgadmin'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_reset_pg
name|'def'
name|'_reset_pg'
op|'('
name|'self'
op|','
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_pgsql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGPASSWORD'"
op|']'
op|'='
name|'password'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGUSER'"
op|']'
op|'='
name|'user'
newline|'\n'
comment|"# note(boris-42): We must create and drop database, we can't"
nl|'\n'
comment|'# drop database which we have connected to, so for such'
nl|'\n'
comment|'# operations there is a special database template1.'
nl|'\n'
name|'sqlcmd'
op|'='
op|'('
string|'"psql -w -U %(user)s -h %(host)s -c"'
nl|'\n'
string|'" \'%(sql)s\' -d template1"'
op|')'
newline|'\n'
name|'sqldict'
op|'='
op|'{'
string|"'user'"
op|':'
name|'user'
op|','
string|"'host'"
op|':'
name|'host'
op|'}'
newline|'\n'
nl|'\n'
name|'sqldict'
op|'['
string|"'sql'"
op|']'
op|'='
op|'('
string|'"drop database if exists %s;"'
op|')'
op|'%'
name|'database'
newline|'\n'
name|'droptable'
op|'='
name|'sqlcmd'
op|'%'
name|'sqldict'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'droptable'
op|')'
newline|'\n'
nl|'\n'
name|'sqldict'
op|'['
string|"'sql'"
op|']'
op|'='
op|'('
string|'"create database %s;"'
op|')'
op|'%'
name|'database'
newline|'\n'
name|'createtable'
op|'='
name|'sqlcmd'
op|'%'
name|'sqldict'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'createtable'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGPASSWORD'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGUSER'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'mysql'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_reset_mysql
name|'def'
name|'_reset_mysql'
op|'('
name|'self'
op|','
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
comment|'# We can execute the MySQL client to destroy and re-create'
nl|'\n'
comment|'# the MYSQL database, which is easier and less error-prone'
nl|'\n'
comment|'# than using SQLAlchemy to do this via MetaData...trust me.'
nl|'\n'
indent|'        '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'sql'
op|'='
op|'('
string|'"drop database if exists %(database)s; "'
nl|'\n'
string|'"create database %(database)s;"'
op|'%'
op|'{'
string|"'database'"
op|':'
name|'database'
op|'}'
op|')'
newline|'\n'
name|'cmd'
op|'='
op|'('
string|'"mysql -u \\"%(user)s\\" %(password)s -h %(host)s "'
nl|'\n'
string|'"-e \\"%(sql)s\\""'
op|'%'
op|'{'
string|"'user'"
op|':'
name|'user'
op|','
string|"'password'"
op|':'
name|'password'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host'
op|','
string|"'sql'"
op|':'
name|'sql'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'cmd'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'utils'
op|'.'
name|'synchronized'
op|'('
string|"'sqlite'"
op|','
name|'external'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|member|_reset_sqlite
name|'def'
name|'_reset_sqlite'
op|'('
name|'self'
op|','
name|'conn_pieces'
op|')'
op|':'
newline|'\n'
comment|'# We can just delete the SQLite database, which is'
nl|'\n'
comment|'# the easiest and cleanest solution'
nl|'\n'
indent|'        '
name|'db_path'
op|'='
name|'conn_pieces'
op|'.'
name|'path'
op|'.'
name|'strip'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'db_path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'db_path'
op|')'
newline|'\n'
comment|'# No need to recreate the SQLite DB. SQLite will'
nl|'\n'
comment|"# create it for us if it's not there..."
nl|'\n'
nl|'\n'
DECL|member|_create_databases
dedent|''
dedent|''
name|'def'
name|'_create_databases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create all configured databases as needed."""'
newline|'\n'
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_database'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_database
dedent|''
dedent|''
name|'def'
name|'_create_database'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create database if it doesn\'t exist."""'
newline|'\n'
name|'conn_string'
op|'='
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
newline|'\n'
name|'conn_pieces'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'conn_string'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'mysql'"
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'sql'
op|'='
string|'"create database if not exists %s;"'
op|'%'
name|'database'
newline|'\n'
name|'cmd'
op|'='
op|'('
string|'"mysql -u \\"%(user)s\\" %(password)s -h %(host)s "'
nl|'\n'
string|'"-e \\"%(sql)s\\""'
op|'%'
op|'{'
string|"'user'"
op|':'
name|'user'
op|','
string|"'password'"
op|':'
name|'password'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host'
op|','
string|"'sql'"
op|':'
name|'sql'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'execute_cmd'
op|'('
name|'cmd'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'postgresql'"
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_pgsql_connection_info'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGPASSWORD'"
op|']'
op|'='
name|'password'
newline|'\n'
name|'os'
op|'.'
name|'environ'
op|'['
string|"'PGUSER'"
op|']'
op|'='
name|'user'
newline|'\n'
nl|'\n'
name|'sqlcmd'
op|'='
op|'('
string|'"psql -w -U %(user)s -h %(host)s -c"'
nl|'\n'
string|'" \'%(sql)s\' -d template1"'
op|')'
newline|'\n'
nl|'\n'
name|'sql'
op|'='
op|'('
string|'"create database if not exists %s;"'
op|')'
op|'%'
name|'database'
newline|'\n'
name|'createtable'
op|'='
name|'sqlcmd'
op|'%'
op|'{'
string|"'user'"
op|':'
name|'user'
op|','
string|"'host'"
op|':'
name|'host'
op|','
string|"'sql'"
op|':'
name|'sql'
op|'}'
newline|'\n'
comment|'# 0 means databases is created'
nl|'\n'
comment|'# 256 means it already exists (which is fine)'
nl|'\n'
comment|'# otherwise raise an error'
nl|'\n'
name|'out'
op|','
name|'err'
op|'='
name|'processutils'
op|'.'
name|'trycmd'
op|'('
name|'createtable'
op|','
name|'shell'
op|'='
name|'True'
op|','
nl|'\n'
name|'check_exit_code'
op|'='
op|'['
number|'0'
op|','
number|'256'
op|']'
op|','
nl|'\n'
name|'discard_warnings'
op|'='
name|'True'
op|')'
newline|'\n'
name|'output'
op|'='
name|'out'
name|'or'
name|'err'
newline|'\n'
name|'if'
name|'err'
op|'!='
string|"''"
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to run: %s\\n%s"'
op|'%'
op|'('
name|'createtable'
op|','
name|'output'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGPASSWORD'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unsetenv'
op|'('
string|"'PGUSER'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reset_databases
dedent|''
dedent|''
name|'def'
name|'_reset_databases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset all configured databases."""'
newline|'\n'
name|'for'
name|'key'
op|','
name|'engine'
name|'in'
name|'self'
op|'.'
name|'engines'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reset_database'
op|'('
name|'key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reset_database
dedent|''
dedent|''
name|'def'
name|'_reset_database'
op|'('
name|'self'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Reset specific database."""'
newline|'\n'
name|'engine'
op|'='
name|'self'
op|'.'
name|'engines'
op|'['
name|'key'
op|']'
newline|'\n'
name|'conn_string'
op|'='
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
newline|'\n'
name|'conn_pieces'
op|'='
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'conn_string'
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'dispose'
op|'('
op|')'
newline|'\n'
name|'if'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'sqlite'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reset_sqlite'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'mysql'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reset_mysql'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'conn_string'
op|'.'
name|'startswith'
op|'('
string|"'postgresql'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_reset_pg'
op|'('
name|'conn_pieces'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseWalkMigrationTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'BaseWalkMigrationTestCase'
op|'('
name|'BaseMigrationTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""BaseWalkMigrationTestCase loads in an alternative set of databases for\n    testing against. This is necessary as the default databases can run tests\n    concurrently without interfering with itself. It is expected that\n    databases listed under [migraiton_dbs] in the configuration are only being\n    accessed by one test at a time. Currently only test_walk_versions accesses\n    the databases (and is the only method that calls _reset_database() which\n    is clearly problematic for concurrency).\n    """'
newline|'\n'
nl|'\n'
DECL|member|_load_config
name|'def'
name|'_load_config'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Load test databases from the config file. Only do this'
nl|'\n'
comment|'# once. No need to re-run this on each test...'
nl|'\n'
indent|'        '
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'config_path is %s'"
op|'%'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'cp'
op|'='
name|'ConfigParser'
op|'.'
name|'RawConfigParser'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'cp'
op|'.'
name|'read'
op|'('
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|')'
newline|'\n'
name|'config'
op|'='
name|'cp'
op|'.'
name|'options'
op|'('
string|"'migration_dbs'"
op|')'
newline|'\n'
name|'for'
name|'key'
name|'in'
name|'config'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'key'
op|']'
op|'='
name|'cp'
op|'.'
name|'get'
op|'('
string|"'migration_dbs'"
op|','
name|'key'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'snake_walk'
op|'='
name|'cp'
op|'.'
name|'getboolean'
op|'('
string|"'walk_style'"
op|','
string|"'snake_walk'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'downgrade'
op|'='
name|'cp'
op|'.'
name|'getboolean'
op|'('
string|"'walk_style'"
op|','
string|"'downgrade'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'ConfigParser'
op|'.'
name|'ParsingError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to read test_migrations.conf config "'
nl|'\n'
string|'"file. Got error: %s"'
op|'%'
name|'e'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"Failed to find test_migrations.conf config "'
nl|'\n'
string|'"file."'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'engines'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'self'
op|'.'
name|'test_databases'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'engines'
op|'['
name|'key'
op|']'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'value'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_create_databases'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_mysql_opportunistically
dedent|''
name|'def'
name|'_test_mysql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that table creation on mysql only builds InnoDB tables'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'_have_mysql'
op|'('
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"mysql not available"'
op|')'
newline|'\n'
comment|"# add this to the global lists to make reset work with it, it's removed"
nl|'\n'
comment|'# automatically in tearDown so no need to clean it up here.'
nl|'\n'
dedent|''
name|'connect_string'
op|'='
name|'_get_connect_string'
op|'('
string|'"mysql"'
op|','
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
nl|'\n'
name|'self'
op|'.'
name|'DATABASE'
op|')'
newline|'\n'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'connect_string'
op|')'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_string'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|'='
name|'engine'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|'='
name|'connect_string'
newline|'\n'
nl|'\n'
comment|'# build a fully populated mysql database with all the tables'
nl|'\n'
name|'self'
op|'.'
name|'_reset_database'
op|'('
name|'database'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'snake_walk'
op|','
name|'self'
op|'.'
name|'downgrade'
op|')'
newline|'\n'
nl|'\n'
name|'connection'
op|'='
name|'engine'
op|'.'
name|'connect'
op|'('
op|')'
newline|'\n'
comment|'# sanity check'
nl|'\n'
name|'total'
op|'='
name|'connection'
op|'.'
name|'execute'
op|'('
string|'"SELECT count(*) "'
nl|'\n'
string|'"from information_schema.TABLES "'
nl|'\n'
string|'"where TABLE_SCHEMA=\'%(database)s\'"'
op|'%'
nl|'\n'
op|'{'
string|"'database'"
op|':'
name|'database'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'total'
op|'.'
name|'scalar'
op|'('
op|')'
op|'>'
number|'0'
op|','
string|'"No tables found. Wrong schema?"'
op|')'
newline|'\n'
nl|'\n'
name|'noninnodb'
op|'='
name|'connection'
op|'.'
name|'execute'
op|'('
string|'"SELECT count(*) "'
nl|'\n'
string|'"from information_schema.TABLES "'
nl|'\n'
string|'"where TABLE_SCHEMA=\'%(database)s\' "'
nl|'\n'
string|'"and ENGINE!=\'InnoDB\' "'
nl|'\n'
string|'"and TABLE_NAME!=\'migrate_version\'"'
op|'%'
nl|'\n'
op|'{'
string|"'database'"
op|':'
name|'database'
op|'}'
op|')'
newline|'\n'
name|'count'
op|'='
name|'noninnodb'
op|'.'
name|'scalar'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'count'
op|','
number|'0'
op|','
string|'"%d non InnoDB tables created"'
op|'%'
name|'count'
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'del'
op|'('
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|')'
newline|'\n'
name|'del'
op|'('
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_postgresql_opportunistically
dedent|''
name|'def'
name|'_test_postgresql_opportunistically'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test postgresql database migration walk'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'_have_postgresql'
op|'('
name|'self'
op|'.'
name|'USER'
op|','
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"postgresql not available"'
op|')'
newline|'\n'
comment|"# add this to the global lists to make reset work with it, it's removed"
nl|'\n'
comment|'# automatically in tearDown so no need to clean it up here.'
nl|'\n'
dedent|''
name|'connect_string'
op|'='
name|'_get_connect_string'
op|'('
string|'"postgres"'
op|','
name|'self'
op|'.'
name|'USER'
op|','
nl|'\n'
name|'self'
op|'.'
name|'PASSWD'
op|','
name|'self'
op|'.'
name|'DATABASE'
op|')'
newline|'\n'
name|'engine'
op|'='
name|'sqlalchemy'
op|'.'
name|'create_engine'
op|'('
name|'connect_string'
op|')'
newline|'\n'
op|'('
name|'user'
op|','
name|'password'
op|','
name|'database'
op|','
name|'host'
op|')'
op|'='
name|'get_mysql_connection_info'
op|'('
name|'urlparse'
op|'.'
name|'urlparse'
op|'('
name|'connect_string'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|'='
name|'engine'
newline|'\n'
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|'='
name|'connect_string'
newline|'\n'
nl|'\n'
comment|'# build a fully populated postgresql database with all the tables'
nl|'\n'
name|'self'
op|'.'
name|'_reset_database'
op|'('
name|'database'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_walk_versions'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'snake_walk'
op|','
name|'self'
op|'.'
name|'downgrade'
op|')'
newline|'\n'
name|'del'
op|'('
name|'self'
op|'.'
name|'engines'
op|'['
name|'database'
op|']'
op|')'
newline|'\n'
name|'del'
op|'('
name|'self'
op|'.'
name|'test_databases'
op|'['
name|'database'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_walk_versions
dedent|''
name|'def'
name|'_walk_versions'
op|'('
name|'self'
op|','
name|'engine'
op|'='
name|'None'
op|','
name|'snake_walk'
op|'='
name|'False'
op|','
name|'downgrade'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
comment|'# Determine latest version script from the repo, then'
nl|'\n'
comment|'# upgrade from 1 through to the latest, with no data'
nl|'\n'
comment|'# in the databases. This just checks that the schema itself'
nl|'\n'
comment|'# upgrades successfully.'
nl|'\n'
nl|'\n'
comment|'# Place the database under version control'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'version_control'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|','
nl|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'INIT_VERSION'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|"'latest version is %s'"
op|'%'
name|'self'
op|'.'
name|'REPOSITORY'
op|'.'
name|'latest'
op|')'
newline|'\n'
name|'versions'
op|'='
name|'range'
op|'('
name|'self'
op|'.'
name|'INIT_VERSION'
op|'+'
number|'1'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|'.'
name|'latest'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'version'
name|'in'
name|'versions'
op|':'
newline|'\n'
comment|'# upgrade -> downgrade -> upgrade'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'snake_walk'
op|':'
newline|'\n'
indent|'                '
name|'downgraded'
op|'='
name|'self'
op|'.'
name|'_migrate_down'
op|'('
nl|'\n'
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|','
name|'with_data'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'downgraded'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'if'
name|'downgrade'
op|':'
newline|'\n'
comment|'# Now walk it back down to 0 from the latest, testing'
nl|'\n'
comment|'# the downgrade paths.'
nl|'\n'
indent|'            '
name|'for'
name|'version'
name|'in'
name|'reversed'
op|'('
name|'versions'
op|')'
op|':'
newline|'\n'
comment|'# downgrade -> upgrade -> downgrade'
nl|'\n'
indent|'                '
name|'downgraded'
op|'='
name|'self'
op|'.'
name|'_migrate_down'
op|'('
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'snake_walk'
name|'and'
name|'downgraded'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'_migrate_up'
op|'('
name|'engine'
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_migrate_down'
op|'('
name|'engine'
op|','
name|'version'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_migrate_down
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_migrate_down'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'downgrade'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|','
name|'version'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
comment|'# NOTE(sirp): some migrations, namely release-level'
nl|'\n'
comment|"# migrations, don't support a downgrade."
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(sirp): `version` is what we're downgrading to (i.e. the 'target'"
nl|'\n'
comment|'# version). So if we have any downgrade checks, they need to be run for'
nl|'\n'
comment|'# the previous (higher numbered) migration.'
nl|'\n'
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'            '
name|'post_downgrade'
op|'='
name|'getattr'
op|'('
nl|'\n'
name|'self'
op|','
string|'"_post_downgrade_%03d"'
op|'%'
op|'('
name|'version'
op|'+'
number|'1'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'post_downgrade'
op|':'
newline|'\n'
indent|'                '
name|'post_downgrade'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_migrate_up
dedent|''
name|'def'
name|'_migrate_up'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'version'
op|','
name|'with_data'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""migrate up to a new version of the db.\n\n        We allow for data insertion and post checks at every\n        migration version with special _pre_upgrade_### and\n        _check_### functions in the main test.\n        """'
newline|'\n'
comment|"# NOTE(sdague): try block is here because it's impossible to debug"
nl|'\n'
comment|'# where a failed data migration happens otherwise'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'                '
name|'data'
op|'='
name|'None'
newline|'\n'
name|'pre_upgrade'
op|'='
name|'getattr'
op|'('
nl|'\n'
name|'self'
op|','
string|'"_pre_upgrade_%03d"'
op|'%'
name|'version'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'pre_upgrade'
op|':'
newline|'\n'
indent|'                    '
name|'data'
op|'='
name|'pre_upgrade'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'upgrade'
op|'('
name|'engine'
op|','
name|'self'
op|'.'
name|'REPOSITORY'
op|','
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'version'
op|','
nl|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'.'
name|'db_version'
op|'('
name|'engine'
op|','
nl|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|')'
op|')'
newline|'\n'
name|'if'
name|'with_data'
op|':'
newline|'\n'
indent|'                '
name|'check'
op|'='
name|'getattr'
op|'('
name|'self'
op|','
string|'"_check_%03d"'
op|'%'
name|'version'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'check'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'('
name|'engine'
op|','
name|'data'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'error'
op|'('
string|'"Failed to migrate to version %s on engine %s"'
op|'%'
nl|'\n'
op|'('
name|'version'
op|','
name|'engine'
op|')'
op|')'
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNovaMigrations
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestNovaMigrations'
op|'('
name|'BaseWalkMigrationTestCase'
op|','
name|'CommonTestsMixIn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test sqlalchemy-migrate migrations."""'
newline|'\n'
DECL|variable|USER
name|'USER'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
string|'"openstack_citest"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNovaMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'test_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
string|"'NOVA_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNovaMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'migration'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration'
op|'='
name|'__import__'
op|'('
string|"'nova.db.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'db_initial_version'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
name|'self'
op|'.'
name|'migration'
op|'.'
name|'db_initial_version'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'migration_api'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'temp'
op|'='
name|'__import__'
op|'('
string|"'nova.db.sqlalchemy.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'versioning_api'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'temp'
op|'.'
name|'versioning_api'
newline|'\n'
nl|'\n'
DECL|member|assertColumnExists
dedent|''
dedent|''
name|'def'
name|'assertColumnExists'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'table'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'table'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'column'
op|','
name|'t'
op|'.'
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertColumnNotExists
dedent|''
name|'def'
name|'assertColumnNotExists'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'table'
op|','
name|'column'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'table'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
name|'column'
op|','
name|'t'
op|'.'
name|'c'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertIndexExists
dedent|''
name|'def'
name|'assertIndexExists'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'table'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'t'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'table'
op|')'
newline|'\n'
name|'index_names'
op|'='
op|'['
name|'idx'
op|'.'
name|'name'
name|'for'
name|'idx'
name|'in'
name|'t'
op|'.'
name|'indexes'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'index'
op|','
name|'index_names'
op|')'
newline|'\n'
nl|'\n'
DECL|member|assertIndexMembers
dedent|''
name|'def'
name|'assertIndexMembers'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'table'
op|','
name|'index'
op|','
name|'members'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIndexExists'
op|'('
name|'engine'
op|','
name|'table'
op|','
name|'index'
op|')'
newline|'\n'
nl|'\n'
name|'t'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
name|'table'
op|')'
newline|'\n'
name|'index_columns'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'t'
op|'.'
name|'indexes'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'idx'
op|'.'
name|'name'
op|'=='
name|'index'
op|':'
newline|'\n'
indent|'                '
name|'index_columns'
op|'='
name|'idx'
op|'.'
name|'columns'
op|'.'
name|'keys'
op|'('
op|')'
newline|'\n'
name|'break'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sorted'
op|'('
name|'members'
op|')'
op|','
name|'sorted'
op|'('
name|'index_columns'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_227
dedent|''
name|'def'
name|'_check_227'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'project_user_quotas'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Insert fake_quotas with the longest resource name.'
nl|'\n'
name|'fake_quotas'
op|'='
op|'{'
string|"'id'"
op|':'
number|'5'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
string|"'fake_user'"
op|','
nl|'\n'
string|"'resource'"
op|':'
string|"'injected_file_content_bytes'"
op|','
nl|'\n'
string|"'hard_limit'"
op|':'
number|'10'
op|'}'
newline|'\n'
name|'table'
op|'.'
name|'insert'
op|'('
op|')'
op|'.'
name|'execute'
op|'('
name|'fake_quotas'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check we can get the longest resource name.'
nl|'\n'
name|'quota'
op|'='
name|'table'
op|'.'
name|'select'
op|'('
name|'table'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
number|'5'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'first'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quota'
op|'['
string|"'resource'"
op|']'
op|','
string|"'injected_file_content_bytes'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_228
dedent|''
name|'def'
name|'_check_228'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertColumnExists'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|','
string|"'metrics'"
op|')'
newline|'\n'
nl|'\n'
name|'compute_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'metrics'
op|'.'
name|'type'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'Text'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_228
dedent|''
name|'def'
name|'_post_downgrade_228'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertColumnNotExists'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|','
string|"'metrics'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_229
dedent|''
name|'def'
name|'_check_229'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertColumnExists'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|','
string|"'extra_resources'"
op|')'
newline|'\n'
nl|'\n'
name|'compute_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'compute_nodes'
op|'.'
name|'c'
op|'.'
name|'extra_resources'
op|'.'
name|'type'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'Text'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_229
dedent|''
name|'def'
name|'_post_downgrade_229'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertColumnNotExists'
op|'('
name|'engine'
op|','
string|"'compute_nodes'"
op|','
string|"'extra_resources'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_230
dedent|''
name|'def'
name|'_check_230'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table_name'
name|'in'
op|'['
string|"'instance_actions_events'"
op|','
nl|'\n'
string|"'shadow_instance_actions_events'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertColumnExists'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
string|"'host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertColumnExists'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
string|"'details'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'action_events'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'instance_actions_events'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'action_events'
op|'.'
name|'c'
op|'.'
name|'host'
op|'.'
name|'type'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'String'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'action_events'
op|'.'
name|'c'
op|'.'
name|'details'
op|'.'
name|'type'
op|','
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'types'
op|'.'
name|'Text'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_230
dedent|''
name|'def'
name|'_post_downgrade_230'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'table_name'
name|'in'
op|'['
string|"'instance_actions_events'"
op|','
nl|'\n'
string|"'shadow_instance_actions_events'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertColumnNotExists'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
string|"'host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertColumnNotExists'
op|'('
name|'engine'
op|','
name|'table_name'
op|','
string|"'details'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestBaremetalMigrations
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestBaremetalMigrations'
op|'('
name|'BaseWalkMigrationTestCase'
op|','
name|'CommonTestsMixIn'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test sqlalchemy-migrate migrations."""'
newline|'\n'
DECL|variable|USER
name|'USER'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|PASSWD
name|'PASSWD'
op|'='
string|'"openstack_citest"'
newline|'\n'
DECL|variable|DATABASE
name|'DATABASE'
op|'='
string|'"openstack_baremetal_citest"'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaremetalMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
nl|'\n'
string|"'../virt/baremetal/test_baremetal_migrations.conf'"
op|')'
newline|'\n'
comment|'# Test machines can set the NOVA_TEST_MIGRATIONS_CONF variable'
nl|'\n'
comment|'# to override the location of the config file for migration testing'
nl|'\n'
name|'self'
op|'.'
name|'CONFIG_FILE_PATH'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'BAREMETAL_TEST_MIGRATIONS_CONF'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'DEFAULT_CONFIG_FILE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|'='
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'baremetal'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'migrate_repo'
op|'.'
name|'__file__'
newline|'\n'
name|'self'
op|'.'
name|'REPOSITORY'
op|'='
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'self'
op|'.'
name|'MIGRATE_FILE'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|setUp
dedent|''
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestBaremetalMigrations'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'migration'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'migration'
op|'='
name|'__import__'
op|'('
string|"'nova.virt.baremetal.db.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'db_initial_version'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'INIT_VERSION'
op|'='
name|'self'
op|'.'
name|'migration'
op|'.'
name|'db_initial_version'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'migration_api'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'temp'
op|'='
name|'__import__'
op|'('
string|"'nova.virt.baremetal.db.sqlalchemy.migration'"
op|','
nl|'\n'
name|'globals'
op|'('
op|')'
op|','
name|'locals'
op|'('
op|')'
op|','
op|'['
string|"'versioning_api'"
op|']'
op|','
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'migration_api'
op|'='
name|'temp'
op|'.'
name|'versioning_api'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_002
dedent|''
dedent|''
name|'def'
name|'_pre_upgrade_002'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'key'"
op|':'
string|"'fake-key'"
op|','
string|"'image_path'"
op|':'
string|"'/dev/null'"
op|','
nl|'\n'
string|"'pxe_config_path'"
op|':'
string|"'/dev/null/'"
op|','
string|"'root_mb'"
op|':'
number|'0'
op|','
string|"'swap_mb'"
op|':'
number|'0'
op|'}'
op|']'
newline|'\n'
name|'table'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_deployments'"
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'table'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_002
dedent|''
name|'def'
name|'_check_002'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sqlalchemy'
op|'.'
name|'exc'
op|'.'
name|'NoSuchTableError'
op|','
nl|'\n'
name|'db_utils'
op|'.'
name|'get_table'
op|','
name|'engine'
op|','
string|"'bm_deployments'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_004
dedent|''
name|'def'
name|'_post_downgrade_004'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'instance_name'"
op|','
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'bm_nodes'
op|'.'
name|'columns'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_005
dedent|''
name|'def'
name|'_check_005'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'columns'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'bm_nodes'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'prov_vlan_id'"
op|','
name|'columns'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'registration_status'"
op|','
name|'columns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_006
dedent|''
name|'def'
name|'_pre_upgrade_006'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'ifs'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_interfaces'"
op|')'
newline|'\n'
comment|'# node 1 has two diffrent addresses in bm_nodes and bm_interfaces'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'nodes'
op|'.'
name|'insert'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'prov_mac_address'"
op|':'
string|"'aa:aa:aa:aa:aa:aa'"
op|'}'
op|']'
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'ifs'
op|'.'
name|'insert'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'id'"
op|':'
number|'101'
op|','
nl|'\n'
string|"'bm_node_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'bb:bb:bb:bb:bb:bb'"
op|'}'
op|']'
op|')'
newline|'\n'
comment|'# node 2 has one same address both in bm_nodes and bm_interfaces'
nl|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'nodes'
op|'.'
name|'insert'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'prov_mac_address'"
op|':'
string|"'cc:cc:cc:cc:cc:cc'"
op|'}'
op|']'
op|')'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'ifs'
op|'.'
name|'insert'
op|'('
op|')'
op|','
nl|'\n'
op|'['
op|'{'
string|"'id'"
op|':'
number|'201'
op|','
nl|'\n'
string|"'bm_node_id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'cc:cc:cc:cc:cc:cc'"
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_006
dedent|''
name|'def'
name|'_check_006'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ifs'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_interfaces'"
op|')'
newline|'\n'
name|'rows'
op|'='
name|'ifs'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'bm_node_id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'rows'
op|'='
name|'ifs'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'bm_node_id'
op|'=='
number|'2'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rows'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
string|"'cc:cc:cc:cc:cc:cc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_006
dedent|''
name|'def'
name|'_post_downgrade_006'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ifs'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_interfaces'"
op|')'
newline|'\n'
name|'rows'
op|'='
name|'ifs'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'bm_node_id'
op|'=='
number|'1'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rows'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
string|"'bb:bb:bb:bb:bb:bb'"
op|')'
newline|'\n'
nl|'\n'
name|'rows'
op|'='
name|'ifs'
op|'.'
name|'select'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'ifs'
op|'.'
name|'c'
op|'.'
name|'bm_node_id'
op|'=='
number|'2'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
op|'.'
name|'fetchall'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rows'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_007
dedent|''
name|'def'
name|'_check_007'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'columns'
op|'='
op|'['
name|'c'
op|'.'
name|'name'
name|'for'
name|'c'
name|'in'
name|'bm_nodes'
op|'.'
name|'columns'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"u'prov_mac_address'"
op|','
name|'columns'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_008
dedent|''
name|'def'
name|'_check_008'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'sqlalchemy'
op|'.'
name|'exc'
op|'.'
name|'NoSuchTableError'
op|','
nl|'\n'
name|'db_utils'
op|'.'
name|'get_table'
op|','
name|'engine'
op|','
string|"'bm_pxe_ips'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_008
dedent|''
name|'def'
name|'_post_downgrade_008'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_pxe_ips'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_pre_upgrade_010
dedent|''
name|'def'
name|'_pre_upgrade_010'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'data'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'10'
op|','
string|"'prov_mac_address'"
op|':'
string|"'cc:cc:cc:cc:cc:cc'"
op|'}'
op|']'
newline|'\n'
name|'engine'
op|'.'
name|'execute'
op|'('
name|'bm_nodes'
op|'.'
name|'insert'
op|'('
op|')'
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'data'
newline|'\n'
nl|'\n'
DECL|member|_check_010
dedent|''
name|'def'
name|'_check_010'
op|'('
name|'self'
op|','
name|'engine'
op|','
name|'data'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'preserve_ephemeral'"
op|','
name|'bm_nodes'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
name|'default'
op|'='
name|'engine'
op|'.'
name|'execute'
op|'('
nl|'\n'
name|'sqlalchemy'
op|'.'
name|'select'
op|'('
op|'['
name|'bm_nodes'
op|'.'
name|'c'
op|'.'
name|'preserve_ephemeral'
op|']'
op|')'
nl|'\n'
op|'.'
name|'where'
op|'('
name|'bm_nodes'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'data'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
nl|'\n'
op|')'
op|'.'
name|'scalar'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'default'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'bm_nodes'
op|'.'
name|'delete'
op|'('
op|')'
op|'.'
name|'where'
op|'('
name|'bm_nodes'
op|'.'
name|'c'
op|'.'
name|'id'
op|'=='
name|'data'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'execute'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_post_downgrade_010
dedent|''
name|'def'
name|'_post_downgrade_010'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bm_nodes'
op|'='
name|'db_utils'
op|'.'
name|'get_table'
op|'('
name|'engine'
op|','
string|"'bm_nodes'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'preserve_ephemeral'"
op|','
name|'bm_nodes'
op|'.'
name|'columns'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ProjectTestCase
dedent|''
dedent|''
name|'class'
name|'ProjectTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_all_migrations_have_downgrade
indent|'    '
name|'def'
name|'test_all_migrations_have_downgrade'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'topdir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|'+'
string|"'/../../../'"
op|')'
newline|'\n'
name|'py_glob'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'topdir'
op|','
string|'"nova"'
op|','
string|'"db"'
op|','
string|'"sqlalchemy"'
op|','
nl|'\n'
string|'"migrate_repo"'
op|','
string|'"versions"'
op|','
string|'"*.py"'
op|')'
newline|'\n'
nl|'\n'
name|'missing_downgrade'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'path'
name|'in'
name|'glob'
op|'.'
name|'iglob'
op|'('
name|'py_glob'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'has_upgrade'
op|'='
name|'False'
newline|'\n'
name|'has_downgrade'
op|'='
name|'False'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'path'
op|','
string|'"r"'
op|')'
name|'as'
name|'f'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'line'
name|'in'
name|'f'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'def upgrade('"
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'                        '
name|'has_upgrade'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'if'
string|"'def downgrade('"
name|'in'
name|'line'
op|':'
newline|'\n'
indent|'                        '
name|'has_downgrade'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'has_upgrade'
name|'and'
name|'not'
name|'has_downgrade'
op|':'
newline|'\n'
indent|'                    '
name|'fname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'path'
op|')'
newline|'\n'
name|'missing_downgrade'
op|'.'
name|'append'
op|'('
name|'fname'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'helpful_msg'
op|'='
op|'('
name|'_'
op|'('
string|'"The following migrations are missing a downgrade:"'
nl|'\n'
string|'"\\n\\t%s"'
op|')'
op|'%'
string|"'\\n\\t'"
op|'.'
name|'join'
op|'('
name|'sorted'
op|'('
name|'missing_downgrade'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'not'
name|'missing_downgrade'
op|','
name|'helpful_msg'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

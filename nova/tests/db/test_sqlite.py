begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Test cases for sqlite-specific logic"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'create_engine'
newline|'\n'
name|'from'
name|'sqlalchemy'
name|'import'
name|'Column'
op|','
name|'BigInteger'
op|','
name|'String'
newline|'\n'
name|'import'
name|'sqlalchemy'
op|'.'
name|'engine'
op|'.'
name|'reflection'
newline|'\n'
name|'from'
name|'sqlalchemy'
op|'.'
name|'ext'
op|'.'
name|'declarative'
name|'import'
name|'declarative_base'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestSqlite
name|'class'
name|'TestSqlite'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for sqlite-specific logic."""'
newline|'\n'
nl|'\n'
DECL|member|test_big_int_mapping
name|'def'
name|'test_big_int_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'base_class'
op|'='
name|'declarative_base'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|User
name|'class'
name|'User'
op|'('
name|'base_class'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Dummy class with a BigInteger column for testing."""'
newline|'\n'
DECL|variable|__tablename__
name|'__tablename__'
op|'='
string|'"users"'
newline|'\n'
DECL|variable|id
name|'id'
op|'='
name|'Column'
op|'('
name|'BigInteger'
op|','
name|'primary_key'
op|'='
name|'True'
op|')'
newline|'\n'
DECL|variable|name
name|'name'
op|'='
name|'Column'
op|'('
name|'String'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'engine'
op|'='
name|'create_engine'
op|'('
string|"'sqlite://'"
op|')'
newline|'\n'
name|'base_class'
op|'.'
name|'metadata'
op|'.'
name|'create_all'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
name|'insp'
op|'='
name|'sqlalchemy'
op|'.'
name|'engine'
op|'.'
name|'reflection'
op|'.'
name|'Inspector'
op|'.'
name|'from_engine'
op|'('
name|'engine'
op|')'
newline|'\n'
nl|'\n'
name|'id_type'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'column'
name|'in'
name|'insp'
op|'.'
name|'get_columns'
op|'('
string|"'users'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'column'
op|'['
string|"'name'"
op|']'
op|'=='
string|"'id'"
op|':'
newline|'\n'
DECL|variable|id_type
indent|'                '
name|'id_type'
op|'='
name|'column'
op|'['
string|"'type'"
op|']'
op|'.'
name|'compile'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(russellb) We have a hook in nova.db.sqlalchemy that makes it so'
nl|'\n'
comment|'# BigInteger() is compiled to INTEGER for sqlite instead of BIGINT.'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'INTEGER'"
op|','
name|'id_type'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

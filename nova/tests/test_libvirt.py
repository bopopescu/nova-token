begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Copyright 2010 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
op|'.'
name|'ElementTree'
name|'import'
name|'fromstring'
name|'as'
name|'xml_to_tree'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'parseString'
name|'as'
name|'xml_to_dom'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'firewall'
newline|'\n'
nl|'\n'
DECL|variable|libvirt
name|'libvirt'
op|'='
name|'None'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'instances_path'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_concurrency
name|'def'
name|'_concurrency'
op|'('
name|'wait'
op|','
name|'done'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'wait'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_network_info
dedent|''
name|'def'
name|'_create_network_info'
op|'('
name|'count'
op|'='
number|'1'
op|','
name|'ipv6'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'ipv6'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'        '
name|'ipv6'
op|'='
name|'FLAGS'
op|'.'
name|'use_ipv6'
newline|'\n'
dedent|''
name|'fake'
op|'='
string|"'fake'"
newline|'\n'
name|'fake_ip'
op|'='
string|"'0.0.0.0/0'"
newline|'\n'
name|'fake_ip_2'
op|'='
string|"'0.0.0.1/0'"
newline|'\n'
name|'fake_ip_3'
op|'='
string|"'0.0.0.1/0'"
newline|'\n'
name|'network'
op|'='
op|'{'
string|"'gateway'"
op|':'
name|'fake'
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
name|'fake'
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'fake'
op|','
nl|'\n'
string|"'cidr'"
op|':'
name|'fake_ip'
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
name|'fake_ip'
op|'}'
newline|'\n'
name|'mapping'
op|'='
op|'{'
string|"'mac'"
op|':'
name|'fake'
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
op|'{'
string|"'ip'"
op|':'
name|'fake_ip'
op|'}'
op|','
op|'{'
string|"'ip'"
op|':'
name|'fake_ip'
op|'}'
op|']'
op|'}'
newline|'\n'
name|'if'
name|'ipv6'
op|':'
newline|'\n'
indent|'        '
name|'mapping'
op|'['
string|"'ip6s'"
op|']'
op|'='
op|'['
op|'{'
string|"'ip'"
op|':'
name|'fake_ip'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
name|'fake_ip_2'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
name|'fake_ip_3'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
op|'('
name|'network'
op|','
name|'mapping'
op|')'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'count'
op|')'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CacheConcurrencyTestCase
dedent|''
name|'class'
name|'CacheConcurrencyTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CacheConcurrencyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_exists
name|'def'
name|'fake_exists'
op|'('
name|'fname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'basedir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
newline|'\n'
name|'if'
name|'fname'
op|'=='
name|'basedir'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'fake_exists'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_same_fname_concurrency
dedent|''
name|'def'
name|'test_same_fname_concurrency'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensures that the same fname cache runs at a sequentially"""'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
newline|'\n'
name|'wait1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname'"
op|','
name|'False'
op|','
name|'wait1'
op|','
name|'done1'
op|')'
newline|'\n'
name|'wait2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname'"
op|','
name|'False'
op|','
name|'wait2'
op|','
name|'done2'
op|')'
newline|'\n'
name|'wait2'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'wait1'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
dedent|''
name|'done1'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_different_fname_concurrency
dedent|''
name|'def'
name|'test_different_fname_concurrency'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensures that two different fname caches are concurrent"""'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
newline|'\n'
name|'wait1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname2'"
op|','
name|'False'
op|','
name|'wait1'
op|','
name|'done1'
op|')'
newline|'\n'
name|'wait2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname1'"
op|','
name|'False'
op|','
name|'wait2'
op|','
name|'done2'
op|')'
newline|'\n'
name|'wait2'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'wait1'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'LibvirtConnTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'fake_call'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'pjs'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_projects'
op|'('
op|')'
newline|'\n'
name|'pjs'
op|'='
op|'['
name|'p'
name|'for'
name|'p'
name|'in'
name|'pjs'
name|'if'
name|'p'
op|'.'
name|'name'
op|'=='
string|"'fake'"
op|']'
newline|'\n'
name|'if'
number|'0'
op|'!='
name|'len'
op|'('
name|'pjs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'pjs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'users'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_users'
op|'('
op|')'
newline|'\n'
name|'users'
op|'='
op|'['
name|'u'
name|'for'
name|'u'
name|'in'
name|'users'
name|'if'
name|'u'
op|'.'
name|'name'
op|'=='
string|"'fake'"
op|']'
newline|'\n'
name|'if'
number|'0'
op|'!='
name|'len'
op|'('
name|'users'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'users'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'users'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_users'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'call_libvirt_dependant_setup'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|variable|test_ip
dedent|''
name|'test_ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
DECL|variable|test_instance
name|'test_instance'
op|'='
op|'{'
string|"'memory_kb'"
op|':'
string|"'1024000'"
op|','
nl|'\n'
string|"'basepath'"
op|':'
string|"'/some/path'"
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
string|"'br100'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'02:12:34:46:56:67'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'br101'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
string|"'5'"
op|'}'
comment|'# m1.small'
newline|'\n'
nl|'\n'
DECL|member|lazy_load_library_exists
name|'def'
name|'lazy_load_library_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""check if libvirt is available."""'
newline|'\n'
comment|'# try to connect libvirt. if fail, skip test.'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'libvirt'
newline|'\n'
name|'import'
name|'libxml2'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'global'
name|'libvirt'
newline|'\n'
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'libvirt'
op|'='
name|'__import__'
op|'('
string|"'libvirt'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'libxml2'
op|'='
name|'__import__'
op|'('
string|"'libxml2'"
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|create_fake_libvirt_mock
dedent|''
name|'def'
name|'create_fake_libvirt_mock'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Defining mocks for LibvirtConnection(libvirt is not used)."""'
newline|'\n'
nl|'\n'
comment|'# A fake libvirt.virConnect'
nl|'\n'
DECL|class|FakeLibvirtConnection
name|'class'
name|'FakeLibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|'# A fake connection.IptablesFirewallDriver'
nl|'\n'
DECL|class|FakeIptablesFirewallDriver
dedent|''
name|'class'
name|'FakeIptablesFirewallDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|setattr
dedent|''
name|'def'
name|'setattr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'val'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'__setattr__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating mocks'
nl|'\n'
dedent|''
dedent|''
name|'fake'
op|'='
name|'FakeLibvirtConnection'
op|'('
op|')'
newline|'\n'
name|'fakeip'
op|'='
name|'FakeIptablesFirewallDriver'
newline|'\n'
comment|'# Customizing above fake if necessary'
nl|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake'
op|'.'
name|'__setattr__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
comment|'# Inevitable mocks for connection.LibvirtConnection'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'utils'
op|','
string|"'import_class'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'utils'
op|'.'
name|'import_class'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fakeip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'='
name|'fake'
newline|'\n'
nl|'\n'
DECL|member|create_service
dedent|''
name|'def'
name|'create_service'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service_ref'
op|'='
op|'{'
string|"'host'"
op|':'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'host'"
op|','
string|"'dummy'"
op|')'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'zone'"
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'service_create'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'service_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_preparing_xml_info
dedent|''
name|'def'
name|'test_preparing_xml_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance_ref'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'result'
op|'['
string|"'nics'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance_ref'
op|','
name|'False'
op|','
nl|'\n'
name|'_create_network_info'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'result'
op|'['
string|"'nics'"
op|']'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance_ref'
op|','
name|'False'
op|','
nl|'\n'
name|'_create_network_info'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'result'
op|'['
string|"'nics'"
op|']'
op|')'
op|'=='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_nic_for_xml_v4
dedent|''
name|'def'
name|'test_get_nic_for_xml_v4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'network'
op|','
name|'mapping'
op|'='
name|'_create_network_info'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'False'
op|')'
newline|'\n'
name|'params'
op|'='
name|'conn'
op|'.'
name|'_get_nic_for_xml'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|'['
string|"'extra_params'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'params'
op|'.'
name|'find'
op|'('
string|"'PROJNETV6'"
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'params'
op|'.'
name|'find'
op|'('
string|"'PROJMASKV6'"
op|')'
op|'=='
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_nic_for_xml_v6
dedent|''
name|'def'
name|'test_get_nic_for_xml_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'network'
op|','
name|'mapping'
op|'='
name|'_create_network_info'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'True'
op|')'
newline|'\n'
name|'params'
op|'='
name|'conn'
op|'.'
name|'_get_nic_for_xml'
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|'['
string|"'extra_params'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'params'
op|'.'
name|'find'
op|'('
string|"'PROJNETV6'"
op|')'
op|'>'
op|'-'
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'params'
op|'.'
name|'find'
op|'('
string|"'PROJMASKV6'"
op|')'
op|'>'
op|'-'
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri
dedent|''
name|'def'
name|'test_xml_and_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_rescue
dedent|''
name|'def'
name|'test_xml_and_uri_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
name|'expect_kernel'
op|'='
name|'True'
op|','
nl|'\n'
name|'expect_ramdisk'
op|'='
name|'True'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lxc_container_and_uri
dedent|''
name|'def'
name|'test_lxc_container_and_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_container'
op|'('
name|'instance_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multi_nic
dedent|''
name|'def'
name|'test_multi_nic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_create_network_info'
op|'('
number|'2'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_data'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'False'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'interfaces'
op|'='
name|'tree'
op|'.'
name|'findall'
op|'('
string|'"./devices/interface"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'interfaces'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'parameters'
op|'='
name|'interfaces'
op|'['
number|'0'
op|']'
op|'.'
name|'findall'
op|'('
string|"'./filterref/parameter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'interfaces'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'bridge'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'IP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'DHCPSERVER'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_container
dedent|''
name|'def'
name|'_check_xml_and_container'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'project'
op|'='
name|'self'
op|'.'
name|'project'
op|','
nl|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_network_host'
op|'('
name|'user_context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_type'
op|'='
string|"'lxc'"
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'uri'
op|'='
name|'conn'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uri'
op|','
string|"'lxc:///'"
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'check'
op|'='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'lxc'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'exe'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/filesystem/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dir'"
op|')'
op|','
string|"'/'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'check'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed common check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'target'
op|'='
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./devices/filesystem/source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dir'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'target'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_uri
dedent|''
name|'def'
name|'_check_xml_and_uri'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'expect_ramdisk'
op|','
name|'expect_kernel'
op|','
nl|'\n'
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'project'
op|'='
name|'self'
op|'.'
name|'project'
op|','
nl|'\n'
name|'user'
op|'='
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_network_host'
op|'('
name|'user_context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fixed_ip_ref'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'ctxt'
op|','
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'type_uri_map'
op|'='
op|'{'
string|"'qemu'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'qemu'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'kvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'('
string|"'uml:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'uml'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'uml'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'('
string|"'xen:///'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'linux'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'hypervisor_type'
name|'in'
op|'['
string|"'qemu'"
op|','
string|"'kvm'"
op|','
string|"'xen'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'check_list'
op|'='
name|'type_uri_map'
op|'['
name|'hypervisor_type'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'kernel.rescue'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'ramdisk.rescue'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'expect_kernel'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'kernel'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expect_ramdisk'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'ramdisk'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'parameter'
op|'='
string|"'./devices/interface/filterref/parameter'"
newline|'\n'
name|'common_checks'
op|'='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'tag'
op|','
string|"'domain'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
name|'parameter'
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'IP'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
name|'parameter'
op|')'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'10.11.12.13'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
name|'parameter'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'DHCPSERVER'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
name|'parameter'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'10.0.0.1'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/serial/source'"
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'path'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'console.log'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./memory'"
op|')'
op|'.'
name|'text'
op|','
string|"'2097152'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'disk.rescue'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'disk'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'disk'"
op|')'
op|']'
newline|'\n'
name|'common_checks'
op|'+='
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/disk/source'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'disk.local'"
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'='
name|'libvirt_type'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'uri'
op|'='
name|'conn'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uri'
op|','
name|'expected_uri'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'rescue'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'common_checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed common check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# This test is supposed to make sure we don't"
nl|'\n'
comment|'# override a specifically set uri'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Deliberately not just assigning this string to FLAGS.libvirt_uri and'
nl|'\n'
comment|'# checking against that later on. This way we make sure the'
nl|'\n'
comment|"# implementation doesn't fiddle around with the FLAGS."
nl|'\n'
dedent|''
dedent|''
name|'testuri'
op|'='
string|"'something completely different'"
newline|'\n'
name|'FLAGS'
op|'.'
name|'libvirt_uri'
op|'='
name|'testuri'
newline|'\n'
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'libvirt_type'
op|'='
name|'libvirt_type'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'uri'
op|'='
name|'conn'
op|'.'
name|'get_uri'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uri'
op|','
name|'testuri'
op|')'
newline|'\n'
dedent|''
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'user_context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_available_resource_works_correctly
dedent|''
name|'def'
name|'test_update_available_resource_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm compute_node table is updated successfully."""'
newline|'\n'
name|'org_path'
op|'='
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"''"
newline|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"'.'"
newline|'\n'
nl|'\n'
comment|'# Prepare mocks'
nl|'\n'
DECL|function|getVersion
name|'def'
name|'getVersion'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'12003'
newline|'\n'
nl|'\n'
DECL|function|getType
dedent|''
name|'def'
name|'getType'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'qemu'"
newline|'\n'
nl|'\n'
DECL|function|listDomainsID
dedent|''
name|'def'
name|'listDomainsID'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'service_ref'
op|'='
name|'self'
op|'.'
name|'create_service'
op|'('
name|'host'
op|'='
string|"'dummy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
name|'getVersion'
op|'='
name|'getVersion'
op|','
nl|'\n'
name|'getType'
op|'='
name|'getType'
op|','
nl|'\n'
name|'listDomainsID'
op|'='
name|'listDomainsID'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
nl|'\n'
string|"'get_cpu_info'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'get_cpu_info'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'cpuinfo'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'dummy'"
op|')'
newline|'\n'
name|'service_ref'
op|'='
name|'db'
op|'.'
name|'service_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'service_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'compute_node'
op|'='
name|'service_ref'
op|'['
string|"'compute_node'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'sys'
op|'.'
name|'platform'
op|'.'
name|'upper'
op|'('
op|')'
op|'=='
string|"'LINUX2'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'vcpus'"
op|']'
op|'>='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'local_gb'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'compute_node'
op|'['
string|"'hypervisor_type'"
op|']'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'hypervisor_version'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'vcpus'"
op|']'
op|'>='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'memory_mb'"
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'local_gb'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'compute_node'
op|'['
string|"'hypervisor_type'"
op|']'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'compute_node'
op|'['
string|"'hypervisor_version'"
op|']'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'db'
op|'.'
name|'service_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'service_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
name|'org_path'
newline|'\n'
nl|'\n'
DECL|member|test_update_resource_info_no_compute_record_found
dedent|''
name|'def'
name|'test_update_resource_info_no_compute_record_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Raise exception if no recorde found on services table."""'
newline|'\n'
name|'org_path'
op|'='
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"''"
newline|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
string|"'.'"
newline|'\n'
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeServiceUnavailable'
op|','
nl|'\n'
name|'conn'
op|'.'
name|'update_available_resource'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'dummy'"
op|')'
newline|'\n'
nl|'\n'
name|'FLAGS'
op|'.'
name|'instances_path'
op|'='
name|'org_path'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_filtering_rules_for_instance_timeout
dedent|''
name|'def'
name|'test_ensure_filtering_rules_for_instance_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure_filtering_fules_for_instance() finishes with timeout."""'
newline|'\n'
comment|'# Skip if non-libvirt environment'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'lazy_load_library_exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
DECL|function|fake_none
dedent|''
name|'def'
name|'fake_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|fake_raise
dedent|''
name|'def'
name|'fake_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeTime
dedent|''
name|'class'
name|'FakeTime'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|sleep
dedent|''
name|'def'
name|'sleep'
op|'('
name|'self'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'counter'
op|'+='
name|'t'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fake_timer'
op|'='
name|'FakeTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
DECL|variable|conn
indent|'            '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'firewall_driver'
op|'.'
name|'setattr'
op|'('
string|"'setup_basic_filtering'"
op|','
name|'fake_none'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'firewall_driver'
op|'.'
name|'setattr'
op|'('
string|"'prepare_instance_filter'"
op|','
name|'fake_none'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'firewall_driver'
op|'.'
name|'setattr'
op|'('
string|"'instance_filter_exists'"
op|','
name|'fake_none'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'time'
op|'='
name|'fake_timer'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
DECL|variable|c1
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Timeout migrating for'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'29'
op|','
name|'fake_timer'
op|'.'
name|'counter'
op|','
string|'"Didn\'t wait the expected "'
nl|'\n'
string|'"amount of time"'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_raises_exception
dedent|''
name|'def'
name|'test_live_migration_raises_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms recover method is called when exceptions are raised."""'
newline|'\n'
comment|'# Skip if non-libvirt environment'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'lazy_load_library_exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Preparing data'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
name|'instance_dict'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'fake'"
op|','
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'running'"
op|'}'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_dict'
op|')'
newline|'\n'
name|'vol_dict'
op|'='
op|'{'
string|"'status'"
op|':'
string|"'migrating'"
op|','
string|"'size'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'vol_dict'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_attached'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'/dev/fake'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"migrateToURI"'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
string|"'dest'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_lookup
name|'def'
name|'fake_lookup'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_name'
op|'=='
name|'instance_ref'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vdmock'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
name|'lookupByName'
op|'='
name|'fake_lookup'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'conn'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
string|"'dest'"
op|','
string|"''"
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'recover_live_migration'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_ref'
op|'['
string|"'state_description'"
op|']'
op|'=='
string|"'running'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_ref'
op|'['
string|"'state'"
op|']'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'volume_ref'
op|'['
string|"'status'"
op|']'
op|'=='
string|"'in-use'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'volume_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spawn_with_network_info
dedent|''
name|'def'
name|'test_spawn_with_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Skip if non-libvirt environment'
nl|'\n'
indent|'        '
name|'if'
name|'not'
name|'self'
op|'.'
name|'lazy_load_library_exists'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
DECL|function|fake_none
dedent|''
name|'def'
name|'fake_none'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'firewall_driver'
op|'.'
name|'setattr'
op|'('
string|"'setup_basic_filtering'"
op|','
name|'fake_none'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'firewall_driver'
op|'.'
name|'setattr'
op|'('
string|"'prepare_instance_filter'"
op|','
name|'fake_none'
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'ip_dict'
op|'='
op|'{'
string|"'ip'"
op|':'
name|'self'
op|'.'
name|'test_ip'
op|','
nl|'\n'
string|"'netmask'"
op|':'
name|'network'
op|'['
string|"'netmask'"
op|']'
op|','
nl|'\n'
string|"'enabled'"
op|':'
string|"'1'"
op|'}'
newline|'\n'
name|'mapping'
op|'='
op|'{'
string|"'label'"
op|':'
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
name|'network'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
string|"'mac'"
op|':'
name|'instance'
op|'['
string|"'mac_address'"
op|']'
op|','
nl|'\n'
string|"'dns'"
op|':'
op|'['
name|'network'
op|'['
string|"'dns'"
op|']'
op|']'
op|','
nl|'\n'
string|"'ips'"
op|':'
op|'['
name|'ip_dict'
op|']'
op|'}'
newline|'\n'
name|'network_info'
op|'='
op|'['
op|'('
name|'network'
op|','
name|'mapping'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'spawn'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'count'
op|'='
op|'('
number|'0'
op|'<='
name|'str'
op|'('
name|'e'
op|'.'
name|'message'
op|')'
op|'.'
name|'find'
op|'('
string|"'Unexpected method call'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_host_ip_addr
dedent|''
name|'def'
name|'test_get_host_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'ip'
op|'='
name|'conn'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ip'
op|','
name|'FLAGS'
op|'.'
name|'my_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallTestCase
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeLibvirtConnection
name|'class'
name|'FakeLibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|nwfilterDefineXML
indent|'            '
name|'def'
name|'nwfilterDefineXML'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""setup_basic_rules in nwfilter calls this."""'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'='
name|'FakeLibvirtConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'IptablesFirewallDriver'
op|'('
nl|'\n'
name|'get_connection'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|in_nat_rules
dedent|''
name|'in_nat_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.10 on Sat Feb 19 00:03:19 2011'"
op|','
nl|'\n'
string|"'*nat'"
op|','
nl|'\n'
string|"':PREROUTING ACCEPT [1170:189210]'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [844:71028]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [5149:405186]'"
op|','
nl|'\n'
string|"':POSTROUTING ACCEPT [5063:386098]'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|in_filter_rules
name|'in_filter_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.4 on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [969615:281627771]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [915599:63811649]'"
op|','
nl|'\n'
string|"':nova-block-ipv4 - [0:0]'"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -d 192.168.122.0/24 -o virbr0 -m state --state RELATED'"
nl|'\n'
string|"',ESTABLISHED -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -o virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|in6_filter_rules
name|'in6_filter_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by ip6tables-save v1.4.4 on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [349155:75810423]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [349256:75777230]'"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_ref
name|'def'
name|'_create_instance_ref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'56:12:12:12:12:12'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_static_filters
dedent|''
name|'def'
name|'test_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
nl|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'admin_ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'admin_ctxt'
op|','
name|'ip'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'secgroup'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'test group'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'8'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'81'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.10.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'#        self.fw.add_instance(instance_ref)'
nl|'\n'
DECL|function|fake_iptables_execute
name|'def'
name|'fake_iptables_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'sudo'"
op|','
string|"'ip6tables-save'"
op|','
string|"'-t'"
op|','
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in6_filter_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'sudo'"
op|','
string|"'iptables-save'"
op|','
string|"'-t'"
op|','
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in_filter_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'sudo'"
op|','
string|"'iptables-save'"
op|','
string|"'-t'"
op|','
string|"'nat'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in_nat_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'sudo'"
op|','
string|"'iptables-restore'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'sudo'"
op|','
string|"'ip6tables-restore'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out6_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
dedent|''
name|'print'
name|'cmd'
op|','
name|'kwargs'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'execute'
op|'='
name|'fake_iptables_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
name|'in_rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'l'
op|':'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'in_filter_rules'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'in_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
string|"'nova'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|','
nl|'\n'
string|"'Rule went missing: %s'"
op|'%'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-d 10.11.12.13 -j'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'instance_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_chain'
op|','
string|'"The instance chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'security_group_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-A %s -j'"
op|'%'
name|'instance_chain'
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'security_group_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'security_group_chain'
op|','
nl|'\n'
string|'"The security group chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -p icmp -s 192.168.11.0/24 -j ACCEPT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -p icmp -s 192.168.11.0/24 -m icmp '"
nl|'\n'
string|"'--icmp-type 8 -j ACCEPT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP Echo Request acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -p tcp -s 192.168.10.0/24 -m multiport '"
nl|'\n'
string|"'--dports 80:81 -j ACCEPT'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_with_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_with_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'True'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_create_network_info'
op|'('
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_without_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_without_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'False'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_create_network_info'
op|'('
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multinic_iptables
dedent|''
name|'def'
name|'test_multinic_iptables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ipv4_rules_per_network'
op|'='
number|'2'
newline|'\n'
name|'ipv6_rules_per_network'
op|'='
number|'3'
newline|'\n'
name|'networks_count'
op|'='
number|'5'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_create_network_info'
op|'('
name|'networks_count'
op|')'
newline|'\n'
name|'ipv4_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'ipv6_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'inst_ipv4'
op|','
name|'inst_ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_rules'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'ipv4'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv4_network_rules'
op|'='
name|'len'
op|'('
name|'ipv4'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv4'
op|')'
op|'-'
name|'ipv4_len'
newline|'\n'
name|'ipv6_network_rules'
op|'='
name|'len'
op|'('
name|'ipv6'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv6'
op|')'
op|'-'
name|'ipv6_len'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ipv4_network_rules'
op|','
nl|'\n'
name|'ipv4_rules_per_network'
op|'*'
name|'networks_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ipv6_network_rules'
op|','
nl|'\n'
name|'ipv6_rules_per_network'
op|'*'
name|'networks_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_do_refresh_security_group_rules
dedent|''
name|'def'
name|'test_do_refresh_security_group_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'fw'
op|','
nl|'\n'
string|"'add_filters_for_instance'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'add_filters_for_instance'
op|'('
name|'instance_ref'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instances'
op|'['
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'instance_ref'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'do_refresh_security_group_rules'
op|'('
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_provider_firewall_rules
dedent|''
name|'def'
name|'test_provider_firewall_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup basic instance data'
nl|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'ip'
op|','
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'admin_ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'admin_ctxt'
op|','
name|'ip'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
comment|'# FRAGILE: peeks at how the firewall names chains'
nl|'\n'
name|'chain_name'
op|'='
string|"'inst-%s'"
op|'%'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# create a firewall via setup_basic_filtering like libvirt_conn.spawn'
nl|'\n'
comment|'# should have a chain with 0 rules'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'provider'"
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'chains'
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# add a rule and send the update message, check for 1 rule'
nl|'\n'
name|'provider_fw0'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add another, refresh, and make sure number of rules goes to two'
nl|'\n'
name|'provider_fw1'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'udp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create the instance filter and make sure it has a jump rule'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|')'
newline|'\n'
name|'inst_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
name|'chain_name'
op|']'
newline|'\n'
name|'jump_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'inst_rules'
name|'if'
string|"'-j'"
name|'in'
name|'rule'
op|'.'
name|'rule'
op|']'
newline|'\n'
name|'prov_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'jump_rules'
name|'if'
string|"'provider'"
name|'in'
name|'rule'
op|'.'
name|'rule'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'prov_rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterTestCase
dedent|''
dedent|''
name|'class'
name|'NWFilterTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NWFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Mock
name|'class'
name|'Mock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'manager'
op|'='
name|'manager'
op|'.'
name|'AuthManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_user'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
DECL|variable|admin
name|'admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'create_project'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user'
op|','
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'NWFilterFirewall'
op|'('
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_project'
op|'('
name|'self'
op|'.'
name|'project'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'delete_user'
op|'('
name|'self'
op|'.'
name|'user'
op|')'
newline|'\n'
name|'super'
op|'('
name|'NWFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cidr_rule_nwfilter_xml
dedent|''
name|'def'
name|'test_cidr_rule_nwfilter_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake'"
op|','
nl|'\n'
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'security_group_to_nwfilter_xml'
op|'('
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'='
name|'xml_to_dom'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'tagName'
op|','
string|"'filter'"
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'rule'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rules'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|"# It's supposed to allow inbound traffic."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'action'"
op|')'
op|','
string|"'accept'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'direction'"
op|')'
op|','
string|"'in'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Must be lower priority than the base filter (which blocks everything)'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'int'
op|'('
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'priority'"
op|')'
op|')'
op|'<'
number|'1000'
op|')'
newline|'\n'
nl|'\n'
name|'ip_conditions'
op|'='
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'tcp'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'ip_conditions'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'srcipaddr'"
op|')'
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'srcipmask'"
op|')'
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'dstportstart'"
op|')'
op|','
string|"'80'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ip_conditions'
op|'['
number|'0'
op|']'
op|'.'
name|'getAttribute'
op|'('
string|"'dstportend'"
op|')'
op|','
string|"'81'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|teardown_security_group
dedent|''
name|'def'
name|'teardown_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'delete_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_and_return_security_group
dedent|''
name|'def'
name|'setup_and_return_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'00:A0:C9:14:C8:29'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_type
dedent|''
name|'def'
name|'_create_instance_type'
op|'('
name|'self'
op|','
name|'params'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance"""'
newline|'\n'
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
string|"'m1.small'"
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
string|"'1024'"
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'local_gb'"
op|']'
op|'='
string|"'20'"
newline|'\n'
name|'inst'
op|'['
string|"'flavorid'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'swap'"
op|']'
op|'='
string|"'2048'"
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_quota'"
op|']'
op|'='
number|'100'
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_cap'"
op|']'
op|'='
number|'200'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_type_create'
op|'('
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_creates_base_rule_first
dedent|''
name|'def'
name|'test_creates_base_rule_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# These come pre-defined by libvirt'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'defined_filters'
op|'='
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'f'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_filterDefineXMLMock
dedent|''
name|'def'
name|'_filterDefineXMLMock'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'xml_to_dom'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'filterref'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ref'
op|'='
name|'f'
op|'.'
name|'getAttribute'
op|'('
string|"'filter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ref'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|','
nl|'\n'
op|'('
string|"'%s referenced filter that does '"
op|'+'
nl|'\n'
string|"'not yet exist: %s'"
op|')'
op|'%'
op|'('
name|'name'
op|','
name|'ref'
op|')'
op|')'
newline|'\n'
name|'dependencies'
op|'='
op|'['
name|'ref'
op|']'
op|'+'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'ref'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'+='
name|'dependencies'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'defined_filters'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'_filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'ip'
op|'='
string|"'10.11.12.13'"
newline|'\n'
nl|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
op|'{'
string|"'address'"
op|':'
name|'ip'
op|','
string|"'network_id'"
op|':'
name|'network_ref'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'admin_ctxt'
op|','
name|'fixed_ip'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'admin_ctxt'
op|','
name|'ip'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_id'"
op|':'
name|'inst_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|_ensure_all_called
name|'def'
name|'_ensure_all_called'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_filter'
op|'='
string|"'nova-instance-%s-%s'"
op|'%'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'00A0C914C829'"
op|')'
newline|'\n'
name|'secgroup_filter'
op|'='
string|"'nova-secgroup-%s'"
op|'%'
name|'self'
op|'.'
name|'security_group'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'for'
name|'required'
name|'in'
op|'['
name|'secgroup_filter'
op|','
string|"'allow-dhcp-server'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-mac-spoofing'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'required'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'instance_filter'
op|']'
op|','
nl|'\n'
string|'"Instance\'s filter does not include %s"'
op|'%'
nl|'\n'
name|'required'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'setup_and_return_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'_ensure_all_called'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_network_filters
dedent|''
name|'def'
name|'test_create_network_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_create_network_info'
op|'('
number|'3'
op|')'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_create_network_filters'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
string|'"fake"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

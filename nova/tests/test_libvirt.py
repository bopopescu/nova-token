begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Copyright 2010 OpenStack LLC'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'eventlet'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'shutil'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'from'
name|'xml'
op|'.'
name|'etree'
op|'.'
name|'ElementTree'
name|'import'
name|'fromstring'
name|'as'
name|'xml_to_tree'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'import'
name|'parseString'
name|'as'
name|'xml_to_dom'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'images'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'firewall'
name|'as'
name|'base_firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'firewall'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'volume'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'driver'
name|'as'
name|'volume_driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'libvirt'
name|'import'
name|'utils'
name|'as'
name|'libvirt_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_libvirt_utils'
newline|'\n'
nl|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'libvirt'
newline|'\n'
name|'connection'
op|'.'
name|'libvirt'
op|'='
name|'libvirt'
newline|'\n'
dedent|''
name|'except'
name|'ImportError'
op|':'
newline|'\n'
DECL|variable|libvirt
indent|'    '
name|'libvirt'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
dedent|''
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|_fake_network_info
name|'_fake_network_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
newline|'\n'
DECL|variable|_ipv4_like
name|'_ipv4_like'
op|'='
name|'fake_network'
op|'.'
name|'ipv4_like'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_concurrency
name|'def'
name|'_concurrency'
op|'('
name|'wait'
op|','
name|'done'
op|','
name|'target'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'wait'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'done'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirDomainSnapshot
dedent|''
name|'class'
name|'FakeVirDomainSnapshot'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'dom'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'dom'
op|'='
name|'dom'
newline|'\n'
nl|'\n'
DECL|member|delete
dedent|''
name|'def'
name|'delete'
op|'('
name|'self'
op|','
name|'flags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVirtDomain
dedent|''
dedent|''
name|'class'
name|'FakeVirtDomain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'fake_xml'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'fake_xml'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fake_dom_xml'
op|'='
name|'fake_xml'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_fake_dom_xml'
op|'='
string|'"""\n                <domain type=\'kvm\'>\n                    <devices>\n                        <disk type=\'file\'>\n                            <source file=\'filename\'/>\n                        </disk>\n                    </devices>\n                </domain>\n            """'
newline|'\n'
nl|'\n'
DECL|member|name
dedent|''
dedent|''
name|'def'
name|'name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'"fake-domain %s"'
op|'%'
name|'self'
newline|'\n'
nl|'\n'
DECL|member|snapshotCreateXML
dedent|''
name|'def'
name|'snapshotCreateXML'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FakeVirDomainSnapshot'
op|'('
name|'self'
op|')'
newline|'\n'
nl|'\n'
DECL|member|createWithFlags
dedent|''
name|'def'
name|'createWithFlags'
op|'('
name|'self'
op|','
name|'launch_flags'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|XMLDesc
dedent|''
name|'def'
name|'XMLDesc'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_fake_dom_xml'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtVolumeTestCase
dedent|''
dedent|''
name|'class'
name|'LibvirtVolumeTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtVolumeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'executes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'executes'
op|'.'
name|'append'
op|'('
name|'cmd'
op|')'
newline|'\n'
name|'return'
name|'None'
op|','
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeLibvirtConnection
name|'class'
name|'FakeLibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'hyperv'
op|'='
string|'"QEMU"'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'hyperv'
op|'='
name|'hyperv'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_type
dedent|''
name|'def'
name|'get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'hyperv'
newline|'\n'
nl|'\n'
DECL|member|get_all_block_devices
dedent|''
name|'def'
name|'get_all_block_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fake_conn'
op|'='
name|'FakeLibvirtConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'connr'
op|'='
op|'{'
nl|'\n'
string|"'ip'"
op|':'
string|"'127.0.0.1'"
op|','
nl|'\n'
string|"'initiator'"
op|':'
string|"'fake_initiator'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_libvirt_iscsi_driver
dedent|''
name|'def'
name|'test_libvirt_iscsi_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish) exists is to make driver assume connecting worked'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'vol_driver'
op|'='
name|'volume_driver'
op|'.'
name|'ISCSIDriver'
op|'('
op|')'
newline|'\n'
name|'libvirt_driver'
op|'='
name|'volume'
op|'.'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|')'
newline|'\n'
name|'location'
op|'='
string|"'10.0.2.15:3260'"
newline|'\n'
name|'name'
op|'='
string|"'volume-00000001'"
newline|'\n'
name|'iqn'
op|'='
string|"'iqn.2010-10.org.openstack:%s'"
op|'%'
name|'name'
newline|'\n'
name|'vol'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'provider_auth'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'provider_location'"
op|':'
string|"'%s,fake %s'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'initialize_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'mount_device'
op|'='
string|'"vde"'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_driver'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'dev_str'
op|'='
string|"'/dev/disk/by-path/ip-%s-iscsi-%s-lun-0'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'block'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
name|'dev_str'
op|')'
newline|'\n'
name|'libvirt_driver'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'terminate_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'expected_commands'
op|'='
op|'['
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--login'"
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--op'"
op|','
string|"'update'"
op|','
nl|'\n'
string|"'-n'"
op|','
string|"'node.startup'"
op|','
string|"'-v'"
op|','
string|"'automatic'"
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--op'"
op|','
string|"'update'"
op|','
nl|'\n'
string|"'-n'"
op|','
string|"'node.startup'"
op|','
string|"'-v'"
op|','
string|"'manual'"
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--logout'"
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--op'"
op|','
string|"'delete'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'executes'
op|','
name|'expected_commands'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_libvirt_iscsi_driver_still_in_use
dedent|''
name|'def'
name|'test_libvirt_iscsi_driver_still_in_use'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(vish) exists is to make driver assume connecting worked'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'vol_driver'
op|'='
name|'volume_driver'
op|'.'
name|'ISCSIDriver'
op|'('
op|')'
newline|'\n'
name|'libvirt_driver'
op|'='
name|'volume'
op|'.'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|')'
newline|'\n'
name|'location'
op|'='
string|"'10.0.2.15:3260'"
newline|'\n'
name|'name'
op|'='
string|"'volume-00000001'"
newline|'\n'
name|'iqn'
op|'='
string|"'iqn.2010-10.org.openstack:%s'"
op|'%'
name|'name'
newline|'\n'
name|'devs'
op|'='
op|'['
string|"'/dev/disk/by-path/ip-%s-iscsi-%s-lun-1'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|','
string|"'get_all_block_devices'"
op|','
name|'lambda'
op|':'
name|'devs'
op|')'
newline|'\n'
name|'vol'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'provider_auth'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'provider_location'"
op|':'
string|"'%s,fake %s'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'initialize_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'mount_device'
op|'='
string|'"vde"'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_driver'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'dev_str'
op|'='
string|"'/dev/disk/by-path/ip-%s-iscsi-%s-lun-0'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'block'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
name|'dev_str'
op|')'
newline|'\n'
name|'libvirt_driver'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'terminate_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'expected_commands'
op|'='
op|'['
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--login'"
op|')'
op|','
nl|'\n'
op|'('
string|"'iscsiadm'"
op|','
string|"'-m'"
op|','
string|"'node'"
op|','
string|"'-T'"
op|','
name|'iqn'
op|','
nl|'\n'
string|"'-p'"
op|','
name|'location'
op|','
string|"'--op'"
op|','
string|"'update'"
op|','
nl|'\n'
string|"'-n'"
op|','
string|"'node.startup'"
op|','
string|"'-v'"
op|','
string|"'automatic'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'executes'
op|','
name|'expected_commands'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_libvirt_sheepdog_driver
dedent|''
name|'def'
name|'test_libvirt_sheepdog_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vol_driver'
op|'='
name|'volume_driver'
op|'.'
name|'SheepdogDriver'
op|'('
op|')'
newline|'\n'
name|'libvirt_driver'
op|'='
name|'volume'
op|'.'
name|'LibvirtNetVolumeDriver'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|')'
newline|'\n'
name|'name'
op|'='
string|"'volume-00000001'"
newline|'\n'
name|'vol'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'name'"
op|':'
name|'name'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'initialize_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'mount_device'
op|'='
string|'"vde"'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_driver'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'protocol'"
op|')'
op|','
string|"'sheepdog'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
name|'name'
op|')'
newline|'\n'
name|'libvirt_driver'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'terminate_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_libvirt_rbd_driver
dedent|''
name|'def'
name|'test_libvirt_rbd_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'vol_driver'
op|'='
name|'volume_driver'
op|'.'
name|'RBDDriver'
op|'('
op|')'
newline|'\n'
name|'libvirt_driver'
op|'='
name|'volume'
op|'.'
name|'LibvirtNetVolumeDriver'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|')'
newline|'\n'
name|'name'
op|'='
string|"'volume-00000001'"
newline|'\n'
name|'vol'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'name'"
op|':'
name|'name'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'initialize_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'mount_device'
op|'='
string|'"vde"'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_driver'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'protocol'"
op|')'
op|','
string|"'rbd'"
op|')'
newline|'\n'
name|'rbd_name'
op|'='
string|"'%s/%s'"
op|'%'
op|'('
name|'FLAGS'
op|'.'
name|'rbd_pool'
op|','
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
name|'rbd_name'
op|')'
newline|'\n'
name|'libvirt_driver'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'terminate_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_libvirt_lxc_volume
dedent|''
name|'def'
name|'test_libvirt_lxc_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'lambda'
name|'x'
op|':'
name|'True'
op|')'
newline|'\n'
name|'vol_driver'
op|'='
name|'volume_driver'
op|'.'
name|'ISCSIDriver'
op|'('
op|')'
newline|'\n'
name|'libvirt_driver'
op|'='
name|'volume'
op|'.'
name|'LibvirtISCSIVolumeDriver'
op|'('
name|'self'
op|'.'
name|'fake_conn'
op|')'
newline|'\n'
name|'location'
op|'='
string|"'10.0.2.15:3260'"
newline|'\n'
name|'name'
op|'='
string|"'volume-00000001'"
newline|'\n'
name|'iqn'
op|'='
string|"'iqn.2010-10.org.openstack:%s'"
op|'%'
name|'name'
newline|'\n'
name|'vol'
op|'='
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'name'
op|','
nl|'\n'
string|"'provider_auth'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'provider_location'"
op|':'
string|"'%s,fake %s'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
op|'}'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'initialize_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
name|'mount_device'
op|'='
string|'"vde"'
newline|'\n'
name|'xml'
op|'='
name|'libvirt_driver'
op|'.'
name|'connect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'dev_str'
op|'='
string|"'/dev/disk/by-path/ip-%s-iscsi-%s-lun-0'"
op|'%'
op|'('
name|'location'
op|','
name|'iqn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'block'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
name|'dev_str'
op|')'
newline|'\n'
name|'libvirt_driver'
op|'.'
name|'disconnect_volume'
op|'('
name|'connection_info'
op|','
name|'mount_device'
op|')'
newline|'\n'
name|'connection_info'
op|'='
name|'vol_driver'
op|'.'
name|'terminate_connection'
op|'('
name|'vol'
op|','
name|'self'
op|'.'
name|'connr'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CacheConcurrencyTestCase
dedent|''
dedent|''
name|'class'
name|'CacheConcurrencyTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CacheConcurrencyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instances_path'
op|'='
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_exists
name|'def'
name|'fake_exists'
op|'('
name|'fname'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'basedir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
newline|'\n'
name|'if'
name|'fname'
op|'=='
name|'basedir'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_extend
dedent|''
name|'def'
name|'fake_extend'
op|'('
name|'image'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'fake_exists'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'connection'
op|'.'
name|'disk'
op|','
string|"'extend'"
op|','
name|'fake_extend'
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'libvirt_utils'
op|'='
name|'fake_libvirt_utils'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'connection'
op|'.'
name|'libvirt_utils'
op|'='
name|'libvirt_utils'
newline|'\n'
name|'super'
op|'('
name|'CacheConcurrencyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_same_fname_concurrency
dedent|''
name|'def'
name|'test_same_fname_concurrency'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensures that the same fname cache runs at a sequentially"""'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
newline|'\n'
name|'wait1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname'"
op|','
name|'False'
op|','
name|'None'
op|','
name|'wait1'
op|','
name|'done1'
op|')'
newline|'\n'
name|'wait2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname'"
op|','
name|'False'
op|','
name|'None'
op|','
name|'wait2'
op|','
name|'done2'
op|')'
newline|'\n'
name|'wait2'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'wait1'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
dedent|''
name|'done1'
op|'.'
name|'wait'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_different_fname_concurrency
dedent|''
name|'def'
name|'test_different_fname_concurrency'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensures that two different fname caches are concurrent"""'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
newline|'\n'
name|'wait1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done1'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname2'"
op|','
name|'False'
op|','
name|'None'
op|','
name|'wait1'
op|','
name|'done1'
op|')'
newline|'\n'
name|'wait2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'done2'
op|'='
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'spawn'
op|'('
name|'conn'
op|'.'
name|'_cache_image'
op|','
name|'_concurrency'
op|','
nl|'\n'
string|"'target'"
op|','
string|"'fname1'"
op|','
name|'False'
op|','
name|'None'
op|','
name|'wait2'
op|','
name|'done2'
op|')'
newline|'\n'
name|'wait2'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'done2'
op|'.'
name|'ready'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'wait1'
op|'.'
name|'send'
op|'('
op|')'
newline|'\n'
name|'eventlet'
op|'.'
name|'sleep'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeVolumeDriver
dedent|''
dedent|''
dedent|''
name|'class'
name|'FakeVolumeDriver'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|attach_volume
dedent|''
name|'def'
name|'attach_volume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|detach_volume
dedent|''
name|'def'
name|'detach_volume'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_xml
dedent|''
name|'def'
name|'get_xml'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|missing_libvirt
dedent|''
dedent|''
name|'def'
name|'missing_libvirt'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'libvirt'
name|'is'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnTestCase
dedent|''
name|'class'
name|'LibvirtConnTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'_late_load_cheetah'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'fake_call'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instances_path'
op|'='
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'call_libvirt_dependant_setup'
op|'='
name|'False'
newline|'\n'
name|'connection'
op|'.'
name|'libvirt_utils'
op|'='
name|'fake_libvirt_utils'
newline|'\n'
nl|'\n'
DECL|function|fake_extend
name|'def'
name|'fake_extend'
op|'('
name|'image'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'connection'
op|'.'
name|'disk'
op|','
string|"'extend'"
op|','
name|'fake_extend'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'connection'
op|'.'
name|'libvirt_utils'
op|'='
name|'libvirt_utils'
newline|'\n'
name|'super'
op|'('
name|'LibvirtConnTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|variable|test_instance
dedent|''
name|'test_instance'
op|'='
op|'{'
string|"'memory_kb'"
op|':'
string|"'1024000'"
op|','
nl|'\n'
string|"'basepath'"
op|':'
string|"'/some/path'"
op|','
nl|'\n'
string|"'bridge_name'"
op|':'
string|"'br100'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'br101'"
op|','
nl|'\n'
string|"'image_ref'"
op|':'
string|"'155d900f-4e14-4e4c-a73d-069cbf4541e6'"
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'20'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
string|"'5'"
op|'}'
comment|'# m1.small'
newline|'\n'
nl|'\n'
DECL|member|create_fake_libvirt_mock
name|'def'
name|'create_fake_libvirt_mock'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Defining mocks for LibvirtConnection(libvirt is not used)."""'
newline|'\n'
nl|'\n'
comment|'# A fake libvirt.virConnect'
nl|'\n'
DECL|class|FakeLibvirtConnection
name|'class'
name|'FakeLibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|defineXML
indent|'            '
name|'def'
name|'defineXML'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'FakeVirtDomain'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating mocks'
nl|'\n'
dedent|''
dedent|''
name|'volume_driver'
op|'='
string|"'iscsi=nova.tests.test_libvirt.FakeVolumeDriver'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_volume_drivers'
op|'='
op|'['
name|'volume_driver'
op|']'
op|')'
newline|'\n'
name|'fake'
op|'='
name|'FakeLibvirtConnection'
op|'('
op|')'
newline|'\n'
comment|'# Customizing above fake if necessary'
nl|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'kwargs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake'
op|'.'
name|'__setattr__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_service'
op|'='
string|"'nova.image.fake.FakeImageService'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_vif_driver'
op|'='
string|'"nova.tests.fake_network.FakeVIFDriver"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'='
name|'fake'
newline|'\n'
nl|'\n'
DECL|member|fake_lookup
dedent|''
name|'def'
name|'fake_lookup'
op|'('
name|'self'
op|','
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'FakeVirtDomain'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'open'
op|'('
name|'args'
op|'['
op|'-'
number|'1'
op|']'
op|','
string|'"a"'
op|')'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|create_service
dedent|''
name|'def'
name|'create_service'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'service_ref'
op|'='
op|'{'
string|"'host'"
op|':'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'host'"
op|','
string|"'dummy'"
op|')'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'zone'"
op|'}'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'service_create'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'service_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_connector
dedent|''
name|'def'
name|'test_get_connector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'initiator'
op|'='
string|"'fake.initiator.iqn'"
newline|'\n'
name|'ip'
op|'='
string|"'fakeip'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'my_ip'
op|'='
name|'ip'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'ip'"
op|':'
name|'ip'
op|','
nl|'\n'
string|"'initiator'"
op|':'
name|'initiator'
nl|'\n'
op|'}'
newline|'\n'
name|'volume'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
string|"'fake'"
nl|'\n'
op|'}'
newline|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'get_volume_connector'
op|'('
name|'volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertDictMatch'
op|'('
name|'expected'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_preparing_xml_info
dedent|''
name|'def'
name|'test_preparing_xml_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'result'
op|'['
string|"'nics'"
op|']'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'conn'
op|'.'
name|'_prepare_xml_info'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'2'
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'result'
op|'['
string|"'nics'"
op|']'
op|')'
op|'=='
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_ramdisk
dedent|''
name|'def'
name|'test_xml_and_uri_no_ramdisk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_no_kernel
dedent|''
name|'def'
name|'test_xml_and_uri_no_kernel'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'False'
op|','
name|'expect_ramdisk'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri
dedent|''
name|'def'
name|'test_xml_and_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
nl|'\n'
name|'expect_kernel'
op|'='
name|'True'
op|','
name|'expect_ramdisk'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_and_uri_rescue
dedent|''
name|'def'
name|'test_xml_and_uri_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_data'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
string|"'ari-deadbeef'"
newline|'\n'
name|'instance_data'
op|'['
string|"'kernel_id'"
op|']'
op|'='
string|"'aki-deadbeef'"
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uri'
op|'('
name|'instance_data'
op|','
name|'expect_kernel'
op|'='
name|'True'
op|','
nl|'\n'
name|'expect_ramdisk'
op|'='
name|'True'
op|','
name|'rescue'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_uuid
dedent|''
name|'def'
name|'test_xml_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_uuid'
op|'('
name|'instance_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lxc_container_and_uri
dedent|''
name|'def'
name|'test_lxc_container_and_uri'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_container'
op|'('
name|'instance_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_disk_prefix
dedent|''
name|'def'
name|'test_xml_disk_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_xml_and_disk_prefix'
op|'('
name|'instance_data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_disk_bus_virtio
dedent|''
name|'def'
name|'test_xml_disk_bus_virtio'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_check_xml_and_disk_bus'
op|'('
op|'{'
string|'"disk_format"'
op|':'
string|'"raw"'
op|'}'
op|','
nl|'\n'
string|'"disk"'
op|','
string|'"virtio"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xml_disk_bus_ide
dedent|''
name|'def'
name|'test_xml_disk_bus_ide'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_check_xml_and_disk_bus'
op|'('
op|'{'
string|'"disk_format"'
op|':'
string|'"iso"'
op|'}'
op|','
nl|'\n'
string|'"cdrom"'
op|','
string|'"ide"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_instances
dedent|''
name|'def'
name|'test_list_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'='
name|'lambda'
op|':'
op|'['
number|'0'
op|','
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'conn'
op|'.'
name|'list_instances'
op|'('
op|')'
newline|'\n'
comment|'# Only one should be listed, since domain with ID 0 must be skiped'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_block_devices
dedent|''
name|'def'
name|'test_get_all_block_devices'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
op|'['
nl|'\n'
comment|'# NOTE(vish): id 0 is skipped'
nl|'\n'
name|'None'
op|','
nl|'\n'
string|'"""\n                <domain type=\'kvm\'>\n                    <devices>\n                        <disk type=\'file\'>\n                            <source file=\'filename\'/>\n                        </disk>\n                        <disk type=\'block\'>\n                            <source dev=\'/path/to/dev/1\'/>\n                        </disk>\n                    </devices>\n                </domain>\n            """'
op|','
nl|'\n'
string|'"""\n                <domain type=\'kvm\'>\n                    <devices>\n                        <disk type=\'file\'>\n                            <source file=\'filename\'/>\n                        </disk>\n                    </devices>\n                </domain>\n            """'
op|','
nl|'\n'
string|'"""\n                <domain type=\'kvm\'>\n                    <devices>\n                        <disk type=\'file\'>\n                            <source file=\'filename\'/>\n                        </disk>\n                        <disk type=\'block\'>\n                            <source dev=\'/path/to/dev/3\'/>\n                        </disk>\n                    </devices>\n                </domain>\n            """'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_lookup
name|'def'
name|'fake_lookup'
op|'('
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'FakeVirtDomain'
op|'('
name|'xml'
op|'['
name|'id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'listDomainsID'
op|'='
name|'lambda'
op|':'
name|'range'
op|'('
number|'4'
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByID'
op|'='
name|'fake_lookup'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'devices'
op|'='
name|'conn'
op|'.'
name|'get_all_block_devices'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'devices'
op|','
op|'['
string|"'/path/to/dev/1'"
op|','
string|"'/path/to/dev/3'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_snapshot_in_ami_format
name|'def'
name|'test_snapshot_in_ami_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_service'
op|'='
string|"'nova.image.fake.FakeImageService'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'image_service'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
comment|'# Assign different image_ref from nova/images/fakes for testing ami'
nl|'\n'
name|'test_instance'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'test_instance'
op|'['
string|'"image_ref"'
op|']'
op|'='
string|"'c905cedb-7281-47e4-8a62-f26bc5fc4c77'"
newline|'\n'
nl|'\n'
comment|'# Assuming that base image already exists in image_service'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'test_instance'
op|')'
newline|'\n'
name|'properties'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|')'
op|'}'
newline|'\n'
name|'snapshot_name'
op|'='
string|"'test-snap'"
newline|'\n'
name|'sent_meta'
op|'='
op|'{'
string|"'name'"
op|':'
name|'snapshot_name'
op|','
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
comment|'# Create new image. It will be updated in snapshot method'
nl|'\n'
comment|'# To work with it from snapshot, the single image_service is needed'
nl|'\n'
name|'recv_meta'
op|'='
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'utils'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'fake_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'snapshot'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'image_state'"
op|']'
op|','
string|"'available'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'disk_format'"
op|']'
op|','
string|"'ami'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_snapshot_in_raw_format
name|'def'
name|'test_snapshot_in_raw_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_service'
op|'='
string|"'nova.image.fake.FakeImageService'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'image_service'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
comment|'# Assuming that base image already exists in image_service'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'properties'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|')'
op|'}'
newline|'\n'
name|'snapshot_name'
op|'='
string|"'test-snap'"
newline|'\n'
name|'sent_meta'
op|'='
op|'{'
string|"'name'"
op|':'
name|'snapshot_name'
op|','
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
comment|'# Create new image. It will be updated in snapshot method'
nl|'\n'
comment|'# To work with it from snapshot, the single image_service is needed'
nl|'\n'
name|'recv_meta'
op|'='
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'utils'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'fake_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'snapshot'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'image_state'"
op|']'
op|','
string|"'available'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'disk_format'"
op|']'
op|','
string|"'raw'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_snapshot_in_qcow2_format
name|'def'
name|'test_snapshot_in_qcow2_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_service'
op|'='
string|"'nova.image.fake.FakeImageService'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'snapshot_image_format'
op|'='
string|"'qcow2'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'image_service'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
comment|'# Assuming that base image already exists in image_service'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'properties'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|')'
op|'}'
newline|'\n'
name|'snapshot_name'
op|'='
string|"'test-snap'"
newline|'\n'
name|'sent_meta'
op|'='
op|'{'
string|"'name'"
op|':'
name|'snapshot_name'
op|','
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
comment|'# Create new image. It will be updated in snapshot method'
nl|'\n'
comment|'# To work with it from snapshot, the single image_service is needed'
nl|'\n'
name|'recv_meta'
op|'='
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'utils'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'fake_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'snapshot'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'image_state'"
op|']'
op|','
string|"'available'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'disk_format'"
op|']'
op|','
string|"'qcow2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_snapshot_no_image_architecture
name|'def'
name|'test_snapshot_no_image_architecture'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'image_service'
op|'='
string|"'nova.image.fake.FakeImageService'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'image_service'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'image_service'
op|')'
newline|'\n'
nl|'\n'
comment|'# Assign different image_ref from nova/images/fakes for'
nl|'\n'
comment|'# testing different base image'
nl|'\n'
name|'test_instance'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'test_instance'
op|'['
string|'"image_ref"'
op|']'
op|'='
string|"'76fa36fc-c930-4bf3-8c8a-ea2a2420deb6'"
newline|'\n'
nl|'\n'
comment|'# Assuming that base image already exists in image_service'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'test_instance'
op|')'
newline|'\n'
name|'properties'
op|'='
op|'{'
string|"'instance_id'"
op|':'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'str'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'user_id'
op|')'
op|'}'
newline|'\n'
name|'snapshot_name'
op|'='
string|"'test-snap'"
newline|'\n'
name|'sent_meta'
op|'='
op|'{'
string|"'name'"
op|':'
name|'snapshot_name'
op|','
string|"'is_public'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'creating'"
op|','
string|"'properties'"
op|':'
name|'properties'
op|'}'
newline|'\n'
comment|'# Create new image. It will be updated in snapshot method'
nl|'\n'
comment|'# To work with it from snapshot, the single image_service is needed'
nl|'\n'
name|'recv_meta'
op|'='
name|'image_service'
op|'.'
name|'create'
op|'('
name|'context'
op|','
name|'sent_meta'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'utils'
op|'.'
name|'execute'
op|'='
name|'self'
op|'.'
name|'fake_execute'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'snapshot'
op|'='
name|'image_service'
op|'.'
name|'show'
op|'('
name|'context'
op|','
name|'recv_meta'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'properties'"
op|']'
op|'['
string|"'image_state'"
op|']'
op|','
string|"'available'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'status'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'snapshot'
op|'['
string|"'name'"
op|']'
op|','
name|'snapshot_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_invalid_volume_type
dedent|''
name|'def'
name|'test_attach_invalid_volume_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'self'
op|'.'
name|'fake_lookup'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VolumeDriverNotFound'
op|','
nl|'\n'
name|'conn'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
op|'{'
string|'"driver_volume_type"'
op|':'
string|'"badtype"'
op|'}'
op|','
nl|'\n'
string|'"fake"'
op|','
nl|'\n'
string|'"/dev/fake"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multi_nic
dedent|''
name|'def'
name|'test_multi_nic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_data'
op|'='
name|'dict'
op|'('
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'2'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_data'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'None'
op|','
name|'False'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'interfaces'
op|'='
name|'tree'
op|'.'
name|'findall'
op|'('
string|'"./devices/interface"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'interfaces'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'parameters'
op|'='
name|'interfaces'
op|'['
number|'0'
op|']'
op|'.'
name|'findall'
op|'('
string|"'./filterref/parameter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'interfaces'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'bridge'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'IP'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_ipv4_like'
op|'('
name|'parameters'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'192.168'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'parameters'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'DHCPSERVER'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'_ipv4_like'
op|'('
name|'parameters'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'192.168.*.1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_container
dedent|''
name|'def'
name|'_check_xml_and_container'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_type'
op|'='
string|"'lxc'"
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conn'
op|'.'
name|'uri'
op|','
string|"'lxc:///'"
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'check'
op|'='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'lxc'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'exe'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/filesystem/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dir'"
op|')'
op|','
string|"'/'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'check'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s failed common check %d'"
op|'%'
op|'('
name|'xml'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'target'
op|'='
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./devices/filesystem/source'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dir'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'target'
op|')'
op|'>'
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_disk_prefix
dedent|''
name|'def'
name|'_check_xml_and_disk_prefix'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'type_disk_map'
op|'='
op|'{'
nl|'\n'
string|"'qemu'"
op|':'
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'qemu'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/disk/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
string|"'vda'"
op|')'
op|']'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/disk/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
string|"'sda'"
op|')'
op|']'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'kvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/disk/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
string|"'vda'"
op|')'
op|']'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'uml'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/disk/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'dev'"
op|')'
op|','
string|"'ubda'"
op|')'
op|']'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
op|'('
name|'libvirt_type'
op|','
name|'checks'
op|')'
name|'in'
name|'type_disk_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_type'
op|'='
name|'libvirt_type'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s != %s failed check %d'"
op|'%'
nl|'\n'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
name|'expected_result'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_disk_bus
dedent|''
dedent|''
dedent|''
name|'def'
name|'_check_xml_and_disk_bus'
op|'('
name|'self'
op|','
name|'image_meta'
op|','
name|'device_type'
op|','
name|'bus'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./devices/disk'"
op|')'
op|'.'
name|'get'
op|'('
string|"'device'"
op|')'
op|','
nl|'\n'
name|'device_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./devices/disk/target'"
op|')'
op|'.'
name|'get'
op|'('
string|"'bus'"
op|')'
op|','
name|'bus'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_uuid
dedent|''
name|'def'
name|'_check_xml_and_uuid'
op|'('
name|'self'
op|','
name|'image_meta'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'xml'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'image_meta'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tree'
op|'.'
name|'find'
op|'('
string|"'./uuid'"
op|')'
op|'.'
name|'text'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_xml_and_uri
dedent|''
name|'def'
name|'_check_xml_and_uri'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'expect_ramdisk'
op|','
name|'expect_kernel'
op|','
nl|'\n'
name|'rescue'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'user_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'user_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'network_ref'
op|'='
name|'db'
op|'.'
name|'project_get_networks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'type_uri_map'
op|'='
op|'{'
string|"'qemu'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'qemu'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'kvm'"
op|':'
op|'('
string|"'qemu:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'kvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'hvm'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/emulator'"
op|')'
op|','
name|'None'
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'uml'"
op|':'
op|'('
string|"'uml:///system'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'uml'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'uml'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
string|"'xen'"
op|':'
op|'('
string|"'xen:///'"
op|','
nl|'\n'
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'get'
op|'('
string|"'type'"
op|')'
op|','
string|"'xen'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/type'"
op|')'
op|'.'
name|'text'
op|','
string|"'linux'"
op|')'
op|']'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'hypervisor_type'
name|'in'
op|'['
string|"'qemu'"
op|','
string|"'kvm'"
op|','
string|"'xen'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'check_list'
op|'='
name|'type_uri_map'
op|'['
name|'hypervisor_type'
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'                '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'kernel.rescue'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'ramdisk.rescue'"
op|')'
newline|'\n'
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'expect_kernel'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'kernel'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/kernel'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'expect_ramdisk'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|'.'
name|'text'
op|'.'
name|'split'
op|'('
nl|'\n'
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'ramdisk'"
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'check'
op|'='
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./os/initrd'"
op|')'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'check_list'
op|'.'
name|'append'
op|'('
name|'check'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'parameter'
op|'='
string|"'./devices/interface/filterref/parameter'"
newline|'\n'
name|'common_checks'
op|'='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'.'"
op|')'
op|'.'
name|'tag'
op|','
string|"'domain'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
name|'parameter'
op|')'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'IP'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'_ipv4_like'
op|'('
name|'t'
op|'.'
name|'find'
op|'('
name|'parameter'
op|')'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
string|"'192.168'"
op|')'
op|','
nl|'\n'
name|'True'
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
name|'parameter'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
string|"'DHCPSERVER'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'_ipv4_like'
op|'('
name|'t'
op|'.'
name|'findall'
op|'('
name|'parameter'
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
nl|'\n'
string|"'192.168.*.1'"
op|')'
op|','
name|'True'
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./devices/serial/source'"
op|')'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'path'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'console.log'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'find'
op|'('
string|"'./memory'"
op|')'
op|'.'
name|'text'
op|','
string|"'2097152'"
op|')'
op|']'
newline|'\n'
name|'if'
name|'rescue'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'disk.rescue'"
op|')'
op|','
nl|'\n'
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
string|"'./devices/disk/source'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
nl|'\n'
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
string|"'disk'"
op|')'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'common_checks'
op|'+='
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/disk/source'"
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'disk'"
op|')'
op|']'
newline|'\n'
name|'common_checks'
op|'+='
op|'['
op|'('
name|'lambda'
name|'t'
op|':'
name|'t'
op|'.'
name|'findall'
op|'('
nl|'\n'
string|"'./devices/disk/source'"
op|')'
op|'['
number|'1'
op|']'
op|'.'
name|'get'
op|'('
string|"'file'"
op|')'
op|'.'
name|'split'
op|'('
string|"'/'"
op|')'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'disk.local'"
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_type'
op|'='
name|'libvirt_type'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conn'
op|'.'
name|'uri'
op|','
name|'expected_uri'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'xml'
op|'='
name|'conn'
op|'.'
name|'to_xml'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'None'
op|','
name|'rescue'
op|')'
newline|'\n'
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s != %s failed check %d'"
op|'%'
nl|'\n'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
name|'expected_result'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
op|','
op|'('
name|'check'
op|','
name|'expected_result'
op|')'
name|'in'
name|'enumerate'
op|'('
name|'common_checks'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
nl|'\n'
name|'expected_result'
op|','
nl|'\n'
string|"'%s != %s failed common check %d'"
op|'%'
nl|'\n'
op|'('
name|'check'
op|'('
name|'tree'
op|')'
op|','
name|'expected_result'
op|','
name|'i'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# This test is supposed to make sure we don't"
nl|'\n'
comment|'# override a specifically set uri'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Deliberately not just assigning this string to FLAGS.libvirt_uri and'
nl|'\n'
comment|'# checking against that later on. This way we make sure the'
nl|'\n'
comment|"# implementation doesn't fiddle around with the FLAGS."
nl|'\n'
dedent|''
dedent|''
name|'testuri'
op|'='
string|"'something completely different'"
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_uri'
op|'='
name|'testuri'
op|')'
newline|'\n'
name|'for'
op|'('
name|'libvirt_type'
op|','
op|'('
name|'expected_uri'
op|','
name|'checks'
op|')'
op|')'
name|'in'
name|'type_uri_map'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'libvirt_type'
op|'='
name|'libvirt_type'
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conn'
op|'.'
name|'uri'
op|','
name|'testuri'
op|')'
newline|'\n'
dedent|''
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'user_context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_ensure_filtering_rules_for_instance_timeout
name|'def'
name|'test_ensure_filtering_rules_for_instance_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""ensure_filtering_fules_for_instance() finishes with timeout."""'
newline|'\n'
comment|'# Preparing mocks'
nl|'\n'
DECL|function|fake_none
name|'def'
name|'fake_none'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|fake_raise
dedent|''
name|'def'
name|'fake_raise'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeTime
dedent|''
name|'class'
name|'FakeTime'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|member|sleep
dedent|''
name|'def'
name|'sleep'
op|'('
name|'self'
op|','
name|'t'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'counter'
op|'+='
name|'t'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fake_timer'
op|'='
name|'FakeTime'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# _fake_network_info must be called before create_fake_libvirt_mock(),'
nl|'\n'
comment|'# as _fake_network_info calls utils.import_class() and'
nl|'\n'
comment|'# create_fake_libvirt_mock() mocks utils.import_class().'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
DECL|variable|conn
indent|'            '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|'.'
name|'firewall_driver'
op|','
nl|'\n'
string|"'setup_basic_filtering'"
op|','
nl|'\n'
name|'fake_none'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|'.'
name|'firewall_driver'
op|','
nl|'\n'
string|"'prepare_instance_filter'"
op|','
nl|'\n'
name|'fake_none'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|'.'
name|'firewall_driver'
op|','
nl|'\n'
string|"'instance_filter_exists'"
op|','
nl|'\n'
name|'fake_none'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|','
nl|'\n'
name|'time'
op|'='
name|'fake_timer'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
DECL|variable|c1
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Timeout migrating for'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'29'
op|','
name|'fake_timer'
op|'.'
name|'counter'
op|','
string|'"Didn\'t wait the expected "'
nl|'\n'
string|'"amount of time"'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_live_migration_raises_exception
name|'def'
name|'test_live_migration_raises_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms recover method is called when exceptions are raised."""'
newline|'\n'
comment|'# Preparing data'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
name|'instance_dict'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|'}'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_dict'
op|')'
newline|'\n'
name|'vol_dict'
op|'='
op|'{'
string|"'status'"
op|':'
string|"'migrating'"
op|','
string|"'size'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'vol_dict'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_attached'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'/dev/fake'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"migrateToURI"'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'migrateToURI'
op|'('
name|'FLAGS'
op|'.'
name|'live_migration_uri'
op|'%'
string|"'dest'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'None'
op|','
name|'FLAGS'
op|'.'
name|'live_migration_bandwidth'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_lookup
name|'def'
name|'fake_lookup'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_name'
op|'=='
name|'instance_ref'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vdmock'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
name|'lookupByName'
op|'='
name|'fake_lookup'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"rollback_live_migration"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rollback_live_migration'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
string|"'dest'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'#start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'conn'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
string|"'dest'"
op|','
name|'False'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rollback_live_migration'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_ref'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_ref'
op|'['
string|"'power_state'"
op|']'
op|'=='
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'volume_ref'
op|'='
name|'db'
op|'.'
name|'volume_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'volume_ref'
op|'['
string|"'status'"
op|']'
op|'=='
string|"'in-use'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'volume_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_works_correctly
dedent|''
name|'def'
name|'test_pre_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms pre_block_migration works correctly."""'
newline|'\n'
comment|'# Creating testdata'
nl|'\n'
name|'vol'
op|'='
op|'{'
string|"'block_device_mapping'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
string|"'dummy'"
op|','
string|"'mount_device'"
op|':'
string|"'/dev/sda'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'connection_info'"
op|':'
string|"'dummy'"
op|','
string|"'mount_device'"
op|':'
string|"'/dev/sdb'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'driver'
op|','
string|'"block_device_info_get_mapping"'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'block_device_info_get_mapping'
op|'('
name|'vol'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vol'
op|'['
string|"'block_device_mapping'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'conn'
op|','
string|'"volume_driver_method"'
op|')'
newline|'\n'
name|'for'
name|'v'
name|'in'
name|'vol'
op|'['
string|"'block_device_mapping'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'volume_driver_method'
op|'('
string|"'connect_volume'"
op|','
nl|'\n'
name|'v'
op|'['
string|"'connection_info'"
op|']'
op|','
name|'v'
op|'['
string|"'mount_device'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Starting test'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conn'
op|'.'
name|'pre_live_migration'
op|'('
name|'vol'
op|')'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_pre_block_migration_works_correctly
name|'def'
name|'test_pre_block_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms pre_block_migration works correctly."""'
newline|'\n'
comment|'# Replace instances_path since this testcase creates tmpfile'
nl|'\n'
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instances_path'
op|'='
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test data'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'dummyjson'
op|'='
op|'('
string|'\'[{"path": "%s/disk", "disk_size": "10737418240",\''
nl|'\n'
string|'\' "type": "raw", "backing_file": ""}]\''
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
comment|'# qemu-img should be mockd since test environment might not have'
nl|'\n'
comment|'# large disk space.'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'pre_block_migration'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|','
nl|'\n'
name|'dummyjson'
op|'%'
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'exists'
op|'('
string|"'%s/%s/'"
op|'%'
nl|'\n'
op|'('
name|'tmpdir'
op|','
name|'instance_ref'
op|'.'
name|'name'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_get_instance_disk_info_works_correctly
name|'def'
name|'test_get_instance_disk_info_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirms pre_block_migration works correctly."""'
newline|'\n'
comment|'# Test data'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'dummyxml'
op|'='
op|'('
string|'"<domain type=\'kvm\'><name>instance-0000000a</name>"'
nl|'\n'
string|'"<devices>"'
nl|'\n'
string|'"<disk type=\'file\'><driver name=\'qemu\' type=\'raw\'/>"'
nl|'\n'
string|'"<source file=\'/test/disk\'/>"'
nl|'\n'
string|'"<target dev=\'vda\' bus=\'virtio\'/></disk>"'
nl|'\n'
string|'"<disk type=\'file\'><driver name=\'qemu\' type=\'qcow2\'/>"'
nl|'\n'
string|'"<source file=\'/test/disk.local\'/>"'
nl|'\n'
string|'"<target dev=\'vdb\' bus=\'virtio\'/></disk>"'
nl|'\n'
string|'"</devices></domain>"'
op|')'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
op|'('
string|'"image: /test/disk\\n"'
nl|'\n'
string|'"file format: raw\\n"'
nl|'\n'
string|'"virtual size: 20G (21474836480 bytes)\\n"'
nl|'\n'
string|'"disk size: 3.1G\\n"'
nl|'\n'
string|'"cluster_size: 2097152\\n"'
nl|'\n'
string|'"backing file: /test/dummy (actual path: /backing/file)\\n"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Preparing mocks'
nl|'\n'
name|'vdmock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'vdmock'
op|','
string|'"XMLDesc"'
op|')'
newline|'\n'
name|'vdmock'
op|'.'
name|'XMLDesc'
op|'('
number|'0'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dummyxml'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_lookup
name|'def'
name|'fake_lookup'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_name'
op|'=='
name|'instance_ref'
op|'.'
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'vdmock'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
name|'lookupByName'
op|'='
name|'fake_lookup'
op|')'
newline|'\n'
nl|'\n'
name|'GB'
op|'='
number|'1024'
op|'*'
number|'1024'
op|'*'
number|'1024'
newline|'\n'
name|'fake_libvirt_utils'
op|'.'
name|'disk_sizes'
op|'['
string|"'/test/disk'"
op|']'
op|'='
number|'10'
op|'*'
name|'GB'
newline|'\n'
name|'fake_libvirt_utils'
op|'.'
name|'disk_sizes'
op|'['
string|"'/test/disk.local'"
op|']'
op|'='
number|'20'
op|'*'
name|'GB'
newline|'\n'
name|'fake_libvirt_utils'
op|'.'
name|'disk_backing_files'
op|'['
string|"'/test/disk.local'"
op|']'
op|'='
string|"'file'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|'"getsize"'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
string|"'/test/disk'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
number|'10737418240'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|'"execute"'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'info'"
op|','
string|"'/test/disk.local'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
name|'ret'
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'getsize'
op|'('
string|"'/test/disk.local'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
number|'21474836480'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'info'
op|'='
name|'conn'
op|'.'
name|'get_instance_disk_info'
op|'('
name|'instance_ref'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'info'
op|'='
name|'utils'
op|'.'
name|'loads'
op|'('
name|'info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'type'"
op|']'
op|','
string|"'raw'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'path'"
op|']'
op|','
string|"'/test/disk'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'disk_size'"
op|']'
op|','
number|'10737418240'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'0'
op|']'
op|'['
string|"'backing_file'"
op|']'
op|','
string|'""'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|'['
string|"'type'"
op|']'
op|','
string|"'qcow2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|'['
string|"'path'"
op|']'
op|','
string|"'/test/disk.local'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|'['
string|"'virt_disk_size'"
op|']'
op|','
number|'21474836480'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'info'
op|'['
number|'1'
op|']'
op|'['
string|"'backing_file'"
op|']'
op|','
string|'"file"'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_spawn_with_network_info
name|'def'
name|'test_spawn_with_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Preparing mocks'
nl|'\n'
DECL|function|fake_none
indent|'        '
name|'def'
name|'fake_none'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
comment|'# _fake_network_info must be called before create_fake_libvirt_mock(),'
nl|'\n'
comment|'# as _fake_network_info calls utils.import_class() and'
nl|'\n'
comment|'# create_fake_libvirt_mock() mocks utils.import_class().'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'create_fake_libvirt_mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'test_instance'
newline|'\n'
name|'instance_ref'
op|'['
string|"'image_ref'"
op|']'
op|'='
number|'123456'
comment|'# we send an int to test sha1 call'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_ref'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|'.'
name|'firewall_driver'
op|','
nl|'\n'
string|"'setup_basic_filtering'"
op|','
nl|'\n'
name|'fake_none'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|'.'
name|'firewall_driver'
op|','
nl|'\n'
string|"'prepare_instance_filter'"
op|','
nl|'\n'
name|'fake_none'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'conn'
op|'.'
name|'spawn'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|','
name|'network_info'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|','
name|'e'
op|':'
newline|'\n'
comment|'# assert that no exception is raised due to sha1 receiving an int'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'-'
number|'1'
op|','
name|'str'
op|'('
name|'e'
op|'.'
name|'message'
op|')'
op|'.'
name|'find'
op|'('
string|"'must be string or buffer'"
nl|'\n'
string|"', not int'"
op|')'
op|')'
newline|'\n'
name|'count'
op|'='
op|'('
number|'0'
op|'<='
name|'str'
op|'('
name|'e'
op|'.'
name|'message'
op|')'
op|'.'
name|'find'
op|'('
string|"'Unexpected method call'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
name|'instance'
op|'.'
name|'name'
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
newline|'\n'
name|'if'
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
string|"'_base'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_host_ip_addr
dedent|''
dedent|''
name|'def'
name|'test_get_host_ip_addr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'ip'
op|'='
name|'conn'
op|'.'
name|'get_host_ip_addr'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ip'
op|','
name|'FLAGS'
op|'.'
name|'my_ip'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_broken_connection
name|'def'
name|'test_broken_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
op|'('
name|'error'
op|','
name|'domain'
op|')'
name|'in'
op|'('
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
op|','
name|'libvirt'
op|'.'
name|'VIR_FROM_REMOTE'
op|')'
op|','
nl|'\n'
op|'('
name|'libvirt'
op|'.'
name|'VIR_ERR_SYSTEM_ERROR'
op|','
name|'libvirt'
op|'.'
name|'VIR_FROM_RPC'
op|')'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'conn'
op|','
string|'"_wrapped_conn"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'conn'
op|'.'
name|'_wrapped_conn'
op|','
string|'"getCapabilities"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
string|'"get_error_code"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
string|'"get_error_domain"'
op|')'
newline|'\n'
nl|'\n'
name|'conn'
op|'.'
name|'_wrapped_conn'
op|'.'
name|'getCapabilities'
op|'('
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|'"fake failure"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'.'
name|'get_error_code'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'error'
op|')'
newline|'\n'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'.'
name|'get_error_domain'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'domain'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'conn'
op|'.'
name|'_test_connection'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_in_mapping
dedent|''
dedent|''
name|'def'
name|'test_volume_in_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'swap'
op|'='
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb'"
op|','
nl|'\n'
string|"'swap_size'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'ephemerals'
op|'='
op|'['
op|'{'
string|"'num'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|','
nl|'\n'
string|"'size'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'num'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
string|"'ephemeral2'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdd'"
op|','
nl|'\n'
string|"'size'"
op|':'
number|'1'
op|'}'
op|']'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
op|'{'
string|"'mount_device'"
op|':'
string|"'/dev/sde'"
op|','
nl|'\n'
string|"'device_path'"
op|':'
string|"'fake_device'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'mount_device'"
op|':'
string|"'/dev/sdf'"
op|','
nl|'\n'
string|"'device_path'"
op|':'
string|"'fake_device'"
op|'}'
op|']'
newline|'\n'
name|'block_device_info'
op|'='
op|'{'
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'/dev/sda'"
op|','
nl|'\n'
string|"'swap'"
op|':'
name|'swap'
op|','
nl|'\n'
string|"'ephemerals'"
op|':'
name|'ephemerals'
op|','
nl|'\n'
string|"'block_device_mapping'"
op|':'
name|'block_device_mapping'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_assert_volume_in_mapping
name|'def'
name|'_assert_volume_in_mapping'
op|'('
name|'device_name'
op|','
name|'true_or_false'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'conn'
op|'.'
name|'_volume_in_mapping'
op|'('
name|'device_name'
op|','
nl|'\n'
name|'block_device_info'
op|')'
op|','
nl|'\n'
name|'true_or_false'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'_assert_volume_in_mapping'
op|'('
string|"'sda'"
op|','
name|'False'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdb'"
op|','
name|'True'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdc1'"
op|','
name|'True'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdd'"
op|','
name|'True'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sde'"
op|','
name|'True'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdf'"
op|','
name|'True'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdg'"
op|','
name|'False'
op|')'
newline|'\n'
name|'_assert_volume_in_mapping'
op|'('
string|"'sdh1'"
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_immediate_delete
name|'def'
name|'test_immediate_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|'.'
name|'LibvirtConnection'
op|','
string|"'_conn'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'.'
name|'_conn'
op|'.'
name|'lookupByName'
op|'='
name|'lambda'
name|'x'
op|':'
name|'None'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'test_instance'
op|')'
newline|'\n'
name|'conn'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_destroy_saved
name|'def'
name|'test_destroy_saved'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure destroy calls managedSaveRemove for saved instance"""'
newline|'\n'
name|'mock'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'libvirt'
op|'.'
name|'virDomain'
op|')'
newline|'\n'
name|'mock'
op|'.'
name|'destroy'
op|'('
op|')'
newline|'\n'
name|'mock'
op|'.'
name|'hasManagedSaveImage'
op|'('
number|'0'
op|')'
op|'.'
name|'AndReturn'
op|'('
number|'1'
op|')'
newline|'\n'
name|'mock'
op|'.'
name|'managedSaveRemove'
op|'('
number|'0'
op|')'
newline|'\n'
name|'mock'
op|'.'
name|'undefine'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_lookup_by_name
name|'def'
name|'fake_lookup_by_name'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'mock'
newline|'\n'
nl|'\n'
dedent|''
name|'conn'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'conn'
op|','
string|"'_lookup_by_name'"
op|','
name|'fake_lookup_by_name'
op|')'
newline|'\n'
name|'instance'
op|'='
op|'{'
string|'"name"'
op|':'
string|'"instancename"'
op|','
string|'"id"'
op|':'
string|'"instanceid"'
op|','
nl|'\n'
string|'"uuid"'
op|':'
string|'"875a8070-d0b9-4949-8b31-104d125c9a64"'
op|'}'
newline|'\n'
name|'conn'
op|'.'
name|'destroy'
op|'('
name|'instance'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|HostStateTestCase
dedent|''
dedent|''
name|'class'
name|'HostStateTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
name|'cpu_info'
op|'='
string|'\'{"vendor": "Intel", "model": "pentium", "arch": "i686", \''
string|'\'"features": ["ssse3", "monitor", "pni", "sse2", "sse", "fxsr", \''
string|'\'"clflush", "pse36", "pat", "cmov", "mca", "pge", "mtrr", "sep", \''
DECL|variable|cpu_info
string|'\'"apic"], "topology": {"cores": "1", "threads": "1", "sockets": "1"}}\''
newline|'\n'
nl|'\n'
DECL|class|FakeConnection
name|'class'
name|'FakeConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Fake connection object"""'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_total
name|'def'
name|'get_vcpu_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'1'
newline|'\n'
nl|'\n'
DECL|member|get_vcpu_used
dedent|''
name|'def'
name|'get_vcpu_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'0'
newline|'\n'
nl|'\n'
DECL|member|get_cpu_info
dedent|''
name|'def'
name|'get_cpu_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'HostStateTestCase'
op|'.'
name|'cpu_info'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_total
dedent|''
name|'def'
name|'get_local_gb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'100'
newline|'\n'
nl|'\n'
DECL|member|get_local_gb_used
dedent|''
name|'def'
name|'get_local_gb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'20'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_total
dedent|''
name|'def'
name|'get_memory_mb_total'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'497'
newline|'\n'
nl|'\n'
DECL|member|get_memory_mb_used
dedent|''
name|'def'
name|'get_memory_mb_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'88'
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_type
dedent|''
name|'def'
name|'get_hypervisor_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'QEMU'"
newline|'\n'
nl|'\n'
DECL|member|get_hypervisor_version
dedent|''
name|'def'
name|'get_hypervisor_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'13091'
newline|'\n'
nl|'\n'
DECL|member|get_disk_available_least
dedent|''
name|'def'
name|'get_disk_available_least'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
number|'13091'
newline|'\n'
nl|'\n'
DECL|member|test_update_status
dedent|''
dedent|''
name|'def'
name|'test_update_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'connection'
op|','
string|"'get_connection'"
op|')'
newline|'\n'
name|'connection'
op|'.'
name|'get_connection'
op|'('
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'FakeConnection'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'hs'
op|'='
name|'connection'
op|'.'
name|'HostState'
op|'('
name|'True'
op|')'
newline|'\n'
name|'stats'
op|'='
name|'hs'
op|'.'
name|'_stats'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"vcpus"'
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"vcpus_used"'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"cpu_info"'
op|']'
op|','
op|'{'
string|'"vendor"'
op|':'
string|'"Intel"'
op|','
string|'"model"'
op|':'
string|'"pentium"'
op|','
string|'"arch"'
op|':'
string|'"i686"'
op|','
nl|'\n'
string|'"features"'
op|':'
op|'['
string|'"ssse3"'
op|','
string|'"monitor"'
op|','
string|'"pni"'
op|','
string|'"sse2"'
op|','
string|'"sse"'
op|','
string|'"fxsr"'
op|','
nl|'\n'
string|'"clflush"'
op|','
string|'"pse36"'
op|','
string|'"pat"'
op|','
string|'"cmov"'
op|','
string|'"mca"'
op|','
string|'"pge"'
op|','
nl|'\n'
string|'"mtrr"'
op|','
string|'"sep"'
op|','
string|'"apic"'
op|']'
op|','
nl|'\n'
string|'"topology"'
op|':'
op|'{'
string|'"cores"'
op|':'
string|'"1"'
op|','
string|'"threads"'
op|':'
string|'"1"'
op|','
string|'"sockets"'
op|':'
string|'"1"'
op|'}'
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"disk_total"'
op|']'
op|','
number|'100'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"disk_used"'
op|']'
op|','
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"disk_available"'
op|']'
op|','
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"host_memory_total"'
op|']'
op|','
number|'497'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"host_memory_free"'
op|']'
op|','
number|'409'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"hypervisor_type"'
op|']'
op|','
string|"'QEMU'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'stats'
op|'['
string|'"hypervisor_version"'
op|']'
op|','
number|'13091'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterFakes
dedent|''
dedent|''
name|'class'
name|'NWFilterFakes'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'filters'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|nwfilterLookupByName
dedent|''
name|'def'
name|'nwfilterLookupByName'
op|'('
name|'self'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'name'
name|'in'
name|'self'
op|'.'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
newline|'\n'
dedent|''
name|'raise'
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'Filter Not Found'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|filterDefineXMLMock
dedent|''
name|'def'
name|'filterDefineXMLMock'
op|'('
name|'self'
op|','
name|'xml'
op|')'
op|':'
newline|'\n'
DECL|class|FakeNWFilterInternal
indent|'        '
name|'class'
name|'FakeNWFilterInternal'
op|':'
newline|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'parent'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'name'
op|'='
name|'name'
newline|'\n'
name|'self'
op|'.'
name|'parent'
op|'='
name|'parent'
newline|'\n'
nl|'\n'
DECL|member|undefine
dedent|''
name|'def'
name|'undefine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'parent'
op|'.'
name|'filters'
op|'['
name|'self'
op|'.'
name|'name'
op|']'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'tree'
op|'='
name|'xml_to_tree'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'tree'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'if'
name|'name'
name|'not'
name|'in'
name|'self'
op|'.'
name|'filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'filters'
op|'['
name|'name'
op|']'
op|'='
name|'FakeNWFilterInternal'
op|'('
name|'self'
op|','
name|'name'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IptablesFirewallTestCase
dedent|''
dedent|''
name|'class'
name|'IptablesFirewallTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'IptablesFirewallTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'utils'
op|'.'
name|'import_object'
op|'('
name|'FLAGS'
op|'.'
name|'network_manager'
op|')'
newline|'\n'
nl|'\n'
DECL|class|FakeLibvirtConnection
name|'class'
name|'FakeLibvirtConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|nwfilterDefineXML
indent|'            '
name|'def'
name|'nwfilterDefineXML'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'                '
string|'"""setup_basic_rules in nwfilter calls this."""'
newline|'\n'
name|'pass'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'='
name|'FakeLibvirtConnection'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'IptablesFirewallDriver'
op|'('
nl|'\n'
name|'get_connection'
op|'='
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|in_nat_rules
dedent|''
name|'in_nat_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.10 on Sat Feb 19 00:03:19 2011'"
op|','
nl|'\n'
string|"'*nat'"
op|','
nl|'\n'
string|"':PREROUTING ACCEPT [1170:189210]'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [844:71028]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [5149:405186]'"
op|','
nl|'\n'
string|"':POSTROUTING ACCEPT [5063:386098]'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|in_filter_rules
name|'in_filter_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by iptables-save v1.4.4 on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [969615:281627771]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [915599:63811649]'"
op|','
nl|'\n'
string|"':nova-block-ipv4 - [0:0]'"
op|','
nl|'\n'
string|"'-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -d 192.168.122.0/24 -o virbr0 -m state --state RELATED'"
nl|'\n'
string|"',ESTABLISHED -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -s 192.168.122.0/24 -i virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -o virbr0 -j ACCEPT '"
op|','
nl|'\n'
string|"'-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable '"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Mon Dec  6 11:54:13 2010'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|in6_filter_rules
name|'in6_filter_rules'
op|'='
op|'['
nl|'\n'
string|"'# Generated by ip6tables-save v1.4.4 on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
string|"'*filter'"
op|','
nl|'\n'
string|"':INPUT ACCEPT [349155:75810423]'"
op|','
nl|'\n'
string|"':FORWARD ACCEPT [0:0]'"
op|','
nl|'\n'
string|"':OUTPUT ACCEPT [349256:75777230]'"
op|','
nl|'\n'
string|"'COMMIT'"
op|','
nl|'\n'
string|"'# Completed on Tue Jan 18 23:47:56 2011'"
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_ref
name|'def'
name|'_create_instance_ref'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_static_filters
dedent|''
name|'def'
name|'test_static_filters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'src_instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'secgroup'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'test group'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'src_secgroup'
op|'='
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'testsourcegroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'src group'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'icmp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'8'
op|','
nl|'\n'
string|"'to_port'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.11.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'81'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.10.0/24'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'security_group_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'parent_group_id'"
op|':'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'81'
op|','
nl|'\n'
string|"'group_id'"
op|':'
name|'src_secgroup'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'admin_ctxt'
op|','
name|'src_instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'src_secgroup'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'src_instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'admin_ctxt'
op|','
name|'src_instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'#        self.fw.add_instance(instance_ref)'
nl|'\n'
DECL|function|fake_iptables_execute
name|'def'
name|'fake_iptables_execute'
op|'('
op|'*'
name|'cmd'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'process_input'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'process_input'"
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'ip6tables-save'"
op|','
string|"'-t'"
op|','
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in6_filter_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'iptables-save'"
op|','
string|"'-t'"
op|','
string|"'filter'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in_filter_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'iptables-save'"
op|','
string|"'-t'"
op|','
string|"'nat'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
string|"'\\n'"
op|'.'
name|'join'
op|'('
name|'self'
op|'.'
name|'in_nat_rules'
op|')'
op|','
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'iptables-restore'"
op|','
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
dedent|''
name|'if'
name|'cmd'
op|'=='
op|'('
string|"'ip6tables-restore'"
op|','
op|')'
op|':'
newline|'\n'
indent|'                '
name|'lines'
op|'='
name|'process_input'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
newline|'\n'
name|'if'
string|"'*filter'"
name|'in'
name|'lines'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'out6_rules'
op|'='
name|'lines'
newline|'\n'
dedent|''
name|'return'
string|"''"
op|','
string|"''"
newline|'\n'
dedent|''
name|'print'
name|'cmd'
op|','
name|'kwargs'
newline|'\n'
nl|'\n'
dedent|''
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|get_fixed_ips
name|'def'
name|'get_fixed_ips'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ips'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'network'
op|','
name|'info'
name|'in'
name|'network_info'
op|':'
newline|'\n'
indent|'                '
name|'ips'
op|'.'
name|'extend'
op|'('
name|'info'
op|'['
string|"'ips'"
op|']'
op|')'
newline|'\n'
name|'return'
op|'['
name|'ip'
op|'['
string|"'ip'"
op|']'
name|'for'
name|'ip'
name|'in'
name|'ips'
op|']'
newline|'\n'
nl|'\n'
DECL|function|nw_info
dedent|''
dedent|''
name|'def'
name|'nw_info'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'network_info'
newline|'\n'
nl|'\n'
dedent|''
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'execute'
op|'='
name|'fake_iptables_execute'
newline|'\n'
nl|'\n'
name|'fake_network'
op|'.'
name|'stub_out_nw_api_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
nl|'\n'
name|'nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
name|'in_rules'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'l'
op|':'
name|'not'
name|'l'
op|'.'
name|'startswith'
op|'('
string|"'#'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'in_filter_rules'
op|')'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'in_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
string|"'nova'"
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|','
nl|'\n'
string|"'Rule went missing: %s'"
op|'%'
name|'rule'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'instance_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
comment|'# last two octets change'
nl|'\n'
indent|'            '
name|'if'
name|'re'
op|'.'
name|'search'
op|'('
string|"'-d 192.168.[0-9]{1,3}.[0-9]{1,3} -j'"
op|','
name|'rule'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance_chain'
op|','
string|'"The instance chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'security_group_chain'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'out_rules'
op|':'
newline|'\n'
comment|"# This is pretty crude, but it'll do for now"
nl|'\n'
indent|'            '
name|'if'
string|"'-A %s -j'"
op|'%'
name|'instance_chain'
name|'in'
name|'rule'
op|':'
newline|'\n'
indent|'                '
name|'security_group_chain'
op|'='
name|'rule'
op|'.'
name|'split'
op|'('
string|"' '"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'security_group_chain'
op|','
nl|'\n'
string|'"The security group chain wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -j ACCEPT -p icmp -s 192.168.11.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -j ACCEPT -p icmp -m icmp --icmp-type 8'"
nl|'\n'
string|"' -s 192.168.11.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"ICMP Echo Request acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'ip'
name|'in'
name|'get_fixed_ips'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -j ACCEPT -p tcp -m multiport '"
nl|'\n'
string|"'--dports 80:81 -s %s'"
op|'%'
name|'ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'regex'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'-A .* -j ACCEPT -p tcp '"
nl|'\n'
string|"'-m multiport --dports 80:81 -s 192.168.10.0/24'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'filter'
op|'('
name|'regex'
op|'.'
name|'match'
op|','
name|'self'
op|'.'
name|'out_rules'
op|')'
op|')'
op|'>'
number|'0'
op|','
nl|'\n'
string|'"TCP port 80/81 acceptance rule wasn\'t added"'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_with_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_with_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'True'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filters_for_instance_without_ip_v6
dedent|''
name|'def'
name|'test_filters_for_instance_without_ip_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_ipv6'
op|'='
name|'False'
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'rulesv4'
op|','
name|'rulesv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_filters_for_instance'
op|'('
string|'"fake"'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv4'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rulesv6'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_multinic_iptables
dedent|''
name|'def'
name|'test_multinic_iptables'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ipv4_rules_per_addr'
op|'='
number|'1'
newline|'\n'
name|'ipv4_addr_per_network'
op|'='
number|'2'
newline|'\n'
name|'ipv6_rules_per_addr'
op|'='
number|'1'
newline|'\n'
name|'ipv6_addr_per_network'
op|'='
number|'1'
newline|'\n'
name|'networks_count'
op|'='
number|'5'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
name|'networks_count'
op|','
nl|'\n'
name|'ipv4_addr_per_network'
op|')'
newline|'\n'
name|'ipv4_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'ipv6_len'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
op|')'
newline|'\n'
name|'inst_ipv4'
op|','
name|'inst_ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instance_rules'
op|'('
name|'instance_ref'
op|','
nl|'\n'
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'ipv4'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv6'
op|'='
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv6'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
newline|'\n'
name|'ipv4_network_rules'
op|'='
name|'len'
op|'('
name|'ipv4'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv4'
op|')'
op|'-'
name|'ipv4_len'
newline|'\n'
name|'ipv6_network_rules'
op|'='
name|'len'
op|'('
name|'ipv6'
op|')'
op|'-'
name|'len'
op|'('
name|'inst_ipv6'
op|')'
op|'-'
name|'ipv6_len'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ipv4_network_rules'
op|','
nl|'\n'
name|'ipv4_rules_per_addr'
op|'*'
name|'ipv4_addr_per_network'
op|'*'
name|'networks_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'ipv6_network_rules'
op|','
nl|'\n'
name|'ipv6_rules_per_addr'
op|'*'
name|'ipv6_addr_per_network'
op|'*'
name|'networks_count'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_do_refresh_security_group_rules
dedent|''
name|'def'
name|'test_do_refresh_security_group_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'fw'
op|','
nl|'\n'
string|"'add_filters_for_instance'"
op|','
nl|'\n'
name|'use_mock_anything'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'instances'
op|'['
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
name|'instance_ref'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'do_refresh_security_group_rules'
op|'('
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'test'
op|'.'
name|'skip_if'
op|'('
name|'missing_libvirt'
op|'('
op|')'
op|','
string|'"Test requires libvirt"'
op|')'
newline|'\n'
DECL|member|test_unfilter_instance_undefines_nwfilter
name|'def'
name|'test_unfilter_instance_undefines_nwfilter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'nwfilter'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'nwfilter'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'original_filter_count'
op|'='
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# should undefine just the instance filter'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original_filter_count'
op|'-'
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_provider_firewall_rules
dedent|''
name|'def'
name|'test_provider_firewall_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# setup basic instance data'
nl|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance_ref'
op|'('
op|')'
newline|'\n'
comment|'# FRAGILE: peeks at how the firewall names chains'
nl|'\n'
name|'chain_name'
op|'='
string|"'inst-%s'"
op|'%'
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
comment|'# create a firewall via setup_basic_filtering like libvirt_conn.spawn'
nl|'\n'
comment|'# should have a chain with 0 rules'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'provider'"
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'chains'
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
comment|'# add a rule and send the update message, check for 1 rule'
nl|'\n'
name|'provider_fw0'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'tcp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add another, refresh, and make sure number of rules goes to two'
nl|'\n'
name|'provider_fw1'
op|'='
name|'db'
op|'.'
name|'provider_fw_rule_create'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
op|'{'
string|"'protocol'"
op|':'
string|"'udp'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.99.99.99/32'"
op|','
nl|'\n'
string|"'from_port'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'to_port'"
op|':'
number|'65535'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# create the instance filter and make sure it has a jump rule'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'prepare_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'apply_instance_filter'
op|'('
name|'instance_ref'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'inst_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
name|'chain_name'
op|']'
newline|'\n'
name|'jump_rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'inst_rules'
name|'if'
string|"'-j'"
name|'in'
name|'rule'
op|'.'
name|'rule'
op|']'
newline|'\n'
name|'provjump_rules'
op|'='
op|'['
op|']'
newline|'\n'
comment|"# IptablesTable doesn't make rules unique internally"
nl|'\n'
name|'for'
name|'rule'
name|'in'
name|'jump_rules'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'provider'"
name|'in'
name|'rule'
op|'.'
name|'rule'
name|'and'
name|'rule'
name|'not'
name|'in'
name|'provjump_rules'
op|':'
newline|'\n'
indent|'                '
name|'provjump_rules'
op|'.'
name|'append'
op|'('
name|'rule'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'provjump_rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# remove a rule from the db, cast to compute to refresh rule'
nl|'\n'
name|'db'
op|'.'
name|'provider_fw_rule_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'provider_fw1'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'refresh_provider_fw_rules'
op|'('
op|')'
newline|'\n'
name|'rules'
op|'='
op|'['
name|'rule'
name|'for'
name|'rule'
name|'in'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'iptables'
op|'.'
name|'ipv4'
op|'['
string|"'filter'"
op|']'
op|'.'
name|'rules'
nl|'\n'
name|'if'
name|'rule'
op|'.'
name|'chain'
op|'=='
string|"'provider'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'rules'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NWFilterTestCase
dedent|''
dedent|''
name|'class'
name|'NWFilterTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NWFilterTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|class|Mock
name|'class'
name|'Mock'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'='
name|'Mock'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'='
name|'firewall'
op|'.'
name|'NWFilterFirewall'
op|'('
nl|'\n'
name|'lambda'
op|':'
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cidr_rule_nwfilter_xml
dedent|''
name|'def'
name|'test_cidr_rule_nwfilter_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'security_group'
op|'='
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake'"
op|','
nl|'\n'
string|"'testgroup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|teardown_security_group
dedent|''
name|'def'
name|'teardown_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'delete_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|setup_and_return_security_group
dedent|''
name|'def'
name|'setup_and_return_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cloud_controller'
op|'='
name|'cloud'
op|'.'
name|'CloudController'
op|'('
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'create_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
string|"'test group description'"
op|')'
newline|'\n'
name|'cloud_controller'
op|'.'
name|'authorize_security_group_ingress'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'testgroup'"
op|','
nl|'\n'
name|'from_port'
op|'='
string|"'80'"
op|','
nl|'\n'
name|'to_port'
op|'='
string|"'81'"
op|','
nl|'\n'
name|'ip_protocol'
op|'='
string|"'tcp'"
op|','
nl|'\n'
name|'cidr_ip'
op|'='
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_get_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake'"
op|','
string|"'testgroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'user_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_type
dedent|''
name|'def'
name|'_create_instance_type'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance"""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
string|"'m1.small'"
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
string|"'1024'"
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
string|"'10'"
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
string|"'20'"
newline|'\n'
name|'inst'
op|'['
string|"'flavorid'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'swap'"
op|']'
op|'='
string|"'2048'"
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_type_create'
op|'('
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_creates_base_rule_first
dedent|''
name|'def'
name|'test_creates_base_rule_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# These come pre-defined by libvirt'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'defined_filters'
op|'='
op|'['
string|"'no-mac-spoofing'"
op|','
nl|'\n'
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
nl|'\n'
string|"'allow-dhcp-server'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'f'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_filterDefineXMLMock
dedent|''
name|'def'
name|'_filterDefineXMLMock'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'dom'
op|'='
name|'xml_to_dom'
op|'('
name|'xml'
op|')'
newline|'\n'
name|'name'
op|'='
name|'dom'
op|'.'
name|'firstChild'
op|'.'
name|'getAttribute'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'f'
name|'in'
name|'dom'
op|'.'
name|'getElementsByTagName'
op|'('
string|"'filterref'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'ref'
op|'='
name|'f'
op|'.'
name|'getAttribute'
op|'('
string|"'filter'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ref'
name|'in'
name|'self'
op|'.'
name|'defined_filters'
op|','
nl|'\n'
op|'('
string|"'%s referenced filter that does '"
op|'+'
nl|'\n'
string|"'not yet exist: %s'"
op|')'
op|'%'
op|'('
name|'name'
op|','
name|'ref'
op|')'
op|')'
newline|'\n'
name|'dependencies'
op|'='
op|'['
name|'ref'
op|']'
op|'+'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'ref'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'name'
op|']'
op|'+='
name|'dependencies'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'defined_filters'
op|'.'
name|'append'
op|'('
name|'name'
op|')'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fake_libvirt_connection'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'_filterDefineXMLMock'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_ensure_all_called
name|'def'
name|'_ensure_all_called'
op|'('
name|'mac'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_filter'
op|'='
string|"'nova-instance-%s-%s'"
op|'%'
op|'('
name|'instance_ref'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
name|'mac'
op|'.'
name|'translate'
op|'('
name|'None'
op|','
string|"':'"
op|')'
op|')'
newline|'\n'
name|'for'
name|'required'
name|'in'
op|'['
string|"'allow-dhcp-server'"
op|','
nl|'\n'
string|"'no-arp-spoofing'"
op|','
string|"'no-ip-spoofing'"
op|','
nl|'\n'
string|"'no-mac-spoofing'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'required'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'recursive_depends'
op|'['
name|'instance_filter'
op|']'
op|','
nl|'\n'
string|'"Instance\'s filter does not include %s"'
op|'%'
nl|'\n'
name|'required'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'setup_and_return_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
comment|'# since there is one (network_info) there is one vif'
nl|'\n'
comment|"# pass this vif's mac to _ensure_all_called()"
nl|'\n'
comment|'# to set the instance_filter properly'
nl|'\n'
name|'mac'
op|'='
name|'network_info'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|'['
string|"'mac'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'_ensure_all_called'
op|'('
name|'mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'teardown_security_group'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unfilter_instance_undefines_nwfilters
dedent|''
name|'def'
name|'test_unfilter_instance_undefines_nwfilters'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fakefilter'
op|'='
name|'NWFilterFakes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterDefineXML'
op|'='
name|'fakefilter'
op|'.'
name|'filterDefineXMLMock'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'_conn'
op|'.'
name|'nwfilterLookupByName'
op|'='
name|'fakefilter'
op|'.'
name|'nwfilterLookupByName'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group'
op|'='
name|'self'
op|'.'
name|'setup_and_return_security_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_add_security_group'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'security_group'
op|'.'
name|'id'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_id'
op|')'
newline|'\n'
nl|'\n'
name|'network_info'
op|'='
name|'_fake_network_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'setup_basic_filtering'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'original_filter_count'
op|'='
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fw'
op|'.'
name|'unfilter_instance'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original_filter_count'
op|'-'
name|'len'
op|'('
name|'fakefilter'
op|'.'
name|'filters'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin_ctxt'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtUtilsTestCase
dedent|''
dedent|''
name|'class'
name|'LibvirtUtilsTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_get_iscsi_initiator
indent|'    '
name|'def'
name|'test_get_iscsi_initiator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'initiator'
op|'='
string|"'fake.initiator.iqn'"
newline|'\n'
name|'rval'
op|'='
op|'('
string|'"junk\\nInitiatorName=%s\\njunk\\n"'
op|'%'
name|'initiator'
op|','
name|'None'
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'cat'"
op|','
string|"'/etc/iscsi/initiatorname.iscsi'"
op|','
nl|'\n'
name|'run_as_root'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'rval'
op|')'
newline|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_iscsi_initiator'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'initiator'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_image
dedent|''
name|'def'
name|'test_create_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'create'"
op|','
string|"'-f'"
op|','
string|"'raw'"
op|','
nl|'\n'
string|"'/some/path'"
op|','
string|"'10G'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'create'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
nl|'\n'
string|"'/some/stuff'"
op|','
string|"'1234567891234'"
op|')'
newline|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'create_image'
op|'('
string|"'raw'"
op|','
string|"'/some/path'"
op|','
string|"'10G'"
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'create_image'
op|'('
string|"'qcow2'"
op|','
string|"'/some/stuff'"
op|','
string|"'1234567891234'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_cow_image
dedent|''
name|'def'
name|'test_create_cow_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'create'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
nl|'\n'
string|"'-o'"
op|','
string|"'cluster_size=2M,backing_file=/some/path'"
op|','
nl|'\n'
string|"'/the/new/cow'"
op|')'
newline|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'create_cow_image'
op|'('
string|"'/some/path'"
op|','
string|"'/the/new/cow'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_disk_size
dedent|''
name|'def'
name|'test_get_disk_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
nl|'\n'
string|"'info'"
op|','
nl|'\n'
string|"'/some/path'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
string|"'''image: 00000001\nfile format: raw\nvirtual size: 4.4M (4592640 bytes)\ndisk size: 4.4M'''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'libvirt_utils'
op|'.'
name|'get_disk_size'
op|'('
string|"'/some/path'"
op|')'
op|','
number|'4592640'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_copy_image
dedent|''
name|'def'
name|'test_copy_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_fd'
op|','
name|'dst_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'close'
op|'('
name|'dst_fd'
op|')'
newline|'\n'
nl|'\n'
name|'src_fd'
op|','
name|'src_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'with'
name|'os'
op|'.'
name|'fdopen'
op|'('
name|'src_fd'
op|','
string|"'w'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                    '
name|'fp'
op|'.'
name|'write'
op|'('
string|"'canary'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'libvirt_utils'
op|'.'
name|'copy_image'
op|'('
name|'src_path'
op|','
name|'dst_path'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'dst_path'
op|','
string|"'r'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'canary'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'src_path'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_mkfs
dedent|''
dedent|''
name|'def'
name|'test_mkfs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkfs'"
op|','
string|"'-t'"
op|','
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'mkswap'"
op|','
string|"'/my/swap/block/dev'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'mkfs'
op|'('
string|"'ext4'"
op|','
string|"'/my/block/dev'"
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'mkfs'
op|'('
string|"'swap'"
op|','
string|"'/my/swap/block/dev'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_ensure_tree
dedent|''
name|'def'
name|'test_ensure_tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tmpdir'
op|'='
name|'tempfile'
op|'.'
name|'mkdtemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'testdir'
op|'='
string|"'%s/foo/bar/baz'"
op|'%'
op|'('
name|'tmpdir'
op|','
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'ensure_tree'
op|'('
name|'testdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'isdir'
op|'('
name|'testdir'
op|')'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'tmpdir'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_write_to_file
dedent|''
dedent|''
name|'def'
name|'test_write_to_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_fd'
op|','
name|'dst_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'close'
op|'('
name|'dst_fd'
op|')'
newline|'\n'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'dst_path'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'dst_path'
op|','
string|"'r'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'hello'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_write_to_file_with_umask
dedent|''
dedent|''
name|'def'
name|'test_write_to_file_with_umask'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_fd'
op|','
name|'dst_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'close'
op|'('
name|'dst_fd'
op|')'
newline|'\n'
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'dst_path'
op|','
string|"'hello'"
op|','
name|'umask'
op|'='
number|'0277'
op|')'
newline|'\n'
name|'with'
name|'open'
op|'('
name|'dst_path'
op|','
string|"'r'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'hello'"
op|')'
newline|'\n'
dedent|''
name|'mode'
op|'='
name|'os'
op|'.'
name|'stat'
op|'('
name|'dst_path'
op|')'
op|'.'
name|'st_mode'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'mode'
op|'&'
number|'0277'
op|','
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_chown
dedent|''
dedent|''
name|'def'
name|'test_chown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'chown'"
op|','
string|"'soren'"
op|','
string|"'/some/path'"
op|','
name|'run_as_root'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'chown'
op|'('
string|"'/some/path'"
op|','
string|"'soren'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_extract_snapshot
dedent|''
name|'def'
name|'test_extract_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'utils'
op|','
string|"'execute'"
op|')'
newline|'\n'
name|'utils'
op|'.'
name|'execute'
op|'('
string|"'qemu-img'"
op|','
string|"'convert'"
op|','
string|"'-f'"
op|','
string|"'qcow2'"
op|','
string|"'-O'"
op|','
string|"'raw'"
op|','
nl|'\n'
string|"'-s'"
op|','
string|"'snap1'"
op|','
string|"'/path/to/disk/image'"
op|','
string|"'/extracted/snap'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'extract_snapshot'
op|'('
string|"'/path/to/disk/image'"
op|','
string|"'qcow2'"
op|','
nl|'\n'
string|"'snap1'"
op|','
string|"'/extracted/snap'"
op|','
string|"'raw'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_load_file
dedent|''
name|'def'
name|'test_load_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_fd'
op|','
name|'dst_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'close'
op|'('
name|'dst_fd'
op|')'
newline|'\n'
nl|'\n'
comment|'# We have a test for write_to_file. If that is sound, this suffices'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'dst_path'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'libvirt_utils'
op|'.'
name|'load_file'
op|'('
name|'dst_path'
op|')'
op|','
string|"'hello'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_file_open
dedent|''
dedent|''
name|'def'
name|'test_file_open'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dst_fd'
op|','
name|'dst_path'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'close'
op|'('
name|'dst_fd'
op|')'
newline|'\n'
nl|'\n'
comment|'# We have a test for write_to_file. If that is sound, this suffices'
nl|'\n'
name|'libvirt_utils'
op|'.'
name|'write_to_file'
op|'('
name|'dst_path'
op|','
string|"'hello'"
op|')'
newline|'\n'
name|'with'
name|'libvirt_utils'
op|'.'
name|'file_open'
op|'('
name|'dst_path'
op|','
string|"'r'"
op|')'
name|'as'
name|'fp'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'fp'
op|'.'
name|'read'
op|'('
op|')'
op|','
string|"'hello'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'unlink'
op|'('
name|'dst_path'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_get_fs_info
dedent|''
dedent|''
name|'def'
name|'test_get_fs_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|class|FakeStatResult
indent|'        '
name|'class'
name|'FakeStatResult'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'            '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'f_bsize'
op|'='
number|'4096'
newline|'\n'
name|'self'
op|'.'
name|'f_frsize'
op|'='
number|'4096'
newline|'\n'
name|'self'
op|'.'
name|'f_blocks'
op|'='
number|'2000'
newline|'\n'
name|'self'
op|'.'
name|'f_bfree'
op|'='
number|'1000'
newline|'\n'
name|'self'
op|'.'
name|'f_bavail'
op|'='
number|'900'
newline|'\n'
name|'self'
op|'.'
name|'f_files'
op|'='
number|'2000'
newline|'\n'
name|'self'
op|'.'
name|'f_ffree'
op|'='
number|'1000'
newline|'\n'
name|'self'
op|'.'
name|'f_favail'
op|'='
number|'900'
newline|'\n'
name|'self'
op|'.'
name|'f_flag'
op|'='
number|'4096'
newline|'\n'
name|'self'
op|'.'
name|'f_namemax'
op|'='
number|'255'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'path'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_statvfs
name|'def'
name|'fake_statvfs'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'path'
op|'='
name|'path'
newline|'\n'
name|'return'
name|'FakeStatResult'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|','
string|"'statvfs'"
op|','
name|'fake_statvfs'
op|')'
newline|'\n'
nl|'\n'
name|'fs_info'
op|'='
name|'libvirt_utils'
op|'.'
name|'get_fs_info'
op|'('
string|"'/some/file/path'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'/some/file/path'"
op|','
name|'self'
op|'.'
name|'path'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'8192000'
op|','
name|'fs_info'
op|'['
string|"'total'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'3686400'
op|','
name|'fs_info'
op|'['
string|"'free'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'4096000'
op|','
name|'fs_info'
op|'['
string|"'used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_fetch_image
dedent|''
name|'def'
name|'test_fetch_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'images'
op|','
string|"'fetch_to_raw'"
op|')'
newline|'\n'
nl|'\n'
name|'context'
op|'='
string|"'opaque context'"
newline|'\n'
name|'target'
op|'='
string|"'/tmp/targetfile'"
newline|'\n'
name|'image_id'
op|'='
string|"'4'"
newline|'\n'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'images'
op|'.'
name|'fetch_to_raw'
op|'('
name|'context'
op|','
name|'image_id'
op|','
name|'target'
op|','
name|'user_id'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'libvirt_utils'
op|'.'
name|'fetch_image'
op|'('
name|'context'
op|','
name|'target'
op|','
name|'image_id'
op|','
nl|'\n'
name|'user_id'
op|','
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnectionTestCase
dedent|''
dedent|''
name|'class'
name|'LibvirtConnectionTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test for nova.virt.libvirt.connection.LibvirtConnection."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnectionTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'libvirtconnection'
op|'='
name|'connection'
op|'.'
name|'LibvirtConnection'
op|'('
name|'read_only'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'platform'
op|'='
name|'sys'
op|'.'
name|'platform'
newline|'\n'
name|'self'
op|'.'
name|'exe_flag'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'temp_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'flags'
op|'.'
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
string|"'instance-00000001/'"
op|','
string|"''"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'makedirs'
op|'('
name|'self'
op|'.'
name|'temp_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'testcase init error'"
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LibvirtConnectionTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'platform'
op|'='
name|'self'
op|'.'
name|'platform'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'shutil'
op|'.'
name|'rmtree'
op|'('
name|'flags'
op|'.'
name|'FLAGS'
op|'.'
name|'instances_path'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|NullFirewallDriver
dedent|''
dedent|''
name|'class'
name|'NullFirewallDriver'
op|'('
name|'base_firewall'
op|'.'
name|'FirewallDriver'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'        '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'get_connection'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|prepare_instance_filter
dedent|''
name|'def'
name|'prepare_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|unfilter_instance
dedent|''
name|'def'
name|'unfilter_instance'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|apply_instance_filter
dedent|''
name|'def'
name|'apply_instance_filter'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_rules
dedent|''
name|'def'
name|'refresh_security_group_rules'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|refresh_security_group_members
dedent|''
name|'def'
name|'refresh_security_group_members'
op|'('
name|'self'
op|','
name|'security_group_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|refresh_provider_fw_rules
dedent|''
name|'def'
name|'refresh_provider_fw_rules'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|setup_basic_filtering
dedent|''
name|'def'
name|'setup_basic_filtering'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|instance_filter_exists
dedent|''
name|'def'
name|'instance_filter_exists'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance"""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'['
string|"'launch_time'"
op|']'
op|'='
string|"'10'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
string|"'fake'"
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
string|"'fake'"
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'type_id'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'host'"
op|']'
op|'='
string|"'host1'"
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'10'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'20'
newline|'\n'
name|'inst'
op|'['
string|"'config_drive'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'kernel_id'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'inst'
op|'['
string|"'ramdisk_id'"
op|']'
op|'='
number|'3'
newline|'\n'
name|'inst'
op|'['
string|"'config_drive_id'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'key_data'"
op|']'
op|'='
string|"'ABCDEFG'"
newline|'\n'
nl|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_disk_and_power_off_exception
dedent|''
name|'def'
name|'test_migrate_disk_and_power_off_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test for nova.virt.libvirt.connection.LivirtConnection\n        .migrate_disk_and_power_off. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'counter'
op|'='
number|'0'
newline|'\n'
nl|'\n'
DECL|function|fake_get_instance_disk_info
name|'def'
name|'fake_get_instance_disk_info'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_destroy
dedent|''
name|'def'
name|'fake_destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_get_host_ip_addr
dedent|''
name|'def'
name|'fake_get_host_ip_addr'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'10.0.0.1'"
newline|'\n'
nl|'\n'
DECL|function|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'counter'
op|'+='
number|'1'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'counter'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'Exception'
op|'('
op|')'
newline|'\n'
dedent|''
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_os_path_exists
dedent|''
name|'def'
name|'fake_os_path_exists'
op|'('
name|'path'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'get_instance_disk_info'"
op|','
nl|'\n'
name|'fake_get_instance_disk_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'_destroy'"
op|','
name|'fake_destroy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'get_host_ip_addr'"
op|','
nl|'\n'
name|'fake_get_host_ip_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'os'
op|'.'
name|'path'
op|','
string|"'exists'"
op|','
name|'fake_os_path_exists'
op|')'
newline|'\n'
nl|'\n'
name|'ins_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'Exception'
op|','
nl|'\n'
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'migrate_disk_and_power_off'
op|','
nl|'\n'
name|'None'
op|','
name|'ins_ref'
op|','
op|'['
op|']'
op|','
string|"'10.0.0.2'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_disk_and_power_off
dedent|''
name|'def'
name|'test_migrate_disk_and_power_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test for nova.virt.libvirt.connection.LivirtConnection\n        .migrate_disk_and_power_off. """'
newline|'\n'
nl|'\n'
name|'disk_info'
op|'='
op|'['
op|'{'
string|"'type'"
op|':'
string|"'qcow2'"
op|','
string|"'path'"
op|':'
string|"'/test/disk'"
op|','
nl|'\n'
string|"'virt_disk_size'"
op|':'
string|"'10737418240'"
op|','
nl|'\n'
string|"'backing_file'"
op|':'
string|"'/base/disk'"
op|','
nl|'\n'
string|"'disk_size'"
op|':'
string|"'83886080'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
string|"'raw'"
op|','
string|"'path'"
op|':'
string|"'/test/disk.local'"
op|','
nl|'\n'
string|"'virt_disk_size'"
op|':'
string|"'10737418240'"
op|','
nl|'\n'
string|"'backing_file'"
op|':'
string|"'/base/disk.local'"
op|','
nl|'\n'
string|"'disk_size'"
op|':'
string|"'83886080'"
op|'}'
op|']'
newline|'\n'
name|'disk_info_text'
op|'='
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_get_instance_disk_info
name|'def'
name|'fake_get_instance_disk_info'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'disk_info_text'
newline|'\n'
nl|'\n'
DECL|function|fake_destroy
dedent|''
name|'def'
name|'fake_destroy'
op|'('
name|'instance'
op|','
name|'network_info'
op|','
name|'cleanup'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_get_host_ip_addr
dedent|''
name|'def'
name|'fake_get_host_ip_addr'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|"'10.0.0.1'"
newline|'\n'
nl|'\n'
DECL|function|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'get_instance_disk_info'"
op|','
nl|'\n'
name|'fake_get_instance_disk_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'_destroy'"
op|','
name|'fake_destroy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'get_host_ip_addr'"
op|','
nl|'\n'
name|'fake_get_host_ip_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
nl|'\n'
name|'ins_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
string|'""" dest is different host case """'
newline|'\n'
name|'out'
op|'='
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'None'
op|','
name|'ins_ref'
op|','
string|"'10.0.0.2'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'out'
op|','
name|'disk_info_text'
op|')'
newline|'\n'
nl|'\n'
string|'""" dest is same host case """'
newline|'\n'
name|'out'
op|'='
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'migrate_disk_and_power_off'
op|'('
nl|'\n'
name|'None'
op|','
name|'ins_ref'
op|','
string|"'10.0.0.1'"
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'out'
op|','
name|'disk_info_text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wait_for_running
dedent|''
name|'def'
name|'test_wait_for_running'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test for nova.virt.libvirt.connection.LivirtConnection\n        ._wait_for_running. """'
newline|'\n'
nl|'\n'
DECL|function|fake_get_info
name|'def'
name|'fake_get_info'
op|'('
name|'instance_name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_name'
op|'=='
string|'"not_found"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'NotFound'
newline|'\n'
dedent|''
name|'elif'
name|'instance_name'
op|'=='
string|'"running"'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTOFF'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'get_info'"
op|','
nl|'\n'
name|'fake_get_info'
op|')'
newline|'\n'
nl|'\n'
string|'""" instance not found case """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'utils'
op|'.'
name|'LoopingCallDone'
op|','
nl|'\n'
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'_wait_for_running'
op|','
nl|'\n'
string|'"not_found"'
op|')'
newline|'\n'
nl|'\n'
string|'""" instance is running case """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'utils'
op|'.'
name|'LoopingCallDone'
op|','
nl|'\n'
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'_wait_for_running'
op|','
nl|'\n'
string|'"running"'
op|')'
newline|'\n'
nl|'\n'
string|'""" else case """'
newline|'\n'
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'_wait_for_running'
op|'('
string|'"else"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_migration
dedent|''
name|'def'
name|'test_finish_migration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test for nova.virt.libvirt.connection.LivirtConnection\n        .finish_migration. """'
newline|'\n'
nl|'\n'
name|'disk_info'
op|'='
op|'['
op|'{'
string|"'type'"
op|':'
string|"'qcow2'"
op|','
string|"'path'"
op|':'
string|"'/test/disk'"
op|','
nl|'\n'
string|"'local_gb'"
op|':'
number|'10'
op|','
string|"'backing_file'"
op|':'
string|"'/base/disk'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'type'"
op|':'
string|"'raw'"
op|','
string|"'path'"
op|':'
string|"'/test/disk.local'"
op|','
nl|'\n'
string|"'local_gb'"
op|':'
number|'10'
op|','
string|"'backing_file'"
op|':'
string|"'/base/disk.local'"
op|'}'
op|']'
newline|'\n'
name|'disk_info_text'
op|'='
name|'utils'
op|'.'
name|'dumps'
op|'('
name|'disk_info'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_extend
name|'def'
name|'fake_extend'
op|'('
name|'path'
op|','
name|'size'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_to_xml
dedent|''
name|'def'
name|'fake_to_xml'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'""'
newline|'\n'
nl|'\n'
DECL|function|fake_plug_vifs
dedent|''
name|'def'
name|'fake_plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_create_image
dedent|''
name|'def'
name|'fake_create_image'
op|'('
name|'context'
op|','
name|'inst'
op|','
name|'libvirt_xml'
op|','
name|'suffix'
op|'='
string|"''"
op|','
nl|'\n'
name|'disk_images'
op|'='
name|'None'
op|','
name|'network_info'
op|'='
name|'None'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_create_new_domain
dedent|''
name|'def'
name|'fake_create_new_domain'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
dedent|''
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_cow_images'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'connection'
op|'.'
name|'disk'
op|','
string|"'extend'"
op|','
name|'fake_extend'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'to_xml'"
op|','
name|'fake_to_xml'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'plug_vifs'"
op|','
name|'fake_plug_vifs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'_create_image'"
op|','
nl|'\n'
name|'fake_create_image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'_create_new_domain'"
op|','
nl|'\n'
name|'fake_create_new_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'fw'
op|'='
name|'self'
op|'.'
name|'NullFirewallDriver'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'firewall_driver'"
op|','
name|'fw'
op|')'
newline|'\n'
nl|'\n'
name|'ins_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ref'
op|'='
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'finish_migration'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'None'
op|','
name|'ins_ref'
op|','
nl|'\n'
name|'disk_info_text'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'ref'
op|','
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_migration
dedent|''
name|'def'
name|'test_finish_revert_migration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test for nova.virt.libvirt.connection.LivirtConnection\n        .finish_revert_migration. """'
newline|'\n'
nl|'\n'
DECL|function|fake_execute
name|'def'
name|'fake_execute'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_plug_vifs
dedent|''
name|'def'
name|'fake_plug_vifs'
op|'('
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_create_new_domain
dedent|''
name|'def'
name|'fake_create_new_domain'
op|'('
name|'xml'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'plug_vifs'"
op|','
name|'fake_plug_vifs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'execute'"
op|','
name|'fake_execute'
op|')'
newline|'\n'
name|'fw'
op|'='
name|'self'
op|'.'
name|'NullFirewallDriver'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'firewall_driver'"
op|','
name|'fw'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'libvirtconnection'
op|','
string|"'_create_new_domain'"
op|','
nl|'\n'
name|'fake_create_new_domain'
op|')'
newline|'\n'
nl|'\n'
name|'ins_ref'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'libvirt_xml_path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'flags'
op|'.'
name|'FLAGS'
op|'.'
name|'instances_path'
op|','
nl|'\n'
name|'ins_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'libvirt.xml'"
op|')'
newline|'\n'
name|'f'
op|'='
name|'open'
op|'('
name|'libvirt_xml_path'
op|','
string|"'w'"
op|')'
newline|'\n'
name|'f'
op|'.'
name|'close'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'ref'
op|'='
name|'self'
op|'.'
name|'libvirtconnection'
op|'.'
name|'finish_revert_migration'
op|'('
name|'ins_ref'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'isinstance'
op|'('
name|'ref'
op|','
name|'eventlet'
op|'.'
name|'event'
op|'.'
name|'Event'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

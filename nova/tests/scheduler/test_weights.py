begin_unit
comment|'# Copyright 2011-2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Scheduler weights.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'weights'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'matchers'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'scheduler'
name|'import'
name|'fakes'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestWeighedHost
name|'class'
name|'TestWeighedHost'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_dict_conversion
indent|'    '
name|'def'
name|'test_dict_conversion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'host_state'
op|'='
name|'fakes'
op|'.'
name|'FakeHostState'
op|'('
string|"'somehost'"
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'host'
op|'='
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
string|"'someweight'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|"'weight'"
op|':'
string|"'someweight'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'somehost'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'host'
op|'.'
name|'to_dict'
op|'('
op|')'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'expected'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_weighers
dedent|''
name|'def'
name|'test_all_weighers'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'classes'
op|'='
name|'weights'
op|'.'
name|'all_weighers'
op|'('
op|')'
newline|'\n'
name|'class_names'
op|'='
op|'['
name|'cls'
op|'.'
name|'__name__'
name|'for'
name|'cls'
name|'in'
name|'classes'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'classes'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'RAMWeigher'"
op|','
name|'class_names'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RamWeigherTestCase
dedent|''
dedent|''
name|'class'
name|'RamWeigherTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RamWeigherTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_manager'
op|'='
name|'fakes'
op|'.'
name|'FakeHostManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weight_handler'
op|'='
name|'weights'
op|'.'
name|'HostWeightHandler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weight_classes'
op|'='
name|'self'
op|'.'
name|'weight_handler'
op|'.'
name|'get_matching_classes'
op|'('
nl|'\n'
op|'['
string|"'nova.scheduler.weights.ram.RAMWeigher'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_weighed_host
dedent|''
name|'def'
name|'_get_weighed_host'
op|'('
name|'self'
op|','
name|'hosts'
op|','
name|'weight_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'weight_properties'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'weight_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'weight_handler'
op|'.'
name|'get_weighed_objects'
op|'('
name|'self'
op|'.'
name|'weight_classes'
op|','
nl|'\n'
name|'hosts'
op|','
name|'weight_properties'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_all_hosts
dedent|''
name|'def'
name|'_get_all_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'host_states'
op|'='
name|'self'
op|'.'
name|'host_manager'
op|'.'
name|'get_all_host_states'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'host_states'
newline|'\n'
nl|'\n'
DECL|member|test_default_of_spreading_first
dedent|''
name|'def'
name|'test_default_of_spreading_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=512'
nl|'\n'
comment|'# host2: free_ram_mb=1024'
nl|'\n'
comment|'# host3: free_ram_mb=3072'
nl|'\n'
comment|'# host4: free_ram_mb=8192'
nl|'\n'
nl|'\n'
comment|'# so, host4 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
number|'8192'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ram_filter_multiplier1
dedent|''
name|'def'
name|'test_ram_filter_multiplier1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'ram_weight_multiplier'
op|'='
op|'-'
number|'1.0'
op|')'
newline|'\n'
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=-512'
nl|'\n'
comment|'# host2: free_ram_mb=-1024'
nl|'\n'
comment|'# host3: free_ram_mb=-3072'
nl|'\n'
comment|'# host4: free_ram_mb=-8192'
nl|'\n'
nl|'\n'
comment|'# so, host1 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
op|'-'
number|'512'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ram_filter_multiplier2
dedent|''
name|'def'
name|'test_ram_filter_multiplier2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'ram_weight_multiplier'
op|'='
number|'2.0'
op|')'
newline|'\n'
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=512 * 2'
nl|'\n'
comment|'# host2: free_ram_mb=1024 * 2'
nl|'\n'
comment|'# host3: free_ram_mb=3072 * 2'
nl|'\n'
comment|'# host4: free_ram_mb=8192 * 2'
nl|'\n'
nl|'\n'
comment|'# so, host4 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
number|'8192'
op|'*'
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host4'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

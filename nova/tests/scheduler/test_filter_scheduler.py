begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Filter Scheduler.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'conductor'
name|'import'
name|'api'
name|'as'
name|'conductor_api'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'driver'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'filter_scheduler'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'host_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'utils'
name|'as'
name|'scheduler_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'weights'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'scheduler'
name|'import'
name|'fakes'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'scheduler'
name|'import'
name|'test_scheduler'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_get_filtered_hosts
name|'def'
name|'fake_get_filtered_hosts'
op|'('
name|'hosts'
op|','
name|'filter_properties'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'list'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_get_group_filtered_hosts
dedent|''
name|'def'
name|'fake_get_group_filtered_hosts'
op|'('
name|'hosts'
op|','
name|'filter_properties'
op|','
name|'index'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'group_hosts'
op|'='
name|'filter_properties'
op|'.'
name|'get'
op|'('
string|"'group_hosts'"
op|')'
name|'or'
op|'['
op|']'
newline|'\n'
name|'if'
name|'group_hosts'
op|':'
newline|'\n'
indent|'        '
name|'hosts'
op|'='
name|'list'
op|'('
name|'hosts'
op|')'
newline|'\n'
name|'hosts'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'hosts'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'list'
op|'('
name|'hosts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FilterSchedulerTestCase
dedent|''
dedent|''
name|'class'
name|'FilterSchedulerTestCase'
op|'('
name|'test_scheduler'
op|'.'
name|'SchedulerTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case for Filter Scheduler."""'
newline|'\n'
nl|'\n'
DECL|variable|driver_cls
name|'driver_cls'
op|'='
name|'filter_scheduler'
op|'.'
name|'FilterScheduler'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_no_hosts
name|'def'
name|'test_run_instance_no_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_fake_empty_call_zone_method
indent|'        '
name|'def'
name|'_fake_empty_call_zone_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'uuid'
op|'='
string|"'fake-uuid1'"
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'1'
op|','
string|"'root_gb'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_uuids'"
op|':'
op|'['
name|'uuid'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update_and_get_original'"
op|')'
newline|'\n'
name|'old_ref'
op|','
name|'new_ref'
op|'='
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'uuid'
op|','
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
string|"'task_state'"
op|':'
nl|'\n'
name|'None'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'conductor_api'
op|'.'
name|'LocalAPI'
op|')'
op|','
name|'new_ref'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'compute_node_get_all'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_get_all'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'sched'
op|'.'
name|'schedule_run_instance'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'request_spec'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_non_admin
dedent|''
name|'def'
name|'test_run_instance_non_admin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'was_admin'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_get
name|'def'
name|'fake_get'
op|'('
name|'context'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# make sure this is called with admin context, even though'
nl|'\n'
comment|"# we're using user context below"
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'was_admin'
op|'='
name|'context'
op|'.'
name|'is_admin'
newline|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_all_host_states'"
op|','
name|'fake_get'
op|')'
newline|'\n'
nl|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
nl|'\n'
name|'uuid'
op|'='
string|"'fake-uuid1'"
newline|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'1'
op|','
string|"'local_gb'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_uuids'"
op|':'
op|'['
name|'uuid'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_update_and_get_original'"
op|')'
newline|'\n'
name|'old_ref'
op|','
name|'new_ref'
op|'='
name|'db'
op|'.'
name|'instance_update_and_get_original'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'uuid'
op|','
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
string|"'task_state'"
op|':'
nl|'\n'
name|'None'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'('
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'conductor_api'
op|'.'
name|'LocalAPI'
op|')'
op|','
name|'new_ref'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'sched'
op|'.'
name|'schedule_run_instance'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'request_spec'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'was_admin'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_scheduler_includes_launch_index
dedent|''
name|'def'
name|'test_scheduler_includes_launch_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'instance_opts'
op|'='
op|'{'
string|"'fake_opt1'"
op|':'
string|"'meow'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_uuids'"
op|':'
op|'['
string|"'fake-uuid1'"
op|','
string|"'fake-uuid2'"
op|']'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_opts'
op|'}'
newline|'\n'
name|'instance1'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake-uuid1'"
op|'}'
newline|'\n'
name|'instance2'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake-uuid2'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_has_launch_index
name|'def'
name|'_has_launch_index'
op|'('
name|'expected_index'
op|')'
op|':'
newline|'\n'
indent|'            '
string|'"""Return a function that verifies the expected index."""'
newline|'\n'
DECL|function|_check_launch_index
name|'def'
name|'_check_launch_index'
op|'('
name|'value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'if'
string|"'instance_properties'"
name|'in'
name|'value'
op|':'
newline|'\n'
indent|'                    '
name|'if'
string|"'launch_index'"
name|'in'
name|'value'
op|'['
string|"'instance_properties'"
op|']'
op|':'
newline|'\n'
indent|'                        '
name|'index'
op|'='
name|'value'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'launch_index'"
op|']'
newline|'\n'
name|'if'
name|'index'
op|'=='
name|'expected_index'
op|':'
newline|'\n'
indent|'                            '
name|'return'
name|'True'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'_check_launch_index'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'_schedule'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'_provision_resource'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_schedule'
op|'('
name|'fake_context'
op|','
name|'request_spec'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
op|'['
string|"'fake-uuid1'"
op|','
string|"'fake-uuid2'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
string|"'host1'"
op|','
string|"'host2'"
op|']'
op|')'
newline|'\n'
comment|'# instance 1'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_provision_resource'
op|'('
nl|'\n'
name|'fake_context'
op|','
string|"'host1'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'Func'
op|'('
name|'_has_launch_index'
op|'('
number|'0'
op|')'
op|')'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
string|"'fake-uuid1'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instance1'
op|')'
newline|'\n'
comment|'# instance 2'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'_provision_resource'
op|'('
nl|'\n'
name|'fake_context'
op|','
string|"'host2'"
op|','
nl|'\n'
name|'mox'
op|'.'
name|'Func'
op|'('
name|'_has_launch_index'
op|'('
number|'1'
op|')'
op|')'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
string|"'fake-uuid2'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instance2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'schedule_run_instance'
op|'('
name|'fake_context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_happy_day
dedent|''
name|'def'
name|'test_schedule_happy_day'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure there\'s nothing glaringly wrong with _schedule()\n        by doing a happy day pass through.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
DECL|function|_fake_weigh_objects
name|'def'
name|'_fake_weigh_objects'
op|'('
name|'_self'
op|','
name|'functions'
op|','
name|'hosts'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'next_weight'
op|'+='
number|'2.0'
newline|'\n'
name|'host_state'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
name|'self'
op|'.'
name|'next_weight'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weights'
op|'.'
name|'HostWeightHandler'
op|','
nl|'\n'
string|"'get_weighed_objects'"
op|','
name|'_fake_weigh_objects'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'num_instances'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'weighed_hosts'
op|'='
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'fake_context'
op|','
name|'request_spec'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'weighed_hosts'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'for'
name|'weighed_host'
name|'in'
name|'weighed_hosts'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_prep_resize_doesnt_update_host
dedent|''
dedent|''
name|'def'
name|'test_schedule_prep_resize_doesnt_update_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|_return_hosts
name|'def'
name|'_return_hosts'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'host_state'
op|'='
name|'host_manager'
op|'.'
name|'HostState'
op|'('
string|"'host2'"
op|','
string|"'node2'"
op|')'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
number|'1.0'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|','
string|"'_schedule'"
op|','
name|'_return_hosts'
op|')'
newline|'\n'
nl|'\n'
name|'info'
op|'='
op|'{'
string|"'called'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_fake_instance_update_db
name|'def'
name|'_fake_instance_update_db'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# This should not be called'
nl|'\n'
indent|'            '
name|'info'
op|'['
string|"'called'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'driver'
op|','
string|"'instance_update_db'"
op|','
nl|'\n'
name|'_fake_instance_update_db'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake-uuid'"
op|','
string|"'host'"
op|':'
string|"'host1'"
op|'}'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'schedule_prep_resize'
op|'('
name|'fake_context'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'instance'
op|','
op|'{'
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'called'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_max_attempts
dedent|''
name|'def'
name|'test_max_attempts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'sched'
op|'.'
name|'_max_attempts'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_max_attempts
dedent|''
name|'def'
name|'test_invalid_max_attempts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
name|'sched'
op|'.'
name|'_max_attempts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_retry_disabled
dedent|''
name|'def'
name|'test_retry_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Retry info should not get populated when re-scheduling is off.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'12345'"
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'compute_node_get_all'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_get_all'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# should not have retry info in the populated filter properties:'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|'"retry"'
name|'in'
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_retry_attempt_one
dedent|''
name|'def'
name|'test_retry_attempt_one'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test retry logic on initial scheduling attempt.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'2'
op|')'
newline|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'12345'"
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'compute_node_get_all'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_get_all'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'num_attempts'
op|'='
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'num_attempts'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'num_attempts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_retry_attempt_two
dedent|''
name|'def'
name|'test_retry_attempt_two'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test retry logic when re-scheduling.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'2'
op|')'
newline|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'12345'"
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
nl|'\n'
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'compute_node_get_all'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'compute_node_get_all'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'num_attempts'
op|'='
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'num_attempts'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'num_attempts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_retry_exceeded_max_attempts
dedent|''
name|'def'
name|'test_retry_exceeded_max_attempts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test for necessary explosion when max retries is exceeded and that'
nl|'\n'
comment|'# the information needed in request_spec is still present for error'
nl|'\n'
comment|'# handling'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_max_attempts'
op|'='
number|'2'
op|')'
newline|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'12345'"
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
string|"'fake-id'"
op|']'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|','
nl|'\n'
name|'instance_uuids'
op|'='
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'2'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|','
name|'sched'
op|'.'
name|'schedule_run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'is_first_time'
op|'='
name|'False'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
name|'uuids'
op|'='
name|'request_spec'
op|'.'
name|'get'
op|'('
string|"'instance_uuids'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'uuids'
op|','
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_retry_host
dedent|''
name|'def'
name|'test_add_retry_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|','
name|'hosts'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
name|'host'
op|'='
string|'"fakehost"'
newline|'\n'
name|'node'
op|'='
string|'"fakenode"'
newline|'\n'
nl|'\n'
name|'scheduler_utils'
op|'.'
name|'_add_retry_host'
op|'('
name|'filter_properties'
op|','
name|'host'
op|','
name|'node'
op|')'
newline|'\n'
nl|'\n'
name|'hosts'
op|'='
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'hosts'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'hosts'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
name|'host'
op|','
name|'node'
op|']'
op|','
name|'hosts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_select_populate
dedent|''
name|'def'
name|'test_post_select_populate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test addition of certain filter props after a node is selected.'
nl|'\n'
indent|'        '
name|'retry'
op|'='
op|'{'
string|"'hosts'"
op|':'
op|'['
op|']'
op|','
string|"'num_attempts'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
name|'retry'
op|'}'
newline|'\n'
nl|'\n'
name|'host_state'
op|'='
name|'host_manager'
op|'.'
name|'HostState'
op|'('
string|"'host'"
op|','
string|"'node'"
op|')'
newline|'\n'
name|'host_state'
op|'.'
name|'limits'
op|'['
string|"'vcpus'"
op|']'
op|'='
number|'5'
newline|'\n'
name|'scheduler_utils'
op|'.'
name|'populate_filter_properties'
op|'('
name|'filter_properties'
op|','
nl|'\n'
name|'host_state'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'host'"
op|','
string|"'node'"
op|']'
op|','
nl|'\n'
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'hosts'"
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'vcpus'"
op|':'
number|'5'
op|'}'
op|','
name|'host_state'
op|'.'
name|'limits'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prep_resize_post_populates_retry
dedent|''
name|'def'
name|'test_prep_resize_post_populates_retry'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Prep resize should add a ('host', 'node') entry to the retry dict."
nl|'\n'
indent|'        '
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
string|"'image'"
newline|'\n'
name|'instance'
op|'='
op|'{'
string|"'disable_terminate'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'fakeuuid'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'info_cache'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'system_metadata'"
op|':'
op|'['
op|']'
op|','
string|"'shutdown_terminate'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
string|"'security_groups'"
op|':'
op|'['
op|']'
op|','
string|"'metadata'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
nl|'\n'
string|"'memory_mb'"
op|':'
number|'1024'
op|','
string|"'root_gb'"
op|':'
number|'40'
op|','
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"u'm1.medium'"
op|','
string|"'deleted'"
op|':'
number|'0'
op|','
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'updated_at'"
op|':'
name|'None'
op|','
string|"'disabled'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'2'
op|','
string|"'extra_specs'"
op|':'
op|'{'
op|'}'
op|','
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
string|"'is_public'"
op|':'
name|'True'
op|','
string|"'flavorid'"
op|':'
string|"u'3'"
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
name|'None'
op|','
string|"'id'"
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_properties'"
op|':'
name|'instance_properties'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
name|'instance_type'
op|'}'
newline|'\n'
name|'retry'
op|'='
op|'{'
string|"'hosts'"
op|':'
op|'['
op|']'
op|','
string|"'num_attempts'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'retry'"
op|':'
name|'retry'
op|'}'
newline|'\n'
name|'reservations'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'host'
op|'='
name|'fakes'
op|'.'
name|'FakeHostState'
op|'('
string|"'host'"
op|','
string|"'node'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'weighed_host'
op|'='
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host'
op|','
number|'1'
op|')'
newline|'\n'
name|'weighed_hosts'
op|'='
op|'['
name|'weighed_host'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'sched'
op|','
string|"'_schedule'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'sched'
op|'.'
name|'compute_rpcapi'
op|','
string|"'prep_resize'"
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
name|'filter_properties'
op|','
nl|'\n'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'weighed_hosts'
op|')'
newline|'\n'
name|'sched'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|','
string|"'host'"
op|','
name|'reservations'
op|','
name|'request_spec'
op|'='
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|','
name|'node'
op|'='
string|"'node'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'sched'
op|'.'
name|'schedule_prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|'['
string|"'host'"
op|','
string|"'node'"
op|']'
op|']'
op|','
nl|'\n'
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'hosts'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_basic_schedule_run_instances_anti_affinity
dedent|''
name|'def'
name|'test_basic_schedule_run_instances_anti_affinity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filter_properties'
op|'='
op|'{'
string|"'scheduler_hints'"
op|':'
nl|'\n'
op|'{'
string|"'group'"
op|':'
string|"'cats'"
op|'}'
op|'}'
newline|'\n'
comment|'# Request spec 1'
nl|'\n'
name|'instance_opts1'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
string|"'os_type'"
op|':'
string|"'Linux'"
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'system_metadata'"
op|':'
op|'{'
string|"'system'"
op|':'
string|"'metadata'"
op|'}'
op|'}'
newline|'\n'
name|'request_spec1'
op|'='
op|'{'
string|"'instance_uuids'"
op|':'
op|'['
string|"'fake-uuid1-1'"
op|','
string|"'fake-uuid1-2'"
op|']'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
name|'instance_opts1'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
string|"'vcpus'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
DECL|function|_fake_weigh_objects
name|'def'
name|'_fake_weigh_objects'
op|'('
name|'_self'
op|','
name|'functions'
op|','
name|'hosts'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'next_weight'
op|'+='
number|'2.0'
newline|'\n'
name|'host_state'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
name|'self'
op|'.'
name|'next_weight'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_group_filtered_hosts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weights'
op|'.'
name|'HostWeightHandler'
op|','
nl|'\n'
string|"'get_weighed_objects'"
op|','
name|'_fake_weigh_objects'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'driver'
op|','
string|"'instance_update_db'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'run_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'sched'
op|','
string|"'group_hosts'"
op|')'
newline|'\n'
nl|'\n'
name|'instance1_1'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake-uuid1-1'"
op|'}'
newline|'\n'
name|'instance1_2'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake-uuid1-2'"
op|'}'
newline|'\n'
nl|'\n'
name|'sched'
op|'.'
name|'group_hosts'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'cats'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|inc_launch_index1
name|'def'
name|'inc_launch_index1'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec1'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'launch_index'"
op|']'
op|'='
op|'('
nl|'\n'
name|'request_spec1'
op|'['
string|"'instance_properties'"
op|']'
op|'['
string|"'launch_index'"
op|']'
op|'+'
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'expected_metadata'
op|'='
op|'{'
string|"'system_metadata'"
op|':'
nl|'\n'
op|'{'
string|"'system'"
op|':'
string|"'metadata'"
op|','
string|"'group'"
op|':'
string|"'cats'"
op|'}'
op|'}'
newline|'\n'
name|'driver'
op|'.'
name|'instance_update_db'
op|'('
name|'fake_context'
op|','
name|'instance1_1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'extra_values'
op|'='
name|'expected_metadata'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
nl|'\n'
name|'inc_launch_index1'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instance1_1'
op|')'
newline|'\n'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'run_instance'
op|'('
name|'fake_context'
op|','
name|'host'
op|'='
string|"'host3'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance1_1'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
name|'is_first_time'
op|'='
name|'None'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec1'
op|','
name|'filter_properties'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node3'"
op|')'
newline|'\n'
nl|'\n'
name|'driver'
op|'.'
name|'instance_update_db'
op|'('
name|'fake_context'
op|','
name|'instance1_2'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'extra_values'
op|'='
name|'expected_metadata'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
nl|'\n'
name|'inc_launch_index1'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instance1_2'
op|')'
newline|'\n'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'run_instance'
op|'('
name|'fake_context'
op|','
name|'host'
op|'='
string|"'host4'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance1_2'
op|','
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'admin_password'
op|'='
name|'None'
op|','
name|'is_first_time'
op|'='
name|'None'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec1'
op|','
name|'filter_properties'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'node'
op|'='
string|"'node4'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'sched'
op|'.'
name|'schedule_run_instance'
op|'('
name|'fake_context'
op|','
name|'request_spec1'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_host_pool
dedent|''
name|'def'
name|'test_schedule_host_pool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure the scheduler_host_subset_size property works properly."""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_host_subset_size'
op|'='
number|'2'
op|')'
newline|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# one host should be chosen'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'hosts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_large_host_pool
dedent|''
name|'def'
name|'test_schedule_large_host_pool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Hosts should still be chosen if pool size\n        is larger than number of filtered hosts.\n        """'
newline|'\n'
nl|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_host_subset_size'
op|'='
number|'20'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# one host should be chose'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'hosts'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schedule_chooses_best_host
dedent|''
name|'def'
name|'test_schedule_chooses_best_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""If scheduler_host_subset_size is 1, the largest host with greatest\n        weight should be returned.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_host_subset_size'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'50'
newline|'\n'
nl|'\n'
DECL|function|_fake_weigh_objects
name|'def'
name|'_fake_weigh_objects'
op|'('
name|'_self'
op|','
name|'functions'
op|','
name|'hosts'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'this_weight'
op|'='
name|'self'
op|'.'
name|'next_weight'
newline|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'0'
newline|'\n'
name|'host_state'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
name|'this_weight'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_properties'
op|'='
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
name|'dict'
op|'('
name|'instance_properties'
op|'='
name|'instance_properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weights'
op|'.'
name|'HostWeightHandler'
op|','
nl|'\n'
string|"'get_weighed_objects'"
op|','
name|'_fake_weigh_objects'
op|')'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'sched'
op|'.'
name|'_schedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
comment|'# one host should be chosen'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'hosts'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'50'
op|','
name|'hosts'
op|'['
number|'0'
op|']'
op|'.'
name|'weight'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_hosts_happy_day
dedent|''
name|'def'
name|'test_select_hosts_happy_day'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""select_hosts is basically a wrapper around the _select() method.\n\n        Similar to the _select tests, this just does a happy path test to\n        ensure there is nothing glaringly wrong.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
name|'selected_hosts'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_fake_weigh_objects
name|'def'
name|'_fake_weigh_objects'
op|'('
name|'_self'
op|','
name|'functions'
op|','
name|'hosts'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'next_weight'
op|'+='
number|'2.0'
newline|'\n'
name|'host_state'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'selected_hosts'
op|'.'
name|'append'
op|'('
name|'host_state'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
name|'self'
op|'.'
name|'next_weight'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weights'
op|'.'
name|'HostWeightHandler'
op|','
nl|'\n'
string|"'get_weighed_objects'"
op|','
name|'_fake_weigh_objects'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'num_instances'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'hosts'
op|'='
name|'sched'
op|'.'
name|'select_hosts'
op|'('
name|'fake_context'
op|','
name|'request_spec'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'hosts'
op|')'
op|','
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'hosts'
op|','
name|'selected_hosts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_hosts_no_valid_host
dedent|''
name|'def'
name|'test_select_hosts_no_valid_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_return_no_host
indent|'        '
name|'def'
name|'_return_no_host'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'_schedule'"
op|','
name|'_return_no_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'select_hosts'
op|','
name|'self'
op|'.'
name|'context'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_destinations
dedent|''
name|'def'
name|'test_select_destinations'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""select_destinations is basically a wrapper around _schedule().\n\n        Similar to the _schedule tests, this just does a happy path test to\n        ensure there is nothing glaringly wrong.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'next_weight'
op|'='
number|'1.0'
newline|'\n'
nl|'\n'
name|'selected_hosts'
op|'='
op|'['
op|']'
newline|'\n'
name|'selected_nodes'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|_fake_weigh_objects
name|'def'
name|'_fake_weigh_objects'
op|'('
name|'_self'
op|','
name|'functions'
op|','
name|'hosts'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'next_weight'
op|'+='
number|'2.0'
newline|'\n'
name|'host_state'
op|'='
name|'hosts'
op|'['
number|'0'
op|']'
newline|'\n'
name|'selected_hosts'
op|'.'
name|'append'
op|'('
name|'host_state'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'selected_nodes'
op|'.'
name|'append'
op|'('
name|'host_state'
op|'.'
name|'nodename'
op|')'
newline|'\n'
name|'return'
op|'['
name|'weights'
op|'.'
name|'WeighedHost'
op|'('
name|'host_state'
op|','
name|'self'
op|'.'
name|'next_weight'
op|')'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'sched'
op|'='
name|'fakes'
op|'.'
name|'FakeFilterScheduler'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sched'
op|'.'
name|'host_manager'
op|','
string|"'get_filtered_hosts'"
op|','
nl|'\n'
name|'fake_get_filtered_hosts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'weights'
op|'.'
name|'HostWeightHandler'
op|','
nl|'\n'
string|"'get_weighed_objects'"
op|','
name|'_fake_weigh_objects'
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_type'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'512'
op|','
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'instance_properties'"
op|':'
op|'{'
string|"'project_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'512'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'os_type'"
op|':'
string|"'Linux'"
op|'}'
op|','
nl|'\n'
string|"'num_instances'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'dests'
op|'='
name|'sched'
op|'.'
name|'select_destinations'
op|'('
name|'fake_context'
op|','
name|'request_spec'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
op|'('
name|'host'
op|','
name|'node'
op|')'
op|'='
op|'('
name|'dests'
op|'['
number|'0'
op|']'
op|'['
string|"'host'"
op|']'
op|','
name|'dests'
op|'['
number|'0'
op|']'
op|'['
string|"'nodename'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
name|'selected_hosts'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'node'
op|','
name|'selected_nodes'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_select_destinations_no_valid_host
dedent|''
name|'def'
name|'test_select_destinations_no_valid_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_return_no_host
indent|'        '
name|'def'
name|'_return_no_host'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'driver'
op|','
string|"'_schedule'"
op|','
name|'_return_no_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoValidHost'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'select_destinations'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'num_instances'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

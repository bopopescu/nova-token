begin_unit
comment|'# Copyright 2011-2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Least Cost functions.\n"""'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
name|'import'
name|'weights'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'scheduler'
op|'.'
name|'weights'
name|'import'
name|'least_cost'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'scheduler'
name|'import'
name|'fakes'
newline|'\n'
nl|'\n'
DECL|variable|test_least_cost_opts
name|'test_least_cost_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'compute_fake_weigher1_weight'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'2.0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How much weight to give the fake_weigher1 function'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'FloatOpt'
op|'('
string|"'compute_fake_weigher2_weight'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'1.0'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How much weight to give the fake_weigher2 function'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'least_cost_functions'"
op|','
string|"'nova.scheduler.weights.least_cost'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_fill_first_cost_fn_weight'"
op|','
nl|'\n'
string|"'nova.scheduler.weights.least_cost'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'test_least_cost_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compute_fake_weigher1
name|'def'
name|'compute_fake_weigher1'
op|'('
name|'hostinfo'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'hostinfo'
op|'.'
name|'free_ram_mb'
op|'+'
number|'10000'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|compute_fake_weigher2
dedent|''
name|'def'
name|'compute_fake_weigher2'
op|'('
name|'hostinfo'
op|','
name|'options'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'return'
name|'hostinfo'
op|'.'
name|'free_ram_mb'
op|'*'
number|'2'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LeastCostTestCase
dedent|''
name|'class'
name|'LeastCostTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LeastCostTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host_manager'
op|'='
name|'fakes'
op|'.'
name|'FakeHostManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'weight_handler'
op|'='
name|'weights'
op|'.'
name|'HostWeightHandler'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_weighed_host
dedent|''
name|'def'
name|'_get_weighed_host'
op|'('
name|'self'
op|','
name|'hosts'
op|','
name|'weight_properties'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'weigher_classes'
op|'='
name|'least_cost'
op|'.'
name|'get_least_cost_weighers'
op|'('
op|')'
newline|'\n'
name|'if'
name|'weight_properties'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'weight_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'weight_handler'
op|'.'
name|'get_weighed_objects'
op|'('
name|'weigher_classes'
op|','
nl|'\n'
name|'hosts'
op|','
name|'weight_properties'
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_get_all_hosts
dedent|''
name|'def'
name|'_get_all_hosts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fakes'
op|'.'
name|'mox_host_manager_db_calls'
op|'('
name|'self'
op|'.'
name|'mox'
op|','
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'host_states'
op|'='
name|'self'
op|'.'
name|'host_manager'
op|'.'
name|'get_all_host_states'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'host_states'
newline|'\n'
nl|'\n'
DECL|member|test_default_of_spread_first
dedent|''
name|'def'
name|'test_default_of_spread_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Default modifier is -1.0, so it turns out that hosts with'
nl|'\n'
comment|'# the most free memory win'
nl|'\n'
indent|'        '
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=512'
nl|'\n'
comment|'# host2: free_ram_mb=1024'
nl|'\n'
comment|'# host3: free_ram_mb=3072'
nl|'\n'
comment|'# host4: free_ram_mb=8192'
nl|'\n'
nl|'\n'
comment|'# so, host1 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
number|'8192'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_filling_first
dedent|''
name|'def'
name|'test_filling_first'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_fill_first_cost_fn_weight'
op|'='
number|'1.0'
op|')'
newline|'\n'
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=-512'
nl|'\n'
comment|'# host2: free_ram_mb=-1024'
nl|'\n'
comment|'# host3: free_ram_mb=-3072'
nl|'\n'
comment|'# host4: free_ram_mb=-8192'
nl|'\n'
nl|'\n'
comment|'# so, host1 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
op|'-'
number|'512'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_weighted_sum_provided_method
dedent|''
name|'def'
name|'test_weighted_sum_provided_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fns'
op|'='
op|'['
string|"'nova.tests.scheduler.test_least_cost.compute_fake_weigher1'"
op|','
nl|'\n'
string|"'nova.tests.scheduler.test_least_cost.compute_fake_weigher2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'least_cost_functions'
op|'='
name|'fns'
op|')'
newline|'\n'
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=512'
nl|'\n'
comment|'# host2: free_ram_mb=1024'
nl|'\n'
comment|'# host3: free_ram_mb=3072'
nl|'\n'
comment|'# host4: free_ram_mb=8192'
nl|'\n'
nl|'\n'
comment|'# [offset, scale]='
nl|'\n'
comment|'# [10512, 11024, 13072, 18192]'
nl|'\n'
comment|'# [1024,  2048, 6144, 16384]'
nl|'\n'
nl|'\n'
comment|'# adjusted [ 2.0 * x + 1.0 * y] ='
nl|'\n'
comment|'# [22048, 24096, 32288, 52768]'
nl|'\n'
nl|'\n'
comment|'# so, host1 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
number|'52768'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_weighted_sum_single_function
dedent|''
name|'def'
name|'test_weighted_sum_single_function'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fns'
op|'='
op|'['
string|"'nova.tests.scheduler.test_least_cost.compute_fake_weigher1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'least_cost_functions'
op|'='
name|'fns'
op|')'
newline|'\n'
name|'hostinfo_list'
op|'='
name|'self'
op|'.'
name|'_get_all_hosts'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# host1: free_ram_mb=0'
nl|'\n'
comment|'# host2: free_ram_mb=1536'
nl|'\n'
comment|'# host3: free_ram_mb=3072'
nl|'\n'
comment|'# host4: free_ram_mb=8192'
nl|'\n'
nl|'\n'
comment|'# [offset, ]='
nl|'\n'
comment|'# [10512, 11024, 13072, 18192]'
nl|'\n'
comment|'# adjusted [ 2.0 * x ]='
nl|'\n'
comment|'# [21024, 22048, 26144, 36384]'
nl|'\n'
nl|'\n'
comment|'# so, host1 should win:'
nl|'\n'
name|'weighed_host'
op|'='
name|'self'
op|'.'
name|'_get_weighed_host'
op|'('
name|'hostinfo_list'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'weight'
op|','
number|'36384'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'weighed_host'
op|'.'
name|'obj'
op|'.'
name|'host'
op|','
string|"'host4'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

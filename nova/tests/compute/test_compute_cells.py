begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
comment|'# Copyright (c) 2012 Rackspace Hosting'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""\nTests For Compute w/ Cells\n"""'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'cells_api'
name|'as'
name|'compute_cells_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'compute'
name|'import'
name|'test_compute'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.tests.test_compute_cells'"
op|')'
newline|'\n'
nl|'\n'
DECL|variable|ORIG_COMPUTE_API
name|'ORIG_COMPUTE_API'
op|'='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|stub_call_to_cells
name|'def'
name|'stub_call_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fn'
op|'='
name|'getattr'
op|'('
name|'ORIG_COMPUTE_API'
op|','
name|'method'
op|')'
newline|'\n'
name|'return'
name|'fn'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|stub_cast_to_cells
dedent|''
name|'def'
name|'stub_cast_to_cells'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'method'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'fn'
op|'='
name|'getattr'
op|'('
name|'ORIG_COMPUTE_API'
op|','
name|'method'
op|')'
newline|'\n'
name|'fn'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|deploy_stubs
dedent|''
name|'def'
name|'deploy_stubs'
op|'('
name|'stubs'
op|','
name|'api'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'api'
op|','
string|"'_call_to_cells'"
op|','
name|'stub_call_to_cells'
op|')'
newline|'\n'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'api'
op|','
string|"'_cast_to_cells'"
op|','
name|'stub_cast_to_cells'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CellsComputeAPITestCase
dedent|''
name|'class'
name|'CellsComputeAPITestCase'
op|'('
name|'test_compute'
op|'.'
name|'ComputeAPITestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CellsComputeAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'global'
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'ORIG_COMPUTE_API'
op|'='
name|'self'
op|'.'
name|'compute_api'
newline|'\n'
nl|'\n'
DECL|function|_fake_cell_read_only
name|'def'
name|'_fake_cell_read_only'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|function|_fake_validate_cell
dedent|''
name|'def'
name|'_fake_validate_cell'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
newline|'\n'
nl|'\n'
DECL|function|_nop_update
dedent|''
name|'def'
name|'_nop_update'
op|'('
name|'context'
op|','
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute_cells_api'
op|'.'
name|'ComputeCellsAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'_cell_read_only'"
op|','
nl|'\n'
name|'_fake_cell_read_only'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'_validate_cell'"
op|','
nl|'\n'
name|'_fake_validate_cell'
op|')'
newline|'\n'
nl|'\n'
comment|"# NOTE(belliott) Don't update the instance state"
nl|'\n'
comment|'# for the tests at the API layer.  Let it happen after'
nl|'\n'
comment|'# the stub cast to cells so that expected_task_states'
nl|'\n'
comment|'# match.'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'update'"
op|','
name|'_nop_update'
op|')'
newline|'\n'
nl|'\n'
name|'deploy_stubs'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
name|'self'
op|'.'
name|'compute_api'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'super'
op|'('
name|'CellsComputeAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_metadata
dedent|''
name|'def'
name|'test_instance_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"Test is incompatible with cells."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migrate
dedent|''
name|'def'
name|'test_live_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"Test is incompatible with cells."'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_backdoor_port
dedent|''
name|'def'
name|'test_get_backdoor_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'skipTest'
op|'('
string|'"Test is incompatible with cells."'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CellsComputePolicyTestCase
dedent|''
dedent|''
name|'class'
name|'CellsComputePolicyTestCase'
op|'('
name|'test_compute'
op|'.'
name|'ComputePolicyTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CellsComputePolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'global'
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'ORIG_COMPUTE_API'
op|'='
name|'self'
op|'.'
name|'compute_api'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute_cells_api'
op|'.'
name|'ComputeCellsAPI'
op|'('
op|')'
newline|'\n'
name|'deploy_stubs'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
name|'self'
op|'.'
name|'compute_api'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'global'
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'ORIG_COMPUTE_API'
newline|'\n'
name|'super'
op|'('
name|'CellsComputePolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

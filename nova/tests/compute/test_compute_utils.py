begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2013 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests For miscellaneous util methods used with compute."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'block_device'
name|'as'
name|'block_device_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'instance'
name|'as'
name|'instance_obj'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'periodic_task'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_block_device'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_server_actions'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'image'
op|'.'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'matchers'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'driver'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_manager'"
op|','
string|"'nova.service'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_driver'"
op|','
string|"'nova.virt.driver'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeValidateDeviceTestCase
name|'class'
name|'ComputeValidateDeviceTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeValidateDeviceTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
comment|'# check if test name includes "xen"'
nl|'\n'
name|'if'
string|"'xen'"
name|'in'
name|'self'
op|'.'
name|'id'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_driver'
op|'='
string|"'xenapi.XenAPIDriver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'root_device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'default_ephemeral_device'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'block_device_mapping_get_all_by_instance'"
op|','
nl|'\n'
name|'lambda'
name|'context'
op|','
name|'instance'
op|','
name|'use_slave'
op|'='
name|'False'
op|':'
name|'self'
op|'.'
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_update_flavor
dedent|''
name|'def'
name|'_update_flavor'
op|'('
name|'self'
op|','
name|'flavor_info'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flavor'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'memory_mb'"
op|':'
number|'128'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'root_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'flavorid'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_factor'"
op|':'
number|'1.0'
op|','
nl|'\n'
string|"'vcpu_weight'"
op|':'
number|'1'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'.'
name|'update'
op|'('
name|'flavor_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'='
op|'['
op|'{'
string|"'key'"
op|':'
string|"'instance_type_%s'"
op|'%'
name|'key'
op|','
nl|'\n'
string|"'value'"
op|':'
name|'value'
op|'}'
nl|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
nl|'\n'
name|'self'
op|'.'
name|'flavor'
op|'.'
name|'items'
op|'('
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_validate_device
dedent|''
name|'def'
name|'_validate_device'
op|'('
name|'self'
op|','
name|'device'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'bdms'
op|'='
name|'block_device_obj'
op|'.'
name|'BlockDeviceMappingList'
op|'.'
name|'get_by_instance_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'return'
name|'compute_utils'
op|'.'
name|'get_device_name_for_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'bdms'
op|','
name|'device'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_fake_bdm
name|'def'
name|'_fake_bdm'
op|'('
name|'device'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
op|'{'
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device'
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap
dedent|''
name|'def'
name|'test_wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'letter'
name|'in'
name|'string'
op|'.'
name|'ascii_lowercase'
op|'['
number|'2'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vd'"
op|'+'
name|'letter'
op|')'
op|')'
newline|'\n'
dedent|''
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdaa'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_plus_one
dedent|''
name|'def'
name|'test_wrap_plus_one'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'letter'
name|'in'
name|'string'
op|'.'
name|'ascii_lowercase'
op|'['
number|'2'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vd'"
op|'+'
name|'letter'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vdaa'"
op|')'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdab'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_later
dedent|''
name|'def'
name|'test_later'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
nl|'\n'
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vdc'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vdd'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vde'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdf'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_gap
dedent|''
name|'def'
name|'test_gap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
nl|'\n'
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vdc'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
string|"'/dev/vde'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdd'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_bdms
dedent|''
name|'def'
name|'test_no_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lxc_names_work
dedent|''
name|'def'
name|'test_lxc_names_work'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|'='
string|"'/dev/a'"
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'ephemeral_device_name'"
op|']'
op|'='
string|"'/dev/b'"
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/c'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_name_conversion
dedent|''
name|'def'
name|'test_name_conversion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'data'
op|'='
op|'['
op|']'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
string|"'/dev/c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
string|"'/dev/sdc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
string|"'/dev/xvdc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_bdms
dedent|''
name|'def'
name|'test_invalid_bdms'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance'
op|'['
string|"'root_device_name'"
op|']'
op|'='
string|'"baddata"'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_validate_device'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_device_prefix
dedent|''
name|'def'
name|'test_invalid_device_prefix'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_validate_device'
op|','
string|"'/baddata/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_device_in_use
dedent|''
name|'def'
name|'test_device_in_use'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exc'
op|'='
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'DevicePathInUse'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_validate_device'
op|','
string|"'/dev/vda'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'/dev/vda'"
op|','
name|'str'
op|'('
name|'exc'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap
dedent|''
name|'def'
name|'test_swap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'instance'
op|'['
string|"'default_swap_device'"
op|']'
op|'='
string|'"/dev/vdc"'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdd'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap_no_ephemeral
dedent|''
name|'def'
name|'test_swap_no_ephemeral'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'del'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'default_ephemeral_device'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'default_swap_device'"
op|']'
op|'='
string|'"/dev/vdb"'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ephemeral_xenapi
dedent|''
name|'def'
name|'test_ephemeral_xenapi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_update_flavor'
op|'('
op|'{'
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'0'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor'"
op|','
nl|'\n'
name|'lambda'
name|'instance_type_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|':'
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/xvdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap_xenapi
dedent|''
name|'def'
name|'test_swap_xenapi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_update_flavor'
op|'('
op|'{'
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'10'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor'"
op|','
nl|'\n'
name|'lambda'
name|'instance_type_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|':'
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/xvdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap_and_ephemeral_xenapi
dedent|''
name|'def'
name|'test_swap_and_ephemeral_xenapi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_update_flavor'
op|'('
op|'{'
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'10'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor'"
op|','
nl|'\n'
name|'lambda'
name|'instance_type_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|':'
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/xvdd'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_swap_and_one_attachment_xenapi
dedent|''
name|'def'
name|'test_swap_and_one_attachment_xenapi'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_update_flavor'
op|'('
op|'{'
nl|'\n'
string|"'ephemeral_gb'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'swap'"
op|':'
number|'10'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'flavors'
op|','
string|"'get_flavor'"
op|','
nl|'\n'
name|'lambda'
name|'instance_type_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|':'
name|'self'
op|'.'
name|'flavor'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/xvdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'data'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'_fake_bdm'
op|'('
name|'device'
op|')'
op|')'
newline|'\n'
name|'device'
op|'='
name|'self'
op|'.'
name|'_validate_device'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'device'
op|','
string|"'/dev/xvdd'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DefaultDeviceNamesForInstanceTestCase
dedent|''
dedent|''
name|'class'
name|'DefaultDeviceNamesForInstanceTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DefaultDeviceNamesForInstanceTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ephemerals'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'instance_uuid'"
op|':'
string|"'fake-instance'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdb'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'instance_uuid'"
op|':'
string|"'fake-instance'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'blank'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'local'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'guest_format'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|'='
name|'block_device_obj'
op|'.'
name|'block_device_make_list'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'['
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'instance_uuid'"
op|':'
string|"'fake-instance'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vda'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'volume_id'"
op|':'
string|"'fake-volume-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
number|'0'
op|'}'
op|')'
op|','
nl|'\n'
name|'fake_block_device'
op|'.'
name|'FakeDbBlockDeviceDict'
op|'('
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'4'
op|','
string|"'instance_uuid'"
op|':'
string|"'fake-instance'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdd'"
op|','
nl|'\n'
string|"'source_type'"
op|':'
string|"'snapshot'"
op|','
nl|'\n'
string|"'destination_type'"
op|':'
string|"'volume'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'fake-snapshot-id-1'"
op|','
nl|'\n'
string|"'boot_index'"
op|':'
op|'-'
number|'1'
op|'}'
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flavor'
op|'='
op|'{'
string|"'swap'"
op|':'
number|'4'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake_instance'"
op|','
string|"'ephemeral_gb'"
op|':'
number|'2'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'is_libvirt'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'root_device_name'
op|'='
string|"'/dev/vda'"
newline|'\n'
name|'self'
op|'.'
name|'update_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake_extract_flavor
name|'def'
name|'fake_extract_flavor'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'flavor'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_matches
dedent|''
name|'def'
name|'fake_driver_matches'
op|'('
name|'driver_string'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'driver_string'
op|'=='
string|"'libvirt.LibvirtDriver'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'is_libvirt'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'patchers'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'patchers'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'block_device_obj'
op|'.'
name|'BlockDeviceMapping'
op|','
string|"'save'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patchers'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
nl|'\n'
name|'flavors'
op|','
string|"'extract_flavor'"
op|','
nl|'\n'
name|'new'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'fake_extract_flavor'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'patchers'
op|'.'
name|'append'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'driver'
op|','
nl|'\n'
string|"'compute_driver_matches'"
op|','
nl|'\n'
name|'new'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|'('
nl|'\n'
name|'side_effect'
op|'='
name|'fake_driver_matches'
op|')'
op|')'
op|')'
newline|'\n'
name|'for'
name|'patcher'
name|'in'
name|'self'
op|'.'
name|'patchers'
op|':'
newline|'\n'
indent|'            '
name|'patcher'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DefaultDeviceNamesForInstanceTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'for'
name|'patcher'
name|'in'
name|'self'
op|'.'
name|'patchers'
op|':'
newline|'\n'
indent|'            '
name|'patcher'
op|'.'
name|'stop'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_default_device_names
dedent|''
dedent|''
name|'def'
name|'_test_default_device_names'
op|'('
name|'self'
op|','
op|'*'
name|'block_device_lists'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'compute_utils'
op|'.'
name|'default_device_names_for_instance'
op|'('
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'root_device_name'
op|','
nl|'\n'
op|'*'
name|'block_device_lists'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_only_block_device_mapping
dedent|''
name|'def'
name|'test_only_block_device_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test no-op'
nl|'\n'
indent|'        '
name|'original_bdm'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'for'
name|'original'
op|','
name|'new'
name|'in'
name|'zip'
op|'('
name|'original_bdm'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'original'
op|'.'
name|'device_name'
op|','
name|'new'
op|'.'
name|'device_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Asser it defaults the missing one as expected'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
op|'['
op|']'
op|','
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_ephemerals
dedent|''
name|'def'
name|'test_with_ephemerals'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test ephemeral gets assigned'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|','
op|'['
op|']'
op|','
nl|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_with_swap
dedent|''
name|'def'
name|'test_with_swap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swap only'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'swap'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test swap and block_device_mapping'
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
op|'['
op|']'
op|','
name|'self'
op|'.'
name|'swap'
op|','
nl|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_together
dedent|''
name|'def'
name|'test_all_together'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test swap missing'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|','
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test swap and eph missing'
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|','
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test all missing'
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'_test_default_device_names'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|','
nl|'\n'
name|'self'
op|'.'
name|'swap'
op|','
name|'self'
op|'.'
name|'block_device_mapping'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ephemerals'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'swap'
op|'['
number|'0'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
string|"'/dev/vdc'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'block_device_mapping'
op|'['
number|'1'
op|']'
op|'['
string|"'device_name'"
op|']'
op|','
nl|'\n'
string|"'/dev/vdd'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|UsageInfoTestCase
dedent|''
dedent|''
name|'class'
name|'UsageInfoTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_get_nw_info
indent|'        '
name|'def'
name|'fake_get_nw_info'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ctxt'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'UsageInfoTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_driver'
op|'='
string|"'nova.virt.fake.FakeDriver'"
op|','
nl|'\n'
name|'network_manager'
op|'='
string|"'nova.network.manager.FlatManager'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
number|'1'
op|','
string|"'ramdisk_id'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'image'
op|'.'
name|'fake'
op|'.'
name|'_FakeImageService'
op|','
nl|'\n'
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'fake_server_actions'
op|'.'
name|'stub_out_action_events'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
op|'{'
op|'}'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance."""'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'sys_meta'
op|'='
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'flavor'
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'flavor'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst'
op|'['
string|"'system_metadata'"
op|']'
op|'='
name|'sys_meta'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
string|"'network_info'"
op|':'
string|"'[]'"
op|'}'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|test_notify_usage_exists
dedent|''
name|'def'
name|'test_notify_usage_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure 'exists' notification generates appropriate usage data."
nl|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|')'
newline|'\n'
comment|'# Set some system metadata'
nl|'\n'
name|'sys_metadata'
op|'='
op|'{'
string|"'image_md_key1'"
op|':'
string|"'val1'"
op|','
nl|'\n'
string|"'image_md_key2'"
op|':'
string|"'val2'"
op|','
nl|'\n'
string|"'other_data'"
op|':'
string|"'meow'"
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
name|'sys_metadata'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
string|"'compute'"
op|')'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
op|'('
string|"'display_name'"
op|','
string|"'created_at'"
op|','
string|"'launched_at'"
op|','
nl|'\n'
string|"'state'"
op|','
string|"'state_description'"
op|','
nl|'\n'
string|"'bandwidth'"
op|','
string|"'audit_period_beginning'"
op|','
nl|'\n'
string|"'audit_period_ending'"
op|','
string|"'image_meta'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'attr'
name|'in'
name|'payload'
op|','
nl|'\n'
name|'msg'
op|'='
string|'"Key %s not in payload"'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_meta'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'md_key1'"
op|':'
string|"'val1'"
op|','
string|"'md_key2'"
op|':'
string|"'val2'"
op|'}'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'glance'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_usage_exists_deleted_instance
dedent|''
name|'def'
name|'test_notify_usage_exists_deleted_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure 'exists' notification generates appropriate usage data."
nl|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
comment|'# Set some system metadata'
nl|'\n'
name|'sys_metadata'
op|'='
op|'{'
string|"'image_md_key1'"
op|':'
string|"'val1'"
op|','
nl|'\n'
string|"'image_md_key2'"
op|':'
string|"'val2'"
op|','
nl|'\n'
string|"'other_data'"
op|':'
string|"'meow'"
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
name|'sys_metadata'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'system_metadata'"
op|']'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
string|"'compute'"
op|')'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
op|'('
string|"'display_name'"
op|','
string|"'created_at'"
op|','
string|"'launched_at'"
op|','
nl|'\n'
string|"'state'"
op|','
string|"'state_description'"
op|','
nl|'\n'
string|"'bandwidth'"
op|','
string|"'audit_period_beginning'"
op|','
nl|'\n'
string|"'audit_period_ending'"
op|','
string|"'image_meta'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'attr'
name|'in'
name|'payload'
op|','
nl|'\n'
name|'msg'
op|'='
string|'"Key %s not in payload"'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_meta'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'md_key1'"
op|':'
string|"'val1'"
op|','
string|"'md_key2'"
op|':'
string|"'val2'"
op|'}'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'glance'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_usage_exists_instance_not_found
dedent|''
name|'def'
name|'test_notify_usage_exists_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure 'exists' notification generates appropriate usage data."
nl|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_usage_exists'
op|'('
nl|'\n'
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
string|"'compute'"
op|')'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
op|'('
string|"'display_name'"
op|','
string|"'created_at'"
op|','
string|"'launched_at'"
op|','
nl|'\n'
string|"'state'"
op|','
string|"'state_description'"
op|','
nl|'\n'
string|"'bandwidth'"
op|','
string|"'audit_period_beginning'"
op|','
nl|'\n'
string|"'audit_period_ending'"
op|','
string|"'image_meta'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'attr'
name|'in'
name|'payload'
op|','
nl|'\n'
name|'msg'
op|'='
string|'"Key %s not in payload"'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_meta'"
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'glance'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_about_instance_usage
dedent|''
name|'def'
name|'test_notify_about_instance_usage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_id'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'get_by_id'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_id'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'metadata'"
op|','
string|"'system_metadata'"
op|','
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
comment|'# Set some system metadata'
nl|'\n'
name|'sys_metadata'
op|'='
op|'{'
string|"'image_md_key1'"
op|':'
string|"'val1'"
op|','
nl|'\n'
string|"'image_md_key2'"
op|':'
string|"'val2'"
op|','
nl|'\n'
string|"'other_data'"
op|':'
string|"'meow'"
op|'}'
newline|'\n'
name|'instance'
op|'.'
name|'system_metadata'
op|'.'
name|'update'
op|'('
name|'sys_metadata'
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'save'
op|'('
op|')'
newline|'\n'
name|'extra_usage_info'
op|'='
op|'{'
string|"'image_name'"
op|':'
string|"'fake_name'"
op|'}'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_instance_usage'
op|'('
nl|'\n'
name|'rpc'
op|'.'
name|'get_notifier'
op|'('
string|"'compute'"
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'create.start'"
op|','
nl|'\n'
name|'extra_usage_info'
op|'='
name|'extra_usage_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'flavor_id'
op|'='
name|'flavors'
op|'.'
name|'get_flavor_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_flavor_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'flavor_id'
op|')'
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
op|'('
string|"'display_name'"
op|','
string|"'created_at'"
op|','
string|"'launched_at'"
op|','
nl|'\n'
string|"'state'"
op|','
string|"'state_description'"
op|','
string|"'image_meta'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'attr'
name|'in'
name|'payload'
op|','
nl|'\n'
name|'msg'
op|'='
string|'"Key %s not in payload"'
op|'%'
name|'attr'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_meta'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'md_key1'"
op|':'
string|"'val1'"
op|','
string|"'md_key2'"
op|':'
string|"'val2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
string|'"%s/images/1"'
op|'%'
name|'glance'
op|'.'
name|'generate_glance_url'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
op|'['
op|']'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_about_aggregate_update_with_id
dedent|''
name|'def'
name|'test_notify_about_aggregate_update_with_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set aggregate payload'
nl|'\n'
indent|'        '
name|'aggregate_payload'
op|'='
op|'{'
string|"'aggregate_id'"
op|':'
number|'1'
op|'}'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_aggregate_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|'"create.end"'
op|','
nl|'\n'
name|'aggregate_payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'aggregate.create.end'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'aggregate_id'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_about_aggregate_update_with_name
dedent|''
name|'def'
name|'test_notify_about_aggregate_update_with_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set aggregate payload'
nl|'\n'
indent|'        '
name|'aggregate_payload'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'fakegroup'"
op|'}'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_aggregate_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|'"create.start"'
op|','
nl|'\n'
name|'aggregate_payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'priority'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'msg'
op|'.'
name|'event_type'
op|','
string|"'aggregate.create.start'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'.'
name|'payload'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'name'"
op|']'
op|','
string|"'fakegroup'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notify_about_aggregate_update_without_name_id
dedent|''
name|'def'
name|'test_notify_about_aggregate_update_without_name_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set empty aggregate payload'
nl|'\n'
indent|'        '
name|'aggregate_payload'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'compute_utils'
op|'.'
name|'notify_about_aggregate_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|'"create.start"'
op|','
nl|'\n'
name|'aggregate_payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeGetImageMetadataTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeGetImageMetadataTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeGetImageMetadataTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'image'
op|'='
op|'{'
nl|'\n'
string|'"min_ram"'
op|':'
number|'10'
op|','
nl|'\n'
string|'"min_disk"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"disk_format"'
op|':'
string|'"raw"'
op|','
nl|'\n'
string|'"container_format"'
op|':'
string|'"bare"'
op|','
nl|'\n'
string|'"properties"'
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'image_service'
op|'='
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'image'
op|'.'
name|'fake'
op|'.'
name|'_FakeImageService'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'image_service'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'_fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'sys_meta'
op|'='
op|'{'
nl|'\n'
string|"'image_min_ram'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'image_min_disk'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'image_disk_format'"
op|':'
string|"'raw'"
op|','
nl|'\n'
string|"'image_container_format'"
op|':'
string|"'bare'"
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'instance_type_name'"
op|':'
string|"'m1.fake'"
op|','
nl|'\n'
string|"'instance_type_memory_mb'"
op|':'
number|'10'
op|','
nl|'\n'
string|"'instance_type_vcpus'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_type_root_gb'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_type_ephemeral_gb'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_type_flavorid'"
op|':'
string|"'0'"
op|','
nl|'\n'
string|"'instance_type_swap'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_type_rxtx_factor'"
op|':'
number|'0.0'
op|','
nl|'\n'
string|"'instance_type_vcpu_weight'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
nl|'\n'
name|'memory_mb'
op|'='
number|'0'
op|','
name|'root_gb'
op|'='
number|'0'
op|','
nl|'\n'
name|'system_metadata'
op|'='
name|'sys_meta'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|instance_obj
name|'def'
name|'instance_obj'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'instance_obj'
op|'.'
name|'Instance'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'instance_obj'
op|'.'
name|'Instance'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'expected_attrs'
op|'='
name|'instance_obj'
op|'.'
name|'INSTANCE_DEFAULT_FIELDS'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fake_show
dedent|''
name|'def'
name|'_fake_show'
op|'('
name|'self'
op|','
name|'ctx'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'image'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_meta
dedent|''
name|'def'
name|'test_get_image_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image_meta'
op|'='
name|'compute_utils'
op|'.'
name|'get_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'self'
op|'.'
name|'image_service'
op|','
string|"'fake-image'"
op|','
name|'self'
op|'.'
name|'instance_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
string|"'DONTCARE'"
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'self'
op|'.'
name|'image'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'image_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_meta_no_image
dedent|''
name|'def'
name|'test_get_image_meta_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_show
indent|'        '
name|'def'
name|'fake_show'
op|'('
name|'ctx'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
string|"'fake-image'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'image_service'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'image_meta'
op|'='
name|'compute_utils'
op|'.'
name|'get_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'self'
op|'.'
name|'image_service'
op|','
string|"'fake-image'"
op|','
name|'self'
op|'.'
name|'instance_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
string|"'DONTCARE'"
newline|'\n'
comment|'# NOTE(danms): The trip through system_metadata will stringify things'
nl|'\n'
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'image'
op|'['
name|'key'
op|']'
op|'='
name|'str'
op|'('
name|'self'
op|'.'
name|'image'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'self'
op|'.'
name|'image'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'image_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_meta_no_image_system_meta
dedent|''
name|'def'
name|'test_get_image_meta_no_image_system_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'image_'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'='
name|'compute_utils'
op|'.'
name|'get_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'self'
op|'.'
name|'image_service'
op|','
string|"'fake-image'"
op|','
name|'self'
op|'.'
name|'instance_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'image'
op|'['
string|"'properties'"
op|']'
op|'='
string|"'DONTCARE'"
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'self'
op|'.'
name|'image'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'image_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_image_meta_no_image_no_image_system_meta
dedent|''
name|'def'
name|'test_get_image_meta_no_image_no_image_system_meta'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_show
indent|'        '
name|'def'
name|'fake_show'
op|'('
name|'ctx'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
string|"'fake-image'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'image_service'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
name|'in'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
op|'.'
name|'startswith'
op|'('
string|"'image_'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'del'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'system_metadata'"
op|']'
op|'['
name|'k'
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'image_meta'
op|'='
name|'compute_utils'
op|'.'
name|'get_image_metadata'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'ctx'
op|','
name|'self'
op|'.'
name|'image_service'
op|','
string|"'fake-image'"
op|','
name|'self'
op|'.'
name|'instance_obj'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
string|"'properties'"
op|':'
string|"'DONTCARE'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'expected'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'image_meta'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeUtilsGetNWInfo
dedent|''
dedent|''
name|'class'
name|'ComputeUtilsGetNWInfo'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_instance_object_none_info_cache
indent|'    '
name|'def'
name|'test_instance_object_none_info_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
string|"'fake-context'"
op|','
nl|'\n'
name|'expected_attrs'
op|'='
op|'['
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'inst'
op|'.'
name|'info_cache'
op|')'
newline|'\n'
name|'result'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'inst'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
op|'['
op|']'
op|')'
op|','
name|'result'
op|'.'
name|'json'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_dict_none_info_cache
dedent|''
name|'def'
name|'test_instance_dict_none_info_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
op|'('
name|'info_cache'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'inst'
op|'['
string|"'info_cache'"
op|']'
op|')'
newline|'\n'
name|'result'
op|'='
name|'compute_utils'
op|'.'
name|'get_nw_info_for_instance'
op|'('
name|'inst'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
op|'['
op|']'
op|')'
op|','
name|'result'
op|'.'
name|'json'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeUtilsGetRebootTypes
dedent|''
dedent|''
name|'class'
name|'ComputeUtilsGetRebootTypes'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeUtilsGetRebootTypes'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_reboot_type_started_soft
dedent|''
name|'def'
name|'test_get_reboot_type_started_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reboot_type'
op|'='
name|'compute_utils'
op|'.'
name|'get_reboot_type'
op|'('
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reboot_type'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_reboot_type_pending_soft
dedent|''
name|'def'
name|'test_get_reboot_type_pending_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reboot_type'
op|'='
name|'compute_utils'
op|'.'
name|'get_reboot_type'
op|'('
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reboot_type'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_reboot_type_hard
dedent|''
name|'def'
name|'test_get_reboot_type_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reboot_type'
op|'='
name|'compute_utils'
op|'.'
name|'get_reboot_type'
op|'('
string|"'foo'"
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reboot_type'
op|','
string|"'HARD'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_reboot_not_running_hard
dedent|''
name|'def'
name|'test_get_reboot_not_running_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'reboot_type'
op|'='
name|'compute_utils'
op|'.'
name|'get_reboot_type'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'reboot_type'
op|','
string|"'HARD'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeUtilsPeriodicTaskSpacingWarning
dedent|''
dedent|''
name|'class'
name|'ComputeUtilsPeriodicTaskSpacingWarning'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_periodic_task_spacing_warning_no_op
name|'def'
name|'test_periodic_task_spacing_warning_no_op'
op|'('
name|'self'
op|','
name|'mock_log'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'compute_utils'
op|'.'
name|'periodic_task_spacing_warn'
op|'('
string|'"config_value"'
op|')'
newline|'\n'
DECL|function|not_a_periodic_task
name|'def'
name|'not_a_periodic_task'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"something"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"something"'
op|','
name|'not_a_periodic_task'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_log'
op|'.'
name|'warning'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_log'
op|'.'
name|'warn'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_periodic_task_spacing_warning_nonzero_spacing
name|'def'
name|'test_periodic_task_spacing_warning_nonzero_spacing'
op|'('
name|'self'
op|','
name|'mock_log'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'compute_utils'
op|'.'
name|'periodic_task_spacing_warn'
op|'('
string|'"config_value"'
op|')'
newline|'\n'
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'10'
op|')'
newline|'\n'
DECL|function|a_periodic_task
name|'def'
name|'a_periodic_task'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"something"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"something"'
op|','
name|'a_periodic_task'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_log'
op|'.'
name|'warning'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'mock_log'
op|'.'
name|'warn'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_periodic_task_spacing_warning_zero_spacing
name|'def'
name|'test_periodic_task_spacing_warning_zero_spacing'
op|'('
name|'self'
op|','
name|'mock_log'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'compute_utils'
op|'.'
name|'periodic_task_spacing_warn'
op|'('
string|'"config_value"'
op|')'
newline|'\n'
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
number|'0'
op|')'
newline|'\n'
DECL|function|zero_spacing_periodic_task
name|'def'
name|'zero_spacing_periodic_task'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"something"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"something"'
op|','
name|'zero_spacing_periodic_task'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_log'
op|'.'
name|'warning'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|'"config_value"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_periodic_task_spacing_warning_none_spacing
name|'def'
name|'test_periodic_task_spacing_warning_none_spacing'
op|'('
name|'self'
op|','
name|'mock_log'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'compute_utils'
op|'.'
name|'periodic_task_spacing_warn'
op|'('
string|'"config_value"'
op|')'
newline|'\n'
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
op|'('
name|'spacing'
op|'='
name|'None'
op|')'
newline|'\n'
DECL|function|none_spacing_periodic_task
name|'def'
name|'none_spacing_periodic_task'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"something"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"something"'
op|','
name|'none_spacing_periodic_task'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_log'
op|'.'
name|'warning'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|'"config_value"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'compute_utils'
op|','
string|"'LOG'"
op|')'
newline|'\n'
DECL|member|test_periodic_task_spacing_warning_default_spacing
name|'def'
name|'test_periodic_task_spacing_warning_default_spacing'
op|'('
name|'self'
op|','
name|'mock_log'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
op|'@'
name|'compute_utils'
op|'.'
name|'periodic_task_spacing_warn'
op|'('
string|'"config_value"'
op|')'
newline|'\n'
op|'@'
name|'periodic_task'
op|'.'
name|'periodic_task'
newline|'\n'
DECL|function|default_spacing_periodic_task
name|'def'
name|'default_spacing_periodic_task'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"something"'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"something"'
op|','
name|'default_spacing_periodic_task'
op|'('
op|')'
op|')'
newline|'\n'
name|'mock_log'
op|'.'
name|'warning'
op|'.'
name|'assert_called_with'
op|'('
name|'mock'
op|'.'
name|'ANY'
op|','
string|'"config_value"'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

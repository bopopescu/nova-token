begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Piston Cloud Computing, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
string|'"""Tests for compute service."""'
newline|'\n'
nl|'\n'
name|'import'
name|'base64'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'datetime'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'time'
newline|'\n'
name|'import'
name|'traceback'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'compute'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'api'
name|'as'
name|'compute_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'instance_types'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'manager'
name|'as'
name|'compute_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'utils'
name|'as'
name|'compute_utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'image'
name|'import'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
name|'as'
name|'network_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'network_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'notifier'
name|'import'
name|'api'
name|'as'
name|'notifier_api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'notifier'
name|'import'
name|'test_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'uuidutils'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'policy'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'compute'
name|'import'
name|'fake_resource_tracker'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'db'
op|'.'
name|'fakes'
name|'import'
name|'FakeModel'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'image'
name|'import'
name|'fake'
name|'as'
name|'fake_image'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'matchers'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'fake'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'volume'
name|'import'
name|'cinder'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|QUOTAS
name|'QUOTAS'
op|'='
name|'quota'
op|'.'
name|'QUOTAS'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'compute_manager'"
op|','
string|"'nova.service'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'host'"
op|','
string|"'nova.netconf'"
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'live_migration_retry_count'"
op|','
string|"'nova.compute.manager'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FAKE_IMAGE_REF
name|'FAKE_IMAGE_REF'
op|'='
string|"'fake-image-ref'"
newline|'\n'
nl|'\n'
DECL|variable|NODENAME
name|'NODENAME'
op|'='
string|"'fakenode1'"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|nop_report_driver_status
name|'def'
name|'nop_report_driver_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeSchedulerAPI
dedent|''
name|'class'
name|'FakeSchedulerAPI'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|run_instance
indent|'    '
name|'def'
name|'run_instance'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'request_spec'
op|','
name|'admin_password'
op|','
nl|'\n'
name|'injected_files'
op|','
name|'requested_networks'
op|','
name|'is_first_time'
op|','
nl|'\n'
name|'filter_properties'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|live_migration
dedent|''
name|'def'
name|'live_migration'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'block_migration'
op|','
name|'disk_over_commit'
op|','
nl|'\n'
name|'instance'
op|','
name|'dest'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|prep_resize
dedent|''
name|'def'
name|'prep_resize'
op|'('
name|'self'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'reservations'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BaseTestCase
dedent|''
dedent|''
name|'class'
name|'BaseTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'notifier_api'
op|'.'
name|'_reset_drivers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'notifier_api'
op|'.'
name|'_reset_drivers'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'compute_driver'
op|'='
string|"'nova.virt.fake.FakeDriver'"
op|','
nl|'\n'
name|'notification_driver'
op|'='
op|'['
name|'test_notifier'
op|'.'
name|'__name__'
op|']'
op|','
nl|'\n'
name|'network_manager'
op|'='
string|"'nova.network.manager.FlatManager'"
op|')'
newline|'\n'
name|'fake'
op|'.'
name|'set_nodes'
op|'('
op|'['
name|'NODENAME'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_local'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'conductor'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'CONF'
op|'.'
name|'compute_manager'
op|')'
newline|'\n'
nl|'\n'
comment|"# override tracker with a version that doesn't need the database:"
nl|'\n'
name|'fake_rt'
op|'='
name|'fake_resource_tracker'
op|'.'
name|'FakeResourceTracker'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
name|'NODENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_resource_tracker_dict'
op|'['
name|'NODENAME'
op|']'
op|'='
name|'fake_rt'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'update_available_resource'
op|'('
nl|'\n'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'id'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'id'
op|','
string|"'min_disk'"
op|':'
name|'None'
op|','
string|"'min_ram'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'something_else'"
op|':'
string|"'meow'"
op|'}'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'fake_rpcapi'
op|'='
name|'FakeSchedulerAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'scheduler_rpcapi'"
op|','
name|'fake_rpcapi'
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'set_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'fake_image'
op|'.'
name|'FakeImageService_reset'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'fake'
op|'.'
name|'restore_nodes'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'BaseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_fake_instance
dedent|''
name|'def'
name|'_create_fake_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|','
name|'type_name'
op|'='
string|"'m1.tiny'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance."""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
newline|'\n'
name|'inst'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'FAKE_IMAGE_REF'
newline|'\n'
name|'inst'
op|'['
string|"'reservation_id'"
op|']'
op|'='
string|"'r-fakeres'"
newline|'\n'
name|'inst'
op|'['
string|"'launch_time'"
op|']'
op|'='
string|"'10'"
newline|'\n'
name|'inst'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'user_id'
newline|'\n'
name|'inst'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'inst'
op|'['
string|"'host'"
op|']'
op|'='
string|"'fake_host'"
newline|'\n'
name|'inst'
op|'['
string|"'node'"
op|']'
op|'='
name|'NODENAME'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
name|'type_name'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'inst'
op|'['
string|"'instance_type_id'"
op|']'
op|'='
name|'type_id'
newline|'\n'
name|'inst'
op|'['
string|"'ami_launch_index'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'0'
newline|'\n'
name|'inst'
op|'['
string|"'architecture'"
op|']'
op|'='
string|"'x86_64'"
newline|'\n'
name|'inst'
op|'['
string|"'os_type'"
op|']'
op|'='
string|"'Linux'"
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'fake_zone'"
op|':'
op|'['
name|'inst'
op|'['
string|"'host'"
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance
dedent|''
name|'def'
name|'_create_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|','
name|'type_name'
op|'='
string|"'m1.tiny'"
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance. Returns uuid."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|','
name|'type_name'
op|'='
name|'type_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_instance_type
dedent|''
name|'def'
name|'_create_instance_type'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a test instance type."""'
newline|'\n'
name|'if'
name|'not'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'params'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'context'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'inst'
op|'['
string|"'name'"
op|']'
op|'='
string|"'m1.small'"
newline|'\n'
name|'inst'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1024'
newline|'\n'
name|'inst'
op|'['
string|"'vcpus'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'20'
newline|'\n'
name|'inst'
op|'['
string|"'ephemeral_gb'"
op|']'
op|'='
number|'10'
newline|'\n'
name|'inst'
op|'['
string|"'flavorid'"
op|']'
op|'='
string|"'1'"
newline|'\n'
name|'inst'
op|'['
string|"'swap'"
op|']'
op|'='
number|'2048'
newline|'\n'
name|'inst'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst'
op|'.'
name|'update'
op|'('
name|'params'
op|')'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'instance_type_create'
op|'('
name|'context'
op|','
name|'inst'
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|member|_create_group
dedent|''
name|'def'
name|'_create_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'description'"
op|':'
string|"'testgroup'"
op|','
nl|'\n'
string|"'user_id'"
op|':'
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'return'
name|'db'
op|'.'
name|'security_group_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_get_nw_info
indent|'        '
name|'def'
name|'fake_get_nw_info'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ctxt'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|','
number|'1'
op|','
nl|'\n'
name|'spectacular'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ComputeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'allocate_for_instance'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
comment|'# Just to make long lines short'
nl|'\n'
name|'self'
op|'.'
name|'rt'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_resource_tracker'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'clear_time_override'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault
dedent|''
name|'def'
name|'test_wrap_instance_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
string|'"fake_uuid"'
op|'}'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault_instance_in_args
dedent|''
name|'def'
name|'test_wrap_instance_fault_instance_in_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst'
op|'='
op|'{'
string|'"uuid"'
op|':'
string|'"fake_uuid"'
op|'}'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap_instance_fault_no_instance
dedent|''
name|'def'
name|'test_wrap_instance_fault_no_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_uuid'
op|'='
string|'"fake_uuid"'
newline|'\n'
nl|'\n'
name|'called'
op|'='
op|'{'
string|"'fault_added'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|did_it_add_fault
name|'def'
name|'did_it_add_fault'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_utils'
op|','
string|"'add_instance_fault_from_exc'"
op|','
nl|'\n'
name|'did_it_add_fault'
op|')'
newline|'\n'
nl|'\n'
op|'@'
name|'compute_manager'
op|'.'
name|'wrap_instance_fault'
newline|'\n'
DECL|function|failer
name|'def'
name|'failer'
op|'('
name|'self2'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'failer'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'called'
op|'['
string|"'fault_added'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_img_ref_associates_config_drive
dedent|''
name|'def'
name|'test_create_instance_with_img_ref_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates a config drive.'
nl|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'config_drive'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_config_drive
dedent|''
dedent|''
name|'def'
name|'test_create_instance_associates_config_drive'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates a config drive.'
nl|'\n'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'config_drive'"
op|':'
string|"'1234'"
op|','
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'config_drive'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_unlimited_memory
dedent|''
dedent|''
name|'def'
name|'test_create_instance_unlimited_memory'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Default of memory limit=None is unlimited.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'999999999999'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
name|'None'
op|'}'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'999999999999'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_unlimited_disk
dedent|''
name|'def'
name|'test_create_instance_unlimited_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
number|'999999999999'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'99999999999'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'disk_gb'"
op|':'
name|'None'
op|'}'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_multiple_instances_then_starve
dedent|''
name|'def'
name|'test_create_multiple_instances_then_starve'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
number|'4096'
op|','
string|"'disk_gb'"
op|':'
number|'1000'
op|'}'
op|'}'
newline|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'1024'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'1024'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'256'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'2048'
op|','
string|'"root_gb"'
op|':'
number|'256'
op|','
string|'"ephemeral_gb"'
op|':'
number|'256'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'3072'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
number|'768'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'8192'
op|','
string|'"root_gb"'
op|':'
number|'8192'
op|','
string|'"ephemeral_gb"'
op|':'
number|'8192'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_ram
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed ram policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_mem_mb'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_mb'
op|'='
name|'total_mem_mb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_mb'
op|'='
name|'int'
op|'('
name|'total_mem_mb'
op|'*'
number|'1.45'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# total_mem_mb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
name|'instance_mb'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'memory_mb'"
op|':'
name|'oversub_limit_mb'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_mb'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'memory_mb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_ram_fail
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_ram_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test passing of oversubscribed ram policy from the scheduler, but\n        with insufficient memory.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_mem_mb'
op|'='
name|'resources'
op|'['
string|"'memory_mb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_mb'
op|'='
name|'total_mem_mb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_mb'
op|'='
name|'int'
op|'('
name|'total_mem_mb'
op|'*'
number|'1.55'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# total_mem_mb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
name|'instance_mb'
op|','
string|'"root_gb"'
op|':'
number|'128'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'128'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
op|'{'
string|"'memory_mb'"
op|':'
name|'oversub_limit_mb'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_cpu
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_cpu'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed cpu policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
name|'limits'
op|'='
op|'{'
string|"'vcpu'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'resources'
op|'['
string|"'vcpus'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of memory that exceeds'
nl|'\n'
comment|'# total_mem_mb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'2'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# create one more instance:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'1'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# delete the instance:'
nl|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'DELETED'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_usage'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'vcpus_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# now oversubscribe vcpus and fail:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"memory_mb"'
op|':'
number|'10'
op|','
string|'"root_gb"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"ephemeral_gb"'
op|':'
number|'1'
op|','
string|'"vcpus"'
op|':'
number|'2'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'vcpu'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_disk
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test passing of oversubscribed disk policy from the scheduler.'
nl|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_disk_gb'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_gb'
op|'='
name|'total_disk_gb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_gb'
op|'='
name|'int'
op|'('
name|'total_disk_gb'
op|'*'
number|'1.45'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of disk that exceeds'
nl|'\n'
comment|'# total_disk_gb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
name|'instance_gb'
op|','
string|'"memory_mb"'
op|':'
number|'10'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'disk_gb'"
op|':'
name|'oversub_limit_gb'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_gb'
op|','
name|'self'
op|'.'
name|'rt'
op|'.'
name|'compute_node'
op|'['
string|"'local_gb_used'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_oversubscribed_disk_fail
dedent|''
name|'def'
name|'test_create_instance_with_oversubscribed_disk_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test passing of oversubscribed disk policy from the scheduler, but\n        with insufficient disk.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'reserved_host_disk_mb'
op|'='
number|'0'
op|','
name|'reserved_host_memory_mb'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rt'
op|'.'
name|'update_available_resource'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# get total memory as reported by virt driver:'
nl|'\n'
name|'resources'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_available_resource'
op|'('
name|'NODENAME'
op|')'
newline|'\n'
name|'total_disk_gb'
op|'='
name|'resources'
op|'['
string|"'local_gb'"
op|']'
newline|'\n'
nl|'\n'
name|'oversub_limit_gb'
op|'='
name|'total_disk_gb'
op|'*'
number|'1.5'
newline|'\n'
name|'instance_gb'
op|'='
name|'int'
op|'('
name|'total_disk_gb'
op|'*'
number|'1.55'
op|')'
newline|'\n'
nl|'\n'
comment|'# build an instance, specifying an amount of disk that exceeds'
nl|'\n'
comment|'# total_disk_gb, but is less than the oversubscribed limit:'
nl|'\n'
name|'params'
op|'='
op|'{'
string|'"root_gb"'
op|':'
name|'instance_gb'
op|','
string|'"memory_mb"'
op|':'
number|'10'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'limits'
op|'='
op|'{'
string|"'disk_gb'"
op|':'
name|'oversub_limit_gb'
op|'}'
newline|'\n'
name|'filter_properties'
op|'='
op|'{'
string|"'limits'"
op|':'
name|'limits'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeResourcesUnavailable'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_without_node_param
dedent|''
name|'def'
name|'test_create_instance_without_node_param'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'node'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'NODENAME'
op|','
name|'instance'
op|'['
string|"'node'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_no_image
dedent|''
name|'def'
name|'test_create_instance_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create instance with no image provided.'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_access_ip
dedent|''
name|'def'
name|'test_default_access_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'default_access_ip_network_name'
op|'='
string|"'test1'"
op|')'
newline|'\n'
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'is_first_time'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
op|','
string|"'192.168.1.100'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|','
string|"'2001:db8:0:1::1'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_no_default_access_ip
dedent|''
dedent|''
name|'def'
name|'test_no_default_access_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'is_first_time'
op|'='
name|'True'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'access_ip_v4'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'access_ip_v6'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fail_to_schedule_persists
dedent|''
dedent|''
name|'def'
name|'test_fail_to_schedule_persists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# check the persistence of the ERROR(scheduling) state.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_setup_block_device_mapping_fail
dedent|''
name|'def'
name|'test_run_instance_setup_block_device_mapping_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""block device mapping failure test.\n\n        Make sure that when there is a block device mapping problem,\n        the instance goes to ERROR state, keeping the task state\n        """'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_setup_block_device_mapping'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_spawn_fail
dedent|''
name|'def'
name|'test_run_instance_spawn_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""spawn failure test.\n\n        Make sure that when there is a spawning problem,\n        the instance goes to ERROR state, keeping the task state"""'
newline|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'#check state is failed even after the periodic poll'
nl|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'periodic_tasks'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_dealloc_network_instance_not_found
dedent|''
name|'def'
name|'test_run_instance_dealloc_network_instance_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""spawn network deallocate test.\n\n        Make sure that when an instance is not found during spawn\n        that the network is deallocated"""'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'spawn'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_terminate_on_error_state
dedent|''
name|'def'
name|'test_can_terminate_on_error_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that the instance can be terminated in ERROR state.'
nl|'\n'
comment|'#check failed to schedule --> terminate'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|"# Double check it's not there for admins, either."
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate
dedent|''
name|'def'
name|'test_run_terminate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure it is possible to  run and terminate instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After terminating instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_with_vol_attached
dedent|''
name|'def'
name|'test_run_terminate_with_vol_attached'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure it is possible to  run and terminate instance with volume\n        attached\n        """'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve_volume
dedent|''
name|'def'
name|'fake_reserve_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
nl|'\n'
name|'fake_reserve_volume'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|','
nl|'\n'
string|"'/dev/vdc'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After terminating instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'bdms'
op|'='
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'bdms'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_no_image
dedent|''
name|'def'
name|'test_run_terminate_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Make sure instance started without image (from volume)\n        can be termintad without issues\n        """'
newline|'\n'
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_no_network
dedent|''
name|'def'
name|'test_terminate_no_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This is as reported in LP bug 1008875'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make it look like this is no instance'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'NetworkNotFound'
op|'('
name|'network_id'
op|'='
string|"'fake'"
op|')'
nl|'\n'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After terminating instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_failure_leaves_task_state
dedent|''
name|'def'
name|'test_terminate_failure_leaves_task_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that a failure in terminate_instance does not result\n        in the task state being reverted from DELETING (see LP 1046236).\n        """'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Network teardown fails ungracefully'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'TypeError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'DELETING'
op|'}'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After terminating instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|','
string|"'deleting'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_terminate_timestamps
dedent|''
name|'def'
name|'test_run_terminate_timestamps'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure timestamps are set for launched and destroyed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'launch'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'>'
name|'launch'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'terminate'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'with'
name|'utils'
op|'.'
name|'temporary_mutation'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'read_deleted'
op|'='
string|"'only'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|'<'
name|'terminate'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'instance'
op|'['
string|"'deleted_at'"
op|']'
op|'>'
name|'terminate'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be stopped.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be started.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_ON'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop_start_no_image
dedent|''
name|'def'
name|'test_stop_start_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_ON'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue
dedent|''
name|'def'
name|'test_rescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rescued and unrescued.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'rescued'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'unrescued'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rescue
name|'def'
name|'fake_rescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|','
name|'image_meta'
op|','
nl|'\n'
name|'rescue_password'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'rescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'rescue'"
op|','
name|'fake_rescue'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_unrescue
name|'def'
name|'fake_unrescue'
op|'('
name|'self'
op|','
name|'instance_ref'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'unrescue'"
op|','
nl|'\n'
name|'fake_unrescue'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESCUING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'rescued'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'UNRESCUING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unrescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'unrescued'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue_no_image
dedent|''
name|'def'
name|'test_rescue_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESCUING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'UNRESCUING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unrescue_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_on
dedent|''
name|'def'
name|'test_power_on'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be powered on.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'power_on'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_on
name|'def'
name|'fake_driver_power_on'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_on'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'power_on'"
op|','
nl|'\n'
name|'fake_driver_power_on'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_ON'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'start_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_on'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_power_off
dedent|''
name|'def'
name|'test_power_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be powered off.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'power_off'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_power_off
name|'def'
name|'fake_driver_power_off'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'power_off'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'power_off'"
op|','
nl|'\n'
name|'fake_driver_power_off'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'power_off'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pause
dedent|''
name|'def'
name|'test_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be paused and unpaused.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'PAUSING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'UNPAUSING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'unpause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend
dedent|''
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure instance can be suspended and resumed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'SUSPENDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESUMING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resume_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend_error
dedent|''
name|'def'
name|'test_suspend_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure vm_state is ERROR when suspend error occurs.'
nl|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'suspend'"
op|','
name|'fake'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'suspend_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_no_image
dedent|''
name|'def'
name|'test_rebuild_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt when started with no image.'
nl|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'sys_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_launch_time
dedent|''
name|'def'
name|'test_rebuild_launch_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be rebuilt.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'cur_time'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
string|'"new_password"'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'cur_time'
op|','
name|'instance'
op|'['
string|"'launched_at'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_reboot
dedent|''
name|'def'
name|'_test_reboot'
op|'('
name|'self'
op|','
name|'soft'
op|','
name|'legacy_nwinfo_driver'
op|')'
op|':'
newline|'\n'
comment|"# This is a true unit test, so we don't need the network stubs."
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_notify_about_instance_usage'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'legacy_nwinfo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'reboot'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'fake-instance'"
op|','
nl|'\n'
name|'power_state'
op|'='
string|"'unknown'"
op|')'
newline|'\n'
name|'updated_instance1'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'updated-instance1'"
op|','
nl|'\n'
name|'power_state'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'updated_instance2'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'updated-instance2'"
op|','
nl|'\n'
name|'power_state'
op|'='
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
name|'fake_nw_model'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'fake_nw_model'
op|','
string|"'legacy'"
op|')'
newline|'\n'
nl|'\n'
name|'fake_block_dev_info'
op|'='
string|"'fake_block_dev_info'"
newline|'\n'
name|'fake_power_state1'
op|'='
string|"'fake_power_state1'"
newline|'\n'
name|'fake_power_state2'
op|'='
string|"'fake_power_state2'"
newline|'\n'
name|'reboot_type'
op|'='
name|'soft'
name|'and'
string|"'SOFT'"
name|'or'
string|"'HARD'"
newline|'\n'
nl|'\n'
comment|'# Beginning of calls we expect.'
nl|'\n'
nl|'\n'
comment|"# FIXME(comstud): I don't feel like the context needs to"
nl|'\n'
comment|'# be elevated at all.  Hopefully remove elevated from'
nl|'\n'
comment|'# reboot_instance and remove the stub here in a future patch.'
nl|'\n'
comment|'# econtext would just become self.context below then.'
nl|'\n'
name|'econtext'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'econtext'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'fake_nw_model'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
string|"'reboot.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_power_state1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'econtext'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'fake_power_state1'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'updated_instance1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Reboot should check the driver to see if legacy nwinfo is'
nl|'\n'
comment|"# needed.  If it is, the model's legacy() method should be"
nl|'\n'
comment|'# called and the result passed to driver.reboot.  If the'
nl|'\n'
comment|'# driver wants the model, we pass the model.'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'legacy_nwinfo'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'legacy_nwinfo_driver'
op|')'
newline|'\n'
name|'if'
name|'legacy_nwinfo_driver'
op|':'
newline|'\n'
indent|'            '
name|'expected_nw_info'
op|'='
string|"'legacy-nwinfo'"
newline|'\n'
name|'fake_nw_model'
op|'.'
name|'legacy'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'expected_nw_info'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'expected_nw_info'
op|'='
name|'fake_nw_model'
newline|'\n'
nl|'\n'
comment|'# Annoying.  driver.reboot is wrapped in a try/except, and'
nl|'\n'
comment|"# doesn't re-raise.  It eats exception generated by mox if"
nl|'\n'
comment|'# this is called with the wrong args, so we have to hack'
nl|'\n'
comment|'# around it.'
nl|'\n'
dedent|''
name|'reboot_call_info'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'expected_call_info'
op|'='
op|'{'
string|"'args'"
op|':'
op|'('
name|'updated_instance1'
op|','
name|'expected_nw_info'
op|','
nl|'\n'
name|'reboot_type'
op|','
name|'fake_block_dev_info'
op|')'
op|','
nl|'\n'
string|"'kwargs'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_reboot
name|'def'
name|'fake_reboot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'reboot_call_info'
op|'['
string|"'args'"
op|']'
op|'='
name|'args'
newline|'\n'
name|'reboot_call_info'
op|'['
string|"'kwargs'"
op|']'
op|'='
name|'kwargs'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'reboot'"
op|','
name|'fake_reboot'
op|')'
newline|'\n'
nl|'\n'
comment|'# Power state should be updated again'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'updated_instance1'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_power_state2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'econtext'
op|','
name|'updated_instance1'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'power_state'
op|'='
name|'fake_power_state2'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'updated_instance2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
op|'('
name|'econtext'
op|','
nl|'\n'
name|'updated_instance2'
op|','
nl|'\n'
string|"'reboot.end'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reboot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|'='
name|'fake_block_dev_info'
op|','
nl|'\n'
name|'reboot_type'
op|'='
name|'reboot_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_call_info'
op|','
name|'reboot_call_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft
dedent|''
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft_legacy_nwinfo_driver
dedent|''
name|'def'
name|'test_reboot_soft_legacy_nwinfo_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'True'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard_legacy_nwinfo_driver
dedent|''
name|'def'
name|'test_reboot_hard_legacy_nwinfo_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_reboot'
op|'('
name|'False'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password
dedent|''
name|'def'
name|'test_set_admin_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can have its admin password set.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'set_admin_password'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password_bad_state
dedent|''
name|'def'
name|'test_set_admin_password_bad_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test setting password while instance is rebuilding.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
nl|'\n'
string|'"power_state"'
op|':'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|','
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_get_info
name|'def'
name|'fake_driver_get_info'
op|'('
name|'self2'
op|','
name|'_instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'max_mem'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'mem'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'num_cpu'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'cpu_time'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'get_info'"
op|','
nl|'\n'
name|'fake_driver_get_info'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'set_admin_password'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_do_test_set_admin_password_driver_error
dedent|''
name|'def'
name|'_do_test_set_admin_password_driver_error'
op|'('
name|'self'
op|','
name|'exc'
op|','
name|'expected_vm_state'
op|','
nl|'\n'
name|'expected_task_state'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure expected exception is raised if set_admin_password fails."""'
newline|'\n'
nl|'\n'
DECL|function|fake_sleep
name|'def'
name|'fake_sleep'
op|'('
name|'_time'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'time'
op|','
string|"'sleep'"
op|','
name|'fake_sleep'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_set_pass
name|'def'
name|'fake_driver_set_pass'
op|'('
name|'self2'
op|','
name|'_instance'
op|','
name|'_pwd'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exc'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'set_admin_password'"
op|','
nl|'\n'
name|'fake_driver_set_pass'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
comment|'#error raised from the driver should not reveal internal information'
nl|'\n'
comment|'#so a new error is raised'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstancePasswordSetFailed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'set_admin_password'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'expected_vm_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'expected_task_state'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password_driver_not_authorized
dedent|''
name|'def'
name|'test_set_admin_password_driver_not_authorized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure expected exception is raised if set_admin_password not\n        authorized.\n        """'
newline|'\n'
name|'exc'
op|'='
name|'exception'
op|'.'
name|'NotAuthorized'
op|'('
name|'_'
op|'('
string|"'Internal error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_test_set_admin_password_driver_error'
op|'('
name|'exc'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password_driver_not_implemented
dedent|''
name|'def'
name|'test_set_admin_password_driver_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Ensure expected exception is raised if set_admin_password not\n        implemented by driver.\n        """'
newline|'\n'
name|'exc'
op|'='
name|'NotImplementedError'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_do_test_set_admin_password_driver_error'
op|'('
name|'exc'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_file
dedent|''
name|'def'
name|'test_inject_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can write a file to an instance.'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'inject'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_inject_file
name|'def'
name|'fake_driver_inject_file'
op|'('
name|'self2'
op|','
name|'instance'
op|','
name|'path'
op|','
name|'contents'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'path'
op|','
string|'"/tmp/test"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'contents'
op|','
string|'"File Contents"'
op|')'
newline|'\n'
name|'called'
op|'['
string|"'inject'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'inject_file'"
op|','
nl|'\n'
name|'fake_driver_inject_file'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'inject_file'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|'"/tmp/test"'
op|','
nl|'\n'
string|'"File Contents"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'inject'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can inject network info.'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'inject'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_inject_network
name|'def'
name|'fake_driver_inject_network'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'network_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'inject'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'inject_network_info'"
op|','
nl|'\n'
name|'fake_driver_inject_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'inject'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can reset networking on an instance.'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'count'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_driver_reset_network
name|'def'
name|'fake_driver_reset_network'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'count'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'reset_network'"
op|','
nl|'\n'
name|'fake_driver_reset_network'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'count'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot
dedent|''
name|'def'
name|'test_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be snapshotted.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'name'
op|'='
string|'"myfakesnapshot"'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_no_image
dedent|''
name|'def'
name|'test_snapshot_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
newline|'\n'
name|'name'
op|'='
string|'"myfakesnapshot"'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'name'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_fails
dedent|''
name|'def'
name|'test_snapshot_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure task_state is set to None if snapshot fails.'
nl|'\n'
DECL|function|fake_snapshot
indent|'        '
name|'def'
name|'fake_snapshot'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'snapshot'"
op|','
name|'fake_snapshot'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'snapshot_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|'"failing_snapshot"'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_assert_state'
op|'('
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_assert_state
dedent|''
name|'def'
name|'_assert_state'
op|'('
name|'self'
op|','
name|'state_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert state of VM is equal to state passed as parameter."""'
newline|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'if'
string|"'vm_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'task_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
string|"'power_state'"
name|'in'
name|'state_dict'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'state_dict'
op|'['
string|"'power_state'"
op|']'
op|','
nl|'\n'
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'power_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get console output from instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|"'FAKE CONSOLE OUTPUT\\nANOTHER\\nLAST LINE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output_tail
dedent|''
name|'def'
name|'test_console_output_tail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get console output from instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
name|'tail_length'
op|'='
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
string|"'ANOTHER\\nLAST LINE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_novnc_vnc_console
dedent|''
name|'def'
name|'test_novnc_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try with the full instance'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'novnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xvpvnc_vnc_console
dedent|''
name|'def'
name|'test_xvpvnc_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'xvpvnc'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_vnc_console_type
dedent|''
name|'def'
name|'test_invalid_vnc_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error if console type is an unrecognised string.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_vnc_console_type
dedent|''
name|'def'
name|'test_missing_vnc_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error is console type is None.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'False'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spicehtml5_spice_console
dedent|''
name|'def'
name|'test_spicehtml5_spice_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a spice console for an instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try with the full instance'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'spice-html5'"
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'console'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_spice_console_type
dedent|''
name|'def'
name|'test_invalid_spice_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error if console type is an unrecognised string'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'invalid'"
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_spice_console_type
dedent|''
name|'def'
name|'test_missing_spice_console_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Raise useful error is console type is None'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'vnc_enabled'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'enabled'
op|'='
name|'True'
op|','
name|'group'
op|'='
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ConsoleTypeInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_diagnostics
dedent|''
name|'def'
name|'test_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can get diagnostics for an instance.'
nl|'\n'
indent|'        '
name|'expected_diagnostic'
op|'='
op|'{'
string|"'cpu0_time'"
op|':'
number|'17300000000'
op|','
nl|'\n'
string|"'memory'"
op|':'
number|'524288'
op|','
nl|'\n'
string|"'vda_errors'"
op|':'
op|'-'
number|'1'
op|','
nl|'\n'
string|"'vda_read'"
op|':'
number|'262144'
op|','
nl|'\n'
string|"'vda_read_req'"
op|':'
number|'112'
op|','
nl|'\n'
string|"'vda_write'"
op|':'
number|'5778432'
op|','
nl|'\n'
string|"'vda_write_req'"
op|':'
number|'488'
op|','
nl|'\n'
string|"'vnet1_rx'"
op|':'
number|'2070139'
op|','
nl|'\n'
string|"'vnet1_rx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_rx_packets'"
op|':'
number|'26701'
op|','
nl|'\n'
string|"'vnet1_tx'"
op|':'
number|'140208'
op|','
nl|'\n'
string|"'vnet1_tx_drop'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_errors'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'vnet1_tx_packets'"
op|':'
number|'662'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'diagnostics'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'diagnostics'
op|','
name|'expected_diagnostic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_add_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'add_fixed_ip_to_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'network_id'
op|'='
number|'1'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_usage_notification
dedent|''
name|'def'
name|'test_remove_fixed_ip_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|dummy
indent|'        '
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'remove_fixed_ip_from_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'inject_network_info'"
op|','
name|'dummy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'reset_network'"
op|','
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'1'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_usage_notification
dedent|''
name|'def'
name|'test_run_instance_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure run instance generates appropriate usage notification.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.create.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'payload'"
op|']'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
comment|'# The last event is the one with the sugar in it.'
nl|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.create.end'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'state'"
op|']'
op|','
string|"'active'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_usage_notification
dedent|''
name|'def'
name|'test_terminate_usage_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure terminate_instance generates correct usage notification.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'cur_time'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.delete.start'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg1'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.shutdown.start'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg1'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.shutdown.end'"
op|')'
newline|'\n'
name|'msg1'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'3'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg1'
op|'['
string|"'event_type'"
op|']'
op|','
string|"'compute.instance.delete.end'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg1'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'deleted_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'deleted_at'"
op|']'
op|','
name|'timeutils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_existing
dedent|''
name|'def'
name|'test_run_instance_existing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure failure when running an instance that already exists.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_instance_queries_macs
dedent|''
name|'def'
name|'test_run_instance_queries_macs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# run_instance should ask the driver for node mac addresses and pass'
nl|'\n'
comment|'# that to the network_api in use.'
nl|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'01:23:45:67:89:ab'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'False'
op|','
name|'macs'
op|'='
name|'macs'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|','
number|'1'
op|','
nl|'\n'
name|'spectacular'
op|'='
name|'True'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"macs_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'macs_for_instance'
op|'('
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'macs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_set_to_error_on_uncaught_exception
dedent|''
name|'def'
name|'test_instance_set_to_error_on_uncaught_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that instance is set to error state when exception is raised.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|'"allocate_for_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'allocate_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'None'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'False'
op|','
nl|'\n'
name|'macs'
op|'='
name|'None'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'rpc_common'
op|'.'
name|'RemoteError'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'RemoteError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'vm_states'
op|'.'
name|'ERROR'
op|','
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_instance_succedes_on_volume_fail
dedent|''
name|'def'
name|'test_delete_instance_succedes_on_volume_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_cleanup_volumes
name|'def'
name|'fake_cleanup_volumes'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_cleanup_volumes'"
op|','
nl|'\n'
name|'fake_cleanup_volumes'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_delete_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_termination_exception_sets_error
dedent|''
name|'def'
name|'test_instance_termination_exception_sets_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that we handle InstanceTerminationFailure\n        which is propagated up from the underlying driver.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_delete_instance
name|'def'
name|'fake_delete_instance'
op|'('
name|'context'
op|','
name|'instance'
op|','
name|'bdms'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'InstanceTerminationFailure'
op|'('
name|'reason'
op|'='
string|"''"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_delete_instance'"
op|','
nl|'\n'
name|'fake_delete_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_network_is_deallocated_on_spawn_failure
dedent|''
name|'def'
name|'test_network_is_deallocated_on_spawn_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# When a spawn fails the network must be deallocated.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_setup_block_device_mapping"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_setup_block_device_mapping'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'rpc'
op|'.'
name|'common'
op|'.'
name|'RemoteError'
op|'('
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc'
op|'.'
name|'common'
op|'.'
name|'RemoteError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure locked instance cannot be changed.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'non_admin_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|check_task_state
name|'def'
name|'check_task_state'
op|'('
name|'task_state'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_state'
op|')'
newline|'\n'
nl|'\n'
comment|'# should fail with locked nonadmin context'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceIsLocked'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'non_admin_context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# should fail with invalid task state'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'non_admin_context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
nl|'\n'
comment|'# should succeed with admin context'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'SOFT'"
op|')'
newline|'\n'
name|'check_task_state'
op|'('
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_state_revert
dedent|''
name|'def'
name|'_test_state_revert'
op|'('
name|'self'
op|','
name|'operation'
op|','
name|'pre_task_state'
op|','
nl|'\n'
name|'post_task_state'
op|'='
name|'None'
op|','
name|'kwargs'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'kwargs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# The API would have set task_state, so do that here to test'
nl|'\n'
comment|'# that the state gets reverted on failure'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'pre_task_state'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'orig_elevated'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
newline|'\n'
name|'orig_notify'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_notify_about_instance_usage'
newline|'\n'
nl|'\n'
DECL|function|_get_an_exception
name|'def'
name|'_get_an_exception'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|','
name|'_get_an_exception'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_notify_about_instance_usage'"
op|','
name|'_get_an_exception'
op|')'
newline|'\n'
nl|'\n'
name|'func'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
name|'operation'
op|')'
newline|'\n'
nl|'\n'
name|'raised'
op|'='
name|'False'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'test'
op|'.'
name|'TestingException'
op|':'
newline|'\n'
indent|'            '
name|'raised'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
comment|'# self.context.elevated() is called in tearDown()'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'elevated'"
op|','
name|'orig_elevated'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_notify_about_instance_usage'"
op|','
name|'orig_notify'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'raised'
op|')'
newline|'\n'
nl|'\n'
comment|"# Fetch the instance's task_state and make sure it went to expected"
nl|'\n'
comment|'# post-state'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|'"task_state"'
op|']'
op|','
name|'post_task_state'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_state_revert
dedent|''
name|'def'
name|'test_state_revert'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# ensure that task_state is reverted after a failed operation.'
nl|'\n'
indent|'        '
name|'actions'
op|'='
op|'['
nl|'\n'
op|'('
string|'"reboot_instance"'
op|','
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
op|','
nl|'\n'
op|'('
string|'"stop_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
op|','
nl|'\n'
op|'('
string|'"start_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
op|','
nl|'\n'
op|'('
string|'"terminate_instance"'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'DELETING'
op|')'
op|','
nl|'\n'
op|'('
string|'"power_off_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
op|','
nl|'\n'
op|'('
string|'"power_on_instance"'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
op|','
nl|'\n'
op|'('
string|'"soft_delete_instance"'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
op|','
nl|'\n'
op|'('
string|'"restore_instance"'
op|','
name|'task_states'
op|'.'
name|'RESTORING'
op|')'
op|','
nl|'\n'
op|'('
string|'"rebuild_instance"'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'orig_image_ref'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'image_ref'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'injected_files'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'new_pass'"
op|':'
string|"''"
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"set_admin_password"'
op|','
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
op|','
nl|'\n'
op|'('
string|'"rescue_instance"'
op|','
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
op|','
nl|'\n'
op|'('
string|'"unrescue_instance"'
op|','
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
op|','
nl|'\n'
op|'('
string|'"revert_resize"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'migration_id'"
op|':'
name|'None'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"prep_resize"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'image'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'instance_type'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"resize_instance"'
op|','
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'migration_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'image'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
string|'"pause_instance"'
op|','
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
op|','
nl|'\n'
op|'('
string|'"unpause_instance"'
op|','
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
op|','
nl|'\n'
op|'('
string|'"suspend_instance"'
op|','
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
op|','
nl|'\n'
op|'('
string|'"resume_instance"'
op|','
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'for'
name|'operation'
name|'in'
name|'actions'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_test_state_revert'
op|'('
op|'*'
name|'operation'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_ensure_quota_reservations_committed
dedent|''
dedent|''
name|'def'
name|'_ensure_quota_reservations_committed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mock up commit of quota reservations."""'
newline|'\n'
name|'reservations'
op|'='
name|'list'
op|'('
string|"'fake_res'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'commit'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|_ensure_quota_reservations_rolledback
dedent|''
name|'def'
name|'_ensure_quota_reservations_rolledback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Mock up rollback of quota reservations."""'
newline|'\n'
name|'reservations'
op|'='
name|'list'
op|'('
string|"'fake_res'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'rollback'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'reservations'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize
dedent|''
name|'def'
name|'test_finish_resize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Contrived test to ensure finish_resize doesn't raise anything."
nl|'\n'
nl|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_migration_update
dedent|''
name|'def'
name|'fake_migration_update'
op|'('
name|'context'
op|','
name|'id'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance status updates is after the migration finish'
nl|'\n'
indent|'            '
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'migration_ref'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'=='
name|'vm_states'
op|'.'
name|'RESIZED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'migration_update'"
op|','
name|'fake_migration_update'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|'"uuid"'
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|'"uuid"'
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'migration_ref'
op|')'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_handles_error
dedent|''
name|'def'
name|'test_finish_resize_handles_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure we don't leave the instance in RESIZE on error."
nl|'\n'
nl|'\n'
DECL|function|throw_up
indent|'        '
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake
dedent|''
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'throw_up'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|'"uuid"'
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'migration_ref'
op|')'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_instance_notification
dedent|''
name|'def'
name|'test_rebuild_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'cur_time'
op|')'
newline|'\n'
nl|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'orig_sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|'"image_ref"'
op|']'
newline|'\n'
name|'new_image_ref'
op|'='
name|'image_ref'
op|'+'
string|"'-new_image_ref'"
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'image_ref'"
op|':'
name|'new_image_ref'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'password'
op|'='
string|'"new_password"'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
name|'image_ref'
op|','
name|'new_image_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'new_pass'
op|'='
name|'password'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'orig_sys_metadata'
op|','
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'image_ref'
op|')'
newline|'\n'
name|'new_image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'new_image_ref'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'payload'"
op|']'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.rebuild.start'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'payload'"
op|']'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'new_image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'payload'"
op|']'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.rebuild.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_name'"
op|']'
op|','
string|"'fake_name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'timeutils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'new_image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_resize_instance_notification
dedent|''
name|'def'
name|'test_finish_resize_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'new_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.small'"
op|')'
newline|'\n'
name|'new_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_type'
op|')'
newline|'\n'
name|'new_type_id'
op|'='
name|'new_type'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'new_instance'
op|'['
string|'"uuid"'
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration_ref'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance_type'
op|'='
name|'new_type'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'cur_time'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'migration_ref'
op|')'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'new_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.finish_resize.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.finish_resize.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.small'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'new_type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'payload'
op|'['
string|"'launched_at'"
op|']'
op|','
name|'timeutils'
op|'.'
name|'strtime'
op|'('
name|'cur_time'
op|')'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_notification
dedent|''
name|'def'
name|'test_resize_instance_notification'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure notifications on instance migrate/resize.'
nl|'\n'
indent|'        '
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
name|'cur_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'12'
op|','
number|'21'
op|','
number|'12'
op|','
number|'21'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'cur_time'
op|')'
newline|'\n'
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.exists'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.resize.prep.start'"
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'event_type'"
op|']'
op|','
nl|'\n'
string|"'compute.instance.resize.prep.end'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'msg'
op|'['
string|"'priority'"
op|']'
op|','
string|"'INFO'"
op|')'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'tenant_id'"
op|']'
op|','
name|'self'
op|'.'
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'user_id'"
op|']'
op|','
name|'self'
op|'.'
name|'user_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_id'"
op|']'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'instance_type'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'type_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'payload'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
op|','
name|'str'
op|'('
name|'type_id'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'display_name'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'created_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'launched_at'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'image_ref_url'
op|'='
name|'glance'
op|'.'
name|'generate_image_url'
op|'('
name|'FAKE_IMAGE_REF'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'image_ref_url'"
op|']'
op|','
name|'image_ref_url'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prep_resize_instance_migration_error_on_same_host
dedent|''
name|'def'
name|'test_prep_resize_instance_migration_error_on_same_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure prep_resize raise a migration error if destination is set on\n        the same source host and allow_resize_to_same_host is false\n        """'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'host'
op|'='
string|'"foo"'
op|','
name|'allow_resize_to_same_host'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MigrationError'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_prep_resize_instance_migration_error_on_none_host
dedent|''
name|'def'
name|'test_prep_resize_instance_migration_error_on_none_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure prep_resize raise a migration error if destination host is\n        not defined\n        """'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MigrationError'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_driver_error
dedent|''
name|'def'
name|'test_resize_instance_driver_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance status set to Error on resize error.'
nl|'\n'
nl|'\n'
DECL|function|throw_up
indent|'        '
name|'def'
name|'throw_up'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'throw_up'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
comment|'#verify'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration_ref'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance
dedent|''
name|'def'
name|'test_resize_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be migrated/resized.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'new_instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'new_instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration_ref'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'new_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'migration_ref'
op|'['
string|"'dest_compute'"
op|']'
op|','
name|'inst'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_finish_revert_resize
dedent|''
name|'def'
name|'test_finish_revert_resize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that the flavor is reverted to the original on revert.'
nl|'\n'
DECL|function|fake
indent|'        '
name|'def'
name|'fake'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake_finish_revert_migration_driver
dedent|''
name|'def'
name|'fake_finish_revert_migration_driver'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
comment|'# Confirm the instance uses the old type in finish_revert_resize'
nl|'\n'
indent|'            '
name|'inst'
op|'='
name|'args'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_migration'"
op|','
name|'fake'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'finish_revert_migration'"
op|','
nl|'\n'
name|'fake_finish_revert_migration_driver'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_committed'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Confirm the instance size before the resize starts'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
name|'new_inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'new_instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get_by_flavor_id'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'3'
op|')'
newline|'\n'
name|'new_instance_type_p'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_instance_type_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'new_inst_ref'
op|')'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_p'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration_ref'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'new_instance_type_p'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'migration_ref'
op|')'
op|','
nl|'\n'
name|'disk_info'
op|'='
op|'{'
op|'}'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# Prove that the instance size is now the new size'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'3'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Finally, revert and confirm the old flavor has been applied'
nl|'\n'
name|'rpcinst'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'revert_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration_id'
op|'='
name|'migration_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'instance'
op|'='
name|'rpcinst'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_setup_networks_on_host
name|'def'
name|'fake_setup_networks_on_host'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'ctxt'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'host'
op|','
name|'inst'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'setup_networks_on_host'"
op|','
nl|'\n'
name|'fake_setup_networks_on_host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'finish_revert_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'migration'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'migration_ref'
op|')'
op|','
nl|'\n'
name|'instance'
op|'='
name|'rpcinst'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'instance_type_ref'
op|'='
name|'db'
op|'.'
name|'instance_type_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_type_ref'
op|'['
string|"'flavorid'"
op|']'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|','
name|'migration_ref'
op|'['
string|"'source_compute'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_by_flavor_id
dedent|''
name|'def'
name|'test_get_by_flavor_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'type'
op|'['
string|"'name'"
op|']'
op|','
string|"'m1.tiny'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_same_source_fails
dedent|''
name|'def'
name|'test_resize_same_source_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure instance fails to migrate when source and destination are\n        the same host"""'
newline|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MigrationError'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_instance_handles_migration_error
dedent|''
name|'def'
name|'test_resize_instance_handles_migration_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure vm_state is ERROR when error occurs.'
nl|'\n'
DECL|function|raise_migration_failure
indent|'        '
name|'def'
name|'raise_migration_failure'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'migrate_disk_and_power_off'"
op|','
nl|'\n'
name|'raise_migration_failure'
op|')'
newline|'\n'
nl|'\n'
name|'reservations'
op|'='
name|'self'
op|'.'
name|'_ensure_quota_reservations_rolledback'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image'
op|'='
op|'{'
op|'}'
op|','
name|'reservations'
op|'='
name|'reservations'
op|')'
newline|'\n'
name|'migration_ref'
op|'='
name|'db'
op|'.'
name|'migration_get_by_instance_and_status'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'pre-migrating'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'resize_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'migration'
op|'='
name|'migration_ref'
op|','
name|'image'
op|'='
op|'{'
op|'}'
op|','
nl|'\n'
name|'reservations'
op|'='
name|'reservations'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance_type'
op|')'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ERROR'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_can_live_migrate_source_works_correctly
dedent|''
name|'def'
name|'test_check_can_live_migrate_source_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm check_can_live_migrate_source works on positive path.'
nl|'\n'
DECL|function|fake_method
indent|'        '
name|'def'
name|'fake_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'check_can_live_migrate_source'"
op|','
nl|'\n'
name|'fake_method'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get'"
op|')'
newline|'\n'
name|'dest_check_data'
op|'='
op|'{'
string|'"test"'
op|':'
string|'"data"'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'dest_check_data'
op|'='
name|'dest_check_data'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'type'
op|'('
name|'ret'
op|')'
op|'=='
name|'dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_can_live_migrate_destination_works_correctly
dedent|''
name|'def'
name|'test_check_can_live_migrate_destination_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm check_can_live_migrate_destination works on positive path.'
nl|'\n'
DECL|function|fake_method
indent|'        '
name|'def'
name|'fake_method'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'check_can_live_migrate_source'"
op|','
nl|'\n'
name|'fake_method'
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'compute_info'
op|'='
op|'{'
string|'"compute"'
op|':'
string|'"info"'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_compute_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_can_live_migrate_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_can_live_migrate_destination_cleanup'"
op|')'
newline|'\n'
nl|'\n'
name|'dest_check_data'
op|'='
op|'{'
string|'"test"'
op|':'
string|'"data"'
op|','
string|'"migrate_data"'
op|':'
op|'{'
string|'"test"'
op|':'
string|'"data"'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
nl|'\n'
name|'compute_info'
op|','
name|'compute_info'
op|','
nl|'\n'
name|'True'
op|','
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dest_check_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
name|'dest_check_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination_cleanup'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'dest_check_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'True'
op|','
name|'disk_over_commit'
op|'='
name|'False'
op|','
nl|'\n'
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'type'
op|'('
name|'ret'
op|')'
op|'=='
name|'dict'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"test"'
name|'in'
name|'ret'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_can_live_migrate_destination_fails_dest_check
dedent|''
name|'def'
name|'test_check_can_live_migrate_destination_fails_dest_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'compute_info'
op|'='
op|'{'
string|'"compute"'
op|':'
string|'"info"'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_compute_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_can_live_migrate_destination'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
nl|'\n'
name|'compute_info'
op|','
name|'compute_info'
op|','
nl|'\n'
name|'True'
op|','
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'check_can_live_migrate_destination'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_can_live_migrate_destination_fails_source
dedent|''
name|'def'
name|'test_check_can_live_migrate_destination_fails_source'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm check_can_live_migrate_destination works on positive path.'
nl|'\n'
indent|'        '
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'compute_info'
op|'='
op|'{'
string|'"compute"'
op|':'
string|'"info"'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_compute_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_can_live_migrate_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'check_can_live_migrate_source'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'check_can_live_migrate_destination_cleanup'"
op|')'
newline|'\n'
nl|'\n'
name|'dest_check_data'
op|'='
op|'{'
string|'"test"'
op|':'
string|'"data"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'host'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_compute_info'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'compute_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
nl|'\n'
name|'compute_info'
op|','
name|'compute_info'
op|','
nl|'\n'
name|'True'
op|','
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dest_check_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'check_can_live_migrate_source'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
name|'dest_check_data'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'check_can_live_migrate_destination_cleanup'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'dest_check_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'check_can_live_migrate_destination'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'False'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_instance_has_no_fixed_ip
dedent|''
name|'def'
name|'test_pre_live_migration_instance_has_no_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Confirm raising exception if instance doesn't have fixed_ip."
nl|'\n'
comment|'# creating instance testdata'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForInstance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pre_live_migration'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pre_live_migration_works_correctly
dedent|''
name|'def'
name|'test_pre_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm setup_compute_volume is called when volume is mounted.'
nl|'\n'
DECL|function|stupid
indent|'        '
name|'def'
name|'stupid'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
nl|'\n'
name|'spectacular'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_get_instance_nw_info'"
op|','
name|'stupid'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating instance testdata'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'pre_live_migration'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'c'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance'
op|')'
op|','
nl|'\n'
op|'{'
string|"'block_device_mapping'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'ensure_filtering_rules_for_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'instance'
op|')'
op|','
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
string|"'is_shared_storage'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pre_live_migration'
op|'('
name|'c'
op|','
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'False'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_exception_rolls_back
dedent|''
name|'def'
name|'test_live_migration_exception_rolls_back'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm exception when pre_live_migration fails.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'src_host'
op|'='
string|"'fake-src-host'"
newline|'\n'
name|'dest_host'
op|'='
string|"'fake-dest-host'"
newline|'\n'
name|'instance'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
string|"'fake_instance'"
op|','
name|'host'
op|'='
name|'src_host'
op|','
nl|'\n'
name|'name'
op|'='
string|"'fake-name'"
op|')'
newline|'\n'
name|'updated_instance'
op|'='
string|"'fake_updated_instance'"
newline|'\n'
name|'fake_bdms'
op|'='
op|'['
name|'dict'
op|'('
name|'volume_id'
op|'='
string|"'vol1-id'"
op|')'
op|','
name|'dict'
op|'('
name|'volume_id'
op|'='
string|"'vol2-id'"
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'get_instance_disk_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'pre_live_migration'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_volume_bdms'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'remove_volume_connection'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|','
nl|'\n'
string|"'rollback_live_migration_at_destination'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'get_instance_disk_info'
op|'('
nl|'\n'
name|'instance'
op|'['
string|"'name'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_disk'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'pre_live_migration'
op|'('
name|'c'
op|','
nl|'\n'
name|'instance'
op|','
name|'True'
op|','
string|"'fake_disk'"
op|','
name|'dest_host'
op|','
nl|'\n'
name|'None'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'c'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'src_host'
op|','
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'updated_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'c'
op|','
nl|'\n'
name|'updated_instance'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_volume_bdms'
op|'('
name|'c'
op|','
nl|'\n'
name|'updated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_bdms'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
nl|'\n'
name|'c'
op|','
name|'updated_instance'
op|','
string|"'vol1-id'"
op|','
name|'dest_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'remove_volume_connection'
op|'('
nl|'\n'
name|'c'
op|','
name|'updated_instance'
op|','
string|"'vol2-id'"
op|','
name|'dest_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'rollback_live_migration_at_destination'
op|'('
nl|'\n'
name|'c'
op|','
name|'updated_instance'
op|','
name|'dest_host'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|','
nl|'\n'
name|'c'
op|','
name|'dest'
op|'='
name|'dest_host'
op|','
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migration_works_correctly
dedent|''
name|'def'
name|'test_live_migration_works_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm live_migration() works as expected correctly.'
nl|'\n'
comment|'# creating instance testdata'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'dummy'"
op|'}'
op|')'
newline|'\n'
name|'inst_uuid'
op|'='
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'inst_id'
op|')'
op|')'
newline|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
string|"'is_shared_storage'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'live_migration'
op|'('
name|'c'
op|','
name|'dest'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'instance'
op|'='
name|'instance'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ret'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_no_shared_storage_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_no_shared_storage_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm post_live_migration() works as expected correctly\n           for non shared storage migration.\n        """'
newline|'\n'
comment|'# Create stubs'
nl|'\n'
name|'result'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fakedestroy
name|'def'
name|'fakedestroy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|"'destroyed'"
op|']'
op|'='
name|'True'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|','
name|'fakedestroy'
op|')'
newline|'\n'
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'srchost'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
op|')'
newline|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_id'
op|'='
name|'inst_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unfilter_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'inst_ref'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'srchost'
op|','
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'c'
op|','
name|'inst_ref'
op|','
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"post_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'inst_ref'
op|','
string|"'block_migration'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
string|"'network'"
op|','
op|'{'
string|"'method'"
op|':'
string|"'setup_networks_on_host'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'inst_id'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'teardown'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'1.0'"
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'migrate_data'
op|'='
op|'{'
string|"'is_shared_storage'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_post_live_migration'
op|'('
name|'c'
op|','
name|'inst_ref'
op|','
name|'dest'
op|','
nl|'\n'
name|'migrate_data'
op|'='
name|'migrate_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'destroyed'"
name|'in'
name|'result'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'['
string|"'destroyed'"
op|']'
op|'=='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_working_correctly
dedent|''
name|'def'
name|'test_post_live_migration_working_correctly'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Confirm post_live_migration() works as expected correctly.'
nl|'\n'
indent|'        '
name|'dest'
op|'='
string|"'desthost'"
newline|'\n'
name|'srchost'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'state_description'"
op|':'
string|"'migrating'"
op|','
nl|'\n'
string|"'state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
op|')'
newline|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'inst_id'
op|'='
name|'inst_ref'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# creating mocks'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unfilter_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unfilter_instance'
op|'('
name|'inst_ref'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_start'"
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'srchost'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'dest'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_start'
op|'('
name|'c'
op|','
name|'inst_ref'
op|','
name|'migration'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'c'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
name|'dest'
op|')'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"post_live_migration_at_destination"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'inst_ref'
op|','
string|"'block_migration'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'unplug_vifs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'unplug_vifs'
op|'('
name|'inst_ref'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'c'
op|','
string|"'network'"
op|','
op|'{'
string|"'method'"
op|':'
string|"'setup_networks_on_host'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance_id'"
op|':'
name|'inst_id'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'teardown'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'1.0'"
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_post_live_migration'
op|'('
name|'c'
op|','
name|'inst_ref'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_post_live_migration_at_destination
dedent|''
name|'def'
name|'test_post_live_migration_at_destination'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'setup_networks_on_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'migrate_instance_finish'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'post_live_migration_at_destination'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'MIGRATING'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'PAUSED'
op|','
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'admin_ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'admin_ctxt'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'admin_ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
name|'instance'
op|','
name|'migration'
op|')'
newline|'\n'
name|'fake_net_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'fake_net_info'
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'admin_ctxt'
op|','
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
string|"'fake_power_state'"
op|')'
newline|'\n'
nl|'\n'
name|'updated_instance'
op|'='
string|"'fake_updated_instance'"
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'admin_ctxt'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
name|'power_state'
op|'='
string|"'fake_power_state'"
op|','
nl|'\n'
name|'vm_state'
op|'='
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'task_state'
op|'='
name|'None'
op|','
nl|'\n'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'updated_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'setup_networks_on_host'
op|'('
name|'admin_ctxt'
op|','
nl|'\n'
name|'updated_instance'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'post_live_migration_at_destination'
op|'('
name|'admin_ctxt'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_run_kill_vm
dedent|''
name|'def'
name|'test_run_kill_vm'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Detect when a vm is terminated behind the scenes.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_manager'
op|'.'
name|'ComputeManager'
op|','
nl|'\n'
string|"'_report_driver_status'"
op|','
name|'nop_report_driver_status'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"Running instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'instance_name'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'test_remove_vm'
op|'('
name|'instance_name'
op|')'
newline|'\n'
nl|'\n'
comment|'# Force the compute manager to do its periodic poll'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_sync_power_states'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'info'
op|'('
name|'_'
op|'('
string|'"After force-killing instances: %s"'
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'task_state'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault
dedent|''
name|'def'
name|'test_add_instance_fault'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'values'
op|'['
string|"'details'"
op|']'
op|'.'
name|'startswith'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'raise NotImplementedError'"
name|'in'
name|'values'
op|'['
string|"'details'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'values'
op|'['
string|"'details'"
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'NotImplementedError'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'NotImplementedError'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
op|','
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_with_remote_error
dedent|''
name|'def'
name|'test_add_instance_fault_with_remote_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'values'
op|'['
string|"'details'"
op|']'
op|'.'
name|'startswith'
op|'('
string|"'Remote error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'raise rpc_common.RemoteError'"
nl|'\n'
name|'in'
name|'values'
op|'['
string|"'details'"
op|']'
op|')'
newline|'\n'
name|'del'
name|'values'
op|'['
string|"'details'"
op|']'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'My Test Message'"
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'rpc_common'
op|'.'
name|'RemoteError'
op|'('
string|"'test'"
op|','
string|"'My Test Message'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'rpc_common'
op|'.'
name|'RemoteError'
name|'as'
name|'exc'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'exc'
op|','
nl|'\n'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_user_error
dedent|''
name|'def'
name|'test_add_instance_fault_user_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'exc_info'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'400'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'Invalid'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"'fake details'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'user_exc'
op|'='
name|'exception'
op|'.'
name|'Invalid'
op|'('
string|"'fake details'"
op|','
name|'code'
op|'='
number|'400'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'user_exc'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
name|'user_exc'
op|','
nl|'\n'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_instance_fault_no_exc_info
dedent|''
name|'def'
name|'test_add_instance_fault_no_exc_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_db_fault_create
name|'def'
name|'fake_db_fault_create'
op|'('
name|'ctxt'
op|','
name|'values'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'500'
op|','
nl|'\n'
string|"'message'"
op|':'
string|"'NotImplementedError'"
op|','
nl|'\n'
string|"'details'"
op|':'
string|"'test'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
string|"'instance_fault_create'"
op|','
name|'fake_db_fault_create'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'ctxt'
op|','
name|'instance'
op|','
nl|'\n'
name|'NotImplementedError'
op|'('
string|"'test'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cleanup_running_deleted_instances
dedent|''
name|'def'
name|'test_cleanup_running_deleted_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'deleted_at'
op|'='
op|'('
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
nl|'\n'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'hours'
op|'='
number|'1'
op|','
name|'minutes'
op|'='
number|'5'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|'"deleted_at"'
op|':'
name|'deleted_at'
op|','
nl|'\n'
string|'"deleted"'
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'='
name|'instance'
op|'['
string|"'host'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'list_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'instance'
op|'['
string|"'name'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'running_deleted_instance_timeout'
op|'='
number|'3600'
op|','
nl|'\n'
name|'running_deleted_instance_action'
op|'='
string|"'reap'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|'"instance_get_all_by_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'admin_context'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
op|'['
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_shutdown_instance"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_shutdown_instance'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'bdms'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_cleanup_volumes"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_volumes'
op|'('
name|'admin_context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'bdms'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_cleanup_running_deleted_instances'
op|'('
name|'admin_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_running_deleted_instances
dedent|''
name|'def'
name|'test_running_deleted_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'list_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
string|"'herp'"
op|','
string|"'derp'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'='
string|"'host'"
newline|'\n'
nl|'\n'
name|'instance1'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance1'
op|'['
string|"'name'"
op|']'
op|'='
string|"'herp'"
newline|'\n'
name|'instance1'
op|'['
string|"'deleted'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'instance1'
op|'['
string|"'deleted_at'"
op|']'
op|'='
string|'"sometimeago"'
newline|'\n'
nl|'\n'
name|'instance2'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instance2'
op|'['
string|"'name'"
op|']'
op|'='
string|"'derp'"
newline|'\n'
name|'instance2'
op|'['
string|"'deleted'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'instance2'
op|'['
string|"'deleted_at'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'timeutils'
op|','
string|"'is_older_than'"
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'is_older_than'
op|'('
string|"'sometimeago'"
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'running_deleted_instance_timeout'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|'"instance_get_all_by_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
string|"'context'"
op|','
nl|'\n'
string|"'host'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'instance1'
op|','
nl|'\n'
name|'instance2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'val'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_running_deleted_instances'
op|'('
string|"'context'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'val'
op|','
op|'['
name|'instance1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info
dedent|''
name|'def'
name|'test_get_instance_nw_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_network'
op|'.'
name|'unset_stub_network_methods'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
nl|'\n'
name|'fake_instance'
op|'='
string|"'fake-instance'"
newline|'\n'
name|'fake_nw_info'
op|'='
name|'network_model'
op|'.'
name|'NetworkInfo'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'fake_nw_info'
op|','
string|"'json'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'network_api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'update_cache'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_nw_info'
op|')'
newline|'\n'
name|'fake_nw_info'
op|'.'
name|'json'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake-nw-info'"
op|')'
newline|'\n'
name|'expected_cache'
op|'='
op|'{'
string|"'network_info'"
op|':'
string|"'fake-nw-info'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_info_cache_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'expected_cache'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_nw_info'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_heal_instance_info_cache
dedent|''
name|'def'
name|'test_heal_instance_info_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Update on every call for the test'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'heal_instance_info_cache_interval'
op|'='
op|'-'
number|'1'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instance_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
string|"'fake-uuid-%s'"
op|'%'
name|'x'
newline|'\n'
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'uuid'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'call_info'
op|'='
op|'{'
string|"'get_all_by_host'"
op|':'
number|'0'
op|','
string|"'get_by_uuid'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'get_nw_info'"
op|':'
number|'0'
op|','
string|"'expected_instance'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_host
name|'def'
name|'fake_instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'instances'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_by_uuid
dedent|''
name|'def'
name|'fake_instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'instance_uuid'
name|'not'
name|'in'
name|'instance_map'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|'+='
number|'1'
newline|'\n'
name|'return'
name|'instance_map'
op|'['
name|'instance_uuid'
op|']'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): Override the stub in setUp()'
nl|'\n'
DECL|function|fake_get_instance_nw_info
dedent|''
name|'def'
name|'fake_get_instance_nw_info'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|'# Note that this exception gets caught in compute/manager'
nl|'\n'
comment|'# and is ignored.  However, the below increment of'
nl|'\n'
comment|"# 'get_nw_info' won't happen, and you'll get an assert"
nl|'\n'
comment|'# failure checking it below.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|','
name|'instance'
op|')'
newline|'\n'
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
string|"'instance_get_all_by_host'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
string|"'instance_get_by_uuid'"
op|','
nl|'\n'
name|'fake_instance_get_by_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_instance_nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make an instance switch hosts'
nl|'\n'
name|'instances'
op|'['
number|'2'
op|']'
op|'['
string|"'host'"
op|']'
op|'='
string|"'not-me'"
newline|'\n'
comment|'# Make an instance disappear'
nl|'\n'
name|'instance_map'
op|'.'
name|'pop'
op|'('
name|'instances'
op|'['
number|'3'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
comment|"# '2' and '3' should be skipped.."
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'4'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
comment|"# Incremented for '2' and '4'.. '3' caused a raise above."
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|','
number|'3'
op|')'
newline|'\n'
comment|'# Should be no more left.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_uuids_to_heal'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# This should cause a DB query now so we get first instance'
nl|'\n'
comment|'# back again'
nl|'\n'
name|'call_info'
op|'['
string|"'expected_instance'"
op|']'
op|'='
name|'instances'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_heal_instance_info_cache'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_all_by_host'"
op|']'
op|','
number|'2'
op|')'
newline|'\n'
comment|'# Stays the same, beacuse the instance came from the DB'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_by_uuid'"
op|']'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'call_info'
op|'['
string|"'get_nw_info'"
op|']'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_rescued_instances
dedent|''
name|'def'
name|'test_poll_rescued_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'timed_out_time'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'-'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'minutes'
op|'='
number|'5'
op|')'
newline|'\n'
name|'not_timed_out_time'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
op|'['
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid1'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timed_out_time'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid2'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timed_out_time'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid3'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'not_timed_out_time'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid4'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'timed_out_time'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid5'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
nl|'\n'
string|"'launched_at'"
op|':'
name|'not_timed_out_time'
op|'}'
op|']'
newline|'\n'
name|'unrescued_instances'
op|'='
op|'{'
string|"'fake_uuid1'"
op|':'
name|'False'
op|','
string|"'fake_uuid4'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_host
name|'def'
name|'fake_instance_get_all_by_host'
op|'('
name|'context'
op|','
name|'host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'instances'
newline|'\n'
nl|'\n'
DECL|function|fake_unrescue
dedent|''
name|'def'
name|'fake_unrescue'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'unrescued_instances'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
string|"'instance_get_all_by_host'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_api'
op|'.'
name|'API'
op|','
string|"'unrescue'"
op|','
name|'fake_unrescue'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'rescue_timeout'
op|'='
number|'60'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_rescued_instances'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'instance'
name|'in'
name|'unrescued_instances'
op|'.'
name|'values'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_poll_unconfirmed_resizes
dedent|''
dedent|''
name|'def'
name|'test_poll_unconfirmed_resizes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instances'
op|'='
op|'['
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid1'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'noexist'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid2'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ERROR'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid3'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid4'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid5'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid6'"
op|','
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
string|"'deleting'"
op|'}'
op|']'
newline|'\n'
name|'expected_migration_status'
op|'='
op|'{'
string|"'fake_uuid1'"
op|':'
string|"'confirmed'"
op|','
nl|'\n'
string|"'noexist'"
op|':'
string|"'error'"
op|','
nl|'\n'
string|"'fake_uuid2'"
op|':'
string|"'error'"
op|','
nl|'\n'
string|"'fake_uuid3'"
op|':'
string|"'error'"
op|','
nl|'\n'
string|"'fake_uuid4'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'fake_uuid5'"
op|':'
string|"'error'"
op|','
nl|'\n'
string|"'fake_uuid6'"
op|':'
string|"'error'"
op|'}'
newline|'\n'
name|'migrations'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'i'
op|','
name|'instance'
name|'in'
name|'enumerate'
op|'('
name|'instances'
op|','
name|'start'
op|'='
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'migrations'
op|'.'
name|'append'
op|'('
op|'{'
string|"'id'"
op|':'
name|'i'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_by_uuid
dedent|''
name|'def'
name|'fake_instance_get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
comment|"# raise InstanceNotFound exception for uuid 'noexist'"
nl|'\n'
indent|'            '
name|'if'
name|'instance_uuid'
op|'=='
string|"'noexist'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
name|'instance_id'
op|'='
name|'instance_uuid'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'=='
name|'instance_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'instance'
newline|'\n'
nl|'\n'
DECL|function|fake_migration_get_unconfirmed_by_dest_compute
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_migration_get_unconfirmed_by_dest_compute'
op|'('
name|'context'
op|','
nl|'\n'
name|'resize_confirm_window'
op|','
name|'dest_compute'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'dest_compute'
op|','
name|'CONF'
op|'.'
name|'host'
op|')'
newline|'\n'
name|'return'
name|'migrations'
newline|'\n'
nl|'\n'
DECL|function|fake_migration_update
dedent|''
name|'def'
name|'fake_migration_update'
op|'('
name|'context'
op|','
name|'m'
op|','
name|'status'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'migration'
op|'['
string|"'id'"
op|']'
op|'=='
name|'m'
op|'['
string|"'id'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'migration'
op|'['
string|"'status'"
op|']'
op|'='
name|'status'
newline|'\n'
nl|'\n'
DECL|function|fake_confirm_resize
dedent|''
dedent|''
dedent|''
name|'def'
name|'fake_confirm_resize'
op|'('
name|'context'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
comment|"# raise exception for 'fake_uuid4' to check migration status"
nl|'\n'
comment|"# does not get set to 'error' on confirm_resize failure."
nl|'\n'
indent|'            '
name|'if'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'=='
string|"'fake_uuid4'"
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
newline|'\n'
dedent|''
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
op|'=='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'migration'
op|'['
string|"'status'"
op|']'
op|'='
string|"'confirmed'"
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|','
nl|'\n'
name|'fake_instance_get_by_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'migration_get_unconfirmed_by_dest_compute'"
op|','
nl|'\n'
name|'fake_migration_get_unconfirmed_by_dest_compute'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
string|"'migration_update'"
op|','
nl|'\n'
name|'fake_migration_update'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'compute_api'
op|','
string|"'confirm_resize'"
op|','
nl|'\n'
name|'fake_confirm_resize'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fetch_instance_migration_status
name|'def'
name|'fetch_instance_migration_status'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'migration'
name|'in'
name|'migrations'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'migration'
op|'['
string|"'instance_uuid'"
op|']'
op|'=='
name|'instance_uuid'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'migration'
op|'['
string|"'status'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'flags'
op|'('
name|'resize_confirm_window'
op|'='
number|'60'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_poll_unconfirmed_resizes'
op|'('
name|'ctxt'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'uuid'
op|','
name|'status'
name|'in'
name|'expected_migration_status'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'status'
op|','
name|'fetch_instance_migration_status'
op|'('
name|'uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_build_timeout_disabled
dedent|''
dedent|''
name|'def'
name|'test_instance_build_timeout_disabled'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_build_timeout'
op|'='
number|'0'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'get_all'"
op|':'
name|'False'
op|','
string|"'set_error_state'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'created_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
op|'-'
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_filters
name|'def'
name|'fake_instance_get_all_by_filters'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'get_all'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'instances'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_all_by_filters'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_filters'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_set_instance_error_state
name|'def'
name|'fake_set_instance_error_state'
op|'('
name|'_ctxt'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_set_instance_error_state'"
op|','
nl|'\n'
name|'fake_set_instance_error_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
string|"'fake-uuid-%s'"
op|'%'
name|'x'
newline|'\n'
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'uuid'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'created_at'
op|'}'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_instance_build_time'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'called'
op|'['
string|"'get_all'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_build_timeout
dedent|''
name|'def'
name|'test_instance_build_timeout'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_build_timeout'
op|'='
number|'30'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'get_all'"
op|':'
name|'False'
op|','
string|"'set_error_state'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'created_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
op|'-'
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_filters
name|'def'
name|'fake_instance_get_all_by_filters'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'get_all'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'instances'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_all_by_filters'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_filters'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_set_instance_error_state
name|'def'
name|'fake_set_instance_error_state'
op|'('
name|'_ctxt'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_set_instance_error_state'"
op|','
nl|'\n'
name|'fake_set_instance_error_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'5'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
string|"'fake-uuid-%s'"
op|'%'
name|'x'
newline|'\n'
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'uuid'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'created_at'
op|'}'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_instance_build_time'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'get_all'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_build_timeout_mixed_instances
dedent|''
name|'def'
name|'test_instance_build_timeout_mixed_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_build_timeout'
op|'='
number|'30'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'called'
op|'='
op|'{'
string|"'get_all'"
op|':'
name|'False'
op|','
string|"'set_error_state'"
op|':'
number|'0'
op|'}'
newline|'\n'
name|'created_at'
op|'='
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|'+'
name|'datetime'
op|'.'
name|'timedelta'
op|'('
name|'seconds'
op|'='
op|'-'
number|'60'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_get_all_by_filters
name|'def'
name|'fake_instance_get_all_by_filters'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'get_all'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'instances'
op|'['
op|':'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_all_by_filters'"
op|','
nl|'\n'
name|'fake_instance_get_all_by_filters'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_set_instance_error_state
name|'def'
name|'fake_set_instance_error_state'
op|'('
name|'_ctxt'
op|','
name|'instance_uuid'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_set_instance_error_state'"
op|','
nl|'\n'
name|'fake_set_instance_error_state'
op|')'
newline|'\n'
nl|'\n'
name|'instance_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'instances'
op|'='
op|'['
op|']'
newline|'\n'
comment|'#expired instances'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'uuid'
op|'='
string|"'fake-uuid-%s'"
op|'%'
name|'x'
newline|'\n'
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'uuid'
op|','
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'created_at'
op|'}'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'#not expired'
nl|'\n'
dedent|''
name|'uuid'
op|'='
string|"'fake-uuid-5'"
newline|'\n'
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
name|'uuid'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'timeutils'
op|'.'
name|'utcnow'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'instance_map'
op|'['
name|'uuid'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_check_instance_build_time'
op|'('
name|'ctxt'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'['
string|"'get_all'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'set_error_state'"
op|']'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_resource_tracker_fail
dedent|''
name|'def'
name|'test_get_resource_tracker_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_resource_tracker'
op|','
nl|'\n'
string|"'invalidnodename'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_update_host_check
dedent|''
name|'def'
name|'test_instance_update_host_check'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# make sure rt usage doesn't happen if the host or node is different"
nl|'\n'
DECL|function|fail_get
indent|'        '
name|'def'
name|'fail_get'
op|'('
name|'nodename'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
name|'_'
op|'('
string|'"wrong host/node"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_resource_tracker'"
op|','
name|'fail_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'someotherhost'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'node'"
op|':'
string|"'someothernode'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"'someotherhost'"
op|','
string|"'node'"
op|':'
string|"'someothernode'"
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_evacuated_instances
dedent|''
name|'def'
name|'test_destroy_evacuated_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# instances in central db'
nl|'\n'
name|'instances'
op|'='
op|'['
nl|'\n'
comment|'# those are still related to this host'
nl|'\n'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|')'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|')'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|'}'
op|')'
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# those are already been evacuated to other host'
nl|'\n'
name|'evacuated_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'otherhost'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'.'
name|'append'
op|'('
name|'evacuated_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instances_on_driver'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_volume_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_legacy_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'destroy'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'fake_context'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'instances'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
string|"'fake_network_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'evacuated_instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake_bdi'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_legacy_nw_info'
op|'('
string|"'fake_network_info'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
string|"'fake_legacy_network_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'destroy'
op|'('
name|'evacuated_instance'
op|','
nl|'\n'
string|"'fake_legacy_network_info'"
op|','
nl|'\n'
string|"'fake_bdi'"
op|','
nl|'\n'
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_init_host
dedent|''
name|'def'
name|'test_init_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'our_host'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
name|'fake_context'
op|'='
string|"'fake-context'"
newline|'\n'
name|'startup_instances'
op|'='
op|'['
string|"'inst1'"
op|','
string|"'inst2'"
op|','
string|"'inst3'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|_do_mock_calls
name|'def'
name|'_do_mock_calls'
op|'('
name|'defer_iptables_apply'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'init_host'
op|'('
name|'host'
op|'='
name|'our_host'
op|')'
newline|'\n'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all_by_host'
op|'('
nl|'\n'
name|'fake_context'
op|','
name|'our_host'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'startup_instances'
op|')'
newline|'\n'
name|'if'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_on'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_destroy_evacuated_instances'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
name|'fake_context'
op|','
name|'startup_instances'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
name|'fake_context'
op|','
name|'startup_instances'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
name|'fake_context'
op|','
name|'startup_instances'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'if'
name|'defer_iptables_apply'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'filter_defer_apply_off'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_report_driver_status'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'publish_service_capabilities'
op|'('
name|'fake_context'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'init_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'filter_defer_apply_on'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'filter_defer_apply_off'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|"'instance_get_all_by_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'context'
op|','
string|"'get_admin_context'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_destroy_evacuated_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_init_instance'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_report_driver_status'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'publish_service_capabilities'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Test with defer_iptables_apply'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'defer_iptables_apply'
op|'='
name|'True'
op|')'
newline|'\n'
name|'_do_mock_calls'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Test without defer_iptables_apply'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'defer_iptables_apply'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_do_mock_calls'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
comment|'# tearDown() uses context.get_admin_context(), so we have'
nl|'\n'
comment|'# to do the verification here and unstub it.'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_init_instance_failed_resume_sets_error
dedent|''
name|'def'
name|'test_init_instance_failed_resume_sets_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake-uuid'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'resume_guests_state_on_host_boot'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_get_power_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'plug_vifs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'resume_state_on_host_boot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_get_instance_volume_block_device_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
nl|'\n'
string|"'_set_instance_error_state'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_power_state'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'plug_vifs'
op|'('
name|'instance'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instance_volume_block_device_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'fake-bdm'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'resume_state_on_host_boot'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
string|"'fake-bdm'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_set_instance_error_state'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_init_instance'
op|'('
string|"'fake-context'"
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instances_on_driver
dedent|''
name|'def'
name|'test_get_instances_on_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'driver_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'dict'
op|'('
name|'uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'driver_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'list_instance_uuids'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'inst'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'driver_instances'
op|']'
op|')'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
name|'len'
op|'('
name|'driver_instances'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'driver_instances'
op|'['
name|'x'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'driver_instances'
op|'['
name|'x'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'driver_instances'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instances_on_driver_fallback
dedent|''
name|'def'
name|'test_get_instances_on_driver_fallback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Test getting instances when driver doesn't support"
nl|'\n'
comment|"# 'list_instance_uuids'"
nl|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'all_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'driver_instances'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'10'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'dict'
op|'('
name|'name'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'x'
op|'%'
number|'2'
op|':'
newline|'\n'
indent|'                '
name|'driver_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'all_instances'
op|'.'
name|'append'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'list_instance_uuids'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'list_instances'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|','
nl|'\n'
string|"'instance_get_all'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'list_instance_uuids'
op|'('
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NotImplementedError'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'list_instances'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'inst'
op|'['
string|"'name'"
op|']'
name|'for'
name|'inst'
name|'in'
name|'driver_instances'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'conductor_api'
op|'.'
name|'instance_get_all'
op|'('
nl|'\n'
name|'fake_context'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'all_instances'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_get_instances_on_driver'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'driver_instances'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_updated_target
dedent|''
name|'def'
name|'test_rebuild_on_host_updated_target'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario updates host."""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'someotherhost'"
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'inst_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|function|set_shared_storage
name|'def'
name|'set_shared_storage'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'set_shared_storage'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'c'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure instance is updated with destination hostname.'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'inst_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
name|'dest'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_with_wrong_shared_storage
dedent|''
name|'def'
name|'test_rebuild_with_wrong_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario updates host."""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'srchost'"
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
name|'inst_id'
op|'='
name|'inst_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|function|set_shared_storage
name|'def'
name|'set_shared_storage'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'set_shared_storage'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|','
name|'c'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure instance was not updated with destination hostname.'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'c'
op|','
name|'inst_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'host'"
op|']'
op|','
string|"'srchost'"
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_with_volumes
dedent|''
name|'def'
name|'test_rebuild_on_host_with_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario reconnects volumes."""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
nl|'\n'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'inst_id'
op|'='
name|'inst_ref'
op|'['
string|'"id"'
op|']'
newline|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'fake'"
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'admin'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'admin'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|function|set_shared_storage
name|'def'
name|'set_shared_storage'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'set_shared_storage'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"get"'
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stub out and record whether it gets detached'
nl|'\n'
name|'result'
op|'='
op|'{'
string|'"detached"'
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_detach
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|'"detached"'
op|']'
op|'='
name|'volume'
op|'['
string|'"id"'
op|']'
op|'=='
name|'volume_id'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"detach"'
op|','
name|'fake_detach'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_terminate_connection
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"terminate_connection"'
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
nl|'\n'
comment|'# make sure volumes attach, detach are called'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|','
string|"'detach'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'volume_api'
op|'.'
name|'detach'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'admin'
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_setup_block_device_mapping'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_setup_block_device_mapping'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'admin'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'admin'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'for'
name|'bdms'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'admin'
op|','
name|'inst_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'admin'
op|','
name|'bdms'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'admin'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_with_shared_storage
dedent|''
name|'def'
name|'test_rebuild_on_host_with_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario on shared storage."""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
nl|'\n'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
DECL|function|set_shared_storage
name|'def'
name|'set_shared_storage'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'set_shared_storage'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'c'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'c'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_without_shared_storage
dedent|''
name|'def'
name|'test_rebuild_on_host_without_shared_storage'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Confirm evacuate scenario without shared storage\n        (rebuild from image)"""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
nl|'\n'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'inst_uuid'
op|'='
name|'inst_ref'
op|'['
string|'"uuid"'
op|']'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'fake_image'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|set_shared_storage
name|'def'
name|'set_shared_storage'
op|'('
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|"'instance_on_disk'"
op|','
nl|'\n'
name|'set_shared_storage'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|'.'
name|'spawn'
op|'('
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'c'
op|')'
op|','
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'inst_ref'
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IsA'
op|'('
name|'fake_image'
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# start test'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|'('
name|'c'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
string|"'newpass'"
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
name|'bdms'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_on_host_instance_exists
dedent|''
name|'def'
name|'test_rebuild_on_host_instance_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Rebuild if instance exists raise an exception."""'
newline|'\n'
nl|'\n'
comment|'# creating testdata'
nl|'\n'
name|'c'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'inst_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
string|"'fake_host_2'"
op|'}'
op|')'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'dest'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBUILDING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'Invalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'rebuild_instance'
op|','
name|'c'
op|','
name|'instance'
op|'='
name|'inst_ref'
op|','
nl|'\n'
name|'injected_files'
op|'='
name|'None'
op|','
name|'image_ref'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_image_ref'
op|'='
name|'None'
op|','
name|'new_pass'
op|'='
name|'None'
op|','
nl|'\n'
name|'orig_sys_metadata'
op|'='
name|'None'
op|','
nl|'\n'
name|'recreate'
op|'='
name|'True'
op|','
name|'on_shared_storage'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# cleanup'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPITestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAPITestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_get_nw_info
indent|'        '
name|'def'
name|'fake_get_nw_info'
op|'('
name|'cls'
op|','
name|'ctxt'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'ctxt'
op|'.'
name|'is_admin'
op|')'
newline|'\n'
name|'return'
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|','
number|'1'
op|','
nl|'\n'
name|'spectacular'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'super'
op|'('
name|'ComputeAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'network_api'
op|'.'
name|'API'
op|','
string|"'get_instance_nw_info'"
op|','
nl|'\n'
name|'fake_get_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'='
name|'compute_api'
op|'.'
name|'SecurityGroupAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
nl|'\n'
name|'security_group_api'
op|'='
name|'self'
op|'.'
name|'security_group_api'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'active'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'obj'
op|','
name|'context'
op|','
name|'image_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'image_id'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'self'
op|'.'
name|'fake_image'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fake_show'
op|'='
name|'fake_show'
newline|'\n'
nl|'\n'
DECL|member|_run_instance
dedent|''
name|'def'
name|'_run_instance'
op|'('
name|'self'
op|','
name|'params'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'return'
name|'instance'
op|','
name|'instance_uuid'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_ram
dedent|''
name|'def'
name|'test_create_with_too_little_ram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too little memory.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeMemoryTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type memory and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_too_little_disk
dedent|''
name|'def'
name|'test_create_with_too_little_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too little disk space.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeDiskTooSmall'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now increase the inst_type disk space and make sure all is fine.'
nl|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_just_enough_ram_and_disk
dedent|''
name|'def'
name|'test_create_just_enough_ram_and_disk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with just enough ram and disk space.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'2'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'name'"
op|']'
op|'='
string|"'fake_name'"
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_no_ram_and_disk_reqs
dedent|''
name|'def'
name|'test_create_with_no_ram_and_disk_reqs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with no min_ram or min_disk.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
name|'inst_type'
op|'['
string|"'root_gb'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'inst_type'
op|'['
string|"'memory_mb'"
op|']'
op|'='
number|'1'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_defaults_display_name
dedent|''
name|'def'
name|'test_create_instance_defaults_display_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that an instance cannot be created without a display_name.'
nl|'\n'
indent|'        '
name|'cases'
op|'='
op|'['
name|'dict'
op|'('
op|')'
op|','
name|'dict'
op|'('
name|'display_name'
op|'='
name|'None'
op|')'
op|']'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
string|"'fake-image-uuid'"
op|','
op|'**'
name|'instance'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'display_name'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_sets_system_metadata
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_create_instance_sets_system_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure image properties are copied into system metadata.'
nl|'\n'
indent|'        '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
string|"'fake-image-uuid'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'image_props'
op|'='
op|'{'
string|"'image_kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'meow'"
op|','
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'image_props'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'key'
name|'in'
name|'sys_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'value'
op|','
name|'sys_metadata'
op|'['
name|'key'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_associates_security_groups
dedent|''
dedent|''
name|'def'
name|'test_create_instance_associates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure create associates security groups.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'db'
op|'.'
name|'security_group_get_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'['
string|"'instances'"
op|']'
op|')'
op|'=='
number|'1'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_invalid_security_group_raises
dedent|''
dedent|''
name|'def'
name|'test_create_instance_with_invalid_security_group_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'pre_build_len'
op|'='
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'SecurityGroupNotFoundForProject'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_type'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'this_is_a_fake_sec_group'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'pre_build_len'
op|','
nl|'\n'
name|'len'
op|'('
name|'db'
op|'.'
name|'instance_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_large_user_data
dedent|''
name|'def'
name|'test_create_with_large_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with too much user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceUserDataTooLarge'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
name|'user_data'
op|'='
op|'('
string|"'1'"
op|'*'
number|'65536'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_malformed_user_data
dedent|''
name|'def'
name|'test_create_with_malformed_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with malformed user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceUserDataMalformed'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
name|'user_data'
op|'='
string|"'banana'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_with_base64_user_data
dedent|''
name|'def'
name|'test_create_with_base64_user_data'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test an instance type with ok much user data.'
nl|'\n'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'2'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(mikal): a string of length 48510 encodes to 65532 characters of'
nl|'\n'
comment|'# base64'
nl|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'user_data'
op|'='
name|'base64'
op|'.'
name|'encodestring'
op|'('
string|"'1'"
op|'*'
number|'48510'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_default_hostname_generator
dedent|''
name|'def'
name|'test_default_hostname_generator'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_uuids'
op|'='
op|'['
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
name|'for'
name|'x'
name|'in'
name|'xrange'
op|'('
number|'4'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'orig_populate'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_populate_instance_for_create'
newline|'\n'
nl|'\n'
DECL|function|_fake_populate
name|'def'
name|'_fake_populate'
op|'('
name|'base_options'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'base_options'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'fake_uuids'
op|'.'
name|'pop'
op|'('
number|'0'
op|')'
newline|'\n'
name|'return'
name|'orig_populate'
op|'('
name|'base_options'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
nl|'\n'
string|"'_populate_instance_for_create'"
op|','
nl|'\n'
name|'_fake_populate'
op|')'
newline|'\n'
nl|'\n'
name|'cases'
op|'='
op|'['
op|'('
name|'None'
op|','
string|"'server-%s'"
op|'%'
name|'fake_uuids'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
op|'('
string|"'Hello, Server!'"
op|','
string|"'hello-server'"
op|')'
op|','
nl|'\n'
op|'('
string|"'<}\\x1fh\\x10e\\x08l\\x02l\\x05o\\x12!{>'"
op|','
string|"'hello'"
op|')'
op|','
nl|'\n'
op|'('
string|"'hello_server'"
op|','
string|"'hello-server'"
op|')'
op|']'
newline|'\n'
name|'for'
name|'display_name'
op|','
name|'hostname'
name|'in'
name|'cases'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
name|'display_name'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|','
name|'hostname'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'                '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_instance_disassociates_security_groups
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_destroy_instance_disassociates_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure destroying disassociates security groups.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'['
string|"'instances'"
op|']'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_destroy_security_group_disassociates_instances
dedent|''
dedent|''
name|'def'
name|'test_destroy_security_group_disassociates_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure destroying security groups disassociates instances.'
nl|'\n'
indent|'        '
name|'group'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'ref'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'image_href'
op|'='
name|'None'
op|','
nl|'\n'
name|'security_group'
op|'='
op|'['
string|"'testgroup'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'security_group_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'admin_deleted_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
nl|'\n'
name|'read_deleted'
op|'='
string|'"only"'
op|')'
newline|'\n'
name|'group'
op|'='
name|'db'
op|'.'
name|'security_group_get'
op|'('
name|'admin_deleted_context'
op|','
name|'group'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'len'
op|'('
name|'group'
op|'['
string|"'instances'"
op|']'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'ref'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start
dedent|''
dedent|''
name|'def'
name|'test_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'stop_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_stop
dedent|''
name|'def'
name|'test_stop'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'stop'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'POWERING_OFF'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_start_shutdown
dedent|''
name|'def'
name|'test_start_shutdown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|check_state
indent|'        '
name|'def'
name|'check_state'
op|'('
name|'instance_uuid'
op|','
name|'power_state_'
op|','
name|'vm_state_'
op|','
name|'task_state_'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'power_state'"
op|']'
op|','
name|'power_state_'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_state_'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_state_'
op|')'
newline|'\n'
nl|'\n'
DECL|function|start_check_state
dedent|''
name|'def'
name|'start_check_state'
op|'('
name|'instance_uuid'
op|','
nl|'\n'
name|'power_state_'
op|','
name|'vm_state_'
op|','
name|'task_state_'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'check_state'
op|'('
name|'instance_uuid'
op|','
name|'power_state_'
op|','
name|'vm_state_'
op|','
name|'task_state_'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'check_state'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(yamahata): emulate compute.manager._sync_power_state() that'
nl|'\n'
comment|'# the instance is shutdown by itself'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'STOPPED'
op|'}'
op|')'
newline|'\n'
name|'check_state'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'start_check_state'
op|'('
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'power_state'
op|'.'
name|'NOSTATE'
op|','
nl|'\n'
name|'vm_states'
op|'.'
name|'STOPPED'
op|','
name|'task_states'
op|'.'
name|'POWERING_ON'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete
dedent|''
name|'def'
name|'test_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_in_resized
dedent|''
name|'def'
name|'test_delete_in_resized'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|'='
name|'vm_states'
op|'.'
name|'RESIZED'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_with_down_host
dedent|''
name|'def'
name|'test_delete_with_down_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network_api_called'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|dummy
name|'def'
name|'dummy'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network_api_called'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
string|"'deallocate_for_instance'"
op|','
nl|'\n'
name|'dummy'
op|')'
newline|'\n'
nl|'\n'
comment|'#use old time to disable machine'
nl|'\n'
name|'old_time'
op|'='
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2012'
op|','
number|'4'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'set_time_override'
op|'('
name|'old_time'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'timeutils'
op|'.'
name|'clear_time_override'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'network_api_called'
op|')'
newline|'\n'
nl|'\n'
comment|'# fetch the instance state from db and verify deletion.'
nl|'\n'
name|'deleted_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
nl|'\n'
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'deleted_context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'DELETED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance'
op|'['
string|"'deleted'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_repeated_delete_quota
dedent|''
name|'def'
name|'test_repeated_delete_quota'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_use'
op|'='
op|'{'
string|"'instances'"
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve
name|'def'
name|'fake_reserve'
op|'('
name|'context'
op|','
name|'expire'
op|'='
name|'None'
op|','
name|'project_id'
op|'='
name|'None'
op|','
op|'**'
name|'deltas'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'deltas'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'QUOTAS'
op|','
string|"'reserve'"
op|','
name|'fake_reserve'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_commit
name|'def'
name|'fake_commit'
op|'('
name|'context'
op|','
name|'deltas'
op|','
name|'project_id'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'deltas'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'in_use'
op|'['
name|'k'
op|']'
op|'='
name|'in_use'
op|'.'
name|'get'
op|'('
name|'k'
op|','
number|'0'
op|')'
op|'+'
name|'v'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'QUOTAS'
op|','
string|"'commit'"
op|','
name|'fake_commit'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'in_use'
op|'['
string|"'instances'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_fast_if_host_not_set
dedent|''
name|'def'
name|'test_delete_fast_if_host_not_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|','
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_handles_host_setting_race_condition
dedent|''
name|'def'
name|'test_delete_handles_host_setting_race_condition'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|'='
name|'None'
comment|'# make it think host was never set'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_fail
dedent|''
name|'def'
name|'test_delete_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'disable_terminate'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_soft
dedent|''
name|'def'
name|'test_delete_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'commit'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_soft_fail
dedent|''
name|'def'
name|'test_delete_soft_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'disable_terminate'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_soft_rollback
dedent|''
name|'def'
name|'test_delete_soft_rollback'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'rollback'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'rollback'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fail
name|'def'
name|'fail'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'compute_rpcapi'
op|','
string|"'soft_delete_instance'"
op|','
nl|'\n'
name|'fail'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_delete
dedent|''
name|'def'
name|'test_force_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be deleted after a soft delete.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
newline|'\n'
nl|'\n'
comment|'# set the state that the instance gets when soft_delete finishes'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'force_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'DELETING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_suspend
dedent|''
name|'def'
name|'test_suspend'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be suspended.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'suspend'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SUSPENDING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resume
dedent|''
name|'def'
name|'test_resume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be resumed (if suspended).'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESUMING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_pause
dedent|''
name|'def'
name|'test_pause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be paused.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'pause'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'PAUSING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unpause
dedent|''
name|'def'
name|'test_unpause'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be unpaused.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'PAUSING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'pause_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# set the state that the instance gets when pause finishes'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'PAUSED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unpause'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UNPAUSING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_restore
dedent|''
name|'def'
name|'test_restore'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be restored from a soft delete.'
nl|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
name|'params'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'soft_delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'SOFT_DELETING'
op|')'
newline|'\n'
nl|'\n'
comment|'# set the state that the instance gets when soft_delete finishes'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'SOFT_DELETED'
op|','
nl|'\n'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure quotas are committed'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'commit'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|"'CellsComputeAPITestCase'"
op|':'
newline|'\n'
comment|'# Called a 2nd time (for the child cell) when testing cells'
nl|'\n'
indent|'            '
name|'nova'
op|'.'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'commit'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'restore'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESTORING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild
dedent|''
name|'def'
name|'test_rebuild'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# Set some image metadata that should get wiped out and reset'
nl|'\n'
comment|'# as well as some other metadata that should be preserved.'
nl|'\n'
name|'db'
op|'.'
name|'instance_system_metadata_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
string|"'image_kernel_id'"
op|':'
string|"'old-data'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'old_data'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'old-data'"
op|','
nl|'\n'
string|"'image_should_remove'"
op|':'
string|"'bye-bye'"
op|','
nl|'\n'
string|"'preserved'"
op|':'
string|"'preserve this!'"
op|'}'
op|','
nl|'\n'
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure Compute API updates the image_ref before casting to'
nl|'\n'
comment|'# compute manager.'
nl|'\n'
name|'orig_update'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update'
newline|'\n'
name|'info'
op|'='
op|'{'
string|"'image_ref'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|update_wrapper
name|'def'
name|'update_wrapper'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'image_ref'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'                '
name|'info'
op|'['
string|"'image_ref'"
op|']'
op|'='
name|'kwargs'
op|'['
string|"'image_ref'"
op|']'
newline|'\n'
dedent|''
name|'return'
name|'orig_update'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|','
string|"'update'"
op|','
name|'update_wrapper'
op|')'
newline|'\n'
nl|'\n'
name|'image_ref'
op|'='
name|'instance'
op|'['
string|'"image_ref"'
op|']'
op|'+'
string|"'-new_image_ref'"
newline|'\n'
name|'password'
op|'='
string|'"new_password"'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'image_ref'
op|','
name|'password'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'info'
op|'['
string|"'image_ref'"
op|']'
op|','
name|'image_ref'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
name|'sys_metadata'
op|'='
name|'db'
op|'.'
name|'instance_system_metadata_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sys_metadata'
op|','
nl|'\n'
op|'{'
string|"'image_kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'image_ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'image_something_else'"
op|':'
string|"'meow'"
op|','
nl|'\n'
string|"'preserved'"
op|':'
string|"'preserve this!'"
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rebuild_no_image
dedent|''
name|'def'
name|'test_rebuild_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'image_ref'"
op|':'
string|"''"
op|'}'
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"''"
op|','
string|"'new_password'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBUILDING'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stub_out_reboot
dedent|''
name|'def'
name|'_stub_out_reboot'
op|'('
name|'self'
op|','
name|'device_name'
op|')'
op|':'
newline|'\n'
DECL|function|fake_reboot_instance
indent|'        '
name|'def'
name|'fake_reboot_instance'
op|'('
name|'rpcapi'
op|','
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_device_info'
op|','
nl|'\n'
name|'reboot_type'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'block_device_info'
op|'['
string|"'block_device_mapping'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'mount_device'"
op|']'
op|','
nl|'\n'
name|'device_name'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'reboot_instance'"
op|','
nl|'\n'
name|'fake_reboot_instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'virt'
op|'.'
name|'fake'
op|'.'
name|'FakeDriver'
op|','
string|"'legacy_nwinfo'"
op|','
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_soft
dedent|''
name|'def'
name|'test_reboot_soft'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be soft rebooted.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'fake'"
newline|'\n'
name|'device_name'
op|'='
string|"'/dev/vdc'"
newline|'\n'
name|'volume'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"foo": "bar"}\''
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"SOFT"'
newline|'\n'
name|'self'
op|'.'
name|'_stub_out_reboot'
op|'('
name|'device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBOOTING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reboot_hard
dedent|''
name|'def'
name|'test_reboot_hard'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be hard rebooted.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'fake'"
newline|'\n'
name|'device_name'
op|'='
string|"'/dev/vdc'"
newline|'\n'
name|'volume'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
name|'device_name'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'connection_info'"
op|':'
string|'\'{"foo": "bar"}\''
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'volume'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"HARD"'
newline|'\n'
name|'self'
op|'.'
name|'_stub_out_reboot'
op|'('
name|'device_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hard_reboot_of_soft_rebooting_instance
dedent|''
name|'def'
name|'test_hard_reboot_of_soft_rebooting_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be hard rebooted while soft rebooting.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'reboot_type'
op|'='
string|'"HARD"'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|','
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'REBOOTING_HARD'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_soft_reboot_of_rebooting_instance
dedent|''
name|'def'
name|'test_soft_reboot_of_rebooting_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Ensure instance can't be soft rebooted while rebooting."
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|'"task_state"'
op|':'
name|'task_states'
op|'.'
name|'REBOOTING'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'reboot_type'
op|'='
string|'"SOFT"'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reboot'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_ref'
op|','
nl|'\n'
name|'reboot_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_hostname_create
dedent|''
name|'def'
name|'test_hostname_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance hostname is set during creation.'
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
op|'('
name|'instances'
op|','
name|'_'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'inst_type'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'display_name'
op|'='
string|"'test host'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'test-host'"
op|','
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'hostname'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_set_admin_password
dedent|''
name|'def'
name|'test_set_admin_password'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can have its admin password set.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_method
name|'def'
name|'fake_rpc_method'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'do_cast'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'fake_rpc_method'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'set_admin_password'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'inst_ref'
op|')'
newline|'\n'
nl|'\n'
name|'inst_ref'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'inst_ref'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'UPDATING_PASSWORD'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'inst_ref'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rescue_unrescue
dedent|''
name|'def'
name|'test_rescue_unrescue'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rescue'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'ACTIVE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESCUED'
op|','
string|"'task_state'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|','
name|'params'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unrescue'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'RESCUED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'UNRESCUING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot
dedent|''
name|'def'
name|'test_snapshot'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure a snapshot of an instance can be created.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_given_image_uuid
dedent|''
name|'def'
name|'test_snapshot_given_image_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure a snapshot of an instance can be created when image UUID\n        is already known.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'name'
op|'='
string|"'snap1'"
newline|'\n'
name|'extra_properties'
op|'='
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
newline|'\n'
name|'recv_meta'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
nl|'\n'
name|'extra_properties'
op|')'
newline|'\n'
name|'image_id'
op|'='
name|'recv_meta'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'recv_meta'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'name'
op|','
nl|'\n'
name|'extra_properties'
op|','
nl|'\n'
name|'image_id'
op|'='
name|'image_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|','
name|'recv_meta'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_minram_mindisk_VHD
dedent|''
name|'def'
name|'test_snapshot_minram_mindisk_VHD'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure a snapshots min_ram and min_disk are correct.\n\n        A snapshot of a non-shrinkable VHD should have min_ram\n        and min_disk set to that of the original instances flavor.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'.'
name|'update'
op|'('
name|'disk_format'
op|'='
string|"'vhd'"
op|','
nl|'\n'
name|'min_ram'
op|'='
number|'1'
op|','
name|'min_disk'
op|'='
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'type_name'
op|'='
string|"'m1.small'"
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
name|'instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'min_ram'"
op|']'
op|','
name|'instance_type'
op|'['
string|"'memory_mb'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'min_disk'"
op|']'
op|','
name|'instance_type'
op|'['
string|"'root_gb'"
op|']'
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_minram_mindisk
dedent|''
name|'def'
name|'test_snapshot_minram_mindisk'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure a snapshots min_ram and min_disk are correct.\n\n        A snapshot of an instance should have min_ram and min_disk\n        set to that of the instances original image unless that\n        image had a disk format of vhd.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'disk_format'"
op|']'
op|'='
string|"'raw'"
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_ram'"
op|']'
op|'='
number|'512'
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'min_ram'"
op|']'
op|','
number|'512'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'min_disk'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_minram_mindisk_img_missing_minram
dedent|''
name|'def'
name|'test_snapshot_minram_mindisk_img_missing_minram'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure a snapshots min_ram and min_disk are correct.\n\n        Do not show an attribute that the orig img did not have.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'disk_format'"
op|']'
op|'='
string|"'raw'"
newline|'\n'
name|'self'
op|'.'
name|'fake_image'
op|'['
string|"'min_disk'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'self'
op|'.'
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'min_ram'"
name|'in'
name|'image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'min_disk'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_minram_mindisk_no_image
dedent|''
name|'def'
name|'test_snapshot_minram_mindisk_no_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure a snapshots min_ram and min_disk are correct.\n\n        A snapshots min_ram and min_disk should be set to default if\n        an instances original image cannot be found.\n        """'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'ImageNotFound'
op|'('
name|'image_id'
op|'='
string|'"fake"'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'not'
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'__name__'
op|'=='
string|'"CellsComputeAPITestCase"'
op|':'
newline|'\n'
comment|'# Cells tests will call this a 2nd time in child cell with'
nl|'\n'
comment|'# the newly created image_id, and we want that one to succeed.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'snap1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# min_ram and min_disk are not returned when set to default'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'min_ram'"
name|'in'
name|'image'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'min_disk'"
name|'in'
name|'image'
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'backup_type'"
name|'not'
name|'in'
name|'properties'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'snapshot'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_image_metadata_inheritance
dedent|''
name|'def'
name|'test_snapshot_image_metadata_inheritance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure image snapshots inherit metadata from the base image'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'non_inheritable_image_properties'
op|'='
op|'['
string|"'spam'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_instance_system_metadata_get
name|'def'
name|'fake_instance_system_metadata_get'
op|'('
name|'context'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'image_a'
op|'='
number|'1'
op|','
name|'image_b'
op|'='
number|'2'
op|','
name|'image_c'
op|'='
string|"'c'"
op|','
name|'d'
op|'='
string|"'d'"
op|','
name|'spam'
op|'='
string|"'spam'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_system_metadata_get'"
op|','
nl|'\n'
name|'fake_instance_system_metadata_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'snap1'"
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'a'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'b'"
op|']'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'c'"
op|']'
op|','
string|"'c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'d'"
op|']'
op|','
string|"'d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
string|"'spam'"
name|'in'
name|'properties'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_backup
dedent|''
name|'def'
name|'test_backup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Can't backup an instance which is already being backed up."
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'backup'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|"'backup1'"
op|','
string|"'DAILY'"
op|','
name|'None'
op|','
nl|'\n'
op|'{'
string|"'extra_param'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'image'
op|'['
string|"'name'"
op|']'
op|','
string|"'backup1'"
op|')'
newline|'\n'
name|'properties'
op|'='
name|'image'
op|'['
string|"'properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'backup_type'"
op|']'
op|','
string|"'DAILY'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'image_type'"
op|']'
op|','
string|"'backup'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'properties'
op|'['
string|"'extra_param'"
op|']'
op|','
string|"'value1'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_backup_conflict
dedent|''
name|'def'
name|'test_backup_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Can't backup an instance which is already being backed up."
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_values'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'IMAGE_BACKUP'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_values'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'backup'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_snapshot_conflict
dedent|''
name|'def'
name|'test_snapshot_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Can't snapshot an instance which is already being snapshotted."
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance_values'
op|'='
op|'{'
string|"'task_state'"
op|':'
name|'task_states'
op|'.'
name|'IMAGE_SNAPSHOT'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance_values'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'snapshot'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_confirm_through_api
dedent|''
name|'def'
name|'test_resize_confirm_through_api'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a fake migration record (manager does this)'
nl|'\n'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
comment|'# set the state that the instance gets when resize finishes'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'confirm_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_revert_through_api
dedent|''
name|'def'
name|'test_resize_revert_through_api'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
comment|'# create a fake migration record (manager does this)'
nl|'\n'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
comment|'# set the state that the instance gets when resize finishes'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'revert_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'vm_state'"
op|']'
op|','
name|'vm_states'
op|'.'
name|'RESIZED'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'RESIZE_REVERTING'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_invalid_flavor_fails
dedent|''
name|'def'
name|'test_resize_invalid_flavor_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure invalid flavors raise.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_deleted_flavor_fails
dedent|''
name|'def'
name|'test_resize_deleted_flavor_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'name'
op|'='
string|"'test_resize_new_flavor'"
newline|'\n'
name|'flavorid'
op|'='
number|'11'
newline|'\n'
name|'memory_mb'
op|'='
number|'128'
newline|'\n'
name|'root_gb'
op|'='
number|'0'
newline|'\n'
name|'vcpus'
op|'='
number|'1'
newline|'\n'
name|'instance_types'
op|'.'
name|'create'
op|'('
name|'name'
op|','
name|'memory_mb'
op|','
name|'vcpus'
op|','
name|'root_gb'
op|','
number|'0'
op|','
nl|'\n'
name|'flavorid'
op|','
number|'0'
op|','
number|'1.0'
op|','
name|'True'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'destroy'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_same_flavor_fails
dedent|''
name|'def'
name|'test_resize_same_flavor_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure invalid flavors raise.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CannotResizeToSameFlavor'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_quota_exceeds_fails
dedent|''
name|'def'
name|'test_resize_quota_exceeds_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'name'
op|'='
string|"'test_resize_with_big_mem'"
newline|'\n'
name|'flavorid'
op|'='
number|'11'
newline|'\n'
name|'memory_mb'
op|'='
number|'102400'
newline|'\n'
name|'root_gb'
op|'='
number|'0'
newline|'\n'
name|'vcpus'
op|'='
number|'1'
newline|'\n'
name|'instance_types'
op|'.'
name|'create'
op|'('
name|'name'
op|','
name|'memory_mb'
op|','
name|'vcpus'
op|','
name|'root_gb'
op|','
number|'0'
op|','
nl|'\n'
name|'flavorid'
op|','
number|'0'
op|','
number|'1.0'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'TooManyInstances'
op|','
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'flavorid'
op|')'
newline|'\n'
nl|'\n'
name|'instance_types'
op|'.'
name|'destroy'
op|'('
name|'name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_revert_deleted_flavor_fails
dedent|''
name|'def'
name|'test_resize_revert_deleted_flavor_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'orig_name'
op|'='
string|"'test_resize_revert_orig_flavor'"
newline|'\n'
name|'orig_flavorid'
op|'='
number|'11'
newline|'\n'
name|'memory_mb'
op|'='
number|'128'
newline|'\n'
name|'root_gb'
op|'='
number|'0'
newline|'\n'
name|'vcpus'
op|'='
number|'1'
newline|'\n'
name|'instance_types'
op|'.'
name|'create'
op|'('
name|'orig_name'
op|','
name|'memory_mb'
op|','
name|'vcpus'
op|','
name|'root_gb'
op|','
number|'0'
op|','
nl|'\n'
name|'orig_flavorid'
op|','
number|'0'
op|','
number|'1.0'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'type_name'
op|'='
name|'orig_name'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'old_instance_type_id'
op|'='
name|'instance'
op|'['
string|"'instance_type_id'"
op|']'
newline|'\n'
name|'new_flavor'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'new_flavorid'
op|'='
name|'new_flavor'
op|'['
string|"'flavorid'"
op|']'
newline|'\n'
name|'new_instance_type_id'
op|'='
name|'new_flavor'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'new_flavorid'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'old_instance_type_id'"
op|':'
name|'old_instance_type_id'
op|','
nl|'\n'
string|"'new_instance_type_id'"
op|':'
name|'new_instance_type_id'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'finished'"
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'task_state'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'RESIZED'
op|'}'
op|')'
newline|'\n'
name|'instance_types'
op|'.'
name|'destroy'
op|'('
name|'orig_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'revert_resize'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate
dedent|''
name|'def'
name|'test_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|'# Migrate simply calls resize() without a flavor_id.'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_request_spec
dedent|''
name|'def'
name|'test_resize_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_cast
indent|'        '
name|'def'
name|'_fake_cast'
op|'('
name|'_context'
op|','
name|'_topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
name|'msg'
op|'['
string|"'args'"
op|']'
op|'['
string|"'request_spec'"
op|']'
newline|'\n'
name|'filter_properties'
op|'='
name|'msg'
op|'['
string|"'args'"
op|']'
op|'['
string|"'filter_properties'"
op|']'
newline|'\n'
name|'instance_properties'
op|'='
name|'request_spec'
op|'['
string|"'instance_properties'"
op|']'
newline|'\n'
comment|'# resize with flavor_id = None will still send instance_type'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'instance_type'"
op|']'
op|','
nl|'\n'
name|'orig_instance_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'request_spec'
op|'['
string|"'instance_uuids'"
op|']'
op|','
nl|'\n'
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'host'"
op|']'
op|','
string|"'host2'"
op|')'
newline|'\n'
comment|'# Ensure the instance passed to us has been updated with'
nl|'\n'
comment|'# progress set to 0 and task_state set to RESIZE_PREP.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'progress'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'host2'"
op|','
name|'filter_properties'
op|'['
string|"'ignore_hosts'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|','
name|'_fake_cast'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'extra_specs'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'orig_instance_type'
op|'='
name|'instance'
op|'['
string|"'instance_type'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|"# We need to set the host to something 'known'.  Unfortunately,"
nl|'\n'
comment|'# the compute manager is using a cached copy of CONF.host,'
nl|'\n'
comment|"# so we can't just self.flags(host='host2') before calling"
nl|'\n'
comment|'# run_instance above.  Also, set progress to 10 so we ensure'
nl|'\n'
comment|'# it is reset to 0 in compute_api.resize().  (verified in'
nl|'\n'
comment|'# _fake_cast above).'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|','
name|'progress'
op|'='
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# different host'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'host'
op|'='
string|"'host3'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_resize_request_spec_noavoid
dedent|''
dedent|''
name|'def'
name|'test_resize_request_spec_noavoid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_cast
indent|'        '
name|'def'
name|'_fake_cast'
op|'('
name|'_context'
op|','
name|'topic'
op|','
name|'msg'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'request_spec'
op|'='
name|'msg'
op|'['
string|"'args'"
op|']'
op|'['
string|"'request_spec'"
op|']'
newline|'\n'
name|'filter_properties'
op|'='
name|'msg'
op|'['
string|"'args'"
op|']'
op|'['
string|"'filter_properties'"
op|']'
newline|'\n'
name|'instance_properties'
op|'='
name|'request_spec'
op|'['
string|"'instance_properties'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'host'"
op|']'
op|','
string|"'host2'"
op|')'
newline|'\n'
comment|'# Ensure the instance passed to us has been updated with'
nl|'\n'
comment|'# progress set to 0 and task_state set to RESIZE_PREP.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'task_state'"
op|']'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance_properties'
op|'['
string|"'progress'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'host2'"
op|','
name|'filter_properties'
op|'['
string|"'ignore_hosts'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|','
name|'_fake_cast'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'allow_resize_to_same_host'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
comment|"# We need to set the host to something 'known'.  Unfortunately,"
nl|'\n'
comment|'# the compute manager is using a cached copy of CONF.host,'
nl|'\n'
comment|"# so we can't just self.flags(host='host2') before calling"
nl|'\n'
comment|'# run_instance above.  Also, set progress to 10 so we ensure'
nl|'\n'
comment|'# it is reset to 0 in compute_api.resize().  (verified in'
nl|'\n'
comment|'# _fake_cast above).'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'dict'
op|'('
name|'host'
op|'='
string|"'host2'"
op|','
name|'progress'
op|'='
number|'10'
op|')'
op|')'
newline|'\n'
comment|'# different host'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get
dedent|''
dedent|''
name|'def'
name|'test_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance.'
nl|'\n'
indent|'        '
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'exp_instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'name'"
op|']'
op|'='
name|'exp_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_db_get
name|'def'
name|'fake_db_get'
op|'('
name|'_context'
op|','
name|'_instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'exp_instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|','
name|'fake_db_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'exp_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_with_admin_context
dedent|''
name|'def'
name|'test_get_with_admin_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'exp_instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'name'"
op|']'
op|'='
name|'exp_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_db_get
name|'def'
name|'fake_db_get'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'exp_instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|','
name|'fake_db_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'c'
op|','
name|'exp_instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_with_integer_id
dedent|''
name|'def'
name|'test_get_with_integer_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance with an integer id.'
nl|'\n'
indent|'        '
name|'exp_instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'exp_instance'
op|'.'
name|'iteritems'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'['
string|"'name'"
op|']'
op|'='
name|'exp_instance'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_db_get
name|'def'
name|'fake_db_get'
op|'('
name|'_context'
op|','
name|'_instance_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'exp_instance'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'instance_get'"
op|','
name|'fake_db_get'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'exp_instance'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'expected'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_name_regexp
dedent|''
name|'def'
name|'test_get_all_by_name_regexp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by name (display_name).'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'display_name'"
op|':'
string|"'woot'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^woot.*'"
op|'}'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'.*oot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance1'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'^n.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'noth.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_multiple_options_at_once
dedent|''
name|'def'
name|'test_get_all_by_multiple_options_at_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching by multiple options at once.'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'network_manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'network_api'
op|','
nl|'\n'
string|"'get_instance_uuids_by_ip_filter'"
op|','
nl|'\n'
name|'network_manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|')'
newline|'\n'
nl|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woot'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000010'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'woo'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'20'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000020'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'display_name'"
op|':'
string|"'not-woot'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'30'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-000000000030'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip ends up matching 2nd octet here.. so all 3 match ip'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
string|"'name'"
op|':'
string|"'not.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|"# ip ends up matching any ip with a '1' in the last octet.."
nl|'\n'
comment|'# so instance 1 and 3.. but name should only match #1'
nl|'\n'
comment|"# but 'name' only matches one"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1$'"
op|','
string|"'name'"
op|':'
string|"'^woo.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# same as above but no match on name (name matches instance1'
nl|'\n'
comment|"# but the ip query doesn't"
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.2$'"
op|','
string|"'name'"
op|':'
string|"'^woot.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# ip matches all 3... ipv6 matches #2+#3...name matches #3'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'.*\\.1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'not.*'"
op|','
nl|'\n'
string|"'ip6'"
op|':'
string|"'^.*12.*34.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_image
dedent|''
name|'def'
name|'test_get_all_by_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by image.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'image_ref'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'123'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'1234'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
string|"'4567'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'image'"
op|':'
op|'['
string|"'1234'"
op|','
string|"'4567'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_flavor
dedent|''
name|'def'
name|'test_get_all_by_flavor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by image.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'instance_type_id'"
op|':'
number|'2'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): Migrations set up the instance_types table'
nl|'\n'
comment|'# for us.  Therefore, we assume the following is true for'
nl|'\n'
comment|'# these tests:'
nl|'\n'
comment|'# instance_type_id 1 == flavor 3'
nl|'\n'
comment|'# instance_type_id 2 == flavor 1'
nl|'\n'
comment|'# instance_type_id 3 == flavor 4'
nl|'\n'
comment|'# instance_type_id 4 == flavor 5'
nl|'\n'
comment|'# instance_type_id 5 == flavor 2'
nl|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'5'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# ensure unknown filter maps to an exception'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|','
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'99'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'instance1'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
name|'search_opts'
op|'='
op|'{'
string|"'flavor'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_state
dedent|''
name|'def'
name|'test_get_all_by_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by state.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|','
nl|'\n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SUSPENDED'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
name|'power_state'
op|'.'
name|'RUNNING'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test passing a list as search arg'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'power_state'"
op|':'
op|'['
name|'power_state'
op|'.'
name|'SHUTDOWN'
op|','
nl|'\n'
name|'power_state'
op|'.'
name|'RUNNING'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_by_metadata
dedent|''
name|'def'
name|'test_get_all_by_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test searching instances by metadata.'
nl|'\n'
nl|'\n'
indent|'        '
name|'c'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance0'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance3'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance4'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# get all instances'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'5'
op|')'
newline|'\n'
nl|'\n'
comment|'# wrong key/value combination'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# non-existing keys'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key5'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# find existing instance'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'instance_uuids'
op|'='
op|'['
name|'instance'
op|'['
string|"'uuid'"
op|']'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance3'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'instance4'
op|'['
string|"'uuid'"
op|']'
name|'in'
name|'instance_uuids'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criterias as a dict'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# multiple criterias as a list'
nl|'\n'
name|'instances'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|'('
name|'c'
op|','
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'metadata'"
op|':'
op|'['
op|'{'
string|"'key4'"
op|':'
string|"'value4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'instances'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instances'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance0'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance1'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance3'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'c'
op|','
name|'instance4'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_metadata
dedent|''
name|'def'
name|'test_instance_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'meta_changes'
op|'='
op|'['
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'notify_on_any_change'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_change_instance_metadata
name|'def'
name|'fake_change_instance_metadata'
op|'('
name|'inst'
op|','
name|'ctxt'
op|','
name|'diff'
op|','
name|'instance'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'meta_changes'
op|'['
number|'0'
op|']'
op|'='
name|'diff'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'change_instance_metadata'"
op|','
nl|'\n'
name|'fake_change_instance_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'metadata'"
op|':'
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'dict'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
op|'{'
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key1'"
op|':'
string|"'value1'"
op|','
string|"'key2'"
op|':'
string|"'value2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
string|"'key2'"
op|':'
op|'['
string|"'+'"
op|','
string|"'value2'"
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'metadata'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'new_metadata'
op|'='
op|'{'
string|"'key2'"
op|':'
string|"'bah'"
op|','
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
nl|'\n'
name|'new_metadata'
op|','
name|'delete'
op|'='
name|'True'
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
name|'new_metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
nl|'\n'
string|"'key1'"
op|':'
op|'['
string|"'-'"
op|']'
op|','
nl|'\n'
string|"'key2'"
op|':'
op|'['
string|"'+'"
op|','
string|"'bah'"
op|']'
op|','
nl|'\n'
string|"'key3'"
op|':'
op|'['
string|"'+'"
op|','
string|"'value3'"
op|']'
op|','
nl|'\n'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'1'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'metadata'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
name|'metadata'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|','
string|"'key2'"
op|')'
newline|'\n'
name|'metadata'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_metadata'
op|'('
name|'_context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata'
op|','
op|'{'
string|"'key3'"
op|':'
string|"'value3'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'meta_changes'
op|','
op|'['
op|'{'
string|"'key2'"
op|':'
op|'['
string|"'-'"
op|']'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'msg'
op|'='
name|'test_notifier'
op|'.'
name|'NOTIFICATIONS'
op|'['
number|'2'
op|']'
newline|'\n'
name|'payload'
op|'='
name|'msg'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'metadata'"
name|'in'
name|'payload'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'payload'
op|'['
string|"'metadata'"
op|']'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'_context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disallow_metadata_changes_during_building
dedent|''
name|'def'
name|'test_disallow_metadata_changes_during_building'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_change_instance_metadata
indent|'        '
name|'def'
name|'fake_change_instance_metadata'
op|'('
name|'inst'
op|','
name|'ctxt'
op|','
name|'diff'
op|','
name|'instance'
op|'='
name|'None'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'change_instance_metadata'"
op|','
nl|'\n'
name|'fake_change_instance_metadata'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|'{'
string|"'vm_state'"
op|':'
name|'vm_states'
op|'.'
name|'BUILDING'
op|'}'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'dict'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete_instance_metadata'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|'"key"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'update_instance_metadata'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
string|'"key"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_faults
dedent|''
name|'def'
name|'test_get_instance_faults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Get an instances latest fault.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fault_fixture'
op|'='
op|'{'
nl|'\n'
string|"'code'"
op|':'
number|'404'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'message'"
op|':'
string|'"HTTPNotFound"'
op|','
nl|'\n'
string|"'details'"
op|':'
string|'"Stock details for test"'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'datetime'
op|'.'
name|'datetime'
op|'('
number|'2010'
op|','
number|'10'
op|','
number|'10'
op|','
number|'12'
op|','
number|'0'
op|','
number|'0'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|return_fault
name|'def'
name|'return_fault'
op|'('
name|'_ctxt'
op|','
name|'instance_uuids'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'.'
name|'fromkeys'
op|'('
name|'instance_uuids'
op|','
op|'['
name|'fault_fixture'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'instance_fault_get_by_instance_uuids'"
op|','
nl|'\n'
name|'return_fault'
op|')'
newline|'\n'
nl|'\n'
name|'_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_faults'
op|'('
name|'_context'
op|','
op|'['
name|'instance'
op|']'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|':'
op|'['
name|'fault_fixture'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'_context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_parse_db_block_device_mapping
name|'def'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attr_list'
op|'='
op|'('
string|"'delete_on_termination'"
op|','
string|"'device_name'"
op|','
string|"'no_device'"
op|','
nl|'\n'
string|"'virtual_name'"
op|','
string|"'volume_id'"
op|','
string|"'volume_size'"
op|','
string|"'snapshot_id'"
op|')'
newline|'\n'
name|'bdm'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'attr_list'
op|':'
newline|'\n'
indent|'            '
name|'val'
op|'='
name|'bdm_ref'
op|'.'
name|'get'
op|'('
name|'attr'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'val'
op|':'
newline|'\n'
indent|'                '
name|'bdm'
op|'['
name|'attr'
op|']'
op|'='
name|'val'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'bdm'
newline|'\n'
nl|'\n'
DECL|member|test_update_block_device_mapping
dedent|''
name|'def'
name|'test_update_block_device_mapping'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'swap_size'
op|'='
number|'1'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
string|"'swap'"
op|':'
name|'swap_size'
op|'}'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'mappings'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb4'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
string|"'device'"
op|':'
string|"'sdb1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device'"
op|':'
string|"'sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
string|"'device'"
op|':'
string|"'sdc2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral2'"
op|','
string|"'device'"
op|':'
string|"'sdc3'"
op|'}'
op|']'
newline|'\n'
name|'block_device_mapping'
op|'='
op|'['
nl|'\n'
comment|'# root'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'00000000-aaaa-bbbb-cccc-000000000000'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
nl|'\n'
nl|'\n'
comment|'# overwrite swap'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'11111111-aaaa-bbbb-cccc-111111111111'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'22222222-aaaa-bbbb-cccc-222222222222'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# overwrite ephemeral'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'44444444-aaaa-bbbb-cccc-444444444444'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# volume'
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'55555555-aaaa-bbbb-cccc-555555555555'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'66666666-aaaa-bbbb-cccc-666666666666'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|','
nl|'\n'
string|"'snapshot_id'"
op|':'
string|"'77777777-aaaa-bbbb-cccc-777777777777'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|','
nl|'\n'
string|"'no_device'"
op|':'
name|'True'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_update_image_block_device_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_type'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'mappings'
op|')'
newline|'\n'
nl|'\n'
name|'bdms'
op|'='
op|'['
name|'self'
op|'.'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
nl|'\n'
name|'for'
name|'bdm_ref'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
comment|'# NOTE(yamahata): ATM only ephemeral0 is supported.'
nl|'\n'
comment|"#                 they're ignored for now"
nl|'\n'
comment|"#{'virtual_name': 'ephemeral1', 'device_name': '/dev/sdc2'},"
nl|'\n'
comment|"#{'virtual_name': 'ephemeral2', 'device_name': '/dev/sdc3'}"
nl|'\n'
op|']'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'bdms'
op|','
name|'matchers'
op|'.'
name|'DictListMatches'
op|'('
name|'expected_result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_update_block_device_mapping'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'block_device_mapping'
op|')'
newline|'\n'
name|'bdms'
op|'='
op|'['
name|'self'
op|'.'
name|'_parse_db_block_device_mapping'
op|'('
name|'bdm_ref'
op|')'
nl|'\n'
name|'for'
name|'bdm_ref'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|']'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'00000000-aaaa-bbbb-cccc-000000000000'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'swap'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb1'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
name|'swap_size'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'11111111-aaaa-bbbb-cccc-111111111111'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdb2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'22222222-aaaa-bbbb-cccc-222222222222'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdb3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdb4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'33333333-aaaa-bbbb-cccc-333333333333'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'44444444-aaaa-bbbb-cccc-444444444444'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdc3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdc4'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'55555555-aaaa-bbbb-cccc-555555555555'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdd1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'66666666-aaaa-bbbb-cccc-666666666666'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdd2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'77777777-aaaa-bbbb-cccc-777777777777'"
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/sdd3'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'no_device'"
op|':'
name|'True'
op|','
string|"'device_name'"
op|':'
string|"'/dev/sdd4'"
op|'}'
op|']'
newline|'\n'
name|'bdms'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'expected_result'
op|'.'
name|'sort'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'bdms'
op|','
name|'matchers'
op|'.'
name|'DictListMatches'
op|'('
name|'expected_result'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'bdm'
name|'in'
name|'db'
op|'.'
name|'block_device_mapping_get_all_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'block_device_mapping_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'bdm'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_volume_size
dedent|''
name|'def'
name|'test_volume_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ephemeral_size'
op|'='
number|'2'
newline|'\n'
name|'swap_size'
op|'='
number|'3'
newline|'\n'
name|'inst_type'
op|'='
op|'{'
string|"'ephemeral_gb'"
op|':'
name|'ephemeral_size'
op|','
string|"'swap'"
op|':'
name|'swap_size'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'ephemeral0'"
op|')'
op|','
nl|'\n'
name|'ephemeral_size'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'ephemeral1'"
op|')'
op|','
nl|'\n'
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'_volume_size'
op|'('
name|'inst_type'
op|','
nl|'\n'
string|"'swap'"
op|')'
op|','
nl|'\n'
name|'swap_size'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_id_one_instance
dedent|''
name|'def'
name|'test_reservation_id_one_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building an instance has a reservation_id that\n        matches return value from create"""'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reservation_ids_two_instances
dedent|''
dedent|''
name|'def'
name|'test_reservation_ids_two_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify building 2 instances at once results in a\n        reservation_id being returned equal to reservation id set\n        in both instances\n        """'
newline|'\n'
op|'('
name|'refs'
op|','
name|'resv_id'
op|')'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'min_count'
op|'='
number|'2'
op|','
name|'max_count'
op|'='
number|'2'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'refs'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'resv_id'
op|','
name|'None'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'instance'
name|'in'
name|'refs'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'reservation_id'"
op|']'
op|','
name|'resv_id'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'refs'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_architecture
dedent|''
name|'def'
name|'test_instance_architecture'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test the instance architecture.'
nl|'\n'
indent|'        '
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'architecture'"
op|']'
op|','
string|"'x86_64'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_unknown_architecture
dedent|''
name|'def'
name|'test_instance_unknown_architecture'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test if the architecture is unknown.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
nl|'\n'
name|'params'
op|'='
op|'{'
string|"'architecture'"
op|':'
string|"''"
op|'}'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'instance'
op|'['
string|"'architecture'"
op|']'
op|','
string|"'Unknown'"
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_name_template
dedent|''
dedent|''
name|'def'
name|'test_instance_name_template'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test the instance_name template.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%d'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%d'"
op|'%'
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'instance-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'instance-%s'"
op|'%'
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(id)d-%(uuid)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
string|"'%d-%s'"
op|'%'
nl|'\n'
op|'('
name|'i_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# not allowed.. default is uuid'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'instance_name_template'
op|'='
string|"'%(name)s'"
op|')'
newline|'\n'
name|'i_ref'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'i_ref'
op|'['
string|"'name'"
op|']'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'i_ref'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_fixed_ip
dedent|''
name|'def'
name|'test_add_remove_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'add_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'remove_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'192.168.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_invalid
dedent|''
name|'def'
name|'test_attach_volume_invalid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidDevicePath'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'locked'"
op|':'
name|'False'
op|'}'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
string|"'/invalid'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vnc_console
dedent|''
name|'def'
name|'test_vnc_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a vnc console for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
newline|'\n'
name|'fake_console_type'
op|'='
string|'"novnc"'
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_console_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|'}'
newline|'\n'
name|'fake_connect_info2'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'fake_connect_info'
op|')'
newline|'\n'
name|'fake_connect_info2'
op|'['
string|"'access_url'"
op|']'
op|'='
string|"'fake_console_url'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
nl|'\n'
name|'rpc_msg1'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'get_vnc_console'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance'"
op|':'
name|'fake_instance'
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
newline|'\n'
name|'rpc_msg2'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'authorize_console'"
op|','
nl|'\n'
string|"'args'"
op|':'
name|'fake_connect_info'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'1.0'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute.%s'"
op|'%'
name|'fake_instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'rpc_msg1'
op|','
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_connect_info2'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'consoleauth_topic'
op|','
nl|'\n'
name|'rpc_msg2'
op|','
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_vnc_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_console_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_vnc_console_no_host
dedent|''
name|'def'
name|'test_get_vnc_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_vnc_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'novnc'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_spice_console
dedent|''
name|'def'
name|'test_spice_console'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure we can a spice console for an instance.'
nl|'\n'
nl|'\n'
indent|'        '
name|'fake_instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
newline|'\n'
name|'fake_console_type'
op|'='
string|'"spice-html5"'
newline|'\n'
name|'fake_connect_info'
op|'='
op|'{'
string|"'token'"
op|':'
string|"'fake_token'"
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_console_host'"
op|','
nl|'\n'
string|"'port'"
op|':'
string|"'fake_console_port'"
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
string|"'fake_access_path'"
op|'}'
newline|'\n'
name|'fake_connect_info2'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'fake_connect_info'
op|')'
newline|'\n'
name|'fake_connect_info2'
op|'['
string|"'access_url'"
op|']'
op|'='
string|"'fake_console_url'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
nl|'\n'
name|'rpc_msg1'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'get_spice_console'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance'"
op|':'
name|'fake_instance'
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'fake_console_type'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'2.24'"
op|'}'
newline|'\n'
name|'rpc_msg2'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'authorize_console'"
op|','
nl|'\n'
string|"'args'"
op|':'
name|'fake_connect_info'
op|','
nl|'\n'
string|"'version'"
op|':'
string|"'1.0'"
op|'}'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute.%s'"
op|'%'
name|'fake_instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'rpc_msg1'
op|','
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_connect_info2'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'consoleauth_topic'
op|','
nl|'\n'
name|'rpc_msg2'
op|','
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'console'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_spice_console'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'fake_console_type'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'console'
op|','
op|'{'
string|"'url'"
op|':'
string|"'fake_console_url'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_spice_console_no_host
dedent|''
name|'def'
name|'test_get_spice_console_no_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
string|"''"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceNotReady'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_spice_console'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'spice'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_backdoor_port
dedent|''
name|'def'
name|'test_get_backdoor_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test api call to get backdoor_port.'
nl|'\n'
indent|'        '
name|'fake_backdoor_port'
op|'='
number|'59697'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
nl|'\n'
name|'rpc_msg'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'get_backdoor_port'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute.fake_host'"
op|','
name|'rpc_msg'
op|','
nl|'\n'
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_backdoor_port'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_backdoor_port'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port'
op|','
name|'fake_backdoor_port'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_console_output
dedent|''
name|'def'
name|'test_console_output'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'fake_compute_host'"
op|'}'
newline|'\n'
name|'fake_tail_length'
op|'='
number|'699'
newline|'\n'
name|'fake_console_output'
op|'='
string|"'fake console output'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'call'"
op|')'
newline|'\n'
nl|'\n'
name|'rpc_msg'
op|'='
op|'{'
string|"'method'"
op|':'
string|"'get_console_output'"
op|','
nl|'\n'
string|"'args'"
op|':'
op|'{'
string|"'instance'"
op|':'
name|'fake_instance'
op|','
nl|'\n'
string|"'tail_length'"
op|':'
name|'fake_tail_length'
op|'}'
op|','
nl|'\n'
string|"'version'"
op|':'
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute.%s'"
op|'%'
name|'fake_instance'
op|'['
string|"'host'"
op|']'
op|','
nl|'\n'
name|'rpc_msg'
op|','
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_console_output'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_console_output'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|','
name|'tail_length'
op|'='
name|'fake_tail_length'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'fake_console_output'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume
dedent|''
name|'def'
name|'test_attach_volume'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure instance can be soft rebooted.'
nl|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_check_attach'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve_volume
dedent|''
name|'def'
name|'fake_reserve_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_reserve_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_volume_get'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_attach_volume
dedent|''
name|'def'
name|'fake_rpc_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_rpc_attach_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
nl|'\n'
name|'fake_reserve_volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'fake_rpc_attach_volume'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'attach_volume'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
number|'1'
op|','
string|"'/dev/vdb'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_check_attach'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_reserve_volume'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_reserve_volume'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'called'
op|'.'
name|'get'
op|'('
string|"'fake_rpc_attach_volume'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_attach_volume_no_device
dedent|''
name|'def'
name|'test_attach_volume_no_device'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_check_attach
name|'def'
name|'fake_check_attach'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_check_attach'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_reserve_volume
dedent|''
name|'def'
name|'fake_reserve_volume'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_reserve_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
dedent|''
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_volume_get'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_rpc_attach_volume
dedent|''
name|'def'
name|'fake_rpc_attach_volume'
op|'('
name|'self'
op|','
name|'context'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'fake_rpc_attach_volume'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'get'"
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'check_attach'"
op|','
name|'fake_check_attach'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|"'reserve_volume'"
op|','
nl|'\n'
name|'fake_reserve_volume'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|','
string|"'attach_volume'"
op|','
nl|'\n'
name|'fake_rpc_attach_volume'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_with_volumes
dedent|''
name|'def'
name|'test_terminate_with_volumes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that volumes get detached during instance termination.'
nl|'\n'
indent|'        '
name|'admin'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'volume_id'
op|'='
string|"'fake'"
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_name'"
op|':'
string|"'/dev/vdc'"
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'volume_id'"
op|':'
name|'volume_id'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'block_device_mapping_create'
op|'('
name|'admin'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_volume_get
name|'def'
name|'fake_volume_get'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'volume_id'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"get"'
op|','
name|'fake_volume_get'
op|')'
newline|'\n'
nl|'\n'
comment|'# Stub out and record whether it gets detached'
nl|'\n'
name|'result'
op|'='
op|'{'
string|'"detached"'
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_detach
name|'def'
name|'fake_detach'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'result'
op|'['
string|'"detached"'
op|']'
op|'='
name|'volume'
op|'['
string|'"id"'
op|']'
op|'=='
name|'volume_id'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"detach"'
op|','
name|'fake_detach'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_terminate_connection
name|'def'
name|'fake_terminate_connection'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'volume'
op|','
name|'connector'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'cinder'
op|'.'
name|'API'
op|','
string|'"terminate_connection"'
op|','
nl|'\n'
name|'fake_terminate_connection'
op|')'
newline|'\n'
nl|'\n'
comment|'# Kill the instance and check that it was detached'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'terminate_instance'
op|'('
name|'admin'
op|','
name|'instance'
op|'='
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'result'
op|'['
string|'"detached"'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_network_info
dedent|''
name|'def'
name|'test_inject_network_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'inject_network_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reset_network
dedent|''
name|'def'
name|'test_reset_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'reset_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_lock
dedent|''
name|'def'
name|'test_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_unlock
dedent|''
name|'def'
name|'test_unlock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'unlock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_lock
dedent|''
name|'def'
name|'test_get_lock'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
op|'{'
string|"'locked'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_lock'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_remove_security_group
dedent|''
name|'def'
name|'test_add_remove_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'security_group_name'
op|'='
name|'self'
op|'.'
name|'_create_group'
op|'('
op|')'
op|'['
string|"'name'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'add_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'remove_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_diagnostics
dedent|''
name|'def'
name|'test_get_diagnostics'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_diagnostics'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_inject_file
dedent|''
name|'def'
name|'test_inject_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can write a file to an instance.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'inject_file'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
string|'"/tmp/test"'
op|','
string|'"File Contents"'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secgroup_refresh
dedent|''
name|'def'
name|'test_secgroup_refresh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|rule_get
name|'def'
name|'rule_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_rule'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'parent_group_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'['
name|'mock_rule'
op|']'
newline|'\n'
nl|'\n'
DECL|function|group_get
dedent|''
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
name|'instance'
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'security_group_rule_get_by_security_group_grantee'"
op|','
nl|'\n'
name|'rule_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'topic'
op|'='
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_instance_security_rules"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
nl|'\n'
name|'compute_rpcapi'
op|'.'
name|'SecurityGroupAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_members_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secgroup_refresh_once
dedent|''
name|'def'
name|'test_secgroup_refresh_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|rule_get
name|'def'
name|'rule_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_rule'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'parent_group_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'['
name|'mock_rule'
op|']'
newline|'\n'
nl|'\n'
DECL|function|group_get
dedent|''
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
name|'instance'
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'security_group_rule_get_by_security_group_grantee'"
op|','
nl|'\n'
name|'rule_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'topic'
op|'='
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_instance_security_rules"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
nl|'\n'
name|'compute_rpcapi'
op|'.'
name|'SecurityGroupAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_members_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secgroup_refresh_none
dedent|''
name|'def'
name|'test_secgroup_refresh_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|rule_get
indent|'        '
name|'def'
name|'rule_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_rule'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'parent_group_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'return'
op|'['
name|'mock_rule'
op|']'
newline|'\n'
nl|'\n'
DECL|function|group_get
dedent|''
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'security_group_rule_get_by_security_group_grantee'"
op|','
nl|'\n'
name|'rule_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_members_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secrule_refresh
dedent|''
name|'def'
name|'test_secrule_refresh'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|group_get
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
name|'instance'
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'topic'
op|'='
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_instance_security_rules"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
nl|'\n'
name|'compute_rpcapi'
op|'.'
name|'SecurityGroupAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secrule_refresh_once
dedent|''
name|'def'
name|'test_secrule_refresh_once'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|group_get
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
name|'instance'
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'topic'
op|'='
name|'rpc'
op|'.'
name|'queue_get_for'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'CONF'
op|'.'
name|'compute_topic'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'host'"
op|']'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'cast'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'topic'
op|','
nl|'\n'
op|'{'
string|'"method"'
op|':'
string|'"refresh_instance_security_rules"'
op|','
nl|'\n'
string|'"args"'
op|':'
op|'{'
string|"'instance'"
op|':'
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'instance'
op|')'
op|'}'
op|','
nl|'\n'
string|'"version"'
op|':'
nl|'\n'
name|'compute_rpcapi'
op|'.'
name|'SecurityGroupAPI'
op|'.'
name|'BASE_RPC_API_VERSION'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_secrule_refresh_none
dedent|''
name|'def'
name|'test_secrule_refresh_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|group_get
indent|'        '
name|'def'
name|'group_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'mock_group'
op|'='
name|'FakeModel'
op|'('
op|'{'
string|"'instances'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'return'
name|'mock_group'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'db'
op|','
string|"'security_group_get'"
op|','
name|'group_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'security_group_api'
op|'.'
name|'trigger_rules_refresh'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'['
number|'1'
op|','
number|'2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_live_migrate
dedent|''
name|'def'
name|'test_live_migrate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|','
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'_run_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'live_migrate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'block_migration'
op|'='
name|'True'
op|','
nl|'\n'
name|'disk_over_commit'
op|'='
name|'True'
op|','
nl|'\n'
name|'host_name'
op|'='
string|"'fake_dest_host'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'instance'
op|'['
string|"'task_state'"
op|']'
op|','
name|'task_states'
op|'.'
name|'MIGRATING'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_destroy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|fake_rpc_method
dedent|''
dedent|''
name|'def'
name|'fake_rpc_method'
op|'('
name|'context'
op|','
name|'topic'
op|','
name|'msg'
op|','
name|'do_cast'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_create_service_entries
dedent|''
name|'def'
name|'_create_service_entries'
op|'('
name|'context'
op|','
name|'values'
op|'='
op|'{'
string|"'avail_zone1'"
op|':'
op|'['
string|"'fake_host1'"
op|','
nl|'\n'
string|"'fake_host2'"
op|']'
op|','
nl|'\n'
string|"'avail_zone2'"
op|':'
op|'['
string|"'fake_host3'"
op|']'
op|','
op|'}'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'for'
name|'avail_zone'
op|','
name|'hosts'
name|'in'
name|'values'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'host'
name|'in'
name|'hosts'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'service_create'
op|'('
name|'context'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'host'
op|','
nl|'\n'
string|"'binary'"
op|':'
string|"'nova-compute'"
op|','
nl|'\n'
string|"'topic'"
op|':'
string|"'compute'"
op|','
nl|'\n'
string|"'report_count'"
op|':'
number|'0'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'values'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAPIAggrTestCase
dedent|''
name|'class'
name|'ComputeAPIAggrTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for unit coverage of aggregate-related methods\n    defined in nova.compute.api."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAPIAggrTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'compute_api'
op|'.'
name|'AggregateAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'fake_rpc_method'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'cast'"
op|','
name|'fake_rpc_method'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_aggregate_metadata
dedent|''
name|'def'
name|'test_update_aggregate_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure metadata can be updated.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'metadata'
op|'='
op|'{'
string|"'foo_key1'"
op|':'
string|"'foo_value1'"
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|','
op|'}'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'metadata'
op|')'
newline|'\n'
name|'metadata'
op|'['
string|"'foo_key1'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'update_aggregate_metadata'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
name|'metadata'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'expected'
op|'['
string|"'metadata'"
op|']'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
op|'{'
string|"'availability_zone'"
op|':'
string|"'fake_zone'"
op|','
nl|'\n'
string|"'foo_key2'"
op|':'
string|"'foo_value2'"
op|'}'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_aggregate
dedent|''
name|'def'
name|'test_delete_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can delete an aggregate.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'aggregate_get'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
name|'read_deleted'
op|'='
string|"'yes'"
op|')'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AggregateNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_non_empty_aggregate
dedent|''
name|'def'
name|'test_delete_non_empty_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure InvalidAggregateAction is raised when non empty aggregate.'
nl|'\n'
indent|'        '
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'fake_availability_zone'"
op|':'
op|'['
string|"'fake_host'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_availability_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
string|"'fake_host'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidAggregateAction'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'delete_aggregate'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate
dedent|''
name|'def'
name|'test_add_host_to_aggregate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can add a host to an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'fake_host'
op|'='
name|'values'
op|'['
name|'fake_zone'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
name|'fake_host'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'['
string|"'hosts'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate_multiple
dedent|''
name|'def'
name|'test_add_host_to_aggregate_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can add multiple hosts to an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'values'
op|'['
name|'fake_zone'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'['
string|"'hosts'"
op|']'
op|')'
op|','
name|'len'
op|'('
name|'values'
op|'['
name|'fake_zone'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_host_to_aggregate_raise_not_found
dedent|''
name|'def'
name|'test_add_host_to_aggregate_raise_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure ComputeHostNotFound is raised when adding invalid host.'
nl|'\n'
indent|'        '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
string|"'invalid_host'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_host_from_aggregate_active
dedent|''
name|'def'
name|'test_remove_host_from_aggregate_active'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure we can remove a host from an aggregate.'
nl|'\n'
indent|'        '
name|'values'
op|'='
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'fake_zone'
op|'='
name|'values'
op|'.'
name|'keys'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_aggregate'"
op|','
name|'fake_zone'
op|')'
newline|'\n'
name|'for'
name|'host'
name|'in'
name|'values'
op|'['
name|'fake_zone'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'add_host_to_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|')'
newline|'\n'
dedent|''
name|'expected'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'remove_host_from_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'values'
op|'['
name|'fake_zone'
op|']'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'aggr'
op|'['
string|"'hosts'"
op|']'
op|')'
op|'-'
number|'1'
op|','
name|'len'
op|'('
name|'expected'
op|'['
string|"'hosts'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_host_from_aggregate_raise_not_found
dedent|''
name|'def'
name|'test_remove_host_from_aggregate_raise_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure ComputeHostNotFound is raised when removing invalid host.'
nl|'\n'
indent|'        '
name|'_create_service_entries'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'fake_zone'"
op|':'
op|'['
string|"'fake_host'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'aggr'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'create_aggregate'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake_aggregate'"
op|','
nl|'\n'
string|"'fake_zone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ComputeHostNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'remove_host_from_aggregate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'aggr'
op|'['
string|"'id'"
op|']'
op|','
string|"'invalid_host'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeBackdoorPortTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeBackdoorPortTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for unit test coverage of backdoor port rpc."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeBackdoorPortTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'backdoor_port'
op|'='
number|'59697'
newline|'\n'
nl|'\n'
DECL|member|test_get_backdoor_port
dedent|''
name|'def'
name|'test_get_backdoor_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'get_backdoor_port'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'backdoor_port'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeAggrTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeAggrTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is for unit coverage of aggregate-related methods\n    defined in nova.compute.manager."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeAggrTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'name'"
op|':'
string|"'test_aggr'"
op|'}'
newline|'\n'
name|'az'
op|'='
op|'{'
string|"'availability_zone'"
op|':'
string|"'test_zone'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'aggr'
op|'='
name|'db'
op|'.'
name|'aggregate_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'values'
op|','
name|'metadata'
op|'='
name|'az'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_aggregate_host
dedent|''
name|'def'
name|'test_add_aggregate_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_driver_add_to_aggregate
indent|'        '
name|'def'
name|'fake_driver_add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'_ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_driver_add_to_aggregate'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
name|'return'
op|'{'
string|'"foo"'
op|':'
string|'"bar"'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"add_to_aggregate"'
op|','
nl|'\n'
name|'fake_driver_add_to_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|'"host"'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_driver_add_to_aggregate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_aggregate_host
dedent|''
name|'def'
name|'test_remove_aggregate_host'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_driver_remove_from_aggregate
indent|'        '
name|'def'
name|'fake_driver_remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
nl|'\n'
op|'**'
name|'_ignore'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'fake_driver_remove_from_aggregate'
op|'.'
name|'called'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|'"host"'
op|','
name|'host'
op|','
string|'"host"'
op|')'
newline|'\n'
name|'return'
op|'{'
string|'"foo"'
op|':'
string|'"bar"'
op|'}'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"remove_from_aggregate"'
op|','
nl|'\n'
name|'fake_driver_remove_from_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|','
name|'host'
op|'='
string|'"host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fake_driver_remove_from_aggregate'
op|'.'
name|'called'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_aggregate_host_passes_slave_info_to_driver
dedent|''
name|'def'
name|'test_add_aggregate_host_passes_slave_info_to_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|driver_add_to_aggregate
indent|'        '
name|'def'
name|'driver_add_to_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|','
name|'self'
op|'.'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|'"the_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"SLAVE_INFO"'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"slave_info"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"add_to_aggregate"'
op|','
nl|'\n'
name|'driver_add_to_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'add_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|'"the_host"'
op|','
nl|'\n'
name|'slave_info'
op|'='
string|'"SLAVE_INFO"'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_from_aggregate_passes_slave_info_to_driver
dedent|''
name|'def'
name|'test_remove_from_aggregate_passes_slave_info_to_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|driver_remove_from_aggregate
indent|'        '
name|'def'
name|'driver_remove_from_aggregate'
op|'('
name|'context'
op|','
name|'aggregate'
op|','
name|'host'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'aggregate'
op|'['
string|"'id'"
op|']'
op|','
name|'self'
op|'.'
name|'aggr'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'host'
op|','
string|'"the_host"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|'"SLAVE_INFO"'
op|','
name|'kwargs'
op|'.'
name|'get'
op|'('
string|'"slave_info"'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'driver'
op|','
string|'"remove_from_aggregate"'
op|','
nl|'\n'
name|'driver_remove_from_aggregate'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'remove_aggregate_host'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'aggregate'
op|'='
name|'jsonutils'
op|'.'
name|'to_primitive'
op|'('
name|'self'
op|'.'
name|'aggr'
op|')'
op|','
name|'host'
op|'='
string|'"the_host"'
op|','
nl|'\n'
name|'slave_info'
op|'='
string|'"SLAVE_INFO"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputePolicyTestCase
dedent|''
dedent|''
name|'class'
name|'ComputePolicyTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputePolicyTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_actions_are_prefixed
dedent|''
name|'def'
name|'test_actions_are_prefixed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'nova'
op|'.'
name|'policy'
op|','
string|"'enforce'"
op|')'
newline|'\n'
name|'nova'
op|'.'
name|'policy'
op|'.'
name|'enforce'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'compute:reboot'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'compute_api'
op|'.'
name|'check_policy'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'reboot'"
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrapped_method
dedent|''
name|'def'
name|'test_wrapped_method'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
name|'params'
op|'='
op|'{'
string|"'host'"
op|':'
name|'None'
op|'}'
op|')'
newline|'\n'
nl|'\n'
comment|'# force delete to fail'
nl|'\n'
name|'rules'
op|'='
op|'{'
string|'"compute:delete"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
comment|'# reset rules to allow deletion'
nl|'\n'
name|'rules'
op|'='
op|'{'
string|'"compute:delete"'
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'delete'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_fail
dedent|''
name|'def'
name|'test_create_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_attach_volume_fail
dedent|''
name|'def'
name|'test_create_attach_volume_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_network"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_volume"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
string|"'blah'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'blah'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_attach_network_fail
dedent|''
name|'def'
name|'test_create_attach_network_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_network"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:attach_volume"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'1'"
op|','
string|"'1'"
op|','
nl|'\n'
name|'requested_networks'
op|'='
string|"'blah'"
op|','
nl|'\n'
name|'block_device_mapping'
op|'='
string|"'blah'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_fail
dedent|''
name|'def'
name|'test_get_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:get"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_fail
dedent|''
name|'def'
name|'test_get_all_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:get_all"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_all'
op|','
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_faults
dedent|''
name|'def'
name|'test_get_instance_faults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance1'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance2'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instances'
op|'='
op|'['
name|'instance1'
op|','
name|'instance2'
op|']'
newline|'\n'
nl|'\n'
name|'rules'
op|'='
op|'{'
nl|'\n'
string|'"compute:get_instance_faults"'
op|':'
op|'['
op|'['
string|'"false:false"'
op|']'
op|']'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'get_instance_faults'
op|','
nl|'\n'
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
op|','
name|'instances'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_host_fail
dedent|''
name|'def'
name|'test_force_host_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:forced_host"'
op|':'
op|'['
op|'['
string|'"role:fake"'
op|']'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PolicyNotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
string|"'1'"
op|','
nl|'\n'
name|'availability_zone'
op|'='
string|"'1:1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_force_host_pass
dedent|''
name|'def'
name|'test_force_host_pass'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'rules'
op|'='
op|'{'
string|'"compute:create"'
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|'"compute:create:forced_host"'
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'policy'
op|'.'
name|'set_rules'
op|'('
name|'rules'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
string|"'1'"
op|','
nl|'\n'
name|'availability_zone'
op|'='
string|"'1:1'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|KeypairAPITestCase
dedent|''
dedent|''
name|'class'
name|'KeypairAPITestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'KeypairAPITestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'='
name|'compute_api'
op|'.'
name|'KeypairAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_keypair_db_call_stubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'existing_key_name'
op|'='
string|"'fake existing key name'"
newline|'\n'
name|'self'
op|'.'
name|'pub_key'
op|'='
op|'('
string|"'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDLnVkqJu9WVf'"
nl|'\n'
string|"'/5StU3JCrBR2r1s1j8K1tux+5XeSvdqaM8lMFNorzbY5iyoBbR'"
nl|'\n'
string|"'S56gy1jmm43QsMPJsrpfUZKcJpRENSe3OxIIwWXRoiapZe78u/'"
nl|'\n'
string|"'a9xKwj0avFYMcws9Rk9iAB7W4K1nEJbyCPl5lRBoyqeHBqrnnu'"
nl|'\n'
string|"'XWEgGxJCK0Ah6wcOzwlEiVjdf4kxzXrwPHyi7Ea1qvnNXTziF8'"
nl|'\n'
string|"'yYmUlH4C8UXfpTQckwSwpDyxZUc63P8q+vPbs3Q2kw+/7vvkCK'"
nl|'\n'
string|"'HJAXVI+oCiyMMfffoTq16M1xfV58JstgtTqAXG+ZFpicGajREU'"
nl|'\n'
string|"'E/E3hO5MGgcHmyzIrWHKpe1n3oEGuz'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'fingerprint'
op|'='
string|"'4e:48:c6:a0:4a:f9:dd:b5:4c:85:54:5a:af:43:47:5a'"
newline|'\n'
nl|'\n'
DECL|member|_keypair_db_call_stubs
dedent|''
name|'def'
name|'_keypair_db_call_stubs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|db_key_pair_get_all_by_user
indent|'        '
name|'def'
name|'db_key_pair_get_all_by_user'
op|'('
name|'self'
op|','
name|'user_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|']'
newline|'\n'
nl|'\n'
DECL|function|db_key_pair_create
dedent|''
name|'def'
name|'db_key_pair_create'
op|'('
name|'self'
op|','
name|'keypair'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|db_key_pair_destroy
dedent|''
name|'def'
name|'db_key_pair_destroy'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|db_key_pair_get
dedent|''
name|'def'
name|'db_key_pair_get'
op|'('
name|'context'
op|','
name|'user_id'
op|','
name|'name'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'name'
op|'=='
name|'self'
op|'.'
name|'existing_key_name'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'existing_key_name'
op|','
nl|'\n'
string|"'public_key'"
op|':'
name|'self'
op|'.'
name|'pub_key'
op|','
nl|'\n'
string|"'fingerprint'"
op|':'
name|'self'
op|'.'
name|'fingerprint'
op|'}'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'KeypairNotFound'
op|'('
name|'user_id'
op|'='
name|'user_id'
op|','
name|'name'
op|'='
name|'name'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|'"key_pair_get_all_by_user"'
op|','
nl|'\n'
name|'db_key_pair_get_all_by_user'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|'"key_pair_create"'
op|','
nl|'\n'
name|'db_key_pair_create'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|'"key_pair_destroy"'
op|','
nl|'\n'
name|'db_key_pair_destroy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|'"key_pair_get"'
op|','
nl|'\n'
name|'db_key_pair_get'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_keypair
dedent|''
name|'def'
name|'test_create_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keypair'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo'"
op|','
name|'keypair'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_keypair_name_too_long
dedent|''
name|'def'
name|'test_create_keypair_name_too_long'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidKeypair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'x'"
op|'*'
number|'256'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_keypair_invalid_chars
dedent|''
name|'def'
name|'test_create_keypair_invalid_chars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidKeypair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'* BAD CHARACTERS! *'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_keypair_already_exists
dedent|''
name|'def'
name|'test_create_keypair_already_exists'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'KeyPairExists'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'existing_key_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_keypair_quota_limit
dedent|''
name|'def'
name|'test_create_keypair_quota_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_quotas_count
indent|'        '
name|'def'
name|'fake_quotas_count'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resource'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'CONF'
op|'.'
name|'quota_key_pairs'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'QUOTAS'
op|','
string|'"count"'
op|','
name|'fake_quotas_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'KeypairLimitExceeded'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'create_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_keypair
dedent|''
name|'def'
name|'test_import_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keypair'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'foo'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'pub_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'foo'"
op|','
name|'keypair'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'fingerprint'
op|','
name|'keypair'
op|'['
string|"'fingerprint'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'pub_key'
op|','
name|'keypair'
op|'['
string|"'public_key'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_keypair_bad_public_key
dedent|''
name|'def'
name|'test_import_keypair_bad_public_key'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidKeypair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'foo'"
op|','
string|"'bad key data'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_keypair_name_too_long
dedent|''
name|'def'
name|'test_import_keypair_name_too_long'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidKeypair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'x'"
op|'*'
number|'256'
op|','
nl|'\n'
name|'self'
op|'.'
name|'pub_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_keypair_invalid_chars
dedent|''
name|'def'
name|'test_import_keypair_invalid_chars'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidKeypair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
nl|'\n'
string|"'* BAD CHARACTERS! *'"
op|','
name|'self'
op|'.'
name|'pub_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_import_keypair_quota_limit
dedent|''
name|'def'
name|'test_import_keypair_quota_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|fake_quotas_count
indent|'        '
name|'def'
name|'fake_quotas_count'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'resource'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'CONF'
op|'.'
name|'quota_key_pairs'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'QUOTAS'
op|','
string|'"count"'
op|','
name|'fake_quotas_count'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'KeypairLimitExceeded'
op|','
nl|'\n'
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'import_key_pair'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
string|"'foo'"
op|','
name|'self'
op|'.'
name|'pub_key'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_keypair
dedent|''
name|'def'
name|'test_get_keypair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'keypair'
op|'='
name|'self'
op|'.'
name|'keypair_api'
op|'.'
name|'get_key_pair'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'existing_key_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'existing_key_name'
op|','
name|'keypair'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DisabledInstanceTypesTestCase
dedent|''
dedent|''
name|'class'
name|'DisabledInstanceTypesTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""\n    Some instance-types are marked \'disabled\' which means that they will not\n    show up in customer-facing listings. We do, however, want those\n    instance-types to be availble for emergency migrations and for rebuilding\n    of existing instances.\n\n    One legitimate use of the \'disabled\' field would be when phasing out a\n    particular instance-type. We still want customers to be able to use an\n    instance that of the old type, and we want Ops to be able perform\n    migrations against it, but we *don\'t* want customers building new slices\n    with ths phased-out instance-type.\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DisabledInstanceTypesTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_default_instance_type'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_build_instance_from_visible_instance_type
dedent|''
name|'def'
name|'test_can_build_instance_from_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'inst_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
comment|'# Assert that exception.InstanceTypeNotFound is not raised'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cannot_build_instance_from_disabled_instance_type
dedent|''
name|'def'
name|'test_cannot_build_instance_from_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'inst_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InstanceTypeNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'inst_type'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_rebuild_instance_from_visible_instance_type
dedent|''
name|'def'
name|'test_can_rebuild_instance_from_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image_href'
op|'='
string|"'fake-image-id'"
newline|'\n'
name|'admin_password'
op|'='
string|"'blah'"
newline|'\n'
nl|'\n'
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Assert no errors were raised'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'image_href'
op|','
nl|'\n'
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_rebuild_instance_from_disabled_instance_type
dedent|''
name|'def'
name|'test_can_rebuild_instance_from_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        A rebuild or a restore should only change the \'image\',\n        not the \'instance_type\'. Therefore, should be allowed even\n        when the slice is on disabled type already.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'image_href'
op|'='
string|"'fake-image-id'"
newline|'\n'
name|'admin_password'
op|'='
string|"'blah'"
newline|'\n'
nl|'\n'
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# Assert no errors were raised'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'rebuild'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'image_href'
op|','
nl|'\n'
name|'admin_password'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_resize_to_visible_instance_type
dedent|''
name|'def'
name|'test_can_resize_to_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'orig_get_instance_type_by_flavor_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
newline|'\n'
nl|'\n'
DECL|function|fake_get_instance_type_by_flavor_id
name|'def'
name|'fake_get_instance_type_by_flavor_id'
op|'('
name|'flavor_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
nl|'\n'
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'orig_get_instance_type_by_flavor_id'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'read_deleted'
op|')'
newline|'\n'
name|'instance_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
name|'return'
name|'instance_type'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'instance_types'
op|','
string|"'get_instance_type_by_flavor_id'"
op|','
nl|'\n'
name|'fake_get_instance_type_by_flavor_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): for legacy this raises FlavorNotFound instead of'
nl|'\n'
comment|'# InstanceTypeNotFound; we should eventually make it raise'
nl|'\n'
comment|'# InstanceTypeNotFound for consistency.'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_cannot_resize_to_disabled_instance_type
dedent|''
name|'def'
name|'test_cannot_resize_to_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'orig_get_instance_type_by_flavor_id'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_flavor_id'
newline|'\n'
nl|'\n'
DECL|function|fake_get_instance_type_by_flavor_id
name|'def'
name|'fake_get_instance_type_by_flavor_id'
op|'('
name|'flavor_id'
op|','
name|'ctxt'
op|'='
name|'None'
op|','
nl|'\n'
name|'read_deleted'
op|'='
string|'"yes"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'instance_type'
op|'='
name|'orig_get_instance_type_by_flavor_id'
op|'('
name|'flavor_id'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'read_deleted'
op|')'
newline|'\n'
name|'instance_type'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'return'
name|'instance_type'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'instance_types'
op|','
string|"'get_instance_type_by_flavor_id'"
op|','
nl|'\n'
name|'fake_get_instance_type_by_flavor_id'
op|')'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): for legacy this raises FlavorNotFound instead of'
nl|'\n'
comment|'# InstanceTypeNot; we should eventually make it raise'
nl|'\n'
comment|'# InstanceTypeNotFound for consistency.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
string|"'4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_migrate_to_visible_instance_type
dedent|''
name|'def'
name|'test_can_migrate_to_visible_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'False'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): for legacy this raises FlavorNotFound instead of'
nl|'\n'
comment|'# InstanceTypeNotFound; we should eventually make it raise'
nl|'\n'
comment|'# InstanceTypeNotFound for consistency.'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_can_migrate_to_disabled_instance_type
dedent|''
name|'def'
name|'test_can_migrate_to_disabled_instance_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        We don\'t want to require a customers instance-type to change when ops\n        is migrating a failed server.\n        """'
newline|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'instance_type'"
op|']'
op|'['
string|"'disabled'"
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
comment|'# FIXME(sirp): for legacy this raises FlavorNotFound instead of'
nl|'\n'
comment|'# InstanceTypeNotFound; we should eventually make it raise'
nl|'\n'
comment|'# InstanceTypeNotFound for consistency.'
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeReschedulingTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeReschedulingTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests re-scheduling logic for new build requests."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeReschedulingTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'SCHEDULING'
newline|'\n'
nl|'\n'
DECL|function|fake_update
name|'def'
name|'fake_update'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'updated_task_state'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'task_state'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_instance_update'"
op|','
name|'fake_update'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|','
name|'request_spec'
op|'='
name|'None'
op|','
name|'filter_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_uuid'
op|'='
string|'"12-34-56-78-90"'
newline|'\n'
nl|'\n'
name|'admin_password'
op|'='
name|'None'
newline|'\n'
name|'injected_files'
op|'='
name|'None'
newline|'\n'
name|'requested_networks'
op|'='
name|'None'
newline|'\n'
name|'is_first_time'
op|'='
name|'False'
newline|'\n'
nl|'\n'
name|'scheduler_method'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'request_spec'
op|','
name|'admin_password'
op|','
name|'injected_files'
op|','
nl|'\n'
name|'requested_networks'
op|','
name|'is_first_time'
op|','
name|'filter_properties'
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance_uuid'
op|','
name|'scheduler_method'
op|','
nl|'\n'
name|'method_args'
op|','
name|'self'
op|'.'
name|'expected_task_state'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_filter_properties
dedent|''
name|'def'
name|'test_reschedule_no_filter_properties'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no filter_properties will disable re-scheduling.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_retry_info
dedent|''
name|'def'
name|'test_reschedule_no_retry_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no retry info will also disable re-scheduling.'
nl|'\n'
indent|'        '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_no_request_spec
dedent|''
name|'def'
name|'test_reschedule_no_request_spec'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# no request spec will also disable re-scheduling.'
nl|'\n'
indent|'        '
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_success
dedent|''
name|'def'
name|'test_reschedule_success'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'retry'
op|'='
name|'dict'
op|'('
name|'num_attempts'
op|'='
number|'1'
op|')'
newline|'\n'
name|'filter_properties'
op|'='
name|'dict'
op|'('
name|'retry'
op|'='
name|'retry'
op|')'
newline|'\n'
name|'request_spec'
op|'='
op|'{'
string|"'instance_uuids'"
op|':'
op|'['
string|"'foo'"
op|','
string|"'bar'"
op|']'
op|'}'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"just need an exception"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'test'
op|'.'
name|'TestingException'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'exc_str'
op|'='
name|'traceback'
op|'.'
name|'format_exception'
op|'('
op|'*'
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'_reschedule'
op|'('
name|'filter_properties'
op|'='
name|'filter_properties'
op|','
nl|'\n'
name|'request_spec'
op|'='
name|'request_spec'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'request_spec'
op|'['
string|"'instance_uuids'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'updated_task_state'
op|','
name|'self'
op|'.'
name|'expected_task_state'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'exc_str'
op|','
name|'filter_properties'
op|'['
string|"'retry'"
op|']'
op|'['
string|"'exc'"
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeReschedulingResizeTestCase
dedent|''
dedent|''
name|'class'
name|'ComputeReschedulingResizeTestCase'
op|'('
name|'ComputeReschedulingTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test re-scheduling logic for prep_resize requests."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeReschedulingResizeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expected_task_state'
op|'='
name|'task_states'
op|'.'
name|'RESIZE_PREP'
newline|'\n'
nl|'\n'
DECL|member|_reschedule
dedent|''
name|'def'
name|'_reschedule'
op|'('
name|'self'
op|','
name|'request_spec'
op|'='
name|'None'
op|','
name|'filter_properties'
op|'='
name|'None'
op|','
nl|'\n'
name|'exc_info'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'filter_properties'
op|':'
newline|'\n'
indent|'            '
name|'filter_properties'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'instance_uuid'
op|'='
string|'"12-34-56-78-90"'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'instance_uuid'
op|'}'
newline|'\n'
name|'instance_type'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'image'
op|'='
name|'None'
newline|'\n'
name|'reservations'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'scheduler_method'
op|'='
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'instance'
op|','
name|'instance_type'
op|','
name|'image'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'reservations'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'request_spec'
op|','
nl|'\n'
name|'filter_properties'
op|','
name|'instance_uuid'
op|','
name|'scheduler_method'
op|','
nl|'\n'
name|'method_args'
op|','
name|'self'
op|'.'
name|'expected_task_state'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InnerTestingException
dedent|''
dedent|''
name|'class'
name|'InnerTestingException'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRescheduleOrReraiseTestCase
dedent|''
name|'class'
name|'ComputeRescheduleOrReraiseTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test logic and exception handling around rescheduling or re-raising\n    original exceptions when builds fail.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeRescheduleOrReraiseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_or_reraise_called
dedent|''
name|'def'
name|'test_reschedule_or_reraise_called'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Basic sanity check to make sure _reschedule_or_reraise is called\n        when a build fails.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_spawn'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule_or_reraise'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_spawn'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'False'
op|','
name|'None'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"BuildError"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_or_reraise'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_run_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'False'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_network_fail
dedent|''
name|'def'
name|'test_deallocate_network_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test de-allocation of network failing before re-scheduling logic\n        can even run.\n        """'
newline|'\n'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'InnerTestingException'
op|'('
string|'"Error"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# should raise the deallocation exception, not the original build'
nl|'\n'
comment|'# error:'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'InnerTestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_fail
dedent|''
dedent|''
name|'def'
name|'test_reschedule_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test handling of exception from _reschedule.'
nl|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'instance_uuid'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'method_args'
op|','
name|'task_states'
op|'.'
name|'SCHEDULING'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'InnerTestingException'
op|'('
string|'"Inner"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
comment|'# not re-scheduling, should raise the original build error:'
nl|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_false
dedent|''
dedent|''
name|'def'
name|'test_reschedule_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test not-rescheduling, but no nested exception.'
nl|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
name|'exc_info'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# re-scheduling is False, the original build error should be'
nl|'\n'
comment|'# raised here:'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_true
dedent|''
dedent|''
name|'def'
name|'test_reschedule_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test behavior when re-scheduling happens.'
nl|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_deallocate_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'compute_utils'
op|'.'
name|'add_instance_fault_from_exc'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|'['
number|'0'
op|']'
op|','
name|'exc_info'
op|'='
name|'exc_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_deallocate_network'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|','
name|'instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'run_instance'
op|','
nl|'\n'
name|'method_args'
op|','
name|'task_states'
op|'.'
name|'SCHEDULING'
op|','
name|'exc_info'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# re-scheduling is True, original error is logged, but nothing'
nl|'\n'
comment|'# is raised:'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_or_reraise'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'exc_info'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'False'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeRescheduleResizeOrReraiseTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ComputeRescheduleResizeOrReraiseTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test logic and exception handling around rescheduling prep resize\n    requests\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeRescheduleResizeOrReraiseTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
name|'self'
op|'.'
name|'_create_fake_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'instance_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
nl|'\n'
string|'"m1.tiny"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_resize_or_reraise_called
dedent|''
name|'def'
name|'test_reschedule_resize_or_reraise_called'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify the rescheduling logic gets called when there is an error\n        during prep_resize.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|'.'
name|'db'
op|','
string|"'migration_create'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|"'_reschedule_resize_or_reraise'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'db'
op|'.'
name|'migration_create'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'None'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'prep_resize'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_type'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_fails_with_exception
dedent|''
name|'def'
name|'test_reschedule_fails_with_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Original exception should be raised if the _reschedule method\n        raises another exception\n        """'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'InnerTestingException'
op|'('
string|'"Inner"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_false
dedent|''
dedent|''
name|'def'
name|'test_reschedule_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Original exception should be raised if the resize is not\n        rescheduled.\n        """'
newline|'\n'
name|'method_args'
op|'='
op|'('
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
nl|'\n'
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reschedule_true
dedent|''
dedent|''
name|'def'
name|'test_reschedule_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If rescheduled, the original resize exception should be logged.'
nl|'\n'
indent|'        '
name|'method_args'
op|'='
op|'('
name|'self'
op|'.'
name|'instance'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
name|'None'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
string|'"Original"'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'Exception'
op|':'
newline|'\n'
indent|'            '
name|'exc_info'
op|'='
name|'sys'
op|'.'
name|'exc_info'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_reschedule"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'compute'
op|','
string|'"_log_original_error"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'scheduler_rpcapi'
op|'.'
name|'prep_resize'
op|','
name|'method_args'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
name|'exc_info'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_log_original_error'
op|'('
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'_reschedule_resize_or_reraise'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'exc_info'
op|','
name|'self'
op|'.'
name|'instance_type'
op|','
name|'None'
op|','
op|'{'
op|'}'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ComputeInactiveImageTestCase
dedent|''
dedent|''
dedent|''
name|'class'
name|'ComputeInactiveImageTestCase'
op|'('
name|'BaseTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ComputeInactiveImageTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_show
name|'def'
name|'fake_show'
op|'('
name|'meh'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
name|'id'
op|','
string|"'min_disk'"
op|':'
name|'None'
op|','
string|"'min_ram'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'fake_name'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'deleted'"
op|','
nl|'\n'
string|"'properties'"
op|':'
op|'{'
string|"'kernel_id'"
op|':'
string|"'fake_kernel_id'"
op|','
nl|'\n'
string|"'ramdisk_id'"
op|':'
string|"'fake_ramdisk_id'"
op|','
nl|'\n'
string|"'something_else'"
op|':'
string|"'meow'"
op|'}'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'fake_image'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'fake_image'
op|'.'
name|'_FakeImageService'
op|','
string|"'show'"
op|','
name|'fake_show'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'='
name|'compute'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_instance_with_deleted_image
dedent|''
name|'def'
name|'test_create_instance_with_deleted_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure we can't start an instance with a deleted image."
nl|'\n'
indent|'        '
name|'inst_type'
op|'='
name|'instance_types'
op|'.'
name|'get_instance_type_by_name'
op|'('
string|"'m1.tiny'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'ImageNotActive'
op|','
nl|'\n'
name|'self'
op|'.'
name|'compute_api'
op|'.'
name|'create'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'inst_type'
op|','
string|"'fake-image-uuid'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

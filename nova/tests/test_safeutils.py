begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'#    Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'safe_utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|GetCallArgsTestCase
name|'class'
name|'GetCallArgsTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|_test_func
indent|'    '
name|'def'
name|'_test_func'
op|'('
name|'self'
op|','
name|'instance'
op|','
name|'red'
op|'='
name|'None'
op|','
name|'blue'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|test_all_kwargs
dedent|''
name|'def'
name|'test_all_kwargs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'instance'"
op|':'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
string|"'red'"
op|':'
number|'3'
op|','
string|"'blue'"
op|':'
number|'4'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'#implicit self counts as an arg'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_all_args
dedent|''
name|'def'
name|'test_all_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
number|'3'
op|','
number|'4'
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'#implicit self counts as an arg'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mixed_args
dedent|''
name|'def'
name|'test_mixed_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
number|'3'
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'blue'"
op|':'
number|'4'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'#implicit self counts as an arg'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_partial_kwargs
dedent|''
name|'def'
name|'test_partial_kwargs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'instance'"
op|':'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
string|"'red'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'#implicit self counts as an arg'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_partial_args
dedent|''
name|'def'
name|'test_partial_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
number|'3'
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
comment|'#implicit self counts as an arg'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_partial_mixed_args
dedent|''
name|'def'
name|'test_partial_mixed_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'args'
op|'='
op|'('
number|'3'
op|','
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
string|"'instance'"
op|':'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|'}'
newline|'\n'
name|'callargs'
op|'='
name|'safe_utils'
op|'.'
name|'getcallargs'
op|'('
name|'self'
op|'.'
name|'_test_func'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'callargs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'instance'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
name|'callargs'
op|'['
string|"'instance'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'red'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'callargs'
op|'['
string|"'red'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'blue'"
name|'in'
name|'callargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'None'
op|','
name|'callargs'
op|'['
string|"'blue'"
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

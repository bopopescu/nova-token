begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'# Copyright 2011 Red Hat, Inc.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'tempfile'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'flags_unittest'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
string|"'foo'"
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'for testing purposes only'"
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlagsTestCase
name|'class'
name|'FlagsTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FlagsTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'NovaConfigOpts'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'global_FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
DECL|member|test_declare
dedent|''
name|'def'
name|'test_declare'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'answer'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'answer'"
op|','
string|"'nova.tests.declare_flags'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'answer'"
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'answer'
op|','
number|'42'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure we don't overwrite anything"
nl|'\n'
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'set_override'
op|'('
string|"'answer'"
op|','
number|'256'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'answer'
op|','
number|'256'
op|')'
newline|'\n'
name|'flags'
op|'.'
name|'DECLARE'
op|'('
string|"'answer'"
op|','
string|"'nova.tests.declare_flags'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'answer'
op|','
number|'256'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_getopt_non_interspersed_args
dedent|''
name|'def'
name|'test_getopt_non_interspersed_args'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'runtime_answer'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
nl|'\n'
name|'argv'
op|'='
op|'['
string|"'flags_test'"
op|','
string|"'extra_arg'"
op|','
string|"'--runtime_answer=60'"
op|']'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'global_FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'args'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'argv'
op|','
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_runtime_and_unknown_flags
dedent|''
name|'def'
name|'test_runtime_and_unknown_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'runtime_answer'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'runtime_flags'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'runtime_answer'"
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'runtime_answer'
op|','
number|'54'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_long_vs_short_flags
dedent|''
name|'def'
name|'test_long_vs_short_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'register_cli_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'duplicate_answer_long'"
op|','
nl|'\n'
name|'default'
op|'='
string|"'val'"
op|','
nl|'\n'
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'argv'
op|'='
op|'['
string|"'flags_test'"
op|','
string|"'--duplicate_answer=60'"
op|','
string|"'extra_arg'"
op|']'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'global_FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
string|"'duplicate_answer'"
name|'not'
name|'in'
name|'self'
op|'.'
name|'global_FLAGS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assert_'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'duplicate_answer_long'
op|','
number|'60'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'register_cli_opt'
op|'('
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'duplicate_answer'"
op|','
nl|'\n'
name|'default'
op|'='
number|'60'
op|','
nl|'\n'
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'args'
op|'='
name|'self'
op|'.'
name|'global_FLAGS'
op|'('
name|'argv'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'duplicate_answer'
op|','
number|'60'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'global_FLAGS'
op|'.'
name|'duplicate_answer_long'
op|','
string|"'val'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flag_leak_left
dedent|''
name|'def'
name|'test_flag_leak_left'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'flags_unittest'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flag_leak_right
dedent|''
name|'def'
name|'test_flag_leak_right'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'flags_unittest'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flag_overrides
dedent|''
name|'def'
name|'test_flag_overrides'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'flags_unittest'
op|'='
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'reset_flags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'FLAGS'
op|'.'
name|'flags_unittest'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flagfile
dedent|''
name|'def'
name|'test_flagfile'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'string'"
op|','
name|'default'
op|'='
string|"'default'"
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'int'"
op|','
name|'default'
op|'='
number|'1'
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'false'"
op|','
name|'default'
op|'='
name|'False'
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'BoolOpt'
op|'('
string|"'true'"
op|','
name|'default'
op|'='
name|'True'
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|','
nl|'\n'
name|'cfg'
op|'.'
name|'MultiStrOpt'
op|'('
string|"'multi'"
op|','
name|'default'
op|'='
op|'['
string|"'blaa'"
op|']'
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'register_opts'
op|'('
name|'opts'
op|')'
newline|'\n'
nl|'\n'
op|'('
name|'fd'
op|','
name|'path'
op|')'
op|'='
name|'tempfile'
op|'.'
name|'mkstemp'
op|'('
name|'prefix'
op|'='
string|"'nova'"
op|','
name|'suffix'
op|'='
string|"'.flags'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'write'
op|'('
name|'fd'
op|','
string|"'--string=foo\\n--int=2\\n--false\\n--notrue\\n'"
op|')'
newline|'\n'
name|'os'
op|'.'
name|'write'
op|'('
name|'fd'
op|','
string|"'--multi=foo\\n'"
op|')'
comment|"# FIXME(markmc): --multi=bar\\n')"
newline|'\n'
name|'os'
op|'.'
name|'close'
op|'('
name|'fd'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'('
op|'['
string|"'flags_test'"
op|','
string|"'--flagfile='"
op|'+'
name|'path'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'string'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'int'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'false'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'true'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'multi'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
comment|"# FIXME(markmc): 'bar'"
newline|'\n'
nl|'\n'
comment|"# Re-parse to test multistring isn't append multiple times"
nl|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'('
op|'['
string|"'flags_test'"
op|','
string|"'--flagfile='"
op|'+'
name|'path'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'multi'
op|','
op|'['
string|"'foo'"
op|']'
op|')'
comment|"# FIXME(markmc): 'bar'"
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'os'
op|'.'
name|'remove'
op|'('
name|'path'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_defaults
dedent|''
dedent|''
name|'def'
name|'test_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'foo'"
op|','
name|'default'
op|'='
string|"'bar'"
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'foo'
op|','
string|"'bar'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'set_default'
op|'('
string|"'foo'"
op|','
string|"'blaa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'foo'
op|','
string|"'blaa'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_templated_values
dedent|''
name|'def'
name|'test_templated_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'foo'"
op|','
name|'default'
op|'='
string|"'foo'"
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'bar'"
op|','
name|'default'
op|'='
string|"'bar'"
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'register_opt'
op|'('
name|'cfg'
op|'.'
name|'StrOpt'
op|'('
string|"'blaa'"
op|','
nl|'\n'
name|'default'
op|'='
string|"'$foo$bar'"
op|','
name|'help'
op|'='
string|"'desc'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'FLAGS'
op|'.'
name|'blaa'
op|','
string|"'foobar'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

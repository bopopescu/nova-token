begin_unit
comment|'# Copyright 2011 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'stubout'
newline|'\n'
name|'import'
name|'sys'
newline|'\n'
nl|'\n'
name|'import'
name|'nova'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'api'
name|'import'
name|'notify'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'log_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'no_op_notifier'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'notifier'
name|'import'
name|'list_notifier'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotifierListTestCase
name|'class'
name|'NotifierListTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test case for notifications"""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotifierListTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'list_notifier'
op|'.'
name|'_reset_drivers'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'='
name|'stubout'
op|'.'
name|'StubOutForTesting'
op|'('
op|')'
newline|'\n'
comment|'# Mock log to add one to exception_count when log.exception is called'
nl|'\n'
DECL|function|mock_exception
name|'def'
name|'mock_exception'
op|'('
name|'cls'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'exception_count'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'exception_count'
op|'='
number|'0'
newline|'\n'
name|'list_notifier_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'nova.notifier.list_notifier'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'list_notifier_log'
op|','
string|'"exception"'
op|','
name|'mock_exception'
op|')'
newline|'\n'
comment|'# Mock no_op notifier to add one to notify_count when called.'
nl|'\n'
DECL|function|mock_notify
name|'def'
name|'mock_notify'
op|'('
name|'cls'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'notify_count'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'notify_count'
op|'='
number|'0'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'no_op_notifier'
op|','
string|"'notify'"
op|','
name|'mock_notify'
op|')'
newline|'\n'
comment|'# Mock log_notifier to raise RuntimeError when called.'
nl|'\n'
DECL|function|mock_notify2
name|'def'
name|'mock_notify2'
op|'('
name|'cls'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'RuntimeError'
op|'('
string|'"Bad notifier."'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'log_notifier'
op|','
string|"'notify'"
op|','
name|'mock_notify2'
op|')'
newline|'\n'
comment|"# mock sys.exit so we don't actually kill the program during our tests."
nl|'\n'
name|'self'
op|'.'
name|'sys_exit_code'
op|'='
number|'0'
newline|'\n'
DECL|function|mock_sys_exit
name|'def'
name|'mock_sys_exit'
op|'('
name|'code'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'sys_exit_code'
op|'+='
name|'code'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'sys'
op|','
string|"'exit'"
op|','
name|'mock_sys_exit'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'UnsetAll'
op|'('
op|')'
newline|'\n'
name|'list_notifier'
op|'.'
name|'_reset_drivers'
op|'('
op|')'
newline|'\n'
name|'super'
op|'('
name|'NotifierListTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_notifications_successfully
dedent|''
name|'def'
name|'test_send_notifications_successfully'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'notification_driver'
op|'='
string|"'nova.notifier.list_notifier'"
op|','
nl|'\n'
name|'list_notifier_drivers'
op|'='
op|'['
string|"'nova.notifier.no_op_notifier'"
op|','
nl|'\n'
string|"'nova.notifier.no_op_notifier'"
op|']'
op|')'
newline|'\n'
name|'notify'
op|'('
string|"'publisher_id'"
op|','
string|"'event_type'"
op|','
nl|'\n'
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'api'
op|'.'
name|'WARN'
op|','
name|'dict'
op|'('
name|'a'
op|'='
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'notify_count'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'exception_count'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sys_exit_code'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_send_notifications_with_errors
dedent|''
name|'def'
name|'test_send_notifications_with_errors'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'notification_driver'
op|'='
string|"'nova.notifier.list_notifier'"
op|','
nl|'\n'
name|'list_notifier_drivers'
op|'='
op|'['
string|"'nova.notifier.no_op_notifier'"
op|','
nl|'\n'
string|"'nova.notifier.log_notifier'"
op|']'
op|')'
newline|'\n'
name|'notify'
op|'('
string|"'publisher_id'"
op|','
string|"'event_type'"
op|','
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'api'
op|'.'
name|'WARN'
op|','
name|'dict'
op|'('
name|'a'
op|'='
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'notify_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'exception_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sys_exit_code'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_when_driver_fails_to_import
dedent|''
name|'def'
name|'test_when_driver_fails_to_import'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'notification_driver'
op|'='
string|"'nova.notifier.list_notifier'"
op|','
nl|'\n'
name|'list_notifier_drivers'
op|'='
op|'['
string|"'nova.notifier.no_op_notifier'"
op|','
nl|'\n'
string|"'nova.notifier.logo_notifier'"
op|','
nl|'\n'
string|"'fdsjgsdfhjkhgsfkj'"
op|']'
op|')'
newline|'\n'
name|'notify'
op|'('
string|"'publisher_id'"
op|','
string|"'event_type'"
op|','
name|'nova'
op|'.'
name|'notifier'
op|'.'
name|'api'
op|'.'
name|'WARN'
op|','
name|'dict'
op|'('
name|'a'
op|'='
number|'3'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'exception_count'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'notify_count'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'sys_exit_code'
op|','
number|'2'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nProvides common functionality for integrated unit tests\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'string'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_log'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'crypto'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'image'
op|'.'
name|'glance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'service'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
name|'as'
name|'nova_fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'functional'
op|'.'
name|'api'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'cast_as_call'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_crypto'
newline|'\n'
name|'import'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'image'
op|'.'
name|'fake'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'manager'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_random_alphanumeric
name|'def'
name|'generate_random_alphanumeric'
op|'('
name|'length'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates a random alphanumeric string of specified length."""'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
name|'string'
op|'.'
name|'ascii_uppercase'
op|'+'
name|'string'
op|'.'
name|'digits'
op|')'
nl|'\n'
name|'for'
name|'_x'
name|'in'
name|'range'
op|'('
name|'length'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_random_numeric
dedent|''
name|'def'
name|'generate_random_numeric'
op|'('
name|'length'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates a random numeric string of specified length."""'
newline|'\n'
name|'return'
string|"''"
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
name|'string'
op|'.'
name|'digits'
op|')'
nl|'\n'
name|'for'
name|'_x'
name|'in'
name|'range'
op|'('
name|'length'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|generate_new_element
dedent|''
name|'def'
name|'generate_new_element'
op|'('
name|'items'
op|','
name|'prefix'
op|','
name|'numeric'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Creates a random string with prefix, that is not in \'items\' list."""'
newline|'\n'
name|'while'
name|'True'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'numeric'
op|':'
newline|'\n'
indent|'            '
name|'candidate'
op|'='
name|'prefix'
op|'+'
name|'generate_random_numeric'
op|'('
number|'8'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'candidate'
op|'='
name|'prefix'
op|'+'
name|'generate_random_alphanumeric'
op|'('
number|'8'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'candidate'
name|'not'
name|'in'
name|'items'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'candidate'
newline|'\n'
dedent|''
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Random collision on %s"'
op|'%'
name|'candidate'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_IntegratedTestBase
dedent|''
dedent|''
name|'class'
name|'_IntegratedTestBase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|REQUIRES_LOCKING
indent|'    '
name|'REQUIRES_LOCKING'
op|'='
name|'True'
newline|'\n'
DECL|variable|ADMIN_API
name|'ADMIN_API'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'_IntegratedTestBase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'f'
op|'='
name|'self'
op|'.'
name|'_get_flags'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
op|'**'
name|'f'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'verbose'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'image'
op|'.'
name|'fake'
op|'.'
name|'stub_out_image_service'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'crypto'
op|','
string|"'ensure_ca_filesystem'"
op|','
nl|'\n'
name|'fake_crypto'
op|'.'
name|'ensure_ca_filesystem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'crypto'
op|','
string|"'fetch_ca'"
op|','
nl|'\n'
name|'fake_crypto'
op|'.'
name|'fetch_ca'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'crypto'
op|','
string|"'generate_x509_cert'"
op|','
nl|'\n'
name|'fake_crypto'
op|'.'
name|'generate_x509_cert'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_services'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'api_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
nl|'\n'
name|'nova_fixtures'
op|'.'
name|'OSAPIFixture'
op|'('
name|'self'
op|'.'
name|'api_major_version'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# if the class needs to run as admin, make the api endpoint'
nl|'\n'
comment|"# the admin, otherwise it's safer to run as non admin user."
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'ADMIN_API'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'='
name|'self'
op|'.'
name|'api_fixture'
op|'.'
name|'admin_api'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'='
name|'self'
op|'.'
name|'api_fixture'
op|'.'
name|'api'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'cast_as_call'
op|'.'
name|'CastAsCall'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'image'
op|'.'
name|'fake'
op|'.'
name|'FakeImageService_reset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_compute_service
dedent|''
name|'def'
name|'_setup_compute_service'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'compute'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_scheduler_service
dedent|''
name|'def'
name|'_setup_scheduler_service'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'scheduler_driver'
op|'='
string|"'nova.scheduler.'"
nl|'\n'
string|"'chance.ChanceScheduler'"
op|')'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'scheduler'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_services
dedent|''
name|'def'
name|'_setup_services'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'conductor'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'conductor'"
op|','
nl|'\n'
name|'manager'
op|'='
name|'CONF'
op|'.'
name|'conductor'
op|'.'
name|'manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'self'
op|'.'
name|'_setup_compute_service'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cert'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'cert'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'consoleauth'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'consoleauth'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'scheduler'
op|'='
name|'self'
op|'.'
name|'_setup_scheduler_service'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'cells'"
op|','
name|'manager'
op|'='
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'manager'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_test_client
dedent|''
name|'def'
name|'_get_test_client'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'client'
op|'.'
name|'TestOpenStackClient'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
name|'self'
op|'.'
name|'auth_url'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_start_api_service
dedent|''
name|'def'
name|'_start_api_service'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'osapi'
op|'='
name|'service'
op|'.'
name|'WSGIService'
op|'('
string|'"osapi_compute"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'start'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'auth_url'
op|'='
string|"'http://%(host)s:%(port)s/%(api_version)s'"
op|'%'
op|'('
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'host'
op|','
string|"'port'"
op|':'
name|'self'
op|'.'
name|'osapi'
op|'.'
name|'port'
op|','
nl|'\n'
string|"'api_version'"
op|':'
name|'self'
op|'.'
name|'api_major_version'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_flags
dedent|''
name|'def'
name|'_get_flags'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allow subclass to modify global config before we start services."""'
newline|'\n'
comment|'# NOTE(sdague): _get_flags is used by about 13 tests that'
nl|'\n'
comment|'# subclass this mostly to modify the extensions list. We'
nl|'\n'
comment|'# should instead make that declarative in the future, at which'
nl|'\n'
comment|'# point we can get rid of this.'
nl|'\n'
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|get_unused_server_name
dedent|''
name|'def'
name|'get_unused_server_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'servers'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_servers'
op|'('
op|')'
newline|'\n'
name|'server_names'
op|'='
op|'['
name|'server'
op|'['
string|"'name'"
op|']'
name|'for'
name|'server'
name|'in'
name|'servers'
op|']'
newline|'\n'
name|'return'
name|'generate_new_element'
op|'('
name|'server_names'
op|','
string|"'server'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_unused_flavor_name_id
dedent|''
name|'def'
name|'get_unused_flavor_name_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flavors'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_flavors'
op|'('
op|')'
newline|'\n'
name|'flavor_names'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
name|'flavor_ids'
op|'='
name|'list'
op|'('
op|')'
newline|'\n'
op|'['
op|'('
name|'flavor_names'
op|'.'
name|'append'
op|'('
name|'flavor'
op|'['
string|"'name'"
op|']'
op|')'
op|','
nl|'\n'
name|'flavor_ids'
op|'.'
name|'append'
op|'('
name|'flavor'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
nl|'\n'
name|'for'
name|'flavor'
name|'in'
name|'flavors'
op|']'
newline|'\n'
name|'return'
op|'('
name|'generate_new_element'
op|'('
name|'flavor_names'
op|','
string|"'flavor'"
op|')'
op|','
nl|'\n'
name|'int'
op|'('
name|'generate_new_element'
op|'('
name|'flavor_ids'
op|','
string|"''"
op|','
name|'True'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_invalid_image
dedent|''
name|'def'
name|'get_invalid_image'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_any_image_href
dedent|''
name|'def'
name|'_get_any_image_href'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'image'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_images'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Image: %s"'
op|'%'
name|'image'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_image_ref_parameter'
name|'in'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'image_href'
op|'='
name|'image'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_href'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'image_href'
op|'='
string|"'http://fake.server/%s'"
op|'%'
name|'image_href'
newline|'\n'
dedent|''
name|'return'
name|'image_href'
newline|'\n'
nl|'\n'
DECL|member|_build_minimal_create_server_request
dedent|''
name|'def'
name|'_build_minimal_create_server_request'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'image_href'
op|'='
name|'self'
op|'.'
name|'_get_any_image_href'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# We now have a valid imageId'
nl|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|'='
name|'image_href'
newline|'\n'
nl|'\n'
comment|'# Set a valid flavorId'
nl|'\n'
name|'flavor'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_flavors'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Using flavor: %s"'
op|'%'
name|'flavor'
op|')'
newline|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_flavor_ref_parameter'
op|']'
op|'='
op|'('
string|"'http://fake.server/%s'"
nl|'\n'
op|'%'
name|'flavor'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set a valid server name'
nl|'\n'
name|'server_name'
op|'='
name|'self'
op|'.'
name|'get_unused_server_name'
op|'('
op|')'
newline|'\n'
name|'server'
op|'['
string|"'name'"
op|']'
op|'='
name|'server_name'
newline|'\n'
name|'return'
name|'server'
newline|'\n'
nl|'\n'
DECL|member|_create_flavor_body
dedent|''
name|'def'
name|'_create_flavor_body'
op|'('
name|'self'
op|','
name|'name'
op|','
name|'ram'
op|','
name|'vcpus'
op|','
name|'disk'
op|','
name|'ephemeral'
op|','
name|'id'
op|','
name|'swap'
op|','
nl|'\n'
name|'rxtx_factor'
op|','
name|'is_public'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
nl|'\n'
string|'"flavor"'
op|':'
op|'{'
nl|'\n'
string|'"name"'
op|':'
name|'name'
op|','
nl|'\n'
string|'"ram"'
op|':'
name|'ram'
op|','
nl|'\n'
string|'"vcpus"'
op|':'
name|'vcpus'
op|','
nl|'\n'
string|'"disk"'
op|':'
name|'disk'
op|','
nl|'\n'
string|'"OS-FLV-EXT-DATA:ephemeral"'
op|':'
name|'ephemeral'
op|','
nl|'\n'
string|'"id"'
op|':'
name|'id'
op|','
nl|'\n'
string|'"swap"'
op|':'
name|'swap'
op|','
nl|'\n'
string|'"rxtx_factor"'
op|':'
name|'rxtx_factor'
op|','
nl|'\n'
string|'"os-flavor-access:is_public"'
op|':'
name|'is_public'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_create_flavor
dedent|''
name|'def'
name|'_create_flavor'
op|'('
name|'self'
op|','
name|'memory_mb'
op|'='
number|'2048'
op|','
name|'vcpu'
op|'='
number|'2'
op|','
name|'disk'
op|'='
number|'10'
op|','
name|'ephemeral'
op|'='
number|'10'
op|','
nl|'\n'
name|'swap'
op|'='
number|'0'
op|','
name|'rxtx_factor'
op|'='
number|'1.0'
op|','
name|'is_public'
op|'='
name|'True'
op|','
nl|'\n'
name|'extra_spec'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'flv_name'
op|','
name|'flv_id'
op|'='
name|'self'
op|'.'
name|'get_unused_flavor_name_id'
op|'('
op|')'
newline|'\n'
name|'body'
op|'='
name|'self'
op|'.'
name|'_create_flavor_body'
op|'('
name|'flv_name'
op|','
name|'memory_mb'
op|','
name|'vcpu'
op|','
name|'disk'
op|','
nl|'\n'
name|'ephemeral'
op|','
name|'flv_id'
op|','
name|'swap'
op|','
name|'rxtx_factor'
op|','
nl|'\n'
name|'is_public'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api_fixture'
op|'.'
name|'admin_api'
op|'.'
name|'post_flavor'
op|'('
name|'body'
op|')'
newline|'\n'
name|'if'
name|'extra_spec'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'spec'
op|'='
op|'{'
string|'"extra_specs"'
op|':'
name|'extra_spec'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'api_fixture'
op|'.'
name|'admin_api'
op|'.'
name|'post_extra_spec'
op|'('
name|'flv_id'
op|','
name|'spec'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'flv_id'
newline|'\n'
nl|'\n'
DECL|member|_build_server
dedent|''
name|'def'
name|'_build_server'
op|'('
name|'self'
op|','
name|'flavor_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'server'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
name|'image_href'
op|'='
name|'self'
op|'.'
name|'_get_any_image_href'
op|'('
op|')'
newline|'\n'
name|'image'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_images'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Image: %s"'
op|'%'
name|'image'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'_image_ref_parameter'
name|'in'
name|'image'
op|':'
newline|'\n'
indent|'            '
name|'image_href'
op|'='
name|'image'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'image_href'
op|'='
name|'image'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'image_href'
op|'='
string|"'http://fake.server/%s'"
op|'%'
name|'image_href'
newline|'\n'
nl|'\n'
comment|'# We now have a valid imageId'
nl|'\n'
dedent|''
name|'server'
op|'['
name|'self'
op|'.'
name|'_image_ref_parameter'
op|']'
op|'='
name|'image_href'
newline|'\n'
nl|'\n'
comment|'# Set a valid flavorId'
nl|'\n'
name|'flavor'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'get_flavor'
op|'('
name|'flavor_id'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"Using flavor: %s"'
op|'%'
name|'flavor'
op|')'
newline|'\n'
name|'server'
op|'['
name|'self'
op|'.'
name|'_flavor_ref_parameter'
op|']'
op|'='
op|'('
string|"'http://fake.server/%s'"
nl|'\n'
op|'%'
name|'flavor'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set a valid server name'
nl|'\n'
name|'server_name'
op|'='
name|'self'
op|'.'
name|'get_unused_server_name'
op|'('
op|')'
newline|'\n'
name|'server'
op|'['
string|"'name'"
op|']'
op|'='
name|'server_name'
newline|'\n'
name|'return'
name|'server'
newline|'\n'
nl|'\n'
DECL|member|_check_api_endpoint
dedent|''
name|'def'
name|'_check_api_endpoint'
op|'('
name|'self'
op|','
name|'endpoint'
op|','
name|'expected_middleware'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'app'
op|'='
name|'self'
op|'.'
name|'api_fixture'
op|'.'
name|'osapi'
op|'.'
name|'app'
op|'.'
name|'get'
op|'('
op|'('
name|'None'
op|','
string|"'/v2'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'while'
name|'getattr'
op|'('
name|'app'
op|','
string|"'application'"
op|','
name|'False'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'middleware'
name|'in'
name|'expected_middleware'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'isinstance'
op|'('
name|'app'
op|'.'
name|'application'
op|','
name|'middleware'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'expected_middleware'
op|'.'
name|'remove'
op|'('
name|'middleware'
op|')'
newline|'\n'
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'app'
op|'='
name|'app'
op|'.'
name|'application'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
nl|'\n'
name|'expected_middleware'
op|','
nl|'\n'
op|'('
string|'"The expected wsgi middlewares %s are not "'
nl|'\n'
string|'"existed"'
op|')'
op|'%'
name|'expected_middleware'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

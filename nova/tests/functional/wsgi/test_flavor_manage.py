begin_unit
comment|'# Copyright 2015 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
name|'as'
name|'ex'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
name|'as'
name|'nova_fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'functional'
name|'import'
name|'integrated_helpers'
name|'as'
name|'helper'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|rand_flavor
name|'def'
name|'rand_flavor'
op|'('
op|')'
op|':'
newline|'\n'
indent|'    '
name|'flav'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'name-%s'"
op|'%'
name|'helper'
op|'.'
name|'generate_random_alphanumeric'
op|'('
number|'10'
op|')'
op|','
nl|'\n'
string|"'id'"
op|':'
name|'helper'
op|'.'
name|'generate_random_alphanumeric'
op|'('
number|'10'
op|')'
op|','
nl|'\n'
string|"'ram'"
op|':'
name|'int'
op|'('
name|'helper'
op|'.'
name|'generate_random_numeric'
op|'('
number|'2'
op|')'
op|')'
op|','
nl|'\n'
string|"'disk'"
op|':'
name|'int'
op|'('
name|'helper'
op|'.'
name|'generate_random_numeric'
op|'('
number|'3'
op|')'
op|')'
op|','
nl|'\n'
string|"'vcpus'"
op|':'
name|'int'
op|'('
name|'helper'
op|'.'
name|'generate_random_numeric'
op|'('
number|'1'
op|')'
op|')'
op|'+'
number|'1'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'return'
name|'flav'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlavorManageFullstack
dedent|''
name|'class'
name|'FlavorManageFullstack'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests for flavors manage administrative command.\n\n    Extention: os-flavors-manage\n\n    os-flavors-manage adds a set of admin functions to the flavors\n    resource for create and delete of flavors.\n\n    POST /v2/flavors:\n\n    {\n        \'name\': NAME, # string, required unique\n        \'id\': ID, # string, required unique\n        \'ram\': RAM, # in MB, required\n        \'vcpus\': VCPUS, # int value, required\n        \'disk\': DISK, # in GB, required\n        \'OS-FLV-EXT-DATA:ephemeral\', # in GB, ephemeral disk size\n        \'is_public\': IS_PUBLIC, # boolean\n        \'swap\': SWAP, # in GB?\n        \'rxtx_factor\': RXTX, # ???\n    }\n\n    Returns Flavor\n\n    DELETE /v2/flavors/ID\n\n\n    Functional Test Scope::\n\n    This test starts the wsgi stack for the nova api services, uses an\n    in memory database to ensure the path through the wsgi layer to\n    the database.\n\n    """'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FlavorManageFullstack'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'nova_fixtures'
op|'.'
name|'OSAPIFixture'
op|'('
op|')'
op|')'
op|'.'
name|'api'
newline|'\n'
nl|'\n'
DECL|member|assertFlavorDbEqual
dedent|''
name|'def'
name|'assertFlavorDbEqual'
op|'('
name|'self'
op|','
name|'flav'
op|','
name|'flavdb'
op|')'
op|':'
newline|'\n'
comment|'# a mapping of the REST params to the db fields'
nl|'\n'
indent|'        '
name|'mapping'
op|'='
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'name'"
op|','
nl|'\n'
string|"'disk'"
op|':'
string|"'root_gb'"
op|','
nl|'\n'
string|"'ram'"
op|':'
string|"'memory_mb'"
op|','
nl|'\n'
string|"'vcpus'"
op|':'
string|"'vcpus'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'flavorid'"
op|','
nl|'\n'
string|"'swap'"
op|':'
string|"'swap'"
nl|'\n'
op|'}'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'mapping'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
name|'in'
name|'flav'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'flav'
op|'['
name|'k'
op|']'
op|','
name|'flavdb'
op|'['
name|'v'
op|']'
op|','
nl|'\n'
string|'"%s != %s"'
op|'%'
op|'('
name|'flav'
op|','
name|'flavdb'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flavor_manage_func_negative
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_flavor_manage_func_negative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test for various API failure conditions'
nl|'\n'
comment|'# bad body is 400'
nl|'\n'
indent|'        '
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_request'
op|'('
string|"'flavors'"
op|','
name|'method'
op|'='
string|"'POST'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'400'
op|','
name|'resp'
op|'.'
name|'status_code'
op|')'
newline|'\n'
nl|'\n'
comment|'# get unknown flavor is 404'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_request'
op|'('
string|"'flavors/foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'404'
op|','
name|'resp'
op|'.'
name|'status_code'
op|')'
newline|'\n'
nl|'\n'
comment|'# delete unknown flavor is 404'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_request'
op|'('
string|"'flavors/foo'"
op|','
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'404'
op|','
name|'resp'
op|'.'
name|'status_code'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flavor_manage_func
dedent|''
name|'def'
name|'test_flavor_manage_func'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'flav1'
op|'='
op|'{'
nl|'\n'
string|"'flavor'"
op|':'
name|'rand_flavor'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Create flavor and ensure it made it to the database'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_post'
op|'('
string|"'flavors'"
op|','
name|'flav1'
op|')'
newline|'\n'
nl|'\n'
name|'flav1db'
op|'='
name|'db'
op|'.'
name|'flavor_get_by_flavor_id'
op|'('
name|'ctx'
op|','
name|'flav1'
op|'['
string|"'flavor'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFlavorDbEqual'
op|'('
name|'flav1'
op|'['
string|"'flavor'"
op|']'
op|','
name|'flav1db'
op|')'
newline|'\n'
nl|'\n'
comment|'# Delete flavor and ensure it was removed from the database'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_request'
op|'('
string|"'flavors/%s'"
op|'%'
name|'flav1'
op|'['
string|"'flavor'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ex'
op|'.'
name|'FlavorNotFound'
op|','
nl|'\n'
name|'db'
op|'.'
name|'flavor_get_by_flavor_id'
op|','
nl|'\n'
name|'ctx'
op|','
name|'flav1'
op|'['
string|"'flavor'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'resp'
op|'='
name|'self'
op|'.'
name|'api'
op|'.'
name|'api_request'
op|'('
string|"'flavors/%s'"
op|'%'
name|'flav1'
op|'['
string|"'flavor'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'method'
op|'='
string|"'DELETE'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'404'
op|','
name|'resp'
op|'.'
name|'status_code'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

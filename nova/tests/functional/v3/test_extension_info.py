begin_unit
comment|'# Copyright 2012 Nebula, Inc.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'extensions'
name|'as'
name|'api_extensions'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'functional'
op|'.'
name|'v3'
name|'import'
name|'api_sample_base'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExtensionInfoSamplesJsonTest
name|'class'
name|'ExtensionInfoSamplesJsonTest'
op|'('
name|'api_sample_base'
op|'.'
name|'ApiSampleTestBaseV3'
op|')'
op|':'
newline|'\n'
DECL|variable|sample_dir
indent|'    '
name|'sample_dir'
op|'='
string|'"extension-info"'
newline|'\n'
nl|'\n'
DECL|member|test_list_extensions
name|'def'
name|'test_list_extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'self'
op|'.'
name|'_do_get'
op|'('
string|"'extensions'"
op|')'
newline|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'_get_regexes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_response'
op|'('
string|"'extensions-list-resp'"
op|','
name|'subs'
op|','
name|'response'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_extensions
dedent|''
name|'def'
name|'test_get_extensions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'response'
op|'='
name|'self'
op|'.'
name|'_do_get'
op|'('
string|"'extensions/flavors'"
op|')'
newline|'\n'
name|'subs'
op|'='
name|'self'
op|'.'
name|'_get_regexes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_response'
op|'('
string|"'extensions-get-resp'"
op|','
name|'subs'
op|','
name|'response'
op|','
number|'200'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ExtensionInfoFormatTest
dedent|''
dedent|''
name|'class'
name|'ExtensionInfoFormatTest'
op|'('
name|'api_sample_base'
op|'.'
name|'ApiSampleTestBaseV3'
op|')'
op|':'
newline|'\n'
comment|'# NOTE: To check all extension formats, here makes authorize() return True'
nl|'\n'
comment|'# always instead of fake_policy.py because most extensions are not set as'
nl|'\n'
comment|'# "discoverable" in fake_policy.py.'
nl|'\n'
DECL|variable|all_extensions
indent|'    '
name|'all_extensions'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_test_list_extensions
name|'def'
name|'_test_list_extensions'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'pattern'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'api_extensions'
op|','
nl|'\n'
string|"'soft_extension_authorizer'"
op|')'
name|'as'
name|'api_mock'
op|':'
newline|'\n'
DECL|function|fake_soft_extension_authorizer
indent|'            '
name|'def'
name|'fake_soft_extension_authorizer'
op|'('
name|'api_name'
op|','
name|'extension_name'
op|')'
op|':'
newline|'\n'
DECL|function|authorize
indent|'                '
name|'def'
name|'authorize'
op|'('
name|'context'
op|','
name|'action'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'authorize'
newline|'\n'
nl|'\n'
dedent|''
name|'api_mock'
op|'.'
name|'side_effect'
op|'='
name|'fake_soft_extension_authorizer'
newline|'\n'
name|'response'
op|'='
name|'self'
op|'.'
name|'_do_get'
op|'('
string|"'extensions'"
op|')'
newline|'\n'
name|'response'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'response'
op|'.'
name|'content'
op|')'
newline|'\n'
name|'extensions'
op|'='
name|'response'
op|'['
string|"'extensions'"
op|']'
newline|'\n'
name|'pattern_comp'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
name|'pattern'
op|')'
newline|'\n'
name|'for'
name|'ext'
name|'in'
name|'extensions'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'pattern_comp'
op|'.'
name|'match'
op|'('
name|'ext'
op|'['
name|'key'
op|']'
op|')'
op|','
nl|'\n'
string|"'%s does not match with %s'"
op|'%'
op|'('
name|'ext'
op|'['
name|'key'
op|']'
op|','
nl|'\n'
name|'pattern'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_extensions_name_format
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_list_extensions_name_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# name should be CamelCase.'
nl|'\n'
indent|'        '
name|'pattern'
op|'='
string|"'^[A-Z]{1}[a-z]{1}[a-zA-Z]*$'"
newline|'\n'
name|'self'
op|'.'
name|'_test_list_extensions'
op|'('
string|"'name'"
op|','
name|'pattern'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_extensions_alias_format
dedent|''
name|'def'
name|'test_list_extensions_alias_format'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# alias should contain lowercase chars and '-' only."
nl|'\n'
indent|'        '
name|'pattern'
op|'='
string|"'^[a-z-]+$'"
newline|'\n'
name|'self'
op|'.'
name|'_test_list_extensions'
op|'('
string|"'alias'"
op|','
name|'pattern'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTests for database migrations.\nThere are "opportunistic" tests which allows testing against all 3 databases\n(sqlite in memory, mysql, pg) in a properly configured unit test environment.\n\nFor the opportunistic testing you need to set up db\'s named \'openstack_citest\'\nwith user \'openstack_citest\' and password \'openstack_citest\' on localhost. The\ntest will then use that db and u/p combo to run the tests.\n\nFor postgres on Ubuntu this can be done with the following commands::\n\n| sudo -u postgres psql\n| postgres=# create user openstack_citest with createdb login password\n|       \'openstack_citest\';\n| postgres=# create database openstack_citest with owner openstack_citest;\n\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'migrate'
op|'.'
name|'versioning'
name|'import'
name|'repository'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'oslo_config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo_db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'test_base'
newline|'\n'
name|'from'
name|'oslo_db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'test_migrations'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
name|'import'
name|'migration'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'api_migrations'
name|'import'
name|'migrate_repo'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'migration'
name|'as'
name|'sa_migration'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaAPIModelsSync
name|'class'
name|'NovaAPIModelsSync'
op|'('
name|'test_migrations'
op|'.'
name|'ModelsMigrationsSync'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Test that the models match the database after migrations are run."""'
newline|'\n'
nl|'\n'
DECL|member|db_sync
name|'def'
name|'db_sync'
op|'('
name|'self'
op|','
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'sa_migration'
op|','
string|"'get_engine'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'engine'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'sa_migration'
op|'.'
name|'db_sync'
op|'('
name|'database'
op|'='
string|"'api'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|migrate_engine
name|'def'
name|'migrate_engine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'engine'
newline|'\n'
nl|'\n'
DECL|member|get_engine
dedent|''
name|'def'
name|'get_engine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'migrate_engine'
newline|'\n'
nl|'\n'
DECL|member|test_models_sync
dedent|''
name|'def'
name|'test_models_sync'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# TODO(alaski): Remove this override to run the test when there are'
nl|'\n'
comment|'# models'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|get_metadata
dedent|''
name|'def'
name|'get_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# TODO(alaski): Add model metadata once the first model is defined'
nl|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|member|include_object
dedent|''
name|'def'
name|'include_object'
op|'('
name|'self'
op|','
name|'object_'
op|','
name|'name'
op|','
name|'type_'
op|','
name|'reflected'
op|','
name|'compare_to'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'type_'
op|'=='
string|"'table'"
op|':'
newline|'\n'
comment|'# migrate_version is a sqlalchemy-migrate control table and'
nl|'\n'
comment|"# isn't included in the model."
nl|'\n'
indent|'            '
name|'if'
name|'name'
op|'=='
string|"'migrate_version'"
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestNovaAPIMigrationsSQLite'
op|'('
name|'NovaAPIModelsSync'
op|','
nl|'\n'
name|'test_base'
op|'.'
name|'DbTestCase'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsSQLite
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestNovaAPIMigrationsMySQL'
op|'('
name|'NovaAPIModelsSync'
op|','
nl|'\n'
name|'test_base'
op|'.'
name|'MySQLOpportunisticTestCase'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsMySQL
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestNovaAPIMigrationsPostgreSQL'
op|'('
name|'NovaAPIModelsSync'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsPostgreSQL
name|'test_base'
op|'.'
name|'PostgreSQLOpportunisticTestCase'
op|','
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaAPIMigrationsWalk
dedent|''
name|'class'
name|'NovaAPIMigrationsWalk'
op|'('
name|'test_migrations'
op|'.'
name|'WalkVersionsMixin'
op|')'
op|':'
newline|'\n'
DECL|variable|snake_walk
indent|'    '
name|'snake_walk'
op|'='
name|'True'
newline|'\n'
DECL|variable|downgrade
name|'downgrade'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NovaAPIMigrationsWalk'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|'# NOTE(viktors): We should reduce log output because it causes issues,'
nl|'\n'
comment|'#                when we run tests with testr'
nl|'\n'
name|'migrate_log'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
string|"'migrate'"
op|')'
newline|'\n'
name|'old_level'
op|'='
name|'migrate_log'
op|'.'
name|'level'
newline|'\n'
name|'migrate_log'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'WARN'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'migrate_log'
op|'.'
name|'setLevel'
op|','
name|'old_level'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|INIT_VERSION
name|'def'
name|'INIT_VERSION'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'migration'
op|'.'
name|'db_initial_version'
op|'('
string|"'api'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|REPOSITORY
name|'def'
name|'REPOSITORY'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'repository'
op|'.'
name|'Repository'
op|'('
nl|'\n'
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'migrate_repo'
op|'.'
name|'__file__'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|migration_api
name|'def'
name|'migration_api'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'sa_migration'
op|'.'
name|'versioning_api'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'property'
newline|'\n'
DECL|member|migrate_engine
name|'def'
name|'migrate_engine'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'engine'
newline|'\n'
nl|'\n'
DECL|member|test_walk_versions
dedent|''
name|'def'
name|'test_walk_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'walk_versions'
op|'('
name|'self'
op|'.'
name|'snake_walk'
op|','
name|'self'
op|'.'
name|'downgrade'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestNovaAPIMigrationsWalkSQLite'
op|'('
name|'NovaAPIMigrationsWalk'
op|','
nl|'\n'
name|'test_base'
op|'.'
name|'DbTestCase'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsWalkSQLite
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestNovaAPIMigrationsWalkMySQL'
op|'('
name|'NovaAPIMigrationsWalk'
op|','
nl|'\n'
name|'test_base'
op|'.'
name|'MySQLOpportunisticTestCase'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsWalkMySQL
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'class'
name|'TestNovaAPIMigrationsWalkPostgreSQL'
op|'('
name|'NovaAPIMigrationsWalk'
op|','
nl|'\n'
DECL|class|TestNovaAPIMigrationsWalkPostgreSQL
name|'test_base'
op|'.'
name|'PostgreSQLOpportunisticTestCase'
op|','
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pass'
newline|'\n'
dedent|''
endmarker|''
end_unit

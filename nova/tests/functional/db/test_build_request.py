begin_unit
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'oslo_utils'
name|'import'
name|'uuidutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'build_request'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_build_request'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_request_spec'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
op|'.'
name|'objects'
name|'import'
name|'test_objects'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|BuildRequestTestCase
name|'class'
name|'BuildRequestTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|USES_DB_SELF
indent|'    '
name|'USES_DB_SELF'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'BuildRequestTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
comment|"# NOTE: This means that we're using a database for this test suite"
nl|'\n'
comment|'# despite inheriting from NoDBTestCase'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'Database'
op|'('
name|'database'
op|'='
string|"'api'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake-user'"
op|','
string|"'fake-project'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'build_req_obj'
op|'='
name|'build_request'
op|'.'
name|'BuildRequest'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'uuidutils'
op|'.'
name|'generate_uuid'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake-project'"
newline|'\n'
nl|'\n'
DECL|member|_create_req
dedent|''
name|'def'
name|'_create_req'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req_spec'
op|'='
name|'fake_request_spec'
op|'.'
name|'fake_spec_obj'
op|'('
name|'remove_id'
op|'='
name|'True'
op|')'
newline|'\n'
name|'req_spec'
op|'.'
name|'instance_uuid'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'req_spec'
op|'.'
name|'create'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
name|'fake_build_request'
op|'.'
name|'fake_db_req'
op|'('
nl|'\n'
name|'request_spec_id'
op|'='
name|'req_spec'
op|'.'
name|'id'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'pop'
op|'('
string|"'id'"
op|','
name|'None'
op|')'
newline|'\n'
name|'args'
op|'.'
name|'pop'
op|'('
string|"'request_spec'"
op|','
name|'None'
op|')'
newline|'\n'
name|'args'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
newline|'\n'
name|'args'
op|'['
string|"'project_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'project_id'
newline|'\n'
name|'return'
name|'build_request'
op|'.'
name|'BuildRequest'
op|'.'
name|'_from_db_object'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'build_req_obj'
op|','
nl|'\n'
name|'self'
op|'.'
name|'build_req_obj'
op|'.'
name|'_create_in_db'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_by_instance_uuid_not_found
dedent|''
name|'def'
name|'test_get_by_instance_uuid_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'BuildRequestNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'build_req_obj'
op|'.'
name|'_get_by_instance_uuid_from_db'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_by_uuid
dedent|''
name|'def'
name|'test_get_by_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'self'
op|'.'
name|'_create_req'
op|'('
op|')'
newline|'\n'
name|'db_req'
op|'='
name|'self'
op|'.'
name|'build_req_obj'
op|'.'
name|'_get_by_instance_uuid_from_db'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'flavor_comp'
op|'='
name|'functools'
op|'.'
name|'partial'
op|'('
name|'test_objects'
op|'.'
name|'compare_obj'
op|','
name|'self'
op|','
nl|'\n'
name|'allow_missing'
op|'='
op|'['
string|"'deleted'"
op|','
string|"'deleted_at'"
op|','
string|"'created_at'"
op|','
nl|'\n'
string|"'updated_at'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|date_comp
name|'def'
name|'date_comp'
op|'('
name|'db_val'
op|','
name|'obj_val'
op|')'
op|':'
newline|'\n'
comment|'# We have this separate comparison method because compare_obj below'
nl|'\n'
comment|"# assumes that db datetimes are tz unaware. That's normally true"
nl|'\n'
comment|"# but not when they're part of a serialized object and not a"
nl|'\n'
comment|'# dedicated datetime column.'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'db_val'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
name|'obj_val'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'self'
op|'.'
name|'build_req_obj'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'getattr'
op|'('
name|'req'
op|','
name|'key'
op|')'
newline|'\n'
name|'db_value'
op|'='
name|'db_req'
op|'['
name|'key'
op|']'
newline|'\n'
name|'if'
name|'key'
op|'=='
string|"'request_spec'"
op|':'
newline|'\n'
comment|"# NOTE: The object and db value can't be compared directly as"
nl|'\n'
comment|'# objects, so serialize them to a comparable form.'
nl|'\n'
indent|'                '
name|'db_value'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'objects'
op|'.'
name|'RequestSpec'
op|'.'
name|'_from_db_object'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'objects'
op|'.'
name|'RequestSpec'
op|'('
op|')'
op|','
nl|'\n'
name|'db_value'
op|')'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'expected'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
name|'build_request'
op|'.'
name|'OBJECT_FIELDS'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'expected'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
name|'build_request'
op|'.'
name|'JSON_FIELDS'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'expected'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
name|'build_request'
op|'.'
name|'IP_FIELDS'
op|':'
newline|'\n'
indent|'                '
name|'expected'
op|'='
name|'str'
op|'('
name|'expected'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
name|'in'
op|'['
string|"'created_at'"
op|','
string|"'updated_at'"
op|']'
op|':'
newline|'\n'
comment|'# Objects store tz aware datetimes but the db does not.'
nl|'\n'
indent|'                '
name|'expected'
op|'='
name|'expected'
op|'.'
name|'replace'
op|'('
name|'tzinfo'
op|'='
name|'None'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'key'
op|'=='
string|"'instance'"
op|':'
newline|'\n'
indent|'                '
name|'db_instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'obj_from_primitive'
op|'('
nl|'\n'
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'db_value'
op|')'
op|')'
newline|'\n'
name|'test_objects'
op|'.'
name|'compare_obj'
op|'('
name|'self'
op|','
name|'expected'
op|','
name|'db_instance'
op|','
nl|'\n'
comment|'# These objects are not loaded in the test instance'
nl|'\n'
name|'allow_missing'
op|'='
op|'['
string|"'pci_requests'"
op|','
string|"'numa_topology'"
op|','
nl|'\n'
string|"'pci_devices'"
op|','
string|"'security_groups'"
op|','
string|"'info_cache'"
op|','
nl|'\n'
string|"'ec2_ids'"
op|','
string|"'migration_context'"
op|','
string|"'metadata'"
op|','
nl|'\n'
string|"'vcpu_model'"
op|','
string|"'services'"
op|','
string|"'system_metadata'"
op|','
nl|'\n'
string|"'tags'"
op|','
string|"'fault'"
op|']'
op|','
nl|'\n'
name|'comparators'
op|'='
op|'{'
string|"'flavor'"
op|':'
name|'flavor_comp'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'date_comp'
op|'}'
op|')'
newline|'\n'
name|'continue'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'db_value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

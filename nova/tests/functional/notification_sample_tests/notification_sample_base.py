begin_unit
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo_serialization'
name|'import'
name|'jsonutils'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fixtures'
name|'as'
name|'nova_fixtures'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'unit'
name|'import'
name|'fake_notifier'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NotificationSampleTestBase
name|'class'
name|'NotificationSampleTestBase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for notification sample testing.\n\n    To add tests for a versioned notification you have to store a sample file\n    under doc/notification_sample directory. In the test method in the subclass\n    trigger a change in the system that expected to generate the notification\n    then use the _verify_notification function to assert if the stored sample\n    matches with the generated one.\n\n    If the notification has different payload content depending on the state\n    change you triggered then the replacements parameter of the\n    _verify_notification function can be used to override values coming from\n    the sample file.\n\n    Check nova.functional.notification_sample_tests.test_service_update as an\n    example.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotificationSampleTestBase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api_fixture'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'nova_fixtures'
op|'.'
name|'OSAPIFixture'
op|'('
nl|'\n'
name|'api_version'
op|'='
string|"'v2.1'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'api_fixture'
op|'.'
name|'api'
newline|'\n'
name|'self'
op|'.'
name|'admin_api'
op|'='
name|'api_fixture'
op|'.'
name|'admin_api'
newline|'\n'
nl|'\n'
name|'fake_notifier'
op|'.'
name|'stub_notifier'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'fake_notifier'
op|'.'
name|'reset'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_notification_sample
dedent|''
name|'def'
name|'_get_notification_sample'
op|'('
name|'self'
op|','
name|'sample'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sample_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'__file__'
op|')'
op|')'
newline|'\n'
name|'sample_dir'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'normpath'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
nl|'\n'
name|'sample_dir'
op|','
nl|'\n'
string|'"../../../../doc/notification_samples"'
op|')'
op|')'
newline|'\n'
name|'return'
name|'sample_dir'
op|'+'
string|"'/'"
op|'+'
name|'sample'
op|'+'
string|"'.json'"
newline|'\n'
nl|'\n'
DECL|member|_apply_replacements
dedent|''
name|'def'
name|'_apply_replacements'
op|'('
name|'self'
op|','
name|'replacements'
op|','
name|'sample_obj'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'replacements'
op|'='
name|'replacements'
name|'or'
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'replacements'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'obj'
op|'='
name|'sample_obj'
op|'['
string|"'payload'"
op|']'
newline|'\n'
name|'for'
name|'sub_key'
name|'in'
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|':'
op|'-'
number|'1'
op|']'
op|':'
newline|'\n'
indent|'                '
name|'obj'
op|'='
name|'obj'
op|'['
string|"'nova_object.data'"
op|']'
op|'['
name|'sub_key'
op|']'
newline|'\n'
dedent|''
name|'obj'
op|'['
string|"'nova_object.data'"
op|']'
op|'['
name|'key'
op|'.'
name|'split'
op|'('
string|"'.'"
op|')'
op|'['
op|'-'
number|'1'
op|']'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
DECL|member|_verify_notification
dedent|''
dedent|''
name|'def'
name|'_verify_notification'
op|'('
name|'self'
op|','
name|'sample_file_name'
op|','
name|'replacements'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert if the generated notification matches with the stored sample\n\n        :param sample_file_name: The name of the sample file to match relative\n                                 to doc/notification_samples\n        :param replacements: A dict of key value pairs that is used to update\n                             the payload field of the sample data before it is\n                             matched against the generated notification.\n                             The \'x.y\':\'new-value\' key-value pair selects the\n                             ["payload"]["nova_object.data"]["x"]\n                             ["nova_object.data"]["y"] value from the sample\n                             data and overrides it with \'new-value\'.\n        """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'fake_notifier'
op|'.'
name|'VERSIONED_NOTIFICATIONS'
op|')'
op|')'
newline|'\n'
name|'notification'
op|'='
name|'fake_notifier'
op|'.'
name|'VERSIONED_NOTIFICATIONS'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'with'
name|'open'
op|'('
name|'self'
op|'.'
name|'_get_notification_sample'
op|'('
name|'sample_file_name'
op|')'
op|')'
name|'as'
name|'sample'
op|':'
newline|'\n'
indent|'            '
name|'sample_data'
op|'='
name|'sample'
op|'.'
name|'read'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'sample_obj'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'sample_data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_apply_replacements'
op|'('
name|'replacements'
op|','
name|'sample_obj'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertJsonEqual'
op|'('
name|'sample_obj'
op|','
name|'notification'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

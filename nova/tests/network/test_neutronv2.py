begin_unit
comment|'# Copyright 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'uuid'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'from'
name|'neutronclient'
op|'.'
name|'common'
name|'import'
name|'exceptions'
newline|'\n'
name|'from'
name|'neutronclient'
op|'.'
name|'v2_0'
name|'import'
name|'client'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'import'
name|'six'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'flavors'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'neutronv2'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'neutronv2'
name|'import'
name|'api'
name|'as'
name|'neutronapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'neutronv2'
name|'import'
name|'constants'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
nl|'\n'
comment|'# NOTE: Neutron client raises Exception which is discouraged by HACKING.'
nl|'\n'
comment|'#       We set this variable here and use it for assertions below to avoid'
nl|'\n'
comment|'#       the hacking checks until we can make neutron client throw a custom'
nl|'\n'
comment|'#       exception class instead.'
nl|'\n'
DECL|variable|NEUTRON_CLIENT_EXCEPTION
name|'NEUTRON_CLIENT_EXCEPTION'
op|'='
name|'Exception'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyComparator
name|'class'
name|'MyComparator'
op|'('
name|'mox'
op|'.'
name|'Comparator'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'lhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lhs'
op|'='
name|'lhs'
newline|'\n'
nl|'\n'
DECL|member|_com_dict
dedent|''
name|'def'
name|'_com_dict'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'lhs'
op|')'
op|'!='
name|'len'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'lhs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'rhs'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'rhs_value'
op|'='
name|'rhs'
op|'['
name|'key'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_com'
op|'('
name|'value'
op|','
name|'rhs_value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_com_list
dedent|''
name|'def'
name|'_com_list'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'lhs'
op|')'
op|'!='
name|'len'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'lhs_value'
name|'in'
name|'lhs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'lhs_value'
name|'not'
name|'in'
name|'rhs'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_com
dedent|''
name|'def'
name|'_com'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'lhs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rhs'
name|'is'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_dict'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_list'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_list'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lhs'
op|'=='
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_com'
op|'('
name|'self'
op|'.'
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'lhs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronClient
dedent|''
dedent|''
name|'class'
name|'TestNeutronClient'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_withtoken
indent|'    '
name|'def'
name|'test_withtoken'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url_timeout'
op|'='
number|'30'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
nl|'\n'
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"__init__"'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'Client'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'auth_strategy'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'auth_strategy'
op|','
nl|'\n'
name|'endpoint_url'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url'
op|','
nl|'\n'
name|'token'
op|'='
name|'my_context'
op|'.'
name|'auth_token'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url_timeout'
op|','
nl|'\n'
name|'insecure'
op|'='
name|'False'
op|','
nl|'\n'
name|'ca_cert'
op|'='
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withouttoken
dedent|''
name|'def'
name|'test_withouttoken'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exceptions'
op|'.'
name|'Unauthorized'
op|','
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|','
nl|'\n'
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withtoken_context_is_admin
dedent|''
name|'def'
name|'test_withtoken_context_is_admin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url_timeout'
op|'='
number|'30'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
nl|'\n'
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"__init__"'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'Client'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'auth_strategy'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'auth_strategy'
op|','
nl|'\n'
name|'endpoint_url'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url'
op|','
nl|'\n'
name|'token'
op|'='
name|'my_context'
op|'.'
name|'auth_token'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url_timeout'
op|','
nl|'\n'
name|'insecure'
op|'='
name|'False'
op|','
nl|'\n'
name|'ca_cert'
op|'='
name|'None'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
comment|'# Note that although we have admin set in the context we'
nl|'\n'
comment|'# are not asking for an admin client, and so we auth with'
nl|'\n'
comment|'# our own token'
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withouttoken_keystone_connection_error
dedent|''
name|'def'
name|'test_withouttoken_keystone_connection_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'auth_strategy'
op|'='
string|"'keystone'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NEUTRON_CLIENT_EXCEPTION'
op|','
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|','
nl|'\n'
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reuse_admin_token
dedent|''
name|'def'
name|'test_reuse_admin_token'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url_timeout'
op|'='
number|'30'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'token_store'
op|'='
name|'neutronv2'
op|'.'
name|'AdminTokenStore'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'token_store'
op|'.'
name|'admin_auth_token'
op|'='
string|"'new_token'"
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|')'
newline|'\n'
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"list_networks"'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'get_auth_info'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
string|"'auth_token'"
op|':'
string|"'new_token1'"
op|'}'
op|')'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'client1'
op|'='
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|','
name|'True'
op|')'
newline|'\n'
name|'client1'
op|'.'
name|'list_networks'
op|'('
name|'retrieve_all'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'new_token1'"
op|','
name|'token_store'
op|'.'
name|'admin_auth_token'
op|')'
newline|'\n'
name|'client1'
op|'='
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|','
name|'True'
op|')'
newline|'\n'
name|'client1'
op|'.'
name|'list_networks'
op|'('
name|'retrieve_all'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'new_token1'"
op|','
name|'token_store'
op|'.'
name|'admin_auth_token'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_admin_token_updated
dedent|''
dedent|''
name|'def'
name|'test_admin_token_updated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url_timeout'
op|'='
number|'30'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'token_store'
op|'='
name|'neutronv2'
op|'.'
name|'AdminTokenStore'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'token_store'
op|'.'
name|'admin_auth_token'
op|'='
string|"'new_token'"
newline|'\n'
name|'tokens'
op|'='
op|'['
op|'{'
string|"'auth_token'"
op|':'
string|"'new_token1'"
op|'}'
op|','
op|'{'
string|"'auth_token'"
op|':'
string|"'new_token'"
op|'}'
op|']'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|')'
newline|'\n'
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"list_networks"'
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'mock'
op|'.'
name|'Mock'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'get_auth_info'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'tokens'
op|'.'
name|'pop'
op|')'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'client1'
op|'='
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|','
name|'True'
op|')'
newline|'\n'
name|'client1'
op|'.'
name|'list_networks'
op|'('
name|'retrieve_all'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'new_token'"
op|','
name|'token_store'
op|'.'
name|'admin_auth_token'
op|')'
newline|'\n'
name|'client1'
op|'='
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|','
name|'True'
op|')'
newline|'\n'
name|'client1'
op|'.'
name|'list_networks'
op|'('
name|'retrieve_all'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'new_token1'"
op|','
name|'token_store'
op|'.'
name|'admin_auth_token'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2Base
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2Base'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNeutronv2Base'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'auth_token'"
op|','
nl|'\n'
string|"'bff4a5a6b9eb4ea2a6efec6eefb77936'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'9d049e4b60b64716978ab415e6fbd5c0'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'display_name'"
op|':'
string|"'test_instance'"
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'some_host'"
op|','
nl|'\n'
string|"'security_groups'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'9d049e4b60b64716978ab415e6fbd5c0'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'uuid'
op|'.'
name|'uuid4'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'display_name'"
op|':'
string|"'test_instance2'"
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'security_groups'"
op|':'
op|'['
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nets1'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid1'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'nets1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname2'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid2'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets3'
op|'='
name|'self'
op|'.'
name|'nets2'
op|'+'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid3'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname3'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets4'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'his_netid4'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'his_netname4'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'his_tenantid'"
op|'}'
op|']'
newline|'\n'
comment|'# A network request with external networks'
nl|'\n'
name|'self'
op|'.'
name|'nets5'
op|'='
name|'self'
op|'.'
name|'nets1'
op|'+'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'the-external-one'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'out-of-this-world'"
op|','
nl|'\n'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'should-be-an-admin'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets1'
op|','
name|'self'
op|'.'
name|'nets2'
op|','
name|'self'
op|'.'
name|'nets3'
op|','
nl|'\n'
name|'self'
op|'.'
name|'nets4'
op|','
name|'self'
op|'.'
name|'nets5'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'port_address'
op|'='
string|"'10.0.1.2'"
newline|'\n'
name|'self'
op|'.'
name|'port_data1'
op|'='
op|'['
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
name|'self'
op|'.'
name|'port_address'
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac1'"
op|','
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'float_data1'
op|'='
op|'['
op|'{'
string|"'port_id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
name|'self'
op|'.'
name|'port_address'
op|','
nl|'\n'
string|"'floating_ip_address'"
op|':'
string|"'172.0.1.2'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'dhcp_port_data1'
op|'='
op|'['
op|'{'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.1.9'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'ACTIVE'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'port_address2'
op|'='
string|"'10.0.2.2'"
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'ACTIVE'"
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'my_portid2'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
nl|'\n'
op|'['
op|'{'
string|"'ip_address'"
op|':'
name|'self'
op|'.'
name|'port_address2'
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'my_subid2'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac2'"
op|','
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'float_data2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'float_data2'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'float_data1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'float_data2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'port_id'"
op|':'
string|"'my_portid2'"
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
string|"'10.0.2.2'"
op|','
nl|'\n'
string|"'floating_ip_address'"
op|':'
string|"'172.0.2.2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_data3'
op|'='
op|'['
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
string|"'device_id3'"
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'my_portid3'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|']'
op|','
comment|'# no fixed ip'
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac3'"
op|','
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data1'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_subid1'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.0.1.0/24'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'10.0.1.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.1.1'"
op|','
string|"'8.8.1.2'"
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data_n'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_subid1'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.0.1.0/24'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'10.0.1.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.1.1'"
op|','
string|"'8.8.1.2'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'my_subid2'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'20.0.1.0/24'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'20.0.1.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.1.1'"
op|','
string|"'8.8.1.2'"
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'id'"
op|':'
string|"'my_subid2'"
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'10.0.2.0/24'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'10.0.2.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.2.1'"
op|','
string|"'8.8.2.2'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'fip_pool'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'4fdbfd74-eaf8-4884-90d9-00bd6f10c2d3'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'ext_net'"
op|','
nl|'\n'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'admin_tenantid'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'fip_pool_nova'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'435e20c3-d9f1-4f1b-bee5-4611a1dd07db'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'admin_tenantid'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'fip_unassociated'
op|'='
op|'{'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'fip_id1'"
op|','
nl|'\n'
string|"'floating_ip_address'"
op|':'
string|"'172.24.4.227'"
op|','
nl|'\n'
string|"'floating_network_id'"
op|':'
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'port_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'router_id'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'fixed_ip_address'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'['
string|"'fixed_ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'ip_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'fip_associated'
op|'='
op|'{'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'fip_id2'"
op|','
nl|'\n'
string|"'floating_ip_address'"
op|':'
string|"'172.24.4.228'"
op|','
nl|'\n'
string|"'floating_network_id'"
op|':'
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'port_id'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
name|'fixed_ip_address'
op|','
nl|'\n'
string|"'router_id'"
op|':'
string|"'router_id1'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_returned_nw_info'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'neutronv2'
op|','
string|"'get_client'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'CONF'
op|'.'
name|'reset'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'addCleanup'
op|'('
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'UnsetAll'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_stub_allocate_for_instance
dedent|''
name|'def'
name|'_stub_allocate_for_instance'
op|'('
name|'self'
op|','
name|'net_idx'
op|'='
number|'1'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'has_portbinding'
op|'='
name|'False'
newline|'\n'
name|'has_extra_dhcp_opts'
op|'='
name|'False'
newline|'\n'
name|'dhcp_options'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'dhcp_options'"
op|')'
newline|'\n'
name|'if'
name|'dhcp_options'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'has_extra_dhcp_opts'
op|'='
name|'True'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'portbinding'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'has_portbinding'
op|'='
name|'True'
newline|'\n'
name|'api'
op|'.'
name|'extensions'
op|'['
name|'constants'
op|'.'
name|'PORTBINDING_EXT'
op|']'
op|'='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_refresh_neutron_extensions_cache'"
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_refresh_neutron_extensions_cache'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_populate_neutron_extension_values'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
comment|'# Net idx is 1-based for compatibility with existing unit tests'
nl|'\n'
name|'nets'
op|'='
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_idx'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'ports'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'fixed_ips'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'macs'
op|'='
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'macs'"
op|')'
newline|'\n'
name|'if'
name|'macs'
op|':'
newline|'\n'
indent|'            '
name|'macs'
op|'='
name|'set'
op|'('
name|'macs'
op|')'
newline|'\n'
dedent|''
name|'req_net_ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|"'requested_networks'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'id'
op|','
name|'fixed_ip'
op|','
name|'port_id'
name|'in'
name|'kwargs'
op|'['
string|"'requested_networks'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'port_id'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac1'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'_device'"
op|')'
name|'and'
nl|'\n'
name|'self'
op|'.'
name|'instance2'
op|'['
string|"'uuid'"
op|']'
name|'or'
string|"''"
op|'}'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'ports'
op|'['
string|"'my_netid1'"
op|']'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
newline|'\n'
name|'id'
op|'='
string|"'my_netid1'"
newline|'\n'
name|'if'
name|'macs'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                        '
name|'macs'
op|'.'
name|'discard'
op|'('
string|"'my_mac1'"
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'fixed_ips'
op|'['
name|'id'
op|']'
op|'='
name|'fixed_ip'
newline|'\n'
dedent|''
name|'req_net_ids'
op|'.'
name|'append'
op|'('
name|'id'
op|')'
newline|'\n'
dedent|''
name|'expected_network_order'
op|'='
name|'req_net_ids'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'expected_network_order'
op|'='
op|'['
name|'n'
op|'['
string|"'id'"
op|']'
name|'for'
name|'n'
name|'in'
name|'nets'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'_break'"
op|')'
op|'=='
string|"'pre_list_networks'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'api'
newline|'\n'
dedent|''
name|'search_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
name|'nets'
name|'if'
name|'net'
op|'['
string|"'id'"
op|']'
name|'in'
name|'req_net_ids'
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'search_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_params'
op|'='
op|'{'
string|"'id'"
op|':'
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'search_ids'
op|')'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_params'
op|'='
op|'{'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
string|"'shared'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
name|'mox_list_params'
op|'='
op|'{'
string|"'shared'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'ports_in_requested_net_order'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'net_id'
name|'in'
name|'expected_network_order'
op|':'
newline|'\n'
indent|'            '
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'if'
name|'has_portbinding'
op|':'
newline|'\n'
indent|'                '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'binding:host_id'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'port'
op|'='
name|'ports'
op|'.'
name|'get'
op|'('
name|'net_id'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'has_portbinding'
op|':'
newline|'\n'
indent|'                '
name|'api'
op|'.'
name|'_populate_neutron_extension_values'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# since _populate_neutron_extension_values() will call'
nl|'\n'
comment|'# _has_port_binding_extension()'
nl|'\n'
indent|'                '
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'has_portbinding'
op|')'
newline|'\n'
dedent|''
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'has_portbinding'
op|')'
newline|'\n'
name|'if'
name|'port'
op|':'
newline|'\n'
indent|'                '
name|'port_id'
op|'='
name|'port'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
name|'port_id'
op|','
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
name|'ports_in_requested_net_order'
op|'.'
name|'append'
op|'('
name|'port_id'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ip'
op|'='
name|'fixed_ips'
op|'.'
name|'get'
op|'('
name|'net_id'
op|')'
newline|'\n'
name|'if'
name|'fixed_ip'
op|':'
newline|'\n'
indent|'                    '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'['
op|'{'
string|"'ip_address'"
op|':'
nl|'\n'
name|'fixed_ip'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'net_id'
newline|'\n'
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'admin_state_up'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'tenant_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'if'
name|'macs'
op|':'
newline|'\n'
indent|'                    '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'mac_address'"
op|']'
op|'='
name|'macs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'if'
name|'has_portbinding'
op|':'
newline|'\n'
indent|'                    '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'binding:host_id'"
op|']'
op|'='
op|'('
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'res_port'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'id'"
op|':'
string|"'fake'"
op|'}'
op|'}'
newline|'\n'
name|'if'
name|'has_extra_dhcp_opts'
op|':'
newline|'\n'
indent|'                    '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'extra_dhcp_opts'"
op|']'
op|'='
name|'dhcp_options'
newline|'\n'
dedent|''
name|'if'
name|'kwargs'
op|'.'
name|'get'
op|'('
string|"'_break'"
op|')'
op|'=='
string|"'mac'"
op|'+'
name|'net_id'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'api'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'res_port'
op|')'
newline|'\n'
name|'ports_in_requested_net_order'
op|'.'
name|'append'
op|'('
name|'res_port'
op|'['
string|"'port'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'networks'
op|'='
name|'nets'
op|','
nl|'\n'
name|'port_ids'
op|'='
name|'ports_in_requested_net_order'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'_returned_nw_info'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'api'
newline|'\n'
nl|'\n'
DECL|member|_verify_nw_info
dedent|''
name|'def'
name|'_verify_nw_info'
op|'('
name|'self'
op|','
name|'nw_inf'
op|','
name|'index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id_suffix'
op|'='
name|'index'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'10.0.%s.2'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|'['
name|'index'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'172.0.%s.2'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|'['
name|'index'
op|']'
op|'.'
name|'floating_ip_addresses'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_netname%s'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_portid%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_mac%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'10.0.%s.0/24'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'ip_addr'
op|'='
name|'model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
string|"'8.8.%s.1'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'version'
op|'='
number|'4'
op|','
name|'type'
op|'='
string|"'dns'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'ip_addr'
op|','
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'port_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'port_data1'
name|'or'
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
name|'nets'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'nets1'
name|'or'
name|'self'
op|'.'
name|'nets2'
newline|'\n'
name|'net_info_cache'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'port_data'
op|':'
newline|'\n'
indent|'            '
name|'net_info_cache'
op|'.'
name|'append'
op|'('
op|'{'
string|'"network"'
op|':'
op|'{'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'network_id'"
op|']'
op|'}'
op|','
nl|'\n'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
comment|'# This line here does not wrap net_info_cache in jsonutils.dumps()'
nl|'\n'
comment|"# intentionally to test the other code path when it's not unicode."
nl|'\n'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
string|"'network_info'"
op|':'
name|'net_info_cache'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'}'
op|')'
newline|'\n'
name|'net_ids'
op|'='
op|'['
name|'port'
op|'['
string|"'network_id'"
op|']'
name|'for'
name|'port'
name|'in'
name|'port_data'
op|']'
newline|'\n'
name|'nets'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'nets1'
name|'or'
name|'self'
op|'.'
name|'nets2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'net_ids'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
name|'number'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'float_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'float_data1'
name|'or'
name|'self'
op|'.'
name|'float_data2'
newline|'\n'
name|'for'
name|'ip'
name|'in'
name|'port_data'
op|'['
name|'i'
op|'-'
number|'1'
op|']'
op|'['
string|"'fixed_ips'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'float_data'
op|'='
op|'['
name|'x'
name|'for'
name|'x'
name|'in'
name|'float_data'
nl|'\n'
name|'if'
name|'x'
op|'['
string|"'fixed_ip_address'"
op|']'
op|'=='
name|'ip'
op|'['
string|"'ip_address'"
op|']'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
nl|'\n'
name|'fixed_ip_address'
op|'='
name|'ip'
op|'['
string|"'ip_address'"
op|']'
op|','
nl|'\n'
name|'port_id'
op|'='
name|'port_data'
op|'['
name|'i'
op|'-'
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'floatingips'"
op|':'
name|'float_data'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'subnet_data'
op|'='
name|'i'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'subnet_data1'
name|'or'
name|'self'
op|'.'
name|'subnet_data2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_subid%s'"
op|'%'
name|'i'
op|']'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'subnets'"
op|':'
name|'subnet_data'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'network_id'
op|'='
name|'subnet_data'
op|'['
number|'0'
op|']'
op|'['
string|"'network_id'"
op|']'
op|','
nl|'\n'
name|'device_owner'
op|'='
string|"'network:dhcp'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'nw_inf'
op|'='
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_verify_nw_info'
op|'('
name|'nw_inf'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_for_instance
dedent|''
dedent|''
name|'def'
name|'_allocate_for_instance'
op|'('
name|'self'
op|','
name|'net_idx'
op|'='
number|'1'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'self'
op|'.'
name|'_stub_allocate_for_instance'
op|'('
name|'net_idx'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'return'
name|'api'
op|'.'
name|'allocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2'
op|'('
name|'TestNeutronv2Base'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNeutronv2'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_1
dedent|''
name|'def'
name|'test_get_instance_nw_info_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to get one port in one network and subnet.'
nl|'\n'
indent|'        '
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_2
dedent|''
name|'def'
name|'test_get_instance_nw_info_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to get one port in each of two networks and subnets.'
nl|'\n'
indent|'        '
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_with_nets_add_interface
dedent|''
name|'def'
name|'test_get_instance_nw_info_with_nets_add_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This tests that adding an interface to an instance does not'
nl|'\n'
comment|'# remove the first instance from the instance.'
nl|'\n'
indent|'        '
name|'network_model'
op|'='
name|'model'
op|'.'
name|'Network'
op|'('
name|'id'
op|'='
string|"'network_id'"
op|','
nl|'\n'
name|'bridge'
op|'='
string|"'br-int'"
op|','
nl|'\n'
name|'injected'
op|'='
string|"'injected'"
op|','
nl|'\n'
name|'label'
op|'='
string|"'fake_network'"
op|','
nl|'\n'
name|'tenant_id'
op|'='
string|"'fake_tenant'"
op|')'
newline|'\n'
name|'network_cache'
op|'='
op|'{'
string|"'info_cache'"
op|':'
op|'{'
nl|'\n'
string|"'network_info'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'mac_address'"
op|','
nl|'\n'
string|"'network'"
op|':'
name|'network_model'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'ovs'"
op|','
nl|'\n'
string|"'ovs_interfaceid'"
op|':'
string|"'ovs_interfaceid'"
op|','
nl|'\n'
string|"'devname'"
op|':'
string|"'devname'"
op|'}'
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_fake_get_instance_nw_info_helper'
op|'('
name|'network_cache'
op|','
nl|'\n'
name|'self'
op|'.'
name|'port_data2'
op|','
nl|'\n'
name|'self'
op|'.'
name|'nets2'
op|','
nl|'\n'
op|'['
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_remove_ports_from_neutron
dedent|''
name|'def'
name|'test_get_instance_nw_info_remove_ports_from_neutron'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# This tests that when a port is removed in neutron it'
nl|'\n'
comment|'# is also removed from the nova.'
nl|'\n'
indent|'        '
name|'network_model'
op|'='
name|'model'
op|'.'
name|'Network'
op|'('
name|'id'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'0'
op|']'
op|'['
string|"'network_id'"
op|']'
op|','
nl|'\n'
name|'bridge'
op|'='
string|"'br-int'"
op|','
nl|'\n'
name|'injected'
op|'='
string|"'injected'"
op|','
nl|'\n'
name|'label'
op|'='
string|"'fake_network'"
op|','
nl|'\n'
name|'tenant_id'
op|'='
string|"'fake_tenant'"
op|')'
newline|'\n'
name|'network_cache'
op|'='
op|'{'
string|"'info_cache'"
op|':'
op|'{'
nl|'\n'
string|"'network_info'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'network_id'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'mac_address'"
op|','
nl|'\n'
string|"'network'"
op|':'
name|'network_model'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'ovs'"
op|','
nl|'\n'
string|"'ovs_interfaceid'"
op|':'
string|"'ovs_interfaceid'"
op|','
nl|'\n'
string|"'devname'"
op|':'
string|"'devname'"
op|'}'
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_fake_get_instance_nw_info_helper'
op|'('
name|'network_cache'
op|','
nl|'\n'
name|'self'
op|'.'
name|'port_data2'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_ignores_neturon_ports
dedent|''
name|'def'
name|'test_get_instance_nw_info_ignores_neturon_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Tests that only ports in the network_cache are updated'
nl|'\n'
comment|'# and ports returned from neutron that match the same'
nl|'\n'
comment|'# instance_id/device_id are ignored.'
nl|'\n'
indent|'        '
name|'port_data2'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'port_data2'
op|')'
newline|'\n'
nl|'\n'
comment|'# set device_id on the ports to be the same.'
nl|'\n'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'port_data2'
op|'['
number|'0'
op|']'
op|'['
string|"'device_id'"
op|']'
newline|'\n'
name|'network_model'
op|'='
name|'model'
op|'.'
name|'Network'
op|'('
name|'id'
op|'='
string|"'network_id'"
op|','
nl|'\n'
name|'bridge'
op|'='
string|"'br-int'"
op|','
nl|'\n'
name|'injected'
op|'='
string|"'injected'"
op|','
nl|'\n'
name|'label'
op|'='
string|"'fake_network'"
op|','
nl|'\n'
name|'tenant_id'
op|'='
string|"'fake_tenant'"
op|')'
newline|'\n'
name|'network_cache'
op|'='
op|'{'
string|"'info_cache'"
op|':'
op|'{'
nl|'\n'
string|"'network_info'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'network_id'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'mac_address'"
op|','
nl|'\n'
string|"'network'"
op|':'
name|'network_model'
op|','
nl|'\n'
string|"'type'"
op|':'
string|"'ovs'"
op|','
nl|'\n'
string|"'ovs_interfaceid'"
op|':'
string|"'ovs_interfaceid'"
op|','
nl|'\n'
string|"'devname'"
op|':'
string|"'devname'"
op|'}'
op|']'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_fake_get_instance_nw_info_helper'
op|'('
name|'network_cache'
op|','
nl|'\n'
name|'port_data2'
op|','
nl|'\n'
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_fake_get_instance_nw_info_helper
dedent|''
name|'def'
name|'_fake_get_instance_nw_info_helper'
op|'('
name|'self'
op|','
name|'network_cache'
op|','
nl|'\n'
name|'current_neutron_ports'
op|','
nl|'\n'
name|'networks'
op|'='
name|'None'
op|','
name|'port_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Helper function to test get_instance_nw_info.\n\n        :param network_cache - data already in the nova network cache.\n        :param current_neutron_ports - updated list of ports from neutron.\n        :param networks - networks of ports being added to instance.\n        :param port_ids - new ports being added to instance.\n        """'
newline|'\n'
nl|'\n'
comment|'# keep a copy of the original ports/networks to pass to'
nl|'\n'
comment|'# get_instance_nw_info() as the code below changes them.'
nl|'\n'
name|'original_port_ids'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'port_ids'
op|')'
newline|'\n'
name|'original_networks'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'networks'
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'current_neutron_ports'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'ifaces'
op|'='
name|'network_cache'
op|'['
string|"'info_cache'"
op|']'
op|'['
string|"'network_info'"
op|']'
newline|'\n'
nl|'\n'
name|'if'
name|'port_ids'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'port_ids'
op|'='
op|'['
name|'iface'
op|'['
string|"'id'"
op|']'
name|'for'
name|'iface'
name|'in'
name|'ifaces'
op|']'
newline|'\n'
name|'net_ids'
op|'='
op|'['
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
name|'for'
name|'iface'
name|'in'
name|'ifaces'
op|']'
newline|'\n'
name|'nets'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'name'"
op|':'
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'tenant_id'"
op|']'
op|'}'
nl|'\n'
name|'for'
name|'iface'
name|'in'
name|'ifaces'
op|']'
newline|'\n'
dedent|''
name|'if'
name|'networks'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'net_ids'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'networks'
op|'='
name|'networks'
op|'+'
op|'['
nl|'\n'
name|'dict'
op|'('
name|'id'
op|'='
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'name'
op|'='
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
name|'tenant_id'
op|'='
name|'iface'
op|'['
string|"'network'"
op|']'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'tenant_id'"
op|']'
op|')'
nl|'\n'
name|'for'
name|'iface'
name|'in'
name|'ifaces'
op|']'
newline|'\n'
name|'port_ids'
op|'='
op|'['
name|'iface'
op|'['
string|"'id'"
op|']'
name|'for'
name|'iface'
name|'in'
name|'ifaces'
op|']'
op|'+'
name|'port_ids'
newline|'\n'
nl|'\n'
dedent|''
name|'index'
op|'='
number|'0'
newline|'\n'
nl|'\n'
name|'current_neutron_port_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'current_neutron_port'
name|'in'
name|'current_neutron_ports'
op|':'
newline|'\n'
indent|'            '
name|'current_neutron_port_map'
op|'['
name|'current_neutron_port'
op|'['
string|"'id'"
op|']'
op|']'
op|'='
op|'('
nl|'\n'
name|'current_neutron_port'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'port_id'
name|'in'
name|'port_ids'
op|':'
newline|'\n'
indent|'            '
name|'current_neutron_port'
op|'='
name|'current_neutron_port_map'
op|'.'
name|'get'
op|'('
name|'port_id'
op|')'
newline|'\n'
name|'if'
name|'current_neutron_port'
op|':'
newline|'\n'
indent|'                '
name|'for'
name|'ip'
name|'in'
name|'current_neutron_port'
op|'['
string|"'fixed_ips'"
op|']'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
nl|'\n'
name|'fixed_ip_address'
op|'='
name|'ip'
op|'['
string|"'ip_address'"
op|']'
op|','
nl|'\n'
name|'port_id'
op|'='
name|'current_neutron_port'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'float_data2'
op|'['
name|'index'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
name|'ip'
op|'['
string|"'subnet_id'"
op|']'
op|']'
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'subnets'"
op|':'
op|'['
name|'self'
op|'.'
name|'subnet_data_n'
op|'['
name|'index'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'network_id'
op|'='
name|'current_neutron_port'
op|'['
string|"'network_id'"
op|']'
op|','
nl|'\n'
name|'device_owner'
op|'='
string|"'network:dhcp'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'dhcp_port_data1'
op|'}'
op|')'
newline|'\n'
name|'index'
op|'+='
number|'1'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
name|'network_cache'
newline|'\n'
name|'instance'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
name|'network_cache'
op|'['
string|"'info_cache'"
op|']'
newline|'\n'
name|'nw_infs'
op|'='
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'networks'
op|'='
name|'original_networks'
op|','
nl|'\n'
name|'port_ids'
op|'='
name|'original_port_ids'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'index'
op|','
name|'len'
op|'('
name|'nw_infs'
op|')'
op|')'
newline|'\n'
comment|'# ensure that nic ordering is preserved'
nl|'\n'
name|'for'
name|'iface_index'
name|'in'
name|'range'
op|'('
name|'index'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infs'
op|'['
name|'iface_index'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'port_ids'
op|'['
name|'iface_index'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_without_subnet
dedent|''
dedent|''
name|'def'
name|'test_get_instance_nw_info_without_subnet'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test get instance_nw_info for a port without subnet.'
nl|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data3'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
op|'['
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
op|'['
string|"'network_id'"
op|']'
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
nl|'\n'
name|'net_info_cache'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'self'
op|'.'
name|'port_data3'
op|':'
newline|'\n'
indent|'            '
name|'net_info_cache'
op|'.'
name|'append'
op|'('
op|'{'
string|'"network"'
op|':'
op|'{'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'network_id'"
op|']'
op|'}'
op|','
nl|'\n'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
string|"'network_info'"
op|':'
nl|'\n'
name|'six'
op|'.'
name|'text_type'
op|'('
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'net_info_cache'
op|')'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'nw_inf'
op|'='
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'id_suffix'
op|'='
number|'3'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'nw_inf'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_netname1'"
op|','
name|'nw_inf'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_portid%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'my_mac%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'nw_inf'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_refresh_neutron_extensions_cache
dedent|''
name|'def'
name|'test_refresh_neutron_extensions_cache'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Note: Don't want the default get_client from setUp()"
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_extensions'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'extensions'"
op|':'
op|'['
op|'{'
string|"'name'"
op|':'
name|'constants'
op|'.'
name|'QOS_QUEUE'
op|'}'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_refresh_neutron_extensions_cache'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
op|'{'
name|'constants'
op|'.'
name|'QOS_QUEUE'
op|':'
op|'{'
string|"'name'"
op|':'
name|'constants'
op|'.'
name|'QOS_QUEUE'
op|'}'
op|'}'
op|','
nl|'\n'
name|'api'
op|'.'
name|'extensions'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_populate_neutron_extension_values_rxtx_factor
dedent|''
name|'def'
name|'test_populate_neutron_extension_values_rxtx_factor'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Note: Don't want the default get_client from setUp()"
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_extensions'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'extensions'"
op|':'
op|'['
op|'{'
string|"'name'"
op|':'
name|'constants'
op|'.'
name|'QOS_QUEUE'
op|'}'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'='
name|'flavors'
op|'.'
name|'get_default_flavor'
op|'('
op|')'
newline|'\n'
name|'flavor'
op|'['
string|"'rxtx_factor'"
op|']'
op|'='
number|'1'
newline|'\n'
name|'sys_meta'
op|'='
name|'utils'
op|'.'
name|'dict_to_metadata'
op|'('
nl|'\n'
name|'flavors'
op|'.'
name|'save_flavor_info'
op|'('
op|'{'
op|'}'
op|','
name|'flavor'
op|')'
op|')'
newline|'\n'
name|'instance'
op|'='
op|'{'
string|"'system_metadata'"
op|':'
name|'sys_meta'
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'api'
op|'.'
name|'_populate_neutron_extension_values'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'port_req_body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'rxtx_factor'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_1
dedent|''
name|'def'
name|'test_allocate_for_instance_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Allocate one port in one network env.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_2
dedent|''
name|'def'
name|'test_allocate_for_instance_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Allocate one port in two networks env.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_accepts_macs_kwargs_None
dedent|''
name|'def'
name|'test_allocate_for_instance_accepts_macs_kwargs_None'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The macs kwarg should be accepted as None.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|','
name|'macs'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_accepts_macs_kwargs_set
dedent|''
name|'def'
name|'test_allocate_for_instance_accepts_macs_kwargs_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# The macs kwarg should be accepted, as a set, the'
nl|'\n'
comment|'# _allocate_for_instance helper checks that the mac is used to create a'
nl|'\n'
comment|'# port.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|','
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'ab:cd:ef:01:23:45'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_accepts_only_portid
dedent|''
name|'def'
name|'test_allocate_for_instance_accepts_only_portid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure allocate_for_instance works when only a portid is provided'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_returned_nw_info'
op|'='
name|'self'
op|'.'
name|'port_data1'
newline|'\n'
name|'result'
op|'='
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'my_portid1'"
op|')'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'port_data1'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_not_enough_macs_via_ports
dedent|''
name|'def'
name|'test_allocate_for_instance_not_enough_macs_via_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# using a hypervisor MAC via a pre-created port will stop it being'
nl|'\n'
comment|'# used to dynamically create a port on a network. We put the network'
nl|'\n'
comment|'# first in requested_networks so that if the code were to not pre-check'
nl|'\n'
comment|'# requested ports, it would incorrectly assign the mac and not fail.'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
nl|'\n'
op|'('
name|'self'
op|'.'
name|'nets2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'my_portid1'"
op|')'
op|']'
newline|'\n'
name|'api'
op|'='
name|'self'
op|'.'
name|'_stub_allocate_for_instance'
op|'('
nl|'\n'
name|'net_idx'
op|'='
number|'2'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'my_mac1'"
op|']'
op|')'
op|','
nl|'\n'
name|'_break'
op|'='
string|"'mac'"
op|'+'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortNotFree'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'my_mac1'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_not_enough_macs
dedent|''
name|'def'
name|'test_allocate_for_instance_not_enough_macs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If not enough MAC addresses are available to allocate to networks, an'
nl|'\n'
comment|'# error should be raised.'
nl|'\n'
comment|"# We could pass in macs=set(), but that wouldn't tell us that"
nl|'\n'
comment|'# allocate_for_instance tracks used macs properly, so we pass in one'
nl|'\n'
comment|'# mac, and ask for two networks.'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
nl|'\n'
op|'('
name|'self'
op|'.'
name|'nets2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'api'
op|'='
name|'self'
op|'.'
name|'_stub_allocate_for_instance'
op|'('
nl|'\n'
name|'net_idx'
op|'='
number|'2'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'my_mac2'"
op|']'
op|')'
op|','
nl|'\n'
name|'_break'
op|'='
string|"'mac'"
op|'+'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortNotFree'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'my_mac2'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_two_macs_two_networks
dedent|''
name|'def'
name|'test_allocate_for_instance_two_macs_two_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If two MACs are available and two networks requested, two new ports'
nl|'\n'
comment|'# get made and no exceptions raised.'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
nl|'\n'
op|'('
name|'self'
op|'.'
name|'nets2'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
nl|'\n'
name|'net_idx'
op|'='
number|'2'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'my_mac2'"
op|','
string|"'my_mac1'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_mac_conflicting_requested_port
dedent|''
name|'def'
name|'test_allocate_for_instance_mac_conflicting_requested_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'my_portid1'"
op|')'
op|']'
newline|'\n'
name|'api'
op|'='
name|'self'
op|'.'
name|'_stub_allocate_for_instance'
op|'('
nl|'\n'
name|'net_idx'
op|'='
number|'1'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'unknown:mac'"
op|']'
op|')'
op|','
nl|'\n'
name|'_break'
op|'='
string|"'pre_list_networks'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortNotUsable'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'macs'
op|'='
name|'set'
op|'('
op|'['
string|"'unknown:mac'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
nl|'\n'
op|'('
name|'net'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
op|'('
name|'self'
op|'.'
name|'nets3'
op|'['
number|'1'
op|']'
op|','
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'nets3'
op|'['
number|'2'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'3'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks_with_fixedip
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks_with_fixedip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'nets1'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'10.0.1.0/24'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'1'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks_with_port
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks_with_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'myportid1'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'1'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_no_networks
dedent|''
name|'def'
name|'test_allocate_for_instance_no_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify the exception thrown when there are no networks defined."""'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
op|']'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'model'
op|'.'
name|'NetworkInfo'
op|'('
op|'['
op|']'
op|')'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'nwinfo'
op|'='
name|'api'
op|'.'
name|'allocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'nwinfo'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_ex1
dedent|''
name|'def'
name|'test_allocate_for_instance_ex1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify we will delete created ports\n        if we fail to allocate all net resources.\n\n        Mox to raise exception when creating a second port.\n        In this case, the code should delete the first created port.\n        """'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_populate_neutron_extension_values'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'nets2'
op|':'
newline|'\n'
indent|'            '
name|'binding_port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'.'
name|'update'
op|'('
name|'binding_port_req_body'
op|'['
string|"'port'"
op|']'
op|')'
newline|'\n'
name|'port'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'portid_'"
op|'+'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'api'
op|'.'
name|'_populate_neutron_extension_values'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'binding_port_req_body'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'if'
name|'index'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'NeutronOverQuota'
op|'='
name|'exceptions'
op|'.'
name|'OverQuotaClient'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'NeutronOverQuota'
op|')'
newline|'\n'
dedent|''
name|'index'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
string|"'portid_'"
op|'+'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortLimitExceeded'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_ex2
dedent|''
name|'def'
name|'test_allocate_for_instance_ex2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify we have no port to delete\n        if we fail to allocate the first net resource.\n\n        Mox to raise exception when creating the first port.\n        In this case, the code should not delete any ports.\n        """'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_populate_neutron_extension_values'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'binding_port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'api'
op|'.'
name|'_populate_neutron_extension_values'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'binding_port_req_body'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'Exception'
op|'('
string|'"fail to create port"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NEUTRON_CLIENT_EXCEPTION'
op|','
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_no_port_or_network
dedent|''
name|'def'
name|'test_allocate_for_instance_no_port_or_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|BailOutEarly
indent|'        '
name|'class'
name|'BailOutEarly'
op|'('
name|'Exception'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
dedent|''
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_available_networks'"
op|')'
newline|'\n'
comment|'# Make sure we get an empty list and then bail out of the rest'
nl|'\n'
comment|'# of the function'
nl|'\n'
name|'api'
op|'.'
name|'_get_available_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
op|'['
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'BailOutEarly'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'BailOutEarly'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
DECL|variable|requested_networks
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_second_time
dedent|''
name|'def'
name|'test_allocate_for_instance_second_time'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure that allocate_for_instance only returns ports that it'
nl|'\n'
comment|'# allocated during _that_ run.'
nl|'\n'
indent|'        '
name|'new_port'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'fake'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'_returned_nw_info'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'+'
op|'['
name|'new_port'
op|']'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|','
op|'['
name|'new_port'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_port_in_use
dedent|''
name|'def'
name|'test_allocate_for_instance_port_in_use'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# If a port is already in use, an exception should be raised.'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'my_portid1'"
op|')'
op|']'
newline|'\n'
name|'api'
op|'='
name|'self'
op|'.'
name|'_stub_allocate_for_instance'
op|'('
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|','
nl|'\n'
name|'_break'
op|'='
string|"'pre_list_networks'"
op|','
nl|'\n'
name|'_device'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortInUse'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_for_instance
dedent|''
name|'def'
name|'_deallocate_for_instance'
op|'('
name|'self'
op|','
name|'number'
op|','
name|'requested_networks'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'port_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'port_data1'
name|'or'
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
name|'ret_data'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'port_data'
op|')'
newline|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'net'
op|','
name|'fip'
op|','
name|'port'
name|'in'
name|'requested_networks'
op|':'
newline|'\n'
indent|'                '
name|'ret_data'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_id'"
op|':'
name|'net'
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'fake_mac'"
op|','
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'ret_data'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'requested_networks'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'net'
op|','
name|'fip'
op|','
name|'port'
name|'in'
name|'requested_networks'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
name|'port'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'port'
name|'in'
name|'reversed'
op|'('
name|'port_data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
name|'port'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'network_info'"
op|':'
string|"'[]'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_1_with_requested
dedent|''
name|'def'
name|'test_deallocate_for_instance_1_with_requested'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested'
op|'='
op|'['
op|'('
string|"'fake-net'"
op|','
string|"'fake-fip'"
op|','
string|"'fake-port'"
op|')'
op|']'
newline|'\n'
comment|'# Test to deallocate in one port env.'
nl|'\n'
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'1'
op|','
name|'requested_networks'
op|'='
name|'requested'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_2_with_requested
dedent|''
name|'def'
name|'test_deallocate_for_instance_2_with_requested'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested'
op|'='
op|'['
op|'('
string|"'fake-net'"
op|','
string|"'fake-fip'"
op|','
string|"'fake-port'"
op|')'
op|']'
newline|'\n'
comment|'# Test to deallocate in one port env.'
nl|'\n'
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'2'
op|','
name|'requested_networks'
op|'='
name|'requested'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_1
dedent|''
name|'def'
name|'test_deallocate_for_instance_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to deallocate in one port env.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_2
dedent|''
name|'def'
name|'test_deallocate_for_instance_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to deallocate in two ports env.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_port_not_found
dedent|''
name|'def'
name|'test_deallocate_for_instance_port_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_data'
op|'='
name|'self'
op|'.'
name|'port_data1'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'NeutronNotFound'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'404'
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'reversed'
op|'('
name|'port_data'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
name|'port'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NeutronNotFound'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_deallocate_port_for_instance
dedent|''
name|'def'
name|'_test_deallocate_port_for_instance'
op|'('
name|'self'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'port_data1'
name|'or'
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
name|'nets'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'nets1'
name|'or'
name|'self'
op|'.'
name|'nets2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
name|'port_data'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'net_info_cache'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'port_data'
op|':'
newline|'\n'
indent|'            '
name|'net_info_cache'
op|'.'
name|'append'
op|'('
op|'{'
string|'"network"'
op|':'
op|'{'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'network_id'"
op|']'
op|'}'
op|','
nl|'\n'
string|'"id"'
op|':'
name|'port'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'instance'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'instance'
op|'['
string|"'info_cache'"
op|']'
op|'='
op|'{'
string|"'network_info'"
op|':'
nl|'\n'
name|'six'
op|'.'
name|'text_type'
op|'('
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'net_info_cache'
op|')'
op|')'
op|'}'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'['
number|'1'
op|':'
op|']'
op|'}'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'net_ids'
op|'='
op|'['
name|'port'
op|'['
string|"'network_id'"
op|']'
name|'for'
name|'port'
name|'in'
name|'port_data'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'id'
op|'='
name|'net_ids'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
name|'float_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'float_data1'
name|'or'
name|'self'
op|'.'
name|'float_data2'
newline|'\n'
name|'for'
name|'data'
name|'in'
name|'port_data'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'ip'
name|'in'
name|'data'
op|'['
string|"'fixed_ips'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
nl|'\n'
name|'fixed_ip_address'
op|'='
name|'ip'
op|'['
string|"'ip_address'"
op|']'
op|','
nl|'\n'
name|'port_id'
op|'='
name|'data'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'floatingips'"
op|':'
name|'float_data'
op|'['
number|'1'
op|':'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'for'
name|'port'
name|'in'
name|'port_data'
op|'['
number|'1'
op|':'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
name|'id'
op|'='
op|'['
string|"'my_subid2'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'nwinfo'
op|'='
name|'api'
op|'.'
name|'deallocate_port_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'port_data'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'nwinfo'
op|')'
op|','
name|'len'
op|'('
name|'port_data'
op|'['
number|'1'
op|':'
op|']'
op|')'
op|')'
newline|'\n'
name|'if'
name|'len'
op|'('
name|'port_data'
op|')'
op|'>'
number|'1'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nwinfo'
op|'['
number|'0'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'my_netid2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_port_for_instance_1
dedent|''
dedent|''
name|'def'
name|'test_deallocate_port_for_instance_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to deallocate the first and only port'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deallocate_port_for_instance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_port_for_instance_2
dedent|''
name|'def'
name|'test_deallocate_port_for_instance_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test to deallocate the first port of two'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_deallocate_port_for_instance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_ports
dedent|''
name|'def'
name|'test_list_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'search_opts'
op|'='
op|'{'
string|"'parm'"
op|':'
string|"'value'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
op|'.'
name|'list_ports'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'**'
name|'search_opts'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_show_port
dedent|''
name|'def'
name|'test_show_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
op|'.'
name|'show_port'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks
dedent|''
name|'def'
name|'test_validate_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'50'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_without_port_quota_on_network_side
dedent|''
name|'def'
name|'test_validate_networks_without_port_quota_on_network_side'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ex_1
dedent|''
name|'def'
name|'test_validate_networks_ex_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|']'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'50'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkNotFound'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"my_netid2"'
op|','
name|'str'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ex_2
dedent|''
dedent|''
name|'def'
name|'test_validate_networks_ex_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid3'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|','
string|"'my_netid3'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkNotFound'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'"my_netid2, my_netid3"'
op|','
name|'str'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_duplicate
dedent|''
dedent|''
name|'def'
name|'test_validate_networks_duplicate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that the correct exception is thrown when duplicate\n           network ids are passed to validate_networks.\n        """'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
comment|'# Expected call from setUp.'
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'None'
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkDuplicated'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_not_specified
dedent|''
name|'def'
name|'test_validate_networks_not_specified'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkAmbiguous'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_port_not_found
dedent|''
name|'def'
name|'test_validate_networks_port_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that the correct exception is thrown when a non existent'
nl|'\n'
comment|'# port is passed to validate_networks.'
nl|'\n'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
string|"'3123-ad34-bc43-32332ca33e'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'NeutronNotFound'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'404'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'requested_networks'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NeutronNotFound'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
comment|'# Expected call from setUp.'
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'None'
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortNotFound'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_port_show_rasies_non404
dedent|''
name|'def'
name|'test_validate_networks_port_show_rasies_non404'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that the correct exception is thrown when a non existent'
nl|'\n'
comment|'# port is passed to validate_networks.'
nl|'\n'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
string|"'3123-ad34-bc43-32332ca33e'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'NeutronNotFound'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'requested_networks'
op|'['
number|'0'
op|']'
op|'['
number|'2'
op|']'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'NeutronNotFound'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
comment|'# Expected call from setUp.'
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'None'
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_port_in_use
dedent|''
name|'def'
name|'test_validate_networks_port_in_use'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortInUse'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_port_no_subnet_id
dedent|''
name|'def'
name|'test_validate_networks_port_no_subnet_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_a'
op|'='
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port_a'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port_a'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_a'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortRequiresFixedIP'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_no_subnet_id
dedent|''
name|'def'
name|'test_validate_networks_no_subnet_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'his_netid4'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'his_netid4'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets4'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkRequiresSubnet'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ports_in_same_network
dedent|''
name|'def'
name|'test_validate_networks_ports_in_same_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_a'
op|'='
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port_a'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'subnet_id'"
op|'}'
newline|'\n'
name|'port_b'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port_a'
op|'['
string|"'network_id'"
op|']'
op|','
name|'port_b'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
op|'['
name|'port_a'
op|','
name|'port_b'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_a'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_b'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkDuplicated'
op|','
nl|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ports_not_in_same_network
dedent|''
name|'def'
name|'test_validate_networks_ports_not_in_same_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_a'
op|'='
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port_a'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'subnet_id'"
op|'}'
newline|'\n'
name|'port_b'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'port_a'
op|'['
string|"'network_id'"
op|']'
op|','
name|'port_b'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
op|'['
name|'port_a'
op|','
name|'port_b'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_a'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_b'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_no_quota
dedent|''
name|'def'
name|'test_validate_networks_no_quota'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for one instance needing'
nl|'\n'
comment|'# two ports, where the quota is 2 and 2 ports are in use'
nl|'\n'
comment|'#  => instances which can be created = 0'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'2'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_with_ports_and_networks
dedent|''
name|'def'
name|'test_validate_networks_with_ports_and_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for one instance needing'
nl|'\n'
comment|'# one port allocated via nova with another port being passed in.'
nl|'\n'
indent|'        '
name|'port_b'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
newline|'\n'
name|'port_b'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port_b'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_b'
op|'}'
op|')'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'5'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_one_port_and_no_networks
dedent|''
name|'def'
name|'test_validate_networks_one_port_and_no_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that show quota is not called if no networks are'
nl|'\n'
comment|'# passed in and only ports.'
nl|'\n'
indent|'        '
name|'port_b'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
newline|'\n'
name|'port_b'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port_b'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_b'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_some_quota
dedent|''
name|'def'
name|'test_validate_networks_some_quota'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for two instance needing'
nl|'\n'
comment|'# two ports each, where the quota is 5 and 2 ports are in use'
nl|'\n'
comment|'#  => instances which can be created = 1'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'5'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_unlimited_quota
dedent|''
name|'def'
name|'test_validate_networks_unlimited_quota'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for two instance needing'
nl|'\n'
comment|'# two ports each, where the quota is -1 (unlimited)'
nl|'\n'
comment|'#  => instances which can be created = 1'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
name|'None'
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
name|'ids'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_quota'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'my_tenantid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
op|'-'
number|'1'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_no_quota_but_ports_supplied
dedent|''
name|'def'
name|'test_validate_networks_no_quota_but_ports_supplied'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_a'
op|'='
name|'self'
op|'.'
name|'port_data3'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port_a'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'subnet_id'"
op|'}'
newline|'\n'
name|'port_b'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'port_a'
op|'['
string|"'network_id'"
op|']'
op|','
name|'port_b'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
op|'['
name|'port_a'
op|','
name|'port_b'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'port'
op|'['
string|"'device_id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'port'
op|'['
string|"'device_owner'"
op|']'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|','
nl|'\n'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_a'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_a'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_b'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port_b'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'max_count'
op|'='
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'max_count'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_mock_list_ports
dedent|''
name|'def'
name|'_mock_list_ports'
op|'('
name|'self'
op|','
name|'port_data'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'port_data'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'port_data'
op|'='
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
dedent|''
name|'address'
op|'='
name|'self'
op|'.'
name|'port_address'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'fixed_ips'
op|'='
name|'MyComparator'
op|'('
string|"'ip_address=%s'"
op|'%'
name|'address'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_uuids_by_ip_filter
dedent|''
name|'def'
name|'test_get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_mock_list_ports'
op|'('
op|')'
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'^10\\\\.0\\\\.1\\\\.2$'"
op|'}'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'api'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'result'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'result'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_fixed_ip_by_address_fails_for_no_ports
dedent|''
name|'def'
name|'test_get_fixed_ip_by_address_fails_for_no_ports'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
name|'self'
op|'.'
name|'_mock_list_ports'
op|'('
name|'port_data'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForAddress'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_fixed_ip_by_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_fixed_ip_by_address_succeeds_for_1_port
dedent|''
name|'def'
name|'test_get_fixed_ip_by_address_succeeds_for_1_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
name|'self'
op|'.'
name|'_mock_list_ports'
op|'('
name|'port_data'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'api'
op|'.'
name|'get_fixed_ip_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|','
name|'result'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_fixed_ip_by_address_fails_for_more_than_1_port
dedent|''
name|'def'
name|'test_get_fixed_ip_by_address_fails_for_more_than_1_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
name|'self'
op|'.'
name|'_mock_list_ports'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpAssociatedWithMultipleInstances'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_fixed_ip_by_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_available_networks
dedent|''
name|'def'
name|'_get_available_networks'
op|'('
name|'self'
op|','
name|'prv_nets'
op|','
name|'pub_nets'
op|','
nl|'\n'
name|'req_ids'
op|'='
name|'None'
op|','
name|'context'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'nets'
op|'='
name|'prv_nets'
op|'+'
name|'pub_nets'
newline|'\n'
name|'if'
name|'req_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_params'
op|'='
op|'{'
string|"'id'"
op|':'
name|'req_ids'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_params'
op|'='
op|'{'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
string|"'shared'"
op|':'
name|'False'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'prv_nets'
op|'}'
op|')'
newline|'\n'
name|'mox_list_params'
op|'='
op|'{'
string|"'shared'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'pub_nets'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'rets'
op|'='
name|'api'
op|'.'
name|'_get_available_networks'
op|'('
nl|'\n'
name|'context'
name|'if'
name|'context'
name|'else'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'req_ids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rets'
op|','
name|'nets'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_all_private
dedent|''
name|'def'
name|'test_get_available_networks_all_private'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
name|'self'
op|'.'
name|'nets2'
op|','
name|'pub_nets'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_all_public
dedent|''
name|'def'
name|'test_get_available_networks_all_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
op|'['
op|']'
op|','
name|'pub_nets'
op|'='
name|'self'
op|'.'
name|'nets2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_private_and_public
dedent|''
name|'def'
name|'test_get_available_networks_private_and_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
name|'self'
op|'.'
name|'nets1'
op|','
name|'pub_nets'
op|'='
name|'self'
op|'.'
name|'nets4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_with_network_ids
dedent|''
name|'def'
name|'test_get_available_networks_with_network_ids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prv_nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'pub_nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets3'
op|'['
op|'-'
number|'1'
op|']'
op|']'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
name|'req_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
op|'('
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'nets3'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|','
name|'pub_nets'
op|','
name|'req_ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_with_externalnet_fails
dedent|''
name|'def'
name|'test_get_available_networks_with_externalnet_fails'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
name|'self'
op|'.'
name|'nets5'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'ExternalNetworkAttachForbidden'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_available_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'nets5'
op|','
name|'pub_nets'
op|'='
op|'['
op|']'
op|','
name|'req_ids'
op|'='
name|'req_ids'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_with_externalnet_admin_ctx
dedent|''
name|'def'
name|'test_get_available_networks_with_externalnet_admin_ctx'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'admin_ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'req_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
name|'self'
op|'.'
name|'nets5'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'self'
op|'.'
name|'nets5'
op|','
name|'pub_nets'
op|'='
op|'['
op|']'
op|','
nl|'\n'
name|'req_ids'
op|'='
name|'req_ids'
op|','
name|'context'
op|'='
name|'admin_ctx'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_pools
dedent|''
name|'def'
name|'test_get_floating_ip_pools'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|','
name|'self'
op|'.'
name|'fip_pool_nova'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'pools'
op|'='
name|'api'
op|'.'
name|'get_floating_ip_pools'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
op|'{'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'name'"
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'name'"
op|':'
name|'self'
op|'.'
name|'fip_pool_nova'
op|'['
string|"'name'"
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'pools'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_expected_fip_model
dedent|''
name|'def'
name|'_get_expected_fip_model'
op|'('
name|'self'
op|','
name|'fip_data'
op|','
name|'idx'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
op|'{'
string|"'id'"
op|':'
name|'fip_data'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'fip_data'
op|'['
string|"'floating_ip_address'"
op|']'
op|','
nl|'\n'
string|"'pool'"
op|':'
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'name'"
op|']'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'fip_data'
op|'['
string|"'tenant_id'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'fip_data'
op|'['
string|"'port_id'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip'"
op|':'
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'fip_data'
op|'['
string|"'fixed_ip_address'"
op|']'
op|'}'
op|','
nl|'\n'
string|"'instance'"
op|':'
op|'('
op|'{'
string|"'uuid'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
name|'idx'
op|']'
op|'['
string|"'device_id'"
op|']'
op|'}'
nl|'\n'
name|'if'
name|'fip_data'
op|'['
string|"'port_id'"
op|']'
nl|'\n'
name|'else'
name|'None'
op|')'
op|'}'
newline|'\n'
name|'return'
name|'expected'
newline|'\n'
nl|'\n'
DECL|member|_test_get_floating_ip
dedent|''
name|'def'
name|'_test_get_floating_ip'
op|'('
name|'self'
op|','
name|'fip_data'
op|','
name|'idx'
op|'='
number|'0'
op|','
name|'by_address'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'fip_id'
op|'='
name|'fip_data'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'net_id'
op|'='
name|'fip_data'
op|'['
string|"'floating_network_id'"
op|']'
newline|'\n'
name|'address'
op|'='
name|'fip_data'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'if'
name|'by_address'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'fip_data'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_floatingip'
op|'('
name|'fip_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingip'"
op|':'
name|'fip_data'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_network'
op|'('
name|'net_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'network'"
op|':'
name|'self'
op|'.'
name|'fip_pool'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'fip_data'
op|'['
string|"'port_id'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'fip_data'
op|'['
string|"'port_id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
name|'idx'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'self'
op|'.'
name|'_get_expected_fip_model'
op|'('
name|'fip_data'
op|','
name|'idx'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'by_address'
op|':'
newline|'\n'
indent|'            '
name|'fip'
op|'='
name|'api'
op|'.'
name|'get_floating_ip_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'fip'
op|'='
name|'api'
op|'.'
name|'get_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fip_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'fip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_unassociated
dedent|''
name|'def'
name|'test_get_floating_ip_unassociated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_floating_ip'
op|'('
name|'self'
op|'.'
name|'fip_unassociated'
op|','
name|'idx'
op|'='
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_associated
dedent|''
name|'def'
name|'test_get_floating_ip_associated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_floating_ip'
op|'('
name|'self'
op|'.'
name|'fip_associated'
op|','
name|'idx'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_by_address
dedent|''
name|'def'
name|'test_get_floating_ip_by_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_floating_ip'
op|'('
name|'self'
op|'.'
name|'fip_unassociated'
op|','
name|'idx'
op|'='
number|'0'
op|','
nl|'\n'
name|'by_address'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_by_address_associated
dedent|''
name|'def'
name|'test_get_floating_ip_by_address_associated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_floating_ip'
op|'('
name|'self'
op|'.'
name|'fip_associated'
op|','
name|'idx'
op|'='
number|'1'
op|','
nl|'\n'
name|'by_address'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_by_address_not_found
dedent|''
name|'def'
name|'test_get_floating_ip_by_address_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_floating_ip_by_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_by_id_not_found
dedent|''
name|'def'
name|'test_get_floating_ip_by_id_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'NeutronNotFound'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'404'
op|')'
newline|'\n'
name|'floating_ip_id'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_floatingip'
op|'('
name|'floating_ip_id'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'NeutronNotFound'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotFound'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'floating_ip_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_raises_non404
dedent|''
name|'def'
name|'test_get_floating_ip_raises_non404'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'NeutronNotFound'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'0'
op|')'
newline|'\n'
name|'floating_ip_id'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_floatingip'
op|'('
name|'floating_ip_id'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'NeutronNotFound'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'floating_ip_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_by_address_multiple_found
dedent|''
name|'def'
name|'test_get_floating_ip_by_address_multiple_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_unassociated'
op|']'
op|'*'
number|'2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpMultipleFoundForAddress'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_floating_ip_by_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ips_by_project
dedent|''
name|'def'
name|'test_get_floating_ips_by_project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'tenant_id'
op|'='
name|'project_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_unassociated'
op|','
nl|'\n'
name|'self'
op|'.'
name|'fip_associated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|','
name|'self'
op|'.'
name|'fip_pool_nova'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
name|'tenant_id'
op|'='
name|'project_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
op|'['
name|'self'
op|'.'
name|'_get_expected_fip_model'
op|'('
name|'self'
op|'.'
name|'fip_unassociated'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'_get_expected_fip_model'
op|'('
name|'self'
op|'.'
name|'fip_associated'
op|','
name|'idx'
op|'='
number|'1'
op|')'
op|']'
newline|'\n'
name|'fips'
op|'='
name|'api'
op|'.'
name|'get_floating_ips_by_project'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'fips'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_get_instance_id_by_floating_address
dedent|''
name|'def'
name|'_test_get_instance_id_by_floating_address'
op|'('
name|'self'
op|','
name|'fip_data'
op|','
nl|'\n'
name|'associated'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'fip_data'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'fip_data'
op|']'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'associated'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'fip_data'
op|'['
string|"'port_id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'associated'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'['
string|"'device_id'"
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'expected'
op|'='
name|'None'
newline|'\n'
dedent|''
name|'fip'
op|'='
name|'api'
op|'.'
name|'get_instance_id_by_floating_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'fip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_id_by_floating_address
dedent|''
name|'def'
name|'test_get_instance_id_by_floating_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_instance_id_by_floating_address'
op|'('
name|'self'
op|'.'
name|'fip_unassociated'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_id_by_floating_address_associated
dedent|''
name|'def'
name|'test_get_instance_id_by_floating_address_associated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_instance_id_by_floating_address'
op|'('
name|'self'
op|'.'
name|'fip_associated'
op|','
nl|'\n'
name|'associated'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip
dedent|''
name|'def'
name|'test_allocate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'pool_name'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'pool_id'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'pool_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_floatingip'
op|'('
nl|'\n'
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'floating_network_id'"
op|':'
name|'pool_id'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingip'"
op|':'
name|'self'
op|'.'
name|'fip_unassociated'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'fip'
op|'='
name|'api'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'ext_net'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fip'
op|','
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip_addr_gen_fail
dedent|''
name|'def'
name|'test_allocate_floating_ip_addr_gen_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'pool_name'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'pool_id'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'pool_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_floatingip'
op|'('
nl|'\n'
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'floating_network_id'"
op|':'
name|'pool_id'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exceptions'
op|'.'
name|'IpAddressGenerationFailureClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoMoreFloatingIps'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_floating_ip'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'ext_net'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip_exhausted_fail
dedent|''
name|'def'
name|'test_allocate_floating_ip_exhausted_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'pool_name'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'pool_id'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'pool_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_floatingip'
op|'('
nl|'\n'
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'floating_network_id'"
op|':'
name|'pool_id'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exceptions'
op|'.'
name|'ExternalIpAddressExhaustedClient'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoMoreFloatingIps'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_floating_ip'
op|','
name|'self'
op|'.'
name|'context'
op|','
string|"'ext_net'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip_with_pool_id
dedent|''
name|'def'
name|'test_allocate_floating_ip_with_pool_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'pool_id'
op|'='
name|'self'
op|'.'
name|'fip_pool'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'id'"
op|':'
name|'pool_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_floatingip'
op|'('
nl|'\n'
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'floating_network_id'"
op|':'
name|'pool_id'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingip'"
op|':'
name|'self'
op|'.'
name|'fip_unassociated'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'fip'
op|'='
name|'api'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'pool_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fip'
op|','
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip_with_default_pool
dedent|''
name|'def'
name|'test_allocate_floating_ip_with_default_pool'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'pool_name'
op|'='
name|'self'
op|'.'
name|'fip_pool_nova'
op|'['
string|"'name'"
op|']'
newline|'\n'
name|'pool_id'
op|'='
name|'self'
op|'.'
name|'fip_pool_nova'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'router:external'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'id'"
op|','
nl|'\n'
string|"'name'"
op|':'
name|'pool_name'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_pool_nova'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_floatingip'
op|'('
nl|'\n'
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'floating_network_id'"
op|':'
name|'pool_id'
op|'}'
op|'}'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingip'"
op|':'
name|'self'
op|'.'
name|'fip_unassociated'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'fip'
op|'='
name|'api'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fip'
op|','
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_release_floating_ip
dedent|''
name|'def'
name|'test_release_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'fip_id'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_unassociated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_floatingip'
op|'('
name|'fip_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'release_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_release_floating_ip_associated
dedent|''
name|'def'
name|'test_release_floating_ip_associated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_associated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpAssociated'
op|','
nl|'\n'
name|'api'
op|'.'
name|'release_floating_ip'
op|','
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_setup_mock_for_refresh_cache
dedent|''
name|'def'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'self'
op|','
name|'api'
op|','
name|'instances'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'model'
op|'.'
name|'NetworkInfo'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'for'
name|'instance'
name|'in'
name|'instances'
op|':'
newline|'\n'
indent|'            '
name|'nw_info'
op|'.'
name|'json'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'instance'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'nw_info'
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip
dedent|''
dedent|''
name|'def'
name|'test_associate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'fixed_address'
op|'='
name|'self'
op|'.'
name|'port_address2'
newline|'\n'
name|'fip_id'
op|'='
name|'self'
op|'.'
name|'fip_unassociated'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
op|'['
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_unassociated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_floatingip'
op|'('
nl|'\n'
name|'fip_id'
op|','
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'port_id'"
op|':'
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'port_id'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
name|'fixed_address'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'api'
op|','
op|'['
name|'self'
op|'.'
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_reassociate_floating_ip
dedent|''
name|'def'
name|'test_reassociate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'new_fixed_address'
op|'='
name|'self'
op|'.'
name|'port_address'
newline|'\n'
name|'fip_id'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance2'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
op|'['
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'0'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_associated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_floatingip'
op|'('
nl|'\n'
name|'fip_id'
op|','
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'port_id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'fixed_ip_address'"
op|':'
name|'new_fixed_address'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'port_id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'1'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'api'
op|','
op|'['
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance2'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'associate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance2'
op|','
nl|'\n'
name|'address'
op|','
name|'new_fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip_not_found_fixed_ip
dedent|''
name|'def'
name|'test_associate_floating_ip_not_found_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'fixed_address'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'fixed_ip_address'"
op|']'
newline|'\n'
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
op|'['
name|'self'
op|'.'
name|'port_data2'
op|'['
number|'0'
op|']'
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForAddress'
op|','
nl|'\n'
name|'api'
op|'.'
name|'associate_floating_ip'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
name|'address'
op|','
name|'fixed_address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disassociate_floating_ip
dedent|''
name|'def'
name|'test_disassociate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'floating_ip_address'"
op|']'
newline|'\n'
name|'fip_id'
op|'='
name|'self'
op|'.'
name|'fip_associated'
op|'['
string|"'id'"
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
name|'floating_ip_address'
op|'='
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'floatingips'"
op|':'
op|'['
name|'self'
op|'.'
name|'fip_associated'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_floatingip'
op|'('
nl|'\n'
name|'fip_id'
op|','
op|'{'
string|"'floatingip'"
op|':'
op|'{'
string|"'port_id'"
op|':'
name|'None'
op|'}'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'api'
op|','
op|'['
name|'self'
op|'.'
name|'instance'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_to_instance
dedent|''
name|'def'
name|'test_add_fixed_ip_to_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'api'
op|','
op|'['
name|'self'
op|'.'
name|'instance'
op|']'
op|')'
newline|'\n'
name|'network_id'
op|'='
string|"'my_netid1'"
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'network_id'"
op|':'
name|'network_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'subnets'"
op|':'
name|'self'
op|'.'
name|'subnet_data_n'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data1'
op|'}'
op|')'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'['
op|'{'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
string|"'my_portid1'"
op|','
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'network_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_from_instance
dedent|''
name|'def'
name|'test_remove_fixed_ip_from_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_setup_mock_for_refresh_cache'
op|'('
name|'api'
op|','
op|'['
name|'self'
op|'.'
name|'instance'
op|']'
op|')'
newline|'\n'
name|'address'
op|'='
string|"'10.0.0.3'"
newline|'\n'
name|'zone'
op|'='
string|"'compute:%s'"
op|'%'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'availability_zone'"
op|']'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
string|"'ip_address=%s'"
op|'%'
name|'address'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data1'
op|'}'
op|')'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
newline|'\n'
name|'port'
op|'['
string|"'fixed_ips'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
string|"'my_portid1'"
op|','
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_floating_ips_without_l3_support
dedent|''
name|'def'
name|'test_list_floating_ips_without_l3_support'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'NeutronNotFound'
op|'='
name|'exceptions'
op|'.'
name|'NeutronClientException'
op|'('
nl|'\n'
name|'status_code'
op|'='
number|'404'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_floatingips'
op|'('
nl|'\n'
name|'fixed_ip_address'
op|'='
string|"'1.1.1.1'"
op|','
name|'port_id'
op|'='
number|'1'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'NeutronNotFound'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'floatingips'
op|'='
name|'api'
op|'.'
name|'_get_floating_ips_by_fixed_and_port'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|','
string|"'1.1.1.1'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'floatingips'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_get_ips
dedent|''
name|'def'
name|'test_nw_info_get_ips'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_port'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'port-id'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_floating_ips_by_fixed_and_port'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_get_floating_ips_by_fixed_and_port'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|','
string|"'1.1.1.1'"
op|','
string|"'port-id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'floating_ip_address'"
op|':'
string|"'10.0.0.1'"
op|'}'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'result'
op|'='
name|'api'
op|'.'
name|'_nw_info_get_ips'
op|'('
name|'self'
op|'.'
name|'moxed_client'
op|','
name|'fake_port'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
string|"'1.1.1.1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'['
string|"'floating_ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
string|"'10.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_get_subnets
dedent|''
name|'def'
name|'test_nw_info_get_subnets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_port'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
nl|'\n'
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ip_address'"
op|':'
string|"'2.2.2.2'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'port-id'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'fake_subnet'
op|'='
name|'model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'1.0.0.0/8'"
op|')'
newline|'\n'
name|'fake_ips'
op|'='
op|'['
name|'model'
op|'.'
name|'IP'
op|'('
name|'x'
op|'['
string|"'ip_address'"
op|']'
op|')'
name|'for'
name|'x'
name|'in'
name|'fake_port'
op|'['
string|"'fixed_ips'"
op|']'
op|']'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_subnets_from_port'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_get_subnets_from_port'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_port'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'fake_subnet'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'subnets'
op|'='
name|'api'
op|'.'
name|'_nw_info_get_subnets'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_port'
op|','
name|'fake_ips'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'subnets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
string|"'1.1.1.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_nw_info_build_network
dedent|''
name|'def'
name|'_test_nw_info_build_network'
op|'('
name|'self'
op|','
name|'vif_type'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_port'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'port-id'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'net-id'"
op|','
nl|'\n'
string|"'binding:vif_type'"
op|':'
name|'vif_type'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'fake_subnets'
op|'='
op|'['
name|'model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'1.0.0.0/8'"
op|')'
op|']'
newline|'\n'
name|'fake_nets'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'net-id'"
op|','
string|"'name'"
op|':'
string|"'foo'"
op|','
string|"'tenant_id'"
op|':'
string|"'tenant'"
op|'}'
op|']'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'net'
op|','
name|'iid'
op|'='
name|'api'
op|'.'
name|'_nw_info_build_network'
op|'('
name|'fake_port'
op|','
name|'fake_nets'
op|','
nl|'\n'
name|'fake_subnets'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'['
string|"'subnets'"
op|']'
op|','
name|'fake_subnets'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'['
string|"'id'"
op|']'
op|','
string|"'net-id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'['
string|"'label'"
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'.'
name|'get_meta'
op|'('
string|"'tenant_id'"
op|')'
op|','
string|"'tenant'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'.'
name|'get_meta'
op|'('
string|"'injected'"
op|')'
op|','
name|'CONF'
op|'.'
name|'flat_injected'
op|')'
newline|'\n'
name|'return'
name|'net'
op|','
name|'iid'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_build_network_ovs
dedent|''
name|'def'
name|'test_nw_info_build_network_ovs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|','
name|'iid'
op|'='
name|'self'
op|'.'
name|'_test_nw_info_build_network'
op|'('
name|'model'
op|'.'
name|'VIF_TYPE_OVS'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'ovs_bridge'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'should_create_bridge'"
op|','
name|'net'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'iid'
op|','
string|"'port-id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_build_network_bridge
dedent|''
name|'def'
name|'test_nw_info_build_network_bridge'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|','
name|'iid'
op|'='
name|'self'
op|'.'
name|'_test_nw_info_build_network'
op|'('
name|'model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'brqnet-id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'net'
op|'['
string|"'should_create_bridge'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'iid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_build_network_other
dedent|''
name|'def'
name|'test_nw_info_build_network_other'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'net'
op|','
name|'iid'
op|'='
name|'self'
op|'.'
name|'_test_nw_info_build_network'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'net'
op|'['
string|"'bridge'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'should_create_bridge'"
op|','
name|'net'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'iid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_nw_info_build_no_match
dedent|''
name|'def'
name|'test_nw_info_build_no_match'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_port'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'port-id'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'net-id1'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'tenant'"
op|','
nl|'\n'
string|"'binding:vif_type'"
op|':'
name|'model'
op|'.'
name|'VIF_TYPE_OVS'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'fake_subnets'
op|'='
op|'['
name|'model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'1.0.0.0/8'"
op|')'
op|']'
newline|'\n'
name|'fake_nets'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'net-id2'"
op|','
string|"'name'"
op|':'
string|"'foo'"
op|','
string|"'tenant_id'"
op|':'
string|"'tenant'"
op|'}'
op|']'
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'net'
op|','
name|'iid'
op|'='
name|'api'
op|'.'
name|'_nw_info_build_network'
op|'('
name|'fake_port'
op|','
name|'fake_nets'
op|','
nl|'\n'
name|'fake_subnets'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'fake_subnets'
op|','
name|'net'
op|'['
string|"'subnets'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'net-id1'"
op|','
name|'net'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'net-id1'"
op|','
name|'net'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'tenant'"
op|','
name|'net'
op|'['
string|"'meta'"
op|']'
op|'['
string|"'tenant_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_build_network_info_model
dedent|''
name|'def'
name|'test_build_network_info_model'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'fake_inst'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'fake'"
op|','
string|"'uuid'"
op|':'
string|"'uuid'"
op|','
nl|'\n'
string|"'info_cache'"
op|':'
op|'{'
string|"'network_info'"
op|':'
op|'['
op|']'
op|'}'
op|'}'
newline|'\n'
name|'fake_ports'
op|'='
op|'['
nl|'\n'
comment|"# admin_state_up=True and status='ACTIVE' thus vif.active=True"
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'port1'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'net-id'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'ACTIVE'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'de:ad:be:ef:00:01'"
op|','
nl|'\n'
string|"'binding:vif_type'"
op|':'
name|'model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|"# admin_state_up=False and status='DOWN' thus vif.active=True"
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'port2'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'net-id'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'de:ad:be:ef:00:02'"
op|','
nl|'\n'
string|"'binding:vif_type'"
op|':'
name|'model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|"# admin_state_up=True and status='DOWN' thus vif.active=False"
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'port0'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'net-id'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'1.1.1.1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'de:ad:be:ef:00:03'"
op|','
nl|'\n'
string|"'binding:vif_type'"
op|':'
name|'model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
comment|'# This does not match the networks we provide below,'
nl|'\n'
comment|'# so it should be ignored (and is here to verify that)'
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'port3'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'other-net-id'"
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'status'"
op|':'
string|"'DOWN'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'fake_subnets'
op|'='
op|'['
name|'model'
op|'.'
name|'Subnet'
op|'('
name|'cidr'
op|'='
string|"'1.0.0.0/8'"
op|')'
op|']'
newline|'\n'
name|'fake_nets'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'net-id'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'fake'"
op|','
nl|'\n'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
string|"'fake'"
op|','
name|'device_id'
op|'='
string|"'uuid'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'fake_ports'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_floating_ips_by_fixed_and_port'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_get_subnets_from_port'"
op|')'
newline|'\n'
name|'requested_ports'
op|'='
op|'['
name|'fake_ports'
op|'['
number|'2'
op|']'
op|','
name|'fake_ports'
op|'['
number|'0'
op|']'
op|','
name|'fake_ports'
op|'['
number|'1'
op|']'
op|']'
newline|'\n'
name|'for'
name|'requested_port'
name|'in'
name|'requested_ports'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'_get_floating_ips_by_fixed_and_port'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|','
string|"'1.1.1.1'"
op|','
name|'requested_port'
op|'['
string|"'id'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
op|'{'
string|"'floating_ip_address'"
op|':'
string|"'10.0.0.1'"
op|'}'
op|']'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'requested_port'
name|'in'
name|'requested_ports'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'_get_subnets_from_port'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_port'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_subnets'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
string|"'fake'"
op|')'
newline|'\n'
name|'nw_infos'
op|'='
name|'api'
op|'.'
name|'_build_network_info_model'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'fake_inst'
op|','
nl|'\n'
name|'fake_nets'
op|','
nl|'\n'
op|'['
name|'fake_ports'
op|'['
number|'2'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'fake_ports'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'fake_ports'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'nw_infos'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'nw_info'
name|'in'
name|'nw_infos'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'requested_ports'
op|'['
name|'index'
op|']'
op|'['
string|"'mac_address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
string|"'devname'"
op|']'
op|','
string|"'tapport'"
op|'+'
name|'str'
op|'('
name|'index'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'nw_info'
op|'['
string|"'ovs_interfaceid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
string|"'type'"
op|']'
op|','
name|'model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
string|"'network'"
op|']'
op|'['
string|"'bridge'"
op|']'
op|','
string|"'brqnet-id'"
op|')'
newline|'\n'
name|'index'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'0'
op|']'
op|'['
string|"'active'"
op|']'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'1'
op|']'
op|'['
string|"'active'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'2'
op|']'
op|'['
string|"'active'"
op|']'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'port0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'port1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_infos'
op|'['
number|'2'
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'port2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_subnets_from_port
dedent|''
name|'def'
name|'test_get_subnets_from_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'port_data'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'subnet_data1'
op|'='
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|'.'
name|'subnet_data1'
op|')'
newline|'\n'
name|'subnet_data1'
op|'['
number|'0'
op|']'
op|'['
string|"'host_routes'"
op|']'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'destination'"
op|':'
string|"'192.168.0.0/24'"
op|','
string|"'nexthop'"
op|':'
string|"'1.0.0.10'"
op|'}'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
name|'id'
op|'='
op|'['
name|'port_data'
op|'['
string|"'fixed_ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'subnet_id'"
op|']'
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'subnets'"
op|':'
name|'subnet_data1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'network_id'
op|'='
name|'subnet_data1'
op|'['
number|'0'
op|']'
op|'['
string|"'network_id'"
op|']'
op|','
nl|'\n'
name|'device_owner'
op|'='
string|"'network:dhcp'"
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'subnets'
op|'='
name|'api'
op|'.'
name|'_get_subnets_from_port'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'port_data'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'subnets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'routes'"
op|']'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'routes'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'subnet_data1'
op|'['
number|'0'
op|']'
op|'['
string|"'host_routes'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'destination'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'subnets'
op|'['
number|'0'
op|']'
op|'['
string|"'routes'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'subnet_data1'
op|'['
number|'0'
op|']'
op|'['
string|"'host_routes'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'nexthop'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_empty_list_networks
dedent|''
name|'def'
name|'test_get_all_empty_list_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'networks'
op|'='
name|'api'
op|'.'
name|'get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'networks'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ips_by_fixed_address
dedent|''
name|'def'
name|'test_get_floating_ips_by_fixed_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# NOTE(lbragstad): We need to reset the mocks in order to assert'
nl|'\n'
comment|'# a NotImplementedError is raised when calling the method under test.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ResetAll'
op|'('
op|')'
newline|'\n'
name|'fake_fixed'
op|'='
string|"'192.168.1.4'"
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get_floating_ips_by_fixed_address'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'fake_fixed'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2WithMock
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2WithMock'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Used to test Neutron V2 API with mock."""'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNeutronv2WithMock'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
nl|'\n'
string|"'fake-user'"
op|','
string|"'fake-project'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'bff4a5a6b9eb4ea2a6efec6eefb77936'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_validate_networks_fixed_ip_no_dup
dedent|''
name|'def'
name|'_test_validate_networks_fixed_ip_no_dup'
op|'('
name|'self'
op|','
name|'nets'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'ids'
op|','
name|'list_port_values'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|_fake_list_ports
indent|'        '
name|'def'
name|'_fake_list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'args'
op|','
name|'return_value'
name|'in'
name|'list_port_values'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'args'
op|'=='
name|'search_opts'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'return_value'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Unexpected call to list_ports %s'"
op|'%'
name|'search_opts'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'list_ports'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'_fake_list_ports'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'list_networks'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'show_quota'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
string|"'quota'"
op|':'
op|'{'
string|"'port'"
op|':'
number|'50'
op|'}'
op|'}'
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'list_ports_mock'
op|','
name|'list_networks_mock'
op|','
name|'show_quota_mock'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'list_port_values'
op|')'
op|','
nl|'\n'
name|'len'
op|'('
name|'list_ports_mock'
op|'.'
name|'call_args_list'
op|')'
op|')'
newline|'\n'
name|'list_networks_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'id'
op|'='
name|'ids'
op|')'
newline|'\n'
name|'show_quota_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'tenant_id'
op|'='
string|"'fake-project'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_fixed_ip_no_dup1
dedent|''
dedent|''
name|'def'
name|'test_validate_networks_fixed_ip_no_dup1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for a network with a'
nl|'\n'
comment|'# fixed ip that is not already in use because no fixed ips in use'
nl|'\n'
nl|'\n'
indent|'        '
name|'nets1'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid1'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'fake-project'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'10.0.1.2'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|']'
newline|'\n'
name|'list_port_values'
op|'='
op|'['
op|'('
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
string|"'ip_address=10.0.1.2'"
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'device_id'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'tenant_id'"
op|':'
string|"'fake-project'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_test_validate_networks_fixed_ip_no_dup'
op|'('
name|'nets1'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'ids'
op|','
name|'list_port_values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_fixed_ip_no_dup2
dedent|''
name|'def'
name|'test_validate_networks_fixed_ip_no_dup2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for a network with a'
nl|'\n'
comment|'# fixed ip that is not already in use because not used on this net id'
nl|'\n'
nl|'\n'
indent|'        '
name|'nets2'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid1'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'fake-project'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname2'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid2'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'fake-project'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'10.0.1.2'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
string|"'10.0.1.3'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'ids'
op|'='
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
newline|'\n'
name|'list_port_values'
op|'='
op|'['
op|'('
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
string|"'ip_address=10.0.1.2'"
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'device_id'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|','
nl|'\n'
op|'('
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
string|"'ip_address=10.0.1.3'"
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'device_id'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|','
nl|'\n'
nl|'\n'
op|'('
op|'{'
string|"'tenant_id'"
op|':'
string|"'fake-project'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'ports'"
op|':'
op|'['
op|']'
op|'}'
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_test_validate_networks_fixed_ip_no_dup'
op|'('
name|'nets2'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'ids'
op|','
name|'list_port_values'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_fixed_ip_dup
dedent|''
name|'def'
name|'test_validate_networks_fixed_ip_dup'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test validation for a request for a network with a'
nl|'\n'
comment|'# fixed ip that is already in use'
nl|'\n'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'10.0.1.2'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'list_port_mock_params'
op|'='
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
string|"'ip_address=10.0.1.2'"
op|','
nl|'\n'
string|"'fields'"
op|':'
string|"'device_id'"
op|'}'
newline|'\n'
name|'list_port_mock_return'
op|'='
op|'{'
string|"'ports'"
op|':'
op|'['
op|'('
op|'{'
string|"'device_id'"
op|':'
string|"'my_deviceid'"
op|'}'
op|')'
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'list_ports'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'list_port_mock_return'
op|')'
name|'as'
op|'('
nl|'\n'
name|'list_ports_mock'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpAlreadyInUse'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'list_ports_mock'
op|'.'
name|'assert_called_once_with'
op|'('
op|'**'
name|'list_port_mock_params'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip_exceed_limit
dedent|''
dedent|''
name|'def'
name|'test_allocate_floating_ip_exceed_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify that the correct exception is thrown when quota exceed'
nl|'\n'
indent|'        '
name|'pool_name'
op|'='
string|"'dummy'"
newline|'\n'
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'create_floatingip'"
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'api'
op|','
nl|'\n'
string|"'_get_floating_ip_pool_id_by_name_or_id'"
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'create_mock'
op|','
name|'get_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'create_mock'
op|'.'
name|'side_effect'
op|'='
name|'neutronv2'
op|'.'
name|'exceptions'
op|'.'
name|'OverQuotaClient'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpLimitExceeded'
op|','
nl|'\n'
name|'api'
op|'.'
name|'allocate_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'pool_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_port_for_instance_no_more_ip
dedent|''
dedent|''
name|'def'
name|'test_create_port_for_instance_no_more_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'net'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid1'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
nl|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'create_port'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exceptions'
op|'.'
name|'IpAddressGenerationFailureClient'
op|'('
op|')'
op|')'
name|'as'
op|'('
nl|'\n'
name|'create_port_mock'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'zone'
op|'='
string|"'compute:%s'"
op|'%'
name|'instance'
op|'['
string|"'availability_zone'"
op|']'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'device_id'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
name|'zone'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoMoreFixedIps'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'_create_port'
op|','
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'instance'
op|','
name|'net'
op|'['
string|"'id'"
op|']'
op|','
name|'port_req_body'
op|')'
newline|'\n'
name|'create_port_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'port_req_body'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'create_port'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'exceptions'
op|'.'
name|'MacAddressInUseClient'
op|'('
op|')'
op|')'
newline|'\n'
DECL|member|test_create_port_for_instance_mac_address_in_use
name|'def'
name|'test_create_port_for_instance_mac_address_in_use'
op|'('
name|'self'
op|','
nl|'\n'
name|'create_port_mock'
op|')'
op|':'
newline|'\n'
comment|'# Create fake data.'
nl|'\n'
indent|'        '
name|'instance'
op|'='
name|'fake_instance'
op|'.'
name|'fake_instance_obj'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'net'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'subnets'"
op|':'
op|'['
string|"'mysubnid1'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
name|'zone'
op|'='
string|"'compute:%s'"
op|'%'
name|'instance'
op|'['
string|"'availability_zone'"
op|']'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'device_id'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
name|'zone'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'XX:XX:XX:XX:XX:XX'"
op|'}'
op|'}'
newline|'\n'
name|'available_macs'
op|'='
name|'set'
op|'('
op|'['
string|"'XX:XX:XX:XX:XX:XX'"
op|']'
op|')'
newline|'\n'
comment|'# Run the code.'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'PortInUse'
op|','
nl|'\n'
name|'self'
op|'.'
name|'api'
op|'.'
name|'_create_port'
op|','
nl|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
op|','
nl|'\n'
name|'instance'
op|','
name|'net'
op|'['
string|"'id'"
op|']'
op|','
name|'port_req_body'
op|','
nl|'\n'
name|'available_macs'
op|'='
name|'available_macs'
op|')'
newline|'\n'
comment|'# Assert the calls.'
nl|'\n'
name|'create_port_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'port_req_body'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_network_detail_not_found
dedent|''
name|'def'
name|'test_get_network_detail_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'expected_exc'
op|'='
name|'exceptions'
op|'.'
name|'NetworkNotFoundClient'
op|'('
op|')'
newline|'\n'
name|'network_uuid'
op|'='
string|"'02cacbca-7d48-4a2c-8011-43eecf8a9786'"
newline|'\n'
name|'with'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|"'show_network'"
op|','
nl|'\n'
name|'side_effect'
op|'='
name|'expected_exc'
op|')'
name|'as'
op|'('
nl|'\n'
name|'fake_show_network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkNotFound'
op|','
nl|'\n'
name|'api'
op|'.'
name|'get'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'network_uuid'
op|')'
newline|'\n'
name|'fake_show_network'
op|'.'
name|'assert_called_once_with'
op|'('
name|'network_uuid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2ModuleMethods
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2ModuleMethods'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_gather_port_ids_and_networks_wrong_params
indent|'    '
name|'def'
name|'test_gather_port_ids_and_networks_wrong_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Test with networks not None and port_ids is None'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'api'
op|'.'
name|'_gather_port_ids_and_networks'
op|','
nl|'\n'
string|"'fake_context'"
op|','
string|"'fake_instance'"
op|','
nl|'\n'
op|'['
op|'{'
string|"'network'"
op|':'
op|'{'
string|"'name'"
op|':'
string|"'foo'"
op|'}'
op|'}'
op|']'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Test with networks is None and port_ids not None'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NovaException'
op|','
nl|'\n'
name|'api'
op|'.'
name|'_gather_port_ids_and_networks'
op|','
nl|'\n'
string|"'fake_context'"
op|','
string|"'fake_instance'"
op|','
nl|'\n'
name|'None'
op|','
op|'['
string|"'list'"
op|','
string|"'of'"
op|','
string|"'port_ids'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_requested_network_ordering_no_preference_ids
dedent|''
name|'def'
name|'test_ensure_requested_network_ordering_no_preference_ids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
newline|'\n'
nl|'\n'
name|'neutronapi'
op|'.'
name|'_ensure_requested_network_ordering'
op|'('
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'x'
op|','
nl|'\n'
name|'l'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_requested_network_ordering_no_preference_hashes
dedent|''
name|'def'
name|'test_ensure_requested_network_ordering_no_preference_hashes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'3'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'neutronapi'
op|'.'
name|'_ensure_requested_network_ordering'
op|'('
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'l'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|','
op|'['
op|'{'
string|"'id'"
op|':'
number|'3'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ensure_requested_network_ordering_with_preference
dedent|''
name|'def'
name|'test_ensure_requested_network_ordering_with_preference'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'l'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'3'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'neutronapi'
op|'.'
name|'_ensure_requested_network_ordering'
op|'('
nl|'\n'
name|'lambda'
name|'x'
op|':'
name|'x'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'l'
op|','
nl|'\n'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'l'
op|','
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'2'
op|'}'
op|','
op|'{'
string|"'id'"
op|':'
number|'3'
op|'}'
op|']'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2Portbinding
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2Portbinding'
op|'('
name|'TestNeutronv2Base'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_portbinding
indent|'    '
name|'def'
name|'test_allocate_for_instance_portbinding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|','
name|'portbinding'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_populate_neutron_extension_values_binding
dedent|''
name|'def'
name|'test_populate_neutron_extension_values_binding'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_extensions'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'extensions'"
op|':'
op|'['
op|'{'
string|"'name'"
op|':'
name|'constants'
op|'.'
name|'PORTBINDING_EXT'
op|'}'
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'host_id'
op|'='
string|"'my_host_id'"
newline|'\n'
name|'instance'
op|'='
op|'{'
string|"'host'"
op|':'
name|'host_id'
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
name|'api'
op|'.'
name|'_populate_neutron_extension_values'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'instance'
op|','
nl|'\n'
name|'port_req_body'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'binding:host_id'"
op|']'
op|','
name|'host_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish_binding_false
dedent|''
name|'def'
name|'test_migrate_instance_finish_binding_false'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'refresh_cache'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish_binding_true
dedent|''
name|'def'
name|'test_migrate_instance_finish_binding_true'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'refresh_cache'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
name|'ports'
op|'='
op|'{'
string|"'ports'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'test1'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ports'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
string|"'dest_host'"
op|','
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
nl|'\n'
op|'{'
string|"'binding:host_id'"
op|':'
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
string|"'test1'"
op|','
nl|'\n'
name|'port_req_body'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish_binding_true_exception
dedent|''
name|'def'
name|'test_migrate_instance_finish_binding_true_exception'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'_has_port_binding_extension'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'_has_port_binding_extension'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'refresh_cache'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'True'
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'admin'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'search_opts'
op|'='
op|'{'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|'}'
newline|'\n'
name|'ports'
op|'='
op|'{'
string|"'ports'"
op|':'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'test1'"
op|'}'
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
op|'**'
name|'search_opts'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ports'
op|')'
newline|'\n'
name|'migration'
op|'='
op|'{'
string|"'source_compute'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'.'
name|'get'
op|'('
string|"'host'"
op|')'
op|','
nl|'\n'
string|"'dest_compute'"
op|':'
string|"'dest_host'"
op|','
op|'}'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
string|"'port'"
op|':'
nl|'\n'
op|'{'
string|"'binding:host_id'"
op|':'
name|'migration'
op|'['
string|"'dest_compute'"
op|']'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
string|"'test1'"
op|','
nl|'\n'
name|'port_req_body'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'Exception'
op|'('
string|'"fail to update port"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NEUTRON_CLIENT_EXCEPTION'
op|','
nl|'\n'
name|'api'
op|'.'
name|'migrate_instance_finish'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
name|'migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_not_implemented
dedent|''
name|'def'
name|'test_associate_not_implemented'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'neutronapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'NotImplementedError'
op|','
nl|'\n'
name|'api'
op|'.'
name|'associate'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'id'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronv2ExtraDhcpOpts
dedent|''
dedent|''
name|'class'
name|'TestNeutronv2ExtraDhcpOpts'
op|'('
name|'TestNeutronv2Base'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestNeutronv2ExtraDhcpOpts'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_1_with_extra_dhcp_opts_turned_off
dedent|''
name|'def'
name|'test_allocate_for_instance_1_with_extra_dhcp_opts_turned_off'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|','
name|'extra_dhcp_opts'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_extradhcpopts
dedent|''
name|'def'
name|'test_allocate_for_instance_extradhcpopts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dhcp_opts'
op|'='
op|'['
op|'{'
string|"'opt_name'"
op|':'
string|"'bootfile-name'"
op|','
nl|'\n'
string|"'opt_value'"
op|':'
string|"'pxelinux.0'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'opt_name'"
op|':'
string|"'tftp-server'"
op|','
nl|'\n'
string|"'opt_value'"
op|':'
string|"'123.123.123.123'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'opt_name'"
op|':'
string|"'server-ip-address'"
op|','
nl|'\n'
string|"'opt_value'"
op|':'
string|"'123.123.123.456'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|','
name|'dhcp_options'
op|'='
name|'dhcp_opts'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestNeutronClientForAdminScenarios
dedent|''
dedent|''
name|'class'
name|'TestNeutronClientForAdminScenarios'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|_test_get_client_for_admin
indent|'    '
name|'def'
name|'_test_get_client_for_admin'
op|'('
name|'self'
op|','
name|'use_id'
op|'='
name|'False'
op|','
name|'admin_context'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|client_mock
indent|'        '
name|'def'
name|'client_mock'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'client'
op|'.'
name|'Client'
op|'.'
name|'httpclient'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'flags'
op|'('
name|'auth_strategy'
op|'='
name|'None'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url'
op|'='
string|"'http://anyhost/'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'url_timeout'
op|'='
number|'30'
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'if'
name|'use_id'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'flags'
op|'('
name|'admin_tenant_id'
op|'='
string|"'admin_tenant_id'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'admin_user_id'
op|'='
string|"'admin_user_id'"
op|','
name|'group'
op|'='
string|"'neutron'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'admin_context'
op|':'
newline|'\n'
indent|'            '
name|'my_context'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"__init__"'
op|')'
newline|'\n'
name|'kwargs'
op|'='
op|'{'
nl|'\n'
string|"'auth_url'"
op|':'
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_auth_url'
op|','
nl|'\n'
string|"'password'"
op|':'
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_password'
op|','
nl|'\n'
string|"'endpoint_url'"
op|':'
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url'
op|','
nl|'\n'
string|"'auth_strategy'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'timeout'"
op|':'
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'url_timeout'
op|','
nl|'\n'
string|"'insecure'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'ca_cert'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'token'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'if'
name|'use_id'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'tenant_id'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_tenant_id'
newline|'\n'
name|'kwargs'
op|'['
string|"'user_id'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_user_id'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'kwargs'
op|'['
string|"'tenant_name'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_tenant_name'
newline|'\n'
name|'kwargs'
op|'['
string|"'username'"
op|']'
op|'='
name|'CONF'
op|'.'
name|'neutron'
op|'.'
name|'admin_username'
newline|'\n'
dedent|''
name|'client'
op|'.'
name|'Client'
op|'.'
name|'__init__'
op|'('
op|'**'
name|'kwargs'
op|')'
op|'.'
name|'WithSideEffects'
op|'('
name|'client_mock'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# clean global'
nl|'\n'
name|'token_store'
op|'='
name|'neutronv2'
op|'.'
name|'AdminTokenStore'
op|'.'
name|'get'
op|'('
op|')'
newline|'\n'
name|'token_store'
op|'.'
name|'admin_auth_token'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'admin_context'
op|':'
newline|'\n'
comment|'# Note that the context does not contain a token but is'
nl|'\n'
comment|'# an admin context  which will force an elevation to admin'
nl|'\n'
comment|'# credentials.'
nl|'\n'
indent|'            '
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Note that the context is not elevated, but the True is passed in'
nl|'\n'
comment|'# which will force an elevation to admin credentials even though'
nl|'\n'
comment|'# the context has an auth_token.'
nl|'\n'
indent|'            '
name|'neutronv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_client_for_admin
dedent|''
dedent|''
name|'def'
name|'test_get_client_for_admin'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_client_for_admin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_client_for_admin_with_id
dedent|''
name|'def'
name|'test_get_client_for_admin_with_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_client_for_admin'
op|'('
name|'use_id'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_client_for_admin_context
dedent|''
name|'def'
name|'test_get_client_for_admin_context'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_client_for_admin'
op|'('
name|'admin_context'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_client_for_admin_context_with_id
dedent|''
name|'def'
name|'test_get_client_for_admin_context_with_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_get_client_for_admin'
op|'('
name|'use_id'
op|'='
name|'True'
op|','
name|'admin_context'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

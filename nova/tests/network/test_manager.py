begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011 Rackspace'
nl|'\n'
comment|'# Copyright (c) 2011 X.commerce, a business unit of eBay Inc.'
nl|'\n'
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'fixtures'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'import'
name|'mox'
newline|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'ipv6'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'floating_ips'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'linux_net'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'manager'
name|'as'
name|'network_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
name|'as'
name|'net_model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'db'
name|'import'
name|'exception'
name|'as'
name|'db_exc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'importutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'processutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
op|'.'
name|'rpc'
name|'import'
name|'common'
name|'as'
name|'rpc_common'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_instance'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_ldap'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'fake_network'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'matchers'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
op|'.'
name|'objects'
name|'import'
name|'test_network'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|HOST
name|'HOST'
op|'='
string|'"testhost"'
newline|'\n'
DECL|variable|FAKEUUID
name|'FAKEUUID'
op|'='
string|'"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|fake_inst
name|'fake_inst'
op|'='
name|'fake_instance'
op|'.'
name|'fake_db_instance'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|networks
name|'networks'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'test0'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:db8::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:db8::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'fa0'"
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
string|"'fake_fa0'"
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'192.168.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project'"
op|','
nl|'\n'
string|"'vpn_public_address'"
op|':'
string|"'192.168.0.2'"
op|','
nl|'\n'
string|"'vpn_public_port'"
op|':'
string|"'22'"
op|','
nl|'\n'
string|"'vpn_private_address'"
op|':'
string|"'10.0.0.2'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'test1'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.1.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:db9::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:db9::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'fa1'"
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
string|"'fake_fa1'"
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.1.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.1.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'192.168.0.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'192.168.0.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project'"
op|','
nl|'\n'
string|"'vpn_public_address'"
op|':'
string|"'192.168.1.2'"
op|','
nl|'\n'
string|"'vpn_public_port'"
op|':'
string|"'22'"
op|','
nl|'\n'
string|"'vpn_private_address'"
op|':'
string|"'10.0.0.2'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|fixed_ips
name|'fixed_ips'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.0.100'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'allocated'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'floating_ips'"
op|':'
op|'['
op|']'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.1.100'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'allocated'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'floating_ips'"
op|':'
op|'['
op|']'
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|flavor
name|'flavor'
op|'='
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'rxtx_cap'"
op|':'
number|'3'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|floating_ip_fields
name|'floating_ip_fields'
op|'='
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'192.168.10.100'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'auto_assigned'"
op|':'
name|'False'
op|'}'
newline|'\n'
nl|'\n'
DECL|variable|vifs
name|'vifs'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'DE:AD:BE:EF:00:00'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-0000000000000000'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'DE:AD:BE:EF:00:01'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-0000000000000001'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'DE:AD:BE:EF:00:02'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'00000000-0000-0000-0000-0000000000000002'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
number|'0'
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FlatNetworkTestCase
name|'class'
name|'FlatNetworkTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FlatNetworkTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tempdir'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'TempDir'
op|'('
op|')'
op|')'
op|'.'
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'log_dir'
op|'='
name|'self'
op|'.'
name|'tempdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'network_manager'
op|'.'
name|'FlatManager'
op|'('
name|'host'
op|'='
name|'HOST'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_domain'
op|'='
string|"''"
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info
dedent|''
name|'def'
name|'test_get_instance_nw_info'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_get_instance_nw_info'
op|'='
name|'fake_network'
op|'.'
name|'fake_get_instance_nw_info'
newline|'\n'
nl|'\n'
name|'nw_info'
op|'='
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'0'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'nw_info'
op|')'
newline|'\n'
nl|'\n'
name|'nw_info'
op|'='
name|'fake_get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'stubs'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
op|','
name|'vif'
name|'in'
name|'enumerate'
op|'('
name|'nw_info'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nid'
op|'='
name|'i'
op|'+'
number|'1'
newline|'\n'
name|'check'
op|'='
op|'{'
string|"'bridge'"
op|':'
string|"'fake_br%d'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.%s.0/24'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:db8:0:%x::/64'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'00000000-0000-0000-0000-00000000000000%02d'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.%d.255'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'dhcp_server'"
op|':'
string|"'192.168.1.1'"
op|','
nl|'\n'
string|"'dns'"
op|':'
op|'['
string|"'192.168.%d.3'"
op|'%'
name|'nid'
op|','
string|"'192.168.%d.4'"
op|'%'
name|'nid'
op|']'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.%d.1'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:db8:0:1::1'"
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'test%d'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'mac'"
op|':'
string|"'DE:AD:BE:EF:00:%02x'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'rxtx_cap'"
op|':'
number|'30'
op|','
nl|'\n'
string|"'vif_type'"
op|':'
name|'net_model'
op|'.'
name|'VIF_TYPE_BRIDGE'
op|','
nl|'\n'
string|"'vif_devname'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vif_uuid'"
op|':'
nl|'\n'
string|"'00000000-0000-0000-0000-00000000000000%02d'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'ovs_interfaceid'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'qbh_params'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'qbg_params'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'should_create_vlan'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'should_create_bridge'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'ip'"
op|':'
string|"'192.168.%d.%03d'"
op|'%'
op|'('
name|'nid'
op|','
name|'nid'
op|'+'
number|'99'
op|')'
op|','
nl|'\n'
string|"'ip_v6'"
op|':'
string|"'2001:db8:0:1::%x'"
op|'%'
name|'nid'
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
number|'64'
op|','
nl|'\n'
string|"'physical_network'"
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
newline|'\n'
name|'net_v4'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'net_v6'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'1'
op|']'
newline|'\n'
nl|'\n'
name|'vif_dict'
op|'='
name|'dict'
op|'('
name|'bridge'
op|'='
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
nl|'\n'
name|'cidr'
op|'='
name|'net_v4'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'cidr_v6'
op|'='
name|'net_v6'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'id'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'multi_host'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'injected'
op|'='
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'injected'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'bridge_interface'"
op|')'
op|','
nl|'\n'
name|'vlan'
op|'='
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'vlan'"
op|')'
op|','
nl|'\n'
name|'broadcast'
op|'='
name|'str'
op|'('
name|'net_v4'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'broadcast'
op|')'
op|','
nl|'\n'
name|'dhcp_server'
op|'='
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'dhcp_server'"
op|','
nl|'\n'
name|'net_v4'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
op|')'
op|','
nl|'\n'
name|'dns'
op|'='
op|'['
name|'ip'
op|'['
string|"'address'"
op|']'
name|'for'
name|'ip'
name|'in'
name|'net_v4'
op|'['
string|"'dns'"
op|']'
op|']'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'net_v4'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'net_v6'
op|'['
string|"'gateway'"
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'label'
op|'='
name|'network'
op|'['
string|"'label'"
op|']'
op|','
nl|'\n'
name|'mac'
op|'='
name|'vif'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'rxtx_cap'
op|'='
name|'vif'
op|'.'
name|'get_meta'
op|'('
string|"'rxtx_cap'"
op|')'
op|','
nl|'\n'
name|'vif_type'
op|'='
name|'vif'
op|'['
string|"'type'"
op|']'
op|','
nl|'\n'
name|'vif_devname'
op|'='
name|'vif'
op|'.'
name|'get'
op|'('
string|"'devname'"
op|')'
op|','
nl|'\n'
name|'vif_uuid'
op|'='
name|'vif'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'ovs_interfaceid'
op|'='
name|'vif'
op|'.'
name|'get'
op|'('
string|"'ovs_interfaceid'"
op|')'
op|','
nl|'\n'
name|'qbh_params'
op|'='
name|'vif'
op|'.'
name|'get'
op|'('
string|"'qbh_params'"
op|')'
op|','
nl|'\n'
name|'qbg_params'
op|'='
name|'vif'
op|'.'
name|'get'
op|'('
string|"'qbg_params'"
op|')'
op|','
nl|'\n'
name|'should_create_vlan'
op|'='
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'should_create_vlan'"
op|','
name|'False'
op|')'
op|','
nl|'\n'
name|'should_create_bridge'
op|'='
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'should_create_bridge'"
op|','
nl|'\n'
name|'False'
op|')'
op|','
nl|'\n'
name|'ip'
op|'='
name|'net_v4'
op|'['
string|"'ips'"
op|']'
op|'['
name|'i'
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'ip_v6'
op|'='
name|'net_v6'
op|'['
string|"'ips'"
op|']'
op|'['
name|'i'
op|']'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
name|'netmask'
op|'='
name|'str'
op|'('
name|'net_v4'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'netmask'
op|')'
op|','
nl|'\n'
name|'netmask_v6'
op|'='
name|'net_v6'
op|'.'
name|'as_netaddr'
op|'('
op|')'
op|'.'
name|'_prefixlen'
op|','
nl|'\n'
name|'physical_network'
op|'='
nl|'\n'
name|'network'
op|'.'
name|'get_meta'
op|'('
string|"'physical_network'"
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'vif_dict'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'check'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks
dedent|''
dedent|''
name|'def'
name|'test_validate_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_get_by_address'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'192.168.1.100'"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
string|"'192.168.0.100'"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'1'
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'ip'
op|'='
name|'fixed_ips'
op|'['
number|'1'
op|']'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'ip'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ip'
op|')'
newline|'\n'
name|'ip'
op|'='
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'ip'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_reserved
dedent|''
name|'def'
name|'test_validate_reserved'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context_admin'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'nets'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|'('
name|'context_admin'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/24'"
op|','
name|'False'
op|','
number|'1'
op|','
nl|'\n'
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'network'
op|'='
name|'nets'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'db'
op|'.'
name|'network_count_reserved_ips'
op|'('
name|'context_admin'
op|','
nl|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_none_requested_networks
dedent|''
name|'def'
name|'test_validate_networks_none_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_empty_requested_networks
dedent|''
name|'def'
name|'test_validate_networks_empty_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_invalid_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_invalid_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'192.168.1.100.1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
string|"'192.168.0.100.1'"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_empty_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_empty_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
string|"''"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_none_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_none_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
name|'None'
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_instance_using_id_without_vpn
dedent|''
name|'def'
name|'test_add_fixed_ip_instance_using_id_without_vpn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate_pool'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'reserve'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'192.168.0.101'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'fixed_ips'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'HOST'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_instance_using_uuid_without_vpn
dedent|''
name|'def'
name|'test_add_fixed_ip_instance_using_uuid_without_vpn'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate_pool'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'reserve'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'192.168.0.101'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'fixed_ips'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'HOST'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mini_dns_driver
dedent|''
name|'def'
name|'test_mini_dns_driver'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone1'
op|'='
string|'"example.org"'
newline|'\n'
name|'zone2'
op|'='
string|'"example.com"'
newline|'\n'
name|'driver'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_manager'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"hostone"'
op|','
string|'"10.0.0.1"'
op|','
string|'"A"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"hosttwo"'
op|','
string|'"10.0.0.2"'
op|','
string|'"A"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"hostthree"'
op|','
string|'"10.0.0.3"'
op|','
string|'"A"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"hostfour"'
op|','
string|'"10.0.0.4"'
op|','
string|'"A"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"hostfive"'
op|','
string|'"10.0.0.5"'
op|','
string|'"A"'
op|','
name|'zone2'
op|')'
newline|'\n'
nl|'\n'
name|'driver'
op|'.'
name|'delete_entry'
op|'('
string|'"hostone"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'modify_address'
op|'('
string|'"hostfour"'
op|','
string|'"10.0.0.1"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'driver'
op|'.'
name|'modify_address'
op|'('
string|'"hostthree"'
op|','
string|'"10.0.0.1"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'names'
op|'='
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
string|'"10.0.0.1"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'names'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'hostthree'"
op|','
name|'names'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'hostfour'"
op|','
name|'names'
op|')'
newline|'\n'
nl|'\n'
name|'names'
op|'='
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
string|'"10.0.0.5"'
op|','
name|'zone2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'names'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'hostfive'"
op|','
name|'names'
op|')'
newline|'\n'
nl|'\n'
name|'addresses'
op|'='
name|'driver'
op|'.'
name|'get_entries_by_name'
op|'('
string|'"hosttwo"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'addresses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'10.0.0.2'"
op|','
name|'addresses'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidInput'
op|','
nl|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|','
nl|'\n'
string|'"hostname"'
op|','
nl|'\n'
string|'"10.10.10.10"'
op|','
nl|'\n'
string|'"invalidtype"'
op|','
nl|'\n'
name|'zone1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mini_dns_driver_with_mixed_case
dedent|''
name|'def'
name|'test_mini_dns_driver_with_mixed_case'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone1'
op|'='
string|'"example.org"'
newline|'\n'
name|'driver'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_manager'
newline|'\n'
name|'driver'
op|'.'
name|'create_entry'
op|'('
string|'"HostTen"'
op|','
string|'"10.0.0.10"'
op|','
string|'"A"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'addresses'
op|'='
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
string|'"10.0.0.10"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'addresses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'addresses'
op|':'
newline|'\n'
indent|'            '
name|'driver'
op|'.'
name|'delete_entry'
op|'('
name|'n'
op|','
name|'zone1'
op|')'
newline|'\n'
dedent|''
name|'addresses'
op|'='
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
string|'"10.0.0.10"'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'addresses'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_instance_dns
dedent|''
name|'def'
name|'test_instance_dns'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'fixedip'
op|'='
string|"'192.168.0.101'"
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate_pool'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quota'
op|'.'
name|'QUOTAS'
op|','
string|"'reserve'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixedip'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'quota'
op|'.'
name|'QUOTAS'
op|'.'
name|'reserve'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'fixed_ips'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'HOST'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance_manager'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_manager'
newline|'\n'
name|'addresses'
op|'='
name|'instance_manager'
op|'.'
name|'get_entries_by_name'
op|'('
name|'HOST'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'addresses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'addresses'
op|'['
number|'0'
op|']'
op|','
name|'fixedip'
op|')'
newline|'\n'
name|'addresses'
op|'='
name|'instance_manager'
op|'.'
name|'get_entries_by_name'
op|'('
name|'FAKEUUID'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'instance_dns_domain'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'addresses'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'addresses'
op|'['
number|'0'
op|']'
op|','
name|'fixedip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip
dedent|''
name|'def'
name|'test_allocate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
number|'1'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_floating_ip
dedent|''
name|'def'
name|'test_deallocate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
number|'1'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip
dedent|''
name|'def'
name|'test_associate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disassociate_floating_ip
dedent|''
name|'def'
name|'test_disassociate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_networks_by_uuids_ordering
dedent|''
name|'def'
name|'test_get_networks_by_uuids_ordering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'res'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|VlanNetworkTestCase
dedent|''
dedent|''
name|'class'
name|'VlanNetworkTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'VlanNetworkTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'test'
op|'.'
name|'SampleNetworks'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'network_manager'
op|'.'
name|'VlanManager'
op|'('
name|'host'
op|'='
name|'HOST'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context_admin'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_quota_driver_type
dedent|''
name|'def'
name|'test_quota_driver_type'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'quota'
op|'.'
name|'NoopQuotaDriver'
op|','
nl|'\n'
name|'type'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'quotas'
op|'.'
name|'_driver'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vpn_allocate_fixed_ip
dedent|''
name|'def'
name|'test_vpn_allocate_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'reserved'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'192.168.0.1'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'dict'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
string|"'192.168.0.2'"
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'network'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vpn_allocate_fixed_ip_no_network_id
dedent|''
name|'def'
name|'test_vpn_allocate_fixed_ip_no_network_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'network'
op|'='
name|'dict'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
string|"'192.168.0.2'"
newline|'\n'
name|'network'
op|'['
string|"'id'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForNetwork'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_fixed_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context_admin'
op|','
nl|'\n'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'network'
op|','
nl|'\n'
name|'vpn'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_fixed_ip
dedent|''
name|'def'
name|'test_allocate_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate_pool'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'192.168.0.1'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'dict'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'network'
op|'['
string|"'vpn_private_address'"
op|']'
op|'='
string|"'192.168.0.2'"
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_networks_too_big
dedent|''
name|'def'
name|'test_create_networks_too_big'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|','
name|'None'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'4094'
op|','
name|'vlan_start'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_networks_too_many
dedent|''
name|'def'
name|'test_create_networks_too_many'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|','
name|'None'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'100'
op|','
name|'vlan_start'
op|'='
number|'1'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.0.1/24'"
op|','
name|'network_size'
op|'='
number|'100'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_duplicate_vlan_raises
dedent|''
name|'def'
name|'test_duplicate_vlan_raises'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# VLAN 100 is already used and we force the network to be created'
nl|'\n'
comment|'# in that vlan (vlan=100).'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'DuplicateVlan'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context_admin'
op|','
name|'label'
op|'='
string|'"fake"'
op|','
name|'num_networks'
op|'='
number|'1'
op|','
nl|'\n'
name|'vlan'
op|'='
number|'100'
op|','
name|'cidr'
op|'='
string|"'192.168.0.1/24'"
op|','
name|'network_size'
op|'='
number|'100'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vlan_start
dedent|''
name|'def'
name|'test_vlan_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# VLAN 100 and 101 are used, so this network shoud be created in 102'
nl|'\n'
indent|'        '
name|'networks'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context_admin'
op|','
name|'label'
op|'='
string|'"fake"'
op|','
name|'num_networks'
op|'='
number|'1'
op|','
nl|'\n'
name|'vlan_start'
op|'='
number|'100'
op|','
name|'cidr'
op|'='
string|"'192.168.3.1/24'"
op|','
nl|'\n'
name|'network_size'
op|'='
number|'100'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|'"vlan"'
op|']'
op|','
number|'102'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vlan_start_multiple
dedent|''
name|'def'
name|'test_vlan_start_multiple'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# VLAN 100 and 101 are used, so these networks shoud be created in 102'
nl|'\n'
comment|'# and 103'
nl|'\n'
indent|'        '
name|'networks'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context_admin'
op|','
name|'label'
op|'='
string|'"fake"'
op|','
name|'num_networks'
op|'='
number|'2'
op|','
nl|'\n'
name|'vlan_start'
op|'='
number|'100'
op|','
name|'cidr'
op|'='
string|"'192.168.3.1/24'"
op|','
nl|'\n'
name|'network_size'
op|'='
number|'100'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|'"vlan"'
op|']'
op|','
number|'102'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|'"vlan"'
op|']'
op|','
number|'103'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vlan_start_used
dedent|''
name|'def'
name|'test_vlan_start_used'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# VLAN 100 and 101 are used, but vlan_start=99.'
nl|'\n'
indent|'        '
name|'networks'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context_admin'
op|','
name|'label'
op|'='
string|'"fake"'
op|','
name|'num_networks'
op|'='
number|'1'
op|','
nl|'\n'
name|'vlan_start'
op|'='
number|'99'
op|','
name|'cidr'
op|'='
string|"'192.168.3.1/24'"
op|','
nl|'\n'
name|'network_size'
op|'='
number|'100'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|'"vlan"'
op|']'
op|','
number|'102'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get'"
op|')'
newline|'\n'
DECL|member|test_validate_networks
name|'def'
name|'test_validate_networks'
op|'('
name|'self'
op|','
name|'net_get'
op|')'
op|':'
newline|'\n'
DECL|function|network_get
indent|'        '
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|"'allow_none'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'net_get'
op|'.'
name|'side_effect'
op|'='
name|'network_get'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|'"fixed_ip_get_by_address"'
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'192.168.1.100'"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
string|"'192.168.0.100'"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'fixed_ips'
op|'['
number|'1'
op|']'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'fixed_ips'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixed_ips'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|'='
name|'None'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fixed_ips'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_none_requested_networks
dedent|''
name|'def'
name|'test_validate_networks_none_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_empty_requested_networks
dedent|''
name|'def'
name|'test_validate_networks_empty_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_invalid_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_invalid_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'192.168.1.100.1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
nl|'\n'
string|"'192.168.0.100.1'"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_empty_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_empty_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
string|"''"
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
string|"''"
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_none_fixed_ip
dedent|''
name|'def'
name|'test_validate_networks_none_fixed_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_ip_owned_by_project
dedent|''
name|'def'
name|'test_floating_ip_owned_by_project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because floating_ip project_id is None'
nl|'\n'
name|'floating_ip'
op|'='
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_floating_ip_owned_by_project'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because floating_ip project_id is not equal to ctxt project_id'
nl|'\n'
name|'floating_ip'
op|'='
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'+'
string|"'1'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_floating_ip_owned_by_project'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise (floating ip is owned by ctxt project)'
nl|'\n'
name|'floating_ip'
op|'='
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'ctxt'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise (ctxt is admin)'
nl|'\n'
name|'floating_ip'
op|'='
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'None'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'ctxt'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise (ctxt is admin)'
nl|'\n'
name|'floating_ip'
op|'='
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'testproject'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_floating_ip_owned_by_project'
op|'('
name|'ctxt'
op|','
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_floating_ip
dedent|''
name|'def'
name|'test_allocate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_allocate_address
name|'def'
name|'fake_allocate_address'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_allocate_address'"
op|','
nl|'\n'
name|'fake_allocate_address'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'ctxt'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_floating_ip
dedent|''
name|'def'
name|'test_deallocate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake1
name|'def'
name|'fake1'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|fake2
dedent|''
name|'def'
name|'fake2'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
string|"'fixed_ip_id'"
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake3
dedent|''
name|'def'
name|'fake3'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
string|"'fixed_ip_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_deallocate'"
op|','
name|'fake1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_floating_ip_owned_by_project'"
op|','
name|'fake1'
op|')'
newline|'\n'
nl|'\n'
comment|'# this time should raise because floating ip is associated to fixed_ip'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpAssociated'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# this time should not raise'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'ctxt'
op|'.'
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip
dedent|''
name|'def'
name|'test_associate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake1
name|'def'
name|'fake1'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
string|"'network'"
op|':'
string|"'fakenet'"
op|'}'
newline|'\n'
nl|'\n'
comment|"# floating ip that's already associated"
nl|'\n'
DECL|function|fake2
dedent|''
name|'def'
name|'fake2'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'1'
op|'}'
newline|'\n'
nl|'\n'
comment|"# floating ip that isn't associated"
nl|'\n'
DECL|function|fake3
dedent|''
name|'def'
name|'fake3'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
comment|'# fixed ip with remote host'
nl|'\n'
DECL|function|fake4
dedent|''
name|'def'
name|'fake4'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'blah'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake4_network
dedent|''
name|'def'
name|'fake4_network'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'multi_host'"
op|':'
name|'False'
op|','
string|"'host'"
op|':'
string|"'jibberjabber'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# fixed ip with local host'
nl|'\n'
DECL|function|fake5
dedent|''
name|'def'
name|'fake5'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'blahblah'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake5_network
dedent|''
name|'def'
name|'fake5_network'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'multi_host'"
op|':'
name|'False'
op|','
string|"'host'"
op|':'
string|"'testhost'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake6
dedent|''
name|'def'
name|'fake6'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'local'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake7
dedent|''
name|'def'
name|'fake7'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'local'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake8
dedent|''
name|'def'
name|'fake8'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
string|"''"
op|','
nl|'\n'
string|'\'Cannot find device "em0"\\n\''
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake9
dedent|''
name|'def'
name|'fake9'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# raises because interface doesn't exist"
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'floating_ip_fixed_ip_associate'"
op|','
nl|'\n'
name|'fake1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_disassociate'"
op|','
name|'fake1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'driver'
op|','
string|"'ensure_floating_forward'"
op|','
name|'fake8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoFloatingIpInterface'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_associate_floating_ip'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_floating_ip_owned_by_project'"
op|','
name|'fake1'
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because floating_ip is already associated to a fixed_ip'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'disassociate_floating_ip'"
op|','
name|'fake9'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_fixed_ip_get
name|'def'
name|'fake_fixed_ip_get'
op|'('
name|'context'
op|','
name|'fixed_ip_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'old'"
op|','
string|"'instance_uuid'"
op|':'
string|"'fake_uuid'"
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fake_fixed_ip_get'
op|')'
newline|'\n'
nl|'\n'
comment|"# doesn't raise because we exit early if the address is the same"
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'old'"
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because we call disassociate which is mocked'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
string|"'new'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake3'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise and makes call remotely'
nl|'\n'
name|'self'
op|'.'
name|'local'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get_by_address'"
op|','
name|'fake4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'network_get'"
op|','
name|'fake4_network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'fake6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'local'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise and makes call locally'
nl|'\n'
name|'self'
op|'.'
name|'local'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get_by_address'"
op|','
name|'fake5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'network_get'"
op|','
name|'fake5_network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_associate_floating_ip'"
op|','
name|'fake7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'local'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_floating_ip_nat_before_bind
dedent|''
name|'def'
name|'test_add_floating_ip_nat_before_bind'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Tried to verify order with documented mox record/verify'
nl|'\n'
comment|"# functionality, but it doesn't seem to work since I can't make it"
nl|'\n'
comment|"# fail.  I'm using stubs and a flag for now, but if this mox feature"
nl|'\n'
comment|'# can be made to work, it would be a better way to test this.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# self.mox.StubOutWithMock(self.network.driver,'
nl|'\n'
comment|"#                          'ensure_floating_forward')"
nl|'\n'
comment|"# self.mox.StubOutWithMock(self.network.driver, 'bind_floating_ip')"
nl|'\n'
comment|'#'
nl|'\n'
comment|'# self.network.driver.ensure_floating_forward(mox.IgnoreArg(),'
nl|'\n'
comment|'#                                             mox.IgnoreArg(),'
nl|'\n'
comment|'#                                             mox.IgnoreArg(),'
nl|'\n'
comment|'#                                             mox.IgnoreArg())'
nl|'\n'
comment|'# self.network.driver.bind_floating_ip(mox.IgnoreArg(),'
nl|'\n'
comment|'#                                      mox.IgnoreArg())'
nl|'\n'
comment|'# self.mox.ReplayAll()'
nl|'\n'
nl|'\n'
indent|'        '
name|'nat_called'
op|'='
op|'['
name|'False'
op|']'
newline|'\n'
nl|'\n'
DECL|function|fake_nat
name|'def'
name|'fake_nat'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'nat_called'
op|'['
number|'0'
op|']'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake_bind
dedent|''
name|'def'
name|'fake_bind'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'nat_called'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'driver'
op|','
nl|'\n'
string|"'ensure_floating_forward'"
op|','
nl|'\n'
name|'fake_nat'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'driver'
op|','
string|"'bind_floating_ip'"
op|','
name|'fake_bind'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|'.'
name|'add_floating_ip'
op|'('
string|"'fakefloat'"
op|','
nl|'\n'
string|"'fakefixed'"
op|','
nl|'\n'
string|"'fakeiface'"
op|','
nl|'\n'
string|"'fakenet'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_floating_ip_init_host
dedent|''
name|'def'
name|'_test_floating_ip_init_host'
op|'('
name|'self'
op|','
name|'public_interface'
op|','
name|'expected_arg'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|function|get_all_by_host
indent|'        '
name|'def'
name|'get_all_by_host'
op|'('
name|'_context'
op|','
name|'_host'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|'{'
string|"'interface'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'foo'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'interface'"
op|':'
string|"'fakeiface'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'fakefloat'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'interface'"
op|':'
string|"'bar'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'bar'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'2'
op|'}'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_all_by_host'"
op|','
nl|'\n'
name|'get_all_by_host'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fixed_ip_get
name|'def'
name|'fixed_ip_get'
op|'('
name|'_context'
op|','
name|'fixed_ip_id'
op|','
name|'get_network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'fixed_ip_id'
op|'=='
number|'1'
op|':'
newline|'\n'
indent|'                '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'fakefixed'"
op|','
string|"'network'"
op|':'
string|"'fakenet'"
op|'}'
newline|'\n'
dedent|''
name|'raise'
name|'exception'
op|'.'
name|'FixedIpNotFound'
op|'('
name|'id'
op|'='
name|'fixed_ip_id'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fixed_ip_get'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|','
string|"'add_floating_ip'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'public_interface'
op|'='
name|'public_interface'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|'.'
name|'add_floating_ip'
op|'('
string|"'fakefloat'"
op|','
nl|'\n'
string|"'fakefixed'"
op|','
nl|'\n'
name|'expected_arg'
op|','
nl|'\n'
string|"'fakenet'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'init_host_floating_ips'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_ip_init_host_without_public_interface
dedent|''
name|'def'
name|'test_floating_ip_init_host_without_public_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_floating_ip_init_host'
op|'('
name|'public_interface'
op|'='
name|'False'
op|','
nl|'\n'
name|'expected_arg'
op|'='
string|"'fakeiface'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_ip_init_host_with_public_interface
dedent|''
name|'def'
name|'test_floating_ip_init_host_with_public_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_floating_ip_init_host'
op|'('
name|'public_interface'
op|'='
string|"'fooiface'"
op|','
nl|'\n'
name|'expected_arg'
op|'='
string|"'fooiface'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disassociate_floating_ip
dedent|''
name|'def'
name|'test_disassociate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake1
name|'def'
name|'fake1'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
comment|"# floating ip that isn't associated"
nl|'\n'
DECL|function|fake2
dedent|''
name|'def'
name|'fake2'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'None'
op|'}'
newline|'\n'
nl|'\n'
comment|'# floating ip that is associated'
nl|'\n'
DECL|function|fake3
dedent|''
name|'def'
name|'fake3'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
nl|'\n'
comment|'# fixed ip with remote host'
nl|'\n'
DECL|function|fake4
dedent|''
name|'def'
name|'fake4'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'blah'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake4_network
dedent|''
name|'def'
name|'fake4_network'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'host'"
op|':'
string|"'jibberjabber'"
op|'}'
newline|'\n'
nl|'\n'
comment|'# fixed ip with local host'
nl|'\n'
DECL|function|fake5
dedent|''
name|'def'
name|'fake5'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'blahblah'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake5_network
dedent|''
name|'def'
name|'fake5_network'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'multi_host'"
op|':'
name|'False'
op|','
string|"'host'"
op|':'
string|"'testhost'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake6
dedent|''
name|'def'
name|'fake6'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'local'
op|'='
name|'False'
newline|'\n'
nl|'\n'
DECL|function|fake7
dedent|''
name|'def'
name|'fake7'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'local'
op|'='
name|'True'
newline|'\n'
nl|'\n'
DECL|function|fake8
dedent|''
name|'def'
name|'fake8'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
string|"'10.0.0.1'"
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|','
nl|'\n'
string|"'interface'"
op|':'
string|"'eth0'"
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'auto_assigned'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'ctxt'
op|'.'
name|'project_id'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_floating_ip_owned_by_project'"
op|','
name|'fake1'
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because floating_ip is not associated to a fixed_ip'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpNotAssociated'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake3'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise and makes call remotely'
nl|'\n'
name|'self'
op|'.'
name|'local'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fake4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'network_get'"
op|','
name|'fake4_network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'rpc'
op|','
string|"'call'"
op|','
name|'fake6'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'self'
op|'.'
name|'local'
op|')'
newline|'\n'
nl|'\n'
comment|'# does not raise and makes call locally'
nl|'\n'
name|'self'
op|'.'
name|'local'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fake5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'network_get'"
op|','
name|'fake5_network'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_disassociate_floating_ip'"
op|','
name|'fake7'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'ctxt'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'local'
op|')'
newline|'\n'
nl|'\n'
comment|'# raises because auto_assigned floating IP cannot be disassociated'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
name|'fake8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CannotDisassociateAutoAssignedFloatingIP'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|','
nl|'\n'
name|'ctxt'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_add_fixed_ip_instance_without_vpn_requested_networks
dedent|''
name|'def'
name|'test_add_fixed_ip_instance_without_vpn_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'a'
op|','
op|'**'
name|'kw'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_associate_pool'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance_and_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'fixed_ip_update'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance_and_network'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'vifs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'192.168.0.101'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'project_only'
op|'='
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_uuid'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'use_slave'
op|'='
name|'False'
op|','
nl|'\n'
name|'columns_to_join'
op|'='
op|'['
string|"'info_cache'"
op|','
nl|'\n'
string|"'security_groups'"
op|']'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_inst'
op|'('
name|'display_name'
op|'='
name|'HOST'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_fixed_ip_to_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
name|'HOST'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ip_association_and_allocation_of_other_project
dedent|''
name|'def'
name|'test_ip_association_and_allocation_of_other_project'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Makes sure that we cannot deallocaate or disassociate\n        a public ip of other project.\n        """'
newline|'\n'
nl|'\n'
DECL|function|network_get
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'network_get'"
op|','
name|'network_get'
op|')'
newline|'\n'
nl|'\n'
name|'context1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project1'"
op|')'
newline|'\n'
name|'context2'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project2'"
op|')'
newline|'\n'
nl|'\n'
name|'float_ip'
op|'='
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'1.2.3.4'"
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'context1'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'float_addr'
op|'='
name|'float_ip'
op|'['
string|"'address'"
op|']'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context1'
op|','
nl|'\n'
op|'{'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
number|'1'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Associate the IP with non-admin user context'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|','
nl|'\n'
name|'context2'
op|','
nl|'\n'
name|'float_addr'
op|','
nl|'\n'
name|'fix_addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# Deallocate address from other project'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|','
nl|'\n'
name|'context2'
op|','
nl|'\n'
name|'float_addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now Associates the address to the actual project'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'context1'
op|','
name|'float_addr'
op|','
name|'fix_addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now try dis-associating from other project'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|','
nl|'\n'
name|'context2'
op|','
nl|'\n'
name|'float_addr'
op|')'
newline|'\n'
nl|'\n'
comment|'# Clean up the ip addresses'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'context1'
op|','
name|'float_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|'('
name|'context1'
op|','
name|'float_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context1'
op|','
name|'fix_addr'
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_destroy'
op|'('
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'float_addr'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_disassociate'
op|'('
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'fix_addr'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_fixed
dedent|''
name|'def'
name|'test_deallocate_fixed'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that release is called properly.\n\n        Ensures https://bugs.launchpad.net/nova/+bug/973442 doesn\'t return\n        """'
newline|'\n'
nl|'\n'
DECL|function|network_get
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'network_get'"
op|','
name|'network_get'
op|')'
newline|'\n'
nl|'\n'
DECL|function|vif_get
name|'def'
name|'vif_get'
op|'('
name|'_context'
op|','
name|'_vif_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'vifs'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'virtual_interface_get'"
op|','
name|'vif_get'
op|')'
newline|'\n'
name|'context1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project1'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context1'
op|','
nl|'\n'
op|'{'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'elevated'
op|','
number|'1'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|','
name|'values'
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|')'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_get'
op|'('
name|'elevated'
op|','
name|'fixed'
op|'['
string|"'network_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'force_dhcp_release'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'linux_net'
op|','
string|"'release_dhcp'"
op|')'
newline|'\n'
name|'linux_net'
op|'.'
name|'release_dhcp'
op|'('
name|'network'
op|'['
string|"'bridge'"
op|']'
op|','
name|'fixed'
op|'['
string|"'address'"
op|']'
op|','
nl|'\n'
string|"'DE:AD:BE:EF:00:00'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context1'
op|','
name|'fix_addr'
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'fixed'
op|'['
string|"'allocated'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_fixed_deleted
dedent|''
name|'def'
name|'test_deallocate_fixed_deleted'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Verify doesn't deallocate deleted fixed_ip from deleted network."
nl|'\n'
nl|'\n'
DECL|function|network_get
indent|'        '
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|function|teardown_network_on_host
dedent|''
name|'def'
name|'teardown_network_on_host'
op|'('
name|'_context'
op|','
name|'network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'network'
op|'['
string|"'id'"
op|']'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'network_get'"
op|','
name|'network_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_teardown_network_on_host'"
op|','
nl|'\n'
name|'teardown_network_on_host'
op|')'
newline|'\n'
nl|'\n'
name|'context1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project1'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context1'
op|','
nl|'\n'
op|'{'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'elevated'
op|','
number|'1'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|','
op|'{'
string|"'deleted'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'elevated'
op|'.'
name|'read_deleted'
op|'='
string|"'yes'"
newline|'\n'
name|'delfixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'address'"
op|':'
name|'fix_addr'
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'delfixed'
op|'['
string|"'instance_uuid'"
op|']'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'elevated'
op|','
name|'values'
op|')'
newline|'\n'
name|'elevated'
op|'.'
name|'read_deleted'
op|'='
string|"'no'"
newline|'\n'
name|'elevated'
op|'.'
name|'read_deleted'
op|'='
string|"'yes'"
newline|'\n'
nl|'\n'
name|'deallocate'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_fixed_ip'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
name|'deallocate'
op|','
name|'context1'
op|','
nl|'\n'
name|'fix_addr'
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_fixed_no_vif
dedent|''
name|'def'
name|'test_deallocate_fixed_no_vif'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Verify that deallocate doesn\'t raise when no vif is returned.\n\n        Ensures https://bugs.launchpad.net/nova/+bug/968457 doesn\'t return\n        """'
newline|'\n'
nl|'\n'
DECL|function|network_get
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'network_get'"
op|','
name|'network_get'
op|')'
newline|'\n'
nl|'\n'
DECL|function|vif_get
name|'def'
name|'vif_get'
op|'('
name|'_context'
op|','
name|'_vif_id'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'virtual_interface_get'"
op|','
name|'vif_get'
op|')'
newline|'\n'
name|'context1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project1'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context1'
op|','
nl|'\n'
op|'{'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'elevated'
op|','
number|'1'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'force_dhcp_release'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_fixed_ip'
op|'('
name|'context1'
op|','
name|'fix_addr'
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_fixed_ip_cleanup_fail
dedent|''
name|'def'
name|'test_fixed_ip_cleanup_fail'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Verify IP is not deallocated if the security group refresh fails.'
nl|'\n'
DECL|function|network_get
indent|'        '
name|'def'
name|'network_get'
op|'('
name|'_context'
op|','
name|'network_id'
op|','
name|'project_only'
op|'='
string|'"allow_none"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
name|'network_id'
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'network_get'"
op|','
name|'network_get'
op|')'
newline|'\n'
nl|'\n'
name|'context1'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project1'"
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'context1'
op|','
nl|'\n'
op|'{'
string|"'project_id'"
op|':'
string|"'project1'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'elevated'
op|'='
name|'context1'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'fix_addr'
op|'='
name|'db'
op|'.'
name|'fixed_ip_associate_pool'
op|'('
name|'elevated'
op|','
number|'1'
op|','
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'values'
op|'='
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'virtual_interface_id'"
op|':'
number|'3'
op|'}'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|','
name|'values'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_refresh
name|'def'
name|'fake_refresh'
op|'('
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'test'
op|'.'
name|'TestingException'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_do_trigger_security_group_members_refresh_for_instance'"
op|','
nl|'\n'
name|'fake_refresh'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'test'
op|'.'
name|'TestingException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_fixed_ip'
op|','
nl|'\n'
name|'context1'
op|','
name|'fix_addr'
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_get_by_address'
op|'('
name|'elevated'
op|','
name|'fix_addr'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'fixed'
op|'['
string|"'allocated'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_networks_by_uuids_ordering
dedent|''
name|'def'
name|'test_get_networks_by_uuids_ordering'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_uuids'"
op|')'
newline|'\n'
nl|'\n'
name|'requested_networks'
op|'='
op|'['
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|','
nl|'\n'
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_uuids'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'res'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'_get_networks_by_uuids'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'id'"
op|']'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|_TestDomainObject
dedent|''
dedent|''
name|'class'
name|'_TestDomainObject'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kwargs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__setattr__'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeNetwork
dedent|''
dedent|''
dedent|''
name|'class'
name|'FakeNetwork'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'vlan'
op|'='
name|'None'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'kwargs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__setattr__'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__getitem__
dedent|''
dedent|''
name|'def'
name|'__getitem__'
op|'('
name|'self'
op|','
name|'item'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'getattr'
op|'('
name|'self'
op|','
name|'item'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommonNetworkTestCase
dedent|''
dedent|''
name|'class'
name|'CommonNetworkTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'CommonNetworkTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'ipv6_backend'
op|'='
string|"'rfc2462'"
op|')'
newline|'\n'
name|'ipv6'
op|'.'
name|'reset_backend'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_instance_zone_for_dns_domain
dedent|''
name|'def'
name|'test_validate_instance_zone_for_dns_domain'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domain'
op|'='
string|"'example.com'"
newline|'\n'
name|'az'
op|'='
string|"'test_az'"
newline|'\n'
name|'domains'
op|'='
op|'{'
nl|'\n'
name|'domain'
op|':'
name|'_TestDomainObject'
op|'('
nl|'\n'
name|'domain'
op|'='
name|'domain'
op|','
nl|'\n'
name|'availability_zone'
op|'='
name|'az'
op|')'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|dnsdomain_get
name|'def'
name|'dnsdomain_get'
op|'('
name|'context'
op|','
name|'instance_domain'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'domains'
op|'.'
name|'get'
op|'('
name|'instance_domain'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'db'
op|','
string|"'dnsdomain_get'"
op|','
name|'dnsdomain_get'
op|')'
newline|'\n'
name|'fake_instance'
op|'='
op|'{'
string|"'uuid'"
op|':'
name|'FAKEUUID'
op|','
nl|'\n'
string|"'availability_zone'"
op|':'
name|'az'
op|'}'
newline|'\n'
nl|'\n'
name|'manager'
op|'='
name|'network_manager'
op|'.'
name|'NetworkManager'
op|'('
op|')'
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'_validate_instance_zone_for_dns_domain'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'fake_instance'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
DECL|member|fake_create_fixed_ips
dedent|''
name|'def'
name|'fake_create_fixed_ips'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'network_id'
op|','
name|'fixed_cidr'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_client_exceptions
dedent|''
name|'def'
name|'test_get_instance_nw_info_client_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'network_manager'
op|'.'
name|'NetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'manager'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'virtual_interface_get_by_instance'"
op|')'
newline|'\n'
name|'manager'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_by_instance'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
nl|'\n'
name|'use_slave'
op|'='
name|'False'
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'exception'
op|'.'
name|'InstanceNotFound'
op|'('
nl|'\n'
name|'instance_id'
op|'='
name|'FAKEUUID'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'ClientException'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'get_instance_nw_info'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'FAKEUUID'
op|','
string|"'fake_rxtx_factor'"
op|','
name|'HOST'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.instance_get'"
op|')'
newline|'\n'
DECL|member|test_deallocate_for_instance_passes_host_info
name|'def'
name|'test_deallocate_for_instance_passes_host_info'
op|'('
name|'self'
op|','
name|'instance_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'db'
op|'='
name|'manager'
op|'.'
name|'db'
newline|'\n'
name|'instance_get'
op|'.'
name|'return_value'
op|'='
name|'fake_inst'
op|'('
name|'uuid'
op|'='
string|"'ignoreduuid'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'virtual_interface_delete_by_instance'
op|'='
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'None'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'igonre'"
op|','
string|"'igonre'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_by_instance'
op|'='
name|'lambda'
name|'x'
op|','
name|'y'
op|':'
op|'['
name|'dict'
op|'('
name|'address'
op|'='
string|"'1.2.3.4'"
op|','
nl|'\n'
name|'network_id'
op|'='
string|"'ignoredid'"
op|')'
op|']'
newline|'\n'
nl|'\n'
name|'manager'
op|'.'
name|'deallocate_for_instance'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'instance_id'
op|'='
string|"'ignore'"
op|','
name|'host'
op|'='
string|"'somehost'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
nl|'\n'
op|'('
name|'ctx'
op|','
string|"'1.2.3.4'"
op|','
string|"'somehost'"
op|')'
nl|'\n'
op|']'
op|','
name|'manager'
op|'.'
name|'deallocate_fixed_ip_calls'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_from_instance
dedent|''
name|'def'
name|'test_remove_fixed_ip_from_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'manager'
op|'.'
name|'remove_fixed_ip_from_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
number|'99'
op|','
nl|'\n'
name|'HOST'
op|','
nl|'\n'
string|"'10.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'manager'
op|'.'
name|'deallocate_called'
op|','
string|"'10.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_fixed_ip_from_instance_bad_input
dedent|''
name|'def'
name|'test_remove_fixed_ip_from_instance_bad_input'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FixedIpNotFoundForSpecificInstance'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'remove_fixed_ip_from_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
number|'99'
op|','
name|'HOST'
op|','
string|"'bad input'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_cidrs
dedent|''
name|'def'
name|'test_validate_cidrs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
name|'False'
op|','
number|'1'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'192.168.0.0/24'"
op|','
name|'cidrs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_cidrs_split_exact_in_half
dedent|''
name|'def'
name|'test_validate_cidrs_split_exact_in_half'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/24'"
op|','
nl|'\n'
name|'False'
op|','
number|'2'
op|','
number|'128'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'2'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'192.168.0.0/25'"
op|','
name|'cidrs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'192.168.0.128/25'"
op|','
name|'cidrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_split_cidr_in_use_middle_of_range
name|'def'
name|'test_validate_cidrs_split_cidr_in_use_middle_of_range'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cidr'
op|'='
string|"'192.168.2.0/24'"
op|')'
op|']'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/16'"
op|','
nl|'\n'
name|'False'
op|','
number|'4'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'exp_cidrs'
op|'='
op|'['
string|"'192.168.0.0/24'"
op|','
string|"'192.168.1.0/24'"
op|','
string|"'192.168.3.0/24'"
op|','
nl|'\n'
string|"'192.168.4.0/24'"
op|']'
newline|'\n'
name|'for'
name|'exp_cidr'
name|'in'
name|'exp_cidrs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_cidr'
op|','
name|'cidrs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'192.168.2.0/24'"
op|','
name|'cidrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_smaller_subnet_in_use
name|'def'
name|'test_validate_cidrs_smaller_subnet_in_use'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cidr'
op|'='
string|"'192.168.2.9/25'"
op|')'
op|']'
newline|'\n'
comment|'# CidrConflict: requested cidr (192.168.2.0/24) conflicts with'
nl|'\n'
comment|'#               existing smaller cidr'
nl|'\n'
name|'args'
op|'='
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
string|"'192.168.2.0/24'"
op|','
name|'False'
op|','
nl|'\n'
number|'1'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CidrConflict'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_split_smaller_cidr_in_use
name|'def'
name|'test_validate_cidrs_split_smaller_cidr_in_use'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cidr'
op|'='
string|"'192.168.2.0/25'"
op|')'
op|']'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/16'"
op|','
nl|'\n'
name|'False'
op|','
number|'4'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'4'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'exp_cidrs'
op|'='
op|'['
string|"'192.168.0.0/24'"
op|','
string|"'192.168.1.0/24'"
op|','
string|"'192.168.3.0/24'"
op|','
nl|'\n'
string|"'192.168.4.0/24'"
op|']'
newline|'\n'
name|'for'
name|'exp_cidr'
name|'in'
name|'exp_cidrs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_cidr'
op|','
name|'cidrs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'192.168.2.0/24'"
op|','
name|'cidrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_split_smaller_cidr_in_use2
name|'def'
name|'test_validate_cidrs_split_smaller_cidr_in_use2'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'manager'
op|'.'
name|'db'
op|','
string|"'network_get_all'"
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
name|'id'
op|'='
number|'1'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.2.9/29'"
op|')'
op|']'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.2.0/24'"
op|','
nl|'\n'
name|'False'
op|','
number|'3'
op|','
number|'32'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'3'
op|','
name|'len'
op|'('
name|'nets'
op|')'
op|')'
newline|'\n'
name|'cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'exp_cidrs'
op|'='
op|'['
string|"'192.168.2.32/27'"
op|','
string|"'192.168.2.64/27'"
op|','
string|"'192.168.2.96/27'"
op|']'
newline|'\n'
name|'for'
name|'exp_cidr'
name|'in'
name|'exp_cidrs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'exp_cidr'
op|','
name|'cidrs'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertNotIn'
op|'('
string|"'192.168.2.0/27'"
op|','
name|'cidrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_split_all_in_use
name|'def'
name|'test_validate_cidrs_split_all_in_use'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'in_use'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'values'
op|')'
name|'for'
name|'values'
name|'in'
nl|'\n'
op|'['
op|'{'
string|"'id'"
op|':'
number|'1'
op|','
string|"'cidr'"
op|':'
string|"'192.168.2.9/29'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
string|"'cidr'"
op|':'
string|"'192.168.2.64/26'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'id'"
op|':'
number|'3'
op|','
string|"'cidr'"
op|':'
string|"'192.168.2.128/26'"
op|'}'
op|']'
op|']'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
name|'in_use'
newline|'\n'
name|'args'
op|'='
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
string|"'192.168.2.0/24'"
op|','
name|'False'
op|','
nl|'\n'
number|'3'
op|','
number|'64'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# CidrConflict: Not enough subnets avail to satisfy requested num_'
nl|'\n'
comment|'#               networks - some subnets in requested range already'
nl|'\n'
comment|'#               in use'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CidrConflict'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_cidrs_one_in_use
dedent|''
name|'def'
name|'test_validate_cidrs_one_in_use'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
op|'('
name|'None'
op|','
string|"'fake'"
op|','
string|"'192.168.0.0/24'"
op|','
name|'False'
op|','
number|'2'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# ValueError: network_size * num_networks exceeds cidr size'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_already_used
name|'def'
name|'test_validate_cidrs_already_used'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'cidr'
op|'='
string|"'192.168.0.0/24'"
op|')'
op|']'
newline|'\n'
comment|'# CidrConflict: cidr already in use'
nl|'\n'
name|'args'
op|'='
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
string|"'192.168.0.0/24'"
op|','
name|'False'
op|','
nl|'\n'
number|'1'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CidrConflict'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_cidrs_too_many
dedent|''
name|'def'
name|'test_validate_cidrs_too_many'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'args'
op|'='
op|'('
name|'None'
op|','
string|"'fake'"
op|','
string|"'192.168.0.0/24'"
op|','
name|'False'
op|','
number|'200'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# ValueError: Not enough subnets avail to satisfy requested'
nl|'\n'
comment|'#             num_networks'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_cidrs_split_partial
dedent|''
name|'def'
name|'test_validate_cidrs_split_partial'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'nets'
op|'='
name|'manager'
op|'.'
name|'create_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
nl|'\n'
string|"'192.168.0.0/16'"
op|','
nl|'\n'
name|'False'
op|','
number|'2'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
nl|'\n'
name|'None'
op|')'
newline|'\n'
name|'returned_cidrs'
op|'='
op|'['
name|'str'
op|'('
name|'net'
op|'['
string|"'cidr'"
op|']'
op|')'
name|'for'
name|'net'
name|'in'
name|'nets'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'192.168.0.0/24'"
op|','
name|'returned_cidrs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'192.168.1.0/24'"
op|','
name|'returned_cidrs'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_validate_cidrs_conflict_existing_supernet
name|'def'
name|'test_validate_cidrs_conflict_existing_supernet'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cidr'
op|'='
string|"'192.168.0.0/8'"
op|')'
op|']'
newline|'\n'
name|'args'
op|'='
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'fake'"
op|','
string|"'192.168.0.0/24'"
op|','
name|'False'
op|','
nl|'\n'
number|'1'
op|','
number|'256'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
comment|'# CidrConflict: requested cidr (192.168.0.0/24) conflicts'
nl|'\n'
comment|'#               with existing supernet'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CidrConflict'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_networks
dedent|''
name|'def'
name|'test_create_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cidr'
op|'='
string|"'192.168.0.0/24'"
newline|'\n'
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'manager'
op|','
string|"'_create_fixed_ips'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_create_fixed_ips'
op|')'
newline|'\n'
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'foo'"
op|','
name|'cidr'
op|','
name|'None'
op|','
number|'1'
op|','
number|'256'
op|','
nl|'\n'
string|"'fd00::/48'"
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'manager'
op|'.'
name|'create_networks'
op|'('
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_create_networks_cidr_already_used
name|'def'
name|'test_create_networks_cidr_already_used'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
name|'id'
op|'='
number|'1'
op|','
name|'cidr'
op|'='
string|"'192.168.0.0/24'"
op|')'
op|']'
newline|'\n'
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'foo'"
op|','
string|"'192.168.0.0/24'"
op|','
name|'None'
op|','
number|'1'
op|','
number|'256'
op|','
nl|'\n'
string|"'fd00::/48'"
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'CidrConflict'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'create_networks'
op|','
op|'*'
name|'args'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_networks_many
dedent|''
name|'def'
name|'test_create_networks_many'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cidr'
op|'='
string|"'192.168.0.0/16'"
newline|'\n'
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'manager'
op|','
string|"'_create_fixed_ips'"
op|','
nl|'\n'
name|'self'
op|'.'
name|'fake_create_fixed_ips'
op|')'
newline|'\n'
name|'args'
op|'='
op|'['
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
string|"'foo'"
op|','
name|'cidr'
op|','
name|'None'
op|','
number|'10'
op|','
number|'256'
op|','
nl|'\n'
string|"'fd00::/48'"
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|','
name|'None'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'manager'
op|'.'
name|'create_networks'
op|'('
op|'*'
name|'args'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get'"
op|')'
newline|'\n'
DECL|member|test_get_instance_uuids_by_ip_regex
name|'def'
name|'test_get_instance_uuids_by_ip_regex'
op|'('
name|'self'
op|','
name|'network_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'_vifs'
op|'='
name|'manager'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_all'
op|'('
name|'None'
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'network_get'
op|'.'
name|'return_value'
op|'='
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'manager'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'None'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Greedy get eveything'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
name|'len'
op|'('
name|'_vifs'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Doesn't exist"
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'10.0.0.1'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 1'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'172.16.0.2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 2'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'173.16.0.2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'2'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 0 and 1'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'172.16.0.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 1 and 2'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip'"
op|':'
string|"'17..16.0.2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'2'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get'"
op|')'
newline|'\n'
DECL|member|test_get_instance_uuids_by_ipv6_regex
name|'def'
name|'test_get_instance_uuids_by_ipv6_regex'
op|'('
name|'self'
op|','
name|'network_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'_vifs'
op|'='
name|'manager'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_all'
op|'('
name|'None'
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_network_get
name|'def'
name|'_network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|','
op|'**'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'manager'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'context'
op|','
name|'network_id'
op|')'
op|')'
newline|'\n'
dedent|''
name|'network_get'
op|'.'
name|'side_effect'
op|'='
name|'_network_get'
newline|'\n'
nl|'\n'
comment|'# Greedy get eveything'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
string|"'.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
name|'len'
op|'('
name|'_vifs'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|"# Doesn't exist"
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
string|"'.*1034.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 1'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
string|"'2001:.*2'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 2'
nl|'\n'
name|'ip6'
op|'='
string|"'2001:db8:69:1f:dead:beff:feff:ef03'"
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
name|'ip6'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'2'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 0 and 1'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
string|"'.*ef0[1,2]'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 1 and 2'
nl|'\n'
name|'ip6'
op|'='
string|"'2001:db8:69:1.:dead:beff:feff:ef0.'"
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'ip6'"
op|':'
name|'ip6'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'2'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get'"
op|')'
newline|'\n'
DECL|member|test_get_instance_uuids_by_ip
name|'def'
name|'test_get_instance_uuids_by_ip'
op|'('
name|'self'
op|','
name|'network_get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
name|'self'
op|'.'
name|'stubs'
op|')'
newline|'\n'
name|'_vifs'
op|'='
name|'manager'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_get_all'
op|'('
name|'None'
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'network_get'
op|'.'
name|'return_value'
op|'='
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'manager'
op|'.'
name|'db'
op|'.'
name|'network_get'
op|'('
name|'None'
op|','
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# No regex for you!'
nl|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'fixed_ip'"
op|':'
string|"'.*'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
comment|"# Doesn't exist"
nl|'\n'
name|'ip'
op|'='
string|"'10.0.0.1'"
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'fixed_ip'"
op|':'
name|'ip'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'res'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 1'
nl|'\n'
name|'ip'
op|'='
string|"'172.16.0.2'"
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'fixed_ip'"
op|':'
name|'ip'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get instance 2'
nl|'\n'
name|'ip'
op|'='
string|"'173.16.0.2'"
newline|'\n'
name|'res'
op|'='
name|'manager'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
op|'{'
string|"'fixed_ip'"
op|':'
name|'ip'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'res'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'res'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'res'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|','
name|'_vifs'
op|'['
number|'2'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_network
name|'def'
name|'test_get_network'
op|'('
name|'self'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'uuid'
op|'='
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
newline|'\n'
name|'network'
op|'='
name|'manager'
op|'.'
name|'get_network'
op|'('
name|'fake_context'
op|','
name|'uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_get_network_not_found
name|'def'
name|'test_get_network_not_found'
op|'('
name|'self'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'get'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NetworkNotFoundForUUID'
op|'('
name|'uuid'
op|'='
string|"'foo'"
op|')'
newline|'\n'
name|'uuid'
op|'='
string|"'eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkNotFound'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'get_network'
op|','
name|'fake_context'
op|','
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_all'"
op|')'
newline|'\n'
DECL|member|test_get_all_networks
name|'def'
name|'test_get_all_networks'
op|'('
name|'self'
op|','
name|'get_all'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'get_all'
op|'.'
name|'return_value'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'net'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'output'
op|'='
name|'manager'
op|'.'
name|'get_all_networks'
op|'('
name|'fake_context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'networks'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|'['
number|'1'
op|']'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_disassociate_network
name|'def'
name|'test_disassociate_network'
op|'('
name|'self'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'get'
op|'.'
name|'return_value'
op|'='
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
nl|'\n'
op|'**'
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'uuid'
op|'='
string|"'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa'"
newline|'\n'
name|'manager'
op|'.'
name|'disassociate_network'
op|'('
name|'fake_context'
op|','
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.db.network_get_by_uuid'"
op|')'
newline|'\n'
DECL|member|test_disassociate_network_not_found
name|'def'
name|'test_disassociate_network_not_found'
op|'('
name|'self'
op|','
name|'get'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'manager'
op|'='
name|'fake_network'
op|'.'
name|'FakeNetworkManager'
op|'('
op|')'
newline|'\n'
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'get'
op|'.'
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NetworkNotFoundForUUID'
op|'('
name|'uuid'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'uuid'
op|'='
string|"'eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkNotFound'
op|','
nl|'\n'
name|'manager'
op|'.'
name|'disassociate_network'
op|','
name|'fake_context'
op|','
name|'uuid'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_init_host_dynamic_fixed_range
dedent|''
name|'def'
name|'_test_init_host_dynamic_fixed_range'
op|'('
name|'self'
op|','
name|'net_manager'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'fake_network'
op|'='
name|'True'
op|','
nl|'\n'
name|'routing_source_ip'
op|'='
string|"'172.16.0.1'"
op|','
nl|'\n'
name|'metadata_host'
op|'='
string|"'172.16.0.1'"
op|','
nl|'\n'
name|'public_interface'
op|'='
string|"'eth1'"
op|','
nl|'\n'
name|'dmz_cidr'
op|'='
op|'['
string|"'10.0.3.0/24'"
op|']'
op|')'
newline|'\n'
name|'binary_name'
op|'='
name|'linux_net'
op|'.'
name|'get_binary_name'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Stub out calls we don't want to really run, mock the db"
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'linux_net'
op|'.'
name|'iptables_manager'
op|','
string|"'_apply'"
op|','
name|'lambda'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
string|"'init_host_floating_ips'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'args'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'net_manager'
op|'.'
name|'l3driver'
op|','
string|"'initialize_gateway'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'args'
op|':'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_all_by_host'"
op|')'
newline|'\n'
name|'fake_networks'
op|'='
op|'['
name|'dict'
op|'('
name|'test_network'
op|'.'
name|'fake_network'
op|','
op|'**'
name|'n'
op|')'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'networks'
op|']'
newline|'\n'
name|'db'
op|'.'
name|'network_get_all_by_host'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
nl|'\n'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'fake_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'net_manager'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the iptables rules that got created'
nl|'\n'
name|'current_lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'new_lines'
op|'='
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'_modify_rules'
op|'('
name|'current_lines'
op|','
nl|'\n'
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|','
nl|'\n'
name|'table_name'
op|'='
string|"'nat'"
op|')'
newline|'\n'
nl|'\n'
name|'expected_lines'
op|'='
op|'['
string|"'[0:0] -A %s-snat -s %s -d 0.0.0.0/0 '"
nl|'\n'
string|"'-j SNAT --to-source %s -o %s'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'routing_source_ip'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'public_interface'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s/32 -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'metadata_host'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dmz_cidr'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -m conntrack ! '"
nl|'\n'
string|"'--ctstate DNAT -j ACCEPT'"
op|'%'
op|'('
name|'binary_name'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'networks'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-snat -s %s -d 0.0.0.0/0 '"
nl|'\n'
string|"'-j SNAT --to-source %s -o %s'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'routing_source_ip'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'public_interface'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s/32 -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'metadata_host'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dmz_cidr'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -m conntrack ! '"
nl|'\n'
string|"'--ctstate DNAT -j ACCEPT'"
op|'%'
op|'('
name|'binary_name'
op|','
nl|'\n'
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'networks'
op|'['
number|'1'
op|']'
op|'['
string|"'cidr'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Compare the expected rules against the actual ones'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'expected_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'line'
op|','
name|'new_lines'
op|')'
newline|'\n'
nl|'\n'
comment|'# Add an additional network and ensure the rules get configured'
nl|'\n'
dedent|''
name|'new_network'
op|'='
op|'{'
string|"'id'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'cccccccc-cccc-cccc-cccc-cccccccc'"
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'test2'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'192.168.2.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'2001:dba::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'2001:dba::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
string|"'fa1'"
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
string|"'fake_fa1'"
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'192.168.2.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'192.168.2.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'192.168.2.1'"
op|','
nl|'\n'
string|"'dns2'"
op|':'
string|"'192.168.2.2'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project'"
op|','
nl|'\n'
string|"'vpn_public_address'"
op|':'
string|"'192.168.2.2'"
op|','
nl|'\n'
string|"'vpn_public_port'"
op|':'
string|"'22'"
op|','
nl|'\n'
string|"'vpn_private_address'"
op|':'
string|"'10.0.0.2'"
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
name|'net_manager'
op|'.'
name|'_setup_network_on_host'
op|'('
name|'ctxt'
op|','
name|'new_network'
op|')'
newline|'\n'
nl|'\n'
comment|'# Get the new iptables rules that got created from adding a new network'
nl|'\n'
name|'current_lines'
op|'='
op|'['
op|']'
newline|'\n'
name|'new_lines'
op|'='
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'_modify_rules'
op|'('
name|'current_lines'
op|','
nl|'\n'
name|'linux_net'
op|'.'
name|'iptables_manager'
op|'.'
name|'ipv4'
op|'['
string|"'nat'"
op|']'
op|','
nl|'\n'
name|'table_name'
op|'='
string|"'nat'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Add the new expected rules to the old ones'
nl|'\n'
name|'expected_lines'
op|'+='
op|'['
string|"'[0:0] -A %s-snat -s %s -d 0.0.0.0/0 '"
nl|'\n'
string|"'-j SNAT --to-source %s -o %s'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'new_network'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'routing_source_ip'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'public_interface'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s/32 -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'new_network'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'metadata_host'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -j ACCEPT'"
nl|'\n'
op|'%'
op|'('
name|'binary_name'
op|','
name|'new_network'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'CONF'
op|'.'
name|'dmz_cidr'
op|'['
number|'0'
op|']'
op|')'
op|','
nl|'\n'
string|"'[0:0] -A %s-POSTROUTING -s %s -d %s -m conntrack '"
nl|'\n'
string|"'! --ctstate DNAT -j ACCEPT'"
op|'%'
op|'('
name|'binary_name'
op|','
nl|'\n'
name|'new_network'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'new_network'
op|'['
string|"'cidr'"
op|']'
op|')'
op|']'
newline|'\n'
nl|'\n'
comment|'# Compare the expected rules (with new network) against the actual ones'
nl|'\n'
name|'for'
name|'line'
name|'in'
name|'expected_lines'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'line'
op|','
name|'new_lines'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_flatdhcpmanager_dynamic_fixed_range
dedent|''
dedent|''
name|'def'
name|'test_flatdhcpmanager_dynamic_fixed_range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test FlatDHCPManager NAT rules for fixed_range."""'
newline|'\n'
comment|'# Set the network manager'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'network_manager'
op|'.'
name|'FlatDHCPManager'
op|'('
name|'host'
op|'='
name|'HOST'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
nl|'\n'
comment|'# Test new behavior:'
nl|'\n'
comment|'#     CONF.fixed_range is not set, defaults to None'
nl|'\n'
comment|'#     Determine networks to NAT based on lookup'
nl|'\n'
name|'self'
op|'.'
name|'_test_init_host_dynamic_fixed_range'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_vlanmanager_dynamic_fixed_range
dedent|''
name|'def'
name|'test_vlanmanager_dynamic_fixed_range'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test VlanManager NAT rules for fixed_range."""'
newline|'\n'
comment|'# Set the network manager'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'network_manager'
op|'.'
name|'VlanManager'
op|'('
name|'host'
op|'='
name|'HOST'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
nl|'\n'
comment|'# Test new behavior:'
nl|'\n'
comment|'#     CONF.fixed_range is not set, defaults to None'
nl|'\n'
comment|'#     Determine networks to NAT based on lookup'
nl|'\n'
name|'self'
op|'.'
name|'_test_init_host_dynamic_fixed_range'
op|'('
name|'self'
op|'.'
name|'network'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestRPCFixedManager'
op|'('
name|'network_manager'
op|'.'
name|'RPCAllocateFixedIP'
op|','
nl|'\n'
DECL|class|TestRPCFixedManager
name|'network_manager'
op|'.'
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Dummy manager that implements RPCAllocateFixedIP."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RPCAllocateTestCase
dedent|''
name|'class'
name|'RPCAllocateTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests nova.network.manager.RPCAllocateFixedIP."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'RPCAllocateTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'rpc_fixed'
op|'='
name|'TestRPCFixedManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_rpc_allocate
dedent|''
name|'def'
name|'test_rpc_allocate'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to verify bug 855030 doesn\'t resurface.\n\n        Mekes sure _rpc_allocate_fixed_ip returns a value so the call\n        returns properly and the greenpool completes.\n        """'
newline|'\n'
name|'address'
op|'='
string|"'10.10.10.10'"
newline|'\n'
nl|'\n'
DECL|function|fake_allocate
name|'def'
name|'fake_allocate'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'address'
newline|'\n'
nl|'\n'
DECL|function|fake_network_get
dedent|''
name|'def'
name|'fake_network_get'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'test_network'
op|'.'
name|'fake_network'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'rpc_fixed'
op|','
string|"'allocate_fixed_ip'"
op|','
name|'fake_allocate'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'rpc_fixed'
op|'.'
name|'db'
op|','
string|"'network_get'"
op|','
name|'fake_network_get'
op|')'
newline|'\n'
name|'rval'
op|'='
name|'self'
op|'.'
name|'rpc_fixed'
op|'.'
name|'_rpc_allocate_fixed_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'fake_instance'"
op|','
nl|'\n'
string|"'fake_network'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rval'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'class'
name|'TestFloatingIPManager'
op|'('
name|'floating_ips'
op|'.'
name|'FloatingIP'
op|','
nl|'\n'
DECL|class|TestFloatingIPManager
name|'network_manager'
op|'.'
name|'NetworkManager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Dummy manager that implements FloatingIP."""'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|AllocateTestCase
dedent|''
name|'class'
name|'AllocateTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'AllocateTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'test'
op|'.'
name|'SampleNetworks'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conductor'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
nl|'\n'
string|"'conductor'"
op|','
name|'manager'
op|'='
name|'CONF'
op|'.'
name|'conductor'
op|'.'
name|'manager'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'compute'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'self'
op|'.'
name|'start_service'
op|'('
string|"'network'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'user_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'fake'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
name|'self'
op|'.'
name|'user_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance
dedent|''
name|'def'
name|'test_allocate_for_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address'
op|'='
string|'"10.10.10.10"'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'auto_assign_floating_ip'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'pool'"
op|':'
string|"'nova'"
op|'}'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'display_name'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'network'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_uuid'
op|'='
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'inst'
op|'['
string|"'host'"
op|']'
op|','
name|'vpn'
op|'='
name|'None'
op|','
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
name|'macs'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'nw_info'
op|')'
op|')'
newline|'\n'
name|'fixed_ip'
op|'='
name|'nw_info'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'utils'
op|'.'
name|'is_valid_ipv4'
op|'('
name|'fixed_ip'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'fixed_ips'
op|'='
name|'fixed_ip'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'host'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_mac
dedent|''
name|'def'
name|'test_allocate_for_instance_with_mac'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'available_macs'
op|'='
name|'set'
op|'('
op|'['
string|"'ca:fe:de:ad:be:ef'"
op|']'
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'display_name'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'network'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_uuid'
op|'='
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'inst'
op|'['
string|"'host'"
op|']'
op|','
name|'vpn'
op|'='
name|'None'
op|','
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
name|'macs'
op|'='
name|'available_macs'
op|')'
newline|'\n'
name|'assigned_macs'
op|'='
op|'['
name|'vif'
op|'['
string|"'address'"
op|']'
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'1'
op|','
name|'len'
op|'('
name|'assigned_macs'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'available_macs'
op|'.'
name|'pop'
op|'('
op|')'
op|','
name|'assigned_macs'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'host'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_not_enough_macs
dedent|''
name|'def'
name|'test_allocate_for_instance_not_enough_macs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'available_macs'
op|'='
name|'set'
op|'('
op|')'
newline|'\n'
name|'inst'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'compute'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'display_name'"
op|':'
name|'HOST'
op|','
nl|'\n'
string|"'instance_type_id'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
name|'networks'
op|'='
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_update'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
op|'{'
string|"'host'"
op|':'
name|'self'
op|'.'
name|'network'
op|'.'
name|'host'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'project_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'VirtualInterfaceCreateException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'allocate_for_instance'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'inst'
op|'['
string|"'id'"
op|']'
op|','
name|'instance_uuid'
op|'='
name|'inst'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'host'
op|'='
name|'inst'
op|'['
string|"'host'"
op|']'
op|','
name|'vpn'
op|'='
name|'None'
op|','
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
name|'macs'
op|'='
name|'available_macs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FloatingIPTestCase
dedent|''
dedent|''
name|'class'
name|'FloatingIPTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests nova.network.manager.FloatingIP."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'FloatingIPTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tempdir'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'TempDir'
op|'('
op|')'
op|')'
op|'.'
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'log_dir'
op|'='
name|'self'
op|'.'
name|'tempdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'TestFloatingIPManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'testproject'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disassociate_floating_ip_multi_host_calls
dedent|''
name|'def'
name|'test_disassociate_floating_ip_multi_host_calls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating_ip'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'12'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'instance-uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'network'
op|'='
op|'{'
nl|'\n'
string|"'multi_host'"
op|':'
name|'True'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
string|"'some-other-host'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'floating_ip_get_by_address'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_floating_ip_owned_by_project'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'fixed_ip_get'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'fixed_ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'network_get'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'instance_get_by_uuid'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'service_get_by_host_and_topic'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|','
name|'_z'
op|':'
string|"'service'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'servicegroup_api'
op|','
nl|'\n'
string|"'service_is_up'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|':'
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'network_rpcapi'
op|','
string|"'_disassociate_floating_ip'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_disassociate_floating_ip'
op|'('
nl|'\n'
name|'ctxt'
op|','
string|"'fl_ip'"
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'some-other-host'"
op|','
string|"'instance-uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|'('
name|'ctxt'
op|','
string|"'fl_ip'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip_multi_host_calls
dedent|''
name|'def'
name|'test_associate_floating_ip_multi_host_calls'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'floating_ip'
op|'='
op|'{'
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'None'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'fixed_ip'
op|'='
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'instance-uuid'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'network'
op|'='
op|'{'
nl|'\n'
string|"'multi_host'"
op|':'
name|'True'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
string|"'some-other-host'"
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'floating_ip_get_by_address'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'floating_ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
nl|'\n'
string|"'_floating_ip_owned_by_project'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'fixed_ip_get_by_address'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'fixed_ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'network_get'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'network'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
nl|'\n'
string|"'instance_get_by_uuid'"
op|','
nl|'\n'
name|'lambda'
name|'_x'
op|','
name|'_y'
op|':'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'network_rpcapi'
op|','
string|"'_associate_floating_ip'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'network_rpcapi'
op|'.'
name|'_associate_floating_ip'
op|'('
nl|'\n'
name|'ctxt'
op|','
string|"'fl_ip'"
op|','
string|"'fix_ip'"
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
string|"'some-other-host'"
op|','
nl|'\n'
string|"'instance-uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|'('
name|'ctxt'
op|','
string|"'fl_ip'"
op|','
string|"'fix_ip'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_double_deallocation
dedent|''
name|'def'
name|'test_double_deallocation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
comment|'# Run it twice to make it fault if it does not handle'
nl|'\n'
comment|'# instances without fixed networks'
nl|'\n'
comment|'# If this fails in either, it does not handle having no addresses'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocation_deleted_instance
dedent|''
name|'def'
name|'test_deallocation_deleted_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_teardown_network_on_host'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|','
string|"'deleted'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'address'"
op|':'
string|"'10.1.1.1'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|','
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'fixed'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocation_duplicate_floating_ip
dedent|''
name|'def'
name|'test_deallocation_duplicate_floating_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_teardown_network_on_host'"
op|','
nl|'\n'
name|'lambda'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|':'
name|'None'
op|')'
newline|'\n'
name|'instance'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'network'
op|'='
name|'db'
op|'.'
name|'network_create_safe'
op|'('
name|'self'
op|'.'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
op|'{'
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'CONF'
op|'.'
name|'host'
op|','
nl|'\n'
string|"'label'"
op|':'
string|"'foo'"
op|'}'
op|')'
newline|'\n'
name|'fixed'
op|'='
name|'db'
op|'.'
name|'fixed_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
string|"'allocated'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'address'"
op|':'
string|"'10.1.1.1'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|','
nl|'\n'
string|"'deleted'"
op|':'
name|'True'
op|'}'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_create'
op|'('
name|'self'
op|'.'
name|'context'
op|','
op|'{'
nl|'\n'
string|"'address'"
op|':'
string|"'10.10.10.10'"
op|','
string|"'instance_uuid'"
op|':'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
name|'fixed'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'self'
op|'.'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_start
dedent|''
name|'def'
name|'test_migrate_instance_start'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'count'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_floating_ip_get_by_address
name|'def'
name|'fake_floating_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_is_stale_floating_ip_address
dedent|''
name|'def'
name|'fake_is_stale_floating_ip_address'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|'=='
string|"'172.24.4.23'"
newline|'\n'
nl|'\n'
DECL|function|fake_fixed_ip_get
dedent|''
name|'def'
name|'fake_fixed_ip_get'
op|'('
name|'context'
op|','
name|'fixed_ip_id'
op|','
name|'get_network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'instance_uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'network'"
op|':'
string|"'fakenet'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_remove_floating_ip
dedent|''
name|'def'
name|'fake_remove_floating_ip'
op|'('
name|'floating_addr'
op|','
name|'fixed_addr'
op|','
name|'interface'
op|','
nl|'\n'
name|'network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'count'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fake_clean_conntrack
dedent|''
name|'def'
name|'fake_clean_conntrack'
op|'('
name|'fixed_ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'fixed_ip'
op|'=='
string|'"10.0.0.2"'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'FixedIpInvalid'
op|'('
name|'address'
op|'='
name|'fixed_ip'
op|')'
newline|'\n'
nl|'\n'
DECL|function|fake_floating_ip_update
dedent|''
dedent|''
name|'def'
name|'fake_floating_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
nl|'\n'
name|'fake_floating_ip_get_by_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_is_stale_floating_ip_address'"
op|','
nl|'\n'
name|'fake_is_stale_floating_ip_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fake_fixed_ip_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_update'"
op|','
nl|'\n'
name|'fake_floating_ip_update'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|','
string|"'remove_floating_ip'"
op|','
nl|'\n'
name|'fake_remove_floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|','
string|"'clean_conntrack'"
op|','
nl|'\n'
name|'fake_clean_conntrack'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'addresses'
op|'='
op|'['
string|"'172.24.4.23'"
op|','
string|"'172.24.4.24'"
op|','
string|"'172.24.4.25'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'migrate_instance_start'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'FAKEUUID'
op|','
nl|'\n'
name|'floating_addresses'
op|'='
name|'addresses'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'source'
op|'='
string|"'fake_source'"
op|','
nl|'\n'
name|'dest'
op|'='
string|"'fake_dest'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'count'"
op|']'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_migrate_instance_finish
dedent|''
name|'def'
name|'test_migrate_instance_finish'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'called'
op|'='
op|'{'
string|"'count'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_floating_ip_get_by_address
name|'def'
name|'fake_floating_ip_get_by_address'
op|'('
name|'context'
op|','
name|'address'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'address'"
op|':'
name|'address'
op|','
nl|'\n'
string|"'fixed_ip_id'"
op|':'
number|'0'
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_is_stale_floating_ip_address
dedent|''
name|'def'
name|'fake_is_stale_floating_ip_address'
op|'('
name|'context'
op|','
name|'floating_ip'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'floating_ip'
op|'['
string|"'address'"
op|']'
op|'=='
string|"'172.24.4.23'"
newline|'\n'
nl|'\n'
DECL|function|fake_fixed_ip_get
dedent|''
name|'def'
name|'fake_fixed_ip_get'
op|'('
name|'context'
op|','
name|'fixed_ip_id'
op|','
name|'get_network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'instance_uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'10.0.0.2'"
op|','
nl|'\n'
string|"'network'"
op|':'
string|"'fakenet'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|fake_add_floating_ip
dedent|''
name|'def'
name|'fake_add_floating_ip'
op|'('
name|'floating_addr'
op|','
name|'fixed_addr'
op|','
name|'interface'
op|','
nl|'\n'
name|'network'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'called'
op|'['
string|"'count'"
op|']'
op|'+='
number|'1'
newline|'\n'
nl|'\n'
DECL|function|fake_floating_ip_update
dedent|''
name|'def'
name|'fake_floating_ip_update'
op|'('
name|'context'
op|','
name|'address'
op|','
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|','
nl|'\n'
name|'fake_floating_ip_get_by_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'_is_stale_floating_ip_address'"
op|','
nl|'\n'
name|'fake_is_stale_floating_ip_address'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'fixed_ip_get'"
op|','
name|'fake_fixed_ip_get'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_update'"
op|','
nl|'\n'
name|'fake_floating_ip_update'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|','
string|"'add_floating_ip'"
op|','
nl|'\n'
name|'fake_add_floating_ip'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'addresses'
op|'='
op|'['
string|"'172.24.4.23'"
op|','
string|"'172.24.4.24'"
op|','
string|"'172.24.4.25'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'migrate_instance_finish'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|'='
name|'FAKEUUID'
op|','
nl|'\n'
name|'floating_addresses'
op|'='
name|'addresses'
op|','
nl|'\n'
name|'host'
op|'='
string|"'fake_dest'"
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'source'
op|'='
string|"'fake_source'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'called'
op|'['
string|"'count'"
op|']'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_dns_create_conflict
dedent|''
name|'def'
name|'test_floating_dns_create_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone'
op|'='
string|'"example.org"'
newline|'\n'
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'name1'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpDNSExists'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address1'
op|','
name|'name1'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_create_and_get
dedent|''
name|'def'
name|'test_floating_create_and_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone'
op|'='
string|'"example.org"'
newline|'\n'
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
name|'name2'
op|'='
string|'"bar"'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address1'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'entries'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'name1'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'name2'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address1'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'name1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'1'
op|']'
op|','
name|'name2'
op|')'
newline|'\n'
nl|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'name1'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'address1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_dns_delete
dedent|''
name|'def'
name|'test_floating_dns_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone'
op|'='
string|'"example.org"'
newline|'\n'
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
name|'name2'
op|'='
string|'"bar"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'name1'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'name2'
op|','
string|'"A"'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'name1'
op|','
name|'zone'
op|')'
newline|'\n'
nl|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address1'
op|','
name|'zone'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'name2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_entry'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'name1'
op|','
name|'zone'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_floating_dns_domains_public
dedent|''
name|'def'
name|'test_floating_dns_domains_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone1'
op|'='
string|'"testzone"'
newline|'\n'
name|'domain1'
op|'='
string|'"example.org"'
newline|'\n'
name|'domain2'
op|'='
string|'"example.com"'
newline|'\n'
name|'address1'
op|'='
string|"'10.10.10.10'"
newline|'\n'
name|'entryname'
op|'='
string|"'testentry'"
newline|'\n'
nl|'\n'
name|'context_admin'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AdminRequired'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_public_dns_domain'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'domain1'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_public_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|','
nl|'\n'
string|"'testproject'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_public_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain2'
op|','
nl|'\n'
string|"'fakeproject'"
op|')'
newline|'\n'
nl|'\n'
name|'domains'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_domains'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'domains'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'0'
op|']'
op|'['
string|"'domain'"
op|']'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'1'
op|']'
op|'['
string|"'domain'"
op|']'
op|','
name|'domain2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'0'
op|']'
op|'['
string|"'project'"
op|']'
op|','
string|"'testproject'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'1'
op|']'
op|'['
string|"'project'"
op|']'
op|','
string|"'fakeproject'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address1'
op|','
name|'entryname'
op|','
nl|'\n'
string|"'A'"
op|','
name|'domain1'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'entryname'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'address1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AdminRequired'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain2'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that deleting the domain deleted the associated entry'
nl|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_name'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'entryname'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'entries'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_delete_all_by_ip
dedent|''
name|'def'
name|'test_delete_all_by_ip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domain1'
op|'='
string|'"example.org"'
newline|'\n'
name|'domain2'
op|'='
string|'"example.com"'
newline|'\n'
name|'address'
op|'='
string|'"10.10.10.10"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
name|'name2'
op|'='
string|'"bar"'
newline|'\n'
nl|'\n'
DECL|function|fake_domains
name|'def'
name|'fake_domains'
op|'('
name|'context'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'['
op|'{'
string|"'domain'"
op|':'
string|"'example.org'"
op|','
string|"'scope'"
op|':'
string|"'public'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
string|"'example.com'"
op|','
string|"'scope'"
op|':'
string|"'public'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'domain'"
op|':'
string|"'test.example.org'"
op|','
string|"'scope'"
op|':'
string|"'public'"
op|'}'
op|']'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|','
string|"'get_dns_domains'"
op|','
name|'fake_domains'
op|')'
newline|'\n'
nl|'\n'
name|'context_admin'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_public_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|','
nl|'\n'
string|"'testproject'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_public_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain2'
op|','
nl|'\n'
string|"'fakeproject'"
op|')'
newline|'\n'
nl|'\n'
name|'domains'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_domains'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'for'
name|'domain'
name|'in'
name|'domains'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'name1'
op|','
string|'"A"'
op|','
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'add_dns_entry'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|','
nl|'\n'
name|'name2'
op|','
string|'"A"'
op|','
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network'
op|'.'
name|'_delete_all_entries_for_ip'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'address'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'domain'
name|'in'
name|'domains'
op|':'
newline|'\n'
indent|'            '
name|'entries'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_entries_by_address'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'address'
op|','
nl|'\n'
name|'domain'
op|'['
string|"'domain'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'entries'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mac_conflicts
dedent|''
name|'def'
name|'test_mac_conflicts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Make sure MAC collisions are retried.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'create_unique_mac_address_attempts'
op|'='
number|'3'
op|')'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
name|'macs'
op|'='
op|'['
string|"'bb:bb:bb:bb:bb:bb'"
op|','
string|"'aa:aa:aa:aa:aa:aa'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Create a VIF with aa:aa:aa:aa:aa:aa'
nl|'\n'
name|'crash_test_dummy_vif'
op|'='
op|'{'
nl|'\n'
string|"'address'"
op|':'
name|'macs'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'123'
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake_uuid'"
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'.'
name|'virtual_interface_create'
op|'('
name|'ctxt'
op|','
name|'crash_test_dummy_vif'
op|')'
newline|'\n'
nl|'\n'
comment|'# Hand out a collision first, then a legit MAC'
nl|'\n'
DECL|function|fake_gen_mac
name|'def'
name|'fake_gen_mac'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'macs'
op|'.'
name|'pop'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|"'generate_mac_address'"
op|','
name|'fake_gen_mac'
op|')'
newline|'\n'
nl|'\n'
comment|"# SQLite doesn't seem to honor the uniqueness constraint on the"
nl|'\n'
comment|'# address column, so fake the collision-avoidance here'
nl|'\n'
DECL|function|fake_vif_save
name|'def'
name|'fake_vif_save'
op|'('
name|'vif'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'vif'
op|'.'
name|'address'
op|'=='
name|'crash_test_dummy_vif'
op|'['
string|"'address'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'db_exc'
op|'.'
name|'DBError'
op|'('
string|'"If you\'re smart, you\'ll retry!"'
op|')'
newline|'\n'
comment|'# NOTE(russellb) The VirtualInterface object requires an ID to be'
nl|'\n'
comment|'# set, and we expect it to get set automatically when we do the'
nl|'\n'
comment|'# save.'
nl|'\n'
dedent|''
name|'vif'
op|'.'
name|'id'
op|'='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'models'
op|'.'
name|'VirtualInterface'
op|','
string|"'save'"
op|','
name|'fake_vif_save'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attempt to add another and make sure that both MACs are consumed'
nl|'\n'
comment|'# by the retry loop'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_add_virtual_interface'
op|'('
name|'ctxt'
op|','
string|"'fake_uuid'"
op|','
number|'123'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'macs'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_client_exceptions
dedent|''
name|'def'
name|'test_deallocate_client_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that FloatingIpNotFoundForAddress is wrapped.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|'('
name|'address'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'ClientException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'deallocate_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_client_exceptions
dedent|''
name|'def'
name|'test_associate_client_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that FloatingIpNotFoundForAddress is wrapped.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|'('
name|'address'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'ClientException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'associate_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|','
string|"'10.0.0.1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_disassociate_client_exceptions
dedent|''
name|'def'
name|'test_disassociate_client_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that FloatingIpNotFoundForAddress is wrapped.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get_by_address'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'FloatingIpNotFoundForAddress'
op|'('
name|'address'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'ClientException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'disassociate_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'1.2.3.4'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_floating_ip_client_exceptions
dedent|''
name|'def'
name|'test_get_floating_ip_client_exceptions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Ensure that FloatingIpNotFoundForAddress is wrapped.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_get'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'.'
name|'floating_ip_get'
op|'('
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-id'"
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'FloatingIpNotFound'
op|'('
name|'id'
op|'='
string|"'fake'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc_common'
op|'.'
name|'ClientException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_floating_ip'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
string|"'fake-id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|_test_associate_floating_ip_failure
dedent|''
name|'def'
name|'_test_associate_floating_ip_failure'
op|'('
name|'self'
op|','
name|'stdout'
op|','
name|'expected_exception'
op|')'
op|':'
newline|'\n'
DECL|function|_fake_catchall
indent|'        '
name|'def'
name|'_fake_catchall'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'{'
string|"'id'"
op|':'
string|"'fake'"
op|','
string|"'network'"
op|':'
string|"'fake'"
op|'}'
newline|'\n'
nl|'\n'
DECL|function|_fake_add_floating_ip
dedent|''
name|'def'
name|'_fake_add_floating_ip'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|'('
name|'stdout'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_fixed_ip_associate'"
op|','
nl|'\n'
name|'_fake_catchall'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|','
string|"'floating_ip_disassociate'"
op|','
nl|'\n'
name|'_fake_catchall'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'self'
op|'.'
name|'network'
op|'.'
name|'l3driver'
op|','
string|"'add_floating_ip'"
op|','
nl|'\n'
name|'_fake_add_floating_ip'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'expected_exception'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'_associate_floating_ip'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"''"
op|','
string|"''"
op|','
string|"''"
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip_failure
dedent|''
name|'def'
name|'test_associate_floating_ip_failure'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_associate_floating_ip_failure'
op|'('
name|'None'
op|','
nl|'\n'
name|'processutils'
op|'.'
name|'ProcessExecutionError'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_associate_floating_ip_failure_interface_not_found
dedent|''
name|'def'
name|'test_associate_floating_ip_failure_interface_not_found'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_test_associate_floating_ip_failure'
op|'('
string|"'Cannot find device'"
op|','
nl|'\n'
name|'exception'
op|'.'
name|'NoFloatingIpInterface'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|InstanceDNSTestCase
dedent|''
dedent|''
name|'class'
name|'InstanceDNSTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests nova.network.manager instance DNS."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'InstanceDNSTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tempdir'
op|'='
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'TempDir'
op|'('
op|')'
op|')'
op|'.'
name|'path'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'log_dir'
op|'='
name|'self'
op|'.'
name|'tempdir'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'='
name|'TestFloatingIPManager'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'db'
op|'='
name|'db'
newline|'\n'
name|'self'
op|'.'
name|'project_id'
op|'='
string|"'testproject'"
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
name|'self'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dns_domains_private
dedent|''
name|'def'
name|'test_dns_domains_private'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'zone1'
op|'='
string|"'testzone'"
newline|'\n'
name|'domain1'
op|'='
string|"'example.org'"
newline|'\n'
nl|'\n'
name|'context_admin'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'testuser'"
op|','
string|"'testproject'"
op|','
nl|'\n'
name|'is_admin'
op|'='
name|'True'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AdminRequired'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_private_dns_domain'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'domain1'
op|','
name|'zone1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'create_private_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|','
name|'zone1'
op|')'
newline|'\n'
name|'domains'
op|'='
name|'self'
op|'.'
name|'network'
op|'.'
name|'get_dns_domains'
op|'('
name|'self'
op|'.'
name|'context'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'domains'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'0'
op|']'
op|'['
string|"'domain'"
op|']'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'domains'
op|'['
number|'0'
op|']'
op|'['
string|"'availability_zone'"
op|']'
op|','
name|'zone1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'AdminRequired'
op|','
nl|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|','
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'network'
op|'.'
name|'delete_dns_domain'
op|'('
name|'context_admin'
op|','
name|'domain1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|domain1
dedent|''
dedent|''
name|'domain1'
op|'='
string|'"example.org"'
newline|'\n'
DECL|variable|domain2
name|'domain2'
op|'='
string|'"example.com"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LdapDNSTestCase
name|'class'
name|'LdapDNSTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests nova.network.ldapdns.LdapDNS."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'LdapDNSTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'test'
op|'.'
name|'ReplaceModule'
op|'('
string|"'ldap'"
op|','
name|'fake_ldap'
op|')'
op|')'
newline|'\n'
name|'dns_class'
op|'='
string|"'nova.network.ldapdns.LdapDNS'"
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'='
name|'importutils'
op|'.'
name|'import_object'
op|'('
name|'dns_class'
op|')'
newline|'\n'
nl|'\n'
name|'attrs'
op|'='
op|'{'
string|"'objectClass'"
op|':'
op|'['
string|"'domainrelatedobject'"
op|','
string|"'dnsdomain'"
op|','
nl|'\n'
string|"'domain'"
op|','
string|"'dcobject'"
op|','
string|"'top'"
op|']'
op|','
nl|'\n'
string|"'associateddomain'"
op|':'
op|'['
string|"'root'"
op|']'
op|','
nl|'\n'
string|"'dc'"
op|':'
op|'['
string|"'root'"
op|']'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'lobj'
op|'.'
name|'add_s'
op|'('
string|'"ou=hosts,dc=example,dc=org"'
op|','
name|'attrs'
op|'.'
name|'items'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_domain'
op|'('
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_domain'
op|'('
name|'domain2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_domain'
op|'('
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_domain'
op|'('
name|'domain2'
op|')'
newline|'\n'
name|'super'
op|'('
name|'LdapDNSTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'tearDown'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ldap_dns_domains
dedent|''
name|'def'
name|'test_ldap_dns_domains'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'domains'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_domains'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'domains'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'domain1'
op|','
name|'domains'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'domain2'
op|','
name|'domains'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ldap_dns_create_conflict
dedent|''
name|'def'
name|'test_ldap_dns_create_conflict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|'('
name|'name1'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'FloatingIpDNSExists'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|','
nl|'\n'
name|'name1'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ldap_dns_create_and_get
dedent|''
name|'def'
name|'test_ldap_dns_create_and_get'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
name|'name2'
op|'='
string|'"bar"'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'entries'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|'('
name|'name1'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|'('
name|'name2'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'name1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'1'
op|']'
op|','
name|'name2'
op|')'
newline|'\n'
nl|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_entries_by_name'
op|'('
name|'name1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'address1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_ldap_dns_delete
dedent|''
name|'def'
name|'test_ldap_dns_delete'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'address1'
op|'='
string|'"10.10.10.11"'
newline|'\n'
name|'name1'
op|'='
string|'"foo"'
newline|'\n'
name|'name2'
op|'='
string|'"bar"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|'('
name|'name1'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'create_entry'
op|'('
name|'name2'
op|','
name|'address1'
op|','
string|'"A"'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_entry'
op|'('
name|'name1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'entries'
op|'='
name|'self'
op|'.'
name|'driver'
op|'.'
name|'get_entries_by_address'
op|'('
name|'address1'
op|','
name|'domain1'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'debug'
op|'('
string|'"entries: %s"'
op|'%'
name|'entries'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'entries'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'entries'
op|'['
number|'0'
op|']'
op|','
name|'name2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'driver'
op|'.'
name|'delete_entry'
op|','
nl|'\n'
name|'name1'
op|','
name|'domain1'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

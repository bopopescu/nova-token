begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2013 Openstack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#     http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""Tests for the deprecated network API."""'
newline|'\n'
nl|'\n'
name|'import'
name|'inspect'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'api_deprecated'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
comment|'# NOTE(jkoelker) These tests require that decorators in the apis'
nl|'\n'
comment|'#                "do the right thing" and set __name__ properly'
nl|'\n'
comment|'#                they should all be using functools.wraps or similar'
nl|'\n'
comment|'#                functionality.'
nl|'\n'
nl|'\n'
nl|'\n'
DECL|function|isapimethod
name|'def'
name|'isapimethod'
op|'('
name|'obj'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'inspect'
op|'.'
name|'ismethod'
op|'('
name|'obj'
op|')'
name|'and'
name|'not'
name|'obj'
op|'.'
name|'__name__'
op|'.'
name|'startswith'
op|'('
string|"'_'"
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|discover_real_method
dedent|''
name|'def'
name|'discover_real_method'
op|'('
name|'name'
op|','
name|'method'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'if'
name|'method'
op|'.'
name|'func_closure'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'closure'
name|'in'
name|'method'
op|'.'
name|'func_closure'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'closure'
op|'.'
name|'cell_contents'
op|'.'
name|'__name__'
op|'=='
name|'name'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'method'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DeprecatedApiTestCase
dedent|''
name|'class'
name|'DeprecatedApiTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'DeprecatedApiTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api'
op|'='
name|'api'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'api_deprecated'
op|'='
name|'api_deprecated'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'api_methods'
op|'='
name|'inspect'
op|'.'
name|'getmembers'
op|'('
name|'self'
op|'.'
name|'api'
op|','
name|'isapimethod'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_api_compat
dedent|''
name|'def'
name|'test_api_compat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'methods'
op|'='
op|'['
name|'m'
op|'['
number|'0'
op|']'
name|'for'
name|'m'
name|'in'
name|'self'
op|'.'
name|'api_methods'
op|']'
newline|'\n'
name|'deprecated_methods'
op|'='
op|'['
name|'getattr'
op|'('
name|'self'
op|'.'
name|'api_deprecated'
op|','
name|'n'
op|','
name|'None'
op|')'
nl|'\n'
name|'for'
name|'n'
name|'in'
name|'methods'
op|']'
newline|'\n'
name|'missing'
op|'='
op|'['
name|'m'
op|'['
number|'0'
op|']'
name|'for'
name|'m'
name|'in'
name|'zip'
op|'('
name|'methods'
op|','
name|'deprecated_methods'
op|')'
nl|'\n'
name|'if'
name|'m'
op|'['
number|'1'
op|']'
name|'is'
name|'None'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'missing'
op|','
nl|'\n'
string|"'Deprecated api needs methods: %s'"
op|'%'
name|'missing'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_method_signatures
dedent|''
name|'def'
name|'test_method_signatures'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'name'
op|','
name|'method'
name|'in'
name|'self'
op|'.'
name|'api_methods'
op|':'
newline|'\n'
indent|'            '
name|'deprecated_method'
op|'='
name|'getattr'
op|'('
name|'self'
op|'.'
name|'api_deprecated'
op|','
name|'name'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'deprecated_method'
op|','
nl|'\n'
string|"'Deprecated api has no method %s'"
op|'%'
name|'name'
op|')'
newline|'\n'
nl|'\n'
name|'method'
op|'='
name|'discover_real_method'
op|'('
name|'name'
op|','
name|'method'
op|')'
newline|'\n'
name|'deprecated_method'
op|'='
name|'discover_real_method'
op|'('
name|'name'
op|','
nl|'\n'
name|'deprecated_method'
op|')'
newline|'\n'
nl|'\n'
name|'api_argspec'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'method'
op|')'
newline|'\n'
name|'deprecated_argspec'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'deprecated_method'
op|')'
newline|'\n'
nl|'\n'
comment|'# NOTE/TODO(jkoelker) Should probably handle the case where'
nl|'\n'
comment|'#                     varargs/keywords are used.'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'api_argspec'
op|'.'
name|'args'
op|','
name|'deprecated_argspec'
op|'.'
name|'args'
op|','
nl|'\n'
string|'"API method %s arguments differ"'
op|'%'
name|'name'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

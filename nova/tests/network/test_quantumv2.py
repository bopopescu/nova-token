begin_unit
comment|'# Copyright 2012 OpenStack LLC.'
nl|'\n'
comment|'# All Rights Reserved'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'model'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'quantumv2'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantumv2'
name|'import'
name|'api'
name|'as'
name|'quantumapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'quantumclient'
op|'.'
name|'v2_0'
name|'import'
name|'client'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
comment|'#NOTE: Quantum client raises Exception which is discouraged by HACKING.'
nl|'\n'
comment|'#      We set this variable here and use it for assertions below to avoid'
nl|'\n'
comment|'#      the hacking checks until we can make quantum client throw a custom'
nl|'\n'
comment|'#      exception class instead.'
nl|'\n'
DECL|variable|QUANTUM_CLIENT_EXCEPTION
name|'QUANTUM_CLIENT_EXCEPTION'
op|'='
name|'Exception'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MyComparator
name|'class'
name|'MyComparator'
op|'('
name|'mox'
op|'.'
name|'Comparator'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'lhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'lhs'
op|'='
name|'lhs'
newline|'\n'
nl|'\n'
DECL|member|_com_dict
dedent|''
name|'def'
name|'_com_dict'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'lhs'
op|')'
op|'!='
name|'len'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'key'
op|','
name|'value'
name|'in'
name|'lhs'
op|'.'
name|'iteritems'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
name|'not'
name|'in'
name|'rhs'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'rhs_value'
op|'='
name|'rhs'
op|'['
name|'key'
op|']'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'_com'
op|'('
name|'value'
op|','
name|'rhs_value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_com_list
dedent|''
name|'def'
name|'_com_list'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'len'
op|'('
name|'lhs'
op|')'
op|'!='
name|'len'
op|'('
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'for'
name|'lhs_value'
name|'in'
name|'lhs'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'lhs_value'
name|'not'
name|'in'
name|'rhs'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'True'
newline|'\n'
nl|'\n'
DECL|member|_com
dedent|''
name|'def'
name|'_com'
op|'('
name|'self'
op|','
name|'lhs'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'lhs'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'rhs'
name|'is'
name|'None'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_dict'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'list'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_list'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'isinstance'
op|'('
name|'lhs'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'not'
name|'isinstance'
op|'('
name|'rhs'
op|','
name|'tuple'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'_com_list'
op|'('
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'lhs'
op|'=='
name|'rhs'
newline|'\n'
nl|'\n'
DECL|member|equals
dedent|''
name|'def'
name|'equals'
op|'('
name|'self'
op|','
name|'rhs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'_com'
op|'('
name|'self'
op|'.'
name|'lhs'
op|','
name|'rhs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|__repr__
dedent|''
name|'def'
name|'__repr__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'str'
op|'('
name|'self'
op|'.'
name|'lhs'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestQuantumClient
dedent|''
dedent|''
name|'class'
name|'TestQuantumClient'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestQuantumClient'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withtoken
dedent|''
name|'def'
name|'test_withtoken'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_url'
op|'='
string|"'http://anyhost/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_url_timeout'
op|'='
number|'30'
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
nl|'\n'
string|"'my_tenantid'"
op|','
nl|'\n'
name|'auth_token'
op|'='
string|"'token'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"__init__"'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'Client'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'endpoint_url'
op|'='
name|'FLAGS'
op|'.'
name|'quantum_url'
op|','
nl|'\n'
name|'token'
op|'='
name|'my_context'
op|'.'
name|'auth_token'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'FLAGS'
op|'.'
name|'quantum_url_timeout'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'quantumv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withouttoken_keystone_connection_error
dedent|''
name|'def'
name|'test_withouttoken_keystone_connection_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_auth_strategy'
op|'='
string|"'keystone'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_url'
op|'='
string|"'http://anyhost/'"
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'QUANTUM_CLIENT_EXCEPTION'
op|','
nl|'\n'
name|'quantumv2'
op|'.'
name|'get_client'
op|','
nl|'\n'
name|'my_context'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_withouttoken_keystone_not_auth
dedent|''
name|'def'
name|'test_withouttoken_keystone_not_auth'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# self.flags(quantum_auth_strategy=None) fail to work'
nl|'\n'
indent|'        '
name|'old_quantum_auth_strategy'
op|'='
name|'FLAGS'
op|'.'
name|'quantum_auth_strategy'
newline|'\n'
name|'setattr'
op|'('
name|'FLAGS'
op|','
string|"'quantum_auth_strategy'"
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_url'
op|'='
string|"'http://anyhost/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_url_timeout'
op|'='
number|'30'
op|')'
newline|'\n'
name|'my_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|','
string|'"__init__"'
op|')'
newline|'\n'
name|'client'
op|'.'
name|'Client'
op|'.'
name|'__init__'
op|'('
nl|'\n'
name|'endpoint_url'
op|'='
name|'FLAGS'
op|'.'
name|'quantum_url'
op|','
nl|'\n'
name|'auth_strategy'
op|'='
name|'None'
op|','
nl|'\n'
name|'timeout'
op|'='
name|'FLAGS'
op|'.'
name|'quantum_url_timeout'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'quantumv2'
op|'.'
name|'get_client'
op|'('
name|'my_context'
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'setattr'
op|'('
name|'FLAGS'
op|','
string|"'quantum_auth_strategy'"
op|','
nl|'\n'
name|'old_quantum_auth_strategy'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestQuantumv2
dedent|''
dedent|''
dedent|''
name|'class'
name|'TestQuantumv2'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'TestQuantumv2'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quantumv2'
op|','
string|"'get_client'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'client'
op|'.'
name|'Client'
op|')'
newline|'\n'
name|'quantumv2'
op|'.'
name|'get_client'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
op|'.'
name|'MultipleTimes'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'userid'"
op|','
string|"'my_tenantid'"
op|')'
newline|'\n'
name|'setattr'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
string|"'auth_token'"
op|','
nl|'\n'
string|"'bff4a5a6b9eb4ea2a6efec6eefb77936'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance'
op|'='
op|'{'
string|"'project_id'"
op|':'
string|"'9d049e4b60b64716978ab415e6fbd5c0'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
name|'str'
op|'('
name|'utils'
op|'.'
name|'gen_uuid'
op|'('
op|')'
op|')'
op|','
nl|'\n'
string|"'display_name'"
op|':'
string|"'test_instance'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'nets1'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname1'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'nets1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname2'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'nets3'
op|'='
name|'self'
op|'.'
name|'nets2'
op|'+'
op|'['
op|'{'
string|"'id'"
op|':'
string|"'my_netid3'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'my_netname3'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'my_tenantid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets4'
op|'='
op|'['
op|'{'
string|"'id'"
op|':'
string|"'his_netid4'"
op|','
nl|'\n'
string|"'name'"
op|':'
string|"'his_netname4'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
string|"'his_tenantid'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets1'
op|','
name|'self'
op|'.'
name|'nets2'
op|','
name|'self'
op|'.'
name|'nets3'
op|','
name|'self'
op|'.'
name|'nets4'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'port_data1'
op|'='
op|'['
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
string|"'device_id1'"
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.1.2'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'my_subid1'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac1'"
op|','
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'.'
name|'append'
op|'('
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'port_data2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'network_id'"
op|':'
string|"'my_netid2'"
op|','
nl|'\n'
string|"'device_id'"
op|':'
string|"'device_id2'"
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'id'"
op|':'
string|"'my_portid2'"
op|','
nl|'\n'
string|"'fixed_ips'"
op|':'
op|'['
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.2.2'"
op|','
nl|'\n'
string|"'subnet_id'"
op|':'
string|"'my_subid2'"
op|'}'
op|']'
op|','
nl|'\n'
string|"'mac_address'"
op|':'
string|"'my_mac2'"
op|','
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data1'
op|'='
op|'['
op|'{'
string|"'cidr'"
op|':'
string|"'10.0.1.0/24'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'10.0.1.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.1.1'"
op|','
string|"'8.8.1.2'"
op|']'
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data2'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'subnet_data2'
op|'.'
name|'append'
op|'('
op|'{'
string|"'cidr'"
op|':'
string|"'10.0.2.0/24'"
op|','
nl|'\n'
string|"'gateway_ip'"
op|':'
string|"'10.0.2.1'"
op|','
nl|'\n'
string|"'dns_nameservers'"
op|':'
op|'['
string|"'8.8.2.1'"
op|','
string|"'8.8.2.2'"
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mox'
op|'.'
name|'UnsetStubs'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'VerifyAll'
op|'('
op|')'
newline|'\n'
dedent|''
name|'finally'
op|':'
newline|'\n'
indent|'            '
name|'FLAGS'
op|'.'
name|'reset'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_verify_nw_info
dedent|''
dedent|''
name|'def'
name|'_verify_nw_info'
op|'('
name|'self'
op|','
name|'nw_inf'
op|','
name|'index'
op|'='
number|'0'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'id_suffix'
op|'='
name|'index'
op|'+'
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'10.0.%s.2'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'.'
name|'fixed_ips'
op|'('
op|')'
op|'['
name|'index'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'my_netname%s'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'label'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'my_portid%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'my_mac%s'"
op|'%'
name|'id_suffix'
op|','
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'address'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'10.0.%s.0/24'"
op|'%'
name|'id_suffix'
op|','
nl|'\n'
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'cidr'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'model'
op|'.'
name|'IP'
op|'('
name|'address'
op|'='
string|"'8.8.%s.1'"
op|'%'
name|'id_suffix'
op|')'
name|'in'
nl|'\n'
name|'nw_inf'
op|'['
name|'index'
op|']'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'dns'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_instance_nw_info
dedent|''
name|'def'
name|'_get_instance_nw_info'
op|'('
name|'self'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'port_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'port_data1'
name|'or'
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'}'
op|')'
newline|'\n'
name|'nets'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'nets1'
name|'or'
name|'self'
op|'.'
name|'nets2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'1'
op|','
name|'number'
op|'+'
number|'1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'subnet_data'
op|'='
name|'i'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'subnet_data1'
name|'or'
name|'self'
op|'.'
name|'subnet_data2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_subid%s'"
op|'%'
name|'i'
op|']'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'subnets'"
op|':'
name|'subnet_data'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'nw_inf'
op|'='
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'xrange'
op|'('
number|'0'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_verify_nw_info'
op|'('
name|'nw_inf'
op|','
name|'i'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_1
dedent|''
dedent|''
name|'def'
name|'test_get_instance_nw_info_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to get one port in one network and subnet."""'
newline|'\n'
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_2
dedent|''
name|'def'
name|'test_get_instance_nw_info_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to get one port in each of two networks and subnets."""'
newline|'\n'
name|'self'
op|'.'
name|'_get_instance_nw_info'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_nw_info_with_nets
dedent|''
name|'def'
name|'test_get_instance_nw_info_with_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test get instance_nw_info with networks passed in."""'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|'.'
name|'db'
op|','
string|"'instance_info_cache_update'"
op|')'
newline|'\n'
name|'api'
op|'.'
name|'db'
op|'.'
name|'instance_info_cache_update'
op|'('
nl|'\n'
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_subnets'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_subid1'"
op|']'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'subnets'"
op|':'
name|'self'
op|'.'
name|'subnet_data1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'nw_inf'
op|'='
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'networks'
op|'='
name|'self'
op|'.'
name|'nets1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_verify_nw_info'
op|'('
name|'nw_inf'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_for_instance
dedent|''
name|'def'
name|'_allocate_for_instance'
op|'('
name|'self'
op|','
name|'net_idx'
op|'='
number|'1'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'api'
op|','
string|"'get_instance_nw_info'"
op|')'
newline|'\n'
comment|'# Net idx is 1-based for compatibility with existing unit tests'
nl|'\n'
name|'nets'
op|'='
name|'self'
op|'.'
name|'nets'
op|'['
name|'net_idx'
op|'-'
number|'1'
op|']'
newline|'\n'
name|'api'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'mox'
op|'.'
name|'IgnoreArg'
op|'('
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|','
nl|'\n'
name|'networks'
op|'='
name|'nets'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'ports'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'fixed_ips'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'req_net_ids'
op|'='
op|'['
op|']'
newline|'\n'
name|'if'
string|"'requested_networks'"
name|'in'
name|'kwargs'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'id'
op|','
name|'fixed_ip'
op|','
name|'port_id'
name|'in'
name|'kwargs'
op|'['
string|"'requested_networks'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'port_id'
op|':'
newline|'\n'
indent|'                    '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'show_port'
op|'('
name|'port_id'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'id'"
op|':'
string|"'my_portid1'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
string|"'my_netid1'"
op|'}'
op|'}'
op|')'
newline|'\n'
name|'req_net_ids'
op|'.'
name|'append'
op|'('
string|"'my_netid1'"
op|')'
newline|'\n'
name|'ports'
op|'['
string|"'my_netid1'"
op|']'
op|'='
name|'self'
op|'.'
name|'port_data1'
op|'['
number|'0'
op|']'
newline|'\n'
name|'id'
op|'='
string|"'my_netid1'"
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'fixed_ips'
op|'['
name|'id'
op|']'
op|'='
name|'fixed_ip'
newline|'\n'
dedent|''
name|'req_net_ids'
op|'.'
name|'append'
op|'('
name|'id'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'search_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
name|'nets'
name|'if'
name|'net'
op|'['
string|"'id'"
op|']'
name|'in'
name|'req_net_ids'
op|']'
newline|'\n'
nl|'\n'
name|'mox_list_network_params'
op|'='
name|'dict'
op|'('
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'search_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_network_params'
op|'['
string|"'id'"
op|']'
op|'='
name|'search_ids'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_network_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'nets'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'mox_list_network_params'
op|'='
name|'dict'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'search_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_network_params'
op|'['
string|"'id'"
op|']'
op|'='
name|'search_ids'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_network_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'network'
name|'in'
name|'nets'
op|':'
newline|'\n'
indent|'            '
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port'
op|'='
name|'ports'
op|'.'
name|'get'
op|'('
name|'network'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|')'
newline|'\n'
name|'if'
name|'port'
op|':'
newline|'\n'
indent|'                '
name|'port_id'
op|'='
name|'port'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'update_port'
op|'('
name|'port_id'
op|','
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
nl|'\n'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'fixed_ip'
op|'='
name|'fixed_ips'
op|'.'
name|'get'
op|'('
name|'network'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'fixed_ip'
op|':'
newline|'\n'
indent|'                    '
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'fixed_ip'"
op|']'
op|'='
name|'fixed_ip'
newline|'\n'
dedent|''
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'network_id'"
op|']'
op|'='
name|'network'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'admin_state_up'"
op|']'
op|'='
name|'True'
newline|'\n'
name|'port_req_body'
op|'['
string|"'port'"
op|']'
op|'['
string|"'tenant_id'"
op|']'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
newline|'\n'
name|'res_port'
op|'='
op|'{'
string|"'port'"
op|':'
op|'{'
string|"'id'"
op|':'
string|"'fake'"
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'res_port'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'allocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_1
dedent|''
name|'def'
name|'test_allocate_for_instance_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate one port in one network env."""'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_2
dedent|''
name|'def'
name|'test_allocate_for_instance_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Allocate one port in two networks env."""'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'net'
op|'['
string|"'id'"
op|']'
op|','
name|'None'
op|','
name|'None'
op|')'
nl|'\n'
name|'for'
name|'net'
name|'in'
op|'('
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'nets3'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'3'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks_with_fixedip
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks_with_fixedip'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'self'
op|'.'
name|'nets1'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
string|"'10.0.1.0/24'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'1'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_with_requested_networks_with_port
dedent|''
name|'def'
name|'test_allocate_for_instance_with_requested_networks_with_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
name|'None'
op|','
name|'None'
op|','
string|"'myportid1'"
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_for_instance'
op|'('
name|'net_idx'
op|'='
number|'1'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_ex1
dedent|''
name|'def'
name|'test_allocate_for_instance_ex1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify we will delete created ports\n        if we fail to allocate all net resources.\n\n        Mox to raise exception when creating a second port.\n        In this case, the code should delete the first created port.\n        """'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'index'
op|'='
number|'0'
newline|'\n'
name|'for'
name|'network'
name|'in'
name|'self'
op|'.'
name|'nets2'
op|':'
newline|'\n'
indent|'            '
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'network'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'device_owner'"
op|':'
string|"'compute:nova'"
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'port'
op|'='
op|'{'
string|"'id'"
op|':'
string|"'portid_'"
op|'+'
name|'network'
op|'['
string|"'id'"
op|']'
op|'}'
newline|'\n'
name|'if'
name|'index'
op|'=='
number|'0'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'port'"
op|':'
name|'port'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'Exception'
op|'('
string|'"fail to create port"'
op|')'
op|')'
newline|'\n'
dedent|''
name|'index'
op|'+='
number|'1'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
string|"'portid_'"
op|'+'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'QUANTUM_CLIENT_EXCEPTION'
op|','
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_for_instance_ex2
dedent|''
name|'def'
name|'test_allocate_for_instance_ex2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""verify we have no port to delete\n        if we fail to allocate the first net resource.\n\n        Mox to raise exception when creating the first port.\n        In this case, the code should not delete any ports.\n        """'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'port_req_body'
op|'='
op|'{'
nl|'\n'
string|"'port'"
op|':'
op|'{'
nl|'\n'
string|"'network_id'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
string|"'admin_state_up'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'device_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
string|"'tenant_id'"
op|':'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'create_port'
op|'('
nl|'\n'
name|'MyComparator'
op|'('
name|'port_req_body'
op|')'
op|')'
op|'.'
name|'AndRaise'
op|'('
nl|'\n'
name|'Exception'
op|'('
string|'"fail to create port"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'QUANTUM_CLIENT_EXCEPTION'
op|','
name|'api'
op|'.'
name|'allocate_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_deallocate_for_instance
dedent|''
name|'def'
name|'_deallocate_for_instance'
op|'('
name|'self'
op|','
name|'number'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'port_data'
op|'='
name|'number'
op|'=='
number|'1'
name|'and'
name|'self'
op|'.'
name|'port_data1'
name|'or'
name|'self'
op|'.'
name|'port_data2'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'device_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'port_data'
op|'}'
op|')'
newline|'\n'
name|'for'
name|'port'
name|'in'
name|'port_data'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'delete_port'
op|'('
name|'port'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'self'
op|'.'
name|'instance'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_1
dedent|''
name|'def'
name|'test_deallocate_for_instance_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to deallocate in one port env."""'
newline|'\n'
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_for_instance_2
dedent|''
name|'def'
name|'test_deallocate_for_instance_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test to deallocate in two ports env."""'
newline|'\n'
name|'self'
op|'.'
name|'_deallocate_for_instance'
op|'('
number|'2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks
dedent|''
name|'def'
name|'test_validate_networks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'test'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
string|"'test2'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
op|')'
op|','
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
op|')'
op|','
nl|'\n'
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ex_1
dedent|''
name|'def'
name|'test_validate_networks_ex_1'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'test'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
string|"'test2'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
op|')'
op|','
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|']'
op|')'
op|','
nl|'\n'
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkNotFound'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"my_netid2"'
name|'in'
name|'str'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_networks_ex_2
dedent|''
dedent|''
name|'def'
name|'test_validate_networks_ex_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'requested_networks'
op|'='
op|'['
op|'('
string|"'my_netid1'"
op|','
string|"'test'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid2'"
op|','
string|"'test2'"
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'('
string|"'my_netid3'"
op|','
string|"'test3'"
op|','
name|'None'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|','
string|"'my_netid3'"
op|']'
op|')'
op|','
nl|'\n'
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'context'
op|'.'
name|'project_id'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
name|'self'
op|'.'
name|'nets1'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
name|'id'
op|'='
name|'mox'
op|'.'
name|'SameElementsAs'
op|'('
op|'['
string|"'my_netid1'"
op|','
string|"'my_netid2'"
op|','
string|"'my_netid3'"
op|']'
op|')'
op|','
nl|'\n'
name|'shared'
op|'='
name|'True'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'networks'"
op|':'
op|'['
op|']'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'api'
op|'.'
name|'validate_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'requested_networks'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'NetworkNotFound'
name|'as'
name|'ex'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|'"my_netid2, my_netid3"'
name|'in'
name|'str'
op|'('
name|'ex'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_uuids_by_ip_filter
dedent|''
dedent|''
name|'def'
name|'test_get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'filters'
op|'='
op|'{'
string|"'ip'"
op|':'
string|"'^10\\\\.0\\\\.1\\\\.2$'"
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_ports'
op|'('
nl|'\n'
name|'fixed_ips'
op|'='
name|'MyComparator'
op|'('
op|'{'
string|"'ip_address'"
op|':'
string|"'10.0.1.2'"
op|'}'
op|')'
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'ports'"
op|':'
name|'self'
op|'.'
name|'port_data2'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'api'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|'.'
name|'context'
op|','
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'device_id1'"
op|','
name|'result'
op|'['
number|'0'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
string|"'device_id2'"
op|','
name|'result'
op|'['
number|'1'
op|']'
op|'['
string|"'instance_uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_available_networks
dedent|''
name|'def'
name|'_get_available_networks'
op|'('
name|'self'
op|','
name|'prv_nets'
op|','
name|'pub_nets'
op|','
name|'req_ids'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'api'
op|'='
name|'quantumapi'
op|'.'
name|'API'
op|'('
op|')'
newline|'\n'
name|'nets'
op|'='
name|'prv_nets'
op|'+'
name|'pub_nets'
newline|'\n'
name|'mox_list_network_params'
op|'='
name|'dict'
op|'('
name|'tenant_id'
op|'='
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'shared'
op|'='
name|'False'
op|')'
newline|'\n'
name|'if'
name|'req_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_network_params'
op|'['
string|"'id'"
op|']'
op|'='
name|'req_ids'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_network_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'prv_nets'
op|'}'
op|')'
newline|'\n'
name|'mox_list_network_params'
op|'='
name|'dict'
op|'('
name|'shared'
op|'='
name|'True'
op|')'
newline|'\n'
name|'if'
name|'req_ids'
op|':'
newline|'\n'
indent|'            '
name|'mox_list_network_params'
op|'['
string|"'id'"
op|']'
op|'='
name|'req_ids'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'moxed_client'
op|'.'
name|'list_networks'
op|'('
nl|'\n'
op|'**'
name|'mox_list_network_params'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'{'
string|"'networks'"
op|':'
name|'pub_nets'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'rets'
op|'='
name|'api'
op|'.'
name|'_get_available_networks'
op|'('
name|'self'
op|'.'
name|'context'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'req_ids'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rets'
op|','
name|'nets'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_all_private
dedent|''
name|'def'
name|'test_get_available_networks_all_private'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
name|'self'
op|'.'
name|'nets2'
op|','
name|'pub_nets'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_all_public
dedent|''
name|'def'
name|'test_get_available_networks_all_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
op|'['
op|']'
op|','
name|'pub_nets'
op|'='
name|'self'
op|'.'
name|'nets2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_private_and_public
dedent|''
name|'def'
name|'test_get_available_networks_private_and_public'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|'='
name|'self'
op|'.'
name|'nets1'
op|','
name|'pub_nets'
op|'='
name|'self'
op|'.'
name|'nets4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_available_networks_with_network_ids
dedent|''
name|'def'
name|'test_get_available_networks_with_network_ids'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'prv_nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|']'
newline|'\n'
name|'pub_nets'
op|'='
op|'['
name|'self'
op|'.'
name|'nets3'
op|'['
op|'-'
number|'1'
op|']'
op|']'
newline|'\n'
comment|'# specify only first and last network'
nl|'\n'
name|'req_ids'
op|'='
op|'['
name|'net'
op|'['
string|"'id'"
op|']'
name|'for'
name|'net'
name|'in'
op|'('
name|'self'
op|'.'
name|'nets3'
op|'['
number|'0'
op|']'
op|','
name|'self'
op|'.'
name|'nets3'
op|'['
op|'-'
number|'1'
op|']'
op|')'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'_get_available_networks'
op|'('
name|'prv_nets'
op|','
name|'pub_nets'
op|','
name|'req_ids'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

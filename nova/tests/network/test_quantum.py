begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2011,2012 Nicira, Inc.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'mox'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'models'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
name|'import'
name|'session'
name|'as'
name|'sql_session'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'client'
name|'as'
name|'quantum_client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'fake_client'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'manager'
name|'as'
name|'quantum_manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'melange_ipam_lib'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
op|'.'
name|'quantum'
name|'import'
name|'quantum_connection'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
DECL|variable|FLAGS
name|'FLAGS'
op|'='
name|'flags'
op|'.'
name|'FLAGS'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|networks
name|'networks'
op|'='
op|'['
op|'{'
string|"'label'"
op|':'
string|"'project1-net1'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'100.168.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'100:1db8::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'100:1db8::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'100.168.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'100.168.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'vpn_public_address'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project1'"
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|"'project2-net1'"
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'101.168.1.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'101:1db9::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'101:1db9::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'101.168.1.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'101.168.1.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|"'fake_project2'"
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|'"public"'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'102.0.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'102:1dba::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'102:1dba::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'102.0.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'102.0.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'0'
op|'}'
op|','
nl|'\n'
op|'{'
string|"'label'"
op|':'
string|'"project2-net2"'
op|','
nl|'\n'
string|"'injected'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'multi_host'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'cidr'"
op|':'
string|"'103.0.0.0/24'"
op|','
nl|'\n'
string|"'cidr_v6'"
op|':'
string|"'103:1dbb::/64'"
op|','
nl|'\n'
string|"'gateway_v6'"
op|':'
string|"'103:1dbb::1'"
op|','
nl|'\n'
string|"'netmask_v6'"
op|':'
string|"'64'"
op|','
nl|'\n'
string|"'netmask'"
op|':'
string|"'255.255.255.0'"
op|','
nl|'\n'
string|"'bridge'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'bridge_interface'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'gateway'"
op|':'
string|"'103.0.0.1'"
op|','
nl|'\n'
string|"'broadcast'"
op|':'
string|"'103.0.0.255'"
op|','
nl|'\n'
string|"'dns1'"
op|':'
string|"'8.8.8.8'"
op|','
nl|'\n'
string|"'vlan'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'project_id'"
op|':'
string|'"fake_project2"'
op|','
nl|'\n'
string|"'priority'"
op|':'
number|'2'
op|'}'
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumConnectionTestCase
name|'class'
name|'QuantumConnectionTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_connection
indent|'    '
name|'def'
name|'test_connection'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fc'
op|'='
name|'fake_client'
op|'.'
name|'FakeClient'
op|'('
name|'LOG'
op|')'
newline|'\n'
name|'qc'
op|'='
name|'quantum_connection'
op|'.'
name|'QuantumClientConnection'
op|'('
name|'client'
op|'='
name|'fc'
op|')'
newline|'\n'
name|'t'
op|'='
string|'"tenant1"'
newline|'\n'
name|'net1_name'
op|'='
string|'"net1"'
newline|'\n'
name|'net1_uuid'
op|'='
name|'qc'
op|'.'
name|'create_network'
op|'('
name|'t'
op|','
name|'net1_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'net1_name'
op|','
name|'qc'
op|'.'
name|'get_network_name'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'qc'
op|'.'
name|'network_exists'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'qc'
op|'.'
name|'network_exists'
op|'('
name|'t'
op|','
string|'"fake-uuid"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'qc'
op|'.'
name|'network_exists'
op|'('
string|'"fake-tenant"'
op|','
name|'net1_uuid'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'nets'
op|'='
name|'qc'
op|'.'
name|'get_networks'
op|'('
name|'t'
op|')'
op|'['
string|"'networks'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'nets'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'nets'
op|'['
number|'0'
op|']'
op|'['
string|"'id'"
op|']'
op|','
name|'net1_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'num_ports'
op|'='
number|'10'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'num_ports'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'qc'
op|'.'
name|'create_and_attach_port'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
nl|'\n'
string|"'iface'"
op|'+'
name|'str'
op|'('
name|'i'
op|')'
op|','
name|'state'
op|'='
string|"'ACTIVE'"
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'qc'
op|'.'
name|'get_attached_ports'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
op|')'
op|','
name|'num_ports'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'num_ports'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'port_uuid'
op|'='
name|'qc'
op|'.'
name|'get_port_by_attachment'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
nl|'\n'
string|"'iface'"
op|'+'
name|'str'
op|'('
name|'i'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'port_uuid'
op|')'
newline|'\n'
name|'qc'
op|'.'
name|'detach_and_delete_port'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
name|'port_uuid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'qc'
op|'.'
name|'get_attached_ports'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# test port not found'
nl|'\n'
name|'qc'
op|'.'
name|'create_and_attach_port'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
string|"'foo'"
op|','
name|'state'
op|'='
string|"'ACTIVE'"
op|')'
newline|'\n'
name|'port_uuid'
op|'='
name|'qc'
op|'.'
name|'get_port_by_attachment'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'qc'
op|'.'
name|'detach_and_delete_port'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|','
name|'port_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumNotFoundException'
op|','
nl|'\n'
name|'qc'
op|'.'
name|'detach_and_delete_port'
op|','
name|'t'
op|','
nl|'\n'
name|'net1_uuid'
op|','
name|'port_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'qc'
op|'.'
name|'delete_network'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'qc'
op|'.'
name|'network_exists'
op|'('
name|'t'
op|','
name|'net1_uuid'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'qc'
op|'.'
name|'get_networks'
op|'('
name|'t'
op|')'
op|'['
string|"'networks'"
op|']'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumNotFoundException'
op|','
nl|'\n'
name|'qc'
op|'.'
name|'get_network_name'
op|','
name|'t'
op|','
name|'net1_uuid'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# this is a base class to be used by other QuantumManager Test classes'
nl|'\n'
DECL|class|QuantumNovaTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'QuantumNovaTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_use_dhcp'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'l3_lib'
op|'='
string|'"nova.network.l3.LinuxNetL3"'
op|')'
newline|'\n'
name|'linuxdrv'
op|'='
string|'"nova.network.linux_net.LinuxOVSInterfaceDriver"'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'linuxnet_interface_driver'
op|'='
name|'linuxdrv'
op|')'
newline|'\n'
name|'fc'
op|'='
name|'fake_client'
op|'.'
name|'FakeClient'
op|'('
name|'LOG'
op|')'
newline|'\n'
name|'qc'
op|'='
name|'quantum_connection'
op|'.'
name|'QuantumClientConnection'
op|'('
name|'client'
op|'='
name|'fc'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'='
name|'quantum_manager'
op|'.'
name|'QuantumManager'
op|'('
nl|'\n'
name|'ipam_lib'
op|'='
string|'"nova.network.quantum.nova_ipam_lib"'
op|','
nl|'\n'
name|'q_conn'
op|'='
name|'qc'
op|')'
newline|'\n'
nl|'\n'
DECL|function|func
name|'def'
name|'func'
op|'('
name|'arg1'
op|','
name|'arg2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func2
dedent|''
name|'def'
name|'func2'
op|'('
name|'arg1'
op|','
name|'arg2'
op|','
name|'arg3'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
DECL|function|func1
dedent|''
name|'def'
name|'func1'
op|'('
name|'arg1'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'update_dhcp_hostfile_with_text'
op|'='
name|'func'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'restart_dhcp'
op|'='
name|'func2'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'driver'
op|'.'
name|'kill_dhcp'
op|'='
name|'func1'
newline|'\n'
nl|'\n'
comment|'# Tests seem to create some networks by default, which'
nl|'\n'
comment|"# we don't want.  So we delete them."
nl|'\n'
nl|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|"'fake_project1'"
op|')'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctx'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'db'
op|'.'
name|'network_delete_safe'
op|'('
name|'ctx'
op|','
name|'n'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Other unit tests (e.g., test_compute.py) have a nasty'
nl|'\n'
comment|'# habit of of creating fixed IPs and not cleaning up, which'
nl|'\n'
comment|'# can confuse these tests, so we remove all existing fixed'
nl|'\n'
comment|'# ips before starting.'
nl|'\n'
dedent|''
name|'session'
op|'='
name|'sql_session'
op|'.'
name|'get_session'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'session'
op|'.'
name|'query'
op|'('
name|'models'
op|'.'
name|'FixedIp'
op|')'
op|'.'
name|'all'
op|'('
op|')'
newline|'\n'
name|'with'
name|'session'
op|'.'
name|'begin'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'fip_ref'
name|'in'
name|'result'
op|':'
newline|'\n'
indent|'                '
name|'session'
op|'.'
name|'delete'
op|'('
name|'fip_ref'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'init_host'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_network
dedent|''
name|'def'
name|'_create_network'
op|'('
name|'self'
op|','
name|'n'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'n'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'nwks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'ctx'
op|','
nl|'\n'
name|'label'
op|'='
name|'n'
op|'['
string|"'label'"
op|']'
op|','
name|'cidr'
op|'='
name|'n'
op|'['
string|"'cidr'"
op|']'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'n'
op|'['
string|"'multi_host'"
op|']'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'1'
op|','
name|'network_size'
op|'='
number|'256'
op|','
nl|'\n'
name|'cidr_v6'
op|'='
name|'n'
op|'['
string|"'cidr_v6'"
op|']'
op|','
nl|'\n'
name|'gateway'
op|'='
name|'n'
op|'['
string|"'gateway'"
op|']'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'n'
op|'['
string|"'gateway_v6'"
op|']'
op|','
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
name|'dns1'
op|'='
name|'n'
op|'['
string|"'dns1'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'n'
op|'['
string|"'project_id'"
op|']'
op|','
nl|'\n'
name|'priority'
op|'='
name|'n'
op|'['
string|"'priority'"
op|']'
op|')'
newline|'\n'
name|'n'
op|'['
string|"'uuid'"
op|']'
op|'='
name|'nwks'
op|'['
number|'0'
op|']'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumAllocationTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumAllocationTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_get_network_in_db
indent|'    '
name|'def'
name|'test_get_network_in_db'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'elevated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'context'
op|'='
name|'context'
newline|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
string|"'elevated'"
op|','
string|"'quantum_net_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
op|'('
string|"'quantum_net_id'"
op|','
nl|'\n'
string|"'net_tenant_id'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'network'
op|'['
string|"'quantum_net_id'"
op|']'
op|','
string|"'quantum_net_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_network_not_in_db
dedent|''
name|'def'
name|'test_get_network_not_in_db'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'context'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'context'
op|'.'
name|'elevated'
op|'('
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'elevated'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'context'
op|'='
name|'context'
newline|'\n'
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
string|"'elevated'"
op|','
string|"'quantum_net_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'network'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'get_network'
op|'('
name|'context'
op|','
op|'('
string|"'quantum_net_id'"
op|','
nl|'\n'
string|"'net_tenant_id'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'network'
op|'['
string|"'quantum_net_id'"
op|']'
op|','
string|"'quantum_net_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'network'
op|'['
string|"'uuid'"
op|']'
op|','
string|"'quantum_net_id'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumDeallocationTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumDeallocationTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_deallocate_port
indent|'    '
name|'def'
name|'test_deallocate_port'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'quantum'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
nl|'\n'
name|'quantum_connection'
op|'.'
name|'QuantumClientConnection'
op|')'
newline|'\n'
name|'quantum'
op|'.'
name|'get_port_by_attachment'
op|'('
string|"'q_tenant_id'"
op|','
string|"'net_id'"
op|','
nl|'\n'
string|"'interface_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'port_id'"
op|')'
newline|'\n'
name|'quantum'
op|'.'
name|'detach_and_delete_port'
op|'('
string|"'q_tenant_id'"
op|','
string|"'net_id'"
op|','
string|"'port_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'='
name|'quantum'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_port'
op|'('
string|"'interface_id'"
op|','
string|"'net_id'"
op|','
string|"'q_tenant_id'"
op|','
nl|'\n'
string|"'instance_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_port_logs_error
dedent|''
name|'def'
name|'test_deallocate_port_logs_error'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'quantum'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
nl|'\n'
name|'quantum_connection'
op|'.'
name|'QuantumClientConnection'
op|')'
newline|'\n'
name|'quantum'
op|'.'
name|'get_port_by_attachment'
op|'('
string|"'q_tenant_id'"
op|','
string|"'net_id'"
op|','
nl|'\n'
string|"'interface_id'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'Exception'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'='
name|'quantum'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quantum_manager'
op|'.'
name|'LOG'
op|','
string|"'exception'"
op|')'
newline|'\n'
name|'quantum_manager'
op|'.'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|"r'port deallocation failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_port'
op|'('
string|"'interface_id'"
op|','
string|"'net_id'"
op|','
string|"'q_tenant_id'"
op|','
nl|'\n'
string|"'instance_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_ip_address
dedent|''
name|'def'
name|'test_deallocate_ip_address'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ipam'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'melange_ipam_lib'
op|'.'
name|'QuantumMelangeIPAMLib'
op|')'
newline|'\n'
name|'ipam'
op|'.'
name|'get_tenant_id_by_net_id'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'project_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
string|"'ipam_tenant_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'='
name|'ipam'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_ip_address'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'project_id'"
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
string|"'instance_id'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_deallocate_ip_address_2
dedent|''
name|'def'
name|'test_deallocate_ip_address_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ipam'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMock'
op|'('
name|'melange_ipam_lib'
op|'.'
name|'QuantumMelangeIPAMLib'
op|')'
newline|'\n'
name|'ipam'
op|'.'
name|'get_tenant_id_by_net_id'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
nl|'\n'
string|"'project_id'"
op|')'
op|'.'
name|'AndRaise'
op|'('
name|'Exception'
op|'('
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'='
name|'ipam'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'quantum_manager'
op|'.'
name|'LOG'
op|','
string|"'exception'"
op|')'
newline|'\n'
name|'quantum_manager'
op|'.'
name|'LOG'
op|'.'
name|'exception'
op|'('
name|'mox'
op|'.'
name|'Regex'
op|'('
string|"r'ipam deallocation failed'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_ip_address'
op|'('
string|"'context'"
op|','
string|"'net_id'"
op|','
string|"'project_id'"
op|','
nl|'\n'
op|'{'
string|"'uuid'"
op|':'
number|'1'
op|'}'
op|','
string|"'instance_id'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumManagerTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumManagerTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_create_and_delete_nets
indent|'    '
name|'def'
name|'test_create_and_delete_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_create_nets
dedent|''
name|'def'
name|'_create_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'n'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_delete_nets
dedent|''
dedent|''
name|'def'
name|'_delete_nets'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'n'
name|'in'
name|'networks'
op|':'
newline|'\n'
indent|'            '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'n'
op|'['
string|"'project_id'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'delete_network'
op|'('
name|'ctx'
op|','
name|'None'
op|','
name|'n'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NoNetworksFound'
op|','
nl|'\n'
name|'db'
op|'.'
name|'network_get_all'
op|','
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_nw_info
dedent|''
name|'def'
name|'_validate_nw_info'
op|'('
name|'self'
op|','
name|'nw_info'
op|','
name|'expected_net_labels'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'nw_info'
op|')'
op|','
name|'len'
op|'('
name|'expected_net_labels'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|"'foo'"
op|')'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'all_net_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctx'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'all_net_map'
op|'['
name|'n'
op|'['
string|"'label'"
op|']'
op|']'
op|'='
name|'n'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'nw_info'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'vif'
op|'='
name|'nw_info'
op|'['
name|'i'
op|']'
newline|'\n'
name|'net'
op|'='
name|'all_net_map'
op|'['
name|'expected_net_labels'
op|'['
name|'i'
op|']'
op|']'
newline|'\n'
nl|'\n'
comment|'# simple test assumes that each starting prefix is unique'
nl|'\n'
name|'expected_v4_cidr_start'
op|'='
name|'net'
op|'['
string|"'cidr'"
op|']'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'expected_v6_cidr_start'
op|'='
name|'net'
op|'['
string|"'cidr_v6'"
op|']'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'subnet'
name|'in'
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'subnets'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'addr'
op|'='
name|'subnet'
op|'['
string|"'ips'"
op|']'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
newline|'\n'
name|'if'
name|'subnet'
op|'['
string|"'version'"
op|']'
op|'=='
number|'4'
op|':'
newline|'\n'
indent|'                    '
name|'address_start'
op|'='
name|'addr'
op|'.'
name|'split'
op|'('
string|'"."'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'expected_v4_cidr_start'
op|','
name|'address_start'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'address_start'
op|'='
name|'addr'
op|'.'
name|'split'
op|'('
string|'":"'
op|')'
op|'['
number|'0'
op|']'
op|'.'
name|'lower'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'expected_v6_cidr_start'
op|','
name|'address_start'
op|')'
newline|'\n'
nl|'\n'
comment|'# confirm that there is a DHCP device on corresponding net'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'for'
name|'l'
name|'in'
name|'expected_net_labels'
op|':'
newline|'\n'
indent|'            '
name|'n'
op|'='
name|'all_net_map'
op|'['
name|'l'
op|']'
newline|'\n'
name|'tenant_id'
op|'='
op|'('
name|'n'
op|'['
string|"'project_id'"
op|']'
name|'or'
nl|'\n'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|')'
newline|'\n'
name|'ports'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_attached_ports'
op|'('
nl|'\n'
name|'tenant_id'
op|','
name|'n'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'ports'
op|')'
op|','
number|'2'
op|')'
comment|'# gw + instance VIF'
newline|'\n'
nl|'\n'
comment|"# make sure we aren't allowed to delete network with"
nl|'\n'
comment|'# active port'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkBusy'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'delete_network'
op|','
nl|'\n'
name|'ctx'
op|','
name|'None'
op|','
name|'n'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_check_vifs
dedent|''
dedent|''
name|'def'
name|'_check_vifs'
op|'('
name|'self'
op|','
name|'expect_num_vifs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|'""'
op|')'
op|'.'
name|'elevated'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'db'
op|'.'
name|'virtual_interface_get_all'
op|'('
name|'ctx'
op|')'
op|')'
op|','
nl|'\n'
name|'expect_num_vifs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_allocate_and_deallocate_instance
dedent|''
name|'def'
name|'_allocate_and_deallocate_instance'
op|'('
name|'self'
op|','
name|'project_id'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'expected_labels'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_check_vifs'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
nl|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_vifs'
op|'('
name|'len'
op|'('
name|'nw_info'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_validate_nw_info'
op|'('
name|'nw_info'
op|','
name|'expected_labels'
op|')'
newline|'\n'
nl|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'get_instance_nw_info'
op|'('
name|'ctx'
op|','
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'uuid'"
op|']'
op|','
nl|'\n'
name|'instance_ref'
op|'['
string|"'instance_type_id'"
op|']'
op|','
string|'""'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_check_vifs'
op|'('
name|'len'
op|'('
name|'nw_info'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_validate_nw_info'
op|'('
name|'nw_info'
op|','
name|'expected_labels'
op|')'
newline|'\n'
nl|'\n'
name|'port_net_pairs'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'vif'
name|'in'
name|'nw_info'
op|':'
newline|'\n'
indent|'            '
name|'nid'
op|'='
name|'vif'
op|'['
string|"'network'"
op|']'
op|'['
string|"'id'"
op|']'
newline|'\n'
name|'pid'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_port_by_attachment'
op|'('
nl|'\n'
name|'project_id'
op|','
name|'nid'
op|','
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
name|'if'
name|'pid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'                '
name|'pid'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'get_port_by_attachment'
op|'('
nl|'\n'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|','
nl|'\n'
name|'nid'
op|','
name|'vif'
op|'['
string|"'id'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'pid'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'port_net_pairs'
op|'.'
name|'append'
op|'('
op|'('
name|'pid'
op|','
name|'nid'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'deallocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'pid'
op|','
name|'nid'
name|'in'
name|'port_net_pairs'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumNotFoundException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'detach_and_delete_port'
op|','
nl|'\n'
name|'project_id'
op|','
name|'nid'
op|','
name|'pid'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'quantum_client'
op|'.'
name|'QuantumNotFoundException'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'detach_and_delete_port'
op|','
nl|'\n'
name|'FLAGS'
op|'.'
name|'quantum_default_tenant_id'
op|','
name|'nid'
op|','
name|'pid'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'_check_vifs'
op|'('
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_and_deallocate_instance_static
dedent|''
name|'def'
name|'test_allocate_and_deallocate_instance_static'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_allocate_and_deallocate_instance'
op|'('
string|'"fake_project1"'
op|','
name|'None'
op|','
nl|'\n'
op|'['
string|"'public'"
op|','
string|"'project1-net1'"
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_allocate_and_deallocate_instance_dynamic
dedent|''
name|'def'
name|'test_allocate_and_deallocate_instance_dynamic'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'_create_nets'
op|'('
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project2"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'all_valid_networks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'n'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
name|'for'
name|'n'
name|'in'
name|'all_valid_networks'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'validate_networks'
op|'('
name|'ctx'
op|','
name|'requested_networks'
op|')'
newline|'\n'
nl|'\n'
name|'label_map'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'for'
name|'n'
name|'in'
name|'db'
op|'.'
name|'network_get_all'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'label_map'
op|'['
name|'n'
op|'['
string|"'uuid'"
op|']'
op|']'
op|'='
name|'n'
op|'['
string|"'label'"
op|']'
newline|'\n'
dedent|''
name|'expected_labels'
op|'='
op|'['
name|'label_map'
op|'['
name|'uid'
op|']'
name|'for'
name|'uid'
op|','
name|'_i'
name|'in'
name|'requested_networks'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_allocate_and_deallocate_instance'
op|'('
name|'project_id'
op|','
name|'requested_networks'
op|','
nl|'\n'
name|'expected_labels'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_delete_nets'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_validate_bad_network
dedent|''
name|'def'
name|'test_validate_bad_network'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
string|"'fake_project1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NetworkNotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'validate_networks'
op|','
name|'ctx'
op|','
op|'['
op|'('
string|'""'
op|','
name|'None'
op|')'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_net_external_uuid
dedent|''
name|'def'
name|'test_create_net_external_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Tests use case where network can be created directly via\n           Quantum API, then the UUID is passed in via nova-manage"""'
newline|'\n'
name|'project_id'
op|'='
string|'"foo_project"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'net_id'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_network'
op|'('
name|'project_id'
op|','
string|"'net1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'ctx'
op|','
nl|'\n'
name|'label'
op|'='
string|"'achtungbaby'"
op|','
nl|'\n'
name|'cidr'
op|'='
string|'"9.9.9.0/24"'
op|','
nl|'\n'
name|'multi_host'
op|'='
name|'False'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'1'
op|','
nl|'\n'
name|'network_size'
op|'='
number|'256'
op|','
nl|'\n'
name|'cidr_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway'
op|'='
string|'"9.9.9.1"'
op|','
nl|'\n'
name|'gateway_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
nl|'\n'
name|'dns1'
op|'='
string|'"8.8.8.8"'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'priority'
op|'='
number|'9'
op|','
nl|'\n'
name|'uuid'
op|'='
name|'net_id'
op|')'
newline|'\n'
name|'net'
op|'='
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'net_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'net'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'net'
op|'['
string|"'uuid'"
op|']'
op|','
name|'net_id'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_net_external_uuid_and_host_is_set
dedent|''
name|'def'
name|'test_create_net_external_uuid_and_host_is_set'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Make sure network[\'host\'] is set when creating a network via the\n           network manager"""'
newline|'\n'
name|'project_id'
op|'='
string|'"foo_project"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'net_id'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_network'
op|'('
name|'project_id'
op|','
string|"'net2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'create_networks'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'label'
op|'='
string|"'achtungbaby2'"
op|','
name|'cidr'
op|'='
string|'"9.9.8.0/24"'
op|','
name|'multi_host'
op|'='
name|'False'
op|','
nl|'\n'
name|'num_networks'
op|'='
number|'1'
op|','
name|'network_size'
op|'='
number|'256'
op|','
name|'cidr_v6'
op|'='
name|'None'
op|','
nl|'\n'
name|'gateway'
op|'='
string|'"9.9.8.1"'
op|','
name|'gateway_v6'
op|'='
name|'None'
op|','
name|'bridge'
op|'='
name|'None'
op|','
nl|'\n'
name|'bridge_interface'
op|'='
name|'None'
op|','
name|'dns1'
op|'='
string|'"8.8.8.8"'
op|','
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'priority'
op|'='
number|'8'
op|','
name|'uuid'
op|'='
name|'net_id'
op|')'
newline|'\n'
name|'net'
op|'='
name|'db'
op|'.'
name|'network_get_by_uuid'
op|'('
name|'ctx'
op|'.'
name|'elevated'
op|'('
op|')'
op|','
name|'net_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'net'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'net'
op|'['
string|"'uuid'"
op|']'
op|','
name|'net_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'net'
op|'['
string|"'host'"
op|']'
op|'!='
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumNovaMACGenerationTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaMACGenerationTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_local_mac_address_creation
indent|'    '
name|'def'
name|'test_local_mac_address_creation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'False'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'utils'
op|','
string|'"generate_mac_address"'
op|','
nl|'\n'
name|'lambda'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'all_valid_networks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'n'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
name|'for'
name|'n'
name|'in'
name|'all_valid_networks'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_melange_mac_address_creation
dedent|''
name|'def'
name|'test_melange_mac_address_creation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'all_valid_networks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'n'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
name|'for'
name|'n'
name|'in'
name|'all_valid_networks'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumNovaPortSecurityTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumNovaPortSecurityTestCase'
op|'('
name|'QuantumNovaTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_port_security
indent|'    '
name|'def'
name|'test_port_security'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_use_port_security'
op|'='
name|'True'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'all_valid_networks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'n'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
name|'for'
name|'n'
name|'in'
name|'all_valid_networks'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'oldfunc'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
newline|'\n'
nl|'\n'
comment|'# Make sure we get the appropriate mac set in allowed_address_pairs'
nl|'\n'
comment|'# if port security is enabled.'
nl|'\n'
DECL|function|_instrumented_create_and_attach_port
name|'def'
name|'_instrumented_create_and_attach_port'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
nl|'\n'
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'allowed_address_pairs'"
name|'in'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'pairs'
op|'='
name|'kwargs'
op|'['
string|"'allowed_address_pairs'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'pairs'
op|'['
number|'0'
op|']'
op|'['
string|"'mac_address'"
op|']'
op|'=='
name|'fake_mac'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'oldfunc'
newline|'\n'
name|'return'
name|'oldfunc'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'_port_attach'
op|'='
name|'_instrumented_create_and_attach_port'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'_port_attach'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_port_security_negative
dedent|''
name|'def'
name|'test_port_security_negative'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'flags'
op|'('
name|'use_melange_mac_generation'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'quantum_use_port_security'
op|'='
name|'False'
op|')'
newline|'\n'
name|'fake_mac'
op|'='
string|'"ab:cd:ef:ab:cd:ef"'
newline|'\n'
name|'self'
op|'.'
name|'stubs'
op|'.'
name|'Set'
op|'('
name|'melange_connection'
op|'.'
name|'MelangeConnection'
op|','
string|'"create_vif"'
op|','
nl|'\n'
name|'lambda'
name|'w'
op|','
name|'x'
op|','
name|'y'
op|','
name|'z'
op|':'
name|'fake_mac'
op|')'
newline|'\n'
name|'project_id'
op|'='
string|'"fake_project1"'
newline|'\n'
name|'ctx'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user1'"
op|','
name|'project_id'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_create_network'
op|'('
name|'networks'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'all_valid_networks'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_project_and_global_net_ids'
op|'('
nl|'\n'
name|'ctx'
op|','
name|'project_id'
op|')'
newline|'\n'
name|'requested_networks'
op|'='
op|'['
op|'('
name|'n'
op|'['
number|'0'
op|']'
op|','
name|'None'
op|')'
name|'for'
name|'n'
name|'in'
name|'all_valid_networks'
op|']'
newline|'\n'
nl|'\n'
name|'instance_ref'
op|'='
name|'db'
op|'.'
name|'api'
op|'.'
name|'instance_create'
op|'('
name|'ctx'
op|','
nl|'\n'
op|'{'
string|'"project_id"'
op|':'
name|'project_id'
op|'}'
op|')'
newline|'\n'
name|'oldfunc'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
newline|'\n'
nl|'\n'
comment|'# Make sure no pairs are passed in if port security is turned off'
nl|'\n'
DECL|function|_instrumented_create_and_attach_port
name|'def'
name|'_instrumented_create_and_attach_port'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
nl|'\n'
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertTrue'
op|'('
string|"'allowed_address_pairs'"
name|'in'
name|'kwargs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'pairs'
op|'='
name|'kwargs'
op|'['
string|"'allowed_address_pairs'"
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'len'
op|'('
name|'pairs'
op|')'
op|'=='
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'oldfunc'
newline|'\n'
name|'return'
name|'oldfunc'
op|'('
name|'tenant_id'
op|','
name|'net_id'
op|','
name|'interface_id'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
dedent|''
name|'_port_attach'
op|'='
name|'_instrumented_create_and_attach_port'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'q_conn'
op|'.'
name|'create_and_attach_port'
op|'='
name|'_port_attach'
newline|'\n'
name|'nw_info'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'allocate_for_instance'
op|'('
name|'ctx'
op|','
nl|'\n'
name|'instance_id'
op|'='
name|'instance_ref'
op|'['
string|"'id'"
op|']'
op|','
name|'host'
op|'='
string|'""'
op|','
nl|'\n'
name|'rxtx_factor'
op|'='
number|'3'
op|','
nl|'\n'
name|'project_id'
op|'='
name|'project_id'
op|','
nl|'\n'
name|'requested_networks'
op|'='
name|'requested_networks'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nw_info'
op|'['
number|'0'
op|']'
op|'['
string|"'address'"
op|']'
op|','
name|'fake_mac'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|QuantumMelangeTestCase
dedent|''
dedent|''
name|'class'
name|'QuantumMelangeTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'QuantumMelangeTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'fc'
op|'='
name|'fake_client'
op|'.'
name|'FakeClient'
op|'('
name|'LOG'
op|')'
newline|'\n'
name|'qc'
op|'='
name|'quantum_connection'
op|'.'
name|'QuantumClientConnection'
op|'('
name|'client'
op|'='
name|'fc'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'='
name|'quantum_manager'
op|'.'
name|'QuantumManager'
op|'('
nl|'\n'
name|'ipam_lib'
op|'='
string|'"nova.network.quantum.nova_ipam_lib"'
op|','
nl|'\n'
name|'q_conn'
op|'='
name|'qc'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_instance_uuids_by_ip_filter
dedent|''
name|'def'
name|'test_get_instance_uuids_by_ip_filter'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fake_context'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'user'"
op|','
string|"'project'"
op|')'
newline|'\n'
name|'address'
op|'='
string|"'1.2.3.4'"
newline|'\n'
name|'filters'
op|'='
op|'{'
string|"'ip'"
op|':'
name|'address'
op|'}'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'ipam'
op|'.'
name|'get_instance_ids_by_ip_address'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'address'
op|')'
op|'.'
name|'AndReturn'
op|'('
op|'['
string|"'instance_id'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'instance'
op|'='
name|'self'
op|'.'
name|'mox'
op|'.'
name|'CreateMockAnything'
op|'('
op|')'
newline|'\n'
name|'instance'
op|'.'
name|'uuid'
op|'='
string|"'instance_uuid'"
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'db'
op|','
string|"'instance_get'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get'
op|'('
name|'fake_context'
op|','
string|"'instance_id'"
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'instance'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'uuids'
op|'='
name|'self'
op|'.'
name|'net_man'
op|'.'
name|'get_instance_uuids_by_ip_filter'
op|'('
name|'fake_context'
op|','
nl|'\n'
name|'filters'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'uuids'
op|','
op|'['
op|'{'
string|"'instance_uuid'"
op|':'
string|"'instance_uuid'"
op|'}'
op|']'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

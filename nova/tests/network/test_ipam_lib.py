begin_unit
comment|'# Copyright 2013 IBM Corp.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'contextlib'
newline|'\n'
nl|'\n'
name|'import'
name|'mock'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'network'
name|'import'
name|'nova_ipam_lib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|fake_vif
name|'fake_vif'
op|'='
op|'{'
nl|'\n'
string|"'created_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'updated_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted_at'"
op|':'
name|'None'
op|','
nl|'\n'
string|"'deleted'"
op|':'
number|'0'
op|','
nl|'\n'
string|"'id'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'address'"
op|':'
string|"'00:00:00:00:00:00'"
op|','
nl|'\n'
string|"'network_id'"
op|':'
number|'123'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
string|"'fake-uuid'"
op|','
nl|'\n'
string|"'uuid'"
op|':'
string|"'fake-uuid-2'"
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NeutronNovaIPAMTestCase
name|'class'
name|'NeutronNovaIPAMTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_get_v4_ips_by_interface
indent|'    '
name|'def'
name|'test_get_v4_ips_by_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'virtual_interface_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_vif'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'fixed_ips_by_virtual_interface'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'['
op|'{'
string|"'address'"
op|':'
string|"'192.168.1.101'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'address'"
op|':'
string|"'192.168.1.102'"
op|'}'
op|']'
op|')'
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ipam_lib'
op|'='
name|'nova_ipam_lib'
op|'.'
name|'NeutronNovaIPAMLib'
op|'('
name|'None'
op|')'
newline|'\n'
name|'v4_IPs'
op|'='
name|'ipam_lib'
op|'.'
name|'get_v4_ips_by_interface'
op|'('
name|'None'
op|','
nl|'\n'
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'192.168.1.101'"
op|','
string|"'192.168.1.102'"
op|']'
op|','
name|'v4_IPs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_v4_ips_by_interface_bad_id
dedent|''
dedent|''
name|'def'
name|'test_get_v4_ips_by_interface_bad_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'virtual_interface_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'None'
op|')'
op|','
nl|'\n'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'ipam_lib'
op|'='
name|'nova_ipam_lib'
op|'.'
name|'NeutronNovaIPAMLib'
op|'('
name|'None'
op|')'
newline|'\n'
name|'v4_IPs'
op|'='
name|'ipam_lib'
op|'.'
name|'get_v4_ips_by_interface'
op|'('
name|'None'
op|','
nl|'\n'
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'v4_IPs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_v6_ips_by_interface
dedent|''
dedent|''
name|'def'
name|'test_get_v6_ips_by_interface'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|FakeContext
indent|'        '
name|'class'
name|'FakeContext'
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|')'
op|':'
newline|'\n'
DECL|member|elevated
indent|'            '
name|'def'
name|'elevated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
string|"'cidr_v6'"
op|':'
string|"'2001:db8::'"
op|'}'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'virtual_interface_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'fake_vif'
op|')'
nl|'\n'
op|')'
op|':'
newline|'\n'
DECL|variable|ipam_lib
indent|'            '
name|'ipam_lib'
op|'='
name|'nova_ipam_lib'
op|'.'
name|'NeutronNovaIPAMLib'
op|'('
name|'None'
op|')'
newline|'\n'
DECL|variable|ctx
name|'ctx'
op|'='
name|'FakeContext'
op|'('
string|"'user_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
DECL|variable|v6_IPs
name|'v6_IPs'
op|'='
name|'ipam_lib'
op|'.'
name|'get_v6_ips_by_interface'
op|'('
name|'ctx'
op|','
nl|'\n'
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'2001:db8::200:ff:fe00:0'"
op|']'
op|','
name|'v6_IPs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_v6_ips_by_interface_bad_id
dedent|''
dedent|''
name|'def'
name|'test_get_v6_ips_by_interface_bad_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|class|FakeContext
indent|'        '
name|'class'
name|'FakeContext'
op|'('
name|'context'
op|'.'
name|'RequestContext'
op|')'
op|':'
newline|'\n'
DECL|member|elevated
indent|'            '
name|'def'
name|'elevated'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'with'
name|'contextlib'
op|'.'
name|'nested'
op|'('
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'network_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
op|'{'
string|"'cidr_v6'"
op|':'
string|"'2001:db8::'"
op|'}'
op|')'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'patch'
op|'.'
name|'object'
op|'('
name|'db'
op|','
string|"'virtual_interface_get_by_uuid'"
op|','
nl|'\n'
name|'return_value'
op|'='
name|'None'
op|')'
nl|'\n'
op|')'
op|':'
newline|'\n'
DECL|variable|ipam_lib
indent|'            '
name|'ipam_lib'
op|'='
name|'nova_ipam_lib'
op|'.'
name|'NeutronNovaIPAMLib'
op|'('
name|'None'
op|')'
newline|'\n'
DECL|variable|ctx
name|'ctx'
op|'='
name|'FakeContext'
op|'('
string|"'user_id'"
op|','
string|"'project_id'"
op|')'
newline|'\n'
DECL|variable|v6_IPs
name|'v6_IPs'
op|'='
name|'ipam_lib'
op|'.'
name|'get_v6_ips_by_interface'
op|'('
name|'ctx'
op|','
nl|'\n'
string|"'net_id'"
op|','
nl|'\n'
string|"'vif_id'"
op|','
nl|'\n'
string|"'project_id'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'v6_IPs'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

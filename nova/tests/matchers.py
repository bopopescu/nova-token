begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2012 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""Matcher classes to be used inside of the testtools assertThat framework."""'
newline|'\n'
nl|'\n'
name|'import'
name|'pprint'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictKeysMismatch
name|'class'
name|'DictKeysMismatch'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'d1only'
op|','
name|'d2only'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d1only'
op|'='
name|'d1only'
newline|'\n'
name|'self'
op|'.'
name|'d2only'
op|'='
name|'d2only'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'Keys in d1 and not d2: %(d1only)s.'"
nl|'\n'
string|"' Keys in d2 and not d1: %(d2only)s'"
op|'%'
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_details
dedent|''
name|'def'
name|'get_details'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictMismatch
dedent|''
dedent|''
name|'class'
name|'DictMismatch'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'d1_value'
op|','
name|'d2_value'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'d1_value'
op|'='
name|'d1_value'
newline|'\n'
name|'self'
op|'.'
name|'d2_value'
op|'='
name|'d2_value'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|'"Dictionaries do not match at %(key)s."'
nl|'\n'
string|'" d1: %(d1_value)s d2: %(d2_value)s"'
op|'%'
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_details
dedent|''
name|'def'
name|'get_details'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictMatches
dedent|''
dedent|''
name|'class'
name|'DictMatches'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'d1'
op|','
name|'approx_equal'
op|'='
name|'False'
op|','
name|'tolerance'
op|'='
number|'0.001'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'d1'
op|'='
name|'d1'
newline|'\n'
name|'self'
op|'.'
name|'approx_equal'
op|'='
name|'approx_equal'
newline|'\n'
name|'self'
op|'.'
name|'tolerance'
op|'='
name|'tolerance'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'DictMatches(%s)'"
op|'%'
op|'('
name|'pprint'
op|'.'
name|'pformat'
op|'('
name|'self'
op|'.'
name|'d1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Useful assertions'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'d2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert two dicts are equivalent.\n\n        This is a \'deep\' match in the sense that it handles nested\n        dictionaries appropriately.\n\n        NOTE:\n\n            If you don\'t care (or don\'t know) a given value, you can specify\n            the string DONTCARE as the value. This will cause that dict-item\n            to be skipped.\n\n        """'
newline|'\n'
nl|'\n'
name|'d1keys'
op|'='
name|'set'
op|'('
name|'self'
op|'.'
name|'d1'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'d2keys'
op|'='
name|'set'
op|'('
name|'d2'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
name|'if'
name|'d1keys'
op|'!='
name|'d2keys'
op|':'
newline|'\n'
indent|'            '
name|'d1only'
op|'='
name|'d1keys'
op|'-'
name|'d2keys'
newline|'\n'
name|'d2only'
op|'='
name|'d2keys'
op|'-'
name|'d1keys'
newline|'\n'
name|'return'
name|'DictKeysMismatch'
op|'('
name|'d1only'
op|','
name|'d2only'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'key'
name|'in'
name|'d1keys'
op|':'
newline|'\n'
indent|'            '
name|'d1value'
op|'='
name|'self'
op|'.'
name|'d1'
op|'['
name|'key'
op|']'
newline|'\n'
name|'d2value'
op|'='
name|'d2'
op|'['
name|'key'
op|']'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'error'
op|'='
name|'abs'
op|'('
name|'float'
op|'('
name|'d1value'
op|')'
op|'-'
name|'float'
op|'('
name|'d2value'
op|')'
op|')'
newline|'\n'
name|'within_tolerance'
op|'='
name|'error'
op|'<='
name|'self'
op|'.'
name|'tolerance'
newline|'\n'
dedent|''
name|'except'
op|'('
name|'ValueError'
op|','
name|'TypeError'
op|')'
op|':'
newline|'\n'
comment|"# If both values aren't convertible to float, just ignore"
nl|'\n'
comment|"# ValueError if arg is a str, TypeError if it's something else"
nl|'\n'
comment|'# (like None)'
nl|'\n'
indent|'                '
name|'within_tolerance'
op|'='
name|'False'
newline|'\n'
nl|'\n'
dedent|''
name|'if'
name|'hasattr'
op|'('
name|'d1value'
op|','
string|"'keys'"
op|')'
name|'and'
name|'hasattr'
op|'('
name|'d2value'
op|','
string|"'keys'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'matcher'
op|'='
name|'DictMatches'
op|'('
name|'d1value'
op|')'
newline|'\n'
name|'did_match'
op|'='
name|'matcher'
op|'.'
name|'match'
op|'('
name|'d2value'
op|')'
newline|'\n'
name|'if'
name|'did_match'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'did_match'
newline|'\n'
dedent|''
dedent|''
name|'elif'
string|"'DONTCARE'"
name|'in'
op|'('
name|'d1value'
op|','
name|'d2value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'approx_equal'
name|'and'
name|'within_tolerance'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'elif'
name|'d1value'
op|'!='
name|'d2value'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'DictMismatch'
op|'('
name|'key'
op|','
name|'d1value'
op|','
name|'d2value'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ListLengthMismatch
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'ListLengthMismatch'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'len1'
op|','
name|'len2'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'len1'
op|'='
name|'len1'
newline|'\n'
name|'self'
op|'.'
name|'len2'
op|'='
name|'len2'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'('
string|"'Length mismatch: len(L1)=%(len1)d != '"
nl|'\n'
string|"'len(L2)=%(len2)d'"
op|'%'
name|'self'
op|'.'
name|'__dict__'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_details
dedent|''
name|'def'
name|'get_details'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DictListMatches
dedent|''
dedent|''
name|'class'
name|'DictListMatches'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'l1'
op|','
name|'approx_equal'
op|'='
name|'False'
op|','
name|'tolerance'
op|'='
number|'0.001'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'l1'
op|'='
name|'l1'
newline|'\n'
name|'self'
op|'.'
name|'approx_equal'
op|'='
name|'approx_equal'
newline|'\n'
name|'self'
op|'.'
name|'tolerance'
op|'='
name|'tolerance'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'DictListMatches(%s)'"
op|'%'
op|'('
name|'pprint'
op|'.'
name|'pformat'
op|'('
name|'self'
op|'.'
name|'l1'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Useful assertions'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'l2'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert a list of dicts are equivalent."""'
newline|'\n'
nl|'\n'
name|'l1count'
op|'='
name|'len'
op|'('
name|'self'
op|'.'
name|'l1'
op|')'
newline|'\n'
name|'l2count'
op|'='
name|'len'
op|'('
name|'l2'
op|')'
newline|'\n'
name|'if'
name|'l1count'
op|'!='
name|'l2count'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'ListLengthMismatch'
op|'('
name|'l1count'
op|','
name|'l2count'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'d1'
op|','
name|'d2'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'l1'
op|','
name|'l2'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'matcher'
op|'='
name|'DictMatches'
op|'('
name|'d2'
op|','
nl|'\n'
name|'approx_equal'
op|'='
name|'self'
op|'.'
name|'approx_equal'
op|','
nl|'\n'
name|'tolerance'
op|'='
name|'self'
op|'.'
name|'tolerance'
op|')'
newline|'\n'
name|'did_match'
op|'='
name|'matcher'
op|'.'
name|'match'
op|'('
name|'d1'
op|')'
newline|'\n'
name|'if'
name|'did_match'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'did_match'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SubDictMismatch
dedent|''
dedent|''
dedent|''
dedent|''
name|'class'
name|'SubDictMismatch'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
nl|'\n'
name|'key'
op|'='
name|'None'
op|','
nl|'\n'
name|'sub_value'
op|'='
name|'None'
op|','
nl|'\n'
name|'super_value'
op|'='
name|'None'
op|','
nl|'\n'
name|'keys'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'key'
op|'='
name|'key'
newline|'\n'
name|'self'
op|'.'
name|'sub_value'
op|'='
name|'sub_value'
newline|'\n'
name|'self'
op|'.'
name|'super_value'
op|'='
name|'super_value'
newline|'\n'
name|'self'
op|'.'
name|'keys'
op|'='
name|'keys'
newline|'\n'
nl|'\n'
DECL|member|describe
dedent|''
name|'def'
name|'describe'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'keys'
op|':'
newline|'\n'
indent|'            '
name|'return'
string|'"Keys between dictionaries did not match"'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'return'
op|'('
string|'"Dictionaries do not match at %s. d1: %s d2: %s"'
nl|'\n'
op|'%'
op|'('
name|'self'
op|'.'
name|'key'
op|','
nl|'\n'
name|'self'
op|'.'
name|'super_value'
op|','
nl|'\n'
name|'self'
op|'.'
name|'sub_value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|get_details
dedent|''
dedent|''
name|'def'
name|'get_details'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'{'
op|'}'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|IsSubDictOf
dedent|''
dedent|''
name|'class'
name|'IsSubDictOf'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'super_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'super_dict'
op|'='
name|'super_dict'
newline|'\n'
nl|'\n'
DECL|member|__str__
dedent|''
name|'def'
name|'__str__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'IsSubDictOf(%s)'"
op|'%'
op|'('
name|'self'
op|'.'
name|'super_dict'
op|')'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'sub_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Assert a sub_dict is subset of super_dict."""'
newline|'\n'
name|'if'
name|'not'
name|'set'
op|'('
name|'sub_dict'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|'.'
name|'issubset'
op|'('
name|'set'
op|'('
name|'self'
op|'.'
name|'super_dict'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'SubDictMismatch'
op|'('
name|'keys'
op|'='
name|'True'
op|')'
newline|'\n'
dedent|''
name|'for'
name|'k'
op|','
name|'sub_value'
name|'in'
name|'sub_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'super_value'
op|'='
name|'self'
op|'.'
name|'super_dict'
op|'['
name|'k'
op|']'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'sub_value'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'matcher'
op|'='
name|'IsSubDictOf'
op|'('
name|'super_value'
op|')'
newline|'\n'
name|'did_match'
op|'='
name|'matcher'
op|'.'
name|'match'
op|'('
name|'sub_value'
op|')'
newline|'\n'
name|'if'
name|'did_match'
name|'is'
name|'not'
name|'None'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'did_match'
newline|'\n'
dedent|''
dedent|''
name|'elif'
string|"'DONTCARE'"
name|'in'
op|'('
name|'sub_value'
op|','
name|'super_value'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'continue'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'sub_value'
op|'!='
name|'super_value'
op|':'
newline|'\n'
indent|'                    '
name|'return'
name|'SubDictMismatch'
op|'('
name|'k'
op|','
name|'sub_value'
op|','
name|'super_value'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2014 Hewlett-Packard Development Company, L.P.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'# not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'# a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#      http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'# License for the specific language governing permissions and limitations'
nl|'\n'
comment|'# under the License.'
nl|'\n'
nl|'\n'
string|'"""Unit tests for the API Request internals."""'
newline|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'apirequest'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|APIRequestTestCase
name|'class'
name|'APIRequestTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|setUp
indent|'    '
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'APIRequestTestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'req'
op|'='
name|'apirequest'
op|'.'
name|'APIRequest'
op|'('
string|'"FakeController"'
op|','
string|'"FakeAction"'
op|','
nl|'\n'
string|'"FakeVersion"'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'resp'
op|'='
op|'{'
nl|'\n'
string|"'string'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'int'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'long'"
op|':'
name|'long'
op|'('
number|'1'
op|')'
op|','
nl|'\n'
string|"'bool'"
op|':'
name|'False'
op|','
nl|'\n'
string|"'dict'"
op|':'
op|'{'
nl|'\n'
string|"'string'"
op|':'
string|"'foo'"
op|','
nl|'\n'
string|"'int'"
op|':'
number|'1'
op|','
nl|'\n'
op|'}'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# The previous will produce an output that looks like the'
nl|'\n'
comment|'# following (excusing line wrap for 80 cols):'
nl|'\n'
comment|'#'
nl|'\n'
comment|'# <FakeActionResponse xmlns="http://ec2.amazonaws.com/doc/\\'
nl|'\n'
comment|'#          FakeVersion/">'
nl|'\n'
comment|'#   <requestId>uuid</requestId>'
nl|'\n'
comment|'#   <int>1</int>'
nl|'\n'
comment|'#   <dict>'
nl|'\n'
comment|'#     <int>1</int>'
nl|'\n'
comment|'#     <string>foo</string>'
nl|'\n'
comment|'#   </dict>'
nl|'\n'
comment|'#   <bool>false</bool>'
nl|'\n'
comment|'#   <string>foo</string>'
nl|'\n'
comment|'# </FakeActionResponse>'
nl|'\n'
comment|'#'
nl|'\n'
comment|"# We don't attempt to ever test for the full document because"
nl|'\n'
comment|"# hash seed order might impact it's rendering order. The fact"
nl|'\n'
comment|"# that running the function doesn't explode is a big part of"
nl|'\n'
comment|'# the win.'
nl|'\n'
nl|'\n'
DECL|member|test_render_response_ascii
dedent|''
name|'def'
name|'test_render_response_ascii'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'data'
op|'='
name|'self'
op|'.'
name|'req'
op|'.'
name|'_render_response'
op|'('
name|'self'
op|'.'
name|'resp'
op|','
string|"'uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|'\'<FakeActionResponse xmlns="http://ec2.amazonaws.com/\''
nl|'\n'
string|"'doc/FakeVersion/'"
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'<int>1</int>'"
op|','
name|'data'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'<string>foo</string>'"
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_render_response_utf8
dedent|''
name|'def'
name|'test_render_response_utf8'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'resp'
op|'='
name|'copy'
op|'.'
name|'deepcopy'
op|'('
name|'self'
op|'.'
name|'resp'
op|')'
newline|'\n'
name|'resp'
op|'['
string|"'utf8'"
op|']'
op|'='
name|'unichr'
op|'('
number|'40960'
op|')'
op|'+'
string|"u'abcd'"
op|'+'
name|'unichr'
op|'('
number|'1972'
op|')'
newline|'\n'
name|'data'
op|'='
name|'self'
op|'.'
name|'req'
op|'.'
name|'_render_response'
op|'('
name|'resp'
op|','
string|"'uuid'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'<utf8>&#40960;abcd&#1972;</utf8>'"
op|','
name|'data'
op|')'
newline|'\n'
nl|'\n'
comment|'# Tests for individual data element format functions'
nl|'\n'
nl|'\n'
DECL|member|test_return_valid_isoformat
dedent|''
name|'def'
name|'test_return_valid_isoformat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Ensure that the ec2 api returns datetime in xs:dateTime\n           (which apparently isn\'t datetime.isoformat())\n           NOTE(ken-pepple): https://bugs.launchpad.net/nova/+bug/721297\n        """'
newline|'\n'
name|'conv'
op|'='
name|'apirequest'
op|'.'
name|'_database_to_isoformat'
newline|'\n'
comment|'# sqlite database representation with microseconds'
nl|'\n'
name|'time_to_convert'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
string|'"2011-02-21 20:14:10.634276"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M:%S.%f"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
name|'time_to_convert'
op|')'
op|','
string|"'2011-02-21T20:14:10.634Z'"
op|')'
newline|'\n'
comment|'# mysqlite database representation'
nl|'\n'
name|'time_to_convert'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
string|'"2011-02-21 19:56:18"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M:%S"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
name|'time_to_convert'
op|')'
op|','
string|"'2011-02-21T19:56:18.000Z'"
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

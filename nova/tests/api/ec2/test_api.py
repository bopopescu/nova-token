begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Unit tests for the API endpoint."""'
newline|'\n'
nl|'\n'
name|'import'
name|'pkg_resources'
newline|'\n'
name|'import'
name|'random'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'StringIO'
newline|'\n'
nl|'\n'
name|'import'
name|'boto'
newline|'\n'
name|'import'
name|'boto'
op|'.'
name|'connection'
newline|'\n'
name|'from'
name|'boto'
op|'.'
name|'ec2'
name|'import'
name|'regioninfo'
newline|'\n'
name|'from'
name|'boto'
name|'import'
name|'exception'
name|'as'
name|'boto_exc'
newline|'\n'
comment|'# newer versions of boto use their own wrapper on top of httplib.HTTPResponse'
nl|'\n'
name|'if'
name|'hasattr'
op|'('
name|'boto'
op|'.'
name|'connection'
op|','
string|"'HTTPResponse'"
op|')'
op|':'
newline|'\n'
DECL|variable|httplib
indent|'    '
name|'httplib'
op|'='
name|'boto'
op|'.'
name|'connection'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'    '
name|'import'
name|'httplib'
newline|'\n'
dedent|''
name|'import'
name|'fixtures'
newline|'\n'
name|'import'
name|'webob'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
name|'import'
name|'auth'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
name|'import'
name|'ec2'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'apirequest'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'ec2utils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'block_device'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'timeutils'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'matchers'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeHttplibSocket
name|'class'
name|'FakeHttplibSocket'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""a fake socket implementation for httplib.HTTPResponse, trivial."""'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'response_string'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'response_string'
op|'='
name|'response_string'
newline|'\n'
name|'self'
op|'.'
name|'_buffer'
op|'='
name|'StringIO'
op|'.'
name|'StringIO'
op|'('
name|'response_string'
op|')'
newline|'\n'
nl|'\n'
DECL|member|makefile
dedent|''
name|'def'
name|'makefile'
op|'('
name|'self'
op|','
name|'_mode'
op|','
name|'_other'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns the socket\'s internal buffer."""'
newline|'\n'
name|'return'
name|'self'
op|'.'
name|'_buffer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|FakeHttplibConnection
dedent|''
dedent|''
name|'class'
name|'FakeHttplibConnection'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""A fake httplib.HTTPConnection for boto to use\n\n    requests made via this connection actually get translated and routed into\n    our WSGI app, we then wait for the response and turn it back into\n    the HTTPResponse that boto expects.\n    """'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'app'
op|','
name|'host'
op|','
name|'is_secure'
op|'='
name|'False'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'app'
op|'='
name|'app'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
name|'host'
newline|'\n'
nl|'\n'
DECL|member|request
dedent|''
name|'def'
name|'request'
op|'('
name|'self'
op|','
name|'method'
op|','
name|'path'
op|','
name|'data'
op|','
name|'headers'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
name|'path'
op|')'
newline|'\n'
name|'req'
op|'.'
name|'method'
op|'='
name|'method'
newline|'\n'
name|'req'
op|'.'
name|'body'
op|'='
name|'data'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'='
name|'headers'
newline|'\n'
name|'req'
op|'.'
name|'headers'
op|'['
string|"'Accept'"
op|']'
op|'='
string|"'text/html'"
newline|'\n'
name|'req'
op|'.'
name|'host'
op|'='
name|'self'
op|'.'
name|'host'
newline|'\n'
comment|'# Call the WSGI app, get the HTTP response'
nl|'\n'
name|'resp'
op|'='
name|'str'
op|'('
name|'req'
op|'.'
name|'get_response'
op|'('
name|'self'
op|'.'
name|'app'
op|')'
op|')'
newline|'\n'
comment|'# For some reason, the response doesn\'t have "HTTP/1.0 " prepended; I'
nl|'\n'
comment|"# guess that's a function the web server usually provides."
nl|'\n'
name|'resp'
op|'='
string|'"HTTP/1.0 %s"'
op|'%'
name|'resp'
newline|'\n'
name|'self'
op|'.'
name|'sock'
op|'='
name|'FakeHttplibSocket'
op|'('
name|'resp'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'http_response'
op|'='
name|'httplib'
op|'.'
name|'HTTPResponse'
op|'('
name|'self'
op|'.'
name|'sock'
op|')'
newline|'\n'
comment|'# NOTE(vish): boto is accessing private variables for some reason'
nl|'\n'
name|'self'
op|'.'
name|'_HTTPConnection__response'
op|'='
name|'self'
op|'.'
name|'http_response'
newline|'\n'
name|'self'
op|'.'
name|'http_response'
op|'.'
name|'begin'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|getresponse
dedent|''
name|'def'
name|'getresponse'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'http_response'
newline|'\n'
nl|'\n'
DECL|member|getresponsebody
dedent|''
name|'def'
name|'getresponsebody'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'self'
op|'.'
name|'sock'
op|'.'
name|'response_string'
newline|'\n'
nl|'\n'
DECL|member|close
dedent|''
name|'def'
name|'close'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Required for compatibility with boto/tornado."""'
newline|'\n'
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|XmlConversionTestCase
dedent|''
dedent|''
name|'class'
name|'XmlConversionTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test api xml conversion."""'
newline|'\n'
DECL|member|test_number_conversion
name|'def'
name|'test_number_conversion'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'conv'
op|'='
name|'ec2utils'
op|'.'
name|'_try_convert'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'conv'
op|'('
string|"'None'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'True'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'TRUE'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'true'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'False'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'FALSE'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'false'"
op|')'
op|','
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'0'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'42'"
op|')'
op|','
number|'42'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'3.14'"
op|')'
op|','
number|'3.14'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-57.12'"
op|')'
op|','
op|'-'
number|'57.12'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'0x57'"
op|')'
op|','
number|'0x57'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-0x57'"
op|')'
op|','
op|'-'
number|'0x57'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-'"
op|')'
op|','
string|"'-'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-0'"
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'0.0'"
op|')'
op|','
number|'0.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'1e-8'"
op|')'
op|','
number|'0.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-1e-8'"
op|')'
op|','
number|'0.0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'0xDD8G'"
op|')'
op|','
string|"'0xDD8G'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'0XDD8G'"
op|')'
op|','
string|"'0XDD8G'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'-stringy'"
op|')'
op|','
string|"'-stringy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'stringy'"
op|')'
op|','
string|"'stringy'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'add'"
op|')'
op|','
string|"'add'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"'remove'"
op|')'
op|','
string|"'remove'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
string|"''"
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|Ec2utilsTestCase
dedent|''
dedent|''
name|'class'
name|'Ec2utilsTestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_ec2_id_to_id
indent|'    '
name|'def'
name|'test_ec2_id_to_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
string|"'i-0000001e'"
op|')'
op|','
number|'30'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
string|"'ami-1d'"
op|')'
op|','
number|'29'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
string|"'snap-0000001c'"
op|')'
op|','
number|'28'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|'('
string|"'vol-0000001b'"
op|')'
op|','
number|'27'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_bad_ec2_id
dedent|''
name|'def'
name|'test_bad_ec2_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'InvalidEc2Id'
op|','
nl|'\n'
name|'ec2utils'
op|'.'
name|'ec2_id_to_id'
op|','
nl|'\n'
string|"'badone'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_id_to_ec2_id
dedent|''
name|'def'
name|'test_id_to_ec2_id'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'id_to_ec2_id'
op|'('
number|'30'
op|')'
op|','
string|"'i-0000001e'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'id_to_ec2_id'
op|'('
number|'29'
op|','
string|"'ami-%08x'"
op|')'
op|','
string|"'ami-0000001d'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'id_to_ec2_snap_id'
op|'('
number|'28'
op|')'
op|','
string|"'snap-0000001c'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'ec2utils'
op|'.'
name|'id_to_ec2_vol_id'
op|'('
number|'27'
op|')'
op|','
string|"'vol-0000001b'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_from_dotted_str
dedent|''
name|'def'
name|'test_dict_from_dotted_str'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'in_str'
op|'='
op|'['
op|'('
string|"'BlockDeviceMapping.1.DeviceName'"
op|','
string|"'/dev/sda1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'BlockDeviceMapping.1.Ebs.SnapshotId'"
op|','
string|"'snap-0000001c'"
op|')'
op|','
nl|'\n'
op|'('
string|"'BlockDeviceMapping.1.Ebs.VolumeSize'"
op|','
string|"'80'"
op|')'
op|','
nl|'\n'
op|'('
string|"'BlockDeviceMapping.1.Ebs.DeleteOnTermination'"
op|','
string|"'false'"
op|')'
op|','
nl|'\n'
op|'('
string|"'BlockDeviceMapping.2.DeviceName'"
op|','
string|"'/dev/sdc'"
op|')'
op|','
nl|'\n'
op|'('
string|"'BlockDeviceMapping.2.VirtualName'"
op|','
string|"'ephemeral0'"
op|')'
op|']'
newline|'\n'
name|'expected_dict'
op|'='
op|'{'
nl|'\n'
string|"'block_device_mapping'"
op|':'
op|'{'
nl|'\n'
string|"'1'"
op|':'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sda1'"
op|','
nl|'\n'
string|"'ebs'"
op|':'
op|'{'
string|"'snapshot_id'"
op|':'
string|"'snap-0000001c'"
op|','
nl|'\n'
string|"'volume_size'"
op|':'
number|'80'
op|','
nl|'\n'
string|"'delete_on_termination'"
op|':'
name|'False'
op|'}'
op|'}'
op|','
nl|'\n'
string|"'2'"
op|':'
op|'{'
string|"'device_name'"
op|':'
string|"'/dev/sdc'"
op|','
nl|'\n'
string|"'virtual_name'"
op|':'
string|"'ephemeral0'"
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'out_dict'
op|'='
name|'ec2utils'
op|'.'
name|'dict_from_dotted_str'
op|'('
name|'in_str'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'out_dict'
op|','
name|'matchers'
op|'.'
name|'DictMatches'
op|'('
name|'expected_dict'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_properties_root_defice_name
dedent|''
name|'def'
name|'test_properties_root_defice_name'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mappings'
op|'='
op|'['
op|'{'
string|'"device"'
op|':'
string|'"/dev/sda1"'
op|','
string|'"virtual"'
op|':'
string|'"root"'
op|'}'
op|']'
newline|'\n'
name|'properties0'
op|'='
op|'{'
string|"'mappings'"
op|':'
name|'mappings'
op|'}'
newline|'\n'
name|'properties1'
op|'='
op|'{'
string|"'root_device_name'"
op|':'
string|"'/dev/sdb'"
op|','
string|"'mappings'"
op|':'
name|'mappings'
op|'}'
newline|'\n'
nl|'\n'
name|'root_device_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
nl|'\n'
name|'properties0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'root_device_name'
op|','
string|"'/dev/sda1'"
op|')'
newline|'\n'
nl|'\n'
name|'root_device_name'
op|'='
name|'block_device'
op|'.'
name|'properties_root_device_name'
op|'('
nl|'\n'
name|'properties1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'root_device_name'
op|','
string|"'/dev/sdb'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_regex_from_ec2_regex
dedent|''
name|'def'
name|'test_regex_from_ec2_regex'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
DECL|function|_test_re
indent|'        '
name|'def'
name|'_test_re'
op|'('
name|'ec2_regex'
op|','
name|'expected'
op|','
name|'literal'
op|','
name|'match'
op|'='
name|'True'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'regex'
op|'='
name|'ec2utils'
op|'.'
name|'regex_from_ec2_regex'
op|'('
name|'ec2_regex'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'regex'
op|','
name|'expected'
op|')'
newline|'\n'
name|'if'
name|'match'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'re'
op|'.'
name|'match'
op|'('
name|'regex'
op|','
name|'literal'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'re'
op|'.'
name|'match'
op|'('
name|'regex'
op|','
name|'literal'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# wildcards'
nl|'\n'
dedent|''
dedent|''
name|'_test_re'
op|'('
string|"'foo'"
op|','
string|"'\\Afoo\\Z(?s)'"
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo'"
op|','
string|"'\\Afoo\\Z(?s)'"
op|','
string|"'baz'"
op|','
name|'match'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo?bar'"
op|','
string|"'\\Afoo.bar\\Z(?s)'"
op|','
string|"'foo bar'"
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo?bar'"
op|','
string|"'\\Afoo.bar\\Z(?s)'"
op|','
string|"'foo   bar'"
op|','
name|'match'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo*bar'"
op|','
string|"'\\Afoo.*bar\\Z(?s)'"
op|','
string|"'foo QUUX bar'"
op|')'
newline|'\n'
nl|'\n'
comment|'# backslashes and escaped wildcards'
nl|'\n'
name|'_test_re'
op|'('
string|"'foo\\\\'"
op|','
string|"'\\Afoo\\\\\\\\\\Z(?s)'"
op|','
string|"'foo\\\\'"
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo*bar'"
op|','
string|"'\\Afoo.*bar\\Z(?s)'"
op|','
string|"'zork QUUX bar'"
op|','
name|'match'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo\\\\?bar'"
op|','
string|"'\\Afoo[?]bar\\Z(?s)'"
op|','
string|"'foo?bar'"
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo\\\\?bar'"
op|','
string|"'\\Afoo[?]bar\\Z(?s)'"
op|','
string|"'foo bar'"
op|','
name|'match'
op|'='
name|'False'
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo\\\\*bar'"
op|','
string|"'\\Afoo[*]bar\\Z(?s)'"
op|','
string|"'foo*bar'"
op|')'
newline|'\n'
name|'_test_re'
op|'('
string|"'foo\\\\*bar'"
op|','
string|"'\\Afoo[*]bar\\Z(?s)'"
op|','
string|"'foo bar'"
op|','
name|'match'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# analog to the example given in the EC2 API docs'
nl|'\n'
name|'ec2_regex'
op|'='
string|"'\\*nova\\?\\\\end'"
newline|'\n'
name|'expected'
op|'='
string|"r'\\A[*]nova[?]\\\\end\\Z(?s)'"
newline|'\n'
name|'literal'
op|'='
string|"r'*nova?\\end'"
newline|'\n'
name|'_test_re'
op|'('
name|'ec2_regex'
op|','
name|'expected'
op|','
name|'literal'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_mapping_prepend_dev
dedent|''
name|'def'
name|'test_mapping_prepend_dev'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'mappings'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sdb1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdb2'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|']'
newline|'\n'
name|'expected_result'
op|'='
op|'['
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ami'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'sda1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'root'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sda1'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdb1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'swap'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdb2'"
op|'}'
op|','
nl|'\n'
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral0'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|','
nl|'\n'
op|'{'
string|"'virtual'"
op|':'
string|"'ephemeral1'"
op|','
nl|'\n'
string|"'device'"
op|':'
string|"'/dev/sdc1'"
op|'}'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'block_device'
op|'.'
name|'mappings_prepend_dev'
op|'('
name|'mappings'
op|')'
op|','
nl|'\n'
name|'matchers'
op|'.'
name|'DictListMatches'
op|'('
name|'expected_result'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ApiEc2TestCase
dedent|''
dedent|''
name|'class'
name|'ApiEc2TestCase'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit test for the cloud controller on an EC2 API."""'
newline|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ApiEc2TestCase'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host'
op|'='
string|"'127.0.0.1'"
newline|'\n'
comment|'# NOTE(vish): skipping the Authorizer'
nl|'\n'
name|'roles'
op|'='
op|'['
string|"'sysadmin'"
op|','
string|"'netadmin'"
op|']'
newline|'\n'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'RequestContext'
op|'('
string|"'fake'"
op|','
string|"'fake'"
op|','
name|'roles'
op|'='
name|'roles'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'app'
op|'='
name|'auth'
op|'.'
name|'InjectContext'
op|'('
name|'ctxt'
op|','
name|'ec2'
op|'.'
name|'FaultWrapper'
op|'('
nl|'\n'
name|'ec2'
op|'.'
name|'RequestLogging'
op|'('
name|'ec2'
op|'.'
name|'Requestify'
op|'('
name|'ec2'
op|'.'
name|'Authorizer'
op|'('
name|'ec2'
op|'.'
name|'Executor'
op|'('
op|')'
nl|'\n'
op|')'
op|','
string|"'nova.api.ec2.cloud.CloudController'"
op|')'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'useFixture'
op|'('
name|'fixtures'
op|'.'
name|'FakeLogger'
op|'('
string|"'boto'"
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|expect_http
dedent|''
name|'def'
name|'expect_http'
op|'('
name|'self'
op|','
name|'host'
op|'='
name|'None'
op|','
name|'is_secure'
op|'='
name|'False'
op|','
name|'api_version'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns a new EC2 connection."""'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'='
name|'boto'
op|'.'
name|'connect_ec2'
op|'('
nl|'\n'
name|'aws_access_key_id'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'aws_secret_access_key'
op|'='
string|"'fake'"
op|','
nl|'\n'
name|'is_secure'
op|'='
name|'False'
op|','
nl|'\n'
name|'region'
op|'='
name|'regioninfo'
op|'.'
name|'RegionInfo'
op|'('
name|'None'
op|','
string|"'test'"
op|','
name|'self'
op|'.'
name|'host'
op|')'
op|','
nl|'\n'
name|'port'
op|'='
number|'8773'
op|','
nl|'\n'
name|'path'
op|'='
string|"'/services/Cloud'"
op|')'
newline|'\n'
name|'if'
name|'api_version'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'APIVersion'
op|'='
name|'api_version'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'mox'
op|'.'
name|'StubOutWithMock'
op|'('
name|'self'
op|'.'
name|'ec2'
op|','
string|"'new_http_connection'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'http'
op|'='
name|'FakeHttplibConnection'
op|'('
nl|'\n'
name|'self'
op|'.'
name|'app'
op|','
string|"'%s:8773'"
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
comment|'# pylint: disable=E1103'
nl|'\n'
name|'boto_version'
op|'='
name|'pkg_resources'
op|'.'
name|'parse_version'
op|'('
name|'boto'
op|'.'
name|'Version'
op|')'
newline|'\n'
name|'if'
name|'boto_version'
op|'>='
op|'('
number|'2'
op|','
number|'13'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'new_http_connection'
op|'('
name|'host'
name|'or'
name|'self'
op|'.'
name|'host'
op|','
number|'8773'
op|','
nl|'\n'
name|'is_secure'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'http'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'boto_version'
op|'>='
op|'('
number|'2'
op|','
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'new_http_connection'
op|'('
name|'host'
name|'or'
string|"'%s:8773'"
op|'%'
op|'('
name|'self'
op|'.'
name|'host'
op|')'
op|','
nl|'\n'
name|'is_secure'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'http'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'new_http_connection'
op|'('
name|'host'
op|','
name|'is_secure'
op|')'
op|'.'
name|'AndReturn'
op|'('
name|'self'
op|'.'
name|'http'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'self'
op|'.'
name|'http'
newline|'\n'
nl|'\n'
DECL|member|test_return_valid_isoformat
dedent|''
name|'def'
name|'test_return_valid_isoformat'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n            Ensure that the ec2 api returns datetime in xs:dateTime\n            (which apparently isn\'t datetime.isoformat())\n            NOTE(ken-pepple): https://bugs.launchpad.net/nova/+bug/721297\n        """'
newline|'\n'
name|'conv'
op|'='
name|'apirequest'
op|'.'
name|'_database_to_isoformat'
newline|'\n'
comment|'# sqlite database representation with microseconds'
nl|'\n'
name|'time_to_convert'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
string|'"2011-02-21 20:14:10.634276"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M:%S.%f"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
name|'time_to_convert'
op|')'
op|','
string|"'2011-02-21T20:14:10.634Z'"
op|')'
newline|'\n'
comment|'# mysqlite database representation'
nl|'\n'
name|'time_to_convert'
op|'='
name|'timeutils'
op|'.'
name|'parse_strtime'
op|'('
string|'"2011-02-21 19:56:18"'
op|','
nl|'\n'
string|'"%Y-%m-%d %H:%M:%S"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'conv'
op|'('
name|'time_to_convert'
op|')'
op|','
string|"'2011-02-21T19:56:18.000Z'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_xmlns_version_matches_request_version
dedent|''
name|'def'
name|'test_xmlns_version_matches_request_version'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'expect_http'
op|'('
name|'api_version'
op|'='
string|"'2010-10-30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Any request should be fine'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_instances'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'APIVersion'
name|'in'
name|'self'
op|'.'
name|'http'
op|'.'
name|'getresponsebody'
op|'('
op|')'
op|','
nl|'\n'
string|"'The version in the xmlns of the response does '"
nl|'\n'
string|"'not match the API version given in the request.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_describe_instances
dedent|''
name|'def'
name|'test_describe_instances'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that, after creating a user and a project, the describe\n        instances call to the API works properly.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_instances'
op|'('
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_terminate_invalid_instance
dedent|''
name|'def'
name|'test_terminate_invalid_instance'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Attempt to terminate an invalid instance.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'boto_exc'
op|'.'
name|'EC2ResponseError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'terminate_instances'
op|','
string|'"i-00000005"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_key_pairs
dedent|''
name|'def'
name|'test_get_all_key_pairs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that, after creating a user and project and generating\n         a key pair, that the API call to list key pairs works properly.\n         """'
newline|'\n'
name|'keyname'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
string|'"sdiuisudfsdcnpaqwertasd"'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_key_pair'
op|'('
name|'keyname'
op|')'
newline|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_key_pairs'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
op|'['
name|'k'
name|'for'
name|'k'
name|'in'
name|'rv'
name|'if'
name|'k'
op|'.'
name|'name'
op|'=='
name|'keyname'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'results'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_duplicate_key_pair
dedent|''
name|'def'
name|'test_create_duplicate_key_pair'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that, after successfully generating a keypair,\n        requesting a second keypair with the same name fails sanely.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_key_pair'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_key_pair'
op|'('
string|"'test'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'boto_exc'
op|'.'
name|'EC2ResponseError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'e'
op|'.'
name|'code'
op|'=='
string|"'InvalidKeyPair.Duplicate'"
op|':'
newline|'\n'
indent|'                '
name|'pass'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'InvalidKeyPair.Duplicate'"
op|','
name|'e'
op|'.'
name|'code'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|"'Exception not raised.'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_all_security_groups
dedent|''
dedent|''
name|'def'
name|'test_get_all_security_groups'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that we can retrieve security groups.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rv'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'rv'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
string|"'default'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_delete_security_group
dedent|''
name|'def'
name|'test_create_delete_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test that we can create a security group.'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
string|'"sdiuisudfsdcnpaqwertasd"'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'security_group_name'
op|','
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'rv'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'security_group_name'
op|','
op|'['
name|'group'
op|'.'
name|'name'
name|'for'
name|'group'
name|'in'
name|'rv'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_group_name_valid_chars_security_group
dedent|''
name|'def'
name|'test_group_name_valid_chars_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that we sanely handle invalid security group names.\n\n         EC2 API Spec states we should only accept alphanumeric characters,\n         spaces, dashes, and underscores. Amazon implementation\n         accepts more characters - so, [:print:] is ok.\n         """'
newline|'\n'
name|'bad_strict_ec2'
op|'='
string|'"aa \\t\\x01\\x02\\x7f"'
newline|'\n'
name|'bad_amazon_ec2'
op|'='
string|'"aa #^% -=99"'
newline|'\n'
name|'test_raise'
op|'='
op|'['
nl|'\n'
op|'('
name|'True'
op|','
name|'bad_amazon_ec2'
op|','
string|'"test desc"'
op|')'
op|','
nl|'\n'
op|'('
name|'True'
op|','
string|'"test name"'
op|','
name|'bad_amazon_ec2'
op|')'
op|','
nl|'\n'
op|'('
name|'False'
op|','
name|'bad_strict_ec2'
op|','
string|'"test desc"'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'test_raise'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'ec2_strict_validation'
op|'='
name|'test'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'boto_exc'
op|'.'
name|'EC2ResponseError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|','
nl|'\n'
name|'test'
op|'['
number|'1'
op|']'
op|','
nl|'\n'
name|'test'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
dedent|''
name|'test_accept'
op|'='
op|'['
nl|'\n'
op|'('
name|'False'
op|','
name|'bad_amazon_ec2'
op|','
string|'"test desc"'
op|')'
op|','
nl|'\n'
op|'('
name|'False'
op|','
string|'"test name"'
op|','
name|'bad_amazon_ec2'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'for'
name|'test'
name|'in'
name|'test_accept'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'ec2_strict_validation'
op|'='
name|'test'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'test'
op|'['
number|'1'
op|']'
op|','
name|'test'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'test'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_group_name_valid_length_security_group
dedent|''
dedent|''
name|'def'
name|'test_group_name_valid_length_security_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Test that we sanely handle invalid security group names.\n\n         API Spec states that the length should not exceed 255 char.\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Test block group_name > 255 chars'
nl|'\n'
name|'security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
string|'"poiuytrewqasdfghjklmnbvc"'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'256'
op|','
number|'266'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'boto_exc'
op|'.'
name|'EC2ResponseError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|','
nl|'\n'
name|'security_group_name'
op|','
nl|'\n'
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_authorize_revoke_security_group_cidr
dedent|''
name|'def'
name|'test_authorize_revoke_security_group_cidr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can add and remove CIDR based rules\n        to a security group\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
string|'"sdiuisudfsdcnpaqwertasd"'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'security_group_name'
op|','
nl|'\n'
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'udp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'tcp'"
op|','
number|'1'
op|','
number|'65535'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'udp'"
op|','
number|'1'
op|','
number|'65535'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'icmp'"
op|','
number|'1'
op|','
number|'0'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'icmp'"
op|','
number|'0'
op|','
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'icmp'"
op|','
number|'0'
op|','
number|'0'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
DECL|function|_assert
name|'def'
name|'_assert'
op|'('
name|'message'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'group'
op|'.'
name|'authorize'
op|'('
op|'*'
name|'args'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'boto_exc'
op|'.'
name|'EC2ResponseError'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'e'
op|'.'
name|'status'
op|','
number|'400'
op|','
string|"'Expected status to be 400'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'message'
op|','
name|'e'
op|'.'
name|'error_message'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'self'
op|'.'
name|'failureException'
op|','
string|"'EC2ResponseError not raised'"
newline|'\n'
nl|'\n'
comment|'# Invalid CIDR address'
nl|'\n'
dedent|''
dedent|''
name|'_assert'
op|'('
string|"'Invalid CIDR'"
op|','
string|"'tcp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'0.0.0.0/0444'"
op|')'
newline|'\n'
comment|'# Missing ports'
nl|'\n'
name|'_assert'
op|'('
string|"'Not enough parameters'"
op|','
string|"'tcp'"
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# from port cannot be greater than to port'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid port range'"
op|','
string|"'tcp'"
op|','
number|'100'
op|','
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# For tcp, negative values are not allowed'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid port range'"
op|','
string|"'tcp'"
op|','
op|'-'
number|'1'
op|','
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# For tcp, valid port range 1-65535'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid port range'"
op|','
string|"'tcp'"
op|','
number|'1'
op|','
number|'65599'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# Invalid Cidr for ICMP type'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid CIDR'"
op|','
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
string|"'0.0.444.0/4'"
op|')'
newline|'\n'
comment|'# Invalid protocol'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid IP protocol'"
op|','
string|"'xyz'"
op|','
number|'1'
op|','
number|'14'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# Invalid port'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid input received: To and From ports must be integers'"
op|','
nl|'\n'
string|"'tcp'"
op|','
string|'" "'
op|','
string|'"81"'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# Invalid icmp port'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid input received: '"
nl|'\n'
string|"'Type and Code must be integers for ICMP protocol type'"
op|','
nl|'\n'
string|"'icmp'"
op|','
string|'" "'
op|','
string|'"81"'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
comment|'# Invalid CIDR Address'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid CIDR'"
op|','
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
string|"'0.0.0.0'"
op|')'
newline|'\n'
comment|'# Invalid CIDR Address'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid CIDR'"
op|','
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
string|"'0.0.0.0/'"
op|')'
newline|'\n'
comment|'# Invalid Cidr ports'
nl|'\n'
name|'_assert'
op|'('
string|"'Invalid port range'"
op|','
string|"'icmp'"
op|','
number|'1'
op|','
number|'256'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
op|'['
name|'grp'
name|'for'
name|'grp'
name|'in'
name|'rv'
name|'if'
name|'grp'
op|'.'
name|'name'
op|'=='
name|'security_group_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|')'
op|','
number|'8'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'from_port'
op|')'
op|','
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'to_port'
op|')'
op|','
number|'81'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'icmp'"
op|','
op|'-'
number|'1'
op|','
op|'-'
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'udp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'tcp'"
op|','
number|'1'
op|','
number|'65535'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'udp'"
op|','
number|'1'
op|','
number|'65535'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'icmp'"
op|','
number|'1'
op|','
number|'0'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'icmp'"
op|','
number|'0'
op|','
number|'1'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'icmp'"
op|','
number|'0'
op|','
number|'0'
op|','
string|"'0.0.0.0/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rv'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rv'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
string|"'default'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_authorize_revoke_security_group_cidr_v6
dedent|''
name|'def'
name|'test_authorize_revoke_security_group_cidr_v6'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can add and remove CIDR based rules\n        to a security group for IPv6\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
string|'"sdiuisudfsdcnpaqwertasd"'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'security_group_name'
op|','
nl|'\n'
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'::/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
op|'['
name|'grp'
name|'for'
name|'grp'
name|'in'
name|'rv'
name|'if'
name|'grp'
op|'.'
name|'name'
op|'=='
name|'security_group_name'
op|']'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'from_port'
op|')'
op|','
number|'80'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'int'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'to_port'
op|')'
op|','
number|'81'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'::/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
string|"'tcp'"
op|','
number|'80'
op|','
number|'81'
op|','
string|"'::/0'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'security_group_name'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'rv'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'rv'
op|'['
number|'0'
op|']'
op|'.'
name|'name'
op|','
string|"'default'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_authorize_revoke_security_group_foreign_group
dedent|''
name|'def'
name|'test_authorize_revoke_security_group_foreign_group'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""\n        Test that we can grant and revoke another security group access\n        to a security group\n        """'
newline|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rand_string'
op|'='
string|"'sdiuisudfsdcnpaqwertasd'"
newline|'\n'
name|'security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
name|'rand_string'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
name|'other_security_group_name'
op|'='
string|'""'
op|'.'
name|'join'
op|'('
name|'random'
op|'.'
name|'choice'
op|'('
name|'rand_string'
op|')'
nl|'\n'
name|'for'
name|'x'
name|'in'
name|'range'
op|'('
name|'random'
op|'.'
name|'randint'
op|'('
number|'4'
op|','
number|'8'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'group'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'security_group_name'
op|','
nl|'\n'
string|"'test group'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'other_group'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'create_security_group'
op|'('
name|'other_security_group_name'
op|','
nl|'\n'
string|"'some other group'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
nl|'\n'
name|'group'
op|'.'
name|'authorize'
op|'('
name|'src_group'
op|'='
name|'other_group'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# I don't bother checkng that we actually find it here,"
nl|'\n'
comment|'# because the create/delete unit test further up should'
nl|'\n'
comment|'# be good enough for that.'
nl|'\n'
name|'for'
name|'group'
name|'in'
name|'rv'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'group'
op|'.'
name|'name'
op|'=='
name|'security_group_name'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'len'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEquals'
op|'('
name|'str'
op|'('
name|'group'
op|'.'
name|'rules'
op|'['
number|'0'
op|']'
op|'.'
name|'grants'
op|'['
number|'0'
op|']'
op|')'
op|','
string|"'%s-%s'"
op|'%'
nl|'\n'
op|'('
name|'other_security_group_name'
op|','
string|"'fake'"
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'rv'
op|'='
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'get_all_security_groups'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'group'
name|'in'
name|'rv'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'group'
op|'.'
name|'name'
op|'=='
name|'security_group_name'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
name|'group'
op|'.'
name|'connection'
op|'='
name|'self'
op|'.'
name|'ec2'
newline|'\n'
name|'group'
op|'.'
name|'revoke'
op|'('
name|'src_group'
op|'='
name|'other_group'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'expect_http'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mox'
op|'.'
name|'ReplayAll'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'security_group_name'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'ec2'
op|'.'
name|'delete_security_group'
op|'('
name|'other_security_group_name'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

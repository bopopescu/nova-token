begin_unit
comment|'# Copyright 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'glob'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
nl|'\n'
name|'import'
name|'lxml'
op|'.'
name|'etree'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
nl|'\n'
DECL|variable|SCHEMAS
name|'SCHEMAS'
op|'='
string|'"nova/api/openstack/compute/schemas"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RelaxNGSchemaTestCase
name|'class'
name|'RelaxNGSchemaTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""various validation tasks for the RelaxNG schemas\n\n    lxml.etree has no built-in way to validate an entire namespace\n    (i.e., multiple RelaxNG schema files defining elements in the same\n    namespace), so we define a few tests that should hopefully reduce\n    the risk of an inconsistent namespace\n    """'
newline|'\n'
nl|'\n'
DECL|member|_load_schema
name|'def'
name|'_load_schema'
op|'('
name|'self'
op|','
name|'schemafile'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'lxml'
op|'.'
name|'etree'
op|'.'
name|'RelaxNG'
op|'('
name|'lxml'
op|'.'
name|'etree'
op|'.'
name|'parse'
op|'('
name|'schemafile'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_load_test_cases
dedent|''
name|'def'
name|'_load_test_cases'
op|'('
name|'self'
op|','
name|'path'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""load test cases from the given path."""'
newline|'\n'
name|'rv'
op|'='
name|'dict'
op|'('
name|'valid'
op|'='
op|'['
op|']'
op|','
name|'invalid'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'path'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'__file__'
op|')'
op|','
name|'path'
op|')'
newline|'\n'
name|'for'
name|'ctype'
name|'in'
name|'rv'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'cfile'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'path'
op|','
name|'ctype'
op|','
string|'"*.xml"'
op|')'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'rv'
op|'['
name|'ctype'
op|']'
op|'.'
name|'append'
op|'('
name|'lxml'
op|'.'
name|'etree'
op|'.'
name|'parse'
op|'('
name|'cfile'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'rv'
newline|'\n'
nl|'\n'
DECL|member|_validate_schema
dedent|''
name|'def'
name|'_validate_schema'
op|'('
name|'self'
op|','
name|'schemafile'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""validate a single RelaxNG schema file."""'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'_load_schema'
op|'('
name|'schemafile'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'lxml'
op|'.'
name|'etree'
op|'.'
name|'RelaxNGParseError'
name|'as'
name|'err'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"%s is not a valid RelaxNG schema: %s"'
op|'%'
nl|'\n'
op|'('
name|'schemafile'
op|','
name|'err'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_api_versions
dedent|''
dedent|''
name|'def'
name|'_api_versions'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""get a list of API versions."""'
newline|'\n'
name|'return'
op|'['
string|"''"
op|']'
op|'+'
op|'['
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'v'
op|')'
nl|'\n'
name|'for'
name|'v'
name|'in'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'SCHEMAS'
op|','
string|'"v*"'
op|')'
op|')'
op|']'
newline|'\n'
nl|'\n'
DECL|member|_schema_files
dedent|''
name|'def'
name|'_schema_files'
op|'('
name|'self'
op|','
name|'api_version'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'glob'
op|'.'
name|'glob'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'SCHEMAS'
op|','
name|'api_version'
op|','
string|'"*.rng"'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schema_validity
dedent|''
name|'def'
name|'test_schema_validity'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'api_version'
name|'in'
name|'self'
op|'.'
name|'_api_versions'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'schema'
name|'in'
name|'self'
op|'.'
name|'_schema_files'
op|'('
name|'api_version'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'_validate_schema'
op|'('
name|'schema'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schema_duplicate_elements
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_schema_duplicate_elements'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'api_version'
name|'in'
name|'self'
op|'.'
name|'_api_versions'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'elements'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'duplicates'
op|'='
name|'dict'
op|'('
op|')'
newline|'\n'
name|'for'
name|'schemafile'
name|'in'
name|'self'
op|'.'
name|'_schema_files'
op|'('
name|'api_version'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'schema'
op|'='
name|'lxml'
op|'.'
name|'etree'
op|'.'
name|'parse'
op|'('
name|'schemafile'
op|')'
newline|'\n'
name|'fname'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'schemafile'
op|')'
newline|'\n'
name|'if'
name|'schema'
op|'.'
name|'getroot'
op|'('
op|')'
op|'.'
name|'tag'
op|'!='
string|'"element"'
op|':'
newline|'\n'
comment|"# we don't do any sort of validation on grammars"
nl|'\n'
comment|'# yet'
nl|'\n'
indent|'                    '
name|'continue'
newline|'\n'
dedent|''
name|'el_name'
op|'='
name|'schema'
op|'.'
name|'getroot'
op|'('
op|')'
op|'.'
name|'get'
op|'('
string|'"name"'
op|')'
newline|'\n'
name|'if'
name|'el_name'
name|'in'
name|'elements'
op|':'
newline|'\n'
indent|'                    '
name|'duplicates'
op|'.'
name|'setdefault'
op|'('
name|'el_name'
op|','
nl|'\n'
op|'['
name|'elements'
op|'['
name|'el_name'
op|']'
op|']'
op|')'
op|'.'
name|'append'
op|'('
name|'fname'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                    '
name|'elements'
op|'['
name|'el_name'
op|']'
op|'='
name|'fname'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'duplicates'
op|')'
op|','
number|'0'
op|','
nl|'\n'
string|'"Duplicate element definitions found: %s"'
op|'%'
nl|'\n'
string|'"; "'
op|'.'
name|'join'
op|'('
string|'"%s in %s"'
op|'%'
name|'dup'
nl|'\n'
name|'for'
name|'dup'
name|'in'
name|'duplicates'
op|'.'
name|'items'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_schema_explicit_cases
dedent|''
dedent|''
name|'def'
name|'test_schema_explicit_cases'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'cases'
op|'='
op|'{'
string|"'v1.1/flavors.rng'"
op|':'
name|'self'
op|'.'
name|'_load_test_cases'
op|'('
string|'"v1.1/flavors"'
op|')'
op|','
nl|'\n'
string|"'v1.1/images.rng'"
op|':'
name|'self'
op|'.'
name|'_load_test_cases'
op|'('
string|'"v1.1/images"'
op|')'
op|','
nl|'\n'
string|"'v1.1/servers.rng'"
op|':'
name|'self'
op|'.'
name|'_load_test_cases'
op|'('
string|'"v1.1/servers"'
op|')'
op|'}'
newline|'\n'
nl|'\n'
name|'for'
name|'schemafile'
op|','
name|'caselists'
name|'in'
name|'cases'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'schema'
op|'='
name|'self'
op|'.'
name|'_load_schema'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'join'
op|'('
name|'SCHEMAS'
op|','
name|'schemafile'
op|')'
op|')'
newline|'\n'
name|'for'
name|'case'
name|'in'
name|'caselists'
op|'['
string|"'valid'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'schema'
op|'.'
name|'validate'
op|'('
name|'case'
op|')'
op|','
nl|'\n'
string|'"Schema validation failed against %s: %s\\n%s"'
op|'%'
nl|'\n'
op|'('
name|'schemafile'
op|','
name|'schema'
op|'.'
name|'error_log'
op|','
name|'case'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'case'
name|'in'
name|'caselists'
op|'['
string|"'invalid'"
op|']'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'.'
name|'assertFalse'
op|'('
nl|'\n'
name|'schema'
op|'.'
name|'validate'
op|'('
name|'case'
op|')'
op|','
nl|'\n'
string|'"Schema validation succeeded unexpectedly against %s: %s"'
nl|'\n'
string|'"\\n%s"'
op|'%'
op|'('
name|'schemafile'
op|','
name|'schema'
op|'.'
name|'error_log'
op|','
name|'case'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
dedent|''
dedent|''
endmarker|''
end_unit

begin_unit
comment|'# Copyright 2010 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""\nTest suites for \'common\' code used throughout the OpenStack HTTP API.\n"""'
newline|'\n'
nl|'\n'
name|'import'
name|'xml'
op|'.'
name|'dom'
op|'.'
name|'minidom'
name|'as'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'import'
name|'mock'
newline|'\n'
name|'from'
name|'testtools'
name|'import'
name|'matchers'
newline|'\n'
name|'import'
name|'webob'
newline|'\n'
name|'import'
name|'webob'
op|'.'
name|'exc'
newline|'\n'
name|'import'
name|'webob'
op|'.'
name|'multidict'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'common'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'task_states'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'vm_states'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|NS
name|'NS'
op|'='
string|'"{http://docs.openstack.org/compute/api/v1.1}"'
newline|'\n'
DECL|variable|ATOMNS
name|'ATOMNS'
op|'='
string|'"{http://www.w3.org/2005/Atom}"'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LimiterTest
name|'class'
name|'LimiterTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit tests for the `nova.api.openstack.common.limited` method which\n    takes in a list of items and, depending on the \'offset\' and \'limit\' GET\n    params, returns a subset or complete set of the given items.\n    """'
newline|'\n'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Run before each test."""'
newline|'\n'
name|'super'
op|'('
name|'LimiterTest'
op|','
name|'self'
op|')'
op|'.'
name|'setUp'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tiny'
op|'='
name|'range'
op|'('
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'small'
op|'='
name|'range'
op|'('
number|'10'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'medium'
op|'='
name|'range'
op|'('
number|'1000'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'large'
op|'='
name|'range'
op|'('
number|'10000'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_offset_zero
dedent|''
name|'def'
name|'test_limiter_offset_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test offset key works with 0.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'tiny'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
op|':'
number|'1000'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_offset_medium
dedent|''
name|'def'
name|'test_limiter_offset_medium'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test offset key works with a medium sized number.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|'['
number|'10'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|'['
number|'10'
op|':'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
number|'10'
op|':'
number|'1010'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_offset_over_max
dedent|''
name|'def'
name|'test_limiter_offset_over_max'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test offset key works with a number over 1000 (max_limit).'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=1001'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
number|'1001'
op|':'
number|'2001'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_offset_blank
dedent|''
name|'def'
name|'test_limiter_offset_blank'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test offset key works with a blank offset.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset='"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'limited'
op|','
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_offset_bad
dedent|''
name|'def'
name|'test_limiter_offset_bad'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test offset key works with a BAD offset.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"u'/?offset=\\u0020aa'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'limited'
op|','
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_nothing
dedent|''
name|'def'
name|'test_limiter_nothing'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test request with no offset or limit.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'tiny'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
op|':'
number|'1000'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_limit_zero
dedent|''
name|'def'
name|'test_limiter_limit_zero'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test limit of zero.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'tiny'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
op|':'
number|'1000'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_limit_medium
dedent|''
name|'def'
name|'test_limiter_limit_medium'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test limit of 10.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'tiny'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|'['
op|':'
number|'10'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
op|':'
number|'10'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_limit_over_max
dedent|''
name|'def'
name|'test_limiter_limit_over_max'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test limit of 3000.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=3000'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'tiny'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'small'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'small'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'medium'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'medium'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'self'
op|'.'
name|'large'
op|','
name|'req'
op|')'
op|','
name|'self'
op|'.'
name|'large'
op|'['
op|':'
number|'1000'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_limit_and_offset
dedent|''
name|'def'
name|'test_limiter_limit_and_offset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test request with both limit and offset.'
nl|'\n'
indent|'        '
name|'items'
op|'='
name|'range'
op|'('
number|'2000'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=1&limit=3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
op|','
name|'items'
op|'['
number|'1'
op|':'
number|'4'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3&limit=0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
op|','
name|'items'
op|'['
number|'3'
op|':'
number|'1003'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3&limit=1500'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
op|','
name|'items'
op|'['
number|'3'
op|':'
number|'1003'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3000&limit=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_custom_max_limit
dedent|''
name|'def'
name|'test_limiter_custom_max_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test a max_limit other than 1000.'
nl|'\n'
indent|'        '
name|'items'
op|'='
name|'range'
op|'('
number|'2000'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=1&limit=3'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|','
name|'max_limit'
op|'='
number|'2000'
op|')'
op|','
name|'items'
op|'['
number|'1'
op|':'
number|'4'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3&limit=0'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|','
name|'max_limit'
op|'='
number|'2000'
op|')'
op|','
name|'items'
op|'['
number|'3'
op|':'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3&limit=2500'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|','
name|'max_limit'
op|'='
number|'2000'
op|')'
op|','
name|'items'
op|'['
number|'3'
op|':'
op|']'
op|')'
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=3000&limit=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'limited'
op|'('
name|'items'
op|','
name|'req'
op|','
name|'max_limit'
op|'='
number|'2000'
op|')'
op|','
op|'['
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_negative_limit
dedent|''
name|'def'
name|'test_limiter_negative_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test a negative limit.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=-3000'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'limited'
op|','
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_limiter_negative_offset
dedent|''
name|'def'
name|'test_limiter_negative_offset'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test a negative offset.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?offset=-30'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'limited'
op|','
name|'self'
op|'.'
name|'tiny'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SortParamUtilsTest
dedent|''
dedent|''
name|'class'
name|'SortParamUtilsTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_get_sort_params_defaults
indent|'    '
name|'def'
name|'test_get_sort_params_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Verifies the default sort key and direction.'''"
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
op|'{'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'created_at'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'desc'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_sort_params_override_defaults
dedent|''
name|'def'
name|'test_get_sort_params_override_defaults'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Verifies that the defaults can be overriden.'''"
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
op|'{'
op|'}'
op|','
name|'default_key'
op|'='
string|"'key1'"
op|','
nl|'\n'
name|'default_dir'
op|'='
string|"'dir1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'key1'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'dir1'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
op|'{'
op|'}'
op|','
name|'default_key'
op|'='
name|'None'
op|','
nl|'\n'
name|'default_dir'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_sort_params_single_value
dedent|''
name|'def'
name|'test_get_sort_params_single_value'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Verifies a single sort key and direction.'''"
newline|'\n'
name|'params'
op|'='
name|'webob'
op|'.'
name|'multidict'
op|'.'
name|'MultiDict'
op|'('
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_key'"
op|','
string|"'key1'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_dir'"
op|','
string|"'dir1'"
op|')'
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'key1'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'dir1'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_sort_params_single_with_default
dedent|''
name|'def'
name|'test_get_sort_params_single_with_default'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Verifies a single sort value with a default.'''"
newline|'\n'
name|'params'
op|'='
name|'webob'
op|'.'
name|'multidict'
op|'.'
name|'MultiDict'
op|'('
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_key'"
op|','
string|"'key1'"
op|')'
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'key1'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
comment|'# sort_key was supplied, sort_dir should be defaulted'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'desc'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
name|'params'
op|'='
name|'webob'
op|'.'
name|'multidict'
op|'.'
name|'MultiDict'
op|'('
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_dir'"
op|','
string|"'dir1'"
op|')'
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'created_at'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
comment|'# sort_dir was supplied, sort_key should be defaulted'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'dir1'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_sort_params_multiple_values
dedent|''
name|'def'
name|'test_get_sort_params_multiple_values'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|"'''Verifies multiple sort parameter values.'''"
newline|'\n'
name|'params'
op|'='
name|'webob'
op|'.'
name|'multidict'
op|'.'
name|'MultiDict'
op|'('
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_key'"
op|','
string|"'key1'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_key'"
op|','
string|"'key2'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_key'"
op|','
string|"'key3'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_dir'"
op|','
string|"'dir1'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_dir'"
op|','
string|"'dir2'"
op|')'
newline|'\n'
name|'params'
op|'.'
name|'add'
op|'('
string|"'sort_dir'"
op|','
string|"'dir3'"
op|')'
newline|'\n'
name|'sort_keys'
op|','
name|'sort_dirs'
op|'='
name|'common'
op|'.'
name|'get_sort_params'
op|'('
name|'params'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'key1'"
op|','
string|"'key2'"
op|','
string|"'key3'"
op|']'
op|','
name|'sort_keys'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'dir1'"
op|','
string|"'dir2'"
op|','
string|"'dir3'"
op|']'
op|','
name|'sort_dirs'
op|')'
newline|'\n'
comment|'# Also ensure that the input parameters are not modified'
nl|'\n'
name|'sort_key_vals'
op|'='
op|'['
op|']'
newline|'\n'
name|'sort_dir_vals'
op|'='
op|'['
op|']'
newline|'\n'
name|'while'
string|"'sort_key'"
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'sort_key_vals'
op|'.'
name|'append'
op|'('
name|'params'
op|'.'
name|'pop'
op|'('
string|"'sort_key'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'while'
string|"'sort_dir'"
name|'in'
name|'params'
op|':'
newline|'\n'
indent|'            '
name|'sort_dir_vals'
op|'.'
name|'append'
op|'('
name|'params'
op|'.'
name|'pop'
op|'('
string|"'sort_dir'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'key1'"
op|','
string|"'key2'"
op|','
string|"'key3'"
op|']'
op|','
name|'sort_key_vals'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
op|'['
string|"'dir1'"
op|','
string|"'dir2'"
op|','
string|"'dir3'"
op|']'
op|','
name|'sort_dir_vals'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
number|'0'
op|','
name|'len'
op|'('
name|'params'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PaginationParamsTest
dedent|''
dedent|''
name|'class'
name|'PaginationParamsTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Unit tests for the `nova.api.openstack.common.get_pagination_params`\n    method which takes in a request object and returns \'marker\' and \'limit\'\n    GET params.\n    """'
newline|'\n'
nl|'\n'
DECL|member|test_no_params
name|'def'
name|'test_no_params'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test no params.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
op|'{'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_marker
dedent|''
name|'def'
name|'test_valid_marker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test valid marker param.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
nl|'\n'
string|"'/?marker=263abb28-1de6-412f-b00b-f0ee0c4333c2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
nl|'\n'
op|'{'
string|"'marker'"
op|':'
string|"'263abb28-1de6-412f-b00b-f0ee0c4333c2'"
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_limit
dedent|''
name|'def'
name|'test_valid_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test valid limit param.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
op|'{'
string|"'limit'"
op|':'
number|'10'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_limit
dedent|''
name|'def'
name|'test_invalid_limit'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test invalid limit param.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=-2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'get_pagination_params'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_limit_and_marker
dedent|''
name|'def'
name|'test_valid_limit_and_marker'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test valid limit and marker parameters.'
nl|'\n'
indent|'        '
name|'marker'
op|'='
string|"'263abb28-1de6-412f-b00b-f0ee0c4333c2'"
newline|'\n'
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=20&marker=%s'"
op|'%'
name|'marker'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
nl|'\n'
op|'{'
string|"'marker'"
op|':'
name|'marker'
op|','
string|"'limit'"
op|':'
number|'20'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_page_size
dedent|''
name|'def'
name|'test_valid_page_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test valid page_size param.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?page_size=10'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
nl|'\n'
op|'{'
string|"'page_size'"
op|':'
number|'10'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_invalid_page_size
dedent|''
name|'def'
name|'test_invalid_page_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test invalid page_size param.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?page_size=-2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
name|'common'
op|'.'
name|'get_pagination_params'
op|','
name|'req'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_valid_limit_and_page_size
dedent|''
name|'def'
name|'test_valid_limit_and_page_size'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Test valid limit and page_size parameters.'
nl|'\n'
indent|'        '
name|'req'
op|'='
name|'webob'
op|'.'
name|'Request'
op|'.'
name|'blank'
op|'('
string|"'/?limit=20&page_size=5'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'common'
op|'.'
name|'get_pagination_params'
op|'('
name|'req'
op|')'
op|','
nl|'\n'
op|'{'
string|"'page_size'"
op|':'
number|'5'
op|','
string|"'limit'"
op|':'
number|'20'
op|'}'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MiscFunctionsTest
dedent|''
dedent|''
name|'class'
name|'MiscFunctionsTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_remove_major_version_from_href
indent|'    '
name|'def'
name|'test_remove_major_version_from_href'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v1/images'"
newline|'\n'
name|'expected'
op|'='
string|"'http://www.testsite.com/images'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'remove_version_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href
dedent|''
name|'def'
name|'test_remove_version_from_href'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v1.1/images'"
newline|'\n'
name|'expected'
op|'='
string|"'http://www.testsite.com/images'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'remove_version_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_2
dedent|''
name|'def'
name|'test_remove_version_from_href_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v1.1/'"
newline|'\n'
name|'expected'
op|'='
string|"'http://www.testsite.com/'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'remove_version_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_3
dedent|''
name|'def'
name|'test_remove_version_from_href_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v10.10'"
newline|'\n'
name|'expected'
op|'='
string|"'http://www.testsite.com'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'remove_version_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_4
dedent|''
name|'def'
name|'test_remove_version_from_href_4'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v1.1/images/v10.5'"
newline|'\n'
name|'expected'
op|'='
string|"'http://www.testsite.com/images/v10.5'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'remove_version_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_bad_request
dedent|''
name|'def'
name|'test_remove_version_from_href_bad_request'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/1.1/images'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'common'
op|'.'
name|'remove_version_from_href'
op|','
nl|'\n'
name|'fixture'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_bad_request_2
dedent|''
name|'def'
name|'test_remove_version_from_href_bad_request_2'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v/images'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'common'
op|'.'
name|'remove_version_from_href'
op|','
nl|'\n'
name|'fixture'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_remove_version_from_href_bad_request_3
dedent|''
name|'def'
name|'test_remove_version_from_href_bad_request_3'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/v1.1images'"
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'common'
op|'.'
name|'remove_version_from_href'
op|','
nl|'\n'
name|'fixture'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_int_url
dedent|''
name|'def'
name|'test_get_id_from_href_with_int_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/dir/45'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'45'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_int
dedent|''
name|'def'
name|'test_get_id_from_href_with_int'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'45'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'45'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_int_url_query
dedent|''
name|'def'
name|'test_get_id_from_href_with_int_url_query'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/dir/45?asdf=jkl'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'45'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_uuid_url
dedent|''
name|'def'
name|'test_get_id_from_href_with_uuid_url'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/dir/abc123'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|'"abc123"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_uuid_url_query
dedent|''
name|'def'
name|'test_get_id_from_href_with_uuid_url_query'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'http://www.testsite.com/dir/abc123?asdf=jkl'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|'"abc123"'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_get_id_from_href_with_uuid
dedent|''
name|'def'
name|'test_get_id_from_href_with_uuid'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture'
op|'='
string|"'abc123'"
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'get_id_from_href'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'abc123'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'actual'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_raise_http_conflict_for_instance_invalid_state
dedent|''
name|'def'
name|'test_raise_http_conflict_for_instance_invalid_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'exc'
op|'='
name|'exception'
op|'.'
name|'InstanceInvalidState'
op|'('
name|'attr'
op|'='
string|"'fake_attr'"
op|','
nl|'\n'
name|'state'
op|'='
string|"'fake_state'"
op|','
name|'method'
op|'='
string|"'fake_method'"
op|','
nl|'\n'
name|'instance_uuid'
op|'='
string|"'fake'"
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'common'
op|'.'
name|'raise_http_conflict_for_instance_invalid_state'
op|'('
name|'exc'
op|','
nl|'\n'
string|"'meow'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPConflict'
name|'as'
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'unicode'
op|'('
name|'e'
op|')'
op|','
nl|'\n'
string|'"Cannot \'meow\' while instance is in fake_attr fake_state"'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fail'
op|'('
string|'"webob.exc.HTTPConflict was not raised"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_img_metadata_properties_quota_valid_metadata
dedent|''
dedent|''
name|'def'
name|'test_check_img_metadata_properties_quota_valid_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'utils'
op|'.'
name|'get_test_admin_context'
op|'('
op|')'
newline|'\n'
name|'metadata1'
op|'='
op|'{'
string|'"key"'
op|':'
string|'"value"'
op|'}'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|'('
name|'ctxt'
op|','
name|'metadata1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'actual'
op|')'
newline|'\n'
nl|'\n'
name|'metadata2'
op|'='
op|'{'
string|'"key"'
op|':'
string|'"v"'
op|'*'
number|'260'
op|'}'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|'('
name|'ctxt'
op|','
name|'metadata2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'actual'
op|')'
newline|'\n'
nl|'\n'
name|'metadata3'
op|'='
op|'{'
string|'"key"'
op|':'
string|'""'
op|'}'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|'('
name|'ctxt'
op|','
name|'metadata3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_check_img_metadata_properties_quota_inv_metadata
dedent|''
name|'def'
name|'test_check_img_metadata_properties_quota_inv_metadata'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'ctxt'
op|'='
name|'utils'
op|'.'
name|'get_test_admin_context'
op|'('
op|')'
newline|'\n'
name|'metadata1'
op|'='
op|'{'
string|'"a"'
op|'*'
number|'260'
op|':'
string|'"value"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
nl|'\n'
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|','
name|'ctxt'
op|','
name|'metadata1'
op|')'
newline|'\n'
nl|'\n'
name|'metadata2'
op|'='
op|'{'
string|'""'
op|':'
string|'"value"'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
nl|'\n'
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|','
name|'ctxt'
op|','
name|'metadata2'
op|')'
newline|'\n'
nl|'\n'
name|'metadata3'
op|'='
string|'"invalid metadata"'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'webob'
op|'.'
name|'exc'
op|'.'
name|'HTTPBadRequest'
op|','
nl|'\n'
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|','
name|'ctxt'
op|','
name|'metadata3'
op|')'
newline|'\n'
nl|'\n'
name|'metadata4'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'metadata4'
op|')'
op|')'
newline|'\n'
name|'metadata5'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'common'
op|'.'
name|'check_img_metadata_properties_quota'
op|'('
name|'ctxt'
op|','
nl|'\n'
name|'metadata5'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_status_from_state
dedent|''
name|'def'
name|'test_status_from_state'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'vm_state'
name|'in'
op|'('
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'for'
name|'task_state'
name|'in'
op|'('
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'actual'
op|'='
name|'common'
op|'.'
name|'status_from_state'
op|'('
name|'vm_state'
op|','
name|'task_state'
op|')'
newline|'\n'
name|'expected'
op|'='
string|"'RESIZE'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_task_and_vm_state_from_status
dedent|''
dedent|''
dedent|''
name|'def'
name|'test_task_and_vm_state_from_status'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'fixture1'
op|'='
op|'['
string|"'reboot'"
op|']'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'task_and_vm_state_from_status'
op|'('
name|'fixture1'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|']'
op|','
op|'['
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
name|'fixture2'
op|'='
op|'['
string|"'resize'"
op|']'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'task_and_vm_state_from_status'
op|'('
name|'fixture2'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'('
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
op|'['
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
name|'fixture3'
op|'='
op|'['
string|"'resize'"
op|','
string|"'reboot'"
op|']'
newline|'\n'
name|'actual'
op|'='
name|'common'
op|'.'
name|'task_and_vm_state_from_status'
op|'('
name|'fixture3'
op|')'
newline|'\n'
name|'expected'
op|'='
op|'('
op|'['
name|'vm_states'
op|'.'
name|'ACTIVE'
op|','
name|'vm_states'
op|'.'
name|'STOPPED'
op|']'
op|','
nl|'\n'
op|'['
name|'task_states'
op|'.'
name|'REBOOT_PENDING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOT_STARTED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'REBOOTING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_FINISH'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATED'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_MIGRATING'
op|','
nl|'\n'
name|'task_states'
op|'.'
name|'RESIZE_PREP'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|','
name|'actual'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TestCollectionLinks
dedent|''
dedent|''
name|'class'
name|'TestCollectionLinks'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Tests the _get_collection_links method."""'
newline|'\n'
nl|'\n'
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.api.openstack.common.ViewBuilder._get_next_link'"
op|')'
newline|'\n'
DECL|member|test_items_less_than_limit
name|'def'
name|'test_items_less_than_limit'
op|'('
name|'self'
op|','
name|'href_link_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'items'
op|'='
op|'['
nl|'\n'
op|'{'
string|'"uuid"'
op|':'
string|'"123"'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'req'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'params'
op|'='
name|'mock'
op|'.'
name|'PropertyMock'
op|'('
name|'return_value'
op|'='
name|'dict'
op|'('
name|'limit'
op|'='
number|'10'
op|')'
op|')'
newline|'\n'
name|'type'
op|'('
name|'req'
op|')'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'common'
op|'.'
name|'ViewBuilder'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'builder'
op|'.'
name|'_get_collection_links'
op|'('
name|'req'
op|','
name|'items'
op|','
string|'"ignored"'
op|','
string|'"uuid"'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertFalse'
op|'('
name|'href_link_mock'
op|'.'
name|'called'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'results'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'0'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.api.openstack.common.ViewBuilder._get_next_link'"
op|')'
newline|'\n'
DECL|member|test_items_equals_given_limit
name|'def'
name|'test_items_equals_given_limit'
op|'('
name|'self'
op|','
name|'href_link_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'items'
op|'='
op|'['
nl|'\n'
op|'{'
string|'"uuid"'
op|':'
string|'"123"'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'req'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'params'
op|'='
name|'mock'
op|'.'
name|'PropertyMock'
op|'('
name|'return_value'
op|'='
name|'dict'
op|'('
name|'limit'
op|'='
number|'1'
op|')'
op|')'
newline|'\n'
name|'type'
op|'('
name|'req'
op|')'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'common'
op|'.'
name|'ViewBuilder'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'builder'
op|'.'
name|'_get_collection_links'
op|'('
name|'req'
op|','
name|'items'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|','
nl|'\n'
string|'"uuid"'
op|')'
newline|'\n'
nl|'\n'
name|'href_link_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'req'
op|','
string|'"123"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'results'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.api.openstack.common.ViewBuilder._get_next_link'"
op|')'
newline|'\n'
DECL|member|test_items_equals_default_limit
name|'def'
name|'test_items_equals_default_limit'
op|'('
name|'self'
op|','
name|'href_link_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'items'
op|'='
op|'['
nl|'\n'
op|'{'
string|'"uuid"'
op|':'
string|'"123"'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'req'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
name|'params'
op|'='
name|'mock'
op|'.'
name|'PropertyMock'
op|'('
name|'return_value'
op|'='
name|'dict'
op|'('
op|')'
op|')'
newline|'\n'
name|'type'
op|'('
name|'req'
op|')'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'osapi_max_limit'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'common'
op|'.'
name|'ViewBuilder'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'builder'
op|'.'
name|'_get_collection_links'
op|'('
name|'req'
op|','
name|'items'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|','
nl|'\n'
string|'"uuid"'
op|')'
newline|'\n'
nl|'\n'
name|'href_link_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'req'
op|','
string|'"123"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'results'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'mock'
op|'.'
name|'patch'
op|'('
string|"'nova.api.openstack.common.ViewBuilder._get_next_link'"
op|')'
newline|'\n'
DECL|member|test_items_equals_default_limit_with_given
name|'def'
name|'test_items_equals_default_limit_with_given'
op|'('
name|'self'
op|','
name|'href_link_mock'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'items'
op|'='
op|'['
nl|'\n'
op|'{'
string|'"uuid"'
op|':'
string|'"123"'
op|'}'
nl|'\n'
op|']'
newline|'\n'
name|'req'
op|'='
name|'mock'
op|'.'
name|'MagicMock'
op|'('
op|')'
newline|'\n'
comment|'# Given limit is greater than default max, only return default max'
nl|'\n'
name|'params'
op|'='
name|'mock'
op|'.'
name|'PropertyMock'
op|'('
name|'return_value'
op|'='
name|'dict'
op|'('
name|'limit'
op|'='
number|'2'
op|')'
op|')'
newline|'\n'
name|'type'
op|'('
name|'req'
op|')'
op|'.'
name|'params'
op|'='
name|'params'
newline|'\n'
name|'self'
op|'.'
name|'flags'
op|'('
name|'osapi_max_limit'
op|'='
number|'1'
op|')'
newline|'\n'
nl|'\n'
name|'builder'
op|'='
name|'common'
op|'.'
name|'ViewBuilder'
op|'('
op|')'
newline|'\n'
name|'results'
op|'='
name|'builder'
op|'.'
name|'_get_collection_links'
op|'('
name|'req'
op|','
name|'items'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|','
nl|'\n'
string|'"uuid"'
op|')'
newline|'\n'
nl|'\n'
name|'href_link_mock'
op|'.'
name|'assert_called_once_with'
op|'('
name|'req'
op|','
string|'"123"'
op|','
nl|'\n'
name|'mock'
op|'.'
name|'sentinel'
op|'.'
name|'coll_key'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertThat'
op|'('
name|'results'
op|','
name|'matchers'
op|'.'
name|'HasLength'
op|'('
number|'1'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataXMLDeserializationTest
dedent|''
dedent|''
name|'class'
name|'MetadataXMLDeserializationTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|deserializer
indent|'    '
name|'deserializer'
op|'='
name|'common'
op|'.'
name|'MetadataXMLDeserializer'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create
name|'def'
name|'test_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request_body'
op|'='
string|'"""\n        <metadata xmlns="http://docs.openstack.org/compute/api/v1.1">\n            <meta key=\'123\'>asdf</meta>\n            <meta key=\'567\'>jkl;</meta>\n        </metadata>"""'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'deserializer'
op|'.'
name|'deserialize'
op|'('
name|'request_body'
op|','
string|"'create'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|'"body"'
op|':'
op|'{'
string|'"metadata"'
op|':'
op|'{'
string|'"123"'
op|':'
string|'"asdf"'
op|','
string|'"567"'
op|':'
string|'"jkl;"'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create_empty
dedent|''
name|'def'
name|'test_create_empty'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request_body'
op|'='
string|'"""\n        <metadata xmlns="http://docs.openstack.org/compute/api/v1.1"/>"""'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'deserializer'
op|'.'
name|'deserialize'
op|'('
name|'request_body'
op|','
string|"'create'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|'"body"'
op|':'
op|'{'
string|'"metadata"'
op|':'
op|'{'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_all
dedent|''
name|'def'
name|'test_update_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request_body'
op|'='
string|'"""\n        <metadata xmlns="http://docs.openstack.org/compute/api/v1.1">\n            <meta key=\'123\'>asdf</meta>\n            <meta key=\'567\'>jkl;</meta>\n        </metadata>"""'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'deserializer'
op|'.'
name|'deserialize'
op|'('
name|'request_body'
op|','
string|"'update_all'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|'"body"'
op|':'
op|'{'
string|'"metadata"'
op|':'
op|'{'
string|'"123"'
op|':'
string|'"asdf"'
op|','
string|'"567"'
op|':'
string|'"jkl;"'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update
dedent|''
name|'def'
name|'test_update'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'request_body'
op|'='
string|'"""\n        <meta xmlns="http://docs.openstack.org/compute/api/v1.1"\n              key=\'123\'>asdf</meta>"""'
newline|'\n'
name|'output'
op|'='
name|'self'
op|'.'
name|'deserializer'
op|'.'
name|'deserialize'
op|'('
name|'request_body'
op|','
string|"'update'"
op|')'
newline|'\n'
name|'expected'
op|'='
op|'{'
string|'"body"'
op|':'
op|'{'
string|'"meta"'
op|':'
op|'{'
string|'"123"'
op|':'
string|'"asdf"'
op|'}'
op|'}'
op|'}'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'output'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MetadataXMLSerializationTest
dedent|''
dedent|''
name|'class'
name|'MetadataXMLSerializationTest'
op|'('
name|'test'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|member|test_xml_declaration
indent|'    '
name|'def'
name|'test_xml_declaration'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
string|"'one'"
op|':'
string|"'two'"
op|','
nl|'\n'
string|"'three'"
op|':'
string|"'four'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'has_dec'
op|'='
name|'output'
op|'.'
name|'startswith'
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>"'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'has_dec'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_index
dedent|''
name|'def'
name|'test_index'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
string|"'one'"
op|':'
string|"'two'"
op|','
nl|'\n'
string|"'three'"
op|':'
string|"'four'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'root'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'metadata_dict'
op|'='
name|'fixture'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'metadata_elems'
op|'='
name|'root'
op|'.'
name|'findall'
op|'('
string|"'{0}meta'"
op|'.'
name|'format'
op|'('
name|'NS'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'metadata_elems'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'metadata_elem'
name|'in'
name|'enumerate'
op|'('
name|'metadata_elems'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'metadata_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'text'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'str'
op|'('
name|'meta_value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_index_null
dedent|''
dedent|''
name|'def'
name|'test_index_null'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
name|'None'
op|':'
name|'None'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'root'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'metadata_dict'
op|'='
name|'fixture'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'metadata_elems'
op|'='
name|'root'
op|'.'
name|'findall'
op|'('
string|"'{0}meta'"
op|'.'
name|'format'
op|'('
name|'NS'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'metadata_elems'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'metadata_elem'
name|'in'
name|'enumerate'
op|'('
name|'metadata_elems'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'metadata_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'text'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'str'
op|'('
name|'meta_value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_index_unicode
dedent|''
dedent|''
name|'def'
name|'test_index_unicode'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
string|"u'three'"
op|':'
string|"u'Jos\\xe9'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'root'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'metadata_dict'
op|'='
name|'fixture'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'metadata_elems'
op|'='
name|'root'
op|'.'
name|'findall'
op|'('
string|"'{0}meta'"
op|'.'
name|'format'
op|'('
name|'NS'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'metadata_elems'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'metadata_elem'
name|'in'
name|'enumerate'
op|'('
name|'metadata_elems'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'metadata_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'metadata_elem'
op|'.'
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'meta_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_show
dedent|''
dedent|''
name|'def'
name|'test_show'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetaItemTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'meta'"
op|':'
op|'{'
nl|'\n'
string|"'one'"
op|':'
string|"'two'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'meta_dict'
op|'='
name|'fixture'
op|'['
string|"'meta'"
op|']'
newline|'\n'
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'meta_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'root'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'root'
op|'.'
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'meta_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_all
dedent|''
name|'def'
name|'test_update_all'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
string|"'key6'"
op|':'
string|"'value6'"
op|','
nl|'\n'
string|"'key4'"
op|':'
string|"'value4'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'root'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'metadata_dict'
op|'='
name|'fixture'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'metadata_elems'
op|'='
name|'root'
op|'.'
name|'findall'
op|'('
string|"'{0}meta'"
op|'.'
name|'format'
op|'('
name|'NS'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'metadata_elems'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'metadata_elem'
name|'in'
name|'enumerate'
op|'('
name|'metadata_elems'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'metadata_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'text'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'str'
op|'('
name|'meta_value'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_update_item
dedent|''
dedent|''
name|'def'
name|'test_update_item'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetaItemTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'meta'"
op|':'
op|'{'
nl|'\n'
string|"'one'"
op|':'
string|"'two'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'meta_dict'
op|'='
name|'fixture'
op|'['
string|"'meta'"
op|']'
newline|'\n'
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'meta_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
number|'0'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'root'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'root'
op|'.'
name|'text'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'meta_value'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_create
dedent|''
name|'def'
name|'test_create'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'serializer'
op|'='
name|'common'
op|'.'
name|'MetadataTemplate'
op|'('
op|')'
newline|'\n'
name|'fixture'
op|'='
op|'{'
nl|'\n'
string|"'metadata'"
op|':'
op|'{'
nl|'\n'
string|"'key9'"
op|':'
string|"'value9'"
op|','
nl|'\n'
string|"'key2'"
op|':'
string|"'value2'"
op|','
nl|'\n'
string|"'key1'"
op|':'
string|"'value1'"
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
name|'output'
op|'='
name|'serializer'
op|'.'
name|'serialize'
op|'('
name|'fixture'
op|')'
newline|'\n'
name|'root'
op|'='
name|'etree'
op|'.'
name|'XML'
op|'('
name|'output'
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'root'
op|','
string|"'metadata'"
op|')'
newline|'\n'
name|'metadata_dict'
op|'='
name|'fixture'
op|'['
string|"'metadata'"
op|']'
newline|'\n'
name|'metadata_elems'
op|'='
name|'root'
op|'.'
name|'findall'
op|'('
string|"'{0}meta'"
op|'.'
name|'format'
op|'('
name|'NS'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'metadata_elems'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'for'
name|'i'
op|','
name|'metadata_elem'
name|'in'
name|'enumerate'
op|'('
name|'metadata_elems'
op|')'
op|':'
newline|'\n'
indent|'            '
op|'('
name|'meta_key'
op|','
name|'meta_value'
op|')'
op|'='
name|'metadata_dict'
op|'.'
name|'items'
op|'('
op|')'
op|'['
name|'i'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|')'
op|','
name|'str'
op|'('
name|'meta_key'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'metadata_elem'
op|'.'
name|'text'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
op|','
name|'str'
op|'('
name|'meta_value'
op|')'
op|')'
newline|'\n'
dedent|''
name|'actual'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
name|'output'
op|'.'
name|'replace'
op|'('
string|'"  "'
op|','
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'expected'
op|'='
name|'minidom'
op|'.'
name|'parseString'
op|'('
string|'"""\n            <metadata xmlns="http://docs.openstack.org/compute/api/v1.1">\n                <meta key="key2">value2</meta>\n                <meta key="key9">value9</meta>\n                <meta key="key1">value1</meta>\n            </metadata>\n        """'
op|'.'
name|'replace'
op|'('
string|'"  "'
op|','
string|'""'
op|')'
op|'.'
name|'replace'
op|'('
string|'"\\n"'
op|','
string|'""'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'.'
name|'toxml'
op|'('
op|')'
op|','
name|'actual'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_metadata_deserializer
dedent|''
name|'def'
name|'test_metadata_deserializer'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Should throw a 400 error on corrupt xml."""'
newline|'\n'
name|'deserializer'
op|'='
name|'common'
op|'.'
name|'MetadataXMLDeserializer'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
nl|'\n'
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|','
nl|'\n'
name|'deserializer'
op|'.'
name|'deserialize'
op|','
nl|'\n'
name|'utils'
op|'.'
name|'killer_xml_body'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

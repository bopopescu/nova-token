begin_unit
comment|'# Copyright 2011 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'from'
name|'lxml'
name|'import'
name|'etree'
newline|'\n'
name|'from'
name|'xml'
op|'.'
name|'dom'
name|'import'
name|'minidom'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'openstack'
name|'import'
name|'xmlutil'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'test'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'tests'
name|'import'
name|'utils'
name|'as'
name|'tests_utils'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SelectorTest
name|'class'
name|'SelectorTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|variable|obj_for_test
indent|'    '
name|'obj_for_test'
op|'='
op|'{'
nl|'\n'
string|"'test'"
op|':'
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'test'"
op|','
nl|'\n'
string|"'values'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|']'
op|','
nl|'\n'
string|"'attrs'"
op|':'
op|'{'
nl|'\n'
string|"'foo'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'bar'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'baz'"
op|':'
number|'3'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|test_repr
name|'def'
name|'test_repr'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'sel'
op|')'
op|','
string|'"Selector()"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_empty_selector
dedent|''
name|'def'
name|'test_empty_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'EmptyStringSelector'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sel'
op|'.'
name|'chain'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
name|'self'
op|'.'
name|'obj_for_test'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
nl|'\n'
name|'repr'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
nl|'\n'
string|'"{\'test\': {\'values\': [1, 2, 3], \'name\': \'test\', \'attrs\': "'
nl|'\n'
string|'"{\'baz\': 3, \'foo\': 1, \'bar\': 2}}}"'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dict_selector
dedent|''
name|'def'
name|'test_dict_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sel'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
nl|'\n'
name|'self'
op|'.'
name|'obj_for_test'
op|'['
string|"'test'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_datum_selector
dedent|''
name|'def'
name|'test_datum_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'test'"
op|','
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sel'
op|'.'
name|'chain'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'1'
op|']'
op|','
string|"'name'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_list_selector
dedent|''
name|'def'
name|'test_list_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'test'"
op|','
string|"'values'"
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sel'
op|'.'
name|'chain'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'1'
op|']'
op|','
string|"'values'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'2'
op|']'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_items_selector
dedent|''
name|'def'
name|'test_items_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'test'"
op|','
string|"'attrs'"
op|','
name|'xmlutil'
op|'.'
name|'get_items'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'sel'
op|'.'
name|'chain'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'chain'
op|'['
number|'2'
op|']'
op|','
name|'xmlutil'
op|'.'
name|'get_items'
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|'['
string|"'test'"
op|']'
op|'['
string|"'attrs'"
op|']'
op|'['
name|'key'
op|']'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_missing_key_selector
dedent|''
dedent|''
name|'def'
name|'test_missing_key_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'test2'"
op|','
string|"'attrs'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'sel'
op|','
name|'self'
op|'.'
name|'obj_for_test'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_constant_selector
dedent|''
name|'def'
name|'test_constant_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
string|"'Foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'.'
name|'value'
op|','
string|"'Foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'sel'
op|'('
name|'self'
op|'.'
name|'obj_for_test'
op|')'
op|','
string|"'Foobar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'repr'
op|'('
name|'sel'
op|')'
op|','
string|'"\'Foobar\'"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateElementTest
dedent|''
dedent|''
name|'class'
name|'TemplateElementTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_element_initial_attributes
indent|'    '
name|'def'
name|'test_element_initial_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element with some attributes'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attrib'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
op|','
nl|'\n'
name|'c'
op|'='
number|'4'
op|','
name|'d'
op|'='
number|'5'
op|','
name|'e'
op|'='
number|'6'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify all the attributes are as expected'
nl|'\n'
name|'expected'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'4'
op|','
name|'d'
op|'='
number|'5'
op|','
name|'e'
op|'='
number|'6'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
name|'k'
op|']'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'repr'
op|'('
name|'elem'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_get_attributes
dedent|''
name|'def'
name|'test_element_get_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element with some attributes'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attrib'
op|'='
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that get() retrieves the attributes'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'expected'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'get'
op|'('
name|'k'
op|')'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_set_attributes
dedent|''
dedent|''
name|'def'
name|'test_element_set_attributes'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
name|'None'
op|','
name|'b'
op|'='
string|"'foo'"
op|','
name|'c'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'foo'"
op|','
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a bare template element with no attributes'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Set the attribute values'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'attrs'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'elem'
op|'.'
name|'set'
op|'('
name|'k'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now verify what got set'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
string|"'a'"
op|']'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
string|"'a'"
op|']'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'a'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
string|"'b'"
op|']'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
string|"'b'"
op|']'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'attrib'
op|'['
string|"'c'"
op|']'
op|','
name|'attrs'
op|'['
string|"'c'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_attribute_keys
dedent|''
name|'def'
name|'test_element_attribute_keys'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
number|'1'
op|','
name|'b'
op|'='
number|'2'
op|','
name|'c'
op|'='
number|'3'
op|','
name|'d'
op|'='
number|'4'
op|')'
newline|'\n'
name|'expected'
op|'='
name|'set'
op|'('
name|'attrs'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element with some attributes'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attrib'
op|'='
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now verify keys'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'set'
op|'('
name|'elem'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
op|','
name|'expected'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_attribute_items
dedent|''
name|'def'
name|'test_element_attribute_items'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
number|'1'
op|')'
op|','
nl|'\n'
name|'b'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
number|'2'
op|')'
op|','
nl|'\n'
name|'c'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
number|'3'
op|')'
op|')'
newline|'\n'
name|'keys'
op|'='
name|'set'
op|'('
name|'expected'
op|'.'
name|'keys'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element with some attributes'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attrib'
op|'='
name|'expected'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now verify items'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'elem'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected'
op|'['
name|'k'
op|']'
op|','
name|'v'
op|')'
newline|'\n'
name|'keys'
op|'.'
name|'remove'
op|'('
name|'k'
op|')'
newline|'\n'
nl|'\n'
comment|'# Did we visit all keys?'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'keys'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_selector_none
dedent|''
name|'def'
name|'test_element_selector_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element with no selector'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'selector'
op|'.'
name|'chain'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_selector_string
dedent|''
name|'def'
name|'test_element_selector_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element with a string selector'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'selector'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'selector'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_selector
dedent|''
name|'def'
name|'test_element_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element with an explicit selector'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
name|'sel'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'selector'
op|','
name|'sel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_subselector_none
dedent|''
name|'def'
name|'test_element_subselector_none'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element with no subselector'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'elem'
op|'.'
name|'subselector'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_subselector_string
dedent|''
name|'def'
name|'test_element_subselector_string'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element with a string subselector'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'subselector'
op|'='
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'subselector'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'subselector'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_subselector
dedent|''
name|'def'
name|'test_element_subselector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'a'"
op|','
string|"'b'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element with an explicit subselector'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'subselector'
op|'='
name|'sel'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'subselector'
op|','
name|'sel'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_append_child
dedent|''
name|'def'
name|'test_element_append_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create an element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the element starts off empty'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a child element'
nl|'\n'
name|'child'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Append the child to the parent'
nl|'\n'
name|'elem'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the child was added'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
number|'0'
op|']'
op|','
name|'child'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
string|"'child'"
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
string|"'child'"
op|']'
op|','
name|'child'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that multiple children of the same name are rejected'
nl|'\n'
name|'child2'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'elem'
op|'.'
name|'append'
op|','
name|'child2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_extend_children
dedent|''
name|'def'
name|'test_element_extend_children'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create an element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the element starts off empty'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a few children'
nl|'\n'
name|'children'
op|'='
op|'['
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child1'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child2'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child3'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# Extend the parent by those children'
nl|'\n'
name|'elem'
op|'.'
name|'extend'
op|'('
name|'children'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify that the children were added'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'children'
op|'['
name|'idx'
op|']'
op|','
name|'elem'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'children'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
name|'children'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|']'
op|','
name|'children'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that multiple children of the same name are rejected'
nl|'\n'
dedent|''
name|'children2'
op|'='
op|'['
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child4'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child1'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'elem'
op|'.'
name|'extend'
op|','
name|'children2'
op|')'
newline|'\n'
nl|'\n'
comment|'# Also ensure that child4 was not added'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
op|'-'
number|'1'
op|']'
op|'.'
name|'tag'
op|','
string|"'child3'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_insert_child
dedent|''
name|'def'
name|'test_element_insert_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create an element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the element starts off empty'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a few children'
nl|'\n'
name|'children'
op|'='
op|'['
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child1'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child2'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child3'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# Extend the parent by those children'
nl|'\n'
name|'elem'
op|'.'
name|'extend'
op|'('
name|'children'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a child to insert'
nl|'\n'
name|'child'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child4'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Insert it'
nl|'\n'
name|'elem'
op|'.'
name|'insert'
op|'('
number|'1'
op|','
name|'child'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the child was inserted in the right place'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
name|'children'
op|'.'
name|'insert'
op|'('
number|'1'
op|','
name|'child'
op|')'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'children'
op|'['
name|'idx'
op|']'
op|','
name|'elem'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertIn'
op|'('
name|'children'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
name|'children'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|']'
op|','
name|'children'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that multiple children of the same name are rejected'
nl|'\n'
dedent|''
name|'child2'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'elem'
op|'.'
name|'insert'
op|','
number|'2'
op|','
name|'child2'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_remove_child
dedent|''
name|'def'
name|'test_element_remove_child'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create an element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure the element starts off empty'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a few children'
nl|'\n'
name|'children'
op|'='
op|'['
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child1'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child2'"
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child3'"
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# Extend the parent by those children'
nl|'\n'
name|'elem'
op|'.'
name|'extend'
op|'('
name|'children'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a test child to remove'
nl|'\n'
name|'child'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child2'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to remove it'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'elem'
op|'.'
name|'remove'
op|','
name|'child'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that no child was removed'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now remove a legitimate child'
nl|'\n'
name|'elem'
op|'.'
name|'remove'
op|'('
name|'children'
op|'['
number|'1'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that the child was removed'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
number|'0'
op|']'
op|','
name|'children'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'['
number|'1'
op|']'
op|','
name|'children'
op|'['
number|'2'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
string|"'child2'"
name|'in'
name|'elem'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure the child cannot be retrieved by name'
nl|'\n'
DECL|function|get_key
name|'def'
name|'get_key'
op|'('
name|'elem'
op|','
name|'key'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'elem'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'KeyError'
op|','
name|'get_key'
op|','
name|'elem'
op|','
string|"'child2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_element_text
dedent|''
name|'def'
name|'test_element_text'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create an element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Ensure that it has no text'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'elem'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try setting it to a string and ensure it becomes a selector'
nl|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
string|"'test'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'hasattr'
op|'('
name|'elem'
op|'.'
name|'text'
op|','
string|"'chain'"
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'text'
op|'.'
name|'chain'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'text'
op|'.'
name|'chain'
op|'['
number|'0'
op|']'
op|','
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Try resetting the text to None'
nl|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
name|'None'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'elem'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now make up a selector and try setting the text to that'
nl|'\n'
name|'sel'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
name|'sel'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'text'
op|','
name|'sel'
op|')'
newline|'\n'
nl|'\n'
comment|'# Finally, try deleting the text and see what happens'
nl|'\n'
name|'del'
name|'elem'
op|'.'
name|'text'
newline|'\n'
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'elem'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_apply_attrs
dedent|''
name|'def'
name|'test_apply_attrs'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element'
nl|'\n'
indent|'        '
name|'attrs'
op|'='
name|'dict'
op|'('
name|'attr1'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'1'
op|')'
op|','
nl|'\n'
name|'attr2'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'2'
op|')'
op|')'
newline|'\n'
name|'tmpl_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attrib'
op|'='
name|'attrs'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create an etree element'
nl|'\n'
name|'elem'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Apply the template to the element'
nl|'\n'
name|'tmpl_elem'
op|'.'
name|'apply'
op|'('
name|'elem'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, verify the correct attributes were set'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'elem'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'attrs'
op|'['
name|'k'
op|']'
op|'.'
name|'value'
op|')'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_apply_text
dedent|''
dedent|''
name|'def'
name|'test_apply_text'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element'
nl|'\n'
indent|'        '
name|'tmpl_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl_elem'
op|'.'
name|'text'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create an etree element'
nl|'\n'
name|'elem'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'test'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Apply the template to the element'
nl|'\n'
name|'tmpl_elem'
op|'.'
name|'apply'
op|'('
name|'elem'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, verify the text was set'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'tmpl_elem'
op|'.'
name|'text'
op|'.'
name|'value'
op|')'
op|','
name|'elem'
op|'.'
name|'text'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__render
dedent|''
name|'def'
name|'test__render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'attrs'
op|'='
name|'dict'
op|'('
name|'attr1'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'1'
op|')'
op|','
nl|'\n'
name|'attr2'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'2'
op|')'
op|','
nl|'\n'
name|'attr3'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
number|'3'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a master template element'
nl|'\n'
name|'master_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attr1'
op|'='
name|'attrs'
op|'['
string|"'attr1'"
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a couple of slave template element'
nl|'\n'
name|'slave_elems'
op|'='
op|'['
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attr2'
op|'='
name|'attrs'
op|'['
string|"'attr2'"
op|']'
op|')'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attr3'
op|'='
name|'attrs'
op|'['
string|"'attr3'"
op|']'
op|')'
op|','
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
comment|'# Try the render'
nl|'\n'
name|'elem'
op|'='
name|'master_elem'
op|'.'
name|'_render'
op|'('
name|'None'
op|','
name|'None'
op|','
name|'slave_elems'
op|','
name|'None'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the particulars of the render'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'tag'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'nsmap'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'elem'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'str'
op|'('
name|'attrs'
op|'['
name|'k'
op|']'
op|'.'
name|'value'
op|')'
op|','
name|'v'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a parent for the element to be rendered'
nl|'\n'
dedent|''
name|'parent'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'parent'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Try the render again...'
nl|'\n'
name|'elem'
op|'='
name|'master_elem'
op|'.'
name|'_render'
op|'('
name|'parent'
op|','
name|'None'
op|','
name|'slave_elems'
op|','
name|'dict'
op|'('
name|'a'
op|'='
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the particulars of the render'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'parent'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'['
number|'0'
op|']'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elem'
op|'.'
name|'nsmap'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'nsmap'
op|'['
string|"'a'"
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_render
dedent|''
name|'def'
name|'test_render'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element'
nl|'\n'
indent|'        '
name|'tmpl_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl_elem'
op|'.'
name|'text'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|"# Create the object we're going to render"
nl|'\n'
name|'obj'
op|'='
op|'['
string|"'elem1'"
op|','
string|"'elem2'"
op|','
string|"'elem3'"
op|','
string|"'elem4'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Try a render with no object'
nl|'\n'
name|'elems'
op|'='
name|'tmpl_elem'
op|'.'
name|'render'
op|'('
name|'None'
op|','
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elems'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try a render with one object'
nl|'\n'
name|'elems'
op|'='
name|'tmpl_elem'
op|'.'
name|'render'
op|'('
name|'None'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elems'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elems'
op|'['
number|'0'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'text'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elems'
op|'['
number|'0'
op|']'
op|'['
number|'1'
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, try rendering an object with multiple entries'
nl|'\n'
name|'parent'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'parent'"
op|')'
newline|'\n'
name|'elems'
op|'='
name|'tmpl_elem'
op|'.'
name|'render'
op|'('
name|'parent'
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elems'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check the results'
nl|'\n'
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elems'
op|'['
name|'idx'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'text'
op|','
name|'obj'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elems'
op|'['
name|'idx'
op|']'
op|'['
number|'1'
op|']'
op|','
name|'obj'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check with a subselector'
nl|'\n'
dedent|''
name|'tmpl_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
nl|'\n'
string|"'test'"
op|','
nl|'\n'
name|'subselector'
op|'='
name|'xmlutil'
op|'.'
name|'ConstantSelector'
op|'('
string|"'foo'"
op|')'
op|')'
newline|'\n'
name|'parent'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'parent'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Try a render with no object'
nl|'\n'
name|'elems'
op|'='
name|'tmpl_elem'
op|'.'
name|'render'
op|'('
name|'parent'
op|','
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elems'
op|')'
op|','
number|'4'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_subelement
dedent|''
name|'def'
name|'test_subelement'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Try the SubTemplateElement constructor'
nl|'\n'
indent|'        '
name|'parent'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'None'
op|','
string|"'parent'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'.'
name|'tag'
op|','
string|"'parent'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'parent'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now try it with a parent element'
nl|'\n'
name|'child'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'parent'
op|','
string|"'child'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'child'
op|'.'
name|'tag'
op|','
string|"'child'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'parent'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'parent'
op|'['
number|'0'
op|']'
op|','
name|'child'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap
dedent|''
name|'def'
name|'test_wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# These are strange methods, but they make things easier'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'unwrap'
op|'('
op|')'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'wrap'
op|'('
op|')'
op|'.'
name|'root'
op|','
name|'elem'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_dyntag
dedent|''
name|'def'
name|'test_dyntag'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'obj'
op|'='
op|'['
string|"'a'"
op|','
string|"'b'"
op|','
string|"'c'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Create a template element with a dynamic tag'
nl|'\n'
name|'tmpl_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try the render'
nl|'\n'
name|'parent'
op|'='
name|'etree'
op|'.'
name|'Element'
op|'('
string|"'parent'"
op|')'
newline|'\n'
name|'elems'
op|'='
name|'tmpl_elem'
op|'.'
name|'render'
op|'('
name|'parent'
op|','
name|'obj'
op|')'
newline|'\n'
nl|'\n'
comment|'# Verify the particulars of the render'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'elems'
op|')'
op|','
name|'len'
op|'('
name|'obj'
op|')'
op|')'
newline|'\n'
name|'for'
name|'idx'
name|'in'
name|'range'
op|'('
name|'len'
op|'('
name|'obj'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elems'
op|'['
name|'idx'
op|']'
op|'['
number|'0'
op|']'
op|'.'
name|'tag'
op|','
name|'obj'
op|'['
name|'idx'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_tree
dedent|''
dedent|''
name|'def'
name|'test_tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Create a template element'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'attr3'
op|'='
string|"'attr3'"
op|')'
newline|'\n'
name|'elem'
op|'.'
name|'text'
op|'='
string|"'test'"
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'tree'
op|'('
op|')'
op|','
nl|'\n'
string|'"<test !selector=Selector() "'
nl|'\n'
string|'"!text=Selector(\'test\',) "'
nl|'\n'
string|'"attr3=Selector(\'attr3\',)"'
nl|'\n'
string|'"/>"'
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a template element'
nl|'\n'
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test2'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Create a child element'
nl|'\n'
name|'child'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'child'"
op|')'
newline|'\n'
nl|'\n'
comment|'# Append the child to the parent'
nl|'\n'
name|'elem'
op|'.'
name|'append'
op|'('
name|'child'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'elem'
op|'.'
name|'tree'
op|'('
op|')'
op|','
nl|'\n'
string|'"<test2 !selector=Selector()>"'
nl|'\n'
string|'"<child !selector=Selector()/></test2>"'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateTest
dedent|''
dedent|''
name|'class'
name|'TemplateTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_tree
indent|'    '
name|'def'
name|'test_tree'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'Template'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'tmpl'
op|'.'
name|'tree'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_wrap
dedent|''
name|'def'
name|'test_wrap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# These are strange methods, but they make things easier'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'Template'
op|'('
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'unwrap'
op|'('
op|')'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'wrap'
op|'('
op|')'
op|','
name|'tmpl'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__siblings
dedent|''
name|'def'
name|'test__siblings'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set up a basic template'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'Template'
op|'('
name|'elem'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check that we get the right siblings'
nl|'\n'
name|'siblings'
op|'='
name|'tmpl'
op|'.'
name|'_siblings'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'siblings'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'siblings'
op|'['
number|'0'
op|']'
op|','
name|'elem'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__nsmap
dedent|''
name|'def'
name|'test__nsmap'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set up a basic template'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'Template'
op|'('
name|'elem'
op|','
name|'nsmap'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
string|'"foo"'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Check out that we get the right namespace dictionary'
nl|'\n'
name|'nsmap'
op|'='
name|'tmpl'
op|'.'
name|'_nsmap'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'id'
op|'('
name|'nsmap'
op|')'
op|','
name|'id'
op|'('
name|'tmpl'
op|'.'
name|'nsmap'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'nsmap'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'nsmap'
op|'['
string|"'a'"
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_master_attach
dedent|''
name|'def'
name|'test_master_attach'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Set up a master template'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'elem'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure it has a root but no slaves'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'root'
op|','
name|'elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'repr'
op|'('
name|'tmpl'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to attach an invalid slave'
nl|'\n'
name|'bad_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test2'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'tmpl'
op|'.'
name|'attach'
op|','
name|'bad_elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to attach an invalid and a valid slave'
nl|'\n'
name|'good_elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
name|'tmpl'
op|'.'
name|'attach'
op|','
name|'good_elem'
op|','
name|'bad_elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try to attach an inapplicable template'
nl|'\n'
DECL|class|InapplicableTemplate
name|'class'
name|'InapplicableTemplate'
op|'('
name|'xmlutil'
op|'.'
name|'Template'
op|')'
op|':'
newline|'\n'
DECL|member|apply
indent|'            '
name|'def'
name|'apply'
op|'('
name|'self'
op|','
name|'master'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'inapp_tmpl'
op|'='
name|'InapplicableTemplate'
op|'('
name|'good_elem'
op|')'
newline|'\n'
name|'tmpl'
op|'.'
name|'attach'
op|'('
name|'inapp_tmpl'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
number|'0'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now try attaching an applicable template'
nl|'\n'
name|'tmpl'
op|'.'
name|'attach'
op|'('
name|'good_elem'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|'['
number|'0'
op|']'
op|'.'
name|'root'
op|','
name|'good_elem'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_master_copy
dedent|''
name|'def'
name|'test_master_copy'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Construct a master template'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'elem'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Give it a slave'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'tmpl'
op|'.'
name|'attach'
op|'('
name|'slave'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a copy'
nl|'\n'
name|'copy'
op|'='
name|'tmpl'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Check to see if we actually managed a copy'
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'tmpl'
op|','
name|'copy'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'root'
op|','
name|'copy'
op|'.'
name|'root'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'version'
op|','
name|'copy'
op|'.'
name|'version'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'id'
op|'('
name|'tmpl'
op|'.'
name|'nsmap'
op|')'
op|','
name|'id'
op|'('
name|'copy'
op|'.'
name|'nsmap'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'id'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
name|'id'
op|'('
name|'copy'
op|'.'
name|'slaves'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|')'
op|','
name|'len'
op|'('
name|'copy'
op|'.'
name|'slaves'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl'
op|'.'
name|'slaves'
op|'['
number|'0'
op|']'
op|','
name|'copy'
op|'.'
name|'slaves'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_slave_apply
dedent|''
name|'def'
name|'test_slave_apply'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Construct a master template'
nl|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'elem'
op|','
number|'3'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with applicable minimum version'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'repr'
op|'('
name|'slave'
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with equal minimum version'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with inapplicable minimum version'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with applicable version range'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'2'
op|','
number|'4'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with low version range'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'1'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with high version range'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'4'
op|','
number|'5'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'False'
op|')'
newline|'\n'
nl|'\n'
comment|'# Construct a slave template with matching version range'
nl|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'3'
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'slave'
op|'.'
name|'apply'
op|'('
name|'master'
op|')'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__serialize
dedent|''
name|'def'
name|'test__serialize'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
nl|'\n'
string|"'test'"
op|':'
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'foobar'"
op|','
nl|'\n'
string|"'values'"
op|':'
op|'['
number|'1'
op|','
number|'2'
op|','
number|'3'
op|','
number|'4'
op|']'
op|','
nl|'\n'
string|"'attrs'"
op|':'
op|'{'
nl|'\n'
string|"'a'"
op|':'
number|'1'
op|','
nl|'\n'
string|"'b'"
op|':'
number|'2'
op|','
nl|'\n'
string|"'c'"
op|':'
number|'3'
op|','
nl|'\n'
string|"'d'"
op|':'
number|'4'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
string|"'image'"
op|':'
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'image_foobar'"
op|','
nl|'\n'
string|"'id'"
op|':'
number|'42'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
comment|'# Set up our master template'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
string|"'test'"
op|','
nl|'\n'
name|'name'
op|'='
string|"'name'"
op|')'
newline|'\n'
name|'value'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'value'"
op|','
name|'selector'
op|'='
string|"'values'"
op|')'
newline|'\n'
name|'value'
op|'.'
name|'text'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
newline|'\n'
name|'attrs'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'attrs'"
op|','
name|'selector'
op|'='
string|"'attrs'"
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'attrs'
op|','
string|"'attr'"
op|','
name|'selector'
op|'='
name|'xmlutil'
op|'.'
name|'get_items'
op|','
nl|'\n'
name|'key'
op|'='
number|'0'
op|','
name|'value'
op|'='
number|'1'
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'dict'
op|'('
name|'f'
op|'='
string|"'foo'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Set up our slave template'
nl|'\n'
name|'root_slave'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
string|"'test'"
op|')'
newline|'\n'
name|'image'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root_slave'
op|','
string|"'image'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'image'"
op|','
name|'id'
op|'='
string|"'id'"
op|')'
newline|'\n'
name|'image'
op|'.'
name|'text'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
string|"'name'"
op|')'
newline|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'root_slave'
op|','
number|'1'
op|','
name|'nsmap'
op|'='
name|'dict'
op|'('
name|'b'
op|'='
string|"'bar'"
op|')'
op|')'
newline|'\n'
nl|'\n'
comment|'# Attach the slave to the master...'
nl|'\n'
name|'master'
op|'.'
name|'attach'
op|'('
name|'slave'
op|')'
newline|'\n'
nl|'\n'
comment|'# Try serializing our object'
nl|'\n'
name|'siblings'
op|'='
name|'master'
op|'.'
name|'_siblings'
op|'('
op|')'
newline|'\n'
name|'nsmap'
op|'='
name|'master'
op|'.'
name|'_nsmap'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'_serialize'
op|'('
name|'None'
op|','
name|'obj'
op|','
name|'siblings'
op|','
name|'nsmap'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now we get to manually walk the element tree...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'tag'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'len'
op|'('
name|'result'
op|'.'
name|'nsmap'
op|')'
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'nsmap'
op|'['
string|"'f'"
op|']'
op|','
string|"'foo'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'nsmap'
op|'['
string|"'b'"
op|']'
op|','
string|"'bar'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'get'
op|'('
string|"'name'"
op|')'
op|','
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
name|'for'
name|'idx'
op|','
name|'val'
name|'in'
name|'enumerate'
op|'('
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'values'"
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|','
string|"'value'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'text'
op|','
name|'str'
op|'('
name|'val'
op|')'
op|')'
newline|'\n'
dedent|''
name|'idx'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|','
string|"'attrs'"
op|')'
newline|'\n'
name|'for'
name|'attr'
name|'in'
name|'result'
op|'['
name|'idx'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'attr'
op|'.'
name|'tag'
op|','
string|"'attr'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'attr'
op|'.'
name|'get'
op|'('
string|"'value'"
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'attrs'"
op|']'
op|'['
name|'attr'
op|'.'
name|'get'
op|'('
string|"'key'"
op|')'
op|']'
op|')'
op|')'
newline|'\n'
dedent|''
name|'idx'
op|'+='
number|'1'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'tag'
op|','
string|"'image'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|','
nl|'\n'
name|'str'
op|'('
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'image'"
op|']'
op|'['
string|"'id'"
op|']'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
name|'idx'
op|']'
op|'.'
name|'text'
op|','
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'image'"
op|']'
op|'['
string|"'name'"
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'templ'
op|'='
name|'xmlutil'
op|'.'
name|'Template'
op|'('
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'templ'
op|'.'
name|'serialize'
op|'('
name|'None'
op|')'
op|','
string|"''"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_serialize_with_colon_tagname_support
dedent|''
name|'def'
name|'test_serialize_with_colon_tagname_support'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
string|"'extra_specs'"
op|':'
op|'{'
string|"'foo:bar'"
op|':'
string|"'999'"
op|'}'
op|'}'
newline|'\n'
name|'expected_xml'
op|'='
op|'('
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|'\'<extra_specs><foo:bar xmlns:foo="foo">999</foo:bar>\''
nl|'\n'
string|"'</extra_specs>'"
op|')'
op|')'
newline|'\n'
comment|'# Set up our master template'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'extra_specs'"
op|','
name|'selector'
op|'='
string|"'extra_specs'"
op|','
nl|'\n'
name|'colon_ns'
op|'='
name|'True'
op|')'
newline|'\n'
name|'value'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root'
op|','
string|"'foo:bar'"
op|','
name|'selector'
op|'='
string|"'foo:bar'"
op|','
nl|'\n'
name|'colon_ns'
op|'='
name|'True'
op|')'
newline|'\n'
name|'value'
op|'.'
name|'text'
op|'='
name|'xmlutil'
op|'.'
name|'Selector'
op|'('
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'serialize'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_xml'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test__serialize_with_empty_datum_selector
dedent|''
name|'def'
name|'test__serialize_with_empty_datum_selector'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
nl|'\n'
string|"'test'"
op|':'
op|'{'
nl|'\n'
string|"'name'"
op|':'
string|"'foobar'"
op|','
nl|'\n'
string|"'image'"
op|':'
string|"''"
nl|'\n'
op|'}'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
string|"'test'"
op|','
nl|'\n'
name|'name'
op|'='
string|"'name'"
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'root_slave'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|','
name|'selector'
op|'='
string|"'test'"
op|')'
newline|'\n'
name|'image'
op|'='
name|'xmlutil'
op|'.'
name|'SubTemplateElement'
op|'('
name|'root_slave'
op|','
string|"'image'"
op|','
nl|'\n'
name|'selector'
op|'='
string|"'image'"
op|')'
newline|'\n'
name|'image'
op|'.'
name|'set'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'xmlutil'
op|'.'
name|'make_links'
op|'('
name|'image'
op|','
string|"'links'"
op|')'
newline|'\n'
name|'slave'
op|'='
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'root_slave'
op|','
number|'1'
op|')'
newline|'\n'
name|'master'
op|'.'
name|'attach'
op|'('
name|'slave'
op|')'
newline|'\n'
nl|'\n'
name|'siblings'
op|'='
name|'master'
op|'.'
name|'_siblings'
op|'('
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'_serialize'
op|'('
name|'None'
op|','
name|'obj'
op|','
name|'siblings'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'.'
name|'tag'
op|','
string|"'test'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'tag'
op|','
string|"'image'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|'['
number|'0'
op|']'
op|'.'
name|'get'
op|'('
string|"'id'"
op|')'
op|','
name|'str'
op|'('
name|'obj'
op|'['
string|"'test'"
op|']'
op|'['
string|"'image'"
op|']'
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MasterTemplateBuilder
dedent|''
dedent|''
name|'class'
name|'MasterTemplateBuilder'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'elem'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SlaveTemplateBuilder
dedent|''
dedent|''
name|'class'
name|'SlaveTemplateBuilder'
op|'('
name|'xmlutil'
op|'.'
name|'TemplateBuilder'
op|')'
op|':'
newline|'\n'
DECL|member|construct
indent|'    '
name|'def'
name|'construct'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'test'"
op|')'
newline|'\n'
name|'return'
name|'xmlutil'
op|'.'
name|'SlaveTemplate'
op|'('
name|'elem'
op|','
number|'1'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|TemplateBuilderTest
dedent|''
dedent|''
name|'class'
name|'TemplateBuilderTest'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_master_template_builder
indent|'    '
name|'def'
name|'test_master_template_builder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure the template hasn't been built yet"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, construct the template'
nl|'\n'
name|'tmpl1'
op|'='
name|'MasterTemplateBuilder'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure that there is a template cached...'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure it wasn't what was returned..."
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
op|','
name|'tmpl1'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure it doesn't get rebuilt"
nl|'\n'
name|'cached'
op|'='
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
newline|'\n'
name|'tmpl2'
op|'='
name|'MasterTemplateBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
op|','
name|'cached'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure we're always getting fresh copies"
nl|'\n'
name|'self'
op|'.'
name|'assertNotEqual'
op|'('
name|'tmpl1'
op|','
name|'tmpl2'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure we can override the copying behavior'
nl|'\n'
name|'tmpl3'
op|'='
name|'MasterTemplateBuilder'
op|'('
name|'False'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'MasterTemplateBuilder'
op|'.'
name|'_tmpl'
op|','
name|'tmpl3'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_slave_template_builder
dedent|''
name|'def'
name|'test_slave_template_builder'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|"# Make sure the template hasn't been built yet"
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'assertIsNone'
op|'('
name|'SlaveTemplateBuilder'
op|'.'
name|'_tmpl'
op|')'
newline|'\n'
nl|'\n'
comment|'# Now, construct the template'
nl|'\n'
name|'tmpl1'
op|'='
name|'SlaveTemplateBuilder'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure there is a template cached...'
nl|'\n'
name|'self'
op|'.'
name|'assertIsNotNone'
op|'('
name|'SlaveTemplateBuilder'
op|'.'
name|'_tmpl'
op|')'
newline|'\n'
nl|'\n'
comment|'# Make sure it was what was returned...'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'SlaveTemplateBuilder'
op|'.'
name|'_tmpl'
op|','
name|'tmpl1'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure it doesn't get rebuilt"
nl|'\n'
name|'tmpl2'
op|'='
name|'SlaveTemplateBuilder'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'SlaveTemplateBuilder'
op|'.'
name|'_tmpl'
op|','
name|'tmpl1'
op|')'
newline|'\n'
nl|'\n'
comment|"# Make sure we're always getting the cached copy"
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'tmpl1'
op|','
name|'tmpl2'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|MiscellaneousXMLUtilTests
dedent|''
dedent|''
name|'class'
name|'MiscellaneousXMLUtilTests'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_validate_schema
indent|'    '
name|'def'
name|'test_validate_schema'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml'
op|'='
string|'\'\'\'<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<metadata xmlns="http://docs.openstack.org/compute/api/v1.1">\n<meta key="key6">value6</meta><meta key="key4">value4</meta>\n</metadata>\n\'\'\''
newline|'\n'
name|'xmlutil'
op|'.'
name|'validate_schema'
op|'('
name|'xml'
op|','
string|"'metadata'"
op|')'
newline|'\n'
comment|'# No way to test the return value of validate_schema.'
nl|'\n'
comment|'# It just raises an exception when something is wrong.'
nl|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_make_links
dedent|''
name|'def'
name|'test_make_links'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'elem'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'image'"
op|','
name|'selector'
op|'='
string|"'image'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'repr'
op|'('
name|'xmlutil'
op|'.'
name|'make_links'
op|'('
name|'elem'
op|','
string|"'links'"
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_make_flat_dict
dedent|''
name|'def'
name|'test_make_flat_dict'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'expected_xml'
op|'='
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|"'<wrapper><a>foo</a><b>bar</b></wrapper>'"
op|')'
newline|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'wrapper'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'tmpl'
op|'.'
name|'serialize'
op|'('
name|'dict'
op|'('
name|'wrapper'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
string|"'foo'"
op|','
name|'b'
op|'='
string|"'bar'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
name|'expected_xml'
op|')'
newline|'\n'
nl|'\n'
name|'expected_xml'
op|'='
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|'\'<ns0:wrapper xmlns:ns0="ns"><ns0:a>foo</ns0:a><ns0:b>bar</ns0:b>\''
nl|'\n'
string|'"</ns0:wrapper>"'
op|')'
newline|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'wrapper'"
op|','
name|'ns'
op|'='
string|"'ns'"
op|')'
newline|'\n'
name|'tmpl'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'tmpl'
op|'.'
name|'serialize'
op|'('
name|'dict'
op|'('
name|'wrapper'
op|'='
name|'dict'
op|'('
name|'a'
op|'='
string|"'foo'"
op|','
name|'b'
op|'='
string|"'bar'"
op|')'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'result'
op|','
name|'expected_xml'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_make_flat_dict_with_colon_tagname_support
dedent|''
name|'def'
name|'test_make_flat_dict_with_colon_tagname_support'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
string|"'extra_specs'"
op|':'
op|'{'
string|"'foo:bar'"
op|':'
string|"'999'"
op|'}'
op|'}'
newline|'\n'
name|'expected_xml'
op|'='
op|'('
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|'\'<extra_specs><foo:bar xmlns:foo="foo">999</foo:bar>\''
nl|'\n'
string|"'</extra_specs>'"
op|')'
op|')'
newline|'\n'
comment|'# Set up our master template'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'extra_specs'"
op|','
name|'colon_ns'
op|'='
name|'True'
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'serialize'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_xml'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_make_flat_dict_with_parent
dedent|''
name|'def'
name|'test_make_flat_dict_with_parent'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
string|'"device"'
op|':'
op|'{'
string|'"id"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"extra_info"'
op|':'
op|'{'
string|'"key1"'
op|':'
string|'"value1"'
op|','
nl|'\n'
string|'"key2"'
op|':'
string|'"value2"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'expected_xml'
op|'='
op|'('
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|'\'<device id="1"><extra_info><key2>value2</key2>\''
nl|'\n'
string|"'<key1>value1</key1></extra_info></device>'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'TemplateElement'
op|'('
string|"'device'"
op|','
name|'selector'
op|'='
string|"'device'"
op|')'
newline|'\n'
name|'root'
op|'.'
name|'set'
op|'('
string|"'id'"
op|')'
newline|'\n'
name|'extra'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'extra_info'"
op|','
name|'root'
op|'='
name|'root'
op|')'
newline|'\n'
name|'root'
op|'.'
name|'append'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'serialize'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_xml'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_make_flat_dict_with_dicts
dedent|''
name|'def'
name|'test_make_flat_dict_with_dicts'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
comment|'# Our test object to serialize'
nl|'\n'
indent|'        '
name|'obj'
op|'='
op|'{'
string|'"device"'
op|':'
op|'{'
string|'"id"'
op|':'
number|'1'
op|','
nl|'\n'
string|'"extra_info"'
op|':'
op|'{'
string|'"key1"'
op|':'
string|'"value1"'
op|','
nl|'\n'
string|'"key2"'
op|':'
string|'"value2"'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'expected_xml'
op|'='
op|'('
op|'('
string|'"<?xml version=\'1.0\' encoding=\'UTF-8\'?>\\n"'
nl|'\n'
string|"'<device><id>1</id><extra_info><key2>value2</key2>'"
nl|'\n'
string|"'<key1>value1</key1></extra_info></device>'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'root'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'device'"
op|','
name|'selector'
op|'='
string|"'device'"
op|','
nl|'\n'
name|'ignore_sub_dicts'
op|'='
name|'True'
op|')'
newline|'\n'
name|'extra'
op|'='
name|'xmlutil'
op|'.'
name|'make_flat_dict'
op|'('
string|"'extra_info'"
op|','
name|'selector'
op|'='
string|"'extra_info'"
op|')'
newline|'\n'
name|'root'
op|'.'
name|'append'
op|'('
name|'extra'
op|')'
newline|'\n'
name|'master'
op|'='
name|'xmlutil'
op|'.'
name|'MasterTemplate'
op|'('
name|'root'
op|','
number|'1'
op|')'
newline|'\n'
name|'result'
op|'='
name|'master'
op|'.'
name|'serialize'
op|'('
name|'obj'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'expected_xml'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
DECL|function|test_safe_parse_xml
dedent|''
name|'def'
name|'test_safe_parse_xml'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'normal_body'
op|'='
op|'('
string|'\'<?xml version="1.0" ?>\''
nl|'\n'
string|"'<foo><bar><v1>hey</v1><v2>there</v2></bar></foo>'"
op|')'
newline|'\n'
nl|'\n'
name|'dom'
op|'='
name|'xmlutil'
op|'.'
name|'safe_minidom_parse_string'
op|'('
name|'normal_body'
op|')'
newline|'\n'
comment|'# Some versions of minidom inject extra newlines so we ignore them'
nl|'\n'
name|'result'
op|'='
name|'str'
op|'('
name|'dom'
op|'.'
name|'toxml'
op|'('
op|')'
op|')'
op|'.'
name|'replace'
op|'('
string|"'\\n'"
op|','
string|"''"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'normal_body'
op|','
name|'result'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'MalformedRequestBody'
op|','
nl|'\n'
name|'xmlutil'
op|'.'
name|'safe_minidom_parse_string'
op|','
nl|'\n'
name|'tests_utils'
op|'.'
name|'killer_xml_body'
op|'('
op|')'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|SafeParserTestCase
dedent|''
dedent|''
name|'class'
name|'SafeParserTestCase'
op|'('
name|'test'
op|'.'
name|'NoDBTestCase'
op|')'
op|':'
newline|'\n'
DECL|member|test_external_dtd
indent|'    '
name|'def'
name|'test_external_dtd'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml_string'
op|'='
op|'('
string|'"""<?xml version="1.0" encoding="utf-8"?>\n                <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n                 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n                <html>\n                   <head/>\n                     <body>html with dtd</body>\n                   </html>"""'
op|')'
newline|'\n'
nl|'\n'
name|'parser'
op|'='
name|'xmlutil'
op|'.'
name|'ProtectedExpatParser'
op|'('
name|'forbid_dtd'
op|'='
name|'False'
op|','
nl|'\n'
name|'forbid_entities'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'minidom'
op|'.'
name|'parseString'
op|','
nl|'\n'
name|'xml_string'
op|','
name|'parser'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_external_file
dedent|''
name|'def'
name|'test_external_file'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml_string'
op|'='
string|'"""<!DOCTYPE external [\n                <!ENTITY ee SYSTEM "file:///PATH/TO/root.xml">\n                ]>\n                <root>&ee;</root>"""'
newline|'\n'
nl|'\n'
name|'parser'
op|'='
name|'xmlutil'
op|'.'
name|'ProtectedExpatParser'
op|'('
name|'forbid_dtd'
op|'='
name|'False'
op|','
nl|'\n'
name|'forbid_entities'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'minidom'
op|'.'
name|'parseString'
op|','
nl|'\n'
name|'xml_string'
op|','
name|'parser'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test_notation
dedent|''
name|'def'
name|'test_notation'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'xml_string'
op|'='
string|'"""<?xml version="1.0" standalone="no"?>\n                        <!-- comment data -->\n                        <!DOCTYPE x [\n                        <!NOTATION notation SYSTEM "notation.jpeg">\n                        ]>\n                        <root attr1="value1">\n                        </root>"""'
newline|'\n'
nl|'\n'
name|'parser'
op|'='
name|'xmlutil'
op|'.'
name|'ProtectedExpatParser'
op|'('
name|'forbid_dtd'
op|'='
name|'False'
op|','
nl|'\n'
name|'forbid_entities'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'ValueError'
op|','
nl|'\n'
name|'minidom'
op|'.'
name|'parseString'
op|','
nl|'\n'
name|'xml_string'
op|','
name|'parser'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

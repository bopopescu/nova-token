begin_unit
comment|'# Copyright 2010 United States Government as represented by the'
nl|'\n'
comment|'# Administrator of the National Aeronautics and Space Administration.'
nl|'\n'
comment|'# Copyright 2011 Justin Santa Barbara'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
string|'"""Utilities and helper functions that won\'t produce circular imports."""'
newline|'\n'
nl|'\n'
name|'import'
name|'inspect'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|getcallargs
name|'def'
name|'getcallargs'
op|'('
name|'function'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""This is a simplified inspect.getcallargs (2.7+).\n\n    It should be replaced when python >= 2.7 is standard.\n\n    This method can only properly grab arguments which are passed in as\n    keyword arguments, or given names by the method being called.  This means\n    that an ``*arg`` in a method signature and any arguments captured by it\n    will be left out of the results.\n\n    As an example: if function is defined as function(red, blue, green, *args)\n    then arguments captured by *args won\'t be returned.  If function is called\n    as function(\'red\', \'blue\', \'green\') those will all be captured.\n    """'
newline|'\n'
name|'keyed_args'
op|'='
op|'{'
op|'}'
newline|'\n'
name|'argnames'
op|','
name|'varargs'
op|','
name|'keywords'
op|','
name|'defaults'
op|'='
name|'inspect'
op|'.'
name|'getargspec'
op|'('
name|'function'
op|')'
newline|'\n'
nl|'\n'
name|'keyed_args'
op|'.'
name|'update'
op|'('
name|'kwargs'
op|')'
newline|'\n'
nl|'\n'
name|'remaining_argnames'
op|'='
name|'filter'
op|'('
name|'lambda'
name|'x'
op|':'
name|'x'
name|'not'
name|'in'
name|'keyed_args'
op|','
name|'argnames'
op|')'
newline|'\n'
name|'keyed_args'
op|'.'
name|'update'
op|'('
name|'dict'
op|'('
name|'zip'
op|'('
name|'remaining_argnames'
op|','
name|'args'
op|')'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'if'
name|'defaults'
op|':'
newline|'\n'
indent|'        '
name|'num_defaults'
op|'='
name|'len'
op|'('
name|'defaults'
op|')'
newline|'\n'
name|'for'
name|'argname'
op|','
name|'value'
name|'in'
name|'zip'
op|'('
name|'argnames'
op|'['
op|'-'
name|'num_defaults'
op|':'
op|']'
op|','
name|'defaults'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'argname'
name|'not'
name|'in'
name|'keyed_args'
op|':'
newline|'\n'
indent|'                '
name|'keyed_args'
op|'['
name|'argname'
op|']'
op|'='
name|'value'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'keyed_args'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|get_wrapped_function
dedent|''
name|'def'
name|'get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Get the method at the bottom of a stack of decorators."""'
newline|'\n'
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'__closure__'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'function'
newline|'\n'
nl|'\n'
DECL|function|_get_wrapped_function
dedent|''
name|'def'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'not'
name|'hasattr'
op|'('
name|'function'
op|','
string|"'__closure__'"
op|')'
name|'or'
name|'not'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'None'
newline|'\n'
nl|'\n'
dedent|''
name|'for'
name|'closure'
name|'in'
name|'function'
op|'.'
name|'__closure__'
op|':'
newline|'\n'
indent|'            '
name|'func'
op|'='
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
name|'deeper_func'
op|'='
name|'_get_wrapped_function'
op|'('
name|'func'
op|')'
newline|'\n'
name|'if'
name|'deeper_func'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'deeper_func'
newline|'\n'
dedent|''
name|'elif'
name|'hasattr'
op|'('
name|'closure'
op|'.'
name|'cell_contents'
op|','
string|"'__call__'"
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'closure'
op|'.'
name|'cell_contents'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
name|'return'
name|'_get_wrapped_function'
op|'('
name|'function'
op|')'
newline|'\n'
dedent|''
endmarker|''
end_unit

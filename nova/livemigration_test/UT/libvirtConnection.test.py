begin_unit
comment|'#!/usr/bin/python'
nl|'\n'
comment|'# -*- coding: UTF-8 -*-'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'commands'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
name|'import'
name|'logging'
newline|'\n'
name|'import'
name|'libvirt'
newline|'\n'
name|'import'
name|'libxml2'
newline|'\n'
nl|'\n'
name|'from'
name|'mock'
name|'import'
name|'Mock'
newline|'\n'
name|'import'
name|'twisted'
newline|'\n'
nl|'\n'
comment|'# getting /nova-inst-dir'
nl|'\n'
DECL|variable|NOVA_DIR
name|'NOVA_DIR'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
DECL|variable|NOVA_DIR
indent|'    '
name|'NOVA_DIR'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'NOVA_DIR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'print'
newline|'\n'
name|'print'
string|"'checking %s/bin/nova-manage exists, set the NOVA_DIR properly..'"
op|'%'
name|'NOVA_DIR'
newline|'\n'
name|'print'
newline|'\n'
nl|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'append'
op|'('
name|'NOVA_DIR'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
op|'.'
name|'manager'
name|'import'
name|'ComputeManager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'virt'
name|'import'
name|'libvirt_conn'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cloudpipe'
name|'import'
name|'pipelib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'models'
name|'import'
op|'*'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|"'set correct NOVA_DIR in this script. '"
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|tmpStdout
dedent|''
name|'class'
name|'tmpStdout'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|'""'
newline|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'arg'
newline|'\n'
DECL|member|writelines
dedent|''
name|'def'
name|'writelines'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'arg'
newline|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'print'
string|"'flush'"
newline|'\n'
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|class|tmpStderr
dedent|''
dedent|''
name|'class'
name|'tmpStderr'
op|'('
name|'tmpStdout'
op|')'
op|':'
newline|'\n'
DECL|member|write
indent|'    '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'arg'
newline|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|realFlush
dedent|''
name|'def'
name|'realFlush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|class|DummyLibvirtConn
dedent|''
dedent|''
name|'class'
name|'DummyLibvirtConn'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|variable|nwfilterLookupByName
indent|'    '
name|'nwfilterLookupByName'
op|'='
name|'None'
newline|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
DECL|class|testDomain
dedent|''
dedent|''
name|'class'
name|'testDomain'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|migrateToURI
dedent|''
name|'def'
name|'migrateToURI'
op|'('
name|'self'
op|','
name|'a'
op|','
name|'b'
op|','
name|'c'
op|','
name|'d'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|LibvirtConnectionTestFunctions
dedent|''
dedent|''
name|'class'
name|'LibvirtConnectionTestFunctions'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|stdout
indent|'    '
name|'stdout'
op|'='
name|'None'
newline|'\n'
DECL|variable|stdoutBak
name|'stdoutBak'
op|'='
name|'None'
newline|'\n'
DECL|variable|stderr
name|'stderr'
op|'='
name|'None'
newline|'\n'
DECL|variable|stderrBak
name|'stderrBak'
op|'='
name|'None'
newline|'\n'
DECL|variable|manager
name|'manager'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# \xe5\x85\xb1\xe9\x80\x9a\xe3\x81\xae\xe5\x88\x9d\xe6\x9c\x9f\xe5\x8c\x96\xe5\x87\xa6\xe7\x90\x86'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""common init method. """'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'stderr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'stderr'
op|'='
name|'tmpStderr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stderrBak'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'self'
op|'.'
name|'stderr'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'host'
op|'='
string|"'openstack2-api'"
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'manager'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'manager'
op|'='
name|'libvirt_conn'
op|'.'
name|'get_connection'
op|'('
name|'False'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'setTestData'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'setMocks'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setTestData
dedent|''
name|'def'
name|'setTestData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'host1'
op|'='
name|'Host'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'name'"
op|','
string|"'host1'"
op|')'
op|','
op|'('
string|"'cpu'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'memory_mb'"
op|','
number|'20480'
op|')'
op|','
op|'('
string|"'hdd_gb'"
op|','
number|'876'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'host1'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'instance1'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'id'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'host'"
op|','
string|"'host1'"
op|')'
op|','
op|'('
string|"'hostname'"
op|','
string|"'i-12345'"
op|')'
op|','
nl|'\n'
op|'('
string|"'state'"
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
op|','
op|'('
string|"'project_id'"
op|','
string|"'testPJ'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vcpus'"
op|','
number|'3'
op|')'
op|','
op|'('
string|"'memory_mb'"
op|','
number|'1024'
op|')'
op|','
op|'('
string|"'hdd_gb'"
op|','
number|'5'
op|')'
op|','
op|'('
string|"'internal_id'"
op|','
number|'12345'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'instance2'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'id'"
op|','
number|'2'
op|')'
op|','
op|'('
string|"'host'"
op|','
string|"'host1'"
op|')'
op|','
op|'('
string|"'hostname'"
op|','
string|"'i-12345'"
op|')'
op|','
nl|'\n'
op|'('
string|"'state'"
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
op|','
op|'('
string|"'project_id'"
op|','
string|"'testPJ'"
op|')'
op|','
nl|'\n'
op|'('
string|"'vcpus'"
op|','
number|'3'
op|')'
op|','
op|'('
string|"'memory_mb'"
op|','
number|'1024'
op|')'
op|','
op|'('
string|"'hdd_gb'"
op|','
number|'5'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'fixed_ip1'
op|'='
name|'FixedIp'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'id'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'address'"
op|','
string|"'1.1.1.1'"
op|')'
op|','
op|'('
string|"'network_id'"
op|','
string|"'1'"
op|')'
op|','
nl|'\n'
op|'('
string|"'instance_id'"
op|','
number|'1'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'fixed_ip1'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'floating_ip1'
op|'='
name|'FloatingIp'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'id'"
op|','
number|'1'
op|')'
op|','
op|'('
string|"'address'"
op|','
string|"'1.1.1.200'"
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'floating_ip1'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'netref1'
op|'='
name|'Network'
op|'('
op|')'
newline|'\n'
name|'for'
name|'key'
op|','
name|'val'
name|'in'
op|'['
op|'('
string|"'id'"
op|','
number|'1'
op|')'
op|']'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'netref1'
op|'.'
name|'__setitem__'
op|'('
name|'key'
op|','
name|'val'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'xml'
op|'='
string|'"<cpu><arch>x86_64</arch><model>Nehalem</model><vendor>Intel</vendor><topology sockets=\'2\' cores=\'4\' threads=\'2\'/><feature name=\'rdtscp\'/><feature name=\'dca\'/><feature name=\'xtpr\'/><feature name=\'tm2\'/><feature name=\'est\'/><feature name=\'vmx\'/><feature name=\'ds_cpl\'/><feature name=\'monitor\'/><feature name=\'pbe\'/><feature name=\'tm\'/><feature name=\'ht\'/><feature name=\'ss\'/><feature name=\'acpi\'/><feature name=\'ds\'/><feature name=\'vme\'/></cpu>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'xml2'
op|'='
string|'"<cccccpu><arch>x86_64</arch><model>Nehalem</model><vendor>Intel</vendor><topology sockets=\'2\' cores=\'4\' threads=\'2\'/><feature name=\'rdtscp\'/><feature name=\'dca\'/><feature name=\'xtpr\'/><feature name=\'tm2\'/><feature name=\'est\'/><feature name=\'vmx\'/><feature name=\'ds_cpl\'/><feature name=\'monitor\'/><feature name=\'pbe\'/><feature name=\'tm\'/><feature name=\'ht\'/><feature name=\'ss\'/><feature name=\'acpi\'/><feature name=\'ds\'/><feature name=\'vme\'/></cccccpu>"'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'='
name|'libvirt'
op|'.'
name|'virConnect'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'='
name|'testDomain'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|setMocks
dedent|''
name|'def'
name|'setMocks'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'self'
op|'.'
name|'ctxt'
op|'='
name|'context'
op|'.'
name|'get_admin_context'
op|'('
op|')'
newline|'\n'
comment|'# mocks for get_cpu_xml'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_wrapped_conn'
op|'='
name|'self'
op|'.'
name|'conn'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_test_connection'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'xml'
op|')'
newline|'\n'
comment|'# mocks for ensure_filtering_rules_for_instance '
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'nwfilter'
op|'.'
name|'setup_basic_filtering'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
comment|'#self.manager._conn.nwfilterLookupByName = Mock(return_value=None)'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'nwfilterLookupByName'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
comment|'# mocks for _live_migration'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'True'
newline|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_connect'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'conn'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'lookupByName'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'tmpDomain'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'True'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_get_all_by_instance'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
comment|'#self.manager._conn = Mock(return_value=self.tmpDomain)'
nl|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
string|"'1.1.1.1'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'netref1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
string|"'1.1.1.200'"
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'floating_ip1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_update'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ---> test for nova.virt.get_cpu_xml()'
nl|'\n'
DECL|member|test01
dedent|''
name|'def'
name|'test01'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""01: getCapabilities raises libvirt.libvirtError.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_cpu_xml'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test02
dedent|''
name|'def'
name|'test02'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""02: libxml2.parseDoc raises libxml2.parserError.  """'
newline|'\n'
nl|'\n'
name|'tmp'
op|'='
name|'libxml2'
op|'.'
name|'parseDoc'
newline|'\n'
name|'libxml2'
op|'.'
name|'parseDoc'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libxml2'
op|'.'
name|'parserError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_cpu_xml'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'libxml2'
op|'.'
name|'parserError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'libxml2'
op|'.'
name|'parseDoc'
op|'='
name|'tmp'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'libxml2'
op|'.'
name|'parseDoc'
op|'='
name|'tmp'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# no exception case assumed for xml.xpathEval, so no test case.'
nl|'\n'
DECL|member|test03
dedent|''
name|'def'
name|'test03'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""03: xml format is invalid no 2 cpu tag exists).  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_conn'
op|'.'
name|'getCapabilities'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'xml2'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_cpu_xml'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Unexpected xml format'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test04
dedent|''
name|'def'
name|'test04'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""04: re.sub raises unexpected exceptioin.  """'
newline|'\n'
nl|'\n'
name|'tmp'
op|'='
name|'re'
op|'.'
name|'sub'
newline|'\n'
name|'re'
op|'.'
name|'sub'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_cpu_xml'
op|'('
op|')'
newline|'\n'
dedent|''
name|'except'
name|'TypeError'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'re'
op|'.'
name|'sub'
op|'='
name|'tmp'
newline|'\n'
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'re'
op|'.'
name|'sub'
op|'='
name|'tmp'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test05
dedent|''
name|'def'
name|'test05'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""05: everything goes well.  """'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'get_cpu_xml'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'type'
op|'('
name|'ret'
op|')'
op|','
name|'str'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# ---> test for nova.virt.libvirt_conn.compare_cpu()'
nl|'\n'
nl|'\n'
DECL|member|test06
dedent|''
name|'def'
name|'test06'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""06: compareCPU raises libvirt.libvirtError.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
name|'self'
op|'.'
name|'manager'
op|'.'
name|'compare_cpu'
op|','
string|"''"
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test07
dedent|''
name|'def'
name|'test07'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""07: compareCPU returns 0  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_conn'
op|'.'
name|'compareCPU'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
number|'0'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'compare_cpu'
op|'('
string|"''"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'CPU does not have compativility'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test08
dedent|''
name|'def'
name|'test08'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""08: compare_cpu finished successfully.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'compareCPU'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
number|'1'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'compare_cpu'
op|'('
string|"''"
op|')'
newline|'\n'
name|'return'
name|'ret'
op|'=='
name|'None'
newline|'\n'
nl|'\n'
comment|'# ---> test for nova.virt.libvirt_conn.ensure_filtering_for_instance()'
nl|'\n'
nl|'\n'
DECL|member|test09
dedent|''
name|'def'
name|'test09'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""09: setup_basic_filtering raises unexpected exception.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'nwfilter'
op|'.'
name|'setup_basic_filtering'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test10
dedent|''
name|'def'
name|'test10'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""10: prepare_instance_filter raises unexpected exception.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'firewall_driver'
op|'.'
name|'prepare_instance_filter'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test11
dedent|''
name|'def'
name|'test11'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""11: nwfilterLookupByName raises libvirt.libvirtError.  """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'nwfilterLookupByName'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'manager'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Error'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'Timeout migrating for'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test12
dedent|''
name|'def'
name|'test12'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""12: everything goes well.  """'
newline|'\n'
nl|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'ensure_filtering_rules_for_instance'
op|'('
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
name|'return'
name|'ret'
op|'=='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ---> test for nova.virt.libvirt_conn.live_migraiton()'
nl|'\n'
nl|'\n'
DECL|member|test13
dedent|''
name|'def'
name|'test13'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""13: self._connect raises libvirt.libvirtError. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_connect'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test14
dedent|''
name|'def'
name|'test14'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""14: lookupByName raises libvirt.libvirtError. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'lookupByName'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test15
dedent|''
name|'def'
name|'test15'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""15: migrateToURI raises libvirt.libvirtError. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'.'
name|'migrateToURI'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test16
dedent|''
name|'def'
name|'test16'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""16: close raises libvirt.libvirtError. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'close'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test17
dedent|''
name|'def'
name|'test17'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""17: lookupByName raises libvirt.libvirtError(using existing connectioin). """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'conn'
op|'.'
name|'lookupByName'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test18
dedent|''
name|'def'
name|'test18'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""18: migrateToURI raises libvirt.libvirtError(using existing connectioin). """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'.'
name|'migrateToURI'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test19
dedent|''
name|'def'
name|'test19'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""19: migrateToURI raises libvirt.libvirtError(using existing connectioin), and instance_set_state raises unexpected exception(TypeError here)"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'.'
name|'migrateToURI'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_set_state'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test20
dedent|''
name|'def'
name|'test20'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""20: migrateToURI raises libvirt.libvirtError(using existing connectioin), and volume_get_all_by_instance raises unexpected exception(TypeError here)"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'.'
name|'migrateToURI'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_get_all_by_instance'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test21
dedent|''
name|'def'
name|'test21'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""21: migrateToURI raises libvirt.libvirtError(using existing connectioin), and volume_get_all_by_instance raises exception.NotFound"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'self'
op|'.'
name|'tmpDomain'
op|'.'
name|'migrateToURI'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'libvirt'
op|'.'
name|'libvirtError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'volume_get_all_by_instance'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'libvirt'
op|'.'
name|'libvirtError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test22
dedent|''
name|'def'
name|'test22'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""22: everything goes well"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'read_only'
op|'='
name|'False'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host2'"
op|')'
newline|'\n'
name|'return'
name|'ret'
op|'=='
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# ---> test for nova.virt.libvirt_conn._post_live_migraiton'
nl|'\n'
nl|'\n'
DECL|member|test23
dedent|''
name|'def'
name|'test23'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""23: instance_ref is not nova.db.sqlalchemy.models.Instances"""'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
string|'"dummy string"'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test24
dedent|''
name|'def'
name|'test24'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""24: db.instance_get_fixed_address return None"""'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'fixed_ip is not found'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test25
dedent|''
name|'def'
name|'test25'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""25: db.instance_get_fixed_address raises NotFound"""'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test26
dedent|''
name|'def'
name|'test26'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""26: db.instance_get_fixed_address raises Unknown exception"""'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_fixed_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test27
dedent|''
name|'def'
name|'test27'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""27: db.fixed_ip_update return NotFound. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test28
dedent|''
name|'def'
name|'test28'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""28: db.fixed_ip_update return NotAuthorized. """'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotAuthorized'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotAuthorized'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test29
dedent|''
name|'def'
name|'test29'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""10: db.fixed_ip_update return Unknown exception. """'
newline|'\n'
name|'db'
op|'.'
name|'fixed_ip_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test29
dedent|''
name|'def'
name|'test29'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""11: db.fixed_ip_get_network causes NotFound. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# not tested db.fixed_ip_get_network raises NotAuthorized'
nl|'\n'
comment|'# because same test has been done at previous test.'
nl|'\n'
nl|'\n'
DECL|member|test30
dedent|''
name|'def'
name|'test30'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""30: db.fixed_ip_get_network causes Unknown exception. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'fixed_ip_get_network'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test31
dedent|''
name|'def'
name|'test31'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""13: db.network_update raises Unknown exception. """'
newline|'\n'
name|'db'
op|'.'
name|'network_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test31
dedent|''
name|'def'
name|'test31'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""14: db.instance_get_floating_address raises NotFound. """'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'doesnt have floating_ip'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test32
dedent|''
name|'def'
name|'test32'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""32: db.instance_get_floating_address returns None. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'floating_ip is not found'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test33
dedent|''
name|'def'
name|'test33'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""33:  db.instance_get_floating_address raises NotFound. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'doesnt have floating_ip'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test34
dedent|''
name|'def'
name|'test34'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""34:  db.instance_get_floating_address raises Unknown exception. """'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_floating_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'Live migration: Unexpected error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test35
dedent|''
name|'def'
name|'test35'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""35: db.floating_ip_get_by_address raises NotFound """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'doesnt have floating_ip'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test36
dedent|''
name|'def'
name|'test36'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""36:  db.floating_ip_get_by_address raises Unknown exception. """'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_get_by_address'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'Live migration: Unexpected error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test37
dedent|''
name|'def'
name|'test37'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""37: db.floating_ip_update raises Unknown exception. \n        """'
newline|'\n'
name|'db'
op|'.'
name|'floating_ip_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'ret'
op|'='
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|'('
name|'self'
op|'.'
name|'ctxt'
op|','
name|'self'
op|'.'
name|'instance1'
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
name|'ret'
op|'=='
name|'None'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'sys'
op|'.'
name|'stderr'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'Live migration: Unexpected error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test38
dedent|''
name|'def'
name|'test38'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""38: db.instance_update raises unknown  exception. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'instance_update'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'TypeError'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
nl|'\n'
name|'self'
op|'.'
name|'manager'
op|'.'
name|'_post_live_migration'
op|','
nl|'\n'
name|'self'
op|'.'
name|'ctxt'
op|','
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|','
nl|'\n'
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""common terminating method. """'
newline|'\n'
name|'self'
op|'.'
name|'stderr'
op|'.'
name|'realFlush'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'self'
op|'.'
name|'stderrBak'
newline|'\n'
comment|'#sys.stdout = self.stdoutBak'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
indent|'    '
name|'logging'
op|'.'
name|'getLogger'
op|'('
op|')'
op|'.'
name|'setLevel'
op|'('
name|'logging'
op|'.'
name|'DEBUG'
op|')'
newline|'\n'
comment|'#unittest.main()'
nl|'\n'
nl|'\n'
DECL|variable|suite
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestLoader'
op|'('
op|')'
op|'.'
name|'loadTestsFromTestCase'
op|'('
name|'LibvirtConnectionTestFunctions'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'TextTestRunner'
op|'('
name|'verbosity'
op|'='
number|'2'
op|')'
op|'.'
name|'run'
op|'('
name|'suite'
op|')'
newline|'\n'
nl|'\n'
comment|'#suite = unittest.TestSuite()'
nl|'\n'
comment|'#suite.addTest(LibvirtConnectionTestFunctions("test14"))'
nl|'\n'
comment|'#suite.addTest(LibvirtConnectionTestFunctions("test16"))'
nl|'\n'
comment|'#unittest.TextTestRunner(verbosity=2).run(suite)'
nl|'\n'
nl|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

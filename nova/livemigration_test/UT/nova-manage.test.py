begin_unit
comment|'#!/usr/bin/python'
nl|'\n'
comment|'# -*- coding: UTF-8 -*-'
nl|'\n'
nl|'\n'
DECL|variable|NOVA_DIR
name|'NOVA_DIR'
op|'='
string|"'/opt/nova-2010.4'"
newline|'\n'
nl|'\n'
name|'import'
name|'sys'
newline|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'unittest'
newline|'\n'
name|'import'
name|'commands'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
name|'from'
name|'mock'
name|'import'
name|'Mock'
newline|'\n'
nl|'\n'
comment|'# getting /nova-inst-dir'
nl|'\n'
DECL|variable|NOVA_DIR
name|'NOVA_DIR'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'abspath'
op|'('
name|'sys'
op|'.'
name|'argv'
op|'['
number|'0'
op|']'
op|')'
newline|'\n'
name|'for'
name|'i'
name|'in'
name|'range'
op|'('
number|'4'
op|')'
op|':'
newline|'\n'
DECL|variable|NOVA_DIR
indent|'    '
name|'NOVA_DIR'
op|'='
name|'os'
op|'.'
name|'path'
op|'.'
name|'dirname'
op|'('
name|'NOVA_DIR'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'try'
op|':'
newline|'\n'
indent|'    '
name|'print'
newline|'\n'
name|'print'
string|"'Testing %s/bin/nova-manage, set the NOVA_DIR properly..'"
op|'%'
name|'NOVA_DIR'
newline|'\n'
name|'print'
newline|'\n'
nl|'\n'
name|'sys'
op|'.'
name|'path'
op|'.'
name|'append'
op|'('
name|'NOVA_DIR'
op|')'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'context'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'flags'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'quota'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'utils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'auth'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'cloudpipe'
name|'import'
name|'pipelib'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'api'
op|'.'
name|'ec2'
name|'import'
name|'cloud'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'power_state'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'db'
op|'.'
name|'sqlalchemy'
op|'.'
name|'models'
name|'import'
op|'*'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'    '
name|'print'
string|"'set correct NOVA_DIR in this script. '"
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|tmpStdout
dedent|''
name|'class'
name|'tmpStdout'
op|':'
newline|'\n'
DECL|member|__init__
indent|'    '
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|'""'
newline|'\n'
DECL|member|write
dedent|''
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'arg'
newline|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
DECL|class|tmpStderr
dedent|''
dedent|''
name|'class'
name|'tmpStderr'
op|'('
name|'tmpStdout'
op|')'
op|':'
newline|'\n'
DECL|member|write
indent|'    '
name|'def'
name|'write'
op|'('
name|'self'
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'+='
name|'arg'
newline|'\n'
DECL|member|flush
dedent|''
name|'def'
name|'flush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'pass'
newline|'\n'
DECL|member|realFlush
dedent|''
name|'def'
name|'realFlush'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'buffer'
op|'='
string|"''"
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|NovaManageTestFunctions
dedent|''
dedent|''
name|'class'
name|'NovaManageTestFunctions'
op|'('
name|'unittest'
op|'.'
name|'TestCase'
op|')'
op|':'
newline|'\n'
nl|'\n'
DECL|variable|stdout
indent|'    '
name|'stdout'
op|'='
name|'None'
newline|'\n'
DECL|variable|stdoutBak
name|'stdoutBak'
op|'='
name|'None'
newline|'\n'
DECL|variable|stderr
name|'stderr'
op|'='
name|'None'
newline|'\n'
DECL|variable|stderrBak
name|'stderrBak'
op|'='
name|'None'
newline|'\n'
nl|'\n'
DECL|variable|hostCmds
name|'hostCmds'
op|'='
name|'None'
newline|'\n'
nl|'\n'
comment|'# \xe5\x85\xb1\xe9\x80\x9a\xe3\x81\xae\xe5\x88\x9d\xe6\x9c\x9f\xe5\x8c\x96\xe5\x87\xa6\xe7\x90\x86'
nl|'\n'
DECL|member|setUp
name|'def'
name|'setUp'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""common init method. """'
newline|'\n'
nl|'\n'
name|'commands'
op|'.'
name|'getstatusoutput'
op|'('
string|"'cp -f %s/bin/nova-manage %s'"
op|'%'
op|'('
name|'NOVA_DIR'
op|','
name|'self'
op|'.'
name|'getNovaManageCopyPath'
op|'('
op|')'
op|')'
op|')'
newline|'\n'
name|'commands'
op|'.'
name|'getstatusoutput'
op|'('
string|"'touch  %s'"
op|'%'
name|'self'
op|'.'
name|'getInitpyPath'
op|'('
op|')'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'import'
name|'bin'
op|'.'
name|'novamanagetest'
newline|'\n'
dedent|''
name|'except'
op|':'
newline|'\n'
indent|'            '
name|'print'
string|"'Fail to import nova-manage . check bin/nova-manage exists'"
newline|'\n'
name|'raise'
newline|'\n'
nl|'\n'
comment|'# replace stdout for checking nova-manage output'
nl|'\n'
dedent|''
name|'if'
name|'self'
op|'.'
name|'stdout'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'stdout'
op|'='
name|'tmpStdout'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stdoutBak'
op|'='
name|'sys'
op|'.'
name|'stdout'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'self'
op|'.'
name|'stdout'
newline|'\n'
nl|'\n'
comment|'# replace stderr for checking nova-manage output'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'stderr'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'stderr'
op|'='
name|'tmpStderr'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'stderrBak'
op|'='
name|'sys'
op|'.'
name|'stderr'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'self'
op|'.'
name|'stderr'
newline|'\n'
nl|'\n'
comment|'# prepare test data'
nl|'\n'
name|'self'
op|'.'
name|'setTestData'
op|'('
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|setTestData
dedent|''
name|'def'
name|'setTestData'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'import'
name|'bin'
op|'.'
name|'novamanagetest'
newline|'\n'
nl|'\n'
name|'if'
name|'self'
op|'.'
name|'hostCmds'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'__class__'
op|'.'
name|'hostCmds'
op|'='
name|'bin'
op|'.'
name|'novamanagetest'
op|'.'
name|'HostCommands'
op|'('
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'instanceCmds'
op|'='
name|'bin'
op|'.'
name|'novamanagetest'
op|'.'
name|'InstanceCommands'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'host1'
op|'='
name|'Host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host1'
op|'.'
name|'__setitem__'
op|'('
string|"'name'"
op|','
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'host2'
op|'='
name|'Host'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'host2'
op|'.'
name|'__setitem__'
op|'('
string|"'name'"
op|','
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance1'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'1'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
string|"'host'"
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
string|"'hostname'"
op|','
string|"'i-12345'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
string|"'state'"
op|','
name|'power_state'
op|'.'
name|'NOSTATE'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance1'
op|'.'
name|'__setitem__'
op|'('
string|"'state_description'"
op|','
string|"'running'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance2'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'2'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
string|"'host'"
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
string|"'hostname'"
op|','
string|"'i-12345'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
string|"'state'"
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance2'
op|'.'
name|'__setitem__'
op|'('
string|"'state_description'"
op|','
string|"'pending'"
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instance3'
op|'='
name|'Instance'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance3'
op|'.'
name|'__setitem__'
op|'('
string|"'id'"
op|','
number|'3'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance3'
op|'.'
name|'__setitem__'
op|'('
string|"'host'"
op|','
string|"'host1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance3'
op|'.'
name|'__setitem__'
op|'('
string|"'hostname'"
op|','
string|"'i-12345'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance3'
op|'.'
name|'__setitem__'
op|'('
string|"'state'"
op|','
name|'power_state'
op|'.'
name|'RUNNING'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'instance3'
op|'.'
name|'__setitem__'
op|'('
string|"'state_description'"
op|','
string|"'running'"
op|')'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'host_get_all'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
op|'['
name|'self'
op|'.'
name|'host1'
op|','
name|'self'
op|'.'
name|'host2'
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|getInitpyPath
dedent|''
name|'def'
name|'getInitpyPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s/bin/__init__.py'"
op|'%'
name|'NOVA_DIR'
newline|'\n'
nl|'\n'
DECL|member|getNovaManageCopyPath
dedent|''
name|'def'
name|'getNovaManageCopyPath'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
string|"'%s/bin/novamanagetest.py'"
op|'%'
name|'NOVA_DIR'
newline|'\n'
nl|'\n'
comment|'# -----> Test for nova-manage host list '
nl|'\n'
nl|'\n'
DECL|member|test01
dedent|''
name|'def'
name|'test01'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""01: Got some host lists. """'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'list'
op|'('
op|')'
newline|'\n'
nl|'\n'
name|'c1'
op|'='
op|'('
number|'2'
op|'=='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'count'
op|'('
string|"'\\n'"
op|')'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
number|'0'
op|'<='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'host1'"
op|')'
op|')'
newline|'\n'
name|'c3'
op|'='
op|'('
number|'0'
op|'<='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'host2'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
name|'and'
name|'c3'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test02
dedent|''
name|'def'
name|'test02'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""02: Got empty lsit. """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'host_get_all'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
op|'['
op|']'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'list'
op|'('
op|')'
newline|'\n'
nl|'\n'
comment|'# result should be empty'
nl|'\n'
name|'c'
op|'='
op|'('
number|'0'
op|'=='
name|'len'
op|'('
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test03
dedent|''
name|'def'
name|'test03'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""03: Got notFound  """'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'host_get_all'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|'"ERR"'
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'list'
op|')'
newline|'\n'
nl|'\n'
comment|'# --------> Test For nova-manage host show'
nl|'\n'
nl|'\n'
DECL|member|test04
dedent|''
name|'def'
name|'test04'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""04: args are not enough(nova-manage host show) """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'show'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test05
dedent|''
name|'def'
name|'test05'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""05: nova-manage host show not-registered-host, and got an error"""'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
op|'{'
string|"'ret'"
op|':'
name|'False'
op|','
string|"'msg'"
op|':'
string|"'ERR'"
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'show'
op|'('
string|"'host1'"
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'['
op|':'
number|'3'
op|']'
op|'=='
string|"'ERR'"
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test06
dedent|''
name|'def'
name|'test06'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""06: nova-manage host show registerd-host, and no project uses the host"""'
newline|'\n'
nl|'\n'
name|'dic'
op|'='
op|'{'
string|"'ret'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'phy_resource'"
op|':'
op|'{'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'memory_mb'"
op|':'
number|'2'
op|','
string|"'local_gb'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
string|"'usage'"
op|':'
op|'{'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'dic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'show'
op|'('
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# result should be :'
nl|'\n'
comment|'# HOST            PROJECT         cpu     mem(mb) disk(gb)'
nl|'\n'
comment|'# host1                           1       2       3 '
nl|'\n'
name|'line'
op|'='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'line'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\t+'"
op|')'
op|'.'
name|'sub'
op|'('
string|"' '"
op|','
name|'line'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
string|"'host1 1 2 3'"
op|'=='
name|'line'
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'count'
op|'('
string|"'\\n'"
op|')'
op|'=='
number|'2'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test07
dedent|''
name|'def'
name|'test07'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""07: nova-manage host show registerd-host, \n           and some projects use the host\n        """'
newline|'\n'
name|'dic'
op|'='
op|'{'
string|"'ret'"
op|':'
name|'True'
op|','
nl|'\n'
string|"'phy_resource'"
op|':'
op|'{'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'memory_mb'"
op|':'
number|'2'
op|','
string|"'local_gb'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
string|"'usage'"
op|':'
op|'{'
string|"'p1'"
op|':'
op|'{'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'memory_mb'"
op|':'
number|'2'
op|','
string|"'local_gb'"
op|':'
number|'3'
op|'}'
op|','
nl|'\n'
string|"'p2'"
op|':'
op|'{'
string|"'vcpus'"
op|':'
number|'1'
op|','
string|"'memory_mb'"
op|':'
number|'2'
op|','
string|"'local_gb'"
op|':'
number|'3'
op|'}'
op|'}'
op|'}'
newline|'\n'
nl|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'dic'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'show'
op|'('
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
comment|'# result should be :'
nl|'\n'
comment|'# HOST            PROJECT         cpu     mem(mb) disk(gb)'
nl|'\n'
comment|'# host1                           1       2       3'
nl|'\n'
comment|'# host1           p1              1       2       3 '
nl|'\n'
comment|'# host1           p2              4       5       6'
nl|'\n'
name|'line'
op|'='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
number|'1'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\t+'"
op|')'
op|'.'
name|'sub'
op|'('
string|"' '"
op|','
name|'line'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
string|"'host1 1 2 3'"
op|'=='
name|'ret'
op|')'
newline|'\n'
nl|'\n'
name|'line'
op|'='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
number|'2'
op|']'
newline|'\n'
name|'line'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\t+'"
op|')'
op|'.'
name|'sub'
op|'('
string|"' '"
op|','
name|'line'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'c2'
op|'='
op|'('
string|"'host1 p1 1 2 3'"
op|'=='
name|'line'
op|')'
name|'or'
op|'('
string|"'host1 p2 1 2 3'"
op|'=='
name|'line'
op|')'
newline|'\n'
nl|'\n'
name|'line'
op|'='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'split'
op|'('
string|"'\\n'"
op|')'
op|'['
number|'3'
op|']'
newline|'\n'
name|'ret'
op|'='
name|'re'
op|'.'
name|'compile'
op|'('
string|"'\\t+'"
op|')'
op|'.'
name|'sub'
op|'('
string|"' '"
op|','
name|'line'
op|')'
op|'.'
name|'strip'
op|'('
op|')'
newline|'\n'
name|'c3'
op|'='
op|'('
string|"'host1 p1 1 2 3'"
op|'=='
name|'ret'
op|')'
name|'or'
op|'('
string|"'host1 p2 1 2 3'"
op|'=='
name|'ret'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
name|'and'
name|'c2'
name|'and'
name|'c3'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test08
dedent|''
name|'def'
name|'test08'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""08: nova-manage host show registerd-host, and rpc.call returns None\n           (unexpected error)\n        """'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'hostCmds'
op|'.'
name|'show'
op|'('
string|"'host1'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'Unexpected error'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
comment|'# ----------> Test for bin/nova-manage instance live_migration'
nl|'\n'
nl|'\n'
DECL|member|test09
dedent|''
name|'def'
name|'test09'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""09: arguments are not enough(nova-manage instances live_migration)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|')'
newline|'\n'
nl|'\n'
DECL|member|test10
dedent|''
name|'def'
name|'test10'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""10: arguments are not enough(nova-manage instances live_migration ec2_id)\n        """'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'TypeError'
op|','
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|','
string|"'i-xxx'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test11
dedent|''
name|'def'
name|'test11'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""11: nova-manage instances live_migration ec2_id host, \n           where hostname is invalid\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|','
string|"'i-xxx'"
op|','
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test12
dedent|''
name|'def'
name|'test12'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""12: nova-manage instances live_migration ec2_id(invalid id) host"""'
newline|'\n'
nl|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'side_effect'
op|'='
name|'exception'
op|'.'
name|'NotFound'
op|'('
string|"'ERR'"
op|')'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'exception'
op|'.'
name|'NotFound'
op|','
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|','
string|"'i-xxx'"
op|','
string|"'host1'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|test13
dedent|''
name|'def'
name|'test13'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""13: nova-manage instances live_migration ec2_id host, \n           but instance specifed by ec2 id is not running (state is not power_state.RUNNING)\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|'('
string|"'i-12345'"
op|','
string|"'host1'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<'
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'is not running'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test14
dedent|''
name|'def'
name|'test14'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""14: nova-manage instances live_migration ec2_id host, \n           but instance specifed by ec2 id is not running (state_description is not running)\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host2'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'instance1'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|'('
string|"'i-12345'"
op|','
string|"'host2'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<'
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'is not running'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|test15
dedent|''
name|'def'
name|'test15'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""15: nova-manage instances live_migration ec2_id host, \n           but instance is running at the same host specifed above, so err should be occured.\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'instance3'
op|')'
newline|'\n'
name|'try'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|'('
string|"'i-12345'"
op|','
string|"'host1'"
op|')'
newline|'\n'
dedent|''
name|'except'
name|'exception'
op|'.'
name|'Invalid'
op|','
name|'e'
op|':'
newline|'\n'
indent|'            '
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'e'
op|'.'
name|'message'
op|'.'
name|'find'
op|'('
string|"'is running now'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertTrue'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test16
dedent|''
name|'def'
name|'test16'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""16: nova-manage instances live_migration ec2_id host, \n           rpc.call raises RemoteError because destination doesnt have enough resource.\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'instance3'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'rpc'
op|'.'
name|'RemoteError'
op|'('
name|'TypeError'
op|','
string|"'val'"
op|','
string|"'traceback'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertRaises'
op|'('
name|'rpc'
op|'.'
name|'RemoteError'
op|','
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|','
string|"'i-xxx'"
op|','
string|"'host2'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|test17
dedent|''
name|'def'
name|'test17'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""17: nova-manage instances live_migration ec2_id host, \n           everything goes well, ang gets success messages.\n        """'
newline|'\n'
name|'db'
op|'.'
name|'host_get_by_name'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'host1'
op|')'
newline|'\n'
name|'db'
op|'.'
name|'instance_get_by_internal_id'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'self'
op|'.'
name|'instance3'
op|')'
newline|'\n'
name|'rpc'
op|'.'
name|'call'
op|'='
name|'Mock'
op|'('
name|'return_value'
op|'='
name|'None'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'instanceCmds'
op|'.'
name|'live_migration'
op|'('
string|"'i-12345'"
op|','
string|"'host2'"
op|')'
newline|'\n'
name|'c1'
op|'='
op|'('
number|'0'
op|'<='
name|'self'
op|'.'
name|'stdout'
op|'.'
name|'buffer'
op|'.'
name|'find'
op|'('
string|"'Finished all procedure'"
op|')'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'assertEqual'
op|'('
name|'c1'
op|','
name|'True'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|member|tearDown
dedent|''
name|'def'
name|'tearDown'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""common terminating method. """'
newline|'\n'
name|'commands'
op|'.'
name|'getstatusoutput'
op|'('
string|"'rm -rf %s'"
op|'%'
name|'self'
op|'.'
name|'getInitpyPath'
op|'('
op|')'
op|')'
newline|'\n'
name|'commands'
op|'.'
name|'getstatusoutput'
op|'('
string|"'rm -rf %s'"
op|'%'
name|'self'
op|'.'
name|'getNovaManageCopyPath'
op|'('
op|')'
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'.'
name|'flush'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stdout'
op|'='
name|'self'
op|'.'
name|'stdoutBak'
newline|'\n'
name|'self'
op|'.'
name|'stderr'
op|'.'
name|'realFlush'
op|'('
op|')'
newline|'\n'
name|'sys'
op|'.'
name|'stderr'
op|'='
name|'self'
op|'.'
name|'stderrBak'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
name|'if'
name|'__name__'
op|'=='
string|"'__main__'"
op|':'
newline|'\n'
comment|'#unittest.main()'
nl|'\n'
DECL|variable|suite
indent|'    '
name|'suite'
op|'='
name|'unittest'
op|'.'
name|'TestLoader'
op|'('
op|')'
op|'.'
name|'loadTestsFromTestCase'
op|'('
name|'NovaManageTestFunctions'
op|')'
newline|'\n'
name|'unittest'
op|'.'
name|'TextTestRunner'
op|'('
name|'verbosity'
op|'='
number|'3'
op|')'
op|'.'
name|'run'
op|'('
name|'suite'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
endmarker|''
end_unit

begin_unit
comment|'#!/usr/bin/env python'
nl|'\n'
comment|'# Copyright (c) 2012 OpenStack Foundation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License");'
nl|'\n'
comment|'#    you may not use this file except in compliance with the License.'
nl|'\n'
comment|'#    You may obtain a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#        http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS,'
nl|'\n'
comment|'#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.'
nl|'\n'
comment|'#    See the License for the specific language governing permissions and'
nl|'\n'
comment|'#    limitations under the License.'
nl|'\n'
nl|'\n'
string|'"""Auth Components for Consoles."""'
newline|'\n'
nl|'\n'
name|'import'
name|'time'
newline|'\n'
nl|'\n'
name|'from'
name|'oslo'
op|'.'
name|'config'
name|'import'
name|'cfg'
newline|'\n'
name|'from'
name|'oslo'
name|'import'
name|'messaging'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'cells'
name|'import'
name|'rpcapi'
name|'as'
name|'cells_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'compute'
name|'import'
name|'rpcapi'
name|'as'
name|'compute_rpcapi'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'i18n'
name|'import'
name|'_'
op|','
name|'_LW'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'manager'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'objects'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'memorycache'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
DECL|variable|consoleauth_opts
name|'consoleauth_opts'
op|'='
op|'['
nl|'\n'
name|'cfg'
op|'.'
name|'IntOpt'
op|'('
string|"'console_token_ttl'"
op|','
nl|'\n'
DECL|variable|default
name|'default'
op|'='
number|'600'
op|','
nl|'\n'
DECL|variable|help
name|'help'
op|'='
string|"'How many seconds before deleting tokens'"
op|')'
nl|'\n'
op|']'
newline|'\n'
nl|'\n'
DECL|variable|CONF
name|'CONF'
op|'='
name|'cfg'
op|'.'
name|'CONF'
newline|'\n'
name|'CONF'
op|'.'
name|'register_opts'
op|'('
name|'consoleauth_opts'
op|')'
newline|'\n'
name|'CONF'
op|'.'
name|'import_opt'
op|'('
string|"'enable'"
op|','
string|"'nova.cells.opts'"
op|','
name|'group'
op|'='
string|"'cells'"
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|ConsoleAuthManager
name|'class'
name|'ConsoleAuthManager'
op|'('
name|'manager'
op|'.'
name|'Manager'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Manages token based authentication."""'
newline|'\n'
nl|'\n'
DECL|variable|target
name|'target'
op|'='
name|'messaging'
op|'.'
name|'Target'
op|'('
name|'version'
op|'='
string|"'2.0'"
op|')'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'scheduler_driver'
op|'='
name|'None'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'ConsoleAuthManager'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
name|'service_name'
op|'='
string|"'consoleauth'"
op|','
nl|'\n'
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'mc'
op|'='
name|'memorycache'
op|'.'
name|'get_client'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'='
name|'compute_rpcapi'
op|'.'
name|'ComputeAPI'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'='
name|'cells_rpcapi'
op|'.'
name|'CellsAPI'
op|'('
op|')'
newline|'\n'
nl|'\n'
DECL|member|_get_tokens_for_instance
dedent|''
name|'def'
name|'_get_tokens_for_instance'
op|'('
name|'self'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tokens_str'
op|'='
name|'self'
op|'.'
name|'mc'
op|'.'
name|'get'
op|'('
name|'instance_uuid'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'tokens_str'
op|':'
newline|'\n'
indent|'            '
name|'tokens'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'tokens'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'tokens_str'
op|')'
newline|'\n'
dedent|''
name|'return'
name|'tokens'
newline|'\n'
nl|'\n'
DECL|member|authorize_console
dedent|''
name|'def'
name|'authorize_console'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'token'
op|','
name|'console_type'
op|','
name|'host'
op|','
name|'port'
op|','
nl|'\n'
name|'internal_access_path'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'        '
name|'token_dict'
op|'='
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|','
nl|'\n'
string|"'console_type'"
op|':'
name|'console_type'
op|','
nl|'\n'
string|"'host'"
op|':'
name|'host'
op|','
nl|'\n'
string|"'port'"
op|':'
name|'port'
op|','
nl|'\n'
string|"'internal_access_path'"
op|':'
name|'internal_access_path'
op|','
nl|'\n'
string|"'last_activity_at'"
op|':'
name|'time'
op|'.'
name|'time'
op|'('
op|')'
op|'}'
newline|'\n'
name|'data'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'token_dict'
op|')'
newline|'\n'
nl|'\n'
comment|'# We need to log the warning message if the token is not cached'
nl|'\n'
comment|'# successfully, because the failure will cause the console for'
nl|'\n'
comment|'# instance to not be usable.'
nl|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'mc'
op|'.'
name|'set'
op|'('
name|'token'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|','
nl|'\n'
name|'data'
op|','
name|'CONF'
op|'.'
name|'console_token_ttl'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Token: %(token)s failed to save into memcached."'
op|')'
op|','
nl|'\n'
op|'{'
string|"'token'"
op|':'
name|'token'
op|'}'
op|')'
newline|'\n'
dedent|''
name|'tokens'
op|'='
name|'self'
op|'.'
name|'_get_tokens_for_instance'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
comment|'# Remove the expired tokens from cache.'
nl|'\n'
name|'for'
name|'tok'
name|'in'
name|'tokens'
op|':'
newline|'\n'
indent|'            '
name|'token_str'
op|'='
name|'self'
op|'.'
name|'mc'
op|'.'
name|'get'
op|'('
name|'tok'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'token_str'
op|':'
newline|'\n'
indent|'                '
name|'tokens'
op|'.'
name|'remove'
op|'('
name|'tok'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'tokens'
op|'.'
name|'append'
op|'('
name|'token'
op|')'
newline|'\n'
name|'if'
name|'not'
name|'self'
op|'.'
name|'mc'
op|'.'
name|'set'
op|'('
name|'instance_uuid'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|','
nl|'\n'
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'tokens'
op|')'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'LOG'
op|'.'
name|'warning'
op|'('
name|'_LW'
op|'('
string|'"Instance: %(instance_uuid)s failed to save "'
nl|'\n'
string|'"into memcached"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'instance_uuid'"
op|':'
name|'instance_uuid'
op|'}'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Received Token: %(token)s, %(token_dict)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
string|"'token_dict'"
op|':'
name|'token_dict'
op|'}'
op|')'
newline|'\n'
nl|'\n'
DECL|member|_validate_token
dedent|''
name|'def'
name|'_validate_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'token'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'instance_uuid'
op|'='
name|'token'
op|'['
string|"'instance_uuid'"
op|']'
newline|'\n'
name|'if'
name|'instance_uuid'
name|'is'
name|'None'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
nl|'\n'
comment|'# NOTE(comstud): consoleauth was meant to run in API cells.  So,'
nl|'\n'
comment|'# if cells is enabled, we must call down to the child cell for'
nl|'\n'
comment|'# the instance.'
nl|'\n'
dedent|''
name|'if'
name|'CONF'
op|'.'
name|'cells'
op|'.'
name|'enable'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'self'
op|'.'
name|'cells_rpcapi'
op|'.'
name|'validate_console_port'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance_uuid'
op|','
name|'token'
op|'['
string|"'port'"
op|']'
op|','
name|'token'
op|'['
string|"'console_type'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'instance'
op|'='
name|'objects'
op|'.'
name|'Instance'
op|'.'
name|'get_by_uuid'
op|'('
name|'context'
op|','
name|'instance_uuid'
op|')'
newline|'\n'
nl|'\n'
name|'return'
name|'self'
op|'.'
name|'compute_rpcapi'
op|'.'
name|'validate_console_port'
op|'('
name|'context'
op|','
nl|'\n'
name|'instance'
op|','
nl|'\n'
name|'token'
op|'['
string|"'port'"
op|']'
op|','
nl|'\n'
name|'token'
op|'['
string|"'console_type'"
op|']'
op|')'
newline|'\n'
nl|'\n'
DECL|member|check_token
dedent|''
name|'def'
name|'check_token'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'token'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'token_str'
op|'='
name|'self'
op|'.'
name|'mc'
op|'.'
name|'get'
op|'('
name|'token'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|')'
newline|'\n'
name|'token_valid'
op|'='
op|'('
name|'token_str'
name|'is'
name|'not'
name|'None'
op|')'
newline|'\n'
name|'LOG'
op|'.'
name|'audit'
op|'('
name|'_'
op|'('
string|'"Checking Token: %(token)s, %(token_valid)s"'
op|')'
op|','
nl|'\n'
op|'{'
string|"'token'"
op|':'
name|'token'
op|','
string|"'token_valid'"
op|':'
name|'token_valid'
op|'}'
op|')'
newline|'\n'
name|'if'
name|'token_valid'
op|':'
newline|'\n'
indent|'            '
name|'token'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'token_str'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'_validate_token'
op|'('
name|'context'
op|','
name|'token'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'token'
newline|'\n'
nl|'\n'
DECL|member|delete_tokens_for_instance
dedent|''
dedent|''
dedent|''
name|'def'
name|'delete_tokens_for_instance'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'instance_uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'tokens'
op|'='
name|'self'
op|'.'
name|'_get_tokens_for_instance'
op|'('
name|'instance_uuid'
op|')'
newline|'\n'
name|'for'
name|'token'
name|'in'
name|'tokens'
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'mc'
op|'.'
name|'delete'
op|'('
name|'token'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|')'
newline|'\n'
dedent|''
name|'self'
op|'.'
name|'mc'
op|'.'
name|'delete'
op|'('
name|'instance_uuid'
op|'.'
name|'encode'
op|'('
string|"'UTF-8'"
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

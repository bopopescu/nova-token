begin_unit
comment|'# vim: tabstop=4 shiftwidth=4 softtabstop=4'
nl|'\n'
nl|'\n'
comment|'# Copyright (c) 2011 Openstack, LLC.'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'import'
name|'os'
newline|'\n'
name|'import'
name|'re'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|CommandFilter
name|'class'
name|'CommandFilter'
op|'('
name|'object'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Command filter only checking that the 1st argument matches exec_path"""'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
name|'exec_path'
op|','
name|'run_as'
op|','
op|'*'
name|'args'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'exec_path'
op|'='
name|'exec_path'
newline|'\n'
name|'self'
op|'.'
name|'run_as'
op|'='
name|'run_as'
newline|'\n'
name|'self'
op|'.'
name|'args'
op|'='
name|'args'
newline|'\n'
nl|'\n'
DECL|member|match
dedent|''
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Only check that the first argument (command) matches exec_path"""'
newline|'\n'
name|'if'
op|'('
name|'os'
op|'.'
name|'path'
op|'.'
name|'basename'
op|'('
name|'self'
op|'.'
name|'exec_path'
op|')'
op|'=='
name|'userargs'
op|'['
number|'0'
op|']'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns command to execute (with sudo -u if run_as != root)."""'
newline|'\n'
name|'if'
op|'('
name|'self'
op|'.'
name|'run_as'
op|'!='
string|"'root'"
op|')'
op|':'
newline|'\n'
comment|'# Used to run commands at lesser privileges'
nl|'\n'
indent|'            '
name|'return'
op|'['
string|"'sudo'"
op|','
string|"'-u'"
op|','
name|'self'
op|'.'
name|'run_as'
op|','
name|'self'
op|'.'
name|'exec_path'
op|']'
op|'+'
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
dedent|''
name|'return'
op|'['
name|'self'
op|'.'
name|'exec_path'
op|']'
op|'+'
name|'userargs'
op|'['
number|'1'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_environment
dedent|''
name|'def'
name|'get_environment'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Returns specific environment to set, None if none"""'
newline|'\n'
name|'return'
name|'None'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|RegExpFilter
dedent|''
dedent|''
name|'class'
name|'RegExpFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Command filter doing regexp matching for every argument"""'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
comment|"# Early skip if command or number of args don't match"
nl|'\n'
indent|'        '
name|'if'
op|'('
name|'len'
op|'('
name|'self'
op|'.'
name|'args'
op|')'
op|'!='
name|'len'
op|'('
name|'userargs'
op|')'
op|')'
op|':'
newline|'\n'
comment|"# DENY: argument numbers don't match"
nl|'\n'
indent|'            '
name|'return'
name|'False'
newline|'\n'
comment|'# Compare each arg (anchoring pattern explicitly at end of string)'
nl|'\n'
dedent|''
name|'for'
op|'('
name|'pattern'
op|','
name|'arg'
op|')'
name|'in'
name|'zip'
op|'('
name|'self'
op|'.'
name|'args'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'try'
op|':'
newline|'\n'
indent|'                '
name|'if'
name|'not'
name|'re'
op|'.'
name|'match'
op|'('
name|'pattern'
op|'+'
string|"'$'"
op|','
name|'arg'
op|')'
op|':'
newline|'\n'
indent|'                    '
name|'break'
newline|'\n'
dedent|''
dedent|''
name|'except'
name|'re'
op|'.'
name|'error'
op|':'
newline|'\n'
comment|'# DENY: Badly-formed filter'
nl|'\n'
indent|'                '
name|'return'
name|'False'
newline|'\n'
dedent|''
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# ALLOW: All arguments matched'
nl|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
nl|'\n'
comment|'# DENY: Some arguments did not match'
nl|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|DnsmasqFilter
dedent|''
dedent|''
name|'class'
name|'DnsmasqFilter'
op|'('
name|'CommandFilter'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Specific filter for the dnsmasq call (which includes env)"""'
newline|'\n'
nl|'\n'
DECL|member|match
name|'def'
name|'match'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
op|'('
name|'userargs'
op|'['
number|'0'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"FLAGFILE="'
op|')'
name|'and'
nl|'\n'
name|'userargs'
op|'['
number|'1'
op|']'
op|'.'
name|'startswith'
op|'('
string|'"NETWORK_ID="'
op|')'
name|'and'
nl|'\n'
name|'userargs'
op|'['
number|'2'
op|']'
op|'=='
string|'"dnsmasq"'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'return'
name|'True'
newline|'\n'
dedent|''
name|'return'
name|'False'
newline|'\n'
nl|'\n'
DECL|member|get_command
dedent|''
name|'def'
name|'get_command'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
op|'['
name|'self'
op|'.'
name|'exec_path'
op|']'
op|'+'
name|'userargs'
op|'['
number|'3'
op|':'
op|']'
newline|'\n'
nl|'\n'
DECL|member|get_environment
dedent|''
name|'def'
name|'get_environment'
op|'('
name|'self'
op|','
name|'userargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'env'
op|'='
name|'os'
op|'.'
name|'environ'
op|'.'
name|'copy'
op|'('
op|')'
newline|'\n'
name|'env'
op|'['
string|"'FLAGFILE'"
op|']'
op|'='
name|'userargs'
op|'['
number|'0'
op|']'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'env'
op|'['
string|"'NETWORK_ID'"
op|']'
op|'='
name|'userargs'
op|'['
number|'1'
op|']'
op|'.'
name|'split'
op|'('
string|"'='"
op|')'
op|'['
op|'-'
number|'1'
op|']'
newline|'\n'
name|'return'
name|'env'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

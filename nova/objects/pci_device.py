begin_unit
comment|'# Copyright 2013 Intel Corporation'
nl|'\n'
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
name|'import'
name|'copy'
newline|'\n'
name|'import'
name|'functools'
newline|'\n'
nl|'\n'
name|'from'
name|'nova'
name|'import'
name|'db'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'exception'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'jsonutils'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'openstack'
op|'.'
name|'common'
name|'import'
name|'log'
name|'as'
name|'logging'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|variable|LOG
name|'LOG'
op|'='
name|'logging'
op|'.'
name|'getLogger'
op|'('
name|'__name__'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|check_device_status
name|'def'
name|'check_device_status'
op|'('
name|'dev_status'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Decorator to check device status before changing it."""'
newline|'\n'
nl|'\n'
name|'if'
name|'dev_status'
name|'is'
name|'not'
name|'None'
name|'and'
name|'not'
name|'isinstance'
op|'('
name|'dev_status'
op|','
name|'set'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'dev_status'
op|'='
name|'set'
op|'('
name|'dev_status'
op|')'
newline|'\n'
nl|'\n'
DECL|function|outer
dedent|''
name|'def'
name|'outer'
op|'('
name|'f'
op|')'
op|':'
newline|'\n'
indent|'        '
op|'@'
name|'functools'
op|'.'
name|'wraps'
op|'('
name|'f'
op|')'
newline|'\n'
DECL|function|inner
name|'def'
name|'inner'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'self'
op|'['
string|"'status'"
op|']'
name|'not'
name|'in'
name|'dev_status'
op|':'
newline|'\n'
indent|'                '
name|'raise'
name|'exception'
op|'.'
name|'PciDeviceInvalidStatus'
op|'('
nl|'\n'
name|'compute_node_id'
op|'='
name|'self'
op|'.'
name|'compute_node_id'
op|','
nl|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'address'
op|','
name|'status'
op|'='
name|'self'
op|'.'
name|'status'
op|','
nl|'\n'
name|'hopestatus'
op|'='
name|'dev_status'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'instance'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
name|'self'
op|','
name|'instance'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'return'
name|'f'
op|'('
name|'self'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'return'
name|'inner'
newline|'\n'
dedent|''
name|'return'
name|'outer'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDevice
dedent|''
name|'class'
name|'PciDevice'
op|'('
name|'base'
op|'.'
name|'NovaPersistentObject'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
nl|'\n'
indent|'    '
string|'"""Object to represent a PCI device on a compute node.\n\n    PCI devices are managed by the compute resource tracker, which discovers\n    the devices from the hardware platform, claims, allocates and frees\n    devices for instances.\n\n    The PCI device information is permanently maintained in a database.\n    This makes it convenient to get PCI device information, like physical\n    function for a VF device, adjacent switch IP address for a NIC,\n    hypervisor identification for a PCI device, etc. It also provides a\n    convenient way to check device allocation information for administrator\n    purposes.\n\n    A device can be in available/claimed/allocated/deleted/removed state.\n\n    A device is available when it is discovered..\n\n    A device is claimed prior to being allocated to an instance. Normally the\n    transition from claimed to allocated is quick. However, during a resize\n    operation the transition can take longer, because devices are claimed in\n    prep_resize and allocated in finish_resize.\n\n    A device becomes removed when hot removed from a node (i.e. not found in\n    the next auto-discover) but not yet synced with the DB. A removed device\n    should not be allocated to any instance, and once deleted from the DB,\n    the device object is changed to deleted state and no longer synced with\n    the DB.\n\n    Filed notes:\n    \'dev_id\':\n        Hypervisor\'s identification for the device, the string format\n        is hypervisor specific\n    \'extra_info\':\n        Device-specific properties like PF address, switch ip address etc.\n    """'
newline|'\n'
nl|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
comment|'# Version 1.1: String attributes updated to support unicode'
nl|'\n'
DECL|variable|VERSION
name|'VERSION'
op|'='
string|"'1.1'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'id'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
op|')'
op|','
nl|'\n'
comment|'# Note(yjiang5): the compute_node_id may be None because the pci'
nl|'\n'
comment|'# device objects are created before the compute node is created in DB'
nl|'\n'
string|"'compute_node_id'"
op|':'
name|'fields'
op|'.'
name|'IntegerField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'address'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'vendor_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'product_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'dev_type'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'status'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
op|')'
op|','
nl|'\n'
string|"'dev_id'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'label'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'instance_uuid'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
string|"'extra_info'"
op|':'
name|'fields'
op|'.'
name|'DictOfStringsField'
op|'('
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|update_device
name|'def'
name|'update_device'
op|'('
name|'self'
op|','
name|'dev_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Sync the content from device dictionary to device object.\n\n        The resource tracker updates the available devices periodically.\n        To avoid meaningless syncs with the database, we update the device\n        object only if a value changed.\n        """'
newline|'\n'
nl|'\n'
comment|'# Note(yjiang5): status/instance_uuid should only be updated by'
nl|'\n'
comment|'# functions like claim/allocate etc. The id is allocated by'
nl|'\n'
comment|'# database. The extra_info is created by the object.'
nl|'\n'
name|'no_changes'
op|'='
op|'('
string|"'status'"
op|','
string|"'instance_uuid'"
op|','
string|"'id'"
op|','
string|"'extra_info'"
op|')'
newline|'\n'
name|'map'
op|'('
name|'lambda'
name|'x'
op|':'
name|'dev_dict'
op|'.'
name|'pop'
op|'('
name|'x'
op|','
name|'None'
op|')'
op|','
nl|'\n'
op|'['
name|'key'
name|'for'
name|'key'
name|'in'
name|'no_changes'
op|']'
op|')'
newline|'\n'
nl|'\n'
name|'for'
name|'k'
op|','
name|'v'
name|'in'
name|'dev_dict'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'k'
name|'in'
name|'self'
op|'.'
name|'fields'
op|'.'
name|'keys'
op|'('
op|')'
op|':'
newline|'\n'
indent|'                '
name|'self'
op|'['
name|'k'
op|']'
op|'='
name|'v'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
comment|'# Note (yjiang5) extra_info.update does not update'
nl|'\n'
comment|'# obj_what_changed, set it explicitely'
nl|'\n'
indent|'                '
name|'extra_info'
op|'='
name|'self'
op|'.'
name|'extra_info'
newline|'\n'
name|'extra_info'
op|'.'
name|'update'
op|'('
op|'{'
name|'k'
op|':'
name|'v'
op|'}'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'extra_info'
op|'='
name|'extra_info'
newline|'\n'
nl|'\n'
DECL|member|__init__
dedent|''
dedent|''
dedent|''
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PciDevice'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'extra_info'
op|'='
op|'{'
op|'}'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'staticmethod'
newline|'\n'
DECL|member|_from_db_object
name|'def'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'pci_device'
op|','
name|'db_dev'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'for'
name|'key'
name|'in'
name|'pci_device'
op|'.'
name|'fields'
op|':'
newline|'\n'
indent|'            '
name|'if'
name|'key'
op|'!='
string|"'extra_info'"
op|':'
newline|'\n'
indent|'                '
name|'pci_device'
op|'['
name|'key'
op|']'
op|'='
name|'db_dev'
op|'['
name|'key'
op|']'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'extra_info'
op|'='
name|'db_dev'
op|'.'
name|'get'
op|'('
string|'"extra_info"'
op|')'
newline|'\n'
name|'pci_device'
op|'.'
name|'extra_info'
op|'='
name|'jsonutils'
op|'.'
name|'loads'
op|'('
name|'extra_info'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'pci_device'
op|'.'
name|'_context'
op|'='
name|'context'
newline|'\n'
name|'pci_device'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'pci_device'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_dev_addr
name|'def'
name|'get_by_dev_addr'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'compute_node_id'
op|','
name|'dev_addr'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_dev'
op|'='
name|'db'
op|'.'
name|'pci_device_get_by_addr'
op|'('
nl|'\n'
name|'context'
op|','
name|'compute_node_id'
op|','
name|'dev_addr'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_dev_id
name|'def'
name|'get_by_dev_id'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_dev'
op|'='
name|'db'
op|'.'
name|'pci_device_get_by_id'
op|'('
name|'context'
op|','
name|'id'
op|')'
newline|'\n'
name|'return'
name|'cls'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_dev'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|create
name|'def'
name|'create'
op|'('
name|'cls'
op|','
name|'dev_dict'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Create a PCI device based on hypervisor information.\n\n        As the device object is just created and is not synced with db yet\n        thus we should not reset changes here for fields from dict.\n        """'
newline|'\n'
name|'pci_device'
op|'='
name|'cls'
op|'('
op|')'
newline|'\n'
name|'pci_device'
op|'.'
name|'update_device'
op|'('
name|'dev_dict'
op|')'
newline|'\n'
name|'pci_device'
op|'.'
name|'status'
op|'='
string|"'available'"
newline|'\n'
name|'return'
name|'pci_device'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_device_status'
op|'('
name|'dev_status'
op|'='
op|'['
string|"'available'"
op|']'
op|')'
newline|'\n'
DECL|member|claim
name|'def'
name|'claim'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'status'
op|'='
string|"'claimed'"
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_device_status'
op|'('
name|'dev_status'
op|'='
op|'['
string|"'available'"
op|','
string|"'claimed'"
op|']'
op|')'
newline|'\n'
DECL|member|allocate
name|'def'
name|'allocate'
op|'('
name|'self'
op|','
name|'instance'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'status'
op|'=='
string|"'claimed'"
name|'and'
name|'self'
op|'.'
name|'instance_uuid'
op|'!='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PciDeviceInvalidOwner'
op|'('
nl|'\n'
name|'compute_node_id'
op|'='
name|'self'
op|'.'
name|'compute_node_id'
op|','
nl|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'address'
op|','
name|'owner'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'hopeowner'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'self'
op|'.'
name|'status'
op|'='
string|"'allocated'"
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
newline|'\n'
nl|'\n'
comment|'# Notes(yjiang5): remove this check when instance object for'
nl|'\n'
comment|'# compute manager is finished'
nl|'\n'
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'            '
name|'if'
string|"'pci_devices'"
name|'not'
name|'in'
name|'instance'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'['
string|"'pci_devices'"
op|']'
op|'='
op|'['
op|']'
newline|'\n'
dedent|''
name|'instance'
op|'['
string|"'pci_devices'"
op|']'
op|'.'
name|'append'
op|'('
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'            '
name|'instance'
op|'.'
name|'pci_devices'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'copy'
op|'.'
name|'copy'
op|'('
name|'self'
op|')'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'check_device_status'
op|'('
name|'dev_status'
op|'='
op|'['
string|"'available'"
op|']'
op|')'
newline|'\n'
DECL|member|remove
name|'def'
name|'remove'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'self'
op|'.'
name|'status'
op|'='
string|"'removed'"
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'None'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'check_device_status'
op|'('
name|'dev_status'
op|'='
op|'['
string|"'claimed'"
op|','
string|"'allocated'"
op|']'
op|')'
newline|'\n'
DECL|member|free
name|'def'
name|'free'
op|'('
name|'self'
op|','
name|'instance'
op|'='
name|'None'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'instance'
name|'and'
name|'self'
op|'.'
name|'instance_uuid'
op|'!='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|':'
newline|'\n'
indent|'            '
name|'raise'
name|'exception'
op|'.'
name|'PciDeviceInvalidOwner'
op|'('
nl|'\n'
name|'compute_node_id'
op|'='
name|'self'
op|'.'
name|'compute_node_id'
op|','
nl|'\n'
name|'address'
op|'='
name|'self'
op|'.'
name|'address'
op|','
name|'owner'
op|'='
name|'self'
op|'.'
name|'instance_uuid'
op|','
nl|'\n'
name|'hopeowner'
op|'='
name|'instance'
op|'['
string|"'uuid'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'old_status'
op|'='
name|'self'
op|'.'
name|'status'
newline|'\n'
name|'self'
op|'.'
name|'status'
op|'='
string|"'available'"
newline|'\n'
name|'self'
op|'.'
name|'instance_uuid'
op|'='
name|'None'
newline|'\n'
name|'if'
name|'old_status'
op|'=='
string|"'allocated'"
name|'and'
name|'instance'
op|':'
newline|'\n'
comment|'# Notes(yjiang5): remove this check when instance object for'
nl|'\n'
comment|'# compute manager is finished'
nl|'\n'
indent|'            '
name|'existed'
op|'='
name|'next'
op|'('
op|'('
name|'dev'
name|'for'
name|'dev'
name|'in'
name|'instance'
op|'['
string|"'pci_devices'"
op|']'
nl|'\n'
name|'if'
name|'dev'
op|'.'
name|'id'
op|'=='
name|'self'
op|'.'
name|'id'
op|')'
op|')'
newline|'\n'
name|'if'
name|'isinstance'
op|'('
name|'instance'
op|','
name|'dict'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'['
string|"'pci_devices'"
op|']'
op|'.'
name|'remove'
op|'('
name|'existed'
op|')'
newline|'\n'
dedent|''
name|'else'
op|':'
newline|'\n'
indent|'                '
name|'instance'
op|'.'
name|'pci_devices'
op|'.'
name|'objects'
op|'.'
name|'remove'
op|'('
name|'existed'
op|')'
newline|'\n'
nl|'\n'
dedent|''
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable'
newline|'\n'
DECL|member|save
name|'def'
name|'save'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'if'
name|'self'
op|'.'
name|'status'
op|'=='
string|"'removed'"
op|':'
newline|'\n'
indent|'            '
name|'self'
op|'.'
name|'status'
op|'='
string|"'deleted'"
newline|'\n'
name|'db'
op|'.'
name|'pci_device_destroy'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'compute_node_id'
op|','
name|'self'
op|'.'
name|'address'
op|')'
newline|'\n'
dedent|''
name|'elif'
name|'self'
op|'.'
name|'status'
op|'!='
string|"'deleted'"
op|':'
newline|'\n'
indent|'            '
name|'updates'
op|'='
name|'self'
op|'.'
name|'obj_get_changes'
op|'('
op|')'
newline|'\n'
name|'if'
string|"'extra_info'"
name|'in'
name|'updates'
op|':'
newline|'\n'
indent|'                '
name|'updates'
op|'['
string|"'extra_info'"
op|']'
op|'='
name|'jsonutils'
op|'.'
name|'dumps'
op|'('
name|'updates'
op|'['
string|"'extra_info'"
op|']'
op|')'
newline|'\n'
dedent|''
name|'if'
name|'updates'
op|':'
newline|'\n'
indent|'                '
name|'db_pci'
op|'='
name|'db'
op|'.'
name|'pci_device_update'
op|'('
name|'context'
op|','
name|'self'
op|'.'
name|'compute_node_id'
op|','
nl|'\n'
name|'self'
op|'.'
name|'address'
op|','
name|'updates'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'self'
op|','
name|'db_pci'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|function|_make_pci_list
dedent|''
dedent|''
dedent|''
dedent|''
name|'def'
name|'_make_pci_list'
op|'('
name|'context'
op|','
name|'pci_list'
op|','
name|'db_list'
op|')'
op|':'
newline|'\n'
indent|'    '
name|'pci_list'
op|'.'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'for'
name|'pci'
name|'in'
name|'db_list'
op|':'
newline|'\n'
indent|'        '
name|'pci_obj'
op|'='
name|'PciDevice'
op|'.'
name|'_from_db_object'
op|'('
name|'context'
op|','
name|'PciDevice'
op|'('
op|')'
op|','
name|'pci'
op|')'
newline|'\n'
name|'pci_list'
op|'.'
name|'objects'
op|'.'
name|'append'
op|'('
name|'pci_obj'
op|')'
newline|'\n'
nl|'\n'
dedent|''
name|'pci_list'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
name|'return'
name|'pci_list'
newline|'\n'
nl|'\n'
nl|'\n'
DECL|class|PciDeviceList
dedent|''
name|'class'
name|'PciDeviceList'
op|'('
name|'base'
op|'.'
name|'ObjectListBase'
op|','
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
comment|'#              PciDevice <= 1.1'
nl|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'objects'"
op|':'
name|'fields'
op|'.'
name|'ListOfObjectsField'
op|'('
string|"'PciDevice'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
DECL|variable|child_versions
name|'child_versions'
op|'='
op|'{'
nl|'\n'
string|"'1.0'"
op|':'
string|"'1.1'"
op|','
nl|'\n'
comment|'# NOTE(danms): PciDevice was at 1.1 before we added this'
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'PciDeviceList'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|')'
newline|'\n'
name|'self'
op|'.'
name|'objects'
op|'='
op|'['
op|']'
newline|'\n'
name|'self'
op|'.'
name|'obj_reset_changes'
op|'('
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_compute_node
name|'def'
name|'get_by_compute_node'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'node_id'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_dev_list'
op|'='
name|'db'
op|'.'
name|'pci_device_get_all_by_node'
op|'('
name|'context'
op|','
name|'node_id'
op|')'
newline|'\n'
name|'return'
name|'_make_pci_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_dev_list'
op|')'
newline|'\n'
nl|'\n'
dedent|''
op|'@'
name|'base'
op|'.'
name|'remotable_classmethod'
newline|'\n'
DECL|member|get_by_instance_uuid
name|'def'
name|'get_by_instance_uuid'
op|'('
name|'cls'
op|','
name|'context'
op|','
name|'uuid'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'db_dev_list'
op|'='
name|'db'
op|'.'
name|'pci_device_get_all_by_instance_uuid'
op|'('
name|'context'
op|','
name|'uuid'
op|')'
newline|'\n'
name|'return'
name|'_make_pci_list'
op|'('
name|'context'
op|','
name|'cls'
op|'('
op|')'
op|','
name|'db_dev_list'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit

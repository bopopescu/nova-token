begin_unit
comment|'# All Rights Reserved.'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Licensed under the Apache License, Version 2.0 (the "License"); you may'
nl|'\n'
comment|'#    not use this file except in compliance with the License. You may obtain'
nl|'\n'
comment|'#    a copy of the License at'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#         http://www.apache.org/licenses/LICENSE-2.0'
nl|'\n'
comment|'#'
nl|'\n'
comment|'#    Unless required by applicable law or agreed to in writing, software'
nl|'\n'
comment|'#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT'
nl|'\n'
comment|'#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the'
nl|'\n'
comment|'#    License for the specific language governing permissions and limitations'
nl|'\n'
comment|'#    under the License.'
nl|'\n'
nl|'\n'
nl|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'base'
newline|'\n'
name|'from'
name|'nova'
op|'.'
name|'objects'
name|'import'
name|'fields'
newline|'\n'
name|'from'
name|'nova'
name|'import'
name|'rpc'
newline|'\n'
nl|'\n'
nl|'\n'
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|EventType
name|'class'
name|'EventType'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'object'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'action'"
op|':'
name|'fields'
op|'.'
name|'NotificationActionField'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'phase'"
op|':'
name|'fields'
op|'.'
name|'NotificationPhaseField'
op|'('
name|'nullable'
op|'='
name|'True'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|to_notification_event_type_field
name|'def'
name|'to_notification_event_type_field'
op|'('
name|'self'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Serialize the object to the wire format."""'
newline|'\n'
name|'s'
op|'='
string|"'%s.%s'"
op|'%'
op|'('
name|'self'
op|'.'
name|'object'
op|','
name|'self'
op|'.'
name|'action'
op|')'
newline|'\n'
name|'if'
name|'self'
op|'.'
name|'obj_attr_is_set'
op|'('
string|"'phase'"
op|')'
op|':'
newline|'\n'
indent|'            '
name|'s'
op|'+='
string|"'.%s'"
op|'%'
name|'self'
op|'.'
name|'phase'
newline|'\n'
dedent|''
name|'return'
name|'s'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Note(gibi): It is explicitly not registered as this class shall not be used'
nl|'\n'
comment|'# directly, it is just a base class for notification payloads.'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|NotificationPayloadBase
name|'class'
name|'NotificationPayloadBase'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for the payload of versioned notifications."""'
newline|'\n'
comment|'# SCHEMA defines how to populate the payload fields. It is a dictionary'
nl|'\n'
comment|'# where every key value pair has the following format:'
nl|'\n'
comment|'# <payload_field_name>: (<data_source_name>,'
nl|'\n'
comment|'#                        <field_of_the_data_source>)'
nl|'\n'
comment|'# The <payload_field_name> is the name where the data will be stored in the'
nl|'\n'
comment|'# payload object, this field has to be defined as a field of the payload.'
nl|'\n'
comment|'# The <data_source_name> shall refer to name of the parameter passed as'
nl|'\n'
comment|"# kwarg to the payload's populate_schema() call and this object will be"
nl|'\n'
comment|'# used as the source of the data. The <field_of_the_data_source> shall be'
nl|'\n'
comment|'# a valid field of the passed argument.'
nl|'\n'
comment|'# The SCHEMA needs to be applied with the populate_schema() call before the'
nl|'\n'
comment|'# notification can be emitted.'
nl|'\n'
comment|'# The value of the payload.<payload_field_name> field will be set by the'
nl|'\n'
comment|'# <data_source_name>.<field_of_the_data_source> field. The'
nl|'\n'
comment|'# <data_source_name> will not be part of the payload object internal or'
nl|'\n'
comment|'# external representation.'
nl|'\n'
comment|'# Payload fields that are not set by the SCHEMA can be filled in the same'
nl|'\n'
comment|'# way as in any versioned object.'
nl|'\n'
DECL|variable|SCHEMA
name|'SCHEMA'
op|'='
op|'{'
op|'}'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
DECL|variable|VERSION
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|member|__init__
name|'def'
name|'__init__'
op|'('
name|'self'
op|','
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'super'
op|'('
name|'NotificationPayloadBase'
op|','
name|'self'
op|')'
op|'.'
name|'__init__'
op|'('
op|'*'
name|'args'
op|','
op|'**'
name|'kwargs'
op|')'
newline|'\n'
name|'self'
op|'.'
name|'populated'
op|'='
name|'not'
name|'self'
op|'.'
name|'SCHEMA'
newline|'\n'
nl|'\n'
DECL|member|populate_schema
dedent|''
name|'def'
name|'populate_schema'
op|'('
name|'self'
op|','
op|'**'
name|'kwargs'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Populate the object based on the SCHEMA and the source objects\n\n        :param kwargs: A dict contains the source object at the key defined in\n                       the SCHEMA\n        """'
newline|'\n'
name|'for'
name|'key'
op|','
op|'('
name|'obj'
op|','
name|'field'
op|')'
name|'in'
name|'self'
op|'.'
name|'SCHEMA'
op|'.'
name|'items'
op|'('
op|')'
op|':'
newline|'\n'
indent|'            '
name|'source'
op|'='
name|'kwargs'
op|'['
name|'obj'
op|']'
newline|'\n'
name|'if'
name|'source'
op|'.'
name|'obj_attr_is_set'
op|'('
name|'field'
op|')'
op|':'
newline|'\n'
indent|'                '
name|'setattr'
op|'('
name|'self'
op|','
name|'key'
op|','
name|'getattr'
op|'('
name|'source'
op|','
name|'field'
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
name|'self'
op|'.'
name|'populated'
op|'='
name|'True'
newline|'\n'
nl|'\n'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register'
newline|'\n'
DECL|class|NotificationPublisher
name|'class'
name|'NotificationPublisher'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
DECL|variable|VERSION
indent|'    '
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'host'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
string|"'binary'"
op|':'
name|'fields'
op|'.'
name|'StringField'
op|'('
name|'nullable'
op|'='
name|'False'
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
op|'@'
name|'classmethod'
newline|'\n'
DECL|member|from_service_obj
name|'def'
name|'from_service_obj'
op|'('
name|'cls'
op|','
name|'service'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'return'
name|'cls'
op|'('
name|'host'
op|'='
name|'service'
op|'.'
name|'host'
op|','
name|'binary'
op|'='
name|'service'
op|'.'
name|'binary'
op|')'
newline|'\n'
nl|'\n'
nl|'\n'
comment|'# Note(gibi): It is explicitly not registered as this class shall not be used'
nl|'\n'
comment|'# directly, it is just a base class for notification.'
nl|'\n'
dedent|''
dedent|''
op|'@'
name|'base'
op|'.'
name|'NovaObjectRegistry'
op|'.'
name|'register_if'
op|'('
name|'False'
op|')'
newline|'\n'
DECL|class|NotificationBase
name|'class'
name|'NotificationBase'
op|'('
name|'base'
op|'.'
name|'NovaObject'
op|')'
op|':'
newline|'\n'
indent|'    '
string|'"""Base class for versioned notifications.\n\n    Every subclass shall define a \'payload\' field.\n    """'
newline|'\n'
comment|'# Version 1.0: Initial version'
nl|'\n'
DECL|variable|VERSION
name|'VERSION'
op|'='
string|"'1.0'"
newline|'\n'
nl|'\n'
DECL|variable|fields
name|'fields'
op|'='
op|'{'
nl|'\n'
string|"'priority'"
op|':'
name|'fields'
op|'.'
name|'NotificationPriorityField'
op|'('
op|')'
op|','
nl|'\n'
string|"'event_type'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'EventType'"
op|')'
op|','
nl|'\n'
string|"'publisher'"
op|':'
name|'fields'
op|'.'
name|'ObjectField'
op|'('
string|"'NotificationPublisher'"
op|')'
op|','
nl|'\n'
op|'}'
newline|'\n'
nl|'\n'
DECL|member|_emit
name|'def'
name|'_emit'
op|'('
name|'self'
op|','
name|'context'
op|','
name|'event_type'
op|','
name|'publisher_id'
op|','
name|'payload'
op|')'
op|':'
newline|'\n'
indent|'        '
name|'notifier'
op|'='
name|'rpc'
op|'.'
name|'get_versioned_notifier'
op|'('
name|'publisher_id'
op|')'
newline|'\n'
name|'notify'
op|'='
name|'getattr'
op|'('
name|'notifier'
op|','
name|'self'
op|'.'
name|'priority'
op|')'
newline|'\n'
name|'notify'
op|'('
name|'context'
op|','
name|'event_type'
op|'='
name|'event_type'
op|','
name|'payload'
op|'='
name|'payload'
op|')'
newline|'\n'
nl|'\n'
DECL|member|emit
dedent|''
name|'def'
name|'emit'
op|'('
name|'self'
op|','
name|'context'
op|')'
op|':'
newline|'\n'
indent|'        '
string|'"""Send the notification."""'
newline|'\n'
name|'assert'
name|'self'
op|'.'
name|'payload'
op|'.'
name|'populated'
newline|'\n'
nl|'\n'
comment|'# Note(gibi): notification payload will be a newly populated object'
nl|'\n'
comment|'# therefore every field of it will look changed so this does not carry'
nl|'\n'
comment|'# any extra information so we drop this from the payload.'
nl|'\n'
name|'self'
op|'.'
name|'payload'
op|'.'
name|'obj_reset_changes'
op|'('
name|'recursive'
op|'='
name|'False'
op|')'
newline|'\n'
nl|'\n'
name|'self'
op|'.'
name|'_emit'
op|'('
name|'context'
op|','
nl|'\n'
name|'event_type'
op|'='
nl|'\n'
name|'self'
op|'.'
name|'event_type'
op|'.'
name|'to_notification_event_type_field'
op|'('
op|')'
op|','
nl|'\n'
name|'publisher_id'
op|'='
string|"'%s:%s'"
op|'%'
nl|'\n'
op|'('
name|'self'
op|'.'
name|'publisher'
op|'.'
name|'binary'
op|','
nl|'\n'
name|'self'
op|'.'
name|'publisher'
op|'.'
name|'host'
op|')'
op|','
nl|'\n'
name|'payload'
op|'='
name|'self'
op|'.'
name|'payload'
op|'.'
name|'obj_to_primitive'
op|'('
op|')'
op|')'
newline|'\n'
dedent|''
dedent|''
endmarker|''
end_unit
